name: HumanEval_135_can_arrange
language: julia
results:
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.3>\n@time can_arrange([1,2,4,3,5])\n</cell>\n\
    <code language=julia-1.3>\n@time can_arrange([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    @time can_arrange([1,2,4,3,5])\n</cell>\n<code language=julia-1.3>\n@time can_arrange([1,2,3])\n\
    </cell>\n<code language=julia-1.3>\n@time can_arrange([1,2,4,3,5])\n</cell>\n\
    <code language=julia-1.3>\n@time can_arrange([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    @time can_arrange([1,2,4,3,5])\n</cell>\n<code language=julia-1.3>\n@time can_arrange([1,2,3])\n\
    </cell>\n<code language=julia-1.3>\n@time can_arrange([1,2,4,3,5])\n</cell>\n\
    <code language=julia-1.3>\n@time can_arrange([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    @time can_arrange([1,2,4,3,5])\n</cell>\n<code language=julia-1.3>\n@time can_arrange([1,2,3])\n\
    </cell>\n<code language=julia-1.3>\n@time can_arrange([1,2,4,3,5])\n</cell>\n\
    <code language=julia-1.3>\n@time can_arrange([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    @time can_arrange([1,2,4,3,5])\n</cell>\n<code language=julia-1.3>\n@time can_arrange([1,2,3])\n\
    </cell>\n<code language=julia-1.3>\n@time can_arrange([1,2,4,3,5])\n</cell>\n\
    <code language=julia-1.3>\n@time can_arrange([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    @time can_arrange([1,2,4,3,5])\n</cell>\n<code language=julia-1.3>\n@time can_arrange([1,2,3])\n\
    </cell>\n<code language=julia-1.3>\n@time can_arrange([1,2,4,3,5])\n</cell>\n\
    <code language=julia-1.3>\n@time can_arrange([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    @time can_arrange([1,2,4,3,5])\n</cell>\n<code language=julia-1.3>\n@time can_arrange\n\
    using Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp96zmve9w.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp96zmve9w.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = -1\n    largestIndex = 0\n    for index in 1:length(arr)\n \
    \       if arr[index] > arr[largest]\n            largest = arr[index]\n     \
    \       largestIndex = index\n        end\n    end\n    return largestIndex\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_6dx65ts.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_6dx65ts.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpf6o_dpm1.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpf6o_dpm1.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.3>\n\"\"\"\n    can_arrange([1,2,4,3,5]) = 3\n\
    \    can_arrange([1,2,3]) = -1\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpyl1o0qsm.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpyl1o0qsm.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpzb0dszmw.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpzb0dszmw.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.4>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpe612qgqk.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpe612qgqk.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpxt88ju15.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpxt88ju15.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = -1\n    largestIndex = -1\n    for index in 1:length(arr)\n\
    \        if arr[index] > arr[largest]\n            largest = arr[index]\n    \
    \        largestIndex = index\n        end\n    end\n    return largestIndex\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert can_arrange([1,2,4,3,5]) == 3\n\
    @assert can_arrange([1,2,3]) == -1\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the number of elements in a given array which are\ngreater than\
    \ or equal to the element immediately preceding it. If no\nsuch element exists\
    \ then return -1. The given array will not contain\nduplicate values.\nusing Test\n\
    \n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5])\
    \ == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5,\
    \ 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([]))\
    \ == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpre63jymk.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpre63jymk.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = -1\n    largestIndex = 0\n    for index in 1:length(arr)\n \
    \       if arr[index] <= arr[largest]\n            largest = index\n         \
    \   largestIndex = index\n        else\n            break\n        end\n    end\n\
    \    return largestIndex\nend\n</cell>\n<code language=julia-1.5>\n@assert can_arrange([1,2,4,3,5])\
    \ == 3\n@assert can_arrange([1,2,3]) == -1\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns true if the array arr has all unique elements. \nThe\
    \ function should work for any array type.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmppnj9hpz6.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmppnj9hpz6.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = -1\n    largestIndex = 0\n    for index in 1:length(arr)\n \
    \       if arr[index] > arr[largest]\n            largest = arr[index]\n     \
    \       largestIndex = index\n        end\n    end\n    return largestIndex\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that returns an array of all\
    \ possible permutations of the given array. For example, if the input was [1,2,3]\
    \ then the output would be [1,2,3], [1,3,2], [2,1,3], [2,3,1], [3,1,2], and [3,2,1].\n\
    using Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpwrqcvlb5.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpwrqcvlb5.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = -1\n    largestIndex = 0\n    for index in 1:length(arr)\n \
    \       if arr[index] <= arr[largest]\n            largest = arr[index]\n    \
    \        largestIndex = index\n        end\n    end\n    return largestIndex\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_s2_v23y.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_s2_v23y.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = -1\n    largestIndex = 0\n    for index in 1:length(arr)\n \
    \       if arr[index] > arr[largest]\n            largest = arr[index]\n     \
    \       largestIndex = index\n        end\n    end\n    return largestIndex\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmppwhj4fak.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmppwhj4fak.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = -1\n    for i in 1:length(arr)\n        if arr[i] > arr[largest]\n\
    \            largest = i\n        end\n    end\n    return largest\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\
    \t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\
    \t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8,\
    \ 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpi7rfv0xs.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpi7rfv0xs.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = -1\n    for i in 1:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    using Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9ra52rcs.jl:24\n  Expression: candidate([1,\
    \ 2, 4, 3, 5]) == 3\n   Evaluated: 5 == 3\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmp9ra52rcs.jl:24\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9ra52rcs.jl:23\ntest set: Test Failed at /tmp/tmp9ra52rcs.jl:25\n\
    \  Expression: candidate([1, 2, 4, 5]) == -1\n   Evaluated: 5 == -1\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9ra52rcs.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9ra52rcs.jl:23\ntest set: Test Failed at /tmp/tmp9ra52rcs.jl:26\n\
    \  Expression: candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2\n   Evaluated: 10\
    \ == 2\nStacktrace:\n [1] top-level scope at /tmp/tmp9ra52rcs.jl:26\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9ra52rcs.jl:23\ntest set: Test Failed at /tmp/tmp9ra52rcs.jl:27\n\
    \  Expression: candidate([4, 8, 5, 7, 3]) == 4\n   Evaluated: 8 == 4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9ra52rcs.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9ra52rcs.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9ra52rcs.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.5>\n@time can_arrange([1,2,4,3,5])\n</cell>\n\
    <code language=julia-1.5>\n@time can_arrange([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    @time can_arrange([1,2,4,3,5])\n</cell>\n<code language=julia-1.5>\n@time can_arrange([1,2,3])\n\
    </cell>\n<text>\nExercise\nWrite a function that returns the largest index of\
    \ an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpd8c587w1.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpd8c587w1.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert can_arrange([1,2,4,3,5]) == 3\n@assert\
    \ can_arrange([1,2,3]) == -1\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the index of the element in the given array that is closest to the given\
    \ number in the following way:\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\
    \t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\
    \t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8,\
    \ 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpevgn2o00.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpevgn2o00.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpuuk1xnrc.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpuuk1xnrc.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        else\n            return -1\n        end\n\
    \    end\n    return largest\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5])\
    \ == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5,\
    \ 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([]))\
    \ == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpnpdacnn1.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpnpdacnn1.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    largestIndex = -1\n    for index in 2:length(arr)\n\
    \        if arr[index] > largest\n            largest = arr[index]\n         \
    \   largestIndex = index\n        end\n    end\n    return largestIndex\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpirqn4dqo.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpirqn4dqo.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    using Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpltwwcn8s.jl:24\n  Expression: candidate([1,\
    \ 2, 4, 3, 5]) == 3\n   Evaluated: 5 == 3\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpltwwcn8s.jl:24\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpltwwcn8s.jl:23\ntest set: Test Failed at /tmp/tmpltwwcn8s.jl:25\n\
    \  Expression: candidate([1, 2, 4, 5]) == -1\n   Evaluated: 5 == -1\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpltwwcn8s.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpltwwcn8s.jl:23\ntest set: Test Failed at /tmp/tmpltwwcn8s.jl:26\n\
    \  Expression: candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2\n   Evaluated: 10\
    \ == 2\nStacktrace:\n [1] top-level scope at /tmp/tmpltwwcn8s.jl:26\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpltwwcn8s.jl:23\ntest set: Test Failed at /tmp/tmpltwwcn8s.jl:27\n\
    \  Expression: candidate([4, 8, 5, 7, 3]) == 4\n   Evaluated: 8 == 4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpltwwcn8s.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpltwwcn8s.jl:23\ntest set: Error During Test at\
    \ /tmp/tmpltwwcn8s.jl:28\n  Test threw exception\n  Expression: candidate(Vector{Int64}([]))\
    \ == -1\n  BoundsError: attempt to access 0-element Array{Int64,1} at index [1]\n\
    \  Stacktrace:\n   [1] getindex at ./array.jl:788 [inlined]\n   [2] can_arrange(::Array{Int64,1})\
    \ at /tmp/tmpltwwcn8s.jl:11\n   [3] top-level scope at /tmp/tmpltwwcn8s.jl:28\n\
    \   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpltwwcn8s.jl:23\n  \nTest Summary: | Fail  Error\
    \  Total\ntest set      |    4      1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpltwwcn8s.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp71tmegp0.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp71tmegp0.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpaolquhnv.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpaolquhnv.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for x in arr[2:end]\n        if x > largest\n  \
    \          largest = x\n        end\n    end\n    return largest\nend\n</cell>\n\
    <text>\nExercise 4\nWrite a function that returns the index of the element in\
    \ the given array which\n    has the smallest value. If there is no such element\
    \ then return -1.\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t\
    @test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\
    \t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8,\
    \ 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpqp3sv85c.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpqp3sv85c.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the index of the element\
    \ in the given array that is closest to the given value.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\
    \t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8,\
    \ 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([]))\
    \ == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpk_ppngn9.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpk_ppngn9.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.3>\n@assert can_arrange([1,2,4,3,5]) == 3\n@assert\
    \ can_arrange([1,2,3]) == -1\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the number of times a given value occurs in an array. For example,\n\
    using Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8nei97va.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp8nei97va.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert can_arrange([1,2,4,3,5]) == 3\n@assert\
    \ can_arrange([1,2,3]) == -1\n</cell>\n<text>\n4.3 Finding the index of an element\
    \ in a sorted array\nGiven a sorted array arr of n integers, return the index\
    \ if it exists and -1 if it does not. \nThe array arr will not be empty and will\
    \ not contain duplicate values.\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\
    \t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\
    \t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8,\
    \ 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpgmu92i4d.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpgmu92i4d.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert can_arrange([1,2,4,3,5]) == 3\n@assert\
    \ can_arrange([1,2,3]) == -1\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the index of the element in the array which has the largest value greater\
    \ than or equal to the element immediately preceding it. Return -1 if no such\
    \ element exists.\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t\
    @test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\
    \t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8,\
    \ 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpnllg5dwc.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpnllg5dwc.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        else\n            return -1\n        end\n\
    \    end\n    return largest\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5])\
    \ == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5,\
    \ 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([]))\
    \ == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp1wsuv73v.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp1wsuv73v.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmph9drg4qm.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmph9drg4qm.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = -1\n    for i in 1:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<text>\nQuestion 3\nWrite a function that returns true if the given array\
    \ is sorted in ascending order.\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\
    \t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\
    \t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8,\
    \ 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpb9auqv9n.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpb9auqv9n.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = -1\n    largestIndex = 0\n    for index in 1:length(arr)\n \
    \       if arr[index] > arr[largest]\n            largest = arr[index]\n     \
    \       largestIndex = index\n        end\n    end\n    return largestIndex\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp5b9kcd2l.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp5b9kcd2l.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = Int64(-1)\n    largest = arr[1] if arr[1] > largest else largest\n\
    \    for i in 2:length(arr)\n        if arr[i] > largest\n            largest\
    \ = arr[i]\n        end\n    end\n    return largest\nend\n</cell>\n<code language=julia-1.4>\n\
    using Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"if\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp9i290745.jl:12\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp9i290745.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        else\n            return -1\n        end\n\
    \    end\n    return largest\nend\n</cell>\n<code language=julia-1.4>\nusing Test\n\
    \n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5])\
    \ == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5,\
    \ 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([]))\
    \ == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpgudxqa70.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpgudxqa70.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = -1\n    for i in 1:length(arr)\n        if arr[i] > arr[largest]\n\
    \            largest = i\n        end\n    end\n    return largest\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\
    \t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\
    \t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8,\
    \ 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp5i1vhw5r.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp5i1vhw5r.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = -1\n    largestIndex = -1\n    for index in 1:length(arr)\n\
    \        if arr[index] > arr[largest]\n            largest = arr[index]\n    \
    \        largestIndex = index\n        end\n    end\n    return largestIndex\n\
    end\n</cell>\n<text>\nQuestion 3\nWrite a function that returns the index of the\
    \ element in the given array that is closest to the given value. If no such element\
    \ exists then return -1. The given array will not contain duplicate values.\n\
    using Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpu8qo2u4r.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpu8qo2u4r.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.0>\n@time can_arrange([1,2,4,3,5])\n</cell>\n\
    <code language=julia-1.0>\n@time can_arrange([1,2,3])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the index of the element in the given array\
    \ that is the\nlargest and also not greater than the element immediately preceding\
    \ it. Return -1\nif no such element exists.\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpust11bn3.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpust11bn3.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = -1\n    largestIndex = 0\n    for index in 1:length(arr)\n \
    \       if arr[index] > arr[largest]\n            largest = arr[index]\n     \
    \       largestIndex = index\n        end\n    end\n    return largestIndex\n\
    end\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n\"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpwhl6p0uv.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpwhl6p0uv.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = -1\n    largestIndex = 0\n    for index in 1:length(arr)\n \
    \       if arr[index] > arr[largest]\n            largest = arr[index]\n     \
    \       largestIndex = index\n        end\n    end\n    return largestIndex\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpgxc5540a.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpgxc5540a.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        else\n            return -1\n        end\n\
    \    end\n    return largest\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpu8j4w60k.jl:26\n  Expression: candidate([1,\
    \ 2, 4, 3, 5]) == 3\n   Evaluated: -1 == 3\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpu8j4w60k.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpu8j4w60k.jl:25\ntest set: Test Failed at /tmp/tmpu8j4w60k.jl:27\n\
    \  Expression: candidate([1, 2, 4, 5]) == -1\n   Evaluated: 5 == -1\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpu8j4w60k.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpu8j4w60k.jl:25\ntest set: Test Failed at /tmp/tmpu8j4w60k.jl:28\n\
    \  Expression: candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2\n   Evaluated: -1\
    \ == 2\nStacktrace:\n [1] top-level scope at /tmp/tmpu8j4w60k.jl:28\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpu8j4w60k.jl:25\ntest set: Test Failed at /tmp/tmpu8j4w60k.jl:29\n\
    \  Expression: candidate([4, 8, 5, 7, 3]) == 4\n   Evaluated: -1 == 4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpu8j4w60k.jl:29\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpu8j4w60k.jl:25\ntest set: Error During Test at\
    \ /tmp/tmpu8j4w60k.jl:30\n  Test threw exception\n  Expression: candidate(Vector{Int64}([]))\
    \ == -1\n  BoundsError: attempt to access 0-element Array{Int64,1} at index [1]\n\
    \  Stacktrace:\n   [1] getindex at ./array.jl:788 [inlined]\n   [2] can_arrange(::Array{Int64,1})\
    \ at /tmp/tmpu8j4w60k.jl:11\n   [3] top-level scope at /tmp/tmpu8j4w60k.jl:30\n\
    \   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpu8j4w60k.jl:25\n  \nTest Summary: | Fail  Error\
    \  Total\ntest set      |    4      1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpu8j4w60k.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for x in arr[2:end]\n        if x <= largest\n \
    \           largest = x\n        else\n            break\n    end\n    return\
    \ largest\nend\n</cell>\n<code language=julia-1.5>\n@assert can_arrange([1,2,4,3,5])\
    \ == 3\n@assert can_arrange([1,2,3]) == -1\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the number of times an element appears in an array.\
    \ For example, the number of times 3 appears in [1,2,3,4,3] is 3.\nusing Test\n\
    \n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5])\
    \ == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5,\
    \ 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([]))\
    \ == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp7ve0mz31.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp7ve0mz31.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a vector and returns\
    \ the number of unique elements in it. \nThe vector can contain duplicates.\n\
    using Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmplxkaafib.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmplxkaafib.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<text>\nProblem 4\nWrite a function that returns the number of elements\
    \ in a vector which are not equal to zero.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpbud43dr6.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpbud43dr6.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a vector and returns\
    \ the number of unique elements in the vector. \nIf there are multiple elements\
    \ that are the same, only count the element once.\nusing Test\n\n@testset begin\n\
    \ncandidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4osk5_72.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp4osk5_72.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpaa5oxls0.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpaa5oxls0.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = -1\n    largestIndex = -1\n    for index in 1:length(arr)\n\
    \        if arr[index] <= arr[largest]\n            largest = arr[index]\n   \
    \         largestIndex = index\n        else\n            break\n        end\n\
    \    end\n    return largestIndex\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1, 2,\
    \ 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpfv1o1q_x.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpfv1o1q_x.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert can_arrange([1,2,4,3,5]) == 3\n@assert\
    \ can_arrange([1,2,3]) == -1\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the number of elements in a vector that are greater than or equal to\
    \ some value.\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpph8w49pa.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpph8w49pa.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert can_arrange([1,2,4,3,5]) == 3\n@assert\
    \ can_arrange([1,2,3]) == -1\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the number of elements in a vector which are not equal to zero.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1, 2,\
    \ 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3wc91nvt.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp3wc91nvt.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<text>\nQ: What is the largest index of an element which is not greater\
    \ than or equal to the element immediately preceding it?\nusing Test\n\n@testset\
    \ begin\n\ncandidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\
    \t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8,\
    \ 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([]))\
    \ == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpq0gascp0.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpq0gascp0.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<text>\nExercise 4\nWrite a function that takes a vector and returns\
    \ the number of unique elements in the vector. \nThe vector will not contain duplicate\
    \ values.\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpc81v5daz.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpc81v5daz.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = -1\n    largestIndex = 0\n    for index in 1:length(arr)\n \
    \       if arr[index] > arr[largest]\n            largest = arr[index]\n     \
    \       largestIndex = index\n        end\n    end\n    return largestIndex\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpow32lsv1.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpow32lsv1.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    using Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpbmkp0e_w.jl:24\n  Expression: candidate([1,\
    \ 2, 4, 3, 5]) == 3\n   Evaluated: 5 == 3\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpbmkp0e_w.jl:24\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpbmkp0e_w.jl:23\ntest set: Test Failed at /tmp/tmpbmkp0e_w.jl:25\n\
    \  Expression: candidate([1, 2, 4, 5]) == -1\n   Evaluated: 5 == -1\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpbmkp0e_w.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpbmkp0e_w.jl:23\ntest set: Test Failed at /tmp/tmpbmkp0e_w.jl:26\n\
    \  Expression: candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2\n   Evaluated: 10\
    \ == 2\nStacktrace:\n [1] top-level scope at /tmp/tmpbmkp0e_w.jl:26\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpbmkp0e_w.jl:23\ntest set: Test Failed at /tmp/tmpbmkp0e_w.jl:27\n\
    \  Expression: candidate([4, 8, 5, 7, 3]) == 4\n   Evaluated: 8 == 4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpbmkp0e_w.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpbmkp0e_w.jl:23\ntest set: Error During Test at\
    \ /tmp/tmpbmkp0e_w.jl:28\n  Test threw exception\n  Expression: candidate(Vector{Int64}([]))\
    \ == -1\n  BoundsError: attempt to access 0-element Array{Int64,1} at index [1]\n\
    \  Stacktrace:\n   [1] getindex at ./array.jl:788 [inlined]\n   [2] can_arrange(::Array{Int64,1})\
    \ at /tmp/tmpbmkp0e_w.jl:11\n   [3] top-level scope at /tmp/tmpbmkp0e_w.jl:28\n\
    \   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpbmkp0e_w.jl:23\n  \nTest Summary: | Fail  Error\
    \  Total\ntest set      |    4      1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbmkp0e_w.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the number of elements\
    \ in a vector which are greater than\nor equal to another given element. For example,\n\
    using Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpbatd05cj.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpbatd05cj.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.0>\n@assert can_arrange([1,2,4,3,5]) == 3\n@assert\
    \ can_arrange([1,2,3]) == -1\n</cell>\n<text>\n4.3 Finding the median of an array\n\
    The median is the value separating the higher half of a data set from the lower\
    \ half. \nThe median of a data set is the value separating the higher half of\
    \ a data set from the lower half. \nThe median of a data set is the value separating\
    \ the higher half of a data set from the lower half. \nThe median of a data set\
    \ is the value separating the higher half of a data set from the lower half. \n\
    The median of a data set is the value separating the higher half of a data set\
    \ from the lower half. \nThe median of a data set is the value separating the\
    \ higher half of a data set from the lower half. \nThe median of a data set is\
    \ the value separating the higher half of a data set from the lower half. \nThe\
    \ median of a data set is the value separating the higher half of a data set from\
    \ the lower half. \nThe median of a data set is the value separating the higher\
    \ half of a data set from the lower half. \nThe median of a data set is the value\
    \ separating the higher half of a data set from the lower half. \nThe median of\
    \ a data set is the value separating the higher half of a data set from the lower\
    \ half. \nThe median of a data set is the value separating the higher half of\
    \ a data set from the lower half. \nThe median of a data set is the value separating\
    \ the higher half of a data set from the lower half. \nThe median of a data set\
    \ is the value separating the higher half of a data set from the lower half. \n\
    The median of a data set is the value separating the higher half of a data set\
    \ from the lower half. \nThe median of a data set is the value separating the\
    \ higher half of a data set from the lower half. \nThe median of a data set is\
    \ the value separating the higher half of a data set from the lower half. \nThe\
    \ median of a data set is the value separating the higher half of a data set from\
    \ the lower half. \nThe median of a data set is the value separating the higher\
    \ half of a data set from the lower half. \nThe median of a data set is the value\
    \ separating the higher half of a data set from the lower half. \nThe median of\
    \ a data set is the value separating the higher half of a data set from the lower\
    \ half. \nThe median of a data set is the value separating the higher half of\
    \ a data set from the lower half. \nThe median of a data set is the value separating\
    \ the higher half of a data \nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\
    \t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\
    \t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8,\
    \ 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpujrhwthi.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpujrhwthi.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for x in arr[2:end]\n        if x > largest\n  \
    \          largest = x\n        end\n    end\n    return largest\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert can_arrange([1,2,4,3,5]) == 3\n@assert can_arrange([1,2,3])\
    \ == -1\n</cell>\n<text>\nExercise 2\nWrite a function that returns true if the\
    \ given array contains no duplicates. \nThe given array will not contain duplicate\
    \ values.\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp53xmxibu.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp53xmxibu.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = -1\n    largestIndex = 0\n    for index in 1:length(arr)\n \
    \       if arr[index] > arr[largest]\n            largest = arr[index]\n     \
    \       largestIndex = index\n        end\n    end\n    return largestIndex\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert can_arrange([1,2,4,3,5]) == 3\n\
    @assert can_arrange([1,2,3]) == -1\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns true if the array arr has all unique elements. \nIf it does not,\
    \ then return false. \nThe given array will not contain duplicate values.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1, 2,\
    \ 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp03yusaz2.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp03yusaz2.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = -1\n    for x in arr\n        if x > largest\n            largest\
    \ = x\n        end\n    end\n    return largest\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp5aqvt4ua.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp5aqvt4ua.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    using Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpg4drnt97.jl:24\n  Expression: candidate([1,\
    \ 2, 4, 3, 5]) == 3\n   Evaluated: 5 == 3\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpg4drnt97.jl:24\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpg4drnt97.jl:23\ntest set: Test Failed at /tmp/tmpg4drnt97.jl:25\n\
    \  Expression: candidate([1, 2, 4, 5]) == -1\n   Evaluated: 5 == -1\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpg4drnt97.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpg4drnt97.jl:23\ntest set: Test Failed at /tmp/tmpg4drnt97.jl:26\n\
    \  Expression: candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2\n   Evaluated: 10\
    \ == 2\nStacktrace:\n [1] top-level scope at /tmp/tmpg4drnt97.jl:26\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpg4drnt97.jl:23\ntest set: Test Failed at /tmp/tmpg4drnt97.jl:27\n\
    \  Expression: candidate([4, 8, 5, 7, 3]) == 4\n   Evaluated: 8 == 4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpg4drnt97.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpg4drnt97.jl:23\ntest set: Error During Test at\
    \ /tmp/tmpg4drnt97.jl:28\n  Test threw exception\n  Expression: candidate(Vector{Int64}([]))\
    \ == -1\n  BoundsError: attempt to access 0-element Array{Int64,1} at index [1]\n\
    \  Stacktrace:\n   [1] getindex at ./array.jl:788 [inlined]\n   [2] can_arrange(::Array{Int64,1})\
    \ at /tmp/tmpg4drnt97.jl:11\n   [3] top-level scope at /tmp/tmpg4drnt97.jl:28\n\
    \   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpg4drnt97.jl:23\n  \nTest Summary: | Fail  Error\
    \  Total\ntest set      |    4      1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpg4drnt97.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpa5a0kwps.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpa5a0kwps.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    using Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp54x2o7rb.jl:24\n  Expression: candidate([1,\
    \ 2, 4, 3, 5]) == 3\n   Evaluated: 5 == 3\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmp54x2o7rb.jl:24\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp54x2o7rb.jl:23\ntest set: Test Failed at /tmp/tmp54x2o7rb.jl:25\n\
    \  Expression: candidate([1, 2, 4, 5]) == -1\n   Evaluated: 5 == -1\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp54x2o7rb.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp54x2o7rb.jl:23\ntest set: Test Failed at /tmp/tmp54x2o7rb.jl:26\n\
    \  Expression: candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2\n   Evaluated: 10\
    \ == 2\nStacktrace:\n [1] top-level scope at /tmp/tmp54x2o7rb.jl:26\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp54x2o7rb.jl:23\ntest set: Test Failed at /tmp/tmp54x2o7rb.jl:27\n\
    \  Expression: candidate([4, 8, 5, 7, 3]) == 4\n   Evaluated: 8 == 4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp54x2o7rb.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp54x2o7rb.jl:23\ntest set: Error During Test at\
    \ /tmp/tmp54x2o7rb.jl:28\n  Test threw exception\n  Expression: candidate(Vector{Int64}([]))\
    \ == -1\n  BoundsError: attempt to access 0-element Array{Int64,1} at index [1]\n\
    \  Stacktrace:\n   [1] getindex at ./array.jl:788 [inlined]\n   [2] can_arrange(::Array{Int64,1})\
    \ at /tmp/tmp54x2o7rb.jl:11\n   [3] top-level scope at /tmp/tmp54x2o7rb.jl:28\n\
    \   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmp54x2o7rb.jl:23\n  \nTest Summary: | Fail  Error\
    \  Total\ntest set      |    4      1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp54x2o7rb.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = -1\n    largestIndex = 0\n    for index in 1:length(arr)\n \
    \       if arr[index] <= arr[largest]\n            largest = index\n        else\n\
    \            largestIndex = index\n        end\n    end\n    return largestIndex\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpdpwi6q7r.jl:22\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpdpwi6q7r.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmplcs4v4ss.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmplcs4v4ss.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = -1\n    largestIndex = 0\n    for i = 1:length(arr)\n      \
    \  if arr[i] > arr[largest]\n            largest = arr[i]\n            largestIndex\
    \ = i\n        end\n    end\n    return largestIndex\nend\n</cell>\n<code language=julia-1.5>\n\
    @time can_arrange([1,2,4,3,5])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the number of times an element appears in an array. \nThe given\
    \ array will not contain duplicate values.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp40f2zoqu.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp40f2zoqu.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = -1\n    largestIndex = -1\n    for index in 1:length(arr)\n\
    \        if arr[index] > arr[largest]\n            largest = arr[index]\n    \
    \        largestIndex = index\n        end\n    end\n    return largestIndex\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that returns the index of the\
    \ first element in a vector that is greater than or equal to the element immediately\
    \ preceding it. Return -1 if no such element exists.\nusing Test\n\n@testset begin\n\
    \ncandidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpd180c5ga.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpd180c5ga.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpiydt08o_.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpiydt08o_.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    largestIndex = 1\n    for index in 2:length(arr)\n\
    \        if arr[index] > largest\n            largest = arr[index]\n         \
    \   largestIndex = index\n        end\n    end\n    return largestIndex\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmptemnuctp.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmptemnuctp.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    using Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpq0mywob2.jl:24\n  Expression: candidate([1,\
    \ 2, 4, 3, 5]) == 3\n   Evaluated: 5 == 3\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpq0mywob2.jl:24\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpq0mywob2.jl:23\ntest set: Test Failed at /tmp/tmpq0mywob2.jl:25\n\
    \  Expression: candidate([1, 2, 4, 5]) == -1\n   Evaluated: 5 == -1\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpq0mywob2.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpq0mywob2.jl:23\ntest set: Test Failed at /tmp/tmpq0mywob2.jl:26\n\
    \  Expression: candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2\n   Evaluated: 10\
    \ == 2\nStacktrace:\n [1] top-level scope at /tmp/tmpq0mywob2.jl:26\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpq0mywob2.jl:23\ntest set: Test Failed at /tmp/tmpq0mywob2.jl:27\n\
    \  Expression: candidate([4, 8, 5, 7, 3]) == 4\n   Evaluated: 8 == 4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpq0mywob2.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpq0mywob2.jl:23\ntest set: Error During Test at\
    \ /tmp/tmpq0mywob2.jl:28\n  Test threw exception\n  Expression: candidate(Vector{Int64}([]))\
    \ == -1\n  BoundsError: attempt to access 0-element Array{Int64,1} at index [1]\n\
    \  Stacktrace:\n   [1] getindex at ./array.jl:788 [inlined]\n   [2] can_arrange(::Array{Int64,1})\
    \ at /tmp/tmpq0mywob2.jl:11\n   [3] top-level scope at /tmp/tmpq0mywob2.jl:28\n\
    \   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpq0mywob2.jl:23\n  \nTest Summary: | Fail  Error\
    \  Total\ntest set      |    4      1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpq0mywob2.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<text>\nExercise 4\nWrite a function that returns the index of the element\
    \ in the given array which has the largest value. The given array will not contain\
    \ duplicate values.\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\
    \t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\
    \t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8,\
    \ 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_43x_3mb.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_43x_3mb.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_zp4xv5w.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_zp4xv5w.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = -1\n    for x in arr\n        if x > largest\n            largest\
    \ = x\n        end\n    end\n    return largest\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert can_arrange([1,2,4,3,5]) == 3\n@assert can_arrange([1,2,3]) == -1\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of elements in the\
    \ array which are not equal to its index.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp5i49r1xw.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp5i49r1xw.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns true if the given array\
    \ contains no duplicates.\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\
    \t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\
    \t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8,\
    \ 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmput4hqt8t.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmput4hqt8t.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = -1\n    largestIndex = 0\n    for index in 1:length(arr)\n \
    \       if arr[index] > arr[largest]\n            largest = arr[index]\n     \
    \       largestIndex = index\n        end\n    end\n    return largestIndex\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that returns true if the array\
    \ arr has all unique elements. \nIf it does not, then return false. \nThe given\
    \ array will not contain duplicate values.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp76ltmd4z.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp76ltmd4z.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpq2idaa3j.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpq2idaa3j.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.3>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpbk7k0yjr.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpbk7k0yjr.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        else\n            return -1\n        end\n\
    \    end\n    return largest\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_y1_lpga.jl:26\n  Expression: candidate([1,\
    \ 2, 4, 3, 5]) == 3\n   Evaluated: -1 == 3\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmp_y1_lpga.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_y1_lpga.jl:25\ntest set: Test Failed at /tmp/tmp_y1_lpga.jl:27\n\
    \  Expression: candidate([1, 2, 4, 5]) == -1\n   Evaluated: 5 == -1\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_y1_lpga.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_y1_lpga.jl:25\ntest set: Test Failed at /tmp/tmp_y1_lpga.jl:28\n\
    \  Expression: candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2\n   Evaluated: -1\
    \ == 2\nStacktrace:\n [1] top-level scope at /tmp/tmp_y1_lpga.jl:28\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_y1_lpga.jl:25\ntest set: Test Failed at /tmp/tmp_y1_lpga.jl:29\n\
    \  Expression: candidate([4, 8, 5, 7, 3]) == 4\n   Evaluated: -1 == 4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_y1_lpga.jl:29\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_y1_lpga.jl:25\ntest set: Error During Test at\
    \ /tmp/tmp_y1_lpga.jl:30\n  Test threw exception\n  Expression: candidate(Vector{Int64}([]))\
    \ == -1\n  BoundsError: attempt to access 0-element Array{Int64,1} at index [1]\n\
    \  Stacktrace:\n   [1] getindex at ./array.jl:788 [inlined]\n   [2] can_arrange(::Array{Int64,1})\
    \ at /tmp/tmp_y1_lpga.jl:11\n   [3] top-level scope at /tmp/tmp_y1_lpga.jl:30\n\
    \   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmp_y1_lpga.jl:25\n  \nTest Summary: | Fail  Error\
    \  Total\ntest set      |    4      1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_y1_lpga.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = -1\n    largestIndex = 0\n    for i = 1:length(arr)\n      \
    \  if arr[i] > arr[largest]\n            largest = arr[i]\n            largestIndex\
    \ = i\n        end\n    end\n    return largestIndex\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert can_arrange([1,2,4,3,5]) == 3\n@assert can_arrange([1,2,3]) == -1\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns true if the given array contains\
    \ no duplicates.\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t\
    @test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\
    \t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8,\
    \ 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp12377k9n.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp12377k9n.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = -1\n    largestIndex = 0\n    for i = 1:length(arr)\n      \
    \  if arr[i] > largest\n            largest = arr[i]\n            largestIndex\
    \ = i\n        end\n    end\n    return largestIndex\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert can_arrange([1,2,4,3,5]) == 3\n@assert can_arrange([1,2,3]) == -1\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of unique elements\
    \ in a given array.\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\
    \t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\
    \t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8,\
    \ 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp33f0bypz.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp33f0bypz.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = -1\n    largest = arr[1]\n    for i in 2:length(arr)\n     \
    \   if arr[i] > largest\n            largest = arr[i]\n        end\n    end\n\
    \    return largest\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\
    \t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8,\
    \ 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([]))\
    \ == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2h_ibwbn.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp2h_ibwbn.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = -1\n    largestIndex = 0\n    for index in 1:length(arr)\n \
    \       if arr[index] > arr[largest]\n            largest = arr[index]\n     \
    \       largestIndex = index\n        end\n    end\n    return largestIndex\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8rxl1ch7.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp8rxl1ch7.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.5>\n@time can_arrange(arr);\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of unique elements in a given\
    \ array.\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpchcqzvyz.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpchcqzvyz.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of times\
    \ an element appears in an array. For example, the array [1,2,2,3,3,4,4,5,5,5,5,5,6]\
    \ contains 3 2's and 6 3's. Write a function that returns the number of times\
    \ an element appears in an array. For example, the array [1,2,2,3,3,4,4,5,5,5,5,5,5,6]\
    \ contains 3 2's and 6 3's. Write a function that returns the number of times\
    \ an element appears in an array. For example, the array [1,2,2,3,3,4,4,5,5,5,5,5,5,6]\
    \ contains 3 2's and 6 3's. Write a function that returns the number of times\
    \ an element appears in an array. For example, the array [1,2,2,3,3,4,4,5,5,5,5,5,5,6]\
    \ contains 3 2's and 6 3's. Write a function that returns the number of times\
    \ an element appears in an array. For example, the array [1,2,2,3,3,4,4,5,5,5,5,5,5,6]\
    \ contains 3 2's and 6 3's. Write a function that returns the number of times\
    \ an element appears in an array. For example, the array [1,2,2,3,3,4,4,5,5,5,5,5,5,6]\
    \ contains 3 2's and 6 3's. Write a function that returns the number of times\
    \ an element appears in an array. For example, the array [1,2,2,3,3,4,4,5,5,5,5,5,5,6]\
    \ contains 3 2's and 6 3's. Write a function that returns the number of times\
    \ an element appears in an array. For example, the array [1,2,2,3,3,4,4,5,5,5,5,5,5,6]\
    \ contains 3 2's and 6 3's. Write a function that returns the number of times\
    \ an element appears in an array. For example, the array [1,2,2,3,3,4,4,5,5,5,5,5,5,6]\
    \ contains 3 2's and 6 3's. Write a function that returns the number of times\
    \ an element appears in an array. For example, the array [1,2,2,3,3,4,4,5,5,5,5,5,5,6]\
    \ contains 3 2's and 6 3's. Write a function that returns the number of times\
    \ an element appears in an array. For example, the array [1,2,2,3,3,4,4,5,5,5,5,5,5,6]\
    \ contains 3 2's and 6 3's. Write a function that returns the number of times\
    \ an element appears in an array. For example, the array [1,2,2,3,3,4,4,5,5,5,5,5,5,6]\
    \ contains 3 2's and 6 3's. Write a function that returns the number of times\
    \ an element appears in an \nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\
    \t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\
    \t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8,\
    \ 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpi10ik_wz.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpi10ik_wz.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = -1\n    for x in arr\n        if x > largest\n            largest\
    \ = x\n        end\n    end\n    return largest\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert can_arrange([1,2,4,3,5]) == 3\n@assert can_arrange([1,2,3]) == -1\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of elements in the\
    \ array which are not greater than or equal to the element immediately preceding\
    \ it. No duplicate values should be considered.\nusing Test\n\n@testset begin\n\
    \ncandidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpeddb8dk7.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpeddb8dk7.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = -1\n    largest = arr[1]\n    for i in 2:length(arr)\n     \
    \   if arr[i] > largest\n            largest = arr[i]\n        end\n    end\n\
    \    return largest\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\
    \t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8,\
    \ 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([]))\
    \ == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpj4b_y0vf.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpj4b_y0vf.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.4>\n@assert can_arrange([1,2,4,3,5]) == 3\n@assert\
    \ can_arrange([1,2,3]) == -1\n</cell>\n<text>\nExercise 4\nWrite a function that\
    \ returns the number of elements in the array which are not equal to its second\
    \ element. For example, if the array is [1,2,3,4,5] then your function should\
    \ return 3 because there are 3 elements in the array which are not equal to 2.\n\
    using Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmper68xkq0.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmper68xkq0.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    using Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxdzlg88h.jl:24\n  Expression: candidate([1,\
    \ 2, 4, 3, 5]) == 3\n   Evaluated: 5 == 3\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpxdzlg88h.jl:24\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpxdzlg88h.jl:23\ntest set: Test Failed at /tmp/tmpxdzlg88h.jl:25\n\
    \  Expression: candidate([1, 2, 4, 5]) == -1\n   Evaluated: 5 == -1\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpxdzlg88h.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpxdzlg88h.jl:23\ntest set: Test Failed at /tmp/tmpxdzlg88h.jl:26\n\
    \  Expression: candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2\n   Evaluated: 10\
    \ == 2\nStacktrace:\n [1] top-level scope at /tmp/tmpxdzlg88h.jl:26\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpxdzlg88h.jl:23\ntest set: Test Failed at /tmp/tmpxdzlg88h.jl:27\n\
    \  Expression: candidate([4, 8, 5, 7, 3]) == 4\n   Evaluated: 8 == 4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpxdzlg88h.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpxdzlg88h.jl:23\ntest set: Error During Test at\
    \ /tmp/tmpxdzlg88h.jl:28\n  Test threw exception\n  Expression: candidate(Vector{Int64}([]))\
    \ == -1\n  BoundsError: attempt to access 0-element Array{Int64,1} at index [1]\n\
    \  Stacktrace:\n   [1] getindex at ./array.jl:788 [inlined]\n   [2] can_arrange(::Array{Int64,1})\
    \ at /tmp/tmpxdzlg88h.jl:11\n   [3] top-level scope at /tmp/tmpxdzlg88h.jl:28\n\
    \   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpxdzlg88h.jl:23\n  \nTest Summary: | Fail  Error\
    \  Total\ntest set      |    4      1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxdzlg88h.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    using Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpu_6bti8i.jl:24\n  Expression: candidate([1,\
    \ 2, 4, 3, 5]) == 3\n   Evaluated: 5 == 3\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpu_6bti8i.jl:24\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpu_6bti8i.jl:23\ntest set: Test Failed at /tmp/tmpu_6bti8i.jl:25\n\
    \  Expression: candidate([1, 2, 4, 5]) == -1\n   Evaluated: 5 == -1\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpu_6bti8i.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpu_6bti8i.jl:23\ntest set: Test Failed at /tmp/tmpu_6bti8i.jl:26\n\
    \  Expression: candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2\n   Evaluated: 10\
    \ == 2\nStacktrace:\n [1] top-level scope at /tmp/tmpu_6bti8i.jl:26\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpu_6bti8i.jl:23\ntest set: Test Failed at /tmp/tmpu_6bti8i.jl:27\n\
    \  Expression: candidate([4, 8, 5, 7, 3]) == 4\n   Evaluated: 8 == 4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpu_6bti8i.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpu_6bti8i.jl:23\ntest set: Error During Test at\
    \ /tmp/tmpu_6bti8i.jl:28\n  Test threw exception\n  Expression: candidate(Vector{Int64}([]))\
    \ == -1\n  BoundsError: attempt to access 0-element Array{Int64,1} at index [1]\n\
    \  Stacktrace:\n   [1] getindex at ./array.jl:788 [inlined]\n   [2] can_arrange(::Array{Int64,1})\
    \ at /tmp/tmpu_6bti8i.jl:11\n   [3] top-level scope at /tmp/tmpu_6bti8i.jl:28\n\
    \   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpu_6bti8i.jl:23\n  \nTest Summary: | Fail  Error\
    \  Total\ntest set      |    4      1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpu_6bti8i.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = -1\n    for x in arr\n        if x > largest\n            largest\
    \ = x\n        end\n    end\n    return largest\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert can_arrange([1,2,4,3,5]) == 3\n@assert can_arrange([1,2,3]) == -1\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of unique elements\
    \ in a given array. \nThe function should work for both vectors and matrices.\n\
    using Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpsopu2qqf.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpsopu2qqf.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpt30thyz0.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpt30thyz0.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        else\n            return -1\n        end\n\
    \    end\n    return largest\nend\n</cell>\n<code language=julia-1.4>\nusing Test\n\
    \n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5])\
    \ == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5,\
    \ 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([]))\
    \ == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmppkobupr9.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmppkobupr9.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = -1\n    largestIndex = 0\n    for index in 1:length(arr)\n \
    \       if arr[index] > arr[largest]\n            largest = arr[index]\n     \
    \       largestIndex = index\n        end\n    end\n    return largestIndex\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert can_arrange([1,2,4,3,5]) == 3\n\
    @assert can_arrange([1,2,3]) == -1\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the number of times the given element appears in an array. For\
    \ example, the number of times 5 appears in [1,2,3,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,\n\
    using Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpfowfb6ga.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpfowfb6ga.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = Int64(-1)\n    largest = arr[1]\n    for x in arr[2:end]\n \
    \       if x <= largest\n            largest = x\n        else\n            break\n\
    \    end\n    return largest\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpssclh3s8.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpssclh3s8.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpssclh3s8.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    using Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpzpfc02sd.jl:24\n  Expression: candidate([1,\
    \ 2, 4, 3, 5]) == 3\n   Evaluated: 5 == 3\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpzpfc02sd.jl:24\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzpfc02sd.jl:23\ntest set: Test Failed at /tmp/tmpzpfc02sd.jl:25\n\
    \  Expression: candidate([1, 2, 4, 5]) == -1\n   Evaluated: 5 == -1\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpzpfc02sd.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzpfc02sd.jl:23\ntest set: Test Failed at /tmp/tmpzpfc02sd.jl:26\n\
    \  Expression: candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2\n   Evaluated: 10\
    \ == 2\nStacktrace:\n [1] top-level scope at /tmp/tmpzpfc02sd.jl:26\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzpfc02sd.jl:23\ntest set: Test Failed at /tmp/tmpzpfc02sd.jl:27\n\
    \  Expression: candidate([4, 8, 5, 7, 3]) == 4\n   Evaluated: 8 == 4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpzpfc02sd.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzpfc02sd.jl:23\ntest set: Error During Test at\
    \ /tmp/tmpzpfc02sd.jl:28\n  Test threw exception\n  Expression: candidate(Vector{Int64}([]))\
    \ == -1\n  BoundsError: attempt to access 0-element Array{Int64,1} at index [1]\n\
    \  Stacktrace:\n   [1] getindex at ./array.jl:788 [inlined]\n   [2] can_arrange(::Array{Int64,1})\
    \ at /tmp/tmpzpfc02sd.jl:11\n   [3] top-level scope at /tmp/tmpzpfc02sd.jl:28\n\
    \   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpzpfc02sd.jl:23\n  \nTest Summary: | Fail  Error\
    \  Total\ntest set      |    4      1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzpfc02sd.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = Int64(-1)\n    for x in arr\n        if x > largest\n      \
    \      largest = x\n        end\n    end\n    return largest\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert can_arrange([1,2,4,3,5]) == 3\n@assert can_arrange([1,2,3])\
    \ == -1\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number\
    \ of elements in a vector that are less than a given value.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\
    \t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8,\
    \ 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([]))\
    \ == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp84fljy23.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp84fljy23.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = -1\n    for x in arr\n        if x > largest\n            largest\
    \ = x\n        end\n    end\n    return largest\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert can_arrange([1,2,4,3,5]) == 3\n@assert can_arrange([1,2,3]) == -1\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of times an element\
    \ appears in an array. For example, the number of times 3 appears in [1,2,3,4,3,5,6,7,8,9]\
    \ would be 3. Do not use any built-in Julia functions.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\
    \t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8,\
    \ 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([]))\
    \ == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_d0qs48r.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_d0qs48r.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert can_arrange([1,2,4,3,5]) == 3\n@assert\
    \ can_arrange([1,2,3]) == -1\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the index of the element in the given array that is the\nlargest amongst\
    \ all the elements in the given array. If there are multiple elements with\nthe\
    \ largest value, then return any one of them. If there are no elements with the\n\
    largest value, then return -1.\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\
    \t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\
    \t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8,\
    \ 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8683v7fb.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp8683v7fb.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for x in arr[2:end]\n        if x <= largest\n \
    \           largest = x\n        else\n            break\n    end\n    return\
    \ largest\nend\n</cell>\n<code language=julia-1.5>\n@assert can_arrange([1,2,4,3,5])\
    \ == 3\n@assert can_arrange([1,2,3]) == -1\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns true if the array arr has all unique elements and false\
    \ otherwise. For example\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\
    \t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\
    \t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8,\
    \ 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpi9_qg4du.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpi9_qg4du.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert can_arrange([1,2,4,3,5]) == 3\n@assert\
    \ can_arrange([1,2,3]) == -1\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the number of elements in the array which are not equal to its \nindex.\
    \ For example, if the array is [1,2,3,4,5] then the function should return 3.\n\
    using Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpfxrwj7gr.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpfxrwj7gr.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp19222g3u.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp19222g3u.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert can_arrange([1,2,4,3,5]) == 3\n@assert\
    \ can_arrange([1,2,3]) == -1\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the number of times each element appears in an array.\nusing Test\n\n\
    @testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5])\
    \ == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5,\
    \ 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([]))\
    \ == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpn9ao2zaj.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpn9ao2zaj.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the index of the element\
    \ in the array which is closest to the given value. If there are multiple elements\
    \ with the same distance then return the smallest index.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\
    \t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8,\
    \ 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([]))\
    \ == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpzo8qonk7.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpzo8qonk7.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpr42y8_l5.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpr42y8_l5.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    largestIndex = 1\n    for index in 2:length(arr)\n\
    \        if arr[index] > largest\n            largest = arr[index]\n         \
    \   largestIndex = index\n        end\n    end\n    return largestIndex\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp0i2o4uze.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp0i2o4uze.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = -1\n    largestIndex = -1\n    for index in 1:length(arr)\n\
    \        if arr[index] <= arr[largest]\n            largest = arr[index]\n   \
    \         largestIndex = index\n        else\n            break\n        end\n\
    \    end\n    return largestIndex\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the index of the element in the given array that is closest to\
    \ the given value. If there are multiple elements with the same value then return\
    \ the index of the first one. For example, if the given array is [1,2,3,4,5] and\
    \ you call closest_index([1,2,3,4,5],3) then the function should return 3.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1, 2,\
    \ 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp5eqi8nrg.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp5eqi8nrg.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3l401zja.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp3l401zja.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp5r_je912.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp5r_je912.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = -1\n    largestIndex = 0\n    for index in 1:length(arr)\n \
    \       if arr[index] > arr[largest]\n            largest = arr[index]\n     \
    \       largestIndex = index\n        end\n    end\n    return largestIndex\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpw404ka03.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpw404ka03.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert can_arrange([1,2,4,3,5]) == 3\n@assert\
    \ can_arrange([1,2,3]) == -1\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the number of times an element appears in an array. \nThe function should\
    \ work for both sorted and unsorted arrays.\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp6me4wb2o.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp6me4wb2o.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert can_arrange([1,2,4,3,5]) == 3\n@assert\
    \ can_arrange([1,2,3]) == -1\n</cell>\n<text>\n4.3 Finding the first index of\
    \ an element which is not greater than or equal to it\nWrite a function that returns\
    \ the index of the first element of an array which\nis not greater than or equal\
    \ to the element given as input. If such element does\nnot exist then return -1.\
    \ The given array will not contain duplicate values.\nusing Test\n\n@testset begin\n\
    \ncandidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpro_7ghl2.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpro_7ghl2.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.3>\n@assert can_arrange([1,2,4,3,5]) == 3\n@assert\
    \ can_arrange([1,2,3]) == -1\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the number of times the given element appears in an array. For example,\
    \ the number of times 3 appears in [1,2,3,4,5,6,7,8,9] would be 3.\nusing Test\n\
    \n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5])\
    \ == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5,\
    \ 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([]))\
    \ == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpotn92fga.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpotn92fga.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = -1\n    for i in 1:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert can_arrange([1,2,4,3,5]) == 3\n@assert\
    \ can_arrange([1,2,3]) == -1\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the number of times the given element appears in an array. For example,\
    \ the element 3 appears twice in the array [1,2,3,4,3,5,6].\nusing Test\n\n@testset\
    \ begin\n\ncandidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\
    \t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8,\
    \ 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([]))\
    \ == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp0mlxgydk.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp0mlxgydk.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for x in arr[2:end]\n        if x <= largest\n \
    \           largest = x\n        else\n            return -1\n        end\n  \
    \  end\n    return largest\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the index of the element in the given array that is closest to\
    \ the given value. The given array will not contain duplicate values.\nusing Test\n\
    \n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5])\
    \ == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5,\
    \ 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([]))\
    \ == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphqvqr_5m.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmphqvqr_5m.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for x in arr[2:end]\n        if x <= largest\n \
    \           largest = x\n        else\n            return -1\n        end\n  \
    \  end\n    return largest\nend\n</cell>\n<code language=julia-1.3>\n@assert can_arrange([1,2,4,3,5])\
    \ == 3\n@assert can_arrange([1,2,3]) == -1\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns the number of elements in a vector which are not equal\
    \ to zero.\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp930fktjz.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp930fktjz.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = -1\n    for x in arr\n        if x > largest\n            largest\
    \ = x\n        end\n    end\n    return largest\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmped9kbmz3.jl:24\n  Expression: candidate([1,\
    \ 2, 4, 3, 5]) == 3\n   Evaluated: 5 == 3\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmped9kbmz3.jl:24\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmped9kbmz3.jl:23\ntest set: Test Failed at /tmp/tmped9kbmz3.jl:25\n\
    \  Expression: candidate([1, 2, 4, 5]) == -1\n   Evaluated: 5 == -1\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmped9kbmz3.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmped9kbmz3.jl:23\ntest set: Test Failed at /tmp/tmped9kbmz3.jl:26\n\
    \  Expression: candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2\n   Evaluated: 10\
    \ == 2\nStacktrace:\n [1] top-level scope at /tmp/tmped9kbmz3.jl:26\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmped9kbmz3.jl:23\ntest set: Test Failed at /tmp/tmped9kbmz3.jl:27\n\
    \  Expression: candidate([4, 8, 5, 7, 3]) == 4\n   Evaluated: 8 == 4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmped9kbmz3.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmped9kbmz3.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmped9kbmz3.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    largestIndex = 1\n    for index in 2:length(arr)\n\
    \        if arr[index] > largest\n            largest = arr[index]\n         \
    \   largestIndex = index\n        end\n    end\n    return largestIndex\nend\n\
    </cell>\n<text>\nExercise 4\nWrite a function that returns the index of the element\
    \ in the given array that is closest to the given value. If no such element exists\
    \ then return -1. The given array will not contain duplicate values.\nusing Test\n\
    \n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5])\
    \ == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5,\
    \ 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([]))\
    \ == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpqhjkagg_.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpqhjkagg_.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp59ypq486.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp59ypq486.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp85b5ksoc.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp85b5ksoc.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns true if the array contains\
    \ any duplicates. \nWrite a function that returns true if the array contains any\
    \ duplicates. \nWrite a function that returns true if the array contains any duplicates.\
    \ \nWrite a function that returns true if the array contains any duplicates. \n\
    Write a function that returns true if the array contains any duplicates. \nWrite\
    \ a function that returns true if the array contains any duplicates. \nWrite a\
    \ function that returns true if the array contains any duplicates. \nWrite a function\
    \ that returns true if the array contains any duplicates. \nWrite a function that\
    \ returns true if the array contains any duplicates. \nWrite a function that returns\
    \ true if the array contains any duplicates. \nWrite a function that returns true\
    \ if the array contains any duplicates. \nWrite a function that returns true if\
    \ the array contains any duplicates. \nWrite a function that returns true if the\
    \ array contains any duplicates. \nWrite a function that returns true if the array\
    \ contains any duplicates. \nWrite a function that returns true if the array contains\
    \ any duplicates. \nWrite a function that returns true if the array contains any\
    \ duplicates. \nWrite a function that returns true if the array contains any duplicates.\
    \ \nWrite a function that returns true if the array contains any duplicates. \n\
    Write a function that returns true if the array contains any duplicates. \nWrite\
    \ a function that returns true if the array contains any duplicates. \nWrite a\
    \ function that returns true if the array contains any duplicates. \nWrite a function\
    \ that returns true if the array contains any duplicates. \nWrite a function that\
    \ returns true if the array contains any duplicates. \nWrite a function that returns\
    \ true if the array contains any duplicates. \nWrite a function that returns true\
    \ if the array contains any duplicates. \nWrite a function that returns true if\
    \ the array contains any duplicates. \nWrite a function that returns true if the\
    \ array contains any duplicates. \nWrite a function that returns true if the array\
    \ contains any duplicates. \nWrite a function that returns true if the array contains\
    \ any duplicates. \nWrite a function that returns true if the array contains any\
    \ duplicates. \nWrite a function that returns true if the array contains any duplicates.\
    \ \nWrite a function that returns true if the array contains any duplicates. \n\
    Write a function that returns true if the array contains any duplicates. \nWrite\
    \ a function that returns true if the array contains any duplicates. \nWrite a\
    \ function that returns true if the array contains any duplicates. \nWrite a function\
    \ that returns true if the array contains any duplicates. \nWrite a function that\
    \ returns true if the array contains any duplicates. \nWrite a function that returns\
    \ true if the array contains any duplicates. \nWrite a function that returns true\
    \ if the array contains any duplicate\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpdd05oggn.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpdd05oggn.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpvkebab2z.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpvkebab2z.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpskad9rxi.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpskad9rxi.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the number of elements\
    \ in a vector which are not greater than or equal to the element immediately preceding\
    \ it. \nIf no such element exists then return -1. \nThe given array will not contain\
    \ duplicate values.\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\
    \t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\
    \t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8,\
    \ 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpbssebyao.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpbssebyao.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    using Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1cdfc2h8.jl:24\n  Expression: candidate([1,\
    \ 2, 4, 3, 5]) == 3\n   Evaluated: 5 == 3\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmp1cdfc2h8.jl:24\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp1cdfc2h8.jl:23\ntest set: Test Failed at /tmp/tmp1cdfc2h8.jl:25\n\
    \  Expression: candidate([1, 2, 4, 5]) == -1\n   Evaluated: 5 == -1\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp1cdfc2h8.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp1cdfc2h8.jl:23\ntest set: Test Failed at /tmp/tmp1cdfc2h8.jl:26\n\
    \  Expression: candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2\n   Evaluated: 10\
    \ == 2\nStacktrace:\n [1] top-level scope at /tmp/tmp1cdfc2h8.jl:26\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp1cdfc2h8.jl:23\ntest set: Test Failed at /tmp/tmp1cdfc2h8.jl:27\n\
    \  Expression: candidate([4, 8, 5, 7, 3]) == 4\n   Evaluated: 8 == 4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp1cdfc2h8.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp1cdfc2h8.jl:23\ntest set: Error During Test at\
    \ /tmp/tmp1cdfc2h8.jl:28\n  Test threw exception\n  Expression: candidate(Vector{Int64}([]))\
    \ == -1\n  BoundsError: attempt to access 0-element Array{Int64,1} at index [1]\n\
    \  Stacktrace:\n   [1] getindex at ./array.jl:788 [inlined]\n   [2] can_arrange(::Array{Int64,1})\
    \ at /tmp/tmp1cdfc2h8.jl:11\n   [3] top-level scope at /tmp/tmp1cdfc2h8.jl:28\n\
    \   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmp1cdfc2h8.jl:23\n  \nTest Summary: | Fail  Error\
    \  Total\ntest set      |    4      1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1cdfc2h8.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = -1\n    largestIndex = 0\n    for index in 1:length(arr)\n \
    \       if arr[index] > arr[largest]\n            largest = arr[index]\n     \
    \       largestIndex = index\n        end\n    end\n    return largestIndex\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert can_arrange([1,2,4,3,5]) == 3\n\
    @assert can_arrange([1,2,3]) == -1\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the number of times the given element appears in an array. For\
    \ example, the number of times 5 appears in [1,2,3,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,\n\
    using Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphgqbv0fb.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmphgqbv0fb.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert can_arrange([1,2,4,3,5]) == 3\n@assert\
    \ can_arrange([1,2,3]) == -1\n</cell>\n<text>\n4.3 Find all elements of a vector\
    \ which satisfy a predicate\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\
    \t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\
    \t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8,\
    \ 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp444kzmfj.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp444kzmfj.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        else\n            return -1\n        end\n\
    \    end\n    return largest\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ can_arrange([1,2,4,3,5]) == 3\n@assert can_arrange([1,2,3]) == -1\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the index of the element in\
    \ the given array that\nhas the largest value greater than or equal to the given\
    \ element. If no\nsuch element exists then return -1. The given array will not\
    \ contain\nduplicate values.\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\
    \t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\
    \t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8,\
    \ 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpwpnwpvzh.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpwpnwpvzh.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4q03nkc8.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp4q03nkc8.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = -1\n    largestIndex = 0\n    for index in 1:length(arr)\n \
    \       if arr[index] > arr[largest]\n            largest = arr[index]\n     \
    \       largestIndex = index\n        end\n    end\n    return largestIndex\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that returns the index of the\
    \ element in the given array which has the largest value.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\
    \t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8,\
    \ 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([]))\
    \ == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2_5ga46_.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp2_5ga46_.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = Int64(-1) # initialize largest to -1\n    largest = arr[1] #\
    \ set largest to the second element\n    for i in 2:length(arr) # loop over the\
    \ rest of the elements\n        if arr[i] > largest # if the current element is\
    \ greater than the largest\n            largest = arr[i] # then set largest to\
    \ the current element\n        end\n    end\n    return largest\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert can_arrange([1,2,4,3,5]) == 3\n@assert can_arrange([1,2,3])\
    \ == -1\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number\
    \ of elements in the array that are\ngreater than the given element.\nusing Test\n\
    \n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5])\
    \ == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5,\
    \ 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([]))\
    \ == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpoa2km9a2.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpoa2km9a2.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of times\
    \ the element in the given array appears consecutively.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\
    \t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8,\
    \ 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([]))\
    \ == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpt8xlxm30.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpt8xlxm30.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = -1\n    for el in arr\n        if el > largest\n           \
    \ largest = el\n        end\n    end\n    return largest\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\
    \t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\
    \t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8,\
    \ 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpoc_9ty6i.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpoc_9ty6i.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = -1\n    largestIndex = 0\n    for index in 1:length(arr)\n \
    \       if arr[index] > arr[largest]\n            largest = arr[index]\n     \
    \       largestIndex = index\n        end\n    end\n    return largestIndex\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert can_arrange([1,2,4,3,5]) == 3\n\
    @assert can_arrange([1,2,3]) == -1\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the number of elements in a given array that are\nless than a given\
    \ value.\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9zp8b2f1.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp9zp8b2f1.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    largestIndex = -1\n    for index in 2:length(arr)\n\
    \        if arr[index] > largest\n            largest = arr[index]\n         \
    \   largestIndex = index\n        end\n    end\n    return largestIndex\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp5h7oiplc.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp5h7oiplc.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert can_arrange([1,2,4,3,5]) == 3\n@assert\
    \ can_arrange([1,2,3]) == -1\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns true if the given array contains all unique elements. \nFor example\
    \ [1,2,2,3] returns true.\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\
    \t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\
    \t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8,\
    \ 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpk3rt_nsa.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpk3rt_nsa.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.3>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpxi7t7jy7.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpxi7t7jy7.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = -1\n    for x in arr\n        if x > largest\n            largest\
    \ = x\n        end\n    end\n    return largest\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpj_uw6vmq.jl:24\n  Expression: candidate([1,\
    \ 2, 4, 3, 5]) == 3\n   Evaluated: 5 == 3\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpj_uw6vmq.jl:24\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpj_uw6vmq.jl:23\ntest set: Test Failed at /tmp/tmpj_uw6vmq.jl:25\n\
    \  Expression: candidate([1, 2, 4, 5]) == -1\n   Evaluated: 5 == -1\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpj_uw6vmq.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpj_uw6vmq.jl:23\ntest set: Test Failed at /tmp/tmpj_uw6vmq.jl:26\n\
    \  Expression: candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2\n   Evaluated: 10\
    \ == 2\nStacktrace:\n [1] top-level scope at /tmp/tmpj_uw6vmq.jl:26\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpj_uw6vmq.jl:23\ntest set: Test Failed at /tmp/tmpj_uw6vmq.jl:27\n\
    \  Expression: candidate([4, 8, 5, 7, 3]) == 4\n   Evaluated: 8 == 4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpj_uw6vmq.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpj_uw6vmq.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpj_uw6vmq.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = -1\n    largestIndex = 0\n    for index in 1:length(arr)\n \
    \       if arr[index] > arr[largest]\n            largest = arr[index]\n     \
    \       largestIndex = index\n        end\n    end\n    return largestIndex\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp512kc9qt.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp512kc9qt.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = -1\n    for x in arr\n        if x > largest\n            largest\
    \ = x\n        end\n    end\n    return largest\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert can_arrange([1,2,4,3,5]) == 3\n@assert can_arrange([1,2,3]) == -1\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns true if the array contains any\
    \ duplicates. For example:\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\
    \t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\
    \t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8,\
    \ 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp1vkkwcfi.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp1vkkwcfi.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = -1\n    largestIndex = 0\n    for i = 1:length(arr)\n      \
    \  if arr[i] > arr[largest]\n            largest = arr[i]\n            largestIndex\
    \ = i\n        end\n    end\n    return largestIndex\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert can_arrange([1,2,4,3,5]) == 3\n@assert can_arrange([1,2,3]) == -1\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of elements in a\
    \ vector that are less than or equal to some given value.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\
    \t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8,\
    \ 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([]))\
    \ == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmprsyeczcy.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmprsyeczcy.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpz9gxq5x2.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpz9gxq5x2.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    largestIndex = -1\n    for index in 2:length(arr)\n\
    \        if arr[index] > largest\n            largest = arr[index]\n         \
    \   largestIndex = index\n        end\n    end\n    return largestIndex\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpjil49f5p.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpjil49f5p.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.0>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpkjze3ngk.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpkjze3ngk.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert can_arrange([1,2,4,3,5]) == 3\n@assert\
    \ can_arrange([1,2,3]) == -1\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the number of elements in a vector which are less than a given value.\n\
    using Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpb60wfb35.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpb60wfb35.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpwo9tzums.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpwo9tzums.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = Int64(-1)\n    for x in arr\n        if x > largest\n      \
    \      largest = x\n        end\n    end\n    return largest\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\
    \t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\
    \t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8,\
    \ 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpszrb6im2.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpszrb6im2.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.3>\n@time can_arrange([1,2,4,3,5])\n</cell>\n\
    <code language=julia-1.3>\n@time can_arrange([1,2,3])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the number of elements in a vector which are\
    \ greater than or equal to some value.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpcoxl7ria.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpcoxl7ria.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpxr643tj4.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpxr643tj4.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.3>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp79nznp_5.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp79nznp_5.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.5>\n@time can_arrange(arr)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the number of elements in the array\
    \ which are not greater than or equal to the element immediately preceding it.\
    \ Return 0 if no such element exists.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmptiz3mzvf.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmptiz3mzvf.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = -1\n    for x in arr\n        if x > largest\n            largest\
    \ = x\n        end\n    end\n    return largest\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpyob44fz6.jl:24\n  Expression: candidate([1,\
    \ 2, 4, 3, 5]) == 3\n   Evaluated: 5 == 3\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpyob44fz6.jl:24\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpyob44fz6.jl:23\ntest set: Test Failed at /tmp/tmpyob44fz6.jl:25\n\
    \  Expression: candidate([1, 2, 4, 5]) == -1\n   Evaluated: 5 == -1\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpyob44fz6.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpyob44fz6.jl:23\ntest set: Test Failed at /tmp/tmpyob44fz6.jl:26\n\
    \  Expression: candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2\n   Evaluated: 10\
    \ == 2\nStacktrace:\n [1] top-level scope at /tmp/tmpyob44fz6.jl:26\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpyob44fz6.jl:23\ntest set: Test Failed at /tmp/tmpyob44fz6.jl:27\n\
    \  Expression: candidate([4, 8, 5, 7, 3]) == 4\n   Evaluated: 8 == 4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpyob44fz6.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpyob44fz6.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyob44fz6.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<text>\nQuestion 3\nWrite a function that returns the number of times\
    \ an element appears in an array. \nThe given array will not contain duplicate\
    \ values.\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpl0oxxelh.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpl0oxxelh.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for x in arr[2:end]\n        if x > largest\n  \
    \          largest = x\n        end\n    end\n    return largest\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the number of elements in a\
    \ vector that are not equal to zero.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpa88zmikb.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpa88zmikb.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = -1\n    largestIndex = 0\n    for i = 1:length(arr)\n      \
    \  if arr[i] > arr[largest]\n            largest = arr[i]\n            largestIndex\
    \ = i\n        end\n    end\n    return largestIndex\nend\n</cell>\n<code language=julia-1.5>\n\
    @time can_arrange([1,2,4,3,5])\n</cell>\n<code language=julia-1.5>\n@time can_arrange([1,2,3])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the index of the element\
    \ in the given array that\nhas the largest value less than or equal to the element\
    \ immediately preceding it.\nIf no such element exists then return -1. The given\
    \ array will not contain duplicate\nvalues.\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpo9nslik_.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpo9nslik_.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpglbn8zsl.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpglbn8zsl.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphha3sq9i.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmphha3sq9i.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = -1\n    for i in 1:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    using Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpg5ep4g2z.jl:24\n  Expression: candidate([1,\
    \ 2, 4, 3, 5]) == 3\n   Evaluated: 5 == 3\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpg5ep4g2z.jl:24\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpg5ep4g2z.jl:23\ntest set: Test Failed at /tmp/tmpg5ep4g2z.jl:25\n\
    \  Expression: candidate([1, 2, 4, 5]) == -1\n   Evaluated: 5 == -1\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpg5ep4g2z.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpg5ep4g2z.jl:23\ntest set: Test Failed at /tmp/tmpg5ep4g2z.jl:26\n\
    \  Expression: candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2\n   Evaluated: 10\
    \ == 2\nStacktrace:\n [1] top-level scope at /tmp/tmpg5ep4g2z.jl:26\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpg5ep4g2z.jl:23\ntest set: Test Failed at /tmp/tmpg5ep4g2z.jl:27\n\
    \  Expression: candidate([4, 8, 5, 7, 3]) == 4\n   Evaluated: 8 == 4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpg5ep4g2z.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpg5ep4g2z.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpg5ep4g2z.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = -1\n    for i in 1:length(arr)\n        if arr[i] > arr[largest]\n\
    \            largest = i\n        end\n    end\n    return largest\nend\n</cell>\n\
    <code language=julia-1.0>\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\
    \t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\
    \t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8,\
    \ 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpxyywqmvl.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpxyywqmvl.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    using Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpacnbgemi.jl:24\n  Expression: candidate([1,\
    \ 2, 4, 3, 5]) == 3\n   Evaluated: 5 == 3\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpacnbgemi.jl:24\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpacnbgemi.jl:23\ntest set: Test Failed at /tmp/tmpacnbgemi.jl:25\n\
    \  Expression: candidate([1, 2, 4, 5]) == -1\n   Evaluated: 5 == -1\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpacnbgemi.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpacnbgemi.jl:23\ntest set: Test Failed at /tmp/tmpacnbgemi.jl:26\n\
    \  Expression: candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2\n   Evaluated: 10\
    \ == 2\nStacktrace:\n [1] top-level scope at /tmp/tmpacnbgemi.jl:26\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpacnbgemi.jl:23\ntest set: Test Failed at /tmp/tmpacnbgemi.jl:27\n\
    \  Expression: candidate([4, 8, 5, 7, 3]) == 4\n   Evaluated: 8 == 4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpacnbgemi.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpacnbgemi.jl:23\ntest set: Error During Test at\
    \ /tmp/tmpacnbgemi.jl:28\n  Test threw exception\n  Expression: candidate(Vector{Int64}([]))\
    \ == -1\n  BoundsError: attempt to access 0-element Array{Int64,1} at index [1]\n\
    \  Stacktrace:\n   [1] getindex at ./array.jl:788 [inlined]\n   [2] can_arrange(::Array{Int64,1})\
    \ at /tmp/tmpacnbgemi.jl:11\n   [3] top-level scope at /tmp/tmpacnbgemi.jl:28\n\
    \   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpacnbgemi.jl:23\n  \nTest Summary: | Fail  Error\
    \  Total\ntest set      |    4      1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpacnbgemi.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.0>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpnnd99vmh.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpnnd99vmh.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = Int64(-1)\n    for x in arr\n        if x > largest\n      \
    \      largest = x\n        end\n    end\n    return largest\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert can_arrange([1,2,4,3,5]) == 3\n@assert can_arrange([1,2,3])\
    \ == -1\n</cell>\n<text>\nExercise 2\nWrite a function that returns an array of\
    \ all possible permutations of the given array. \nThe given array will not contain\
    \ duplicate values.\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\
    \t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\
    \t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8,\
    \ 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpgca2oji3.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpgca2oji3.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    largestIndex = -1\n    for index in 2:length(arr)\n\
    \        if arr[index] > largest\n            largest = arr[index]\n         \
    \   largestIndex = index\n        end\n    end\n    return largestIndex\nend\n\
    </cell>\n<code language=julia-1.4>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpuu4b8ont.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpuu4b8ont.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert can_arrange([1,2,4,3,5]) == 3\n@assert\
    \ can_arrange([1,2,3]) == -1\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the number of elements in the array which are not greater than or equal\
    \ to the element immediately preceding it.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpsz18uu3e.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpsz18uu3e.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpyjiuw66o.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpyjiuw66o.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = -1\n    for i in 1:length(arr)\n        if arr[i] > largest\n\
    \            largest = i\n        end\n    end\n    return largest\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\
    \t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\
    \t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8,\
    \ 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpqroj0ck5.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpqroj0ck5.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = -1\n    largestIndex = 0\n    for i = 1:length(arr)\n      \
    \  if arr[i] > arr[largest]\n            largest = arr[i]\n            largestIndex\
    \ = i\n        end\n    end\n    return largestIndex\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the index of the element in the array that\
    \ is\nclosest to the given value. If no such element exists then return -1.\n\
    using Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpm9d2f5xb.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpm9d2f5xb.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphjaygzrm.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmphjaygzrm.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = Int64(-1)\n    largest = arr[1]\n    for i in 2:length(arr)\n\
    \        if arr[i] > largest\n            largest = arr[i]\n        end\n    end\n\
    \    return largest\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ an array of all positive integers less than or equal to $n$. \nFor example,\
    \ given $n=5$, your function should return [1,2,3,4,5]. \nThe function should\
    \ return an array of integers even if the input $n$ is not a positive integer.\n\
    using Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpfz60_8kf.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpfz60_8kf.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        else\n            return -1\n        end\n\
    \    end\n    return largest\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ can_arrange([1,2,4,3,5]) == 3\n@assert can_arrange([1,2,3]) == -1\n</cell>\n\
    <text>\n4.3 Finding the median of a vector\nWrite a function that returns the\
    \ median of a vector. Your function should run in $O(n)$ time.\nusing Test\n\n\
    @testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5])\
    \ == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5,\
    \ 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([]))\
    \ == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmparlw4kv6.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmparlw4kv6.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpeol7752c.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpeol7752c.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.3>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpopx3rf5h.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpopx3rf5h.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = -1\n    for x in arr\n        if x > largest\n            largest\
    \ = x\n        end\n    end\n    return largest\nend\n</cell>\n<text>\nQ: What\
    \ is the largest index of an element which is not greater than or equal to the\
    \ element immediately preceding it?\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpzg1zi8_t.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpzg1zi8_t.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.4>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpeejjpxw6.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpeejjpxw6.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert can_arrange([1,2,4,3,5]) == 3\n@assert\
    \ can_arrange([1,2,3]) == -1\n</cell>\n<text>\n4.3 Finding the number of ways\
    \ to arrange the elements of a given array\nWrite a function that takes an array\
    \ of integers and returns the number of ways to arrange the elements of the array\
    \ into groups of three or more.\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\
    \t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\
    \t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8,\
    \ 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpu0v42vtw.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpu0v42vtw.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the number of elements\
    \ in the array which are not equal to its first element.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\
    \t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8,\
    \ 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([]))\
    \ == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpxheq6yuu.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpxheq6yuu.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the number of elements\
    \ in the array which are not greater than or equal to the element immediately\
    \ preceding it. Return 0 if no such element exists.\nusing Test\n\n@testset begin\n\
    \ncandidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpyyxl5g0r.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpyyxl5g0r.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = -1\n    for x in arr\n        if x > largest\n            largest\
    \ = x\n        end\n    end\n    return largest\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert can_arrange([1,2,4,3,5]) == 3\n@assert can_arrange([1,2,3]) == -1\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns true if the array arr has all\
    \ unique elements. \nIf there are two or more equal elements, return false.\n\
    using Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpica9zy16.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpica9zy16.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = -1\n    for x in arr\n        if x > largest\n            largest\
    \ = x\n        end\n    end\n    return largest\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_po3i09q.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_po3i09q.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert can_arrange([1,2,4,3,5]) == 3\n@assert\
    \ can_arrange([1,2,3]) == -1\n</cell>\n<text>\nExercise 4\nWrite a function that\
    \ returns the number of times the given element appears in an array. For example,\
    \ the number of times the value 3 appears in [1,2,3,4,5,6,7,8,9,10] would be 3.\n\
    using Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9aflepv3.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp9aflepv3.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert can_arrange([1,2,4,3,5]) == 3\n@assert\
    \ can_arrange([1,2,3]) == -1\n</cell>\n<text>\n4.3 Finding the median of a vector\n\
    The median is the value separating the higher half of a data set from the lower\
    \ half. \nThe median of a data set is the value separating the higher half of\
    \ a data set from the \nlower half. \nThe median of a data set is the value separating\
    \ the higher half of a data set from the \nlower half. \nThe median of a data\
    \ set is the value separating the higher half of a data set from the \nlower half.\
    \ \nThe median of a data set is the value separating the higher half of a data\
    \ set from the \nlower half. \nThe median of a data set is the value separating\
    \ the higher half of a data set from the \nlower half. \nThe median of a data\
    \ set is the value separating the higher half of a data set from the \nlower half.\
    \ \nThe median of a data set is the value separating the higher half of a data\
    \ set from the \nlower half. \nThe median of a data set is the value separating\
    \ the higher half of a data set from the \nlower half. \nThe median of a data\
    \ set is the value separating the higher half of a data set from the \nlower half.\
    \ \nThe median of a data set is the value separating the higher half of a data\
    \ set from the \nlower half. \nThe median of a data set is the value separating\
    \ the higher half of a data set from the \nlower half. \nThe median of a data\
    \ set is the value separating the higher half of a data set from the \nlower half.\
    \ \nThe median of a data set is the value separating the higher half of a data\
    \ set from the \nlower half. \nThe median of a data set is the value separating\
    \ the higher half of a data set from the \nlower half. \nThe median of a data\
    \ set is the value separating the higher half of a data set from the \nlower half.\
    \ \nThe median of a data set is the value separating the higher half of a data\
    \ set from the \nlower half. \nThe median of a data set is the value separating\
    \ the higher half of a data set from the \nlower half. \nThe median of a data\
    \ set is the value separating the higher half of a data set from the \nlower half.\
    \ \nThe median of a data set is the value separating the higher half of a data\
    \ set from the \nlower half. \nThe median of a data set is the value separating\
    \ the higher half of a data set from the \nlower half. \nThe median of a data\
    \ set is the value separating the higher half of a \nusing Test\n\n@testset begin\n\
    \ncandidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_ir6_ajk.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_ir6_ajk.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = -1\n    for x in arr\n        if x > largest\n            largest\
    \ = x\n        end\n    end\n    return largest\nend\n</cell>\n<code language=julia-1.3>\n\
    @time can_arrange([1,2,4,3,5])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the number of elements in a vector that are not equal to its index.\n\
    using Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp80jbkho2.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp80jbkho2.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = -1\n    largestIndex = 0\n    for index in 1:length(arr)\n \
    \       if arr[index] > arr[largest]\n            largest = arr[index]\n     \
    \       largestIndex = index\n        end\n    end\n    return largestIndex\n\
    end\n</cell>\n<code language=julia-1.4>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp1vgmlrl1.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp1vgmlrl1.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for x in arr[2:end]\n        if x > largest\n  \
    \          largest = x\n        end\n    end\n    return largest\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\
    \t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\
    \t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8,\
    \ 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpm6s4mrlz.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpm6s4mrlz.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpgi3vlsy4.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpgi3vlsy4.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert can_arrange([1,2,4,3,5]) == 3\n@assert\
    \ can_arrange([1,2,3]) == -1\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the number of elements in the array which are not greater than or equal\
    \ to the element immediately preceding it. \nIf no such element exists then return\
    \ -1. \nThe given array will not contain duplicate values.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\
    \t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8,\
    \ 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([]))\
    \ == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpy2rq5wtn.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpy2rq5wtn.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = -1\n    largest = arr[1] if arr[1] > arr[2] else largest\n \
    \   largest = arr[2] if arr[2] > arr[1] else largest\n    largest = arr[1] if\
    \ arr[1] > arr[2] else largest\n    largest = arr[2] if arr[2] > arr[1] else largest\n\
    \    largest = arr[1] if arr[1] > arr[2] else largest\n    largest = arr[2] if\
    \ arr[2] > arr[1] else largest\n    largest = arr[1] if arr[1] > arr[2] else largest\n\
    \    largest = arr[2] if arr[2] > arr[1] else largest\n    largest = arr[1] if\
    \ arr[1] > arr[2] else largest\n    largest = arr[2] if arr[2] > arr[1] else largest\n\
    \    largest = arr[1] if arr[1] > arr[2] else largest\n    largest = arr[2] if\
    \ arr[2] > arr[1] else largest\n    largest = arr[1] if arr[1] > arr[2] else largest\n\
    \    largest = arr[2] if arr[2] > arr[1] else largest\n    largest = arr[1] if\
    \ arr[1] > arr[2] else largest\n    largest = arr[2] if arr[2] > arr[1] else largest\n\
    \    largest = arr[1] if arr[1] > arr[2] else largest\n    largest = arr[2] if\
    \ arr[2] > arr[1] else largest\n    largest = arr[1] if arr[1] > arr[2] else largest\n\
    \    largest = arr[2] if arr[2] > arr[1] else largest\n    largest = arr[1] if\
    \ arr[1] > arr[2] else largest\n    largest = arr[2] if arr[2] > arr[1] else largest\n\
    \    largest = arr[1] if arr[1] > arr[2] else largest\n    largest = arr[2] if\
    \ arr[2] > arr[1] else largest\n    largest = arr[1] if arr[1] > arr[2] else largest\n\
    \    largest = arr[2] if arr[2] > arr[1] else largest\n    largest = arr[1] if\
    \ arr[1] > arr[2] else largest\n    largest = arr[2] if arr[2] > arr[1] else largest\n\
    \    largest = arr[1] if arr[1] > arr[2] else largest\n    largest = arr[2] if\
    \ arr[2] > arr[1] else largest\n    largest = arr[1] if arr[1] > arr[2] else largest\n\
    \    largest = arr[2] if arr[2] > arr\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"if\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpmvu1twfz.jl:12\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpmvu1twfz.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns true if the given array\
    \ is sorted in ascending order.\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\
    \t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\
    \t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8,\
    \ 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp6d87qy6l.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp6d87qy6l.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = Int64(-1)\n    for x in arr\n        if x > largest\n      \
    \      largest = x\n        end\n    end\n    return largest\nend\n</cell>\n<code\
    \ language=julia-1.3>\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\
    \t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\
    \t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8,\
    \ 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmrwfh4ar.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpmrwfh4ar.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpi1sosvi1.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpi1sosvi1.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = -1\n    for i in 1:length(arr)\n        if arr[i] > arr[largest]\n\
    \            largest = i\n        end\n    end\n    return largest\nend\n</cell>\n\
    <code language=julia-1.0>\n@assert can_arrange([1,2,4,3,5]) == 3\n@assert can_arrange([1,2,3])\
    \ == -1\n</cell>\n<text>\nExercise 2\nWrite a function that returns true if the\
    \ given array contains no duplicates.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmptx05x_wz.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmptx05x_wz.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        else\n            return -1\n        end\n\
    \    end\n    return largest\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ can_arrange([1,2,4,3,5]) == 3\n@assert can_arrange([1,2,3]) == -1\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the number of times an element\
    \ appears in an array. \nThe function should work for both sorted and unsorted\
    \ arrays.\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmph2v_g997.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmph2v_g997.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the number of elements\
    \ in a vector that are not equal to zero.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpez42p_yv.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpez42p_yv.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = -1\n    largestIndex = 0\n    for index in 1:length(arr)\n \
    \       if arr[index] >= arr[largest]\n            largest = arr[index]\n    \
    \        largestIndex = index\n        end\n    end\n    return largestIndex\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_y6e3o3j.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_y6e3o3j.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = -1\n    largestIndex = -1\n    for index in 1:length(arr)\n\
    \        if arr[index] <= arr[largest]\n            largest = arr[index]\n   \
    \         largestIndex = index\n        end\n    end\n    return largestIndex\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpyqipojh0.jl:26\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 4, 3, 5]) == 3\n  BoundsError: attempt to access\
    \ 5-element Array{Int64,1} at index [-1]\n  Stacktrace:\n   [1] getindex at ./array.jl:788\
    \ [inlined]\n   [2] can_arrange(::Array{Int64,1}) at /tmp/tmpyqipojh0.jl:14\n\
    \   [3] top-level scope at /tmp/tmpyqipojh0.jl:26\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpyqipojh0.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmpyqipojh0.jl:27\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 4, 5]) == -1\n  BoundsError: attempt to access 4-element Array{Int64,1} at\
    \ index [-1]\n  Stacktrace:\n   [1] getindex at ./array.jl:788 [inlined]\n   [2]\
    \ can_arrange(::Array{Int64,1}) at /tmp/tmpyqipojh0.jl:14\n   [3] top-level scope\
    \ at /tmp/tmpyqipojh0.jl:27\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpyqipojh0.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmpyqipojh0.jl:28\n  Test threw exception\n  Expression: candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2\n  BoundsError: attempt to access 9-element Array{Int64,1}\
    \ at index [-1]\n  Stacktrace:\n   [1] getindex at ./array.jl:788 [inlined]\n\
    \   [2] can_arrange(::Array{Int64,1}) at /tmp/tmpyqipojh0.jl:14\n   [3] top-level\
    \ scope at /tmp/tmpyqipojh0.jl:28\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpyqipojh0.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmpyqipojh0.jl:29\n  Test threw exception\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n  BoundsError: attempt to access 5-element Array{Int64,1}\
    \ at index [-1]\n  Stacktrace:\n   [1] getindex at ./array.jl:788 [inlined]\n\
    \   [2] can_arrange(::Array{Int64,1}) at /tmp/tmpyqipojh0.jl:14\n   [3] top-level\
    \ scope at /tmp/tmpyqipojh0.jl:29\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpyqipojh0.jl:25\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    1      4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyqipojh0.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmplcem6jx1.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmplcem6jx1.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = -1\n    largestIndex = -1\n    for i in 1:length(arr)\n    \
    \    if arr[i] > largest\n            largest = arr[i]\n            largestIndex\
    \ = i\n        end\n    end\n    return largestIndex\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert can_arrange([1,2,4,3,5]) == 3\n@assert can_arrange([1,2,3]) == -1\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the number of unique elements\
    \ in an array. For example,\n    given [1,2,2,3] return 3.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\
    \t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8,\
    \ 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([]))\
    \ == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphn8m6y0o.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmphn8m6y0o.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpzbgawrh3.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpzbgawrh3.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = -1\n    for x in arr\n        if x > largest\n            largest\
    \ = x\n        end\n    end\n    return largest\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert can_arrange([1,2,4,3,5]) == 3\n@assert can_arrange([1,2,3]) == -1\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of times the element\
    \ 0 appears in an array. For example, [1,0,2,0,3,0] has two zeros.\nusing Test\n\
    \n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5])\
    \ == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5,\
    \ 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([]))\
    \ == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpg99iytx9.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpg99iytx9.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = -1\n    for x in arr\n        if x > largest\n            largest\
    \ = x\n        end\n    end\n    return largest\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpio61640l.jl:24\n  Expression: candidate([1,\
    \ 2, 4, 3, 5]) == 3\n   Evaluated: 5 == 3\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpio61640l.jl:24\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpio61640l.jl:23\ntest set: Test Failed at /tmp/tmpio61640l.jl:25\n\
    \  Expression: candidate([1, 2, 4, 5]) == -1\n   Evaluated: 5 == -1\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpio61640l.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpio61640l.jl:23\ntest set: Test Failed at /tmp/tmpio61640l.jl:26\n\
    \  Expression: candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2\n   Evaluated: 10\
    \ == 2\nStacktrace:\n [1] top-level scope at /tmp/tmpio61640l.jl:26\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpio61640l.jl:23\ntest set: Test Failed at /tmp/tmpio61640l.jl:27\n\
    \  Expression: candidate([4, 8, 5, 7, 3]) == 4\n   Evaluated: 8 == 4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpio61640l.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpio61640l.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpio61640l.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = -1\n    for x in arr\n        if x > largest\n            largest\
    \ = x\n        end\n    end\n    return largest\nend\n</cell>\n<code language=julia-1.3>\n\
    @time can_arrange([1,2,4,3,5])\n</cell>\n<text>\nExercise\nWrite a function that\
    \ returns the largest index of an element which is not greater than or equal to\
    \ the element immediately preceding it. If\n    no such element exists then return\
    \ -1. The given array will not contain\n    duplicate values.\nusing Test\n\n\
    @testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5])\
    \ == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5,\
    \ 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([]))\
    \ == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpk8v60808.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpk8v60808.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.4>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpin608f09.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpin608f09.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.5>\n@time can_arrange([1,2,4,3,5])\n</cell>\n\
    <code language=julia-1.5>\n@time can_arrange([1,2,3])\n</cell>\n<text>\nExercise:\
    \ Write a function that returns the index of the element in the given array that\
    \ is closest to the given value. If there are multiple such elements then return\
    \ the smallest index.\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\
    \t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\
    \t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8,\
    \ 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpl8e1y934.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpl8e1y934.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.5>\n@time can_arrange([1,2,4,3,5])\n</cell>\n\
    <code language=julia-1.5>\n@time can_arrange([1,2,3])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the number of times the given element appears\
    \ in an array. \nThe given array will not contain duplicate values.\nusing Test\n\
    \n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5])\
    \ == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5,\
    \ 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([]))\
    \ == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_a6cqoxg.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_a6cqoxg.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<text>\nExercise 4\nWrite a function that returns the number of elements\
    \ in a vector which are not equal to zero.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmps_a3beff.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmps_a3beff.jl:19\n"
  exit_code: 1
  status: Exception
