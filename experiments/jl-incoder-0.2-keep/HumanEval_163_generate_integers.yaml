name: HumanEval_163_generate_integers
language: julia
prompt: "\"\"\"\n    Given two positive integers a and b, return the even digits between\
  \ a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
  \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
  \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2,\
  \ 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
  \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
completions: ["    if a < b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend", "    if a < 0 || b < 0\n        error(\"a and b must be positive\"\
    )\n    end\n    \n    evens = Vector{Int64}()\n    \n    while a <= b\n      \
    \  push!(evens, a)\n        a = a + 2\n    end\n    \n    evens\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes an integer $n$ and returns the\
    \ number of digits in $n$. \nFor example, given $n = 1234$, your function should\
    \ return 4.", "    generate_integers(a, b)\nend", "    \n    even_integers = Vector{Int64}()\n\
    \    \n    if a < b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\n    \n    if a < b\n        even_integers = even_integers + [Int64(a)]\n\
    \    else\n        even_integers = even_integers + [Int64(b)]\n    end\n    \n\
    \    return even_integers\nend", "    \n    generate_integers(a, b)\nend", " \
    \   \n    if a < b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend", "    \n    evens = Vector{Int64}()\n    \n    if a < b\n\
    \        generate_integers(b, a)\n    end\n    \n    while a <= b\n        push!(evens,\
    \ a)\n        \n        a = a + 2\n    end\n    \n    evens\nend\n</cell>\n<code\
    \ language=julia-1.5>\ngenerate_integers(2, 8)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(8, 2)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(10,\
    \ 14)\n</cell>\n<text>\nExercise: Generate all integers between 1 and 100 (both\
    \ included) that are divisible by 3", "    if a > b\n        generate_integers(b,\
    \ a)\n    else\n        Vector{Int64}[a, b]\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(2, 8)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(8,\
    \ 2)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(10, 14)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that generates integers between 1 and a given\
    \ number n, inclusive.", "    \n    even_integers = Vector{Int64}()\n    \n  \
    \  if a < b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\n    \n    even_integers = even_integers[2:end]\n    \n    return\
    \ even_integers\nend\n</cell>\n<code language=julia-1.5>\ngenerate_integers(2,\
    \ 8)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(8, 2)\n</cell>\n<code\
    \ language=julia-1.5>\ngenerate_integers(10, 14)\n</cell>\n<text>\nExercise 2\n\
    Write a function that generates integers between 1 and a given number n inclusively.",
  "    \n    evens = Vector{Int64}()\n    \n    if a < b\n        generate_integers(b,\
    \ a)\n    else\n        generate_integers(a, b)\n    end\n    \n    if a < b\n\
    \        evens = evens..(b - a+1)\n    else\n        evens = evens..(a - b+1)\n\
    \    end\n    \n    evens\nend\n</cell>\n<code language=julia-1.5>\ngenerate_integers(2,\
    \ 8)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(8, 2)\n</cell>\n<code\
    \ language=julia-1.5>\ngenerate_integers(10, 14)\n</cell>\n<text>\nExercise: Write\
    \ a function that generates integers within a given range. Test it by generating\
    \ integers between 2 and 10 and then between 10 and 20.", "    if a < b\n    \
    \    generate_integers(b, a)\n    else\n        generate_integers(a, b)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\ngenerate_integers(2, 8)\n</cell>\n<code\
    \ language=julia-1.5>\ngenerate_integers(8, 2)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(10, 14)\n</cell>\n<text>\nProblem 3\nWrite a function that generates\
    \ all the integers between 1 and a given number n, inclusive.", "    if a < b\n\
    \        generate_integers(b, a)\n    else\n        generate_integers(a, b)\n\
    \    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns the\
    \ sum of all even integers between 1 and a given integer n.", "    if a < b\n\
    \        generate_integers(b, a)\n    else\n        generate_integers(a, b)\n\
    \    end\nend\n</cell>\n<text>\nNow let's generate some random integers between\
    \ 0 and 100 and count how many times each integer appears.", "    if a < b\n \
    \       generate_integers(b, a)\n    else\n        generate_integers(a, b)\n \
    \   end\nend\n</cell>\n<code language=julia-1.5>\ngenerate_integers(2, 8)\n</cell>\n\
    <code language=julia-1.5>\ngenerate_integers(8, 2)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(10, 14)\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ generates all the integers between 1 and 100 (both included) that are divisible\
    \ by 3", "    \n    evens = Vector{Int64}()\n    \n    if a < b\n        generate_integers(b,\
    \ a)\n    end\n    \n    if b < a\n        generate_integers(a, b)\n    end\n\
    \    \n    if a < b\n        evens = evens.+[a]\n    end\n    \n    if b < a\n\
    \        evens = evens.+[b]\n    end\n    \n    return evens\nend\n</cell>\n<code\
    \ language=julia-1.5>\ngenerate_integers(2, 8)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(8, 2)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(10,\
    \ 14)\n</cell>\n<text>\nProblem 3\nWrite a function that returns the number of\
    \ integers between 1 and n that have exactly two digits.", "    if a < 0 || b\
    \ < 0\n        error(\"generate_integers: a and b must be non-negative\")\n  \
    \  end\n    \n    if b < a\n        error(\"generate_integers: b must be greater\
    \ than a\")\n    end", "    if a > b\n        generate_integers(b, a)\n    else\n\
    \        generate_integers(a, b)\n    end\nend", "    if a < b\n        generate_integers(b,\
    \ a)\n    else\n        generate_integers(a, b)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.3>\n\"\"\"\n    Given a positive integer a, return the sum\
    \ of its digits in ascending order.", "    if a < 0 || b < 0 \n        error(\"\
    generate_integers: both arguments must be positive\")\n    else if a < b \n  \
    \      error(\"generate_integers: a must be less than b\")\n    else \n      \
    \  generate_integers(b, a) \n    end\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns the number of digits in an integer.", "    if a < b\n\
    \        generate_integers(b, a)\n    else\n        generate_integers(a, b)\n\
    \    end\nend", "    generate_integers(a, b)\nend", "    if a < b\n        generate_integers(b,\
    \ a)\n    else\n        generate_integers(a, b)\n    end\nend", "    \n    if\
    \ a < b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend", "    if a < 0 || b < 0\n        error(\"a and b must be positive\"\
    )\n    end\n    \n    if a == 0 || b == 0\n        return Vector{Int64}()\n  \
    \  end\n    \n    evens = generate_integers(a - 1, b)\n    evens = evens[2:end]\
    \ + evens[2:end]\n    evens = evens[2:end] + evens[2:end]\n    evens = evens[2:end]\
    \ + evens[2:end]\n    evens = evens[2:end] + evens[2:end]\n    evens = evens[2:end]\
    \ + evens[2:end]\n    evens = evens[2:end] + evens[2:end]\n    evens = evens[2:end]\
    \ + evens[2:end]\n    evens = evens[2:end] + evens[2:end]\n    evens = evens[2:end]\
    \ + evens[2:end]\n    evens = evens[2:end] + evens[2:end]\n    evens = evens[2:end]\
    \ + evens[2:end]\n    evens = evens[2:end] + evens[2:end]\n    evens = evens[2:end]\
    \ + evens[2:end]\n    evens = evens[2:end] + evens[2:end]\n    evens = evens[2:end]\
    \ + evens[2:end]\n    evens = evens[2:end] + evens[2:end]\n    evens = evens[2:end]\
    \ + evens[2:end]\n    evens = evens[2:end] + evens[2:end]\n    evens = evens[2:end]\
    \ + evens[2:end]\n    evens = evens[2:end] + evens[2:end]\n    evens = evens[2:end]\
    \ + evens[2:end]\n    evens = evens[2:end] + evens[2:end]\n    evens = evens[2:end]\
    \ + evens[2:end]\n    evens = evens[2:end] + evens[2:end]\n    evens = evens[2:end]\
    \ + evens[2:end]\n    evens = evens[2:end] + evens[2:end]\n    evens = evens[2:end]\
    \ + evens[2:end]\n    evens = evens[2:end] + evens[2:end]\n    evens = evens[2:end]\
    \ + evens[2:end]\n    evens = evens[2:end] + evens[2:end]\n    evens = evens[2:end]\
    \ + evens[2:end]\n    evens = evens[2:end] + evens[2:end]\n    evens = evens[2:end]\
    \ + evens[2:end]\n    evens = evens[2:end] + evens[2:end]\n    evens = evens[2:end]\
    \ + evens[2:end]\n    evens = evens[2:end] + ", "    if a < b\n        generate_integers(b,\
    \ a)\n    else\n        generate_integers(a, b)\n    end\nend", "    if a < b\n\
    \        generate_integers(b, a)\n    else\n        generate_integers(a, b)\n\
    \    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that generates all\
    \ the integers between 1 and $n$, inclusive, where $n$ is given as an argument\
    \ to the function.", "    \n    evens = Vector{Int64}()\n    \n    if a < b\n\
    \        generate_integers(b, a)\n    else\n        generate_integers(a, b)\n\
    \    end\n    \n    if a < b\n        evens = evens.+(a-b)\n    end\n    \n  \
    \  return evens\nend\n</cell>\n<code language=julia-1.5>\ngenerate_integers(2,\
    \ 8)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(8, 2)\n</cell>\n<code\
    \ language=julia-1.5>\ngenerate_integers(10, 14)\n</cell>\n<text>\nProblem 4\n\
    Write a function that returns the number of digits in an integer.", "    generate_integers(a,\
    \ b)\nend", "    if a < b\n        generate_integers(b, a)\n    else\n       \
    \ generate_integers(a, b)\n    end\nend", "    \n    even_integers = Vector{Int64}()\n\
    \    \n    if a < b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\n    \n    for i in a:a:b\n        if i % 2 == 0\n            even_integers\
    \ << i\n        end\n    end\n    \n    return even_integers\nend\n</cell>\n<code\
    \ language=julia-1.5>\ngenerate_integers(2, 8)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(8, 2)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(10,\
    \ 14)\n</cell>\n<text>\nProblem 7\nWrite a function that returns the number of\
    \ integers between a and b inclusive.", "    \n    evens = Vector{Int64}()\n \
    \   \n    if a < b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\n    \n    if a < b\n        evens = evens..(b-a)\n    end\n   \
    \ \n    if a < b\n        evens = evens..(a-b)\n    end\n    \n    return evens\n\
    end\n</cell>\n<code language=julia-1.5>\ngenerate_integers(2, 8)\n</cell>\n<code\
    \ language=julia-1.5>\ngenerate_integers(8, 2)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(10, 14)\n</cell>\n<text>\nProblem 7: Generate all integers between\
    \ 1 and 100 (both included)\nThe first thing you might want to do is generate\
    \ all the integers between 1 and 100 (both included).", "    if b < a \n     \
    \   error(\"generate_integers: b < a\")\n    end\n    \n    evens = Vector{Int64}()\n\
    \    \n    while a <= b\n        push!(evens, a)\n        \n        a += 2\n \
    \   end\n    \n    return evens\nend\n</cell>\n<code language=julia-1.5>\ngenerate_integers(2,\
    \ 8)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(8, 2)\n</cell>\n<code\
    \ language=julia-1.5>\ngenerate_integers(10, 14)\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes in two positive integers a and b and returns the sum\
    \ of all even digits between a and b.", "    if a < b \n        generate_integers(b,\
    \ a)\n    else \n        generate_integers(a, b)\n    end\nend", "    if a < b\n\
    \        generate_integers(b, a)\n    else\n        generate_integers(a, b)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\ngenerate_integers(2, 8)\n</cell>\n\
    <code language=julia-1.5>\ngenerate_integers(8, 2)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(10, 14)\n</cell>\n<text>\nProblem 2\nWrite a function that returns\
    \ the number of digits in an integer.", "    if a < b\n        generate_integers(b,\
    \ a)\n    else\n        generate_integers(a, b)\n    end\nend", "    \n    if\
    \ b < a \n        error(\"generate_integers: b < a\")\n    end\n    \n    evens\
    \ = Vector{Int64}()\n    \n    while a <= b\n        push!(evens, a)\n       \
    \ a += 2\n    end\n    \n    return evens\nend\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(2, 8)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(8,\
    \ 2)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(10, 14)\n</cell>\n\
    <text>\nProblem 3\nWrite a function that takes in two positive integers a and\
    \ b, and returns the sum of all even digits in a and b.", "    if a < b\n    \
    \    generate_integers(b, a)\n    else\n        generate_integers(a, b)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\ngenerate_integers(2, 8)\n</cell>\n<code\
    \ language=julia-1.5>\ngenerate_integers(8, 2)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(10, 14)\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes in two positive integers a and b, and returns the sum of all the even\
    \ digits in a and b. For example, generate_integers(2, 8) => [2, 4, 6, 8], and\
    \ generate_integers(8, 2) => [2, 4, 6, 8].", "    if a < b\n        generate_integers(b,\
    \ a)\n    else\n        generate_integers(a, b)\n    end\nend", "    generate_integers(0,\
    \ b)\nend", "    \n    evens = Vector{Int64}()\n    \n    for n in range(a, b)\
    \ \n        if n % 2 == 0 \n            evens.push(n)\n        end\n    end\n\
    \    \n    return evens\nend\n</cell>\n<code language=julia-1.5>\ngenerate_integers(2,\
    \ 8)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(8, 2)\n</cell>\n<code\
    \ language=julia-1.5>\ngenerate_integers(10, 14)\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes in two positive integers a and b and returns the number\
    \ of integers between a and b that are divisible by 3.", "    \n    evens = Vector{Int64}()\n\
    \    \n    if a < b\n        generate_integers(b, a)\n    elseif b < a\n     \
    \   generate_integers(a, b)\n    else\n        evens = a % b\n        generate_integers(a\
    \ / b, b)\n    end\n    \n    evens\nend\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(2, 8)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(8,\
    \ 2)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(10, 14)\n</cell>\n\
    <text>\nProblem 3\nWrite a function that returns the number of integers between\
    \ 1 and a given integer that have no factors in common. For example, given that\
    \ n = 10, the function should return 3.", "    if a > b\n        generate_integers(b,\
    \ a)\n    else\n        generate_integers(a, b)\n    end\nend", "    if a > b\n\
    \        generate_integers(b, a)\n    else\n        generate_integers(a, b)\n\
    \    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes in a list\
    \ of integers and returns the sum of the even integers in the list.", "    \n\
    \    evens = Vector{Int64}()\n    \n    if b < a \n        error(\"generate_integers:\
    \ b is less than a\")\n    end\n    \n    while a <= b\n        push!(evens, a)\n\
    \        a += 1\n    end\n    \n    return evens\nend\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(2, 8)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(8,\
    \ 2)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(10, 14)\n</cell>\n\
    <text>\nProblem 3\nWrite a function that returns the number of integers between\
    \ 1 and a given integer that do not exceed a given maximum.", "    if a < 0 ||\
    \ b < 0\n        error(\"Invalid input\")\n    end\n    \n    evens = Vector{Int64}()\n\
    \    \n    while a <= b\n        evens.append(a)\n        a = a + 2\n    end\n\
    \    \n    return evens\nend\n</cell>\n<code language=julia-1.5>\ngenerate_integers(2,\
    \ 8)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(8, 2)\n</cell>\n<code\
    \ language=julia-1.5>\ngenerate_integers(10, 14)\n</cell>\n<text>\nProblem 4\n\
    Write a function that generates all the integers between 1 and a given number\
    \ n inclusive.", "    generate_integers(0, b)\nend", "    if a < 0 || b < 0\n\
    \        error(\"a and b must be positive\")\n    end\n    \n    evens = Vector{Int64}()\n\
    \    \n    if b == 0\n        return evens\n    end\n    \n    if a < b\n    \
    \    a, b = b, a\n    end\n    \n    for i = a to b\n        if i % 2 == 0\n \
    \           push!(evens, i)\n        end\n    end\n    \n    return evens\nend\n\
    </cell>\n<code language=julia-1.5>\ngenerate_integers(2, 8)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(8, 2)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(10,\
    \ 14)\n</cell>\n<text>\nExercise 2\nWrite a function called generate_primes that\
    \ takes in two positive integers a and b and returns a vector containing all the\
    \ prime numbers less than or equal to b (inclusive).", "    if a < b\n       \
    \ generate_integers(b, a)\n    else\n        generate_integers(a, b)\n    end\n\
    end", "    generate_integers(0, b)\n    generate_integers(a, 0)\nend", "    if\
    \ a < b\n        generate_integers(b, a)\n    else\n        Vector{Int64}[a, b]\n\
    \    end\nend", "    if a < b \n        generate_integers(b, a)\n    else\n  \
    \      generate_integers(a, b)\n    end\nend", "    if a < b\n        generate_integers(b,\
    \ a)\n    else\n        generate_integers(a, b)\n    end\nend", "    if b < a\
    \ \n        error(\"generate_integers: b < a\")\n    end\n    \n    evens = Vector{Int64}()\n\
    \    \n    while a <= b\n        evens += [a]\n        a += 1\n    end\n    \n\
    \    return evens\nend\n</cell>\n<code language=julia-1.5>\ngenerate_integers(2,\
    \ 8)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(8, 2)\n</cell>\n<code\
    \ language=julia-1.5>\ngenerate_integers(10, 14)\n</cell>\n<text>\nProblem 3\n\
    Write a function that returns the number of integers between 1 and n that have\
    \ the property that each integer is divisible by 3.", "    if a < b\n        generate_integers(b,\
    \ a)\n    else\n        generate_integers(a, b)\n    end\nend", "    if a < b\n\
    \        generate_integers(b, a)\n    else\n        generate_integers(a, b)\n\
    \    end\nend", "    if a < b \n        generate_integers(b, a)\n    else\n  \
    \      generate_integers(a, b)\n    end\nend", "    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    if a < 0 || b < 0\n        error(\"a or b must\
    \ be positive\")\n    end\n    \n    evens = Vector{Int64}()\n    \n    while\
    \ a < b\n        evens.append(a)\n        a += 2\n    end\n    \n    return evens\n\
    end\n</cell>\n<code language=julia-1.5>\ngenerate_integers(2, 8)\n</cell>\n<code\
    \ language=julia-1.5>\ngenerate_integers(8, 2)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(10, 14)\n</cell>\n<text>\nProblem 7\nWrite a function that returns\
    \ the number of integers between 1 and n that have exactly two digits.", "   \
    \ generate_integers(a, b)\nend", "    if a > b\n        generate_integers(b, a)\n\
    \    else\n        generate_integers(a, b)\n    end\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that generates all the integers between two given integers,\
    \ inclusive.", "    if a < 0 || b < 0\n        error(\"a or b must be positive\"\
    )\n    end\n    \n    if a == 0 && b == 0\n        return Vector{Int64}()\n  \
    \  end\n    \n    evens = Vector{Int64}()\n    \n    if a < b\n        a, b =\
    \ b, a\n    end\n    \n    for i = a to b\n        if i % 2 == 0\n           \
    \ push!(evens, i)\n        end\n    end\n    \n    return evens\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that generates all the integers between 0\
    \ and $n$, inclusive, that have $k$ digits. For example, generate_integers(10,\
    \ 5, 2) should return [10, 11, 12, 13, 14, 15].", "    if a < b\n        generate_integers(b,\
    \ a)\n    else\n        generate_integers(a, b)\n    end\nend", "    if b < a\
    \ \n        error(\"generate_integers: b is less than a\")\n    end\n    \n  \
    \  evens = Vector{Int64}()\n    \n    while a <= b\n        push!(evens, a)\n\
    \        a += 2\n    end\n    \n    return evens\nend\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(2, 8)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(8,\
    \ 2)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(10, 14)\n</cell>\n\
    <text>\nExercise\nWrite a function called generate_integers_between_1_and_100\
    \ that takes in two positive integers a and b and returns the even digits between\
    \ a and b, in ascending order.", "    \n    evens = Vector{Int64}()\n    \n  \
    \  while a < b\n        evens.append(a)\n        a += 1\n    end\n    \n    return\
    \ evens\nend\n</cell>\n<code language=julia-1.5>\ngenerate_integers(2, 8)\n</cell>\n\
    <code language=julia-1.5>\ngenerate_integers(8, 2)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(10, 14)\n</cell>\n<text>\nProblem 3\nWrite a function that generates\
    \ all the integers between 1 and 100 (both included) that are divisible by 7 and\
    \ divisible by 11. Do not use any loops.", "    generate_integers(0, b)\nend",
  "    \n    evens = Vector{Int64}()\n    \n    if a < b\n        generate_integers(b\
    \ + 1, a)\n    else\n        generate_integers(a, b - 1)\n    end\n    \n    for\
    \ n in a:(b - 1)\n        if n % 2 == 0\n            push!(evens, n)\n       \
    \ end\n    end\n    \n    return evens\nend\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(2, 8)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(8,\
    \ 2)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(10, 14)\n</cell>\n\
    <text>\nProblem 7\nWrite a function that returns the number of integers within\
    \ a given range\nthat are divisible by another given integer.", "    if a < 0\
    \ || b < 0 || a > b || b > a || b - a < 2 \n        error(\"generate_integers:\
    \ invalid input\") \n    else \n        generate_integers_aux(a, b, [], 0)\n \
    \   end\nend", "    if b < a \n        error(\"generate_integers: b must be greater\
    \ than a\")\n    end\n    \n    evens = Vector{Int64}()\n    \n    while a <=\
    \ b\n        evens.append(a)\n        a += 2\n    end\n    \n    return evens\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that takes in two positive\
    \ integers a and b, and returns the number of integers between a and b that are\
    \ divisible by 3.", "    if a < b\n        generate_integers(b, a)\n    else\n\
    \        generate_integers(a, b)\n    end\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes in two positive integers a and b and returns the number\
    \ of digits in between a and b. For example, generate_integers(2, 8) returns 2,\
    \ generate_integers(8, 2) returns 2, and generate_integers(10, 14) returns 0.",
  "    if a < b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend", "    if b < a \n        error(\"generate_integers: b must\
    \ be greater than a\")\n    end\n    \n    evens = Vector{Int64}()\n    while\
    \ a <= b\n        push!(evens, a)\n        a += 2\n    end\n    evens\nend\n</cell>\n\
    <code language=julia-1.5>\ngenerate_integers(2, 8)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(8, 2)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(10,\
    \ 14)\n</cell>\n<text>\nExercise 2\nWrite a function that generates integers between\
    \ 1 and 100 (both inclusive) \nand returns the even numbers in ascending order.",
  "    if a < b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend\n</cell>\n<code language=julia-1.5>\ngenerate_integers(2, 8)\n\
    </cell>\n<code language=julia-1.5>\ngenerate_integers(8, 2)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(10, 14)\n</cell>\n<text>\nExercise\nWrite a function that generates\
    \ integers up to a specified maximum value", "    if a < b\n        generate_integers(b,\
    \ a)\n    else\n        generate_integers(a, b)\n    end\nend", "    if a < b\n\
    \        generate_integers(b, a)\n    else\n        generate_integers(a, b)\n\
    \    end\nend", "    generate_integers(0, b)\nend", "    \n    even_integers =\
    \ Vector{Int64}()\n    \n    if a < b\n        generate_integers(b, a)\n    else\n\
    \        generate_integers(a, b)\n    end\n    \n    for n in 1:(b-a+1)\n    \
    \    if n % 2 == 0\n            even_integers = push!(even_integers, n) \n   \
    \     end\n    end\n    \n    even_integers\nend\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(2, 8)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(8,\
    \ 2)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(10, 14)\n</cell>\n\
    <text>\nProblem 3\nWrite a function that takes in two positive integers a and\
    \ b, and returns all integers between a and b (inclusive), inclusive.", "    if\
    \ a < b \n        generate_integers(b, a) \n    else \n        generate_integers(a,\
    \ b)\n    end\nend", "    \n    if a < b\n        generate_integers(b, a)\n  \
    \  else\n        generate_integers(a, b)\n    end\nend", "    if a < b \n    \
    \    generate_integers(b, a)\n    else\n        generate_integers(a, b)\n    end\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that generates all the integers\
    \ between 1 and a given number $n$, inclusive.", "    if a < b \n        generate_integers(b,\
    \ a)\n    else\n        Vector{Int64}[a, b]\n    end\nend", "    generate_integers(a,\
    \ b)\nend", "    if b < a \n        error(\"generate_integers: b must be greater\
    \ than a\")\n    end\n    \n    evens = Vector{Int64}()\n    \n    while a <=\
    \ b\n        evens.append(a)\n        a = a + 2\n    end\n    \n    return evens\n\
    end\n</cell>\n<code language=julia-1.4>\ngenerate_integers(2, 8)\n</cell>\n<code\
    \ language=julia-1.4>\ngenerate_integers(8, 2)\n</cell>\n<code language=julia-1.4>\n\
    generate_integers(10, 14)\n</cell>\n<text>\nExercise: Generate all integers between\
    \ 1 and 100 (both included) that are divisible by 3", "    if b < a \n       \
    \ error(\"generate_integers: b must be greater than a\")\n    end\n    \n    digits\
    \ = Vector{Int64}()\n    \n    while a <= b\n        push!(digits, a)\n      \
    \  a = a + 2\n    end\n    \n    return digits\nend\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(2, 8)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(8,\
    \ 2)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(10, 14)\n</cell>\n\
    <text>\nProblem 7: Generate all integers between 1 and 100 (both included) that\
    \ are divisible by 3", "    if a < b\n        generate_integers(b, a)\n    else\n\
    \        generate_integers(a, b)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(2, 8)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(8,\
    \ 2)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(10, 14)\n</cell>\n\
    <text>\nExercise\nWrite a function that generates integers up to a specified maximum.",
  "    if a < b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend", "    \n    even_integers = Vector{Int64}()\n    \n    if\
    \ a < b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\n    \n    if a < b\n        even_integers = even_integers[end-1:end]\n\
    \    else\n        even_integers = even_integers[end-1:end]\n    end\n    \n \
    \   even_integers = even_integers[2:end]\n    \n    return even_integers\nend\n\
    </cell>\n<code language=julia-1.5>\ngenerate_integers(2, 8)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(8, 2)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(10,\
    \ 14)\n</cell>\n<text>\nProblem 2\nWrite a function that generates all the prime\
    \ numbers between two given integers, inclusive.", "    \n    evens = Vector{Int64}()\n\
    \    \n    if a < b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\n    \n    evens = evens.+(a:b).filter(x -> x % 2 == 0)\n    \n\
    \    return evens\nend\n</cell>\n<code language=julia-1.5>\ngenerate_integers(2,\
    \ 8)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(8, 2)\n</cell>\n<code\
    \ language=julia-1.5>\ngenerate_integers(10, 14)\n</cell>\n<text>\nExercise\n\
    Write a function that generates integers between 1 and 100 (both inclusive) that\
    \ are divisible by 7 and divisible by 3.", "    \n    if a < b\n        generate_integers(b,\
    \ a)\n    else\n        generate_integers(a, b)\n    end\nend", "    if a > b\
    \ \n        a, b = b, a\n    end\n    \n    evens = Vector{Int64}()\n    \n  \
    \  while a <= b\n        evens.append(a)\n        a += 2\n    end\n    \n    return\
    \ evens\nend\n</cell>\n<code language=julia-1.5>\ngenerate_integers(2, 8)\n</cell>\n\
    <code language=julia-1.5>\ngenerate_integers(8, 2)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(10, 14)\n</cell>\n<text>\nProblem 3\nWrite a function that generates\
    \ all the integers between 1 and 100 that are divisible by 3 or 5.", "    \n \
    \   if b < a \n        error(\"generate_integers: b < a\")\n    end\n    \n  \
    \  evens = Vector{Int64}()\n    \n    while a <= b\n        push!(evens, a)\n\
    \        \n        a = a + 2\n    end\n    \n    return evens\nend\n</cell>\n\
    <code language=julia-1.5>\ngenerate_integers(2, 8)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(8, 2)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(10,\
    \ 14)\n</cell>\n<text>\nExercise\nWrite a function that generates integers between\
    \ 1 and 100 (both inclusive), inclusive.", "    if a < b\n        generate_integers(b,\
    \ a)\n    else\n        generate_integers(a, b)\n    end\nend", "    if a < b\n\
    \        generate_integers(b, a)\n    else\n        generate_integers(a, b)\n\
    \    end\nend", "    \n    if a < b\n        generate_integers(b, a)\n    else\n\
    \        generate_integers(a, b)\n    end\n    \nend", "    if a > b\n       \
    \ a, b = b, a\n    end\n    \n    evens = Vector{Int64}()\n    \n    while a <=\
    \ b\n        push!(evens, a)\n        a += 2\n    end\n    \n    return evens\n\
    end\n</cell>\n<code language=julia-1.5>\ngenerate_integers(2, 8)\n</cell>\n<code\
    \ language=julia-1.5>\ngenerate_integers(8, 2)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(10, 14)\n</cell>\n<text>\nExercise: Generate a list of all integers\
    \ between 1 and 100 that are divisible by 3", "    if a < b\n        generate_integers(b,\
    \ a)\n    else\n        generate_integers(a, b)\n    end\nend\n</cell>\n<text>\n\
    Exercise\nWrite a function that generates all the integers between two given integers,\
    \ inclusive.", "    \n    if a < b\n        generate_integers(b, a)\n    else\n\
    \        generate_integers(a, b)\n    end\nend", "    if a < b\n        generate_integers(b,\
    \ a)\n    else\n        Vector{Int64}(undef, a-b+1)\n    end\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that generates all the integers between 1 and a given\
    \ number n, inclusive.", "    if b < a \n        generate_integers(b, a)\n   \
    \ else\n        Vector{Int64}(undef, a-b+1)\n    end\nend", "    if a < b\n  \
    \      generate_integers(b, a)\n    else\n        generate_integers(a, b)\n  \
    \  end\nend", "    if a < b\n        generate_integers(b, a)\n    else\n     \
    \   generate_integers(a, b)\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a positive integer $n$ and returns the number of digits\
    \ in $n$. For example, generate_integers(10, 14) => 2.", "    if a < 0 || b <\
    \ 0\n        error(\"a and b must be positive\")\n    end\n    \n    if a == 0\
    \ || b == 0\n        return []\n    end\n    \n    evens = generate_integers(a\
    \ - 1, b - 1)\n    \n    if a > b\n        evens = evens[end] + 1\n    end\n \
    \   \n    evens\nend\n</cell>\n<code language=julia-1.5>\ngenerate_integers(2,\
    \ 8)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(8, 2)\n</cell>\n<code\
    \ language=julia-1.5>\ngenerate_integers(10, 14)\n</cell>\n<text>\nProblem 3\n\
    Write a function is_palindrome(number::Int64) which returns true if the given\
    \ number is a palindrome and false otherwise.", "    if a < b \n        generate_integers(b,\
    \ a) \n    else \n        generate_integers(a, b)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\ngenerate_integers(2, 8)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(8, 2)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(10,\
    \ 14)\n</cell>\n<text>\nExercise\nWrite a function that generates integers between\
    \ 1 and 100 (both inclusive) that are divisible by 7 and divisible by 11. Then,\
    \ write a function that generates integers between 1 and 100 (both inclusive)\
    \ that are divisible by both 7 and 11. Then, write a function that generates integers\
    \ between 1 and 100 (both inclusive) that are divisible by either 7 or 11. Then,\
    \ write a function that generates integers between 1 and 100 (both inclusive)\
    \ that are divisible by both 7 and 11. Then, write a function that generates integers\
    \ between 1 and 100 (both inclusive) that are divisible by either 7 or 11.", " \
    \   if a < 0 || b < 0 || a > b || b > Int64(Int64(Int64(a) + Int64(b))) \n   \
    \     error(\"generate_integers: invalid inputs\")\n    end\n    \n    evens =\
    \ Vector{Int64}()\n    \n    while a <= b\n        push!(evens, a)\n        a\
    \ = a + Int64(Int64(a) + 1)\n    end\n    \n    evens\nend\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(2, 8)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(8,\
    \ 2)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(10, 14)\n</cell>\n\
    <text>\nProblem 7: Generate all integers between 1 and 100 (both included) that\
    \ are divisible by 7 and divisible by 11", "    if b < a \n        error(\"generate_integers:\
    \ b < a\")\n    end\n    \n    evens = Vector{Int64}()\n    \n    while a <= b\n\
    \        evens.append(a)\n        a += 2\n    end\n    \n    evens\nend\n</cell>\n\
    <code language=julia-1.5>\ngenerate_integers(2, 8)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(8, 2)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(10,\
    \ 14)\n</cell>\n<text>\nExercise: Generate all integers between 1 and 100 that\
    \ are divisible by 3", "    \n    evens = Vector{Int64}()\n    \n    if a < b\n\
    \        generate_integers(b, a)\n    else\n        generate_integers(a, b)\n\
    \    end\n    \n    if a < b\n        evens = evens.+(a:b).-(a:b)\n    else\n\
    \        evens = evens.+(a:b).-(a:b)\n    end\n    \n    return evens\nend", " \
    \   if a > b\n        generate_integers(b, a)\n    else\n        Vector{Int64}((a\
    \ % b) + 1)\n    end\nend\n</cell>\n<code language=julia-1.5>\ngenerate_integers(2,\
    \ 8)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(8, 2)\n</cell>\n<code\
    \ language=julia-1.5>\ngenerate_integers(10, 14)\n</cell>\n<text>\nExercise 2\n\
    Write a function that generates all the integers between 1 and 100 (both included)\
    \ that are divisible by 3", "    if a < b\n        generate_integers(b, a)\n \
    \   else\n        generate_integers(a, b)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(2, 8)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(8,\
    \ 2)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(10, 14)\n</cell>\n\
    <text>\nExercise: Write a function that generates integers up to a number n that\
    \ are\n    divisible by k. For example, generate_integers(10, 3, 2) should return\
    \ [10, 12, 14].", "    \n    evens = Vector{Int64}()\n    \n    while a <= b\n\
    \        evens.append(a)\n        a += 2\n    end\n    \n    return evens\nend\n\
    </cell>\n<code language=julia-1.5>\ngenerate_integers(2, 8)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(8, 2)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(10,\
    \ 14)\n</cell>\n<text>\nExercise\nWrite a function that generates integers up\
    \ to a specified maximum, inclusive.", "    \n    even_integers = Vector{Int64}()\n\
    \    \n    i = a\n    while i <= b\n        if i%2 == 0\n            even_integers\
    \ = even_integers + [i]\n        end\n        i = i + 1\n    end\n    \n    return\
    \ even_integers\nend\n</cell>\n<code language=julia-1.5>\ngenerate_integers(2,\
    \ 8)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(8, 2)\n</cell>\n<code\
    \ language=julia-1.5>\ngenerate_integers(10, 14)\n</cell>\n<text>\nProblem 4\n\
    Write a function that returns the number of digits in an integer.", "    \n  \
    \  if a < b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\n    \nend\n</cell>\n<text>\nProblem 4\nWrite a function that takes\
    \ in two positive integers a and b, and returns the number of digits in each of\
    \ their decimal representations.", "    if a < 0 || b < 0 \n        error(\"a\
    \ and b must be positive\")\n    end\n    \n    evens = Vector{Int64}()\n    \n\
    \    if b == 0 \n        return evens\n    end\n    \n    if a < b \n        a,\
    \ b = b, a\n    end\n    \n    digits = Int64[]\n    \n    while a > 0 \n    \
    \    push!(digits, a%10)\n        a = a/10\n    end\n    \n    while b > 0 \n\
    \        push!(digits, b%10)\n        b = b/10\n    end\n    \n    push!(evens,\
    \ digits...)\n    \n    return evens\nend\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes an integer $n$ and returns the number of digits in $n$.\
    \ \nFor example, \n$$ n = 12345 $$\n$$ n = 12345 $$\n$$ n = 12345 $$\n$$ n = 12345\
    \ $$\n$$ n = 12345 $$\n$$ n = 12345 $$\n$$ n = 12345 $$\n$$ n = 12345 $$\n$$ n\
    \ = 12345 $$\n$$ n = 12345 $$\n$$ n = 12345 $$\n$$ n = 12345 $$\n$$ n = 12345\
    \ $$\n$$ n = 12345 $$\n$$ n = 12345 $$\n$$ n = 12345 $$\n$$ n = 12345 $$\n$$ n\
    \ = 12345 $$\n$$ n = 12345 $$\n$$ n = 12345 $$\n$$ n = 12345 $$\n$$ n = 12345\
    \ $$\n$$ n = 12345 $$\n$$ n = 12345 $$\n$$ n = 12345 $$\n$$ n = 12345 $$\n$$ n\
    \ = 12345 $$\n$$ n = 12345 $$\n$$ n = 12345 $$\n$$ n = 12345 $$\n$$ n = 12345\
    \ $$\n$$ n = 12345 $$\n$$ n = 12345 $$\n$$ n = 12345 $$\n$$ n = 12345 $$\n$$ n\
    \ = 12345 $$\n$$ n = 12345 $$\n$$ n = 12345 $$\n$$ n = 12345 $$\n$$ n = 12345\
    \ $$\n$$ n = 12345 $$\n$$ n = 12345 $$\n$$ n = 12345 $$\n$$ n = 12345 $$\n$$ n\
    \ = 12345 $$\n$$ n = 12345 $$\n$$ n = 12345 $$\n$$ n = 12345 $$\n$$ n = 12345\
    \ $$\n$$ n = 12345 $$\n$$", "    if b < a \n        generate_integers(b, a)\n\
    \    else\n        generate_integers(b, a+1)\n    end\nend", "    if a < 0 ||\
    \ b < 0\n        error(\"a or b must be positive\")\n    end\n    \n    if a ==\
    \ 0 || b == 0\n        return Vector{Int64}()\n    end\n    \n    evens = generate_integers(a\
    \ - 1, b - 1)\n    evens = evens[2:end] + evens[2:end]\n    \n    evens = evens[a:b]\n\
    \    \n    return evens\nend\n</cell>\n<code language=julia-1.5>\ngenerate_integers(2,\
    \ 8)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(8, 2)\n</cell>\n<code\
    \ language=julia-1.5>\ngenerate_integers(10, 14)\n</cell>\n<text>\nProblem 3\n\
    Write a function called generate_primes(a::Int64, b::Int64) that takes in two\
    \ positive integers a and b and returns a vector containing the prime numbers\
    \ between a and b (inclusive).", "    if a < b\n        generate_integers(b, a)\n\
    \    else\n        generate_integers(a, b)\n    end\nend\n</cell>\n<text>\nProblem\
    \ 3\nWrite a function that generates the integers between 1 and a given number\
    \ n inclusive.", "    if a < b\n        generate_integers(b, a)\n    else\n  \
    \      generate_integers(a, b)\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that generates the integers between 1 and a given number n, inclusive.",
  "    if a > b\n        a, b = b, a\n    end\n    \n    evens = Vector{Int64}()\n\
    \    \n    while a <= b\n        push!(evens, a)\n        a += 2\n    end\n  \
    \  \n    evens\nend\n</cell>\n<code language=julia-1.5>\ngenerate_integers(2,\
    \ 8)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(8, 2)\n</cell>\n<code\
    \ language=julia-1.5>\ngenerate_integers(10, 14)\n</cell>\n<text>\nExercise\n\
    Write a function that generates integers between 1 and 100 (both inclusive) that\
    \ are divisible by 3 and 5.", "    if b < a \n        error(\"generate_integers:\
    \ b must be greater than a\")\n    end\n    \n    evens = Vector{Int64}()\n  \
    \  \n    while a <= b\n        evens.append(a)\n        a += 1\n    end\n    \n\
    \    return evens\nend\n</cell>\n<text>\nExercise 3\nWrite a function that generates\
    \ integers within a given range. Your function should take two parameters: the\
    \ first is the minimum value and the second is the maximum value. Your function\
    \ should return a list of integers within the given range.", "    if a > b\n \
    \       generate_integers(b, a)\n    else\n        generate_integers(a, b)\n \
    \   end\nend", "    if a < b \n        generate_integers(b, a)\n    else if a\
    \ == b\n        Vector{Int64}[]\n    else\n        Vector{Int64}[a % b + 1]\n\
    \    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ number of digits in an integer.", "    generate_integers(0, b)\nend", "    if\
    \ a > b\n        a, b = b, a\n    end\n    \n    evens = Vector{Int64}()\n   \
    \ \n    while a <= b\n        if a % 2 == 0\n            evens.push(a)\n     \
    \   end\n        a = a + 1\n    end\n    \n    return evens\nend\n</cell>\n<code\
    \ language=julia-1.5>\ngenerate_integers(2, 8)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(8, 2)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(10,\
    \ 14)\n</cell>\n<text>\nProblem 4\nWrite a function that takes in two positive\
    \ integers a and b, and returns the number of integers between a and b that are\
    \ divisible by 3.", "    if a < b\n        generate_integers(b, a)\n    else\n\
    \        generate_integers(a, b)\n    end\nend\n</cell>\n<text>\nExercise 2\n\
    Write a function that generates all the integers between two given integers, inclusive.",
  "    generate_integers(a, b)\nend", "    \n    evens = Vector{Int64}()\n    \n \
    \   if a < b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\n    \n    for n in 1:(b - a+1)\n        evens.push(n)\n    end\n\
    \    \n    evens\nend\n</cell>\n<code language=julia-1.5>\ngenerate_integers(2,\
    \ 8)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(8, 2)\n</cell>\n<code\
    \ language=julia-1.5>\ngenerate_integers(10, 14)\n</cell>\n<text>\nProblem 3\n\
    Write a function that returns the number of integers between a and b inclusive\
    \ that satisfy the equation $n^2 + n$ is odd.", "    \n    evens = Vector{Int64}()\n\
    \    \n    for i = a:b\n        if i%2 == 0\n            push!(evens, i)\n   \
    \     end\n    end\n    \n    return evens\nend\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(2, 8)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(8,\
    \ 2)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(10, 14)\n</cell>\n\
    <text>\nProblem 3\nWrite a function that takes in a list of integers and returns\
    \ the number of even numbers within that list.", "    \n    even_integers = Vector{Int64}()\n\
    \    \n    while(a <= b)\n        even_integers = even_integers + [a]\n      \
    \  a = a + 2\n    end\n    \n    return even_integers\nend\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(2, 8)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(8,\
    \ 2)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(10, 14)\n</cell>\n\
    <text>\nProblem 3\nWrite a function that returns the number of integers between\
    \ 1 and a given number n that have no factors of n.", "    \n    evens = Vector{Int64}()\n\
    \    \n    while a < b\n        evens.append(a)\n        a += 1\n    end\n   \
    \ \n    return evens\nend\n</cell>\n<code language=julia-1.5>\ngenerate_integers(2,\
    \ 8)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(8, 2)\n</cell>\n<code\
    \ language=julia-1.5>\ngenerate_integers(10, 14)\n</cell>\n<text>\nExercise\n\
    Write a function that generates integers between 1 and 100, and returns the even\
    \ digits between 1 and 100.", "    if b < a \n        generate_integers(b, a)\n\
    \    else\n        generate_integers(a, b)\n    end\nend", "    if a < b\n   \
    \     generate_integers(b, a)\n    else\n        generate_integers(a, b)\n   \
    \ end\nend", "    if a < b\n        generate_integers(b, a)\n    else\n      \
    \  generate_integers(a, b)\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    generate_integers(2, 8)\n</cell>\n<code language=julia-1.3>\ngenerate_integers(8,\
    \ 2)\n</cell>\n<code language=julia-1.3>\ngenerate_integers(10, 14)\n</cell>\n\
    <text>\nExercise\nWrite a function that generates integers between 1 and 100 (both\
    \ inclusive) that are divisible by 7 and divisible by 3.", "    if a < 0 || b\
    \ < 0\n        error(\"a or b must be positive\")\n    end\n    if a > b\n   \
    \     error(\"a must be less than b\")\n    end\n    \n    evens = Vector{Int64}()\n\
    \    \n    while a <= b\n        if a % 2 == 0\n            evens.push(a)\n  \
    \      end\n        a = a + 1\n    end\n    \n    return evens\nend\n</cell>\n\
    <code language=julia-1.5>\ngenerate_integers(2, 8)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(8, 2)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(10,\
    \ 14)\n</cell>\n<text>\nProblem 4\nWrite a function called generate_primes(a::Int64,\
    \ b::Int64) that generates all the prime numbers between a and b (inclusive).",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    if a < 0 || b <\
    \ 0\n        error(\"a and b must be positive\")\n    end\n    \n    evens = Vector{Int64}()\n\
    \    \n    while a <= b\n        if a % 2 == 0\n            evens.push(a)\n  \
    \      end\n        a += 1\n    end\n    \n    return evens\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that generates the integers between a and b inclusive,\
    \ inclusive, without duplicates.", "    if a < 0 || b < 0\n        error(\"a and\
    \ b must be non-negative\")\n    end\n    \n    if a > b\n        (a, b) = (b,\
    \ a)\n    end\n    \n    evens = Vector{Int64}()\n    \n    while a <= b\n   \
    \     if a % 2 == 0\n            evens.push(a)\n        end\n        a += 1\n\
    \    end\n    \n    evens\nend\n</cell>\n<text>\nProblem 3\nWrite a function that\
    \ returns the number of integers between two given integers inclusively.", " \
    \   if a < b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes in\
    \ two positive integers a and b and returns the number of integers between a and\
    \ b (inclusive) that contain an even digit.", "    if a < b\n        generate_integers(b,\
    \ a)\n    else\n        generate_integers(a, b)\n    end\nend", "    if a < b\n\
    \        generate_integers(b, a)\n    else\n        generate_integers(a, b)\n\
    \    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that generates all\
    \ the integers between two given integers, inclusive.", "    if a < b\n      \
    \  generate_integers(b, a)\n    else\n        generate_integers(a, b)\n    end\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that returns the sum of all\
    \ even integers between two given integers. For example:", "    if a < b\n   \
    \     generate_integers(b, a)\n    else\n        generate_integers(a, b)\n   \
    \ end\nend", "    \n    if a < b\n        generate_integers(b, a)\n    else\n\
    \        generate_integers(a, b)\n    end\n    \nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that generates all the integers between two given integers,\
    \ inclusive.", "    \n    evens = Vector{Int64}()\n    \n    if a < b\n      \
    \  generate_integers(b, a)\n    else\n        generate_integers(a, b)\n    end\n\
    \    \n    if a < b\n        evens = evens.+(a-b)\n    end\n    \n    return evens\n\
    end\n</cell>\n<code language=julia-1.5>\ngenerate_integers(2, 8)\n</cell>\n<code\
    \ language=julia-1.5>\ngenerate_integers(8, 2)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(10, 14)\n</cell>\n<text>\nProblem 7\nWrite a function that generates\
    \ all the integers between 1 and a given number n that have no duplicates.", " \
    \   if a < 0 || b < 0\n        error(\"a and b must be positive\")\n    end\n\
    \    \n    if b > a\n        error(\"b must be greater than a\")\n    end\n  \
    \  \n    evens = Vector{Int64}()\n    \n    while a <= b\n        evens.append(a)\n\
    \        a = a + 2\n    end\n    \n    return evens\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that generates all the integers between two given integers,\
    \ inclusive.", "    \n    evens = Vector{Int64}()\n    \n    if a < b\n      \
    \  generate_integers(b, a)\n    elseif b < a\n        generate_integers(a, b)\n\
    \    else\n        evens = [a]\n        generate_integers(b+1, a)\n    end\n \
    \   \n    return evens\nend\n</cell>\n<code language=julia-1.5>\ngenerate_integers(2,\
    \ 8)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(8, 2)\n</cell>\n<code\
    \ language=julia-1.5>\ngenerate_integers(10, 14)\n</cell>\n<text>\nProblem 3\n\
    Write a function called count_digits(n) that returns the number of digits in n.",
  "    if a > b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes in\
    \ two positive integers a and b and returns the number of digits in each of their\
    \ decimal representations.", "    \n    even_integers = Vector{Int64}()\n    \n\
    \    for x in a:a:b\n        if x % 2 == 0\n            even_integers = even_integers\
    \ + [x]\n        end\n    end\n    \n    return even_integers\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes in two positive integers a and\
    \ b, and returns the sum of all even integers between a and b. For example, generate_integers(2,\
    \ 8) => [2, 4, 6, 8], and generate_integers(8, 2) => [2, 4, 6, 8].", "    if a\
    \ < b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend", "    if a > b \n        a, b = b, a\n    end\n    \n    digits\
    \ = Vector{Int64}()\n    \n    while a <= b\n        push!(digits, a)\n      \
    \  \n        a, b = b, (a + b) / 2\n    end\n    \n    digits\nend\n</cell>\n\
    <code language=julia-1.5>\ngenerate_integers(2, 8)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(8, 2)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(10,\
    \ 14)\n</cell>\n<text>\nProblem 7\nWrite a function that returns the number of\
    \ integers between two given integers, inclusive.", "    if a < 0 || b < 0\n \
    \       error(\"generate_integers: a and b must be positive\")\n    end\n    if\
    \ a > b\n        error(\"generate_integers: a must be less than b\")\n    end\n\
    \    \n    evens = Vector{Int64}()\n    \n    while a <= b\n        push!(evens,\
    \ a)\n        \n        a = a + 2\n    end\n    \n    return evens\nend", "  \
    \  if a < 0 || b < 0 || a > b || b > a || b - a < 2 \n        error(\"Invalid\
    \ input\")\n    end\n    \n    evens = Vector{Int64}()\n    \n    while a <= b\n\
    \        evens.append(a)\n        a += 2\n    end\n    \n    return evens\nend",
  "    \n    if a > b\n        a, b = b, a\n    end\n    \n    evens = Vector{Int64}()\n\
    \    \n    while a <= b\n        push!(evens, a)\n        \n        a = a + 2\n\
    \    end\n    \n    return evens\nend\n</cell>\n<code language=julia-1.5>\ngenerate_integers(2,\
    \ 8)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(8, 2)\n</cell>\n<code\
    \ language=julia-1.5>\ngenerate_integers(10, 14)\n</cell>\n<text>\nExercise 2\n\
    Write a function that generates all the integers between 1 and 100 (both included)\
    \ that are divisible by 3.", "    if a < b\n        generate_integers(b, a)\n\
    \    else\n        Vector{Int64}[a, b]\n    end\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that generates the integers between 0 and $n$, inclusive,\
    \ where $n$ is provided as an argument.", "    if a < b\n        generate_integers(b,\
    \ a)\n    else\n        generate_integers(a, b)\n    end\nend", "    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    if b < a \n        error(\"\
    generate_integers: b must be greater than a\")\n    end\n    \n    evens = Vector{Int64}()\n\
    \    \n    while a <= b\n        push!(evens, a)\n        a += 2\n    end\n  \
    \  \n    return evens\nend\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a positive integer $n$ and returns the number of digits in $n$. For example,\
    \ given $n = 12$, the function should return 3.", "    \n    evens = Vector{Int64}()\n\
    \    \n    if a < b\n        generate_integers(b, a)\n    end\n    \n    while\
    \ a <= b\n        evens.append(a)\n        a += 1\n    end\n    \n    evens\n\
    end\n</cell>\n<code language=julia-1.3>\ngenerate_integers(2, 8)\n</cell>\n<code\
    \ language=julia-1.3>\ngenerate_integers(8, 2)\n</cell>\n<code language=julia-1.3>\n\
    generate_integers(10, 14)\n</cell>\n<text>\nProblem 3\nWrite a function that returns\
    \ the number of integers between two given integers, inclusive.", "    generate_integers(a,\
    \ b)\nend", "    \n    evens = Vector{Int64}()\n    \n    if a < b\n        generate_integers(b,\
    \ a)\n    else\n        generate_integers(a, b)\n    end\n    \n    evens = evens.+(a:b).filter(x\
    \ -> x % 2 == 0)\n    \n    return evens\nend\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(2, 8)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(8,\
    \ 2)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(10, 14)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that generates all the integers between 1\
    \ and 100 (both included) that are divisible by 7 and are also divisible by 3.",
  "    if a < b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend", "    \n    evens = Vector{Int64}()\n    \n    if a < b\n\
    \        generate_integers(b, a)\n    else\n        generate_integers(a, b)\n\
    \    end\n    \n    for n in a:(b-1)\n        push!(evens, n)\n    end\n    \n\
    \    return evens\nend\n</cell>\n<code language=julia-1.5>\ngenerate_integers(2,\
    \ 8)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(8, 2)\n</cell>\n<code\
    \ language=julia-1.5>\ngenerate_integers(10, 14)\n</cell>\n<text>\nProblem 3\n\
    Write a function called generate_primes(n) that takes an integer n and returns\
    \ a vector containing all the prime numbers less than or equal to n.", "    generate_integers(a,\
    \ b)\nend", "    if b < a \n        generate_integers(b, a)\n    else\n      \
    \  Vector{Int64}(undef, a)\n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that generates all the integers between 1 and a given number $n$, inclusive.",
  "    generate_integers(a, b)\nend", "    \n    evens = Vector{Int64}()\n    \n \
    \   if a < b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\n    \n    for n in a:(b-1)\n        if n % 2 == 0\n           \
    \ evens.push(n)\n        end\n    end\n    \n    return evens\nend\n</cell>\n\
    <code language=julia-1.5>\ngenerate_integers(2, 8)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(8, 2)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(10,\
    \ 14)\n</cell>\n<text>\nProblem 7\nWrite a function that generates all the prime\
    \ numbers up to a given number.", "    if a < b\n        generate_integers(b,\
    \ a)\n    else\n        generate_integers(a, b)\n    end\nend", "    if a > b\
    \ \n        generate_integers(b, a)\n    else\n        Vector{Int64}(undef, (b\
    \ - a) / 2 + 1)\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes in two positive integers a and b, and returns the sum of all even digits\
    \ in a and b. For example, generate_integers(2, 8) => [2, 4, 6, 8], and generate_integers(8,\
    \ 2) => [2, 4, 6, 8].", "    if b < a \n        generate_integers(b, a)\n    else\n\
    \        generate_integers(a, b)\n    end\nend", "    if a > b\n        generate_integers(b,\
    \ a)\n    else\n        generate_integers(a, b)\n    end\nend", "    if a < b\n\
    \        generate_integers(b, a)\n    else\n        Vector{Int64}((a % b) + 1)\n\
    \    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes in two\
    \ positive integers a and b, and returns the number of digits in each of their\
    \ decimal representations.", "    if b < a \n        error(\"generate_integers:\
    \ b < a\")\n    end\n    \n    evens = Vector{Int64}()\n    \n    while a <= b\n\
    \        push!(evens, a)\n        a += 2\n    end\n    \n    return evens\nend",
  "    if a < b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the number of integers between a and b (inclusive) that are divisible by c.",
  "    if a < 0 || b < 0\n        error(\"a or b must be positive\")\n    end\n  \
    \  if a == 0 || b == 0\n        return []\n    end\n    \n    digits = Vector{Int64}()\n\
    \    \n    while a > 0 || b > 0\n        if a > 0 && b == 0\n            digits\
    \ = [digits..., a]\n            a -= 1\n        elseif b > 0 && a == 0\n     \
    \       digits = [digits..., b]\n            b -= 1\n        else\n          \
    \  digits = [digits..., a, b]\n            a -= 1\n            b -= 1\n      \
    \  end\n    end\n    \n    return digits\nend\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(2, 8)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(8,\
    \ 2)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(10, 14)\n</cell>\n\
    <text>\nProblem 3\nWrite a function that returns the number of positive integers\
    \ less than or equal to a given integer n.", "    if a < 0 || b < 0\n        error(\"\
    generate_integers: a and b must be non-negative\")\n    end\n    if a > b\n  \
    \      error(\"generate_integers: a and b must be less than or equal to each other\"\
    )\n    end\n    \n    evens = Vector{Int64}()\n    \n    while a <= b\n      \
    \  if a % 2 == 0\n            evens.push(a)\n        end\n        a = a + 1\n\
    \    end\n    \n    return evens\nend\n</cell>\n<code language=julia-1.5>\ngenerate_integers(2,\
    \ 8)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(8, 2)\n</cell>\n<code\
    \ language=julia-1.5>\ngenerate_integers(10, 14)\n</cell>\n<text>\nProblem 3\n\
    Write a function called generate_primes(a::Int64, b::Int64) that generates all\
    \ the prime numbers between a and b (inclusive).", "    if a < b \n        generate_integers(b,\
    \ a)\n    else\n        Vector{Int64}((a % b) + 1)\n    end\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes in two positive integers a and b and returns\
    \ True if a is divisible by b, and False otherwise. Test it on $a$ and $b$ that\
    \ are both greater than 0.", "    \n    even_integers = Vector{Int64}()\n    \n\
    \    if a < b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\n    \n    \n    for n in 1:b\n        if n % 2 == 0\n         \
    \   even_integers = even_integers + (n-1)\n        end\n    end\n    \n    return\
    \ even_integers\nend\n</cell>\n<code language=julia-1.5>\ngenerate_integers(2,\
    \ 8)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(8, 2)\n</cell>\n<code\
    \ language=julia-1.5>\ngenerate_integers(10, 14)\n</cell>\n<text>\nProblem 3\n\
    Write a function that returns the number of integers between 1 and a given integer\
    \ n that have no leading zeros.", "    if b < a \n        error(\"generate_integers:\
    \ b < a\")\n    end\n    \n    evens = Vector{Int64}()\n    \n    while a <= b\n\
    \        evens.append(a)\n        a += 2\n    end\n    \n    return evens\nend\n\
    </cell>\n<code language=julia-1.4>\ngenerate_integers(2, 8)\n</cell>\n<code language=julia-1.4>\n\
    generate_integers(8, 2)\n</cell>\n<code language=julia-1.4>\ngenerate_integers(10,\
    \ 14)\n</cell>\n<text>\nExercise 3\nWrite a function that generates integers up\
    \ to a specified upper bound, inclusive.", "    generate_integers(a, b)\nend",
  "    \n    if a < b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend", "    \n    if a < b\n        generate_integers(b, a)\n  \
    \  else\n        generate_integers(a, b)\n    end\nend", "    if a < b \n    \
    \    generate_integers(b, a)\n    else\n        Vector{Int64}[a, b]\n    end\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that takes an integer $n$ and\
    \ returns the number of digits in $n$. For example, generate_integers(10, 14)\
    \ returns 3.", "    \n    if b < a \n        return Vector{Int64}()\n    end\n\
    \    \n    evens = generate_integers(b, a+1)\n    \n    evens = evens[2:end-1]\
    \ + evens[2:end]\n    \n    evens = evens[2:end-1] + evens[2:end]\n    \n    evens\
    \ = evens[2:end-1] + evens[2:end]\n    \n    evens = evens[2:end-1] + evens[2:end]\n\
    \    \n    evens = evens[2:end-1] + evens[2:end]\n    \n    evens = evens[2:end-1]\
    \ + evens[2:end]\n    \n    evens = evens[2:end-1] + evens[2:end]\n    \n    evens\
    \ = evens[2:end-1] + evens[2:end]\n    \n    evens = evens[2:end-1] + evens[2:end]\n\
    \    \n    evens = evens[2:end-1] + evens[2:end]\n    \n    evens = evens[2:end-1]\
    \ + evens[2:end]\n    \n    evens = evens[2:end-1] + evens[2:end]\n    \n    evens\
    \ = evens[2:end-1] + evens[2:end]\n    \n    evens = evens[2:end-1] + evens[2:end]\n\
    \    \n    evens = evens[2:end-1] + evens[2:end]\n    \n    evens = evens[2:end-1]\
    \ + evens[2:end]\n    \n    evens = evens[2:end-1] + evens[2:end]\n    \n    evens\
    \ = evens[2:end-1] + evens[2:end]\n    \n    evens = evens[2:end-1] + evens[2:end]\n\
    \    \n    evens = evens[2:end-1] + evens[2:end]\n    \n    evens = evens[2:end-1]\
    \ + evens[2:end]\n    \n    evens = evens[2:end-1] + evens[2:end]\n    \n    evens\
    \ = evens[2:end-1] + evens[2:end]\n    \n    evens = evens[2:end-1] + evens[2:end]\n\
    \    \n    evens = evens[2:end-1] + evens[2:end]\n    \n    evens = evens[2:end-1]\
    \ + evens[2:end]\n    \n    evens = evens[2:end-1] + evens[2:end]\n    \n    evens\
    \ = evens[2:end-1] + evens[2:end]\n    \n    evens = evens[2:end-1] + evens[2:end]\n\
    \    \n    evens = evens[2:end-1] + evens[2:end]\n    \n", "    if a < b\n   \
    \     generate_integers(b, a)\n    else\n        generate_integers(a, b)\n   \
    \ end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns the number\
    \ of digits in an integer.", "    if b < a \n        generate_integers(b, a)\n\
    \    else\n        generate_integers(a, b)\n    end\nend", "    if a < b \n  \
    \      generate_integers(b, a)\n    else\n        generate_integers(a, b)\n  \
    \  end\nend", "    \n    if a < b\n        generate_integers(b, a)\n    else\n\
    \        generate_integers(a, b)\n    end\nend", "    if b < a \n        error(\"\
    generate_integers: b < a\")\n    end\n    \n    evens = Vector{Int64}()\n    \n\
    \    while a <= b\n        push!(evens, a)\n        a = a + 2\n    end\n    \n\
    \    evens\nend\n</cell>\n<code language=julia-1.5>\ngenerate_integers(2, 8)\n\
    </cell>\n<code language=julia-1.5>\ngenerate_integers(8, 2)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(10, 14)\n</cell>\n<text>\nProblem 3\nWrite a function that generates\
    \ all the integers between 1 and 100 (both included)\nthat are divisible by 3\
    \ and 5.", "    generate_integers(a, b)\nend", "    if a < b\n        generate_integers(b,\
    \ a)\n    else\n        generate_integers(a, b)\n    end\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes in two integers a and b, and returns the\
    \ sum of all the even digits in a and b. For example, generate_integers(2, 8)\
    \ => [2, 4, 6, 8], and generate_integers(8, 2) => [2, 4, 6, 8].", "    \n    evens\
    \ = Vector{Int64}()\n    \n    while a <= b\n        evens.append(a)\n       \
    \ a += 1\n    end\n    \n    return evens\nend\n</cell>\n<text>\nExercise 2\n\
    Write a function that generates all the integers between 1 and a given number\
    \ n that have no duplicates.", "    if a < b\n        generate_integers(b, a)\n\
    \    else\n        Vector{Int64}[a, b]\n    end\nend", "    if a < 0 || b < 0\n\
    \        error(\"a and b must be non-negative\")\n    end\n    \n    evens = Vector{Int64}()\n\
    \    \n    while a <= b\n        if a % 2 == 0\n            evens.push(a)\n  \
    \      end\n        a += 1\n    end\n    \n    return evens\nend\n</cell>\n<code\
    \ language=julia-1.5>\ngenerate_integers(2, 8)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(8, 2)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(10,\
    \ 14)\n</cell>\n<text>\nExercise 2\nWrite a function called generate_integers_between_1_and_10\
    \ that generates integers between 1 and 10. Your function should return an array\
    \ of integers including 1 and 10.", "    if b < a \n        error(\"generate_integers:\
    \ b < a\")\n    end\n    \n    evens = Vector{Int64}()\n    \n    while a <= b\n\
    \        push!(evens, a)\n        a += 2\n    end\n    \n    evens\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that generates integers up to a specified\
    \ maximum, inclusive.", "    generate_integers(0, b)\nend", "    if a < 0 || b\
    \ < 0\n        error(\"generate_integers: a and b must be non-negative\")\n  \
    \  end\n    \n    if a == 0 || b == 0\n        return Vector{Int64}()\n    end\n\
    \    \n    evens = Vector{Int64}()\n    \n    if a < b\n        a, b = b, a\n\
    \    end\n    \n    while a <= b\n        evens.append(a)\n        a += 1\n  \
    \  end\n    \n    return evens\nend\n</cell>\n<code language=julia-1.5>\ngenerate_integers(2,\
    \ 8)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(8, 2)\n</cell>\n<code\
    \ language=julia-1.5>\ngenerate_integers(10, 14)\n</cell>\n<text>\nProblem 4\n\
    Write a function that generates all the integers between 1 and a given number\
    \ N, inclusive.", "    generate_integers(a, b)\nend", "    if a < b\n        generate_integers(b,\
    \ a)\n    else\n        generate_integers(a, b)\n    end\nend", "    if a < 0\
    \ || b < 0\n        error(\"a or b must be positive\")\n    end\n    \n    if\
    \ a > b\n        a, b = b, a\n    end\n    \n    evens = Vector{Int64}()\n   \
    \ \n    while a <= b\n        evens.append(a)\n        a = a + 2\n    end\n  \
    \  \n    return evens\nend\n</cell>\n<code language=julia-1.5>\ngenerate_integers(2,\
    \ 8)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(8, 2)\n</cell>\n<code\
    \ language=julia-1.5>\ngenerate_integers(10, 14)\n</cell>\n<text>\nExercise 2\n\
    Write a function that generates integers within a given range (inclusive).", " \
    \   \n    if a < b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend", "    if b < a \n        error(\"b must be greater than a\"\
    )\n    end\n    \n    evens = Vector{Int64}()\n    \n    while a <= b\n      \
    \  evens.append(a)\n        a += 1\n    end\n    \n    return evens\nend\n</cell>\n\
    <text>\nProblem 3\nWrite a function that generates the integers within a given\
    \ range (inclusive).", "    if a < b\n        generate_integers(b, a)\n    else\n\
    \        Vector{Int64}[a, b]\n    end\nend", "    if a < b \n        generate_integers(b,\
    \ a)\n    else\n        generate_integers(a, b)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.3>\ngenerate_integers(2, 8)\n</cell>\n<code language=julia-1.3>\n\
    generate_integers(8, 2)\n</cell>\n<code language=julia-1.3>\ngenerate_integers(10,\
    \ 14)\n</cell>\n<text>\nExercise: Write a function that generates all the integers\
    \ between two given integers, inclusive."]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
