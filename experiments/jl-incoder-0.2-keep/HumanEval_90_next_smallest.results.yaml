name: HumanEval_90_next_smallest
language: julia
results:
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing\n    \n    smallest\
    \ = lst[1]\n    \n    for x in lst[2:end]\n        if x < smallest\n         \
    \   smallest = x\n        end\n    end\n    \n    return smallest\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphduq7uuq.jl:25\nin expression starting at\
    \ /tmp/tmphduq7uuq.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return None \n    else \n     \
    \   smallest = lst[1] \n        for el in lst[2:end] \n            if el < smallest\
    \ \n                smallest = el \n            end \n        end \n        return\
    \ smallest \n    end \nend \n</cell>\n<code language=julia-1.5>\nusing Test\n\n\
    @testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5])\
    \ == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpujb6qqhl.jl:24\nin expression starting at\
    \ /tmp/tmpujb6qqhl.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        Nothing\n    elseif length(lst)\
    \ == 1 \n        lst[1]\n    elseif length(lst) == 2 \n        lst[1]\n    elseif\
    \ length(lst) > 2 \n        lst[findmin(lst)]\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp734u33ac.jl:22\nin expression starting at\
    \ /tmp/tmp734u33ac.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return nothing\n    end\n    \n\
    \    smallest = lst[1]\n    \n    for el in lst[2:end] \n        if el < smallest\
    \ \n            smallest = el \n        end\n    end\n    return smallest\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdqm76rgz.jl:25\nin expression starting at\
    \ /tmp/tmpdqm76rgz.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return nothing\n    end\n    \n\
    \    smallest = minimum(lst)\n    \n    if smallest == lst[1] \n        return\
    \ nothing\n    end\n    \n    lst = lst[2 : (end-1)]\n    \n    return smallest\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_jzaevbp.jl:26\nin expression starting at\
    \ /tmp/tmp_jzaevbp.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return None \n    else \n     \
    \   return lst[1] \nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppga8zj9r.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppga8zj9r.jl:1\n\
    in expression starting at /tmp/tmppga8zj9r.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing\n    end\n    \n\
    \    smallest = lst[1]\n    \n    for x in lst[2:end]\n        if x < smallest\n\
    \            smallest = x\n        end\n    end\n    \n    return smallest\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbe0l6p50.jl:26\nin expression starting at\
    \ /tmp/tmpbe0l6p50.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return nothing\n    end\n    \n\
    \    smallest = lst[1]\n    \n    for el in lst[2:end]\n        if el < smallest\
    \ \n            smallest = el\n        end\n    end\n    \n    return smallest\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyel636gp.jl:26\nin expression starting at\
    \ /tmp/tmpyel636gp.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return None \n    else \n     \
    \   smallest = lst[1] \n        for el in lst[2:end] \n            if el < smallest\
    \ \n                smallest = el \n            end \n        end \n        return\
    \ smallest \n    end \nend \n</cell>\n<code language=julia-1.4>\nusing Test\n\n\
    @testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5])\
    \ == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpspxmm3q7.jl:24\nin expression starting at\
    \ /tmp/tmpspxmm3q7.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing\n    \n    smallest\
    \ = lst[1]\n    \n    for i in lst[2:end] \n        if i < smallest \n       \
    \     smallest = i\n        end\n    end\n    \n    return smallest\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt7kjnd26.jl:25\nin expression starting at\
    \ /tmp/tmpt7kjnd26.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return nothing\n    \n    smallest\
    \ = minimum(lst)\n    \n    if smallest == lst[1] \n        return smallest\n\
    \    \n    lst = lst[2 : (end-1)]\n    \n    return smallest\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7d2pwhkm.jl:24\nin expression starting at\
    \ /tmp/tmp7d2pwhkm.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return None \n    else \n     \
    \   smallest = lst[1] \n        lst[1] = lst[2] \n        lst[2] = smallest \n\
    \        return smallest \nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4,\
    \ 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp51_n8_3z.jl:20\nin expression starting at\
    \ /tmp/tmp51_n8_3z.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return None \n    else \n     \
    \   smallest = lst[1] \n        for el in lst[2:end] \n            if el < smallest\
    \ \n                smallest = el \n            end \n        end \n        return\
    \ smallest \n    end \nend \n</cell>\n<code language=julia-1.5>\nnext_smallest([1,\
    \ 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nnext_smallest([5, 1, 4, 3,\
    \ 2])\n</cell>\n<code language=julia-1.5>\nnext_smallest([])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1, 1])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of elements in a list that satisfy a predicate.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\
    \t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg29ll7_u.jl:24\nin expression starting at\
    \ /tmp/tmpg29ll7_u.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return None \n    else \n     \
    \   smallest = lst[1] \n        for i in 2:length(lst) \n            if lst[i]\
    \ < smallest \n                smallest = lst[i] \n            end\n        end\n\
    \        return smallest \n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    using Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx9p4_ner.jl:24\nin expression starting at\
    \ /tmp/tmpx9p4_ner.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing \n    else \n  \
    \      smallest = lst[1] \n        lst[1] = lst[end] \n        lst[end] = smallest\
    \ \n        return smallest \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpir9t57ds.jl:21\nin expression starting at\
    \ /tmp/tmpir9t57ds.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return nothing\n    end\n    \n\
    \    smallest = lst[1]\n    \n    for x in lst[2:end]\n        if x < smallest\n\
    \            smallest = x\n        end\n    end\n    \n    return smallest\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6m03zb_c.jl:26\nin expression starting at\
    \ /tmp/tmp6m03zb_c.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing\n    \n    smallest\
    \ = lst[1]\n    \n    for x in lst[2:end]\n        if x < smallest\n         \
    \   smallest = x\n        end\n    end\n    \n    return smallest\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpobl2pxu9.jl:25\nin expression starting at\
    \ /tmp/tmpobl2pxu9.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return None \n    else \n     \
    \   smallest = lst[1] \n        lst[1] = lst[end] \n        lst[end] = smallest\
    \ \n        return smallest \nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4,\
    \ 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2e6mxv18.jl:20\nin expression starting at\
    \ /tmp/tmp2e6mxv18.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        None \n    else \n        lst[findmin(lst)]\n\
    \    end\nend\n</cell>\n<text>\nExercise 4\nWrite a function that returns the\
    \ number of elements in a list that satisfy a given predicate.\nusing Test\n\n\
    @testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5])\
    \ == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmproblxhvz.jl:18\nin expression starting at\
    \ /tmp/tmproblxhvz.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return None \n    else \n     \
    \   smallest = lst[1] \n        for el in lst[2:end] \n            if el < smallest\
    \ \n                smallest = el \n            end \n        end \n        return\
    \ smallest \n    end\nend\n</cell>\n<code language=julia-1.4>\nusing Test\n\n\
    @testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5])\
    \ == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgfpoouzc.jl:24\nin expression starting at\
    \ /tmp/tmpgfpoouzc.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return None \n    else \n     \
    \   return lst[1] \nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpkqlkz6ah.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpkqlkz6ah.jl:1\n\
    in expression starting at /tmp/tmpkqlkz6ah.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing\n    end\n    \n\
    \    smallest = lst[1]\n    \n    for x in lst[2:end] \n        if x < smallest\
    \ \n            smallest = x\n        end\n    end\n    \n    return smallest\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkt8b3d4d.jl:26\nin expression starting at\
    \ /tmp/tmpkt8b3d4d.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return nothing\n    \n    smallest\
    \ = lst[1]\n    \n    for x in lst[2:end]\n        if x < smallest\n         \
    \   smallest = x\n        end\n    end\n    \n    return smallest\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdcmldypb.jl:25\nin expression starting at\
    \ /tmp/tmpdcmldypb.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing\n    \n    smallest\
    \ = lst[1]\n    \n    for x in lst[2:end]\n        if x < smallest\n         \
    \   smallest = x\n        end\n    end\n    \n    return smallest\nend\n</cell>\n\
    <code language=julia-1.5>\nnext_smallest([1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([5, 1, 4, 3, 2])\n</cell>\n<code language=julia-1.5>\nnext_smallest([])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1, 1])\n</cell>\n<text>\nExercise\n\
    Write a function that returns the index of the element in the list that has the\
    \ smallest absolute value.\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn_qamaxy.jl:25\nin expression starting at\
    \ /tmp/tmpn_qamaxy.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing\n    else if length(lst)\
    \ == 1 \n        return lst[1]\n    else \n        return lst[findmin(lst)]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfq660ad6.jl:14\nin expression starting at\
    \ /tmp/tmpfq660ad6.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return nothing\n    \n    smallest\
    \ = lst[1]\n    \n    for i in 2:length(lst) \n        if lst[i] < smallest \n\
    \            smallest = lst[i]\n        end\n    end\n    \n    return smallest\n\
    end\n</cell>\n<code language=julia-1.5>\nnext_smallest([5, 1, 4, 3, 2])\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the index of the first element\
    \ of a list that equals a given value.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn6y7kc4t.jl:25\nin expression starting at\
    \ /tmp/tmpn6y7kc4t.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing\n    \n    smallest\
    \ = lst[1]\n    \n    for el in lst[2:end]\n        if el < smallest \n      \
    \      smallest = el\n        end\n    end\n    \n    return smallest\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpba1d2o5m.jl:25\nin expression starting at\
    \ /tmp/tmpba1d2o5m.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing\n    \n    smallest\
    \ = lst[1]\n    \n    for x in lst[2:end]\n        if x < smallest\n         \
    \   smallest = x\n        end\n    end\n    \n    return smallest\nend\n</cell>\n\
    <code language=julia-1.5>\nnext_smallest([1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([5, 1, 4, 3, 2])\n</cell>\n<code language=julia-1.5>\nnext_smallest([])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1, 1])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the index of the first element of a list that\
    \ satisfies a predicate.\nFor example, first_index(lst, x -> x > 1) should return\
    \ 2 if lst is [3, 1, 4, 1, 5] and x is 3.\nIf no element satisfies the predicate,\
    \ return -1.\nIf lst is empty, return -1.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmponlsn1n4.jl:25\nin expression starting at\
    \ /tmp/tmponlsn1n4.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return None \n    else \n     \
    \   smallest = lst[1] \n        for i in 2:length(lst) \n            if lst[i]\
    \ < smallest \n                smallest = lst[i] \n            end\n        end\n\
    \        return smallest \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp723tu80k.jl:24\nin expression starting at\
    \ /tmp/tmp723tu80k.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing \n    else \n  \
    \      smallest = lst[1] \n        for ele in lst[2:end] \n            if ele\
    \ < smallest \n                smallest = ele \n            end \n        end\
    \ \n        return smallest \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd5kzf2b_.jl:24\nin expression starting at\
    \ /tmp/tmpd5kzf2b_.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return None \n    else \n     \
    \   return lst[1] \n    end\nend\n</cell>\n<text>\nExercise 7\nWrite a function\
    \ that returns the index of the element in the list that is closest to the number\
    \ x. \nIf there are multiple elements that are equally close, return the index\
    \ of the first one.\nIf there are no elements that are equally close, return None.\n\
    Hint: Use a combination of searchsorted and length.\nusing Test\n\n@testset begin\n\
    \ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpagsyan_t.jl:18\nin expression starting at\
    \ /tmp/tmpagsyan_t.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return nothing\n    \n    smallest\
    \ = lst[1]\n    \n    for el in lst[2:end]\n        if el < smallest \n      \
    \      smallest = el\n        end\n    end\n    \n    return smallest\nend\n</cell>\n\
    <code language=julia-1.5>\nnext_smallest([1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([5, 1, 4, 3, 2])\n</cell>\n<code language=julia-1.5>\nnext_smallest([])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1, 1])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the index of the first element in a list that\
    \ satisfies a predicate.\nFor example, first_index(x -> x > 2, [1, 2, 3]) should\
    \ return 1.\nIf no such element exists, return -1.\nIf there are multiple such\
    \ elements, return the first one.\nIf there are multiple such elements, return\
    \ the first one.\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1hn93el0.jl:25\nin expression starting at\
    \ /tmp/tmp1hn93el0.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return None \n    else \n     \
    \   return lst[1] \nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\
    \t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpun1ej20f.jl:17\nin expression starting at\
    \ /tmp/tmpun1ej20f.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing\n    \n    smallest\
    \ = lst[1]\n    \n    for i in 2:length(lst)\n        if lst[i] < smallest \n\
    \            smallest = lst[i]\n        end\n    end\n    \n    return smallest\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp49nqebak.jl:25\nin expression starting at\
    \ /tmp/tmp49nqebak.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return nothing\n    end\n    \n\
    \    smallest = lst[1]\n    \n    for x in lst[2:end] \n        if x < smallest\
    \ \n            smallest = x\n        end\n    end\n    \n    return smallest\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp82cjyndw.jl:26\nin expression starting at\
    \ /tmp/tmp82cjyndw.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing\n    else if length(lst)\
    \ == 1 \n        return lst[1]\n    else \n        smallest = lst[1]\n       \
    \ for i in lst[2:end] \n            if i < smallest \n                smallest\
    \ = i\n            end\n        end\n        return smallest\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq308euxq.jl:14\nin expression starting at\
    \ /tmp/tmpq308euxq.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return None \n    else \n     \
    \   return lst[1] \nend\n</cell>\n<text>\nNext Steps\nThe next step is to write\
    \ a function next_largest() that returns the 2nd largest element of the list.\n\
    Write a function that takes a vector and returns the sum of the squares of the\
    \ elements in the vector.\nWrite a function that takes a vector and returns the\
    \ product of the elements in the vector.\nWrite a function that takes a vector\
    \ and returns the sum of the elements in the vector that are less than the element\
    \ in the vector.\nWrite a function that takes a vector and returns the sum of\
    \ the elements in the vector that are greater than the element in the vector.\n\
    Write a function that takes a vector and returns the sum of the elements in the\
    \ vector that are equal to the element in the vector.\nWrite a function that takes\
    \ a vector and returns the sum of the elements in the vector that are greater\
    \ than or equal to the element in the vector.\nWrite a function that takes a vector\
    \ and returns the sum of the elements in the vector that are less than or equal\
    \ to the element in the vector.\nWrite a function that takes a vector and returns\
    \ the sum of the elements in the vector that are in between the element in the\
    \ vector and the element in the vector.\nWrite a function that takes a vector\
    \ and returns the sum of the elements in the vector that are in the set {1, 2,\
    \ 3, 4, 5}.\nWrite a function that takes a vector and returns the sum of the elements\
    \ in the vector that are in the set {1, 2, 3, 4, 5} and are even.\nWrite a function\
    \ that takes a vector and returns the sum of the elements in the vector that are\
    \ in the set {1, 2, 3, 4, 5} and are odd.\nWrite a function that takes a vector\
    \ and returns the sum of the elements in the vector that are in the set {1, 2,\
    \ 3, 4, 5} and are in the set {1, 2, 3, 4, 5}.\nWrite a function that takes a\
    \ vector and returns the sum of the elements in the vector that are in the set\
    \ {1, 2, 3, 4, 5} and are in the set {1, 2, 3, 4, 5} and are even.\nWrite a function\
    \ that takes a vector and returns the sum of the elements in the vector that are\
    \ in the set {1, 2, 3, 4, 5} and are in the set {1, 2, 3, 4, 5} and are odd.\n\
    Write a function that takes a vector and returns the sum of the elements in the\
    \ vector that are in the set {1, 2, 3, 4, 5} and are in the set {1, 2, 3, 4, 5}\
    \ and are in the set {1, 2, 3, 4, 5}.\nWrite a function that takes a vector and\
    \ returns the sum of the elements in the vector that are in the set {1, 2, 3,\
    \ 4, 5} and are in the set {1, 2, 3, 4, 5} and are in the set {1, 2, 3, 4, 5}\
    \ and are even.\nWrite a function that takes a vector and returns the sum of the\
    \ elements in the vector that are in the set {1, 2, 3, 4, 5} and are in the set\
    \ {1, 2, 3, 4, 5} and are in the set {1, 2, 3, 4, 5} and are odd.\nWrite a function\
    \ that takes a vector and returns the sum of the elements in the vector that are\
    \ in the set {1, 2, 3, 4, 5} and are in the set {\nusing Test\n\n@testset begin\n\
    \ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi9ttu8f3.jl:17\nin expression starting at\
    \ /tmp/tmpi9ttu8f3.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing\n    \n    smallest\
    \ = lst[1]\n    \n    for x in lst[2:end]\n        if x < smallest\n         \
    \   smallest = x\n        end\n    end\n    \n    return smallest\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8d96dg4b.jl:25\nin expression starting at\
    \ /tmp/tmp8d96dg4b.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return None \n    else \n     \
    \   return lst[1] \nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpfjodz_nx.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfjodz_nx.jl:1\n\
    in expression starting at /tmp/tmpfjodz_nx.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return nothing\n    \n    smallest\
    \ = lst[1]\n    \n    for i in 2:length(lst)\n        if lst[i] < smallest \n\
    \            smallest = lst[i]\n        end\n    end\n    \n    return smallest\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt9vbrbpz.jl:25\nin expression starting at\
    \ /tmp/tmpt9vbrbpz.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        None \n    else \n        lst[1]\
    \ \n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns the\
    \ number of elements in the list that are not equal to zero.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\
    \t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk7xwlvuk.jl:18\nin expression starting at\
    \ /tmp/tmpk7xwlvuk.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return nothing\n    end\n    \n\
    \    smallest = lst[1]\n    \n    for el in lst[2:end]\n        if el < smallest\
    \ \n            smallest = el\n        end\n    end\n    \n    return smallest\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv6_bv1oo.jl:26\nin expression starting at\
    \ /tmp/tmpv6_bv1oo.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return None \n    else \n     \
    \   smallest = lst[1] \n        lst = lst[2:end] \n        return smallest \n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp9gp0noe.jl:19\nin expression starting at\
    \ /tmp/tmpp9gp0noe.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing\n    \n    smallest\
    \ = lst[1]\n    \n    for ele in lst[2:end]\n        if ele < smallest \n    \
    \        smallest = ele\n        end\n    end\n    \n    return smallest\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7bhgiok1.jl:25\nin expression starting at\
    \ /tmp/tmp7bhgiok1.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing\n    \n    smallest\
    \ = lst[1]\n    \n    for i in 2:length(lst)\n        if lst[i] < smallest \n\
    \            smallest = lst[i]\n        end\n    end\n    \n    return smallest\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppn7_8x_h.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppn7_8x_h.jl:1\n\
    in expression starting at /tmp/tmppn7_8x_h.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return None \n    else \n     \
    \   smallest = lst[1] \n        for el in lst[2:end] \n            if el < smallest\
    \ \n                smallest = el \n            end \n        end \n        return\
    \ smallest \nend \nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpkqj9tfpa.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpkqj9tfpa.jl:1\n\
    in expression starting at /tmp/tmpkqj9tfpa.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return nothing\n    \n    smallest\
    \ = lst[1]\n    \n    for x in lst[2:end]\n        if x < smallest\n         \
    \   smallest = x\n        end\n    end\n    \n    return smallest\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcbnx9_gx.jl:25\nin expression starting at\
    \ /tmp/tmpcbnx9_gx.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return None \n    else \n     \
    \   smallest = lst[1] \n        for el in lst[2:end] \n            if el < smallest\
    \ \n                smallest = el \n            end \n        end \n        return\
    \ smallest \n    end \nend \n</cell>\n<code language=julia-1.5>\nnext_smallest([1,\
    \ 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nnext_smallest([5, 1, 4, 3,\
    \ 2])\n</cell>\n<code language=julia-1.5>\nnext_smallest([])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1, 1])\n</cell>\n<text>\nExercise: Write a function that returns\
    \ the 2nd smallest element of a list.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1iluw542.jl:24\nin expression starting at\
    \ /tmp/tmp1iluw542.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return None \n    else \n     \
    \   smallest = lst[1] \n        for i in 2:length(lst) \n            if lst[i]\
    \ < smallest \n                smallest = lst[i] \n            end \n        end\
    \ \n        return smallest \n    end \nend \n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpznxmuokp.jl:24\nin expression starting at\
    \ /tmp/tmpznxmuokp.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing\n    \n    smallest\
    \ = lst[1]\n    \n    for i in 2:length(lst)\n        if lst[i] < smallest \n\
    \            smallest = lst[i]\n        end\n    end\n    \n    return smallest\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpgy_3zdl6.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpgy_3zdl6.jl:1\n\
    in expression starting at /tmp/tmpgy_3zdl6.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        None \n    else \n        lst[findmin(lst)]\n\
    \    end\nend\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't work if there\
    \ are duplicate elements in the list. For example, `next_smallest([5, 1, 4, 3,\
    \ 2]) == 2` but `next_smallest([5, 1, 4, 3, 2]) == 3`.\n<|/ c |>\n<| a tags=julia\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpeq5pl2w0.jl:18\nin expression starting at\
    \ /tmp/tmpeq5pl2w0.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        None \n    else \n        lst[end-1]\
    \ \n    end\nend\n</cell>\n<text>\nExercise 4\nWrite a function that returns the\
    \ number of elements in a list that satisfy a given predicate.\nusing Test\n\n\
    @testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5])\
    \ == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd6a3j09j.jl:18\nin expression starting at\
    \ /tmp/tmpd6a3j09j.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing\n    end\n    \n\
    \    smallest = lst[1]\n    \n    for i in 2:length(lst)\n        if lst[i] <\
    \ smallest \n            smallest = lst[i]\n        end\n    end\n    \n    return\
    \ smallest\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyjcu9f4z.jl:26\nin expression starting at\
    \ /tmp/tmpyjcu9f4z.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing\n    \n    smallest\
    \ = lst[1]\n    \n    for i in 2:length(lst)\n        if lst[i] < smallest \n\
    \            smallest = lst[i]\n        end\n    end\n    \n    return smallest\n\
    end\n</cell>\n<code language=julia-1.5>\nnext_smallest([1, 2, 3, 4, 5])\n</cell>\n\
    <code language=julia-1.5>\nnext_smallest([5, 1, 4, 3, 2])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([])\n</cell>\n<code language=julia-1.5>\nnext_smallest([1, 1])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the index of the first\
    \ element of a list that satisfies a predicate.\nusing Test\n\n@testset begin\n\
    \ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl96vdw06.jl:25\nin expression starting at\
    \ /tmp/tmpl96vdw06.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return None \n    else \n     \
    \   smallest = lst[1] \n        for i in 2:length(lst) \n            if lst[i]\
    \ < smallest \n                smallest = lst[i] \n            end \n        end\
    \ \n        return smallest \n    end \nend \nusing Test\n\n@testset begin\n\n\
    candidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpinjoko51.jl:29\n  Expression: candidate([1,\
    \ 2, 3, 4, 5]) == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpinjoko51.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpinjoko51.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpinjoko51.jl:30\n  Expression: candidate([5, 1, 4, 3, 2]) ==\
    \ 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpinjoko51.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpinjoko51.jl:28\ntest set: Error\
    \ During Test at /tmp/tmpinjoko51.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == nothing\n  UndefVarError: None not defined\n\
    \  Stacktrace:\n   [1] next_smallest(lst::Vector{Int64})\n     @ Main /tmp/tmpinjoko51.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpinjoko51.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpinjoko51.jl:28\ntest set:\
    \ Test Failed at /tmp/tmpinjoko51.jl:32\n  Expression: candidate([1, 1]) == nothing\n\
    \   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpinjoko51.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpinjoko51.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpinjoko51.jl:33\n  Expression: candidate([1, 1, 1, 1, "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpinjoko51.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return None \n    else \n     \
    \   return lst[1] \nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the index of the first element of a list that satisfies a given predicate.\n\
    using Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa9z8rhyh.jl:17\nin expression starting at\
    \ /tmp/tmpa9z8rhyh.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return None \n    else \n     \
    \   smallest = lst[1] \n        for element in lst[2:end] \n            if element\
    \ < smallest \n                smallest = element \n            end \n       \
    \ end \n        return smallest \n    end \nend \n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nnext_smallest([5,\
    \ 1, 4, 3, 2])\n</cell>\n<code language=julia-1.5>\nnext_smallest([])\n</cell>\n\
    <code language=julia-1.5>\nnext_smallest([1, 1])\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the number of elements in a list that satisfy a\
    \ predicate.\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8v6tcq3e.jl:24\nin expression starting at\
    \ /tmp/tmp8v6tcq3e.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return nothing\n    else if length(lst)\
    \ == 1 \n        return lst[1]\n    else \n        smallest = lst[1]\n       \
    \ for i in lst[2:end] \n            if i < smallest \n                smallest\
    \ = i\n            end\n        end\n        return smallest\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9e3f5hyw.jl:14\nin expression starting at\
    \ /tmp/tmp9e3f5hyw.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return None \n    else \n     \
    \   smallest = lst[1] \n        for i in lst[2:end] \n            if i < smallest\
    \ \n                smallest = i \n            end \n        end \n        return\
    \ smallest \n    end \nend \n</cell>\n<code language=julia-1.5>\nnext_smallest([1,\
    \ 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nnext_smallest([5, 1, 4, 3,\
    \ 2])\n</cell>\n<code language=julia-1.5>\nnext_smallest([])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1, 1])\n</cell>\n<text>\nExercise 2\nWrite a function next_largest()\
    \ that returns the 2nd largest element of the list.\nReturn None if there is no\
    \ such element.\n    \n    next_largest([1, 2, 3, 4, 5]) == 5\n    next_largest([5,\
    \ 1, 4, 3, 2]) == 5\n    next_largest([]) == None\n    next_largest([1, 1]) ==\
    \ None\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxh0ucj6a.jl:24\nin expression starting at\
    \ /tmp/tmpxh0ucj6a.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return nothing\n    end\n    \n\
    \    smallest = minimum(lst)\n    \n    if smallest == lst[1] \n        return\
    \ nothing\n    end\n    \n    lst = lst[2 : (end)]\n    \n    return smallest\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp977ykcgm.jl:26\nin expression starting at\
    \ /tmp/tmp977ykcgm.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return None \n    else \n     \
    \   smallest = lst[1] \n        lst = lst[2:end] \n        return smallest \n\
    end\n</cell>\n<code language=julia-1.5>\nnext_smallest([1, 2, 3, 4, 5])\n</cell>\n\
    <code language=julia-1.5>\nnext_smallest([5, 1, 4, 3, 2])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([])\n</cell>\n<code language=julia-1.5>\nnext_smallest([1, 1])\n\
    </cell>\n<text>\nExercise\nWrite a function that returns the index of the smallest\
    \ element in a given list.\nIf there is no such element, return -1.\nIf there\
    \ are multiple such elements, return the first one.\nThe function should work\
    \ for any type of list.\nThe function should work for empty lists.\nThe function\
    \ should work for lists with any type of elements.\nThe function should work for\
    \ lists with any number of elements.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph85fstjs.jl:19\nin expression starting at\
    \ /tmp/tmph85fstjs.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing\n    else if length(lst)\
    \ == 1 \n        return lst[1]\n    else \n        smallest = lst[1]\n       \
    \ \n        for ele in lst[2:end]\n            if ele < smallest \n          \
    \      smallest = ele\n            end\n        end\n        return smallest\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn18vmn4z.jl:14\nin expression starting at\
    \ /tmp/tmpn18vmn4z.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return nothing\n    \n    smallest\
    \ = lst[1]\n    \n    for x in lst[2:end]\n        if x < smallest\n         \
    \   smallest = x\n        end\n    end\n    \n    return smallest\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqzfwalld.jl:25\nin expression starting at\
    \ /tmp/tmpqzfwalld.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return None \n    else \n     \
    \   smallest = lst[1] \n        for i in 2:length(lst) \n            if lst[i]\
    \ < smallest \n                smallest = lst[i] \n            end \n        end\
    \ \n        return smallest \n    end \nend \nusing Test\n\n@testset begin\n\n\
    candidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3r73gokp.jl:29\n  Expression: candidate([1,\
    \ 2, 3, 4, 5]) == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3r73gokp.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3r73gokp.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp3r73gokp.jl:30\n  Expression: candidate([5, 1, 4, 3, 2]) ==\
    \ 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3r73gokp.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3r73gokp.jl:28\ntest set: Error\
    \ During Test at /tmp/tmp3r73gokp.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == nothing\n  UndefVarError: None not defined\n\
    \  Stacktrace:\n   [1] next_smallest(lst::Vector{Int64})\n     @ Main /tmp/tmp3r73gokp.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3r73gokp.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3r73gokp.jl:28\ntest set:\
    \ Test Failed at /tmp/tmp3r73gokp.jl:32\n  Expression: candidate([1, 1]) == nothing\n\
    \   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3r73gokp.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3r73gokp.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp3r73gokp.jl:33\n  Expression: candidate([1, 1, 1, 1, "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3r73gokp.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return nothing\n    \n    smallest\
    \ = lst[1]\n    \n    for x in lst[2:end]\n        if x < smallest\n         \
    \   smallest = x\n        end\n    end\n    \n    return smallest\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzc4m8z33.jl:25\nin expression starting at\
    \ /tmp/tmpzc4m8z33.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing\n    \n    smallest\
    \ = lst[1]\n    \n    for x in lst[2:end]\n        if x < smallest \n        \
    \    smallest = x\n        end\n    end\n    \n    return smallest\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_s2xxowq.jl:25\nin expression starting at\
    \ /tmp/tmp_s2xxowq.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return None \n    else \n     \
    \   smallest = lst[1] \n        for i in 2:length(lst) \n            if lst[i]\
    \ < smallest \n                smallest = lst[i] \n            end \n        end\
    \ \n        return smallest \n    end \nend \n</cell>\n<code language=julia-1.5>\n\
    next_smallest([5, 1, 4, 3, 2])\n</cell>\n<code language=julia-1.5>\nnext_smallest([5,\
    \ 1, 4, 3, 2])\n</cell>\n<code language=julia-1.5>\nnext_smallest([5, 1, 4, 3,\
    \ 2])\n</cell>\n<code language=julia-1.5>\nnext_smallest([5, 1, 4, 3, 2])\n</cell>\n\
    <code language=julia-1.5>\nnext_smallest([5, 1, 4, 3, 2])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([5, 1, 4, 3, 2])\n</cell>\n<code language=julia-1.5>\nnext_smallest([5,\
    \ 1, 4, 3, 2])\n</cell>\n<code language=julia-1.5>\nnext_smallest([5, 1, 4, 3,\
    \ 2])\n</cell>\n<code language=julia-1.5>\nnext_smallest([5, 1, 4, 3, 2])\n</cell>\n\
    <code language=julia-1.5>\nnext_smallest([5, 1, 4, 3, 2])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([5, 1, 4, 3, 2])\n</cell>\n<code language=julia-1.5>\nnext_smallest([5,\
    \ 1, 4, 3, 2])\n</cell>\n<code language=julia-1.5>\nnext_smallest([5, 1, 4, 3,\
    \ 2])\n</cell>\n<code language=julia-1.5>\nnext_smallest([5, 1, 4, 3, 2])\n</cell>\n\
    <code language=julia-1.5>\nnext_smallest([5, 1, 4, 3, 2])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([5, 1, 4, 3, 2])\n</cell>\n<code language=julia-1.5>\nnext_smallest([5,\
    \ 1, 4, 3, 2])\n</cell>\n<code language=julia-1.5>\nnext_smallest([5, 1, 4, 3,\
    \ 2])\n</cell>\n<code language=julia-1.5>\nnext_smallest([5, 1, 4, 3, 2])\n</cell>\n\
    <code language=julia-1.5>\nnext_smallest([5, 1, 4, 3, 2])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([5, 1, 4, 3, 2])\n</cell>\n<code language=julia-1.5>\nnext_smallest([5,\
    \ 1, 4, 3, 2])\n</cell>\n<code language=julia-1.5>\nnext_smallest([5, 1, 4, 3,\
    \ 2])\n</cell\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t\
    @test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9ve2u6m2.jl:24\nin expression starting at\
    \ /tmp/tmp9ve2u6m2.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        None \n    else \n        lst[end-1]\
    \ \n    end\nend\n</cell>\n<text>\nExercise 9\nWrite a function that returns the\
    \ number of elements in a list that satisfy a given predicate.\nusing Test\n\n\
    @testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5])\
    \ == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvjk1q_5e.jl:18\nin expression starting at\
    \ /tmp/tmpvjk1q_5e.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return None \n    else \n     \
    \   return lst[findfirst(x -> x < lst[end], lst[end+1:end-1])]\n    end\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the index of the first\
    \ element of a list that satisfies a given predicate.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\
    \t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfh0odol9.jl:18\nin expression starting at\
    \ /tmp/tmpfh0odol9.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return nothing\n    \n    smallest\
    \ = lst[1]\n    \n    for i in 2:length(lst)\n        if lst[i] < smallest \n\
    \            smallest = lst[i]\n        end\n    end\n    \n    return smallest\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpug8jxy5c.jl:25\nin expression starting at\
    \ /tmp/tmpug8jxy5c.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing \n    else \n  \
    \      smallest = lst[1] \n        for i in 2:length(lst) \n            if lst[i]\
    \ < smallest \n                smallest = lst[i] \n            end \n        end\
    \ \n        return smallest \n    end \nend \n</cell>\n<text>\nExercise 4\nWrite\
    \ a function that returns the number of elements in the list that satisfy a given\
    \ predicate.\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr1v0le4j.jl:24\nin expression starting at\
    \ /tmp/tmpr1v0le4j.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return None \n    else \n     \
    \   smallest = lst[1] \n        for i in 2:length(lst) \n            if lst[i]\
    \ < smallest \n                smallest = lst[i] \n            end \n        end\
    \ \n        return smallest \n    end \nend \n</cell>\n<code language=julia-1.3>\n\
    using Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7t7xpuv0.jl:24\nin expression starting at\
    \ /tmp/tmp7t7xpuv0.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        None \n    else \n        lst[1]\
    \ \n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6pqp00so.jl:23\n  Expression: candidate([1,\
    \ 2, 3, 4, 5]) == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6pqp00so.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6pqp00so.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp6pqp00so.jl:24\n  Expression: candidate([5, 1, 4, 3, 2]) ==\
    \ 2\n   Evaluated: 5 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6pqp00so.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6pqp00so.jl:22\ntest set: Error\
    \ During Test at /tmp/tmp6pqp00so.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == nothing\n  UndefVarError: None not defined\n\
    \  Stacktrace:\n   [1] next_smallest(lst::Vector{Int64})\n     @ Main /tmp/tmp6pqp00so.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6pqp00so.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6pqp00so.jl:22\ntest set:\
    \ Test Failed at /tmp/tmp6pqp00so.jl:26\n  Expression: candidate([1, 1]) == nothing\n\
    \   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6pqp00so.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6pqp00so.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp6pqp00so.jl:28\n  Expression: candidate([1, 1]) == no"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6pqp00so.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return nothing\n    \n    smallest\
    \ = lst[1]\n    \n    for el in lst[2:end]\n        if el < smallest \n      \
    \      smallest = el\n        end\n    end\n    \n    return smallest\nend\n</cell>\n\
    <code language=julia-1.5>\nnext_smallest([1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([5, 1, 4, 3, 2])\n</cell>\n<code language=julia-1.5>\nnext_smallest([])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1, 1])\n</cell>\n<text>\nExercise\n\
    Write a function that returns the index of the element in the list that is closest\
    \ to the number x. Return nothing if there is no such element.\nusing Test\n\n\
    @testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5])\
    \ == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp01zrkn9o.jl:25\nin expression starting at\
    \ /tmp/tmp01zrkn9o.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return None \n    else \n     \
    \   smallest = lst[1] \n        for i in 2:length(lst) \n            if lst[i]\
    \ < smallest \n                smallest = lst[i] \n            end \n        end\
    \ \n        return smallest \n    end \nend \n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_o_k75_1.jl:24\nin expression starting at\
    \ /tmp/tmp_o_k75_1.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return None \n    else \n     \
    \   smallest = lst[1] \n        for i = 2:length(lst) \n            if lst[i]\
    \ < smallest \n                smallest = lst[i] \n            end\n        end\n\
    \        return smallest \n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that returns the number of elements in a list that satisfy a given\
    \ predicate.\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy2oq4t9q.jl:24\nin expression starting at\
    \ /tmp/tmpy2oq4t9q.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return nothing\n    \n    smallest\
    \ = lst[1]\n    \n    for i in 2:length(lst)\n        if lst[i] < smallest \n\
    \            smallest = lst[i]\n        end\n    end\n    \n    return smallest\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx3_u0kyk.jl:25\nin expression starting at\
    \ /tmp/tmpx3_u0kyk.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing\n    else if length(lst)\
    \ == 1 \n        return lst[1]\n    else \n        smallest = lst[1]\n       \
    \ for i in 2:length(lst) \n            if lst[i] < smallest \n               \
    \ smallest = lst[i]\n            end\n        end\n        return smallest\n \
    \   end\nend\n</cell>\n<text>\nExercise 2\nWrite a function next_largest() that\
    \ returns the 2nd largest element of the list.\nReturn None if there is no such\
    \ element.\n    \n    next_largest([1, 2, 3, 4, 5]) == 5\n    next_largest([5,\
    \ 1, 4, 3, 2]) == 5\n    next_largest([]) == None\n    next_largest([1, 1]) ==\
    \ None\n    \n</text>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcwvag55d.jl:14\nin expression starting at\
    \ /tmp/tmpcwvag55d.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return None \n    else \n     \
    \   smallest = lst[1] \n        lst[1] = lst[length(lst)] \n        lst[length(lst)]\
    \ = smallest \n        return smallest \nend\n</code>\n<|/ a |>\n<| c |>\nThis\
    \ doesn't work if there are duplicates in the list. For example, `next_smallest([1,2,2,3,4,5])`\
    \ returns `2` instead of `3`.\n<|/ c |>\n<| c |>\nYes, it does. I tested it before\
    \ posting it. The OP didn't specify that there could be duplicates in the list.\
    \ He said \"Return the 2nd smallest element of the list\"\n<|/ c |>\n<| c |>\n\
    Yes, I missed that part. Sorry. Your answer works perfectly though.\n<|/ c |>\n\
    <| c |>\nI tested it again and it works. I edited my answer to include a test\
    \ case where it fails.\n<|/ c |>\n<| c |>\nI tested it again and it works. I edited\
    \ my answer to include a test case where it fails.\n<|/ c |>\n<| a tags=julia,sorting\
    \ |>\nThe answer by is correct, but I thought I'd add some explanation as to why\
    \ it works.\nThe reason why this works is because Julia's sort function uses QuickSort,\
    \ which is a stable sort, meaning that the order of equal elements is preserved.\
    \ In other words, if two elements are equal, they will remain in the same relative\
    \ order in the sorted array.\nThe reason why this works is because Julia's sort\
    \ function uses QuickSort, which is a stable sort, meaning that the order of equal\
    \ elements is preserved. In other words, if two elements are equal, they will\
    \ remain in the same relative order in the sorted array.\nThe reason why this\
    \ works is because Julia's sort function uses QuickSort, which is a stable sort,\
    \ meaning that the order of equal elements is preserved. In other words, if two\
    \ elements are equal, they will remain in the same relative order in the sorted\
    \ array.\nThe reason why this works is because Julia's sort function uses QuickSort,\
    \ which is a stable sort, meaning that the order of equal elements is preserved.\
    \ In other words, if two elements are equal, they will remain in the same relative\
    \ order in the sorted array.\nThe reason why this works is because Julia's sort\
    \ function uses QuickSort, which is a stable sort, meaning that the order of equal\
    \ elements is preserved. In other words, if two elements are equal, they will\
    \ remain in the same relative order in the sorted array.\nThe reason why this\
    \ works is because Julia's sort function \nusing Test\n\n@testset begin\n\ncandidate\
    \ = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprjqtocj7.jl:20\nin expression starting at\
    \ /tmp/tmprjqtocj7.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        None \n    elseif length(lst) ==\
    \ 1 \n        lst[1] \n    elseif lst[1] < lst[2] \n        lst[1] \n    elseif\
    \ lst[1] > lst[2] \n        lst[2] \n    elseif lst[1] == lst[2] \n        lst[1]\
    \ \n    elseif lst[1] < lst[2] \n        lst[2] \n    elseif lst[1] > lst[2] \n\
    \        lst[1] \n    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4,\
    \ 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph6py3y2s.jl:28\nin expression starting at\
    \ /tmp/tmph6py3y2s.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return nothing\n    end\n    \n\
    \    smallest = lst[1]\n    \n    for el in lst[2:end]\n        if el < smallest\
    \ \n            smallest = el\n        end\n    end\n    \n    return smallest\n\
    end\n</cell>\n<code language=julia-1.5>\nnext_smallest([1, 2, 3, 4, 5])\n</cell>\n\
    <code language=julia-1.5>\nnext_smallest([5, 1, 4, 3, 2])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([])\n</cell>\n<code language=julia-1.5>\nnext_smallest([1, 1])\n\
    </cell>\n<text>\nExercise 2\nWrite a function next_largest() that returns the\
    \ 2nd largest element of the list.\nReturn None if there is no such element.\n\
    \    \n    next_largest([1, 2, 3, 4, 5]) == 5\n    next_largest([5, 1, 4, 3, 2])\
    \ == 5\n    next_largest([]) == None\n    next_largest([1, 1]) == None\n    \"\
    \"\"\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp39bfr3p_.jl:26\nin expression starting at\
    \ /tmp/tmp39bfr3p_.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing\n    \n    smallest\
    \ = lst[1]\n    \n    for x in lst[2:end]\n        if x < smallest\n         \
    \   smallest = x\n        end\n    end\n    \n    return smallest\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmplik17i1u.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmplik17i1u.jl:1\n\
    in expression starting at /tmp/tmplik17i1u.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return None \n    else \n     \
    \   smallest = lst[1] \n        for i in 2:length(lst) \n            if lst[i]\
    \ < smallest \n                smallest = lst[i] \n            end \n        end\
    \ \n        return smallest \n    end \nend \n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvn9aqdbw.jl:24\nin expression starting at\
    \ /tmp/tmpvn9aqdbw.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing \n    \n    smallest\
    \ = lst[1] \n    \n    for x in lst[2:end] \n        if x < smallest \n      \
    \      smallest = x \n        end \n    end \n    \n    return smallest \nend\
    \ \nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmps3faexpi.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmps3faexpi.jl:1\n\
    in expression starting at /tmp/tmps3faexpi.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return None \n    else \n     \
    \   smallest = lst[1] \n        for el in lst[2:end] \n            if el < smallest\
    \ \n                smallest = el \n            end \n        end \n        return\
    \ smallest \n    end \nend \n</cell>\n<code language=julia-1.5>\nusing Test\n\n\
    @testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5])\
    \ == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptz96b_09.jl:24\nin expression starting at\
    \ /tmp/tmptz96b_09.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing\n    \n    smallest\
    \ = lst[1]\n    \n    for i in lst[2:end]\n        if i < smallest\n         \
    \   smallest = i\n        end\n    end\n    \n    return smallest\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0yzlrbr9.jl:25\nin expression starting at\
    \ /tmp/tmp0yzlrbr9.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return None \n    else \n     \
    \   smallest = lst[1] \n        for i in 2:length(lst) \n            if lst[i]\
    \ < smallest \n                smallest = lst[i] \n            end \n        end\
    \ \n        return smallest \n    end \nend \n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnvpn6qhc.jl:24\nin expression starting at\
    \ /tmp/tmpnvpn6qhc.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing\n    \n    smallest\
    \ = lst[1]\n    \n    for x in lst[2:end]\n        if x < smallest\n         \
    \   smallest = x\n        end\n    end\n    \n    return smallest\nend\n</cell>\n\
    <code language=julia-1.5>\nnext_smallest([1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([5, 1, 4, 3, 2])\n</cell>\n<code language=julia-1.5>\nnext_smallest([])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1, 1])\n</cell>\n<text>\nExercise:\
    \ Write a function that returns the 2nd smallest element of a given list.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfdtfdsbl.jl:25\nin expression starting at\
    \ /tmp/tmpfdtfdsbl.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return None \n    else \n     \
    \   smallest = lst[1] \n        for i in 2:length(lst) \n            if lst[i]\
    \ < smallest \n                smallest = lst[i] \n            end\n        end\n\
    \        return smallest \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjg4nqaoc.jl:24\nin expression starting at\
    \ /tmp/tmpjg4nqaoc.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return nothing\n    \n    smallest\
    \ = lst[1]\n    \n    for x in lst[2:end]\n        if x < smallest \n        \
    \    smallest = x\n        end\n    end\n    \n    return smallest\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpukfkjyza.jl:25\nin expression starting at\
    \ /tmp/tmpukfkjyza.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        Nothing\n    elseif length(lst)\
    \ == 1 \n        lst[1]\n    else\n        smallest_idx = findmin(lst)[2]\n  \
    \      lst[smallest_idx]\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the index of the element in the list that has the smallest absolute\
    \ value.\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprbqusw8h.jl:21\nin expression starting at\
    \ /tmp/tmprbqusw8h.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return nothing\n    \n    smallest\
    \ = lst[1]\n    \n    for i in 2:length(lst)\n        if lst[i] < smallest \n\
    \            smallest = lst[i]\n        end\n    end\n    \n    return smallest\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4czkhmsp.jl:25\nin expression starting at\
    \ /tmp/tmp4czkhmsp.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing\n    \n    smallest\
    \ = lst[1]\n    \n    for x in lst[2:end]\n        if x < smallest\n         \
    \   smallest = x\n        end\n    end\n    \n    return smallest\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8nl7emcb.jl:25\nin expression starting at\
    \ /tmp/tmp8nl7emcb.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return None \n    else \n     \
    \   smallest = lst[1] \n        for element in lst[2:end] \n            if element\
    \ < smallest \n                smallest = element \n            end \n       \
    \ end \n        return smallest \n    end \nend \n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyeqswguk.jl:24\nin expression starting at\
    \ /tmp/tmpyeqswguk.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing\n    end\n    \n\
    \    smallest = lst[1]\n    \n    for el in lst[2:end]\n        if el < smallest\
    \ \n            smallest = el\n        end\n    end\n    \n    return smallest\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvl_l_0yr.jl:26\nin expression starting at\
    \ /tmp/tmpvl_l_0yr.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return None \n    else \n     \
    \   smallest = lst[1] \n        lst = lst[2:end] \n        for elt in lst \n \
    \           if elt < smallest \n                smallest = elt \n            end\
    \ \n        end \n        return smallest \nend \n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4ihc12ys.jl:24\nin expression starting at\
    \ /tmp/tmp4ihc12ys.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return None \n    else \n     \
    \   return lst[1] \nend\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the index of the first element of a list that satisfies a predicate.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq4vbej6y.jl:17\nin expression starting at\
    \ /tmp/tmpq4vbej6y.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing\n    else \n   \
    \     smallest = minimum(lst)\n        lst = filter(x -> x != smallest, lst)\n\
    \        if length(lst) == 0 \n            return Nothing\n        else \n   \
    \         return smallest\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpp_2415p_.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpp_2415p_.jl:1\n\
    in expression starting at /tmp/tmpp_2415p_.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing\n    \n    smallest\
    \ = lst[1]\n    \n    for ele in lst[2:end]\n        if ele < smallest \n    \
    \        smallest = ele\n        end\n    end\n    \n    return smallest\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3xfvjjsa.jl:25\nin expression starting at\
    \ /tmp/tmp3xfvjjsa.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return None \n    else \n     \
    \   smallest = lst[1] \n        lst = lst[2:end] \n        return smallest \n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_3nznsup.jl:19\nin expression starting at\
    \ /tmp/tmp_3nznsup.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return None \n    else \n     \
    \   smallest = lst[1] \n        for i in 2:length(lst) \n            if lst[i]\
    \ < smallest \n                smallest = lst[i] \n            end\n        end\n\
    \        return smallest \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp94j7tp_4.jl:24\nin expression starting at\
    \ /tmp/tmp94j7tp_4.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing\n    else if length(lst)\
    \ == 1 \n        return lst[1]\n    else \n        smallest = lst[1]\n       \
    \ lst = lst[2:end]\n        for elt in lst\n            if elt < smallest \n \
    \               smallest = elt\n            end\n        end\n        return smallest\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4m0hbzp1.jl:14\nin expression starting at\
    \ /tmp/tmp4m0hbzp1.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing\n    \n    smallest\
    \ = lst[1]\n    \n    for x in lst[2:end]\n        if x < smallest\n         \
    \   smallest = x\n        end\n    end\n    \n    return smallest\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq3p6quow.jl:25\nin expression starting at\
    \ /tmp/tmpq3p6quow.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing\n    \n    smallest\
    \ = lst[1]\n    \n    for elt in lst[2:end]\n        if elt < smallest \n    \
    \        smallest = elt\n        end\n    end\n    \n    return smallest\nend\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1, 2, 3, 4, 5])\n</cell>\n\
    <code language=julia-1.5>\nnext_smallest([5, 1, 4, 3, 2])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([])\n</cell>\n<code language=julia-1.5>\nnext_smallest([1, 1])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the index of the element\
    \ in the list that is closest to zero.\nReturn 0 if there is no such element.\n\
    If there are multiple elements that are equally close, return the first one.\n\
    If there are multiple elements that are equally close, return the first one that\
    \ appears earlier in the list.\nIf there are multiple elements that are equally\
    \ close, return the first one that appears earlier in the list.\nIf there are\
    \ multiple elements that are equally close, return the first one that appears\
    \ earlier in the list.\nIf there are multiple elements that are equally close,\
    \ return the first one that appears earlier in the list.\nIf there are multiple\
    \ elements that are equally close, return the first one that appears earlier in\
    \ the list.\nIf there are multiple elements that are equally close, return the\
    \ first one that appears earlier in the list.\nIf there are multiple elements\
    \ that are equally close, return the first one that appears earlier in the list.\n\
    If there are multiple elements that are equally close, return the first one that\
    \ appears earlier in the list.\nIf there are multiple elements that are equally\
    \ close, return the first one that appears earlier in the list.\nIf there are\
    \ multiple elements that are equally close, return the first one that appears\
    \ earlier in the list.\nIf there are multiple elements that are equally close,\
    \ return the first one that appears earlier in the list.\nIf there are multiple\
    \ elements that are equally close, return the first one that appears earlier in\
    \ the list.\nIf there are multiple elements that are equally close, return the\
    \ first one that appears earlier in the list.\nIf there are multiple elements\
    \ that are equally close, return the first one that appears earlier in the list.\n\
    If there are multiple elements that are equally close, return the first one that\
    \ appears earlier in the list.\nIf there are multiple elements that are equally\
    \ close, return the first one that appears earlier in the list.\nIf there are\
    \ multiple elements that are equally close, return the first one that appears\
    \ earlier in the list.\nIf there are multiple elements that are equally close,\
    \ return the first one \nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplky14wuj.jl:25\nin expression starting at\
    \ /tmp/tmplky14wuj.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return None \n    else \n     \
    \   return lst[1] \nend\n</cell>\n<text>\nExercise 4\nWrite a function that returns\
    \ the 2nd smallest element of a list.\nIf there are multiple 2nd smallest elements,\
    \ return the first one.\nIf there are no 2nd smallest elements, return None.\n\
    If there are multiple 2nd smallest elements, return the first one.\nIf there are\
    \ no 2nd smallest elements, return None.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdb8ovfdw.jl:17\nin expression starting at\
    \ /tmp/tmpdb8ovfdw.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        None \n    else \n        lst[end-1]\
    \ \n    end\nend\n</cell>\n<text>\nExercise 4\nWrite a function that returns the\
    \ number of elements in the list that are less than the given value.\nusing Test\n\
    \n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4,\
    \ 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf1611cnz.jl:18\nin expression starting at\
    \ /tmp/tmpf1611cnz.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing\n    end\n    \n\
    \    smallest = lst[1]\n    \n    for el in lst[2:end]\n        if el < smallest\
    \ \n            smallest = el\n        end\n    end\n    \n    return smallest\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyw19az54.jl:26\nin expression starting at\
    \ /tmp/tmpyw19az54.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return None \n    else \n     \
    \   smallest = lst[1] \n        for i in 2:length(lst) \n            if lst[i]\
    \ < smallest \n                smallest = lst[i] \n            end\n        end\n\
    \        return smallest \n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    using Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw_3x0d8a.jl:24\nin expression starting at\
    \ /tmp/tmpw_3x0d8a.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return None \n    else \n     \
    \   smallest = lst[1] \n        lst = lst[2:end] \n        return smallest \n\
    end\n</cell>\n<code language=julia-1.5>\nnext_smallest([1, 2, 3, 4, 5])\n</cell>\n\
    <code language=julia-1.5>\nnext_smallest([5, 1, 4, 3, 2])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([])\n</cell>\n<code language=julia-1.5>\nnext_smallest([1, 1])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of elements\
    \ in a list that satisfy a predicate.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps2mg4m7a.jl:19\nin expression starting at\
    \ /tmp/tmps2mg4m7a.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return nothing\n    end\n    \n\
    \    smallest = lst[1]\n    \n    for el in lst[2:end]\n        if el < smallest\
    \ \n            smallest = el\n        end\n    end\n    \n    return smallest\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfagqes2j.jl:31\n  Expression: candidate([1,\
    \ 2, 3, 4, 5]) == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfagqes2j.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfagqes2j.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpfagqes2j.jl:32\n  Expression: candidate([5, 1, 4, 3, 2]) ==\
    \ 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfagqes2j.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfagqes2j.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpfagqes2j.jl:34\n  Expression: candidate([1, 1]) == nothing\n\
    \   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfagqes2j.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfagqes2j.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpfagqes2j.jl:35\n  Expression: candidate([1, 1, 1, 1, 0]) ==\
    \ 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfagqes2j.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfagqes2j.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpfagqes2j.jl:36\n  Expression: candidate([1, 1]) == nothing\n\
    \   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfagqes2j.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing\n    \n    smallest\
    \ = lst[1]\n    \n    for ele in lst[2:end]\n        if ele < smallest \n    \
    \        smallest = ele\n        end\n    end\n    \n    return smallest\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppwrt0lo4.jl:25\nin expression starting at\
    \ /tmp/tmppwrt0lo4.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing\n    \n    smallest\
    \ = lst[1]\n    \n    for i in 2:length(lst)\n        if lst[i] < smallest \n\
    \            smallest = lst[i]\n        end\n    end\n    \n    return smallest\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg0vib5vl.jl:25\nin expression starting at\
    \ /tmp/tmpg0vib5vl.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return nothing\n    \n    smallest\
    \ = lst[1]\n    \n    for i in 2:length(lst)\n        if lst[i] < smallest \n\
    \            smallest = lst[i]\n        end\n    end\n    \n    return smallest\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7mo3uszy.jl:25\nin expression starting at\
    \ /tmp/tmp7mo3uszy.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return None \n    else \n     \
    \   return lst[1] \n    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4,\
    \ 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx3fuhrpm.jl:18\nin expression starting at\
    \ /tmp/tmpx3fuhrpm.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return None \n    else \n     \
    \   smallest = lst[1] \n        lst = lst[2:end] \n        return smallest \n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp21zuv7up.jl:19\nin expression starting at\
    \ /tmp/tmp21zuv7up.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing\n    \n    smallest\
    \ = lst[1]\n    \n    for i in 2:length(lst)\n        if lst[i] < smallest \n\
    \            smallest = lst[i]\n        end\n    end\n    \n    return smallest\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphry0jp58.jl:25\nin expression starting at\
    \ /tmp/tmphry0jp58.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return None \n    else \n     \
    \   smallest = lst[1] \n        for el in lst[2:end] \n            if el < smallest\
    \ \n                smallest = el \n            end \n        end \n        return\
    \ smallest \n    end \nend \n</cell>\n<code language=julia-1.5>\nusing Test\n\n\
    @testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5])\
    \ == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbfzqp8uu.jl:24\nin expression starting at\
    \ /tmp/tmpbfzqp8uu.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing\n    else if length(lst)\
    \ == 1 \n        return lst[1]\n    else \n        smallest = lst[1]\n       \
    \ for i in 2:length(lst) \n            if lst[i] < smallest \n               \
    \ smallest = lst[i]\n            end\n        end\n        return smallest\n \
    \   end\nend\n</cell>\n<code language=julia-1.3>\nusing Test\n\n@testset begin\n\
    \ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkpd4_70x.jl:14\nin expression starting at\
    \ /tmp/tmpkpd4_70x.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        None \n    else \n        lst[end-1]\
    \ \n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwicpzp_x.jl:23\n  Expression: candidate([1,\
    \ 2, 3, 4, 5]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwicpzp_x.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwicpzp_x.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpwicpzp_x.jl:24\n  Expression: candidate([5, 1, 4, 3, 2]) ==\
    \ 2\n   Evaluated: 3 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwicpzp_x.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwicpzp_x.jl:22\ntest set: Error\
    \ During Test at /tmp/tmpwicpzp_x.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == nothing\n  UndefVarError: None not defined\n\
    \  Stacktrace:\n   [1] next_smallest(lst::Vector{Int64})\n     @ Main /tmp/tmpwicpzp_x.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwicpzp_x.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwicpzp_x.jl:22\ntest set:\
    \ Test Failed at /tmp/tmpwicpzp_x.jl:26\n  Expression: candidate([1, 1]) == nothing\n\
    \   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwicpzp_x.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwicpzp_x.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpwicpzp_x.jl:28\n  Expression: candidate([1, 1]) == no"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwicpzp_x.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return None \n    else \n     \
    \   smallest = lst[1] \n        for el in lst[2:end] \n            if el < smallest\
    \ \n                smallest = el \n            end \n        end \n        return\
    \ smallest \n    end\nend\n</cell>\n<code language=julia-1.0>\nusing Test\n\n\
    @testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5])\
    \ == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwlel5c1m.jl:24\nin expression starting at\
    \ /tmp/tmpwlel5c1m.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing\n    \n    smallest\
    \ = lst[1]\n    \n    for el in lst[2:end] \n        if el < smallest \n     \
    \       smallest = el \n        end\n    end\n    \n    return smallest\nend\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1, 2, 3, 4, 5])\n</cell>\n\
    <code language=julia-1.5>\nnext_smallest([5, 1, 4, 3, 2])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([])\n</cell>\n<code language=julia-1.5>\nnext_smallest([1, 1])\n\
    </cell>\n<text>\nExercise 2\nWrite a function next_largest() that returns the\
    \ 2nd largest element of the list.\nReturn None if there is no such element.\n\
    using Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq4vpu3xo.jl:25\nin expression starting at\
    \ /tmp/tmpq4vpu3xo.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return nothing\n    end\n    \n\
    \    smallest = lst[1]\n    \n    for x in lst[2:end]\n        if x < smallest\n\
    \            smallest = x\n        end\n    end\n    \n    return smallest\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0q3xn06m.jl:26\nin expression starting at\
    \ /tmp/tmp0q3xn06m.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return nothing\n    \n    smallest\
    \ = lst[1]\n    \n    for x in lst[2:end]\n        if x < smallest\n         \
    \   smallest = x\n        end\n    end\n    \n    return smallest\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9_0xf_92.jl:25\nin expression starting at\
    \ /tmp/tmp9_0xf_92.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return None \n    else \n     \
    \   smallest = lst[1] \n        for el in lst[2:end] \n            if el < smallest\
    \ \n                smallest = el \n            end \n        end \n        return\
    \ smallest \n    end \nend \nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpq6ss55s1.jl:29\n  Expression: candidate([1,\
    \ 2, 3, 4, 5]) == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq6ss55s1.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq6ss55s1.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpq6ss55s1.jl:30\n  Expression: candidate([5, 1, 4, 3, 2]) ==\
    \ 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq6ss55s1.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq6ss55s1.jl:28\ntest set: Error\
    \ During Test at /tmp/tmpq6ss55s1.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == nothing\n  UndefVarError: None not defined\n\
    \  Stacktrace:\n   [1] next_smallest(lst::Vector{Int64})\n     @ Main /tmp/tmpq6ss55s1.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpq6ss55s1.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpq6ss55s1.jl:28\ntest set:\
    \ Test Failed at /tmp/tmpq6ss55s1.jl:32\n  Expression: candidate([1, 1]) == nothing\n\
    \   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq6ss55s1.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq6ss55s1.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpq6ss55s1.jl:33\n  Expression: candidate([1, 1, 1, 1, "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpq6ss55s1.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return nothing\n    end\n    \n\
    \    smallest = lst[1]\n    \n    for el in lst[2:end]\n        if el < smallest\
    \ \n            smallest = el\n        end\n    end\n    \n    return smallest\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc83tp2yh.jl:26\nin expression starting at\
    \ /tmp/tmpc83tp2yh.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return None \n    else \n     \
    \   smallest = lst[1] \n        for i in lst[2:end] \n            if i < smallest\
    \ \n                smallest = i \n            end \n        end \n        return\
    \ smallest \nend \n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\
    \t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx9du7956.jl:23\nin expression starting at\
    \ /tmp/tmpx9du7956.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return None \n    else \n     \
    \   smallest = lst[1] \n        for i = 2:length(lst) \n            if lst[i]\
    \ < smallest \n                smallest = lst[i] \n            end \n        end\
    \ \n        return smallest \n    end \nend \n</cell>\n<text>\nExercise 2\nWrite\
    \ a function next_largest() that returns the 2nd largest element of the list.\n\
    Return None if there is no such element.\n    \n    next_largest([1, 2, 3, 4,\
    \ 5]) == 5\n    next_largest([5, 1, 4, 3, 2]) == 5\n    next_largest([]) == None\n\
    \    next_largest([1, 1]) == None\n    \n</text>\n<cell>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\
    \t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9xwah7m2.jl:24\nin expression starting at\
    \ /tmp/tmp9xwah7m2.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        error(\"The list cannot be empty\"\
    )\n    end\n    smallest = lst[1]\n    for el in lst[2:end]\n        if el < smallest\
    \ \n            smallest = el\n        end\n    end\n    return smallest\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpywyf5bm4.jl:23\nin expression starting at\
    \ /tmp/tmpywyf5bm4.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return None \n    else \n     \
    \   return lst[1] \nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp0d5tlk9e.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0d5tlk9e.jl:1\n\
    in expression starting at /tmp/tmp0d5tlk9e.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing \n    \n    smallest\
    \ = lst[1] \n    \n    for x in lst[2:end] \n        if x < smallest \n      \
    \      smallest = x \n        end \n    end \n    \n    return smallest \nend\
    \ \nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp_rh5xe_j.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_rh5xe_j.jl:1\n\
    in expression starting at /tmp/tmp_rh5xe_j.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return None \n    else \n     \
    \   return lst[1] \nend\n</cell>\n<text>\nExercise 10\nWrite a function that returns\
    \ the index of the element in the list that has the smallest value.\nusing Test\n\
    \n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4,\
    \ 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcpkg_xjd.jl:17\nin expression starting at\
    \ /tmp/tmpcpkg_xjd.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return nothing\n    \n    smallest\
    \ = lst[1]\n    \n    for x in lst[2:end] \n        if x < smallest \n       \
    \     smallest = x\n        end\n    end\n    \n    return smallest\nend\n</cell>\n\
    <code language=julia-1.5>\nnext_smallest([1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([5, 1, 4, 3, 2])\n</cell>\n<code language=julia-1.5>\nnext_smallest([])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1, 1])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the number of elements in a list that satisfy\
    \ a given condition.\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpon8joaga.jl:25\nin expression starting at\
    \ /tmp/tmpon8joaga.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return nothing\n    end\n    \n\
    \    smallest = lst[1]\n    \n    for i in 2:length(lst)\n        if lst[i] <\
    \ smallest \n            smallest = lst[i]\n        end\n    end\n    \n    return\
    \ smallest\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t\
    @test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpo8tldn_x.jl:31\n  Expression: candidate([1,\
    \ 2, 3, 4, 5]) == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo8tldn_x.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo8tldn_x.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpo8tldn_x.jl:32\n  Expression: candidate([5, 1, 4, 3, 2]) ==\
    \ 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo8tldn_x.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo8tldn_x.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpo8tldn_x.jl:34\n  Expression: candidate([1, 1]) == nothing\n\
    \   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo8tldn_x.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo8tldn_x.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpo8tldn_x.jl:35\n  Expression: candidate([1, 1, 1, 1, 0]) ==\
    \ 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo8tldn_x.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo8tldn_x.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpo8tldn_x.jl:36\n  Expression: candidate([1, 1]) == nothing\n\
    \   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpo8tldn_x.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        None \n    else \n        lst[findmin(lst)[2]]\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@assert next_smallest([1, 2,\
    \ 3, 4, 5]) == 2\n@assert next_smallest([5, 1, 4, 3, 2]) == 2\n@assert next_smallest([])\
    \ == None\n@assert next_smallest([1, 1]) == None\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns the index of the element in the list that is closest\
    \ to zero.\nIf there are multiple elements that are equally close, return the\
    \ index of the smallest one.\nIf there are no elements that are equally close,\
    \ return None.\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t\
    @test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3sxetupt.jl:18\nin expression starting at\
    \ /tmp/tmp3sxetupt.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return None \n    else \n     \
    \   smallest = lst[1] \n        for i in 2:length(lst) \n            if lst[i]\
    \ < smallest \n                smallest = lst[i] \n            end \n        end\
    \ \n        return smallest \n    end \nend \n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_9x6l7io.jl:24\nin expression starting at\
    \ /tmp/tmp_9x6l7io.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return None \n    else \n     \
    \   smallest = lst[1] \n        lst[1] = lst[end] \n        lst[end] = smallest\
    \ \n        return smallest \nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4,\
    \ 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplqe1ngsa.jl:20\nin expression starting at\
    \ /tmp/tmplqe1ngsa.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return None \n    else \n     \
    \   smallest = lst[1] \n        lst[1] = lst[end] \n        lst[end] = smallest\
    \ \n        return smallest \nend\n</cell>\n<code language=julia-1.3>\nusing Test\n\
    \n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4,\
    \ 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr_95rvfj.jl:20\nin expression starting at\
    \ /tmp/tmpr_95rvfj.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return nothing\n    end\n    \n\
    \    smallest = lst[1]\n    \n    for ele in lst[2:end] \n        if ele < smallest\
    \ \n            smallest = ele\n        end\n    end\n    \n    return smallest\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwm455dkn.jl:31\n  Expression: candidate([1,\
    \ 2, 3, 4, 5]) == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwm455dkn.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwm455dkn.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpwm455dkn.jl:32\n  Expression: candidate([5, 1, 4, 3, 2]) ==\
    \ 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwm455dkn.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwm455dkn.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpwm455dkn.jl:34\n  Expression: candidate([1, 1]) == nothing\n\
    \   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwm455dkn.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwm455dkn.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpwm455dkn.jl:35\n  Expression: candidate([1, 1, 1, 1, 0]) ==\
    \ 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwm455dkn.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwm455dkn.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpwm455dkn.jl:36\n  Expression: candidate([1, 1]) == nothing\n\
    \   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwm455dkn.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        error(\"List is empty\") \n   \
    \ else \n        lst[1] = lst[1] < lst[2] ? lst[1] : lst[2] \n        lst[2] =\
    \ lst[1] < lst[2] ? lst[2] : lst[1] \n        return lst[1] \n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps7wubizd.jl:20\nin expression starting at\
    \ /tmp/tmps7wubizd.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return None \n    else \n     \
    \   smallest = lst[1] \n        for e in lst[2:end] \n            if e < smallest\
    \ \n                smallest = e \n            end \n        end \n        return\
    \ smallest \n    end \nend \n</cell>\n<code language=julia-1.5>\nusing Test\n\n\
    @testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5])\
    \ == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1wnhc7fq.jl:24\nin expression starting at\
    \ /tmp/tmp1wnhc7fq.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return None \n    else \n     \
    \   smallest = lst[1] \n        for i in 2:length(lst) \n            if lst[i]\
    \ < smallest \n                smallest = lst[i] \n            end \n        end\
    \ \n        return smallest \n    end \nend \n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp026m521j.jl:24\nin expression starting at\
    \ /tmp/tmp026m521j.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return None \n    else \n     \
    \   return lst[1] \nend\n</cell>\n<text>\nExercise 7\nWrite a function next_largest()\
    \ that returns the 2nd largest element of the list.\nReturn None if there is no\
    \ such element.\nTest your function with these inputs:\nusing Test\n\n@testset\
    \ begin\n\ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\
    \t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd4641jn5.jl:17\nin expression starting at\
    \ /tmp/tmpd4641jn5.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return nothing\n    else if length(lst)\
    \ == 1 \n        return lst[1]\n    else \n        smallest = lst[1]\n       \
    \ for i in 2:length(lst) \n            if lst[i] < smallest \n               \
    \ smallest = lst[i]\n            end\n        end\n        return smallest\n \
    \   end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns the index\
    \ of the first element of a list that satisfies a predicate.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\
    \t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv1brp6m2.jl:14\nin expression starting at\
    \ /tmp/tmpv1brp6m2.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        None \n    else \n        lst[findmin(lst)]\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4w1guc28.jl:18\nin expression starting at\
    \ /tmp/tmp4w1guc28.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing\n    \n    smallest\
    \ = lst[1]\n    \n    for el in lst[2:end] \n        if el < smallest \n     \
    \       smallest = el\n        end\n    end\n    \n    return smallest\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppinxatwv.jl:25\nin expression starting at\
    \ /tmp/tmppinxatwv.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return nothing\n    \n    smallest\
    \ = lst[1]\n    \n    for x in lst[2:end]\n        if x < smallest\n         \
    \   smallest = x\n        end\n    end\n    \n    return smallest\nend\n</cell>\n\
    <code language=julia-1.5>\nnext_smallest([1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([5, 1, 4, 3, 2])\n</cell>\n<code language=julia-1.5>\nnext_smallest([])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1, 1])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the index of the element in the list that is\
    \ closest to zero.\nReturn 0 if there is no such element.\nIf there are multiple\
    \ elements that are equally close, return the first one.\nIf there are multiple\
    \ elements that are equally close, return the last one.\nIf there are multiple\
    \ elements that are equally close, return the middle one.\nIf there are multiple\
    \ elements that are equally close, return the middle two.\nIf there are multiple\
    \ elements that are equally close, return the middle three.\nIf there are multiple\
    \ elements that are equally close, return the middle four.\nIf there are multiple\
    \ elements that are equally close, return the middle five.\nIf there are multiple\
    \ elements that are equally close, return the middle six.\nIf there are multiple\
    \ elements that are equally close, return the middle seven.\nIf there are multiple\
    \ elements that are equally close, return the middle eight.\nIf there are multiple\
    \ elements that are equally close, return the middle nine.\nIf there are multiple\
    \ elements that are equally close, return the middle ten.\nIf there are multiple\
    \ elements that are equally close, return the middle eleven.\nIf there are multiple\
    \ elements that are equally close, return the middle twelve.\nIf there are multiple\
    \ elements that are equally close, return the middle thirteen.\nIf there are multiple\
    \ elements that are equally close, return the middle fourteen.\nIf there are multiple\
    \ elements that are equally close, return the middle fifteen.\nIf there are multiple\
    \ elements that are equally close, return the middle sixteen.\nIf there are multiple\
    \ elements that are equally close, return the middle seventeen.\nIf there are\
    \ multiple elements that are equally close, return the middle eighteen.\nIf there\
    \ are multiple elements that are equally close, return the middle nineteen.\n\
    If there are multiple elements that are equally close, return the middle twenty.\n\
    If there are multiple elements that are equally close, return the middle twenty-one.\n\
    If there are multiple elements that are equally close, return the middle twenty-two.\n\
    If there are multiple elements that are equally close, return the middle twent\n\
    using Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplv0uak_s.jl:25\nin expression starting at\
    \ /tmp/tmplv0uak_s.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing\n    \n    smallest\
    \ = lst[1]\n    \n    for i in lst[2:end]\n        if i < smallest\n         \
    \   smallest = i\n        end\n    end\n    \n    return smallest\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxicusngi.jl:25\nin expression starting at\
    \ /tmp/tmpxicusngi.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return nothing\n    end\n    \n\
    \    smallest = lst[1]\n    \n    for i in 2:length(lst)\n        if lst[i] <\
    \ smallest \n            smallest = lst[i]\n        end\n    end\n    \n    return\
    \ smallest\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t\
    @test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpccn0gpgb.jl:31\n  Expression: candidate([1,\
    \ 2, 3, 4, 5]) == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpccn0gpgb.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpccn0gpgb.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpccn0gpgb.jl:32\n  Expression: candidate([5, 1, 4, 3, 2]) ==\
    \ 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpccn0gpgb.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpccn0gpgb.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpccn0gpgb.jl:34\n  Expression: candidate([1, 1]) == nothing\n\
    \   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpccn0gpgb.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpccn0gpgb.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpccn0gpgb.jl:35\n  Expression: candidate([1, 1, 1, 1, 0]) ==\
    \ 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpccn0gpgb.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpccn0gpgb.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpccn0gpgb.jl:36\n  Expression: candidate([1, 1]) == nothing\n\
    \   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpccn0gpgb.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing\n    \n    smallest\
    \ = lst[1]\n    \n    for el in lst[2:end]\n        if el < smallest \n      \
    \      smallest = el\n        end\n    end\n    \n    return smallest\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8ucneflf.jl:25\nin expression starting at\
    \ /tmp/tmp8ucneflf.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return None \n    else \n     \
    \   smallest = lst[1] \n        for elt in lst[2:end] \n            if elt < smallest\
    \ \n                smallest = elt \n            end \n        end \n        return\
    \ smallest \n    end \nend \n</cell>\n<code language=julia-1.3>\nusing Test\n\n\
    @testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5])\
    \ == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdw0wq9xp.jl:24\nin expression starting at\
    \ /tmp/tmpdw0wq9xp.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return None \n    else \n     \
    \   smallest = lst[1] \n        for el in lst[2:end] \n            if el < smallest\
    \ \n                smallest = el \n            end \n        end \n        return\
    \ smallest \nend \nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp5bdbjj8f.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp5bdbjj8f.jl:1\n\
    in expression starting at /tmp/tmp5bdbjj8f.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return None \n    else \n     \
    \   smallest = lst[1] \n        for i in 2:length(lst) \n            if lst[i]\
    \ < smallest \n                smallest = lst[i] \n            end \n        end\
    \ \n        return smallest \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1hec7i73.jl:24\nin expression starting at\
    \ /tmp/tmp1hec7i73.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing\n    \n    smallest\
    \ = lst[1]\n    \n    for x in lst[2:end]\n        if x < smallest \n        \
    \    smallest = x\n        end\n    end\n    \n    return smallest\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdbrbqyr6.jl:25\nin expression starting at\
    \ /tmp/tmpdbrbqyr6.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        None \n    else \n        lst[findmin(lst)+1]\
    \ \nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\n\
    candidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8yafxr1i.jl:17\nin expression starting at\
    \ /tmp/tmp8yafxr1i.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing \n    \n    smallest\
    \ = lst[1] \n    \n    for i in lst[2:end] \n        if i < smallest \n      \
    \      smallest = i \n        end \n    end \n    \n    return smallest \nend\
    \ \nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpbm2_h85o.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpbm2_h85o.jl:1\n\
    in expression starting at /tmp/tmpbm2_h85o.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        None \n    elseif length(lst) ==\
    \ 1 \n        lst[1] \n    elseif length(lst) == 2 \n        lst[1] \n    elseif\
    \ length(lst) > 2 \n        lst[findmin(lst)[2]] \n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpives7irj.jl:22\nin expression starting at\
    \ /tmp/tmpives7irj.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing \n    else \n  \
    \      smallest = lst[1] \n        lst = lst[2:end] \n        return smallest\
    \ \nend\n</cell>\n<text>\nExercise 10\nWrite a function that returns the index\
    \ of the element in the list that has the smallest value.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\
    \t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdhyi1k81.jl:19\nin expression starting at\
    \ /tmp/tmpdhyi1k81.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return None \n    else \n     \
    \   return lst[1] \nend\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of elements in the list that are less than a given value.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr2t3bicr.jl:17\nin expression starting at\
    \ /tmp/tmpr2t3bicr.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing\n    \n    smallest\
    \ = lst[1]\n    \n    for x in lst[2:end]\n        if x < smallest\n         \
    \   smallest = x\n        end\n    end\n    \n    return smallest\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6xotljoj.jl:25\nin expression starting at\
    \ /tmp/tmp6xotljoj.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return None \n    else \n     \
    \   smallest = lst[1] \n        for element in lst[2:end] \n            if element\
    \ < smallest \n                smallest = element \n            end \n       \
    \ end \n        return smallest \n    end \nend \n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3mygdov0.jl:24\nin expression starting at\
    \ /tmp/tmp3mygdov0.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return None \n    else \n     \
    \   return lst[findmin(lst)]\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4,\
    \ 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnzbopgc2.jl:17\nin expression starting at\
    \ /tmp/tmpnzbopgc2.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return None \n    else \n     \
    \   smallest = lst[1] \n        for e in lst[2:end] \n            if e < smallest\
    \ \n                smallest = e \n            end\n        end\n        return\
    \ smallest \n    end\nend\n</cell>\n<text>\nExercise 10\nWrite a function that\
    \ returns the number of elements in a list that satisfy a given condition. For\
    \ example, count_if(lst, x->x>2) should return 2 if lst contains elements with\
    \ values greater than 2, and 0 if lst contains no elements with values greater\
    \ than 2.\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu5mfiuqm.jl:24\nin expression starting at\
    \ /tmp/tmpu5mfiuqm.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        None \n    else \n        lst[1]\
    \ \n    end\nend\n</cell>\n<text>\nExercise 4\nWrite a function that returns the\
    \ index of the first element of a list that satisfies a predicate.\nusing Test\n\
    \n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4,\
    \ 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp10kjkhld.jl:18\nin expression starting at\
    \ /tmp/tmp10kjkhld.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        error(\"List is empty\") \n   \
    \ else \n        lst[1] = lst[1] - 1\n        if lst[1] == 0 \n            return\
    \ lst[2] \n        else \n            return lst[1] \n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppm_w4d_j.jl:22\nin expression starting at\
    \ /tmp/tmppm_w4d_j.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return None \n    else \n     \
    \   smallest = lst[1] \n        for element in lst[2:end] \n            if element\
    \ < smallest \n                smallest = element \n            end \n       \
    \ end \n        return smallest \n    end \nend \n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nnext_smallest([5,\
    \ 1, 4, 3, 2])\n</cell>\n<code language=julia-1.5>\nnext_smallest([])\n</cell>\n\
    <code language=julia-1.5>\nnext_smallest([1, 1])\n</cell>\n<text>\nExercise 2\n\
    Write a function next_largest() that returns the 2nd largest element of the list.\n\
    Return None if there is no such element.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppexsmazr.jl:24\nin expression starting at\
    \ /tmp/tmppexsmazr.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return None \n    else \n     \
    \   smallest = lst[1] \n        for i in 2:length(lst) \n            if lst[i]\
    \ < smallest \n                smallest = lst[i] \n            else \n       \
    \         break \n        end \n        return smallest \nend \nusing Test\n\n\
    @testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5])\
    \ == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmpbtpt7lgj.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpbtpt7lgj.jl:1\n\
    in expression starting at /tmp/tmpbtpt7lgj.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        None \n    else \n        lst[findmin(lst)]\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t\
    @test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp1xlvybya.jl:23\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4, 5]) == 2\n  ArgumentError: invalid index:\
    \ (1, 1) of type Tuple{Int64, Int64}\n  Stacktrace:\n    [1] to_index(i::Tuple{Int64,\
    \ Int64})\n      @ Base ./indices.jl:300\n    [2] to_index(A::Vector{Int64}, i::Tuple{Int64,\
    \ Int64})\n      @ Base ./indices.jl:277\n    [3] to_indices\n      @ ./indices.jl:333\
    \ [inlined]\n    [4] to_indices\n      @ ./indices.jl:325 [inlined]\n    [5] getindex\n\
    \      @ ./abstractarray.jl:1218 [inlined]\n    [6] next_smallest(lst::Vector{Int64})\n\
    \      @ Main /tmp/tmp1xlvybya.jl:15\n    [7] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmp1xlvybya.jl:23 [inlined]\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmp1xlvybya.jl:22\ntest set:\
    \ Error During Test at /tmp/tmp1xlvybya.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([5, 1, 4, 3, 2]) == 2\n  ArgumentError: invalid index: (1, 2) of type\
    \ Tuple{Int64, Int64}\n  Stacktrace:\n    [1] to_index(i::Tuple{Int64, Int64})\n\
    \      @ Base ./indices.jl:300\n    [2] to_index(A::Vector{Int64}, i::Tuple{Int64,\
    \ Int64})\n      @ Base ./indices.jl:277\n    [3] to_indices\n      @ ./indices.jl:333\
    \ [inlined]\n    [4] to_indices\n      @ ./indices.jl:325 [inlined]\n    [5] getindex\n\
    \      @ ./abstractarray.jl:1218 [inlined]\n    [6] next_smallest(lst::Vector{Int64})\n\
    \      @ Main /tmp/tmp1xlvybya.jl:15\n    [7] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmp1xlvybya.jl:24 [inlined]\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmp1xlvybya.jl:22\ntest set:\
    \ Error During Test at /tmp/tmp1xlvybya.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == nothi"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1xlvybya.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return None \n    else \n     \
    \   smallest = lst[1] \n        lst = lst[2:end] \n        return smallest \n\
    end\n</cell>\n<code language=julia-1.3>\nnext_smallest([1, 2, 3, 4, 5]) == 2 \n\
    next_smallest([5, 1, 4, 3, 2]) == 2 \nnext_smallest([]) == None \nnext_smallest([1,\
    \ 1]) == None \n</cell>\n<text>\nExercise 3\nWrite a function that returns the\
    \ index of the first element of a list that satisfies a predicate.\nusing Test\n\
    \n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4,\
    \ 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9dj6gh6_.jl:19\nin expression starting at\
    \ /tmp/tmp9dj6gh6_.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return None \n    else \n     \
    \   smallest = lst[1] \n        for i in 2:length(lst) \n            if lst[i]\
    \ < smallest \n                smallest = lst[i] \n            end \n        end\
    \ \n        return smallest \n    end \nend \n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdqzfv291.jl:24\nin expression starting at\
    \ /tmp/tmpdqzfv291.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        None \n    else \n        lst[end-1]\
    \ \n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns the\
    \ index of the first element of the list that satisfies a given condition. \n\
    If no such element is found, return -1.\nIf no such element is found, return -1.\n\
    If no such element is found, return -1.\nIf no such element is found, return -1.\n\
    If no such element is found, return -1.\nIf no such element is found, return -1.\n\
    If no such element is found, return -1.\nIf no such element is found, return -1.\n\
    If no such element is found, return -1.\nIf no such element is found, return -1.\n\
    If no such element is found, return -1.\nIf no such element is found, return -1.\n\
    If no such element is found, return -1.\nIf no such element is found, return -1.\n\
    If no such element is found, return -1.\nIf no such element is found, return -1.\n\
    If no such element is found, return -1.\nIf no such element is found, return -1.\n\
    If no such element is found, return -1.\nIf no such element is found, return -1.\n\
    If no such element is found, return -1.\nIf no such element is found, return -1.\n\
    If no such element is found, return -1.\nIf no such element is found, return -1.\n\
    If no such element is found, return -1.\nIf no such element is found, return -1.\n\
    If no such element is found, return -1.\nIf no such element is found, return -1.\n\
    If no such element is found, return -1.\nIf no such element is found, return -1.\n\
    If no such element is found, return -1.\nIf no such element is found, return -1.\n\
    If no such element is found, return -1.\nIf no such element is found, return -1.\n\
    If no such element is found, return -1.\nIf no such element is found, return -1.\n\
    If no such element is found, return -1.\nIf no such element is found, return -1.\n\
    If no such element is found, return -1.\nIf no such element is found, return -1.\n\
    If no such element is found, return -1.\nIf no such element is found, return -1.\n\
    If no such element is found, return -1.\nIf no such element is found, return -1.\n\
    If no such element is found, return -1.\nIf no such element is found, return -1.\n\
    If no such element is found, return -1.\nIf no such element is found, return -1.\n\
    If no such element is found, return -1.\nIf no such element is found, return -1.\n\
    If no such element is found, return -1.\nIf no such element is found, return -1.\n\
    If no such element is found, return -1.\nIf no such element is found, return -1.\n\
    If no such element is found, return -1.\nIf no such element is found, return -1.\n\
    If no such element is found, return -1.\nIf no such element is found, return \n\
    using Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdq30v4d0.jl:18\nin expression starting at\
    \ /tmp/tmpdq30v4d0.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        None \n    else \n        lst[findmin(lst)[2]]\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t\
    @test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp67evf53i.jl:23\n  Expression: candidate([1,\
    \ 2, 3, 4, 5]) == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp67evf53i.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp67evf53i.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp67evf53i.jl:24\n  Expression: candidate([5, 1, 4, 3, 2]) ==\
    \ 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp67evf53i.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp67evf53i.jl:22\ntest set: Error\
    \ During Test at /tmp/tmp67evf53i.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == nothing\n  UndefVarError: None not defined\n\
    \  Stacktrace:\n   [1] next_smallest(lst::Vector{Int64})\n     @ Main /tmp/tmp67evf53i.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp67evf53i.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp67evf53i.jl:22\ntest set:\
    \ Test Failed at /tmp/tmp67evf53i.jl:26\n  Expression: candidate([1, 1]) == nothing\n\
    \   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp67evf53i.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp67evf53i.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp67evf53i.jl:27\n  Expression: candidate([1, 1, 1, 1, "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp67evf53i.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return None \n    else \n     \
    \   smallest = lst[1] \n        for ele in lst[2:end] \n            if ele < smallest\
    \ \n                smallest = ele \n            end \n        end \n        return\
    \ smallest \n    end \nend \n</cell>\n<code language=julia-1.3>\nnext_smallest([1,\
    \ 2, 3, 4, 5])\n</cell>\n<code language=julia-1.3>\nnext_smallest([5, 1, 4, 3,\
    \ 2])\n</cell>\n<code language=julia-1.3>\nnext_smallest([])\n</cell>\n<code language=julia-1.3>\n\
    next_smallest([1, 1])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of elements in a list that satisfy a predicate.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\
    \t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpiv7a5jo4.jl:24\nin expression starting at\
    \ /tmp/tmpiv7a5jo4.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return nothing\n    else if length(lst)\
    \ == 1 \n        return lst[1]\n    else \n        smallest = lst[1]\n       \
    \ for i in 2:length(lst) \n            if lst[i] < smallest \n               \
    \ smallest = lst[i]\n            end\n        end\n        return smallest\n \
    \   end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8byqxquv.jl:14\nin expression starting at\
    \ /tmp/tmp8byqxquv.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing\n    else if length(lst)\
    \ == 1 \n        return lst[1]\n    else \n        smallest = lst[1]\n       \
    \ for i in 2:length(lst) \n            if lst[i] < smallest \n               \
    \ smallest = lst[i]\n            end\n        end\n        return smallest\n \
    \   end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that returns the index\
    \ of the first element of a list that satisfies a predicate.\nFor example, suppose\
    \ that you are given the list [5, 3, 7, 4, 2, 6] and you want to find the first\
    \ element in the list that satisfies $x \\in {1, 2, 3}$. Your function should\
    \ return 4.\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplfs68_k7.jl:14\nin expression starting at\
    \ /tmp/tmplfs68_k7.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing\n    \n    smallest\
    \ = lst[1]\n    \n    for i in 2:length(lst)\n        if lst[i] < smallest \n\
    \            smallest = lst[i]\n        end\n    end\n    \n    return smallest\n\
    end\n</cell>\n<code language=julia-1.5>\nnext_smallest([1, 2, 3, 4, 5])\n</cell>\n\
    <code language=julia-1.5>\nnext_smallest([5, 1, 4, 3, 2])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([])\n</cell>\n<code language=julia-1.5>\nnext_smallest([1, 1])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of elements\
    \ in a list that satisfy a predicate.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpry9gvl05.jl:25\nin expression starting at\
    \ /tmp/tmpry9gvl05.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing\n    end\n    \n\
    \    smallest = minimum(lst)\n    \n    if smallest == lst[1] \n        return\
    \ smallest\n    end\n    \n    i = 2\n    while i < length(lst) \n        if lst[i]\
    \ < smallest \n            smallest = lst[i]\n        elseif lst[i] > smallest\
    \ \n            break\n        end\n        i = i + 1\n    end\n    \n    return\
    \ smallest\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6nlrpy0f.jl:34\nin expression starting at\
    \ /tmp/tmp6nlrpy0f.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return None \n    else \n     \
    \   smallest = lst[1] \n        for elt in lst[2:end] \n            if elt < smallest\
    \ \n                smallest = elt \n            end \n        end \n        return\
    \ smallest \n    end \nend \n</cell>\n<code language=julia-1.4>\nusing Test\n\n\
    @testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5])\
    \ == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxjseog4l.jl:24\nin expression starting at\
    \ /tmp/tmpxjseog4l.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing\n    \n    smallest\
    \ = lst[1]\n    \n    for x in lst[2:end]\n        if x < smallest\n         \
    \   smallest = x\n        end\n    end\n    \n    return smallest\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz_y9cdsn.jl:25\nin expression starting at\
    \ /tmp/tmpz_y9cdsn.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return None \n    else \n     \
    \   smallest = lst[1] \n        lst[1] = lst[end] \n        lst[end] = smallest\
    \ \n        return smallest \nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4,\
    \ 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsmkee726.jl:20\nin expression starting at\
    \ /tmp/tmpsmkee726.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        Nothing\n    elseif length(lst)\
    \ == 1 \n        lst[1]\n    else\n        smallest = lst[1]\n        for i in\
    \ 2:length(lst)\n            if lst[i] < smallest \n                smallest =\
    \ lst[i]\n            end\n        end\n        smallest\n    end\nend\n</cell>\n\
    <text>\nExercise 4\nWrite a function that returns the index of the first element\
    \ of a list that satisfies a given condition. \nFor example, \nindex([1,3,5,7,9],\
    \ x->x>5) == 4\nindex([1,3,5,7,9], x->x==5) == None\nindex([1,3,5,7,9], x->x<5)\
    \ == None\nindex([1,3,5,7,9], x->x>5 and x<10) == None\nindex([1,3,5,7,9], x->x>10\
    \ and x<15) == None\nindex([1,3,5,7,9], x->x>15 and x<20) == None\nindex([1,3,5,7,9],\
    \ x->x>20 and x<25) == None\nindex([1,3,5,7,9], x->x>25 and x<30) == None\nindex([1,3,5,7,9],\
    \ x->x>30 and x<35) == None\nindex([1,3,5,7,9], x->x>35 and x<40) == None\nindex([1,3,5,7,9],\
    \ x->x>40 and x<45) == None\nindex([1,3,5,7,9], x->x>45 and x<50) == None\nindex([1,3,5,7,9],\
    \ x->x>50 and x<55) == None\nindex([1,3,5,7,9], x->x>55 and x<60) == None\nindex([1,3,5,7,9],\
    \ x->x>60 and x<65) == None\nindex([1,3,5,7,9], x->x>65 and x<70) == None\nindex([1,3,5,7,9],\
    \ x->x>70 and x<75) == None\nindex([1,3,5,7,9], x->x>75 and x<80) == None\nindex([1,3,5,7,9],\
    \ x->x>80 and x<85) == None\nindex([1,3,5,7,9], x->x>85 and x<90) == None\nindex([1,3,5,7,9],\
    \ x->x>90 and x<95) == None\nindex([1,3,5,7,9], x->x>95 and x\nusing Test\n\n\
    @testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5])\
    \ == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5hq16nmq.jl:26\nin expression starting at\
    \ /tmp/tmp5hq16nmq.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return None \n    else \n     \
    \   return lst[1] \nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\
    \t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7f8on9k_.jl:17\nin expression starting at\
    \ /tmp/tmp7f8on9k_.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        None \n    else \n        lst[1]\
    \ \n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpbrarbdid.jl:23\n  Expression: candidate([1,\
    \ 2, 3, 4, 5]) == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbrarbdid.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbrarbdid.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpbrarbdid.jl:24\n  Expression: candidate([5, 1, 4, 3, 2]) ==\
    \ 2\n   Evaluated: 5 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbrarbdid.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbrarbdid.jl:22\ntest set: Error\
    \ During Test at /tmp/tmpbrarbdid.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == nothing\n  UndefVarError: None not defined\n\
    \  Stacktrace:\n   [1] next_smallest(lst::Vector{Int64})\n     @ Main /tmp/tmpbrarbdid.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbrarbdid.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbrarbdid.jl:22\ntest set:\
    \ Test Failed at /tmp/tmpbrarbdid.jl:26\n  Expression: candidate([1, 1]) == nothing\n\
    \   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbrarbdid.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbrarbdid.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpbrarbdid.jl:28\n  Expression: candidate([1, 1]) == no"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbrarbdid.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return None \n    else \n     \
    \   smallest = lst[1] \n        for e in lst[2:end] \n            if e < smallest\
    \ \n                smallest = e \n            end \n        end \n        return\
    \ smallest \n    end \nend \nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpm2pkqt2n.jl:29\n  Expression: candidate([1,\
    \ 2, 3, 4, 5]) == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpm2pkqt2n.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpm2pkqt2n.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpm2pkqt2n.jl:30\n  Expression: candidate([5, 1, 4, 3, 2]) ==\
    \ 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpm2pkqt2n.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpm2pkqt2n.jl:28\ntest set: Error\
    \ During Test at /tmp/tmpm2pkqt2n.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == nothing\n  UndefVarError: None not defined\n\
    \  Stacktrace:\n   [1] next_smallest(lst::Vector{Int64})\n     @ Main /tmp/tmpm2pkqt2n.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpm2pkqt2n.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpm2pkqt2n.jl:28\ntest set:\
    \ Test Failed at /tmp/tmpm2pkqt2n.jl:32\n  Expression: candidate([1, 1]) == nothing\n\
    \   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpm2pkqt2n.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpm2pkqt2n.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpm2pkqt2n.jl:33\n  Expression: candidate([1, 1, 1, 1, "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpm2pkqt2n.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing\n    \n    smallest\
    \ = lst[1]\n    \n    for i in 2:length(lst)\n        if lst[i] < smallest \n\
    \            smallest = lst[i]\n        end\n    end\n    \n    return smallest\n\
    end\n</cell>\n<code language=julia-1.5>\nnext_smallest([1, 2, 3, 4, 5])\n</cell>\n\
    <code language=julia-1.5>\nnext_smallest([5, 1, 4, 3, 2])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([])\n</cell>\n<code language=julia-1.5>\nnext_smallest([1, 1])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of elements\
    \ in the list that are less than the given value.\nusing Test\n\n@testset begin\n\
    \ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0b3cnku3.jl:25\nin expression starting at\
    \ /tmp/tmp0b3cnku3.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        None \n    else \n        lst[findmin(lst)[2]]\
    \ \n    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_uenb3_g.jl:18\nin expression starting at\
    \ /tmp/tmp_uenb3_g.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing\n    end\n    \n\
    \    smallest = lst[1]\n    \n    for i in 2:length(lst)\n        if lst[i] <\
    \ smallest \n            smallest = lst[i]\n        end\n    end\n    \n    return\
    \ smallest\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzvj1346x.jl:26\nin expression starting at\
    \ /tmp/tmpzvj1346x.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return None \n    else \n     \
    \   smallest = lst[1] \n        for i in 2:length(lst) \n            if lst[i]\
    \ < smallest \n                smallest = lst[i] \n            end \n        end\
    \ \n        return smallest \n    end \nend \n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpht0yele5.jl:24\nin expression starting at\
    \ /tmp/tmpht0yele5.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return nothing\n    \n    smallest\
    \ = lst[1]\n    \n    for i in lst[2:end]\n        if i < smallest\n         \
    \   smallest = i\n        end\n    end\n    \n    return smallest\nend\n</cell>\n\
    <code language=julia-1.5>\nnext_smallest([1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([5, 1, 4, 3, 2])\n</cell>\n<code language=julia-1.5>\nnext_smallest([])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1, 1])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function next_largest() that returns the 2nd largest element of the\
    \ list.\nReturn None if there is no such element.\nusing Test\n\n@testset begin\n\
    \ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc7fhm1ny.jl:25\nin expression starting at\
    \ /tmp/tmpc7fhm1ny.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return nothing\n    end\n    \n\
    \    smallest = lst[1]\n    \n    for el in lst[2:end]\n        if el < smallest\
    \ \n            smallest = el\n        end\n    end\n    \n    return smallest\n\
    end\n</cell>\n<code language=julia-1.5>\nnext_smallest([5, 1, 4, 3, 2])\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the 3rd smallest element of\
    \ the list.\nReturn None if there is no such element.\nThe function should work\
    \ for lists of any length.\nThe function should work for empty lists.\nThe function\
    \ should work for lists of length 1.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7q2ir17v.jl:26\nin expression starting at\
    \ /tmp/tmp7q2ir17v.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing\n    \n    smallest\
    \ = lst[1]\n    \n    for ele in lst[2:end]\n        if ele < smallest \n    \
    \        smallest = ele\n        end\n    end\n    \n    return smallest\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppj2nlelq.jl:25\nin expression starting at\
    \ /tmp/tmppj2nlelq.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing\n    \n    smallest\
    \ = lst[1]\n    \n    for x in lst[2:end]\n        if x < smallest\n         \
    \   smallest = x\n        end\n    end\n    \n    return smallest\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_jx1itx3.jl:25\nin expression starting at\
    \ /tmp/tmp_jx1itx3.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return nothing\n    else if length(lst)\
    \ == 1 \n        return lst[1]\n    else \n        smallest = lst[1]\n       \
    \ lst = lst[2:end]\n        for i in lst\n            if i < smallest\n      \
    \          smallest = i\n            end\n        end\n        return smallest\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl5h23hqp.jl:14\nin expression starting at\
    \ /tmp/tmpl5h23hqp.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing \n    else \n  \
    \      smallest = lst[1] \n        for e in lst[2:end] \n            if e < smallest\
    \ \n                smallest = e \n            end \n        end \n        return\
    \ smallest \n    end \nend \n</cell>\n<code language=julia-1.3>\nusing Test\n\n\
    @testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5])\
    \ == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpve44l63s.jl:24\nin expression starting at\
    \ /tmp/tmpve44l63s.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing\n    \n    smallest\
    \ = lst[1]\n    \n    for x in lst[2:end]\n        if x < smallest\n         \
    \   smallest = x\n        end\n    end\n    \n    return smallest\nend\n</cell>\n\
    <code language=julia-1.5>\nnext_smallest([1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([5, 1, 4, 3, 2])\n</cell>\n<code language=julia-1.5>\nnext_smallest([])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1, 1])\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphzmctzch.jl:25\nin expression starting at\
    \ /tmp/tmphzmctzch.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return nothing\n    \n    smallest\
    \ = lst[1]\n    \n    for x in lst[2:end]\n        if x < smallest\n         \
    \   smallest = x\n        end\n    end\n    \n    return smallest\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps_tn397o.jl:25\nin expression starting at\
    \ /tmp/tmps_tn397o.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        error(\"The list is empty\") \n\
    \    else \n        lst[1] \n    end\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns the 3rd smallest element of a list.\nReturn None if\
    \ the list is empty.\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6aukscbq.jl:18\nin expression starting at\
    \ /tmp/tmp6aukscbq.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return None \n    else \n     \
    \   smallest = lst[1] \n        lst = lst[2:end] \n        return smallest \n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3xmic8i8.jl:19\nin expression starting at\
    \ /tmp/tmp3xmic8i8.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return Nothing\n    \n    smallest\
    \ = lst[1]\n    \n    for x in lst[2:end]\n        if x < smallest\n         \
    \   smallest = x\n        end\n    end\n    \n    return smallest\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9l0khzp3.jl:25\nin expression starting at\
    \ /tmp/tmp9l0khzp3.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return nothing\n    \n    smallest\
    \ = lst[1]\n    \n    for el in lst[2:end]\n        if el < smallest \n      \
    \      smallest = el\n        end\n    end\n    \n    return smallest\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk1ey6eqg.jl:25\nin expression starting at\
    \ /tmp/tmpk1ey6eqg.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0 \n        return None \n    else \n     \
    \   smallest = lst[1] \n        for i in 2:length(lst) \n            if lst[i]\
    \ < smallest \n                smallest = lst[i] \n            end \n        end\
    \ \n        return smallest \n    end \nend \n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nnext_smallest([5,\
    \ 1, 4, 3, 2])\n</cell>\n<code language=julia-1.5>\nnext_smallest([])\n</cell>\n\
    <code language=julia-1.5>\nnext_smallest([1, 1])\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns the index of the element in the list that is closest\
    \ to zero.\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppne2xefq.jl:24\nin expression starting at\
    \ /tmp/tmppne2xefq.jl:24\n"
  exit_code: 1
  status: SyntaxError
