name: HumanEval_88_sort_array
language: julia
results:
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    array = copy(array)\n    sum = 0\n    for i in array\n        sum += i\n\
    \    end\n    if sum % 2 == 1\n        sort(array)\n    else\n        sort(reverse,\
    \ array)\n    end\n    return array\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnz0stfop.jl:28\nin expression starting at\
    \ /tmp/tmpnz0stfop.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    \n    if length(array) == 0 \n        return array\n    end\n    \n  \
    \  sum_array = sum(array)\n    if sum_array % 2 == 0 \n        sort_array = array\n\
    \    else\n        sort_array = reverse(array)\n    end\n    \n    sort_array\
    \ = sort_array[1:end-1]\n    \n    return sort_array\nend\n</cell>\n<code language=julia-1.5>\n\
    sort_array([])\n</cell>\n<code language=julia-1.5>\nsort_array([5])\n</cell>\n\
    <code language=julia-1.5>\nsort_array([2, 4, 3, 0, 1, 5])\n</cell>\n<code language=julia-1.5>\n\
    sort_array([2, 4, 3, 0, 1, 5, 6])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the sum of the first n positive integers, where n is given as an\
    \ input argument.\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t\
    @test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5])\
    \ == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1,\
    \ 2])\n\t@test(candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\
    \t@test(candidate([21, 14, 23, 11]) == [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5utgypl4.jl:32\nin expression starting at\
    \ /tmp/tmp5utgypl4.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    \n    array = copy(array)\n    \n    if sum(array) % 2 == 1\n        array\
    \ = reverse(array)\n    end\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5])\
    \ == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1,\
    \ 2])\n\t@test(candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\
    \t@test(candidate([21, 14, 23, 11]) == [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpbo92inen.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpbo92inen.jl:1\n\
    in expression starting at /tmp/tmpbo92inen.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    if length(array) == 0 \n        return array \n    end\n    \n    sum\
    \ = 0\n    for i in 1:length(array) \n        sum += array[i]\n    end\n    \n\
    \    if sum % 2 != 0 \n        sorted = reverse(array) \n    else\n        sorted\
    \ = array \n    end\n    \n    return sorted \nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptd9g09ob.jl:33\nin expression starting at\
    \ /tmp/tmptd9g09ob.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    if length(array) == 0 \n        return array\n    end\n    \n    sum =\
    \ 0\n    for x in array\n        sum += x\n    end\n    \n    if sum % 2 != 0\n\
    \        sorted = sort_array(array[1:end-1]) \n        push!(sorted, array[1])\n\
    \        push!(sorted, array[end])\n        return sorted\n    else\n        sorted\
    \ = sort_array(array[2:end]) \n        push!(sorted, array[1])\n        push!(sorted,\
    \ array[end])\n        return sorted\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5]) == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1,\
    \ 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15, 42, 87, 32,\
    \ 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14, 23, 11]) ==\
    \ [23, 21, 14, 11])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpdp_n7oz9.jl:43\n  Expression: candidate([5])\
    \ == [5]\n   Evaluated: [5, 5] == [5]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpdp_n7oz9.jl:43 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdp_n7oz9.jl:41\ntest set: Test\
    \ Failed at /tmp/tmpdp_n7oz9.jl:44\n  Expression: candidate([2, 4, 3, 0, 1, 5])\
    \ == [0, 1, 2, 3, 4, 5]\n   Evaluated: [0, 0, 0, 1, 3, 1, 4, 1, 2, 1, 2, 5] ==\
    \ [0, 1, 2, 3, 4, 5]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdp_n7oz9.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdp_n7oz9.jl:41\ntest set: Test\
    \ Failed at /tmp/tmpdp_n7oz9.jl:45\n  Expression: candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0]\n   Evaluated: [0, 0, 0, 1, 3, 1, 4, 1, 2, 1, 2,\
    \ 5, 2, 6] == [6, 5, 4, 3, 2, 1, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdp_n7oz9.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdp_n7oz9.jl:41\ntest set: Test\
    \ Failed at /tmp/tmpdp_n7oz9.jl:46\n  Expression: candidate([2, 1]) == [1, 2]\n\
    \   Evaluated: [2, 2, 2, 1] == [1, 2]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpdp_n7oz9.jl:46 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdp_n7oz9.jl:41\ntest set: Test\
    \ Failed at /tmp/tmpdp_n7oz9.jl:47\n  Expression: ca"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdp_n7oz9.jl:39\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    array = sort(array)\n    if sum(array) % 2 != 0\n        array = reverse(array)\n\
    \    end\n    return array\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpss53fhrn.jl:22\nin expression starting at\
    \ /tmp/tmpss53fhrn.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    if sum(array) % 2 == 0 \n        array = sort_array(reverse(array))\n\
    \    end\n    return array\nend\n</cell>\n<code language=julia-1.0>\nsort_array([])\n\
    </cell>\n<code language=julia-1.0>\nsort_array([5])\n</cell>\n<code language=julia-1.0>\n\
    sort_array([2, 4, 3, 0, 1, 5])\n</cell>\n<code language=julia-1.0>\nsort_array([2,\
    \ 4, 3, 0, 1, 5, 6])\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ an array of non-negative integers and returns the sum of the first and last\
    \ elements.\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb_sxqqf4.jl:21\nin expression starting at\
    \ /tmp/tmpb_sxqqf4.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    if length(array) == 0 \n        return array \n    end\n    \n    sum\
    \ = 0\n    for i in 1:length(array) \n        sum += array[i]\n    end\n    \n\
    \    if sum % 2 == 1 \n        array = reverse(array) \n    end\n    \n    return\
    \ array\nend\n</cell>\n<code language=julia-1.5>\n# test your code\n@assert sort_array([])\
    \ == []\n@assert sort_array([5]) == [5]\n@assert sort_array([2, 4, 3, 0, 1, 5])\
    \ == [0, 1, 2, 3, 4, 5]\n@assert sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4,\
    \ 3, 2, 1, 0]\n</cell>\n<text>\n4.5 Find Median in Array\nGiven an array of non-negative\
    \ integers, find the median of the array.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sort_array;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([5]) == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1,\
    \ 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15, 42, 87, 32,\
    \ 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14, 23, 11]) ==\
    \ [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp96l1hoz.jl:31\nin expression starting at\
    \ /tmp/tmpp96l1hoz.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    if length(array) == 0 \n        return array \n    end\n    \n    sum\
    \ = 0\n    for i in 1:length(array) \n        sum += array[i]\n    end\n    \n\
    \    if sum % 2 != 0 \n        array = reverse(array) \n    end\n    \n    return\
    \ array\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5]) == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1,\
    \ 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15, 42, 87, 32,\
    \ 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14, 23, 11]) ==\
    \ [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp660raqdl.jl:31\nin expression starting at\
    \ /tmp/tmp660raqdl.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    \n    array = copy(array)\n    \n    if sum(array) % 2 != 0\n        array\
    \ = sort_array_desc(array)\n    else\n        array = sort_array_asc(array)\n\
    \    end\n    \n    return array\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sort_array;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([5]) == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1,\
    \ 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15, 42, 87, 32,\
    \ 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14, 23, 11]) ==\
    \ [23, 21, 14, 11])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpa7n4yb4k.jl:32\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  UndefVarError:\
    \ sort_array_asc not defined\n  Stacktrace:\n   [1] sort_array(array::Vector{Int64})\n\
    \     @ Main /tmp/tmpa7n4yb4k.jl:22\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpa7n4yb4k.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpa7n4yb4k.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpa7n4yb4k.jl:33\n  Test threw exception\n  Expression:\
    \ candidate([5]) == [5]\n  UndefVarError: sort_array_desc not defined\n  Stacktrace:\n\
    \   [1] sort_array(array::Vector{Int64})\n     @ Main /tmp/tmpa7n4yb4k.jl:20\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpa7n4yb4k.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpa7n4yb4k.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpa7n4yb4k.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n  UndefVarError: sort_array_desc\
    \ not defined\n  Stacktrace:\n   [1] sort_array(array::Vector{Int64})\n     @\
    \ Main /tmp/tmpa7n4yb4k.jl:20\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpa7n4yb4k.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpa7n4yb4k.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpa7n4yb4k.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n  UndefVarError:\
    \ sort_array_desc not defined\n  Stacktrace:\n   [1] sort_a"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpa7n4yb4k.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    if length(array) == 0 \n        return array \n    \n    sum = 0\n   \
    \ for i in array\n        sum += i\n    end\n    \n    if sum % 2 != 0\n     \
    \   array = reverse(array)\n    end\n    \n    return array\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5])\
    \ == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1,\
    \ 2])\n\t@test(candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\
    \t@test(candidate([21, 14, 23, 11]) == [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdrrao06s.jl:30\nin expression starting at\
    \ /tmp/tmpdrrao06s.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    array = sort(array)\n    if sum(array) % 2 == 1\n        array = reverse(array)\n\
    \    end\n    return array\nend\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5])\
    \ == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1,\
    \ 2])\n\t@test(candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\
    \t@test(candidate([21, 14, 23, 11]) == [23, 21, 14, 11])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1nldeqpp.jl:29\n  Expression: candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n   Evaluated: [5, 4, 3, 2, 1, 0] == [0,\
    \ 1, 2, 3, 4, 5]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1nldeqpp.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1nldeqpp.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp1nldeqpp.jl:31\n  Expression: candidate([2, 1]) == [1, 2]\n\
    \   Evaluated: [2, 1] == [1, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1nldeqpp.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1nldeqpp.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp1nldeqpp.jl:32\n  Expression: candidate([15, 42, 87, 32, 11,\
    \ 0]) == [0, 11, 15, 32, 42, 87]\n   Evaluated: [87, 42, 32, 15, 11, 0] == [0,\
    \ 11, 15, 32, 42, 87]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1nldeqpp.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1nldeqpp.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1nldeqpp.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    if length(array) == 0 \n        return array \n    \n    sum = 0\n   \
    \ for i in array\n        sum += i\n    end\n    \n    if sum % 2 != 0 \n    \
    \    array = reverse(array) \n    end\n    \n    array = sort(array) \n    \n\
    \    return array\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5]) == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1,\
    \ 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15, 42, 87, 32,\
    \ 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14, 23, 11]) ==\
    \ [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcm79nr14.jl:32\nin expression starting at\
    \ /tmp/tmpcm79nr14.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    \n    if length(array) == 0 \n        return array\n    end\n    \n  \
    \  sum = 0\n    for element in array\n        sum += element\n    end\n    \n\
    \    if sum % 2 == 1 \n        array = reverse(array)\n    end\n    \n    return\
    \ array\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5]) == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1,\
    \ 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15, 42, 87, 32,\
    \ 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14, 23, 11]) ==\
    \ [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5bfxng03.jl:32\nin expression starting at\
    \ /tmp/tmp5bfxng03.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    if length(array) == 0 \n        return array \n    end\n    \n    sum\
    \ = 0\n    for i in 1:length(array) \n        sum += array[i]\n    end\n    \n\
    \    if sum % 2 != 0 \n        array = reverse(array)\n    end\n    \n    return\
    \ array\nend\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpenerb6w4.jl:38\n  Expression: candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n   Evaluated: [5, 1, 0, 3, 4, 2] == [0,\
    \ 1, 2, 3, 4, 5]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpenerb6w4.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpenerb6w4.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpenerb6w4.jl:39\n  Expression: candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0]\n   Evaluated: [6, 5, 1, 0, 3, 4, 2] == [6, 5,\
    \ 4, 3, 2, 1, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpenerb6w4.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpenerb6w4.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpenerb6w4.jl:41\n  Expression: candidate([15, 42, 87, 32, 11,\
    \ 0]) == [0, 11, 15, 32, 42, 87]\n   Evaluated: [0, 11, 32, 87, 42, 15] == [0,\
    \ 11, 15, 32, 42, 87]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpenerb6w4.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpenerb6w4.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpenerb6w4.jl:42\n  Expression: candidate([21, 14, 23, 11])\
    \ == [23, 21, 14, 11]\n   Evaluated: [11, 23, 14, 21] == [23, 21, 14, 11]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpenerb6w4.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpenerb6w"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpenerb6w4.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    if length(array) == 0 \n        return array \n    else \n        sum1\
    \ = sum(array) \n        sum2 = sum( array[end-1:end] ) \n        if sum1 % 2\
    \ == 0 \n            return array\n        else \n            return array.reverse()\
    \ \n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t\
    @test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5])\
    \ == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1,\
    \ 2])\n\t@test(candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\
    \t@test(candidate([21, 14, 23, 11]) == [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp47nxzq1w.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp47nxzq1w.jl:1\n\
    in expression starting at /tmp/tmp47nxzq1w.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    array = copy(array)\n    sort_array(array)\n    return array\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    \n    if length(array) == 0 \n        return array\n    end\nusing Test\n\
    \n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp4hy10fnf.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4hy10fnf.jl:1\n\
    in expression starting at /tmp/tmp4hy10fnf.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    if length(array) == 0 \n        return array\n    end\n    \n    sum =\
    \ 0\n    for i in array\n        sum += i\n    end\n    \n    if sum % 2 == 1\n\
    \        sorted = sort_array(array[1:end-1]) \n        return vcat(array, sorted)\n\
    \    else\n        sorted = sort_array(array[1:end-1]) \n        return vcat(sorted,\
    \ array)\n    end\nend\n</cell>\n<code language=julia-1.5>\n@test sort_array([])\
    \ == []\n@test sort_array([5]) == [5]\n@test sort_array([2, 4, 3, 0, 1, 5]) ==\
    \ [0, 1, 2, 3, 4, 5]\n@test sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3,\
    \ 2, 1, 0]\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number\
    \ of times a given value appears in the given array.\nusing Test\n\n@testset begin\n\
    \ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5]) == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1,\
    \ 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15, 42, 87, 32,\
    \ 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14, 23, 11]) ==\
    \ [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbflnbyhs.jl:33\nin expression starting at\
    \ /tmp/tmpbflnbyhs.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    if length(array) == 0 \n        return array \n    \n    sum = 0\n   \
    \ for i in array\n        sum += i\n    end\n    \n    if sum % 2 != 0\n     \
    \   array = reverse(array)\n    end\n    \n    return array\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsort_array([])\n</cell>\n<code language=julia-1.5>\nsort_array([5])\n\
    </cell>\n<code language=julia-1.5>\nsort_array([2, 4, 3, 0, 1, 5])\n</cell>\n\
    <code language=julia-1.5>\nsort_array([2, 4, 3, 0, 1, 5, 6])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the first element of an array\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb9xly95w.jl:30\nin expression starting at\
    \ /tmp/tmpb9xly95w.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    array = sort(array)\n    if sum(array) % 2 != 0\n        array = reverse(array)\n\
    \    end\n    return array\nend\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n\
    <code>\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi2rxo90w.jl:22\nin expression starting at\
    \ /tmp/tmpi2rxo90w.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    if length(array) == 0 \n        return array \n    \n    sum = 0\n   \
    \ for i in array\n        sum += i\n    end\n    \n    if sum % 2 == 1 \n    \
    \    push!(array,0)\n        push!(array,0)\n    end\n    \n    push!(array,0)\n\
    \    push!(array,0)\n    \n    sum = 0\n    for i in array\n        sum += i\n\
    \    end\n    \n    if sum % 2 == 0 \n        push!(array,0)\n        push!(array,0)\n\
    \    end\n    \n    push!(array,0)\n    push!(array,0)\n    \n    sum = 0\n  \
    \  for i in array\n        sum += i\n    end\n    \n    if sum % 2 == 1 \n   \
    \     push!(array,0)\n        push!(array,0)\n    end\n    \n    push!(array,0)\n\
    \    push!(array,0)\n    \n    sum = 0\n    for i in array\n        sum += i\n\
    \    end\n    \n    if sum % 2 == 0 \n        push!(array,0)\n        push!(array,0)\n\
    \    end\n    \n    push!(array,0)\n    push!(array,0)\n    \n    sum = 0\n  \
    \  for i in array\n        sum += i\n    end\n    \n    if sum % 2 == 1 \n   \
    \     push!(array,0)\n        push!(array,0)\n    end\n    \n    push!(array,0)\n\
    \    push!(array,0)\n    \n    sum = 0\n    for i in array\n        sum += i\n\
    \    end\n    \n    if sum % 2 == 0 \n        push!(array,0)\n        push!(array,0)\n\
    \    end\n    \n    push!(array,0)\n    push!(array,0)\n    \n    sum = 0\n  \
    \  for i in array\n        sum += i\n    end\n    \n    if sum % 2 == 1 \n   \
    \     push!(array,0)\n        push!(array,0)\n    end\n    \n    push!(array,0)\n\
    \    push!(array,0)\n    \n    sum = 0\n    for i in array\n        sum += i\n\
    \    end\n    \n    if sum % 2 == 0 \n        push!(array,0)\n        push!(array,0)\n\
    \    end\n    \n    push!(array,0)\n    push!(array,0)\n    \n    sum = 0\n  \
    \  for i in array\n        sum += i\n    end\n    \n    if sum % 2 == 1 \n   \
    \     push!(array,0)\n        push!(array,0)\n    end\n    \n    push!(array,0)\n\
    \    push!(array,0)\n    \n    sum = 0\n    for i in array\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5]) == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1,\
    \ 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15, 42, 87, 32,\
    \ 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14, 23, 11]) ==\
    \ [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpgvp5p75h.jl:137\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpgvp5p75h.jl:1\n\
    in expression starting at /tmp/tmpgvp5p75h.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    array = copy(array)\n    sort(array)\n    return array\nend\n</code>\n\
    <|/ a tags=sorting,arrays,julia |>\n<| c |>\nThis does not answer the question.\
    \ OP asked for descending order, but your solution sorts in ascending order.\n\
    <|/ c |>\n<| c |>\nThe question was \"how to sort an array in descending order\"\
    , not \"how to sort an array in ascending order\". Your solution sorts in ascending\
    \ order. Your code does not sort in descending order.\n<|/ c |>\n<| c |>\nThe\
    \ question was \"how to sort an array in descending order\", not \"how to sort\
    \ an array in ascending order\". Your solution sorts in ascending order. Your\
    \ code does not sort in descending order.\n<|/ c |>\n<| a dscore=3 |>\n<code>\n\
    using Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgqri52up.jl:20\nin expression starting at\
    \ /tmp/tmpgqri52up.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    if length(array) == 0 \n        return array \n    \n    sum_array = sum(array)\
    \ \n    \n    if sum_array % 2 == 1 \n        array = reverse(array) \n    \n\
    \    sum_array = sum(array) \n    \n    if sum_array % 2 == 0 \n        array\
    \ = reverse(array) \n    \n    return array \nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2jgitdvd.jl:31\nin expression starting at\
    \ /tmp/tmp2jgitdvd.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    if length(array) == 0 \n        return array \n    \n    sum = 0\n   \
    \ for i in array\n        sum += i\n    end\n    \n    if sum % 2 == 0 \n    \
    \    sorted = sort_array(array[2:end-1]) \n        sorted[end] = array[1]\n  \
    \      return sorted \n    else \n        sorted = sort_array(array[1:end-1])\
    \ \n        sorted[1] = array[end]\n        return sorted \n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert sort_array([]) == []\n@assert sort_array([5])\
    \ == [5]\n@assert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n@assert\
    \ sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the number of times the given element\
    \ appears in the given array.\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5])\
    \ == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1,\
    \ 2])\n\t@test(candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\
    \t@test(candidate([21, 14, 23, 11]) == [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphw0_vek2.jl:34\nin expression starting at\
    \ /tmp/tmphw0_vek2.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    if length(array) == 0 \n        return array \n    \n    sum = 0\n   \
    \ for x in array \n        sum += x \n    end\n    \n    if sum % 2 != 0 \n  \
    \      array = reverse(array) \n    end\n    \n    return array\nend\n</cell>\n\
    <code language=julia-1.5>\n@test sort_array([]) == []\n@test sort_array([5]) ==\
    \ [5]\n@test sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n@test sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the number of elements in a given array that satisfy\
    \ a given condition.\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5])\
    \ == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1,\
    \ 2])\n\t@test(candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\
    \t@test(candidate([21, 14, 23, 11]) == [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7msv2lji.jl:30\nin expression starting at\
    \ /tmp/tmp7msv2lji.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    if sum(array) == 0 \n        return array \n    else \n        odd = false\n\
    \        even = false\n        sum = 0\n        for i in array\n            sum\
    \ += i\n            if sum % 2 == 0\n                even = true\n           \
    \ else\n                odd = true\n            end\n        end\n        if odd\n\
    \            array = sort_odd_array(array)\n        elseif even\n            array\
    \ = sort_even_array(array)\n        else\n            array = sort_odd_array(array)\n\
    \            array = sort_even_array(array)\n        end\n        return array\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp01uc51tn.jl:46\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  UndefVarError:\
    \ sum not defined\n  Stacktrace:\n   [1] sort_array(array::Vector{Int64})\n  \
    \   @ Main /tmp/tmp01uc51tn.jl:16\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp01uc51tn.jl:46 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp01uc51tn.jl:45\ntest set:\
    \ Error During Test at /tmp/tmp01uc51tn.jl:47\n  Test threw exception\n  Expression:\
    \ candidate([5]) == [5]\n  UndefVarError: sum not defined\n  Stacktrace:\n   [1]\
    \ sort_array(array::Vector{Int64})\n     @ Main /tmp/tmp01uc51tn.jl:16\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp01uc51tn.jl:47 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp01uc51tn.jl:45\ntest set:\
    \ Error During Test at /tmp/tmp01uc51tn.jl:48\n  Test threw exception\n  Expression:\
    \ candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n  UndefVarError: sum not\
    \ defined\n  Stacktrace:\n   [1] sort_array(array::Vector{Int64})\n     @ Main\
    \ /tmp/tmp01uc51tn.jl:16\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp01uc51tn.jl:48 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp01uc51tn.jl:45\ntest set:\
    \ Error During Test at /tmp/tmp01uc51tn.jl:49\n  Test threw exception\n  Expression:\
    \ candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n  UndefVarError:\
    \ sum not defined\n  Stacktrace:\n   [1] sort_array(array::Vector{Int64})\n  \
    \   @ Main /tmp/tmp"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp01uc51tn.jl:43\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    array = copy(array)\n    sum = 0\n    for i in array\n        sum += i\n\
    \    end\n    if sum % 2 == 1\n        sort_array_desc(array)\n    else\n    \
    \    sort_array_asc(array)\n    end\n    return array\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5]) == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1,\
    \ 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15, 42, 87, 32,\
    \ 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14, 23, 11]) ==\
    \ [23, 21, 14, 11])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp3e1bv60_.jl:33\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  UndefVarError:\
    \ sort_array_asc not defined\n  Stacktrace:\n   [1] sort_array(array::Vector{Int64})\n\
    \     @ Main /tmp/tmp3e1bv60_.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3e1bv60_.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3e1bv60_.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp3e1bv60_.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([5]) == [5]\n  UndefVarError: sort_array_desc not defined\n  Stacktrace:\n\
    \   [1] sort_array(array::Vector{Int64})\n     @ Main /tmp/tmp3e1bv60_.jl:22\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3e1bv60_.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3e1bv60_.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp3e1bv60_.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n  UndefVarError: sort_array_desc\
    \ not defined\n  Stacktrace:\n   [1] sort_array(array::Vector{Int64})\n     @\
    \ Main /tmp/tmp3e1bv60_.jl:22\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3e1bv60_.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3e1bv60_.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp3e1bv60_.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n  UndefVarError:\
    \ sort_array_desc not defined\n  Stacktrace:\n   [1] sort_a"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3e1bv60_.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    sum = 0\n    for i in array\n        sum += i\n    end\n    if sum % 2\
    \ == 1\n        sort(array)\n    else\n        sort(array, reverse=true)\n   \
    \ end\n    return array\nend\n</code>\n<|/ a dscore=0 |>\n<| a tags=sorting,arrays,julia\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2orx6zxs.jl:27\nin expression starting at\
    \ /tmp/tmp2orx6zxs.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    sum = 0\n    for i in array\n        sum += i\n    end\n    if sum % 2\
    \ != 0\n        array = reverse(array)\n    end\n    return array\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5])\
    \ == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1,\
    \ 2])\n\t@test(candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\
    \t@test(candidate([21, 14, 23, 11]) == [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfnj7iprv.jl:25\nin expression starting at\
    \ /tmp/tmpfnj7iprv.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    if length(array) == 0 \n        return array \n    else \n        odd_sum\
    \ = sum(array[1:end-1]) \n        even_sum = sum(array[2:end]) \n        if odd_sum\
    \ % 2 == 1 \n            return array\n        else \n            return array.reverse\n\
    \    end\nend\n</cell>\n<text>\nQ: Given an array of non-negative integers, return\
    \ a copy of the given array after sorting,\n    you will sort the given array\
    \ in ascending order if the sum( first index value, last index value) is odd,\n\
    \    or sort it in descending order if the sum( first index value, last index\
    \ value) is even.\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t\
    @test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5])\
    \ == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1,\
    \ 2])\n\t@test(candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\
    \t@test(candidate([21, 14, 23, 11]) == [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprlsbmc7i.jl:27\nin expression starting at\
    \ /tmp/tmprlsbmc7i.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    if length(array) == 0 \n        return array \n    end\n    \n    sum\
    \ = 0\n    for i in 1:length(array) \n        sum += array[i]\n    end\n    \n\
    \    if sum % 2 == 1 \n        array = reverse(array)\n    end\n    \n    return\
    \ array\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5]) == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1,\
    \ 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15, 42, 87, 32,\
    \ 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14, 23, 11]) ==\
    \ [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0n59ja3b.jl:31\nin expression starting at\
    \ /tmp/tmp0n59ja3b.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    if length(array) == 0 \n        return array \n    else \n        sum1\
    \ = sum(array[1:end-1]) \n        sum2 = sum(array[2:end]) \n        if sum1 %\
    \ 2 == 1 \n            return array\n        else \n            return array.reverse\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5]) == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1,\
    \ 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15, 42, 87, 32,\
    \ 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14, 23, 11]) ==\
    \ [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpir1hmj7n.jl:27\nin expression starting at\
    \ /tmp/tmpir1hmj7n.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    \n    sum_array = sum(array)\n    if sum_array % 2 == 1\n        array\
    \ = sort_array(array[2:end])\n        array[1] = array[end] - array[1]\n    end\n\
    \    return array\nend\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5])\
    \ == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1,\
    \ 2])\n\t@test(candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\
    \t@test(candidate([21, 14, 23, 11]) == [23, 21, 14, 11])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp6xs_5yha.jl:30\n  Test threw exception\n\
    \  Expression: candidate([5]) == [5]\n  BoundsError: attempt to access 0-element\
    \ Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] sort_array(array::Vector{Int64})\n     @ Main /tmp/tmp6xs_5yha.jl:20\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp6xs_5yha.jl:30 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp6xs_5yha.jl:28\ntest set:\
    \ Test Failed at /tmp/tmp6xs_5yha.jl:31\n  Expression: candidate([2, 4, 3, 0,\
    \ 1, 5]) == [0, 1, 2, 3, 4, 5]\n   Evaluated: [5, 1, 5] == [0, 1, 2, 3, 4, 5]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6xs_5yha.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6xs_5yha.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp6xs_5yha.jl:32\n  Expression: candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0]\n   Evaluated: [6, 1, 5, 6] == [6, 5, 4, 3, 2,\
    \ 1, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6xs_5yha.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6xs_5yha.jl:28\ntest set: Error\
    \ During Test at /tmp/tmp6xs_5yha.jl:33\n  Test threw exception\n  Expression:\
    \ candidate([2, 1]) == [1, 2]\n  BoundsError: attempt to access 0-element Vector{Int64}\
    \ at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861 [inlined]\n\
    \   [2] sort_array(array::Vector{Int64})\n     @ Main /tmp/tmp6xs_5yha.jl:20\n\
    \   [3] sort_array(array::Vector{Int64})\n     @ Ma"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6xs_5yha.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    if length(array) == 0 \n        return array \n    else \n        sum1\
    \ = sum(array[1:end-1]) \n        sum2 = sum(array[end:]) \n        if sum1 %\
    \ 2 == 0 \n            return array[end-1:end] \n        else \n            return\
    \ array[end-1:end-1] \n    end\nend\n</code>\n<|/ a tags=sorting,arrays,julia\
    \ |>\n<| a tags=sorting,arrays,julia |>\n<code>\nusing Test\n\n@testset begin\n\
    \ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5]) == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1,\
    \ 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15, 42, 87, 32,\
    \ 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14, 23, 11]) ==\
    \ [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"end:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfk4nqfrd.jl:20\nin expression\
    \ starting at /tmp/tmpfk4nqfrd.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    if length(array) == 0 \n        return array \n    else \n        odd_sum\
    \ = sum(array[1:end-1]) \n        even_sum = sum(array[2:end]) \n        if odd_sum\
    \ % 2 == 1 \n            return array\n        else \n            return array.reverse\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@assert sort_array([]) == []\n\
    @assert sort_array([5]) == [5]\n@assert sort_array([2, 4, 3, 0, 1, 5]) == [0,\
    \ 1, 2, 3, 4, 5]\n@assert sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2,\
    \ 1, 0]\n</cell>\n<text>\n3.4 Sort an array in descending order\nusing Test\n\n\
    @testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphevwib16.jl:27\nin expression starting at\
    \ /tmp/tmphevwib16.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    if length(array) == 0 \n        return array \n    else \n        odd_sum\
    \ = sum(array[1:end-1]) \n        even_sum = sum(array[2:end]) \n        if odd_sum\
    \ % 2 == 1 \n            return array\n        else \n            return array.reverse\n\
    \    end\nend\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\nI came up with a\
    \ solution using Julia's sort! and its optional argument to specify whether it\
    \ should sort ascending or descending (see the docs). \n<code>\nusing Test\n\n\
    @testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppifyw27u.jl:27\nin expression starting at\
    \ /tmp/tmppifyw27u.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    \n    if length(array) == 0 \n        return array\n    end\n    \n  \
    \  sum = 0\n    for i in 1:length(array) \n        sum += array[i]\n    end\n\
    \    \n    if sum % 2 != 0 \n        array = reverse(array)\n    end\n    \n \
    \   return array\nend\n</cell>\n<code language=julia-1.5>\nsort_array([2, 4, 3,\
    \ 0, 1, 5, 6])\n</cell>\n<text>\nExercise 3\nWrite a function that returns the\
    \ number of times a value appears in an array.\nusing Test\n\n@testset begin\n\
    \ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5]) == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1,\
    \ 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15, 42, 87, 32,\
    \ 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14, 23, 11]) ==\
    \ [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy79qdkwr.jl:32\nin expression starting at\
    \ /tmp/tmpy79qdkwr.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    \n    array = copy(array)\n    \n    sum = 0\n    for i in 1:length(array)\n\
    \        sum += array[i]\n    end\n    \n    if sum % 2 == 1\n        sort(array)\n\
    \    else\n        sort(array, by=(x->-abs(x)))\n    end\n    \n    return array\n\
    end\n</cell>\n<code language=julia-1.5>\n@test sort_array([]) == []\n@test sort_array([5])\
    \ == [5]\n@test sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n@test sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a vector and returns the number of unique elements in\
    \ the vector.\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6z3mat1t.jl:32\nin expression starting at\
    \ /tmp/tmp6z3mat1t.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    if length(array) == 0 \n        return array \n    else \n        odd_sum\
    \ = sum(array[1:end-1]) \n        even_sum = sum(array[2:end]) \n        if odd_sum\
    \ % 2 == 1 \n            return array\n        else \n            return array.reverse\n\
    \    end\nend\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5]) == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1,\
    \ 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15, 42, 87, 32,\
    \ 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14, 23, 11]) ==\
    \ [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpszb3lt1w.jl:27\nin expression starting at\
    \ /tmp/tmpszb3lt1w.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    if length(array) == 0 \n        return array \n    end\n    \n    sum_array\
    \ = sum(array)\n    if sum_array % 2 == 0 \n        sort_array = array\n    else\n\
    \        sort_array = reverse(array)\n    end\n    \n    sort_array = sort_array[sort_array\
    \ .!= 0]\n    \n    return sort_array\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp31txy1ju.jl:31\nin expression starting at\
    \ /tmp/tmp31txy1ju.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    array = sort(array)\n    if sum(array) % 2 != 0\n        array = reverse(array)\n\
    \    end\n    return array\nend\n</cell>\n<code language=julia-1.5>\nsort_array([2,\
    \ 4, 3, 0, 1, 5, 6])\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the first element of an array that satisfies a given condition. For example,\
    \ given an array [5, 7, 9, 10, 4, 3, 6], return 7 if the first element of the\
    \ array is greater than 5, and -1 otherwise.\nusing Test\n\n@testset begin\n\n\
    candidate = sort_array;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5]) == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1,\
    \ 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15, 42, 87, 32,\
    \ 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14, 23, 11]) ==\
    \ [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnnx1u9pl.jl:22\nin expression starting at\
    \ /tmp/tmpnnx1u9pl.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    if length(array) == 0 \n        return array\n    end\n    \n    sum =\
    \ 0\n    for i in 1:length(array)\n        sum += array[i]\n    end\n    \n  \
    \  if sum % 2 != 0\n        sorted = sort_array(reverse(array))\n        return\
    \ sorted + [sum]\n    else\n        sorted = sort_array(reverse(array))\n    \
    \    return sorted + [sum]\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert sort_array([]) == []\n@assert sort_array([5]) == [5]\n@assert sort_array([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n@assert sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0]\n</cell>\n<text>\n4.3 Sort an array in descending\
    \ order\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpaza564sj.jl:33\nin expression starting at\
    \ /tmp/tmpaza564sj.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    if length(array) == 0 \n        return array \n    \n    sum = 0\n   \
    \ for i in array\n        sum += i\n    end\n    \n    if sum % 2 != 0\n     \
    \   array = reverse( array )\n    end\n    \n    return array\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5])\
    \ == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1,\
    \ 2])\n\t@test(candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\
    \t@test(candidate([21, 14, 23, 11]) == [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppdqlpzpx.jl:30\nin expression starting at\
    \ /tmp/tmppdqlpzpx.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    if length(array) == 0 \n        return array \n    \n    sum = 0\n   \
    \ for i in array\n        sum += i\n    end\n    \n    if sum % 2 != 0\n     \
    \   push!(array, sum)\n        push!(array, 0)\n    end\n    \n    push!(array,\
    \ 0)\n    \n    push!(array, 0)\n    \n    push!(array, 0)\n    \n    push!(array,\
    \ 0)\n    \n    push!(array, 0)\n    \n    push!(array, 0)\n    \n    push!(array,\
    \ 0)\n    \n    push!(array, 0)\n    \n    push!(array, 0)\n    \n    push!(array,\
    \ 0)\n    \n    push!(array, 0)\n    \n    push!(array, 0)\n    \n    push!(array,\
    \ 0)\n    \n    push!(array, 0)\n    \n    push!(array, 0)\n    \n    push!(array,\
    \ 0)\n    \n    push!(array, 0)\n    \n    push!(array, 0)\n    \n    push!(array,\
    \ 0)\n    \n    push!(array, 0)\n    \n    push!(array, 0)\n    \n    push!(array,\
    \ 0)\n    \n    push!(array, 0)\n    \n    push!(array, 0)\n    \n    push!(array,\
    \ 0)\n    \n    push!(array, 0)\n    \n    push!(array, 0)\n    \n    push!(array,\
    \ 0)\n    \n    push!(array, 0)\n    \n    push!(array, 0)\n    \n    push!(array,\
    \ 0)\n    \n    push!(array, 0)\n    \n    push!(array, 0)\n    \n    push!(array,\
    \ 0)\n    \n    push!(array, 0)\n    \n    push!(array, 0)\n    \n    push!(array,\
    \ 0)\n    \n    push!(array, 0)\n    \n    push!(array, 0)\n    \n    push!(array,\
    \ 0)\n    \n    push!(array, 0)\n    \n    push!(array, 0)\n    \n    push!(array,\
    \ 0)\n    \n    push!(array, 0)\n    \n    push!(array, 0)\n    \n    push!(array,\
    \ 0)\n    \n    push!(array, 0)\n    \n    push!(array, 0)\n    \n    push!(array,\
    \ 0)\n    \n    push!(array, 0)\n    \n    push!(array, 0)\n    \n    push!(array,\
    \ 0)\n    \n    push!(array, 0)\n    \n    push!(array, 0)\n    \n    push!(array,\
    \ 0)\n    \n    push!(array, 0)\n    \n    push!(array, 0)\n    \n    push!(array,\
    \ 0)\n\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsw4u7wm2.jl:1\nin expression starting at /tmp/tmpsw4u7wm2.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    \n    array = copy(array)\n    \n    if length(array) == 0 \n        return\
    \ array\n    end\n    \n    sum = 0\n    for i in 1:length(array)\n        sum\
    \ += array[i]\n    end\n    \n    if sum % 2 != 0\n        sort_array(reverse(array))\n\
    \    else\n        sort_array(array)\n    end\n    \n    return array\nend\n</cell>\n\
    <code language=julia-1.5>\nsort_array([])\n</cell>\n<code language=julia-1.5>\n\
    sort_array([5])\n</cell>\n<code language=julia-1.5>\nsort_array([2, 4, 3, 0, 1,\
    \ 5])\n</cell>\n<code language=julia-1.5>\nsort_array([2, 4, 3, 0, 1, 5, 6])\n\
    </cell>\n<text>\nPart III: Binary Search\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sort_array;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([5]) == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1,\
    \ 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15, 42, 87, 32,\
    \ 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14, 23, 11]) ==\
    \ [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp02pg8_z2.jl:36\nin expression starting at\
    \ /tmp/tmp02pg8_z2.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    if length(array) == 0 \n        return array \n    \n    sum = 0\n   \
    \ for i in array\n        sum += i\n    end\n    \n    if sum % 2 != 0 \n    \
    \    array = reverse(array)\n    end\n    \n    return array\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5])\
    \ == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1,\
    \ 2])\n\t@test(candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\
    \t@test(candidate([21, 14, 23, 11]) == [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt_4u6tfm.jl:30\nin expression starting at\
    \ /tmp/tmpt_4u6tfm.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    \n    sum = 0\n    for i in array\n        sum += i\n    end\n    if sum\
    \ % 2 == 1\n        array.sort!\n    else\n        array.reverse!\n    end\n \
    \   \n    return array\nend\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5])\
    \ == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1,\
    \ 2])\n\t@test(candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\
    \t@test(candidate([21, 14, 23, 11]) == [23, 21, 14, 11])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp5zpcsa4k.jl:34\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  type Array\
    \ has no field reverse!\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42\
    \ [inlined]\n   [2] sort_array(array::Vector{Int64})\n     @ Main /tmp/tmp5zpcsa4k.jl:24\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp5zpcsa4k.jl:34 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp5zpcsa4k.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp5zpcsa4k.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([5]) == [5]\n  type Array has no field sort!\n  Stacktrace:\n   [1]\
    \ getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] sort_array(array::Vector{Int64})\n\
    \     @ Main /tmp/tmp5zpcsa4k.jl:22\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp5zpcsa4k.jl:35 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp5zpcsa4k.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp5zpcsa4k.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n  type Array has no field\
    \ sort!\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n  \
    \ [2] sort_array(array::Vector{Int64})\n     @ Main /tmp/tmp5zpcsa4k.jl:22\n \
    \  [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp5zpcsa4k.jl:36 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp5zpcsa4k.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp5zpcsa4k.jl:37\n  Test threw exception\n  Expression:\
    \ candidate([2, 4, 3"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5zpcsa4k.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    if length(array) == 0 \n        return array \n    else \n        odd_sum\
    \ = sum(array[1:end-1]) \n        even_sum = sum(array[2:end]) \n        if odd_sum\
    \ % 2 == 1 \n            return array\n        else \n            return array.reverse\n\
    \    end\nend\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nusing Test\n\
    \n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_rnq5r1r.jl:27\nin expression starting at\
    \ /tmp/tmp_rnq5r1r.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    if length(array) == 0 \n        return array \n    \n    sum_array = sum(array)\n\
    \    if sum_array % 2 == 1 \n        array = reverse(array) \n    end\nusing Test\n\
    \n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp98n4ajby.jl:1\nin expression starting at /tmp/tmp98n4ajby.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    if length(array) == 0 \n        return array \n    else \n        odd_sum\
    \ = sum(array[1:end-1]) \n        even_sum = sum(array[2:end]) \n        if odd_sum\
    \ % 2 == 0 \n            return array \n        else \n            return reverse(array)\
    \ \n    end\nend\n</code>\n<|/ a dscore=0 |>\n<| a tags=sorting,arrays,julia |>\n\
    <code>\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3abyxt78.jl:27\nin expression starting at\
    \ /tmp/tmp3abyxt78.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    if length(array) == 0 \n        return array \n    \n    sum = 0\n   \
    \ for i in array\n        sum += i\n    end\n    \n    if sum % 2 != 0\n     \
    \   push!(array, sum)\n        push!(array, -sum)\n    end\n    \n    array =\
    \ sort(array)\n    \n    return array\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sort_array;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([5]) == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1,\
    \ 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15, 42, 87, 32,\
    \ 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14, 23, 11]) ==\
    \ [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp90sk7_rd.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp90sk7_rd.jl:1\n\
    in expression starting at /tmp/tmp90sk7_rd.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    if sum(array) == 0 \n        return array \n    else \n        odd = sum(array)\
    \ mod 2 \n        if odd \n            array = reverse(array) \n        end \n\
    \        even = sum(array) div 2 \n        if even \n            array = reverse(array)\
    \ \n        end \n        array = sort(array) \n        if odd \n            array\
    \ = reverse(array) \n        end \n        return array \n    end \nend \n</cell>\n\
    <code language=julia-1.5>\n@assert sort_array([]) == [] \n@assert sort_array([5])\
    \ == [5] \n@assert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5] \n@assert\
    \ sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0] \n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a vector of integers and returns the sum\
    \ of the integers in the vector.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ sort_array;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([5]) == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1,\
    \ 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15, 42, 87, 32,\
    \ 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14, 23, 11]) ==\
    \ [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmp75md8y6j.jl:16 expected \"\
    end\", got \"mod\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp75md8y6j.jl:19\n\
    in expression starting at /tmp/tmp75md8y6j.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    \n    sum = 0\n    for i in array\n        sum += i\n    end\n    if sum\
    \ % 2 == 1\n        sort(array)\n    else\n        sort(array, by=reverse)\n \
    \   end\n    return array\nend\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5])\
    \ == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1,\
    \ 2])\n\t@test(candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\
    \t@test(candidate([21, 14, 23, 11]) == [23, 21, 14, 11])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpn535xnek.jl:35\n  Expression: candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n   Evaluated: [2, 4, 3, 0, 1, 5] == [0,\
    \ 1, 2, 3, 4, 5]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpn535xnek.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn535xnek.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpn535xnek.jl:36\n  Expression: candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0]\n   Evaluated: [2, 4, 3, 0, 1, 5, 6] == [6, 5,\
    \ 4, 3, 2, 1, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpn535xnek.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn535xnek.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpn535xnek.jl:37\n  Expression: candidate([2, 1]) == [1, 2]\n\
    \   Evaluated: [2, 1] == [1, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpn535xnek.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn535xnek.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpn535xnek.jl:38\n  Expression: candidate([15, 42, 87, 32, 11,\
    \ 0]) == [0, 11, 15, 32, 42, 87]\n   Evaluated: [15, 42, 87, 32, 11, 0] == [0,\
    \ 11, 15, 32, 42, 87]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpn535xnek.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn535xnek.jl:32\ntest set: Test\
    \ Failed at /tmp/tm"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpn535xnek.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    if length(array) == 0 \n        return array \n    \n    sum = 0\n   \
    \ for i in array\n        sum += i\n    end\n    \n    if sum % 2 == 1 \n    \
    \    sorted = reverse(array) \n    else\n        sorted = array \n    end\n  \
    \  \n    sorted = sort(sorted)\n    \n    return sorted \nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5])\
    \ == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1,\
    \ 2])\n\t@test(candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\
    \t@test(candidate([21, 14, 23, 11]) == [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp44ni47ad.jl:34\nin expression starting at\
    \ /tmp/tmp44ni47ad.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    array = copy(array)\n    array.sort()\n    return array\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpfq7_wxp6.jl:25\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  type Array\
    \ has no field sort\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n\
    \   [2] sort_array(array::Vector{Int64})\n     @ Main /tmp/tmpfq7_wxp6.jl:17\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpfq7_wxp6.jl:25 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpfq7_wxp6.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpfq7_wxp6.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([5]) == [5]\n  type Array has no field sort\n  Stacktrace:\n   [1]\
    \ getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] sort_array(array::Vector{Int64})\n\
    \     @ Main /tmp/tmpfq7_wxp6.jl:17\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpfq7_wxp6.jl:26 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpfq7_wxp6.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpfq7_wxp6.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n  type Array has no field\
    \ sort\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2]\
    \ sort_array(array::Vector{Int64})\n     @ Main /tmp/tmpfq7_wxp6.jl:17\n   [3]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpfq7_wxp6.jl:27 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpfq7_wxp6.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpfq7_wxp6.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([2, 4, 3, 0, 1"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfq7_wxp6.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    if length(array) == 0 \n        return array\n    end\n    \n    sum =\
    \ 0\n    for i in 1:length(array)\n        sum += array[i]\n    end\n    \n  \
    \  if sum % 2 != 0\n        push!(array, sum)\n        push!(array, 0)\n    end\n\
    \    \n    push!(array, 0)\n    push!(array, 0)\n    \n    push!(array, 0)\n \
    \   push!(array, 0)\n    \n    push!(array, 0)\n    push!(array, 0)\n    \n  \
    \  push!(array, 0)\n    push!(array, 0)\n    \n    push!(array, 0)\n    push!(array,\
    \ 0)\n    \n    push!(array, 0)\n    push!(array, 0)\n    \n    push!(array, 0)\n\
    \    push!(array, 0)\n    \n    push!(array, 0)\n    push!(array, 0)\n    \n \
    \   push!(array, 0)\n    push!(array, 0)\n    \n    push!(array, 0)\n    push!(array,\
    \ 0)\n    \n    push!(array, 0)\n    push!(array, 0)\n    \n    push!(array, 0)\n\
    \    push!(array, 0)\n    \n    push!(array, 0)\n    push!(array, 0)\n    \n \
    \   push!(array, 0)\n    push!(array, 0)\n    \n    push!(array, 0)\n    push!(array,\
    \ 0)\n    \n    push!(array, 0)\n    push!(array, 0)\n    \n    push!(array, 0)\n\
    \    push!(array, 0)\n    \n    push!(array, 0)\n    push!(array, 0)\n    \n \
    \   push!(array, 0)\n    push!(array, 0)\n    \n    push!(array, 0)\n    push!(array,\
    \ 0)\n    \n    push!(array, 0)\n    push!(array, 0)\n    \n    push!(array, 0)\n\
    \    push!(array, 0)\n    \n    push!(array, 0)\n    push!(array, 0)\n    \n \
    \   push!(array, 0)\n    push!(array, 0)\n    \n    push!(array, 0)\n    push!(array,\
    \ 0)\n    \n    push!(array, 0)\n    push!(array, 0)\n    \n    push!(array, 0)\n\
    \    push!(array, 0)\n    \n    push!(array, 0)\n    push!(array, 0)\n    \n \
    \   push!(array, 0)\n    push!(array, 0)\n    \n    push!(array, 0)\n    push!(array,\
    \ 0)\n    \n    push!(array, 0)\n    push!(array, 0)\n    \n    push!(array, 0)\n\
    \    push!(array, 0)\n    \n    push!(array, 0)\n    push!(array, \nusing Test\n\
    \n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzpsgv42e.jl:130\nin expression starting at\
    \ /tmp/tmpzpsgv42e.jl:130\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    \n    sum = 0\n    for i in array\n        sum += i\n    end\n    if sum\
    \ % 2 != 0\n        sort!(array)\n    else\n        sort!(array, reverse=true)\n\
    \    end\n    return array\nend\n</cell>\n<code language=julia-1.5>\nsort_array([2,\
    \ 4, 3, 0, 1, 5, 6])\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ an array of integers and returns the sum of the first and last elements.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz4w6vycj.jl:28\nin expression starting at\
    \ /tmp/tmpz4w6vycj.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    \n    if length(array) == 0 \n        return array\n    end\nusing Test\n\
    \n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmphut538aj.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphut538aj.jl:1\n\
    in expression starting at /tmp/tmphut538aj.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    if length(array) == 0 \n        return array \n    \n    sum_array = sum(array)\
    \ \n    if sum_array % 2 != 0 \n        array = reverse(array) \n    \n    sum_array\
    \ = sum(array) \n    if sum_array % 2 == 0 \n        array = reverse(array) \n\
    \    \n    sum_array = sum(array) \n    if sum_array % 2 == 0 \n        array\
    \ = reverse(array) \n    \n    sum_array = sum(array) \n    if sum_array % 2 !=\
    \ 0 \n        array = reverse(array) \n    \n    sum_array = sum(array) \n   \
    \ if sum_array % 2 == 0 \n        array = reverse(array) \n    \n    sum_array\
    \ = sum(array) \n    if sum_array % 2 != 0 \n        array = reverse(array) \n\
    \    \n    sum_array = sum(array) \n    if sum_array % 2 == 0 \n        array\
    \ = reverse(array) \n    \n    sum_array = sum(array) \n    if sum_array % 2 !=\
    \ 0 \n        array = reverse(array) \n    \n    sum_array = sum(array) \n   \
    \ if sum_array % 2 == 0 \n        array = reverse(array) \n    \n    sum_array\
    \ = sum(array) \n    if sum_array % 2 != 0 \n        array = reverse(array) \n\
    \    \n    sum_array = sum(array) \n    if sum_array % 2 == 0 \n        array\
    \ = reverse(array) \n    \n    sum_array = sum(array) \n    if sum_array % 2 !=\
    \ 0 \n        array = reverse(array) \n    \n    sum_array = sum(array) \n   \
    \ if sum_array % 2 == 0 \n        array = reverse(array) \n    \n    sum_array\
    \ = sum(array) \n    if sum_array % 2 != 0 \n        array = reverse(array) \n\
    \    \n    sum_array = sum(array) \n    if sum_array % 2 == 0 \n        array\
    \ = reverse(array) \n    \n    sum_array = sum(array) \n    if sum_array % 2 !=\
    \ 0 \n        array = reverse(array) \n    \n    sum_array = sum(array) \n   \
    \ if sum_array % 2 == 0 \n        array = reverse(array) \n    \n    sum_array\
    \ = sum(array) \n    if sum_array % 2 != 0 \n        array = reverse(array) \n\
    \    \n    sum_array = sum(array) \n    if sum_array % 2 == 0 \n        array\
    \ = reverse(array) \n    \n    sum_array = sum(array) \n    if sum_array % 2 !=\
    \ 0 \n        array = reverse(array) \n    \n    sum_array = sum(array) \n   \
    \ if sum_array % 2 == 0 \n        array = reverse(array) \n    \n    sum_array\
    \ = sum(array) \n    if sum_array % 2 != 0 \n        array = reverse(array) \n\
    \    \n    sum_array = sum(array) \nusing Test\n\n@testset begin\n\ncandidate\
    \ = sort_array;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([5]) == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1,\
    \ 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15, 42, 87, 32,\
    \ 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14, 23, 11]) ==\
    \ [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbprprkiz.jl:1\nin expression starting at /tmp/tmpbprprkiz.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    if length(array) == 0 \n        return array \n    \n    sum = 0\n   \
    \ for i in array\n        sum += i\n    end\n    \n    if sum % 2 != 0 \n    \
    \    sorted = reverse(array) \n    else\n        sorted = array \n    end\n  \
    \  \n    return sorted \nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2gqec84z.jl:32\nin expression starting at\
    \ /tmp/tmp2gqec84z.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    if length(array) == 0 \n        return array \n    \n    sum = 0\n   \
    \ for i in array\n        sum += i\n    end\n    \n    if sum % 2 != 0 \n    \
    \    array = reverse(array) \n    end\n    \n    return array\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5])\
    \ == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1,\
    \ 2])\n\t@test(candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\
    \t@test(candidate([21, 14, 23, 11]) == [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp81nkmqz6.jl:30\nin expression starting at\
    \ /tmp/tmp81nkmqz6.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    if sum(array) == 0 \n        return array \n    else \n        odd = sum(array)\
    \ mod 2 \n        if odd \n            array = array[2:end] \n            array\
    \ = reverse(array) \n        else \n            array = array[1:end-1] \n    \
    \        array = reverse(array) \n            array = reverse(array) \n      \
    \  end \n        return array \n    end \nend \n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmpgvywzdcw.jl:16 expected \"\
    end\", got \"mod\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpgvywzdcw.jl:19\n\
    in expression starting at /tmp/tmpgvywzdcw.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    if length(array) == 0 \n        return array \n    else \n        sum_array\
    \ = sum(array) \n        if sum_array % 2 == 1 \n            array = reverse(array)\
    \ \n        else \n            array = sort(array) \n        end \n        return\
    \ array \n    end \nend \n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5]) == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1,\
    \ 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15, 42, 87, 32,\
    \ 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14, 23, 11]) ==\
    \ [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp25g663od.jl:28\nin expression starting at\
    \ /tmp/tmp25g663od.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    sum = 0\n    for i in array\n        sum += i\n    end\n    if sum % 2\
    \ == 1\n        sort(array)\n    else\n        sort(array, lt=reverse)\n    end\n\
    \    return array\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5]) == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1,\
    \ 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15, 42, 87, 32,\
    \ 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14, 23, 11]) ==\
    \ [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt4eg9bv8.jl:27\nin expression starting at\
    \ /tmp/tmpt4eg9bv8.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    if length(array) == 0 \n        return array \n    \n    sum = 0\n   \
    \ for i in array\n        sum += i\n    end\n    \n    if sum % 2 != 0 \n    \
    \    array = reverse(array)\n    end\n    \n    return array\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsort_array([2, 4, 3, 0, 1, 5, 6])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a vector of integers and returns the sum of the\
    \ first and last elements.\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5])\
    \ == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1,\
    \ 2])\n\t@test(candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\
    \t@test(candidate([21, 14, 23, 11]) == [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfdgfl51x.jl:30\nin expression starting at\
    \ /tmp/tmpfdgfl51x.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    if length(array) == 0 \n        return array \n    else \n        odd_sum\
    \ = sum(array[1:end-1]) \n        even_sum = sum(array[2:end]) \n        if odd_sum\
    \ % 2 == 1 \n            return array\n        else \n            return array.reverse\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5]) == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1,\
    \ 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15, 42, 87, 32,\
    \ 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14, 23, 11]) ==\
    \ [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7crzvv_1.jl:27\nin expression starting at\
    \ /tmp/tmp7crzvv_1.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    \n    sum = 0\n    for i in array\n        sum += i\n    end\n    if sum\
    \ % 2 != 0\n        array = reverse(array)\n    end\n    return array\nend\n</cell>\n\
    <code language=julia-1.5>\nsort_array([])\n</cell>\n<code language=julia-1.5>\n\
    sort_array([5])\n</cell>\n<code language=julia-1.5>\nsort_array([2, 4, 3, 0, 1,\
    \ 5])\n</cell>\n<code language=julia-1.5>\nsort_array([2, 4, 3, 0, 1, 5, 6])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the sum of the given\
    \ array in ascending order.\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5])\
    \ == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1,\
    \ 2])\n\t@test(candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\
    \t@test(candidate([21, 14, 23, 11]) == [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyhung0wg.jl:26\nin expression starting at\
    \ /tmp/tmpyhung0wg.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    \n    if length(array) == 0 \n        return array \n    end \n    \n\
    \    sum = 0\n    \n    for ele in array \n        sum += ele \n    end \n   \
    \ \n    if sum % 2 == 1 \n        return reverse(array) \n    end \n    \n   \
    \ sum = 0\n    \n    for ele in array \n        sum += ele \n    end \n    \n\
    \    if sum % 2 == 0 \n        return array \n    end \n    \n    sum = 0\n  \
    \  \n    for ele in array \n        sum += ele \n    end \n    \n    if sum %\
    \ 2 == 1 \n        return reverse(array) \n    end \n    \n    sum = 0\n    \n\
    \    for ele in array \n        sum += ele \n    end \n    \n    if sum % 2 ==\
    \ 0 \n        return array \n    end \n    \n    sum = 0\n    \n    for ele in\
    \ array \n        sum += ele \n    end \n    \n    if sum % 2 == 1 \n        return\
    \ reverse(array) \n    end \n    \n    sum = 0\n    \n    for ele in array \n\
    \        sum += ele \n    end \n    \n    if sum % 2 == 0 \n        return array\
    \ \n    end \n    \n    sum = 0\n    \n    for ele in array \n        sum += ele\
    \ \n    end \n    \n    if sum % 2 == 1 \n        return reverse(array) \n   \
    \ end \n    \n    sum = 0\n    \n    for ele in array \n        sum += ele \n\
    \    end \n    \n    if sum % 2 == 0 \n        return array \n    end \n    \n\
    \    sum = 0\n    \n    for ele in array \n        sum += ele \n    end \n   \
    \ \n    if sum % 2 == 1 \n        return reverse(array) \n    end \n    \n   \
    \ sum = 0\n    \n    for ele in array \n        sum += ele \n    end \n    \n\
    \    if sum % 2 == 0 \n        return array \n    end \n    \n    sum = 0\n  \
    \  \n    for ele in array \n        sum += ele \n    end \n    \n    if sum %\
    \ 2 == 1 \n        return reverse(array) \n    end \n    \n    sum = 0\n    \n\
    \    for ele in array \n        sum += ele \n    end \n    \n    if sum % 2 ==\
    \ 0 \n        return array \n    end \n    \n    sum = 0\n    \n    for ele in\
    \ array \n        sum += ele \n    end \n    \n    if sum % 2 == 1 \n        return\
    \ reverse(array) \n    end \n    \n    sum = 0\n    \n    for ele in array \n\
    \        sum += ele \n    end \n    \n    if sum % 2 == 0 \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5]) == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1,\
    \ 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15, 42, 87, 32,\
    \ 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14, 23, 11]) ==\
    \ [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl5jszmfz.jl:1\nin expression starting at /tmp/tmpl5jszmfz.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    if length(array) == 0 \n        return array \n    end\n    \n    sum\
    \ = 0\n    for i in 1:length(array) \n        sum += array[i]\n    end\n    \n\
    \    if sum % 2 != 0 \n        sorted = sort_array(array[1:end-1]) \n        return\
    \ vcat(array, sorted) \n    else \n        sorted = sort_array(array[end+1:end])\
    \ \n        return vcat(sorted, array[1:end-1]) \n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5])\
    \ == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1,\
    \ 2])\n\t@test(candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\
    \t@test(candidate([21, 14, 23, 11]) == [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7mk82n79.jl:33\nin expression starting at\
    \ /tmp/tmp7mk82n79.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    if length(array) == 0 \n        return array \n    \n    sum = 0\n   \
    \ for i in array\n        sum += i\n    end\n    \n    if sum % 2 != 0 \n    \
    \    array = reverse(array)\n    end\n    \n    return array\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsort_array([])\n</cell>\n<code language=julia-1.5>\nsort_array([5])\n\
    </cell>\n<code language=julia-1.5>\nsort_array([2, 4, 3, 0, 1, 5])\n</cell>\n\
    <code language=julia-1.5>\nsort_array([2, 4, 3, 0, 1, 5, 6])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the number of times a given value appears\
    \ in the given array.\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5])\
    \ == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1,\
    \ 2])\n\t@test(candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\
    \t@test(candidate([21, 14, 23, 11]) == [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpexq8mmrt.jl:30\nin expression starting at\
    \ /tmp/tmpexq8mmrt.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    if length(array) == 0 \n        return array \n    \n    sum = 0\n   \
    \ for i in array\n        sum += i\n    end\n    \n    if sum % 2 == 1 \n    \
    \    sort!(array)\n    else\n        sort!(array, reverse=true)\n    end\n   \
    \ \n    return array\nend\n</cell>\n<code language=julia-1.5>\n@test sort_array([])\
    \ == []\n@test sort_array([5]) == [5]\n@test sort_array([2, 4, 3, 0, 1, 5]) ==\
    \ [0, 1, 2, 3, 4, 5]\n@test sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3,\
    \ 2, 1, 0]\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ of integers and returns the sum of the integers in the vector. \nWrite a function\
    \ that takes a vector of integers and returns the product of the integers in the\
    \ vector. \nWrite a function that takes a vector of integers and returns the maximum\
    \ of the integers in the vector. \nWrite a function that takes a vector of integers\
    \ and returns the minimum of the integers in the vector. \nWrite a function that\
    \ takes a vector of integers and returns the product of the integers in the vector,\
    \ multiplied by the square of the integers in the vector. \nWrite a function that\
    \ takes a vector of integers and returns the sum of the integers in the vector,\
    \ multiplied by the square of the integers in the vector. \nWrite a function that\
    \ takes a vector of integers and returns the sum of the integers in the vector,\
    \ divided by the square of the integers in the vector. \nWrite a function that\
    \ takes a vector of integers and returns the sum of the integers in the vector,\
    \ divided by the square of the integers in the vector. \nWrite a function that\
    \ takes a vector of integers and returns the sum of the integers in the vector,\
    \ multiplied by the square of the integers in the vector, divided by the square\
    \ of the integers in the vector. \nWrite a function that takes a vector of integers\
    \ and returns the sum of the integers in the vector, divided by the square of\
    \ the integers in the vector, multiplied by the square of the integers in the\
    \ vector. \nWrite a function that takes a vector of integers and returns the sum\
    \ of the integers in the vector, divided by the square of the integers in the\
    \ vector, multiplied by the square of the integers in the vector. \nWrite a function\
    \ that takes a vector of integers and returns the sum of the integers in the vector,\
    \ divided by the square of the integers in the vector, multiplied by the square\
    \ of the integers in the vector, divided by the square of the integers in the\
    \ vector. \nWrite a function that takes a vector of integers and returns the sum\
    \ of the integers in the vector, divided by the square of the integers in the\
    \ vector, multiplied by the square of the integers in the vector, divided by the\
    \ square of the integers in the vector. \nWrite a function that takes a vector\
    \ of integers and returns the sum of the integers in the vector, divided by the\
    \ square of the integers in the vector, multiplied by the square of the integers\
    \ in the vector, divided by the square of the integers in the vector, multiplied\
    \ by the square of the integers in the vector. \nWrite a function that takes a\
    \ vector of integers and returns the sum of the integer\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5]) == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1,\
    \ 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15, 42, 87, 32,\
    \ 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14, 23, 11]) ==\
    \ [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9n1sss6n.jl:32\nin expression starting at\
    \ /tmp/tmp9n1sss6n.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    if sum(array) == 0 \n        return array\n    end\n    \n    odd = false\n\
    \    even = false\n    \n    if sum(array) % 2 == 0 \n        even = true\n  \
    \  end\n    \n    if sum(array) % 2 == 1 \n        odd = true\n    end\n    \n\
    \    if odd \n        array = sort_odd_array(array)\n    elseif even \n      \
    \  array = sort_even_array(array)\n    end\n    \n    return array\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp1qsyajjd.jl:45\n  Test threw exception\n\
    \  Expression: candidate([5]) == [5]\n  UndefVarError: sort_odd_array not defined\n\
    \  Stacktrace:\n   [1] sort_array(array::Vector{Int64})\n     @ Main /tmp/tmp1qsyajjd.jl:32\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1qsyajjd.jl:45 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1qsyajjd.jl:43\ntest set:\
    \ Error During Test at /tmp/tmp1qsyajjd.jl:46\n  Test threw exception\n  Expression:\
    \ candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n  UndefVarError: sort_odd_array\
    \ not defined\n  Stacktrace:\n   [1] sort_array(array::Vector{Int64})\n     @\
    \ Main /tmp/tmp1qsyajjd.jl:32\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1qsyajjd.jl:46 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1qsyajjd.jl:43\ntest set:\
    \ Error During Test at /tmp/tmp1qsyajjd.jl:47\n  Test threw exception\n  Expression:\
    \ candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n  UndefVarError:\
    \ sort_odd_array not defined\n  Stacktrace:\n   [1] sort_array(array::Vector{Int64})\n\
    \     @ Main /tmp/tmp1qsyajjd.jl:32\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1qsyajjd.jl:47 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1qsyajjd.jl:43\ntest set:\
    \ Error During Test at /tmp/tmp1qsyajjd.jl:48\n  Test threw exception\n  Expression:\
    \ candidate([2, 1]) == [1, 2]\n  UndefVarError: sort_odd_array not defined\n \
    \ Stacktrace:\n   [1] sort_array(array::Vector{Int64}"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1qsyajjd.jl:41\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    if length(array) == 0 \n        return array \n    \n    sum = 0\n   \
    \ for i in array\n        sum += i\n    end\n    \n    if sum % 2 != 0\n     \
    \   array = reverse(array)\n    end\n    \n    return array\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpi7mqo97b.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpi7mqo97b.jl:1\n\
    in expression starting at /tmp/tmpi7mqo97b.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    \n    if length(array) == 0 \n        return array \n    end \nusing Test\n\
    \n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp8s0vk44s.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8s0vk44s.jl:1\n\
    in expression starting at /tmp/tmp8s0vk44s.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    array = copy(array)\n    \n    sum = 0\n    for i in array\n        sum\
    \ += i\n    end\n    \n    if sum % 2 == 1\n        sort(array)\n    else\n  \
    \      sort(array, by=reverse)\n    end\n    \n    return array\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert sort_array([]) == []\n@assert sort_array([5])\
    \ == [5]\n@assert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n@assert\
    \ sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n</cell>\n<text>\n\
    4.2 Sum array\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8eakdzue.jl:31\nin expression starting at\
    \ /tmp/tmp8eakdzue.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    if length(array) == 0 \n        return array \n    end\n    \n    sum\
    \ = 0\n    for i in 1:length(array) \n        sum += array[i]\n    end\n    \n\
    \    if sum % 2 != 0 \n        array = reverse(array) \n    end\n    \n    return\
    \ array\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5]) == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1,\
    \ 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15, 42, 87, 32,\
    \ 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14, 23, 11]) ==\
    \ [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzc42l_lm.jl:31\nin expression starting at\
    \ /tmp/tmpzc42l_lm.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    sum = 0\n    for i in array\n        sum += i\n    end\n    if sum % 2\
    \ == 1\n        sort_array(reverse(array))\n    else\n        array\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sort_array;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([5]) == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1,\
    \ 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15, 42, 87, 32,\
    \ 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14, 23, 11]) ==\
    \ [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjsjj5apn.jl:26\nin expression starting at\
    \ /tmp/tmpjsjj5apn.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    if sum(array) == 0 \n        return array \n    else \n        odd = sum(array)\
    \ mod 2 \n        even = sum(array) div 2 \n        if odd > even \n         \
    \   odd_sorted = sort_array(array[end-1:end]) \n            even_sorted = sort_array(array[end-1:end-1])\
    \ \n            return merge(odd_sorted, even_sorted) \n        else \n      \
    \      even_sorted = sort_array(array[end-1:end]) \n            odd_sorted = sort_array(array[end-1:end-1])\
    \ \n            return merge(odd_sorted, even_sorted) \n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5])\
    \ == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1,\
    \ 2])\n\t@test(candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\
    \t@test(candidate([21, 14, 23, 11]) == [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmp8jnzwfvn.jl:16 expected \"\
    end\", got \"mod\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8jnzwfvn.jl:19\n\
    in expression starting at /tmp/tmp8jnzwfvn.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    array = copy(array)\n    \n    if length(array) == 0 \n        return\
    \ array\n    end\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t\
    @test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5])\
    \ == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1,\
    \ 2])\n\t@test(candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\
    \t@test(candidate([21, 14, 23, 11]) == [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmposnv0l6j.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmposnv0l6j.jl:1\n\
    in expression starting at /tmp/tmposnv0l6j.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    if length(array) == 0 \n        return array \n    \n    sum = 0\n   \
    \ for i in array\n        sum += i\n    end\n    \n    if sum % 2 != 0 \n    \
    \    array = reverse(array)\n    end\n    \n    return array\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp9f_jxy89.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9f_jxy89.jl:1\n\
    in expression starting at /tmp/tmp9f_jxy89.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    sum = 0\n    for i in array\n        sum += i\n    end\n    if sum % 2\
    \ == 1\n        sort(array)\n    else\n        sort(array, by=reverse)\n    end\n\
    \    return array\nend\n</cell>\n<code language=julia-1.5>\n@assert sort_array([])\
    \ == []\n@assert sort_array([5]) == [5]\n@assert sort_array([2, 4, 3, 0, 1, 5])\
    \ == [0, 1, 2, 3, 4, 5]\n@assert sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4,\
    \ 3, 2, 1, 0]\n</cell>\n<text>\n4.2 Sort an Array of Strings\nGiven an array of\
    \ strings, return a new array with the strings sorted in alphabetical order.\n\
    using Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjltr7j5h.jl:27\nin expression starting at\
    \ /tmp/tmpjltr7j5h.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    if length(array) == 0 \n        return array \n    else \n        sum_array\
    \ = sum(array) \n        if sum_array % 2 == 1 \n            array = sort_array(array)\
    \ \n        else \n            array = sort_array(reverse(array)) \n        end\n\
    \        return array \n    end\nend\n</cell>\n<code language=julia-1.5>\nsort_array([])\n\
    </cell>\n<code language=julia-1.5>\nsort_array([5])\n</cell>\n<code language=julia-1.5>\n\
    sort_array([2, 4, 3, 0, 1, 5])\n</cell>\n<code language=julia-1.5>\nsort_array([2,\
    \ 4, 3, 0, 1, 5, 6])\n</cell>\n<text>\nExercise 2\nusing Test\n\n@testset begin\n\
    \ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5]) == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1,\
    \ 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15, 42, 87, 32,\
    \ 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14, 23, 11]) ==\
    \ [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplhn9mf9w.jl:28\nin expression starting at\
    \ /tmp/tmplhn9mf9w.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    array = sort(array)\n    if sum(array) % 2 == 1\n        array = reverse(array)\n\
    \    end\n    return array\nend\n</code>\n<|/ a tags=sorting,arrays,julia |>\n\
    <| c |>\nThis does not provide an answer to the question. To critique or request\
    \ clarification from an author, leave a comment below their post. - [From Review](/review/low-quality-posts/29797888)\n\
    <|/ c |>\n<| c |>\nI believe this does answer the question. He wants to sort an\
    \ array in ascending order if the sum of the first and last element is odd, or\
    \ in descending order if the sum of the first and last element is even. He also\
    \ wants to do this without changing the original array. He also wants to do this\
    \ without using any packages.\n<|/ c |>\n<| c |>\nThe question was \"How to sort\
    \ an array in Julia?\" not \"How to sort an array in Julia without using any packages?\"\
    \ The answer to the question \"How to sort an array in Julia?\" was \"Use a package\"\
    . Your answer does not answer the question \"How to sort an array in Julia?\"\
    \ it only answers the question \"How to sort an array in Julia without using any\
    \ packages?\" which is not what the question was about.\n<|/ c |>\n<| c |>\nThe\
    \ question was \"How to sort an array in Julia?\" not \"How to sort an array in\
    \ Julia without using any packages?\" The answer to the question \"How to sort\
    \ an array in Julia?\" was \"Use a package\". Your answer does not answer the\
    \ question \"How to sort an array in Julia?\" it only answers the question \"\
    How to sort an array in Julia without using any packages?\" which is not what\
    \ the question was about.\n<|/ c |>\n<| c |>\nThe question was \"How to sort an\
    \ array in Julia?\" not \"How to sort an array in Julia without using any packages?\"\
    \ The answer to the question \"How to sort an array in Julia?\" was \"Use a package\"\
    . Your answer does not answer the question \"How to sort an array in Julia?\"\
    \ it only answers the question \"How to sort an array in Julia without using any\
    \ packages?\" which is not what the question was about.\n<|/ c |>\n<| a tags=sorting,arrays,julia\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwx6cl_66.jl:22\nin expression starting at\
    \ /tmp/tmpwx6cl_66.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    if length(array) == 0 \n        return array \n    \n    sum_array = sum(array)\n\
    \    if sum_array % 2 == 1 \n        array = reverse(array)\n    end\n    \n \
    \   sum_array = sum(array)\n    if sum_array % 2 == 0 \n        array = reverse(array)\n\
    \    end\n    \n    return array\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_6teq_91.jl:31\nin expression starting at\
    \ /tmp/tmp_6teq_91.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    array = copy(array)\n    sort(array)\n    return array\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphigxfu10.jl:27\n  Expression: candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n   Evaluated: [2, 4, 3, 0, 1, 5] == [0,\
    \ 1, 2, 3, 4, 5]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphigxfu10.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphigxfu10.jl:24\ntest set: Test\
    \ Failed at /tmp/tmphigxfu10.jl:28\n  Expression: candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0]\n   Evaluated: [2, 4, 3, 0, 1, 5, 6] == [6, 5,\
    \ 4, 3, 2, 1, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphigxfu10.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphigxfu10.jl:24\ntest set: Test\
    \ Failed at /tmp/tmphigxfu10.jl:29\n  Expression: candidate([2, 1]) == [1, 2]\n\
    \   Evaluated: [2, 1] == [1, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphigxfu10.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphigxfu10.jl:24\ntest set: Test\
    \ Failed at /tmp/tmphigxfu10.jl:30\n  Expression: candidate([15, 42, 87, 32, 11,\
    \ 0]) == [0, 11, 15, 32, 42, 87]\n   Evaluated: [15, 42, 87, 32, 11, 0] == [0,\
    \ 11, 15, 32, 42, 87]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphigxfu10.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphigxfu10.jl:24\ntest set: Test\
    \ Failed at /tmp/tm"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphigxfu10.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    array = copy(array)\n    array.sort()\n    return array\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5])\
    \ == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1,\
    \ 2])\n\t@test(candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\
    \t@test(candidate([21, 14, 23, 11]) == [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3jl_g9n_.jl:20\nin expression starting at\
    \ /tmp/tmp3jl_g9n_.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    array = sort(array)\n    if sum(array) % 2 == 1\n        array = reverse(array)\n\
    \    end\n    return array\nend\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5])\
    \ == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1,\
    \ 2])\n\t@test(candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\
    \t@test(candidate([21, 14, 23, 11]) == [23, 21, 14, 11])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0n34fq3y.jl:29\n  Expression: candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n   Evaluated: [5, 4, 3, 2, 1, 0] == [0,\
    \ 1, 2, 3, 4, 5]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0n34fq3y.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0n34fq3y.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp0n34fq3y.jl:31\n  Expression: candidate([2, 1]) == [1, 2]\n\
    \   Evaluated: [2, 1] == [1, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0n34fq3y.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0n34fq3y.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp0n34fq3y.jl:32\n  Expression: candidate([15, 42, 87, 32, 11,\
    \ 0]) == [0, 11, 15, 32, 42, 87]\n   Evaluated: [87, 42, 32, 15, 11, 0] == [0,\
    \ 11, 15, 32, 42, 87]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0n34fq3y.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0n34fq3y.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0n34fq3y.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    array = sort(array)\n    if sum(array) % 2 == 1\n        array = reverse(array)\n\
    \    end\n    return array\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptq6i6amq.jl:22\nin expression starting at\
    \ /tmp/tmptq6i6amq.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    if length(array) == 0 \n        return array \n    \n    sum_array = sum(array)\n\
    \    if sum_array % 2 == 1 \n        array = sort_array_desc(array) \n    else\
    \ \n        array = sort_array_asc(array) \n    return array \nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3o3ni8d_.jl:1\nin expression starting at /tmp/tmp3o3ni8d_.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    array = copy(array)\n    \n    sum = 0\n    for i in array\n        sum\
    \ += i\n    end\n    \n    if sum % 2 == 1\n        sort(array)\n    else\n  \
    \      sort(reverse, array)\n    end\n    \n    return array\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@test sort_array([]) == []\n@test sort_array([5]) == [5]\n\
    @test sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n@test sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns the number of times the given value appears in the given\
    \ array.\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfj8icu39.jl:31\nin expression starting at\
    \ /tmp/tmpfj8icu39.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    \n    sum = 0\n    for i in array\n        sum += i\n    end\n    \n \
    \   if sum % 2 == 1\n        array.sort!\n    else\n        array.reverse!\n \
    \   end\n    \n    return array\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sort_array;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([5]) == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1,\
    \ 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15, 42, 87, 32,\
    \ 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14, 23, 11]) ==\
    \ [23, 21, 14, 11])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpivi690l2.jl:35\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  type Array\
    \ has no field reverse!\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42\
    \ [inlined]\n   [2] sort_array(array::Vector{Int64})\n     @ Main /tmp/tmpivi690l2.jl:25\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpivi690l2.jl:35 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpivi690l2.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpivi690l2.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([5]) == [5]\n  type Array has no field sort!\n  Stacktrace:\n   [1]\
    \ getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] sort_array(array::Vector{Int64})\n\
    \     @ Main /tmp/tmpivi690l2.jl:23\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpivi690l2.jl:36 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpivi690l2.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpivi690l2.jl:37\n  Test threw exception\n  Expression:\
    \ candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n  type Array has no field\
    \ sort!\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n  \
    \ [2] sort_array(array::Vector{Int64})\n     @ Main /tmp/tmpivi690l2.jl:23\n \
    \  [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpivi690l2.jl:37 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpivi690l2.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpivi690l2.jl:38\n  Test threw exception\n  Expression:\
    \ candidate([2, 4, 3"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpivi690l2.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    if length(array) == 0 \n        return array \n    end\n    \n    sum\
    \ = 0\n    \n    for x in array \n        sum += x \n    end\n    \n    if sum\
    \ % 2 != 0 \n        push!(array, sum)\n        push!(array, -sum)\n    end\n\
    \    \n    array = sort(array)\n    \n    return array\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5]) == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1,\
    \ 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15, 42, 87, 32,\
    \ 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14, 23, 11]) ==\
    \ [23, 21, 14, 11])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjrexwvt7.jl:41\n  Expression: candidate([5])\
    \ == [5]\n   Evaluated: [-5, 5, 5] == [5]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjrexwvt7.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjrexwvt7.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpjrexwvt7.jl:42\n  Expression: candidate([2, 4, 3, 0, 1, 5])\
    \ == [0, 1, 2, 3, 4, 5]\n   Evaluated: [-15, 0, 1, 2, 3, 4, 5, 15] == [0, 1, 2,\
    \ 3, 4, 5]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjrexwvt7.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjrexwvt7.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpjrexwvt7.jl:43\n  Expression: candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0]\n   Evaluated: [-21, 0, 1, 2, 3, 4, 5, 6, 21] ==\
    \ [6, 5, 4, 3, 2, 1, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjrexwvt7.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjrexwvt7.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpjrexwvt7.jl:44\n  Expression: candidate([2, 1]) == [1, 2]\n\
    \   Evaluated: [-3, 1, 2, 3] == [1, 2]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpjrexwvt7.jl:44 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjrexwvt7.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpjrexwvt7.jl:45\n  Expression: candidate([15, 42,"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjrexwvt7.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    if length(array) == 0 \n        return array \n    \n    sum = 0\n   \
    \ for x in array \n        sum += x \n    end\n    \n    if sum % 2 == 1 \n  \
    \      sorted = sort_array(array[1:end-1]) \n        return vcat(array, sorted)\
    \ \n    else \n        sorted = sort_array(array[2:end]) \n        return vcat(array[1:end-1],\
    \ sorted) \n    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5]) == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1,\
    \ 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15, 42, 87, 32,\
    \ 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14, 23, 11]) ==\
    \ [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc544jsya.jl:32\nin expression starting at\
    \ /tmp/tmpc544jsya.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    array = sort(array)\n    if sum(array) % 2 == 1\n        array = reverse(array)\n\
    \    end\n    return array\nend\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5])\
    \ == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1,\
    \ 2])\n\t@test(candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\
    \t@test(candidate([21, 14, 23, 11]) == [23, 21, 14, 11])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_axb9p62.jl:29\n  Expression: candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n   Evaluated: [5, 4, 3, 2, 1, 0] == [0,\
    \ 1, 2, 3, 4, 5]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_axb9p62.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_axb9p62.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp_axb9p62.jl:31\n  Expression: candidate([2, 1]) == [1, 2]\n\
    \   Evaluated: [2, 1] == [1, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_axb9p62.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_axb9p62.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp_axb9p62.jl:32\n  Expression: candidate([15, 42, 87, 32, 11,\
    \ 0]) == [0, 11, 15, 32, 42, 87]\n   Evaluated: [87, 42, 32, 15, 11, 0] == [0,\
    \ 11, 15, 32, 42, 87]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_axb9p62.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_axb9p62.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_axb9p62.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    \n    sum = 0\n    for i in array\n        sum += i\n    end\n    if sum\
    \ % 2 == 1\n        sort(array)\n    else\n        sort(array, by=reverse)\n \
    \   end\n    \n    return array\nend\n</cell>\n<code language=julia-1.5>\nsort_array([2,\
    \ 4, 3, 0, 1, 5, 6])\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the number of times a given value appears in an array.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5]) == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1,\
    \ 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15, 42, 87, 32,\
    \ 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14, 23, 11]) ==\
    \ [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppjoxzzkz.jl:29\nin expression starting at\
    \ /tmp/tmppjoxzzkz.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    \n    array = copy(array)\n    \n    if sum(array) == sum(array[end-1:end])\n\
    \        array = sort_array_desc(array)\n    else\n        array = sort_array_asc(array)\n\
    \    end\n    \n    return array\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sort_array;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([5]) == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1,\
    \ 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15, 42, 87, 32,\
    \ 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14, 23, 11]) ==\
    \ [23, 21, 14, 11])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpxjcwucub.jl:32\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError:\
    \ attempt to access 0-element Vector{Int64} at index [-1:0]\n  Stacktrace:\n \
    \  [1] throw_boundserror(A::Vector{Int64}, I::Tuple{UnitRange{Int64}})\n     @\
    \ Base ./abstractarray.jl:691\n   [2] checkbounds\n     @ ./abstractarray.jl:656\
    \ [inlined]\n   [3] getindex\n     @ ./array.jl:867 [inlined]\n   [4] sort_array(array::Vector{Int64})\n\
    \     @ Main /tmp/tmpxjcwucub.jl:19\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpxjcwucub.jl:32 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpxjcwucub.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpxjcwucub.jl:33\n  Test threw exception\n  Expression:\
    \ candidate([5]) == [5]\n  BoundsError: attempt to access 1-element Vector{Int64}\
    \ at index [0:1]\n  Stacktrace:\n   [1] throw_boundserror(A::Vector{Int64}, I::Tuple{UnitRange{Int64}})\n\
    \     @ Base ./abstractarray.jl:691\n   [2] checkbounds\n     @ ./abstractarray.jl:656\
    \ [inlined]\n   [3] getindex\n     @ ./array.jl:867 [inlined]\n   [4] sort_array(array::Vector{Int64})\n\
    \     @ Main /tmp/tmpxjcwucub.jl:19\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpxjcwucub.jl:33 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpxjcwucub.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpxjcwucub.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n  UndefVarError: sort_array_asc\
    \ not defined\n  Stacktrace:\n   [1] sort_array(array::Vector{Int64})\n     @\
    \ Main /tmp/tmpxjcwucub.jl:22\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/T"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxjcwucub.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    if length(array) == 0 \n        return array \n    end\nusing Test\n\n\
    @testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmphakj3isc.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphakj3isc.jl:1\n\
    in expression starting at /tmp/tmphakj3isc.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    if length(array) == 0 \n        return array \n    else \n        odd\
    \ = sum( array[1:end-1] ) % 2 \n        if odd \n            array[1:end-1], array[end]\
    \ = array[end], array[1:end-1] \n        else \n            array[1:end-1], array[end]\
    \ = array[1:end-1], array[end] \n        return array \n    end\nend\n</cell>\n\
    <text>\nProblem 4\nWrite a function that takes a vector of non-negative integers\
    \ and returns the sum of the numbers in the vector.\nusing Test\n\n@testset begin\n\
    \ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5]) == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1,\
    \ 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15, 42, 87, 32,\
    \ 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14, 23, 11]) ==\
    \ [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi6cq7tle.jl:27\nin expression starting at\
    \ /tmp/tmpi6cq7tle.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    if length(array) == 0 \n        return array \n    else \n        sum1\
    \ = sum(array[1:end-1]) \n        sum2 = sum(array[2:end]) \n        if sum1 %\
    \ 2 == 0 \n            return array \n        else \n            return reverse(array)\
    \ \n    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5]) == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1,\
    \ 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15, 42, 87, 32,\
    \ 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14, 23, 11]) ==\
    \ [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb6dor8t4.jl:27\nin expression starting at\
    \ /tmp/tmpb6dor8t4.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    array = sort(array)\n    if sum(array) % 2 == 1\n        array = reverse(array)\n\
    \    end\n    return array\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpda03k5u8.jl:22\nin expression starting at\
    \ /tmp/tmpda03k5u8.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    \n    if length(array) == 0 \n        return array \n    end \n    \n\
    \    sum_array = sum(array) \n    \n    if sum_array % 2 == 1 \n        array\
    \ = reverse(array) \n    end \n    \n    sum_array = sum(array) \n    \n    if\
    \ sum_array % 2 == 0 \n        array = reverse(array) \n    end \n    \n    return\
    \ array \nend \n</cell>\n<code language=julia-1.5>\n@assert sort_array([]) ==\
    \ []\n@assert sort_array([5]) == [5]\n@assert sort_array([2, 4, 3, 0, 1, 5]) ==\
    \ [0, 1, 2, 3, 4, 5]\n@assert sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3,\
    \ 2, 1, 0]\n</cell>\n<text>\n4.5 Find all occurrences of an element in a sorted\
    \ array\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg3atyfbh.jl:35\nin expression starting at\
    \ /tmp/tmpg3atyfbh.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    array = copy(array)\n    array.sort()\n    return array\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpecy40o0g.jl:25\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  type Array\
    \ has no field sort\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n\
    \   [2] sort_array(array::Vector{Int64})\n     @ Main /tmp/tmpecy40o0g.jl:17\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpecy40o0g.jl:25 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpecy40o0g.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpecy40o0g.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([5]) == [5]\n  type Array has no field sort\n  Stacktrace:\n   [1]\
    \ getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] sort_array(array::Vector{Int64})\n\
    \     @ Main /tmp/tmpecy40o0g.jl:17\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpecy40o0g.jl:26 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpecy40o0g.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpecy40o0g.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n  type Array has no field\
    \ sort\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2]\
    \ sort_array(array::Vector{Int64})\n     @ Main /tmp/tmpecy40o0g.jl:17\n   [3]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpecy40o0g.jl:27 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpecy40o0g.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpecy40o0g.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([2, 4, 3, 0, 1"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpecy40o0g.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    if length(array) == 0 \n        return array\n    end\n    \n    sum =\
    \ 0\n    for x in array\n        sum += x\n    end\n    \n    if sum % 2 == 0\
    \ \n        sorted = sort_array(array[1:end-1]) + [array[end]]\n    else\n   \
    \     sorted = sort_array(array[1:end-1]) + [array[end], array[1]]\n    end\n\
    \    \n    return sorted\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk3_i7gpq.jl:33\nin expression starting at\
    \ /tmp/tmpk3_i7gpq.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    if sum(array) == 0 \n        return array\n    elseif sum(array) % 2 !=\
    \ 0 \n        array = reverse(array)\n    end\n    array = sort(array)\n    return\
    \ array\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5]) == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1,\
    \ 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15, 42, 87, 32,\
    \ 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14, 23, 11]) ==\
    \ [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7nribs66.jl:24\nin expression starting at\
    \ /tmp/tmp7nribs66.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    sum = 0\n    for i in array\n        sum += i\n    end\n    if sum % 2\
    \ == 1\n        array.reverse()\n    end\n    return array\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsort_array([2, 4, 3, 0, 1, 5, 6])\n</cell>\n<code language=julia-1.5>\n\
    sort_array([2, 4, 3, 0, 1, 5])\n</cell>\n<code language=julia-1.5>\nsort_array([2,\
    \ 4, 3, 0, 1, 5, 6])\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ a sorted array of the given array in ascending order if the sum of the first\
    \ and last element is odd, or in descending order if the sum of the first and\
    \ last element is even.\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5])\
    \ == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1,\
    \ 2])\n\t@test(candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\
    \t@test(candidate([21, 14, 23, 11]) == [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgl025js2.jl:25\nin expression starting at\
    \ /tmp/tmpgl025js2.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    if length(array) == 0 \n        return array \n    end\n    \n    sum\
    \ = 0\n    for x in array \n        sum += x \n    end\n    \n    if sum % 2 ==\
    \ 1 \n        array = reverse(array) \n    end\n    \n    array = sort(array)\
    \ \n    \n    return array\nend\n</cell>\n<code language=julia-1.5>\n@assert sort_array([])\
    \ == []\n@assert sort_array([5]) == [5]\n@assert sort_array([2, 4, 3, 0, 1, 5])\
    \ == [0, 1, 2, 3, 4, 5]\n@assert sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4,\
    \ 3, 2, 1, 0]\n</cell>\n<text>\nExercise 3\nWrite a function that returns the\
    \ sum of the first n positive integers in the given array.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5]) == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1,\
    \ 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15, 42, 87, 32,\
    \ 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14, 23, 11]) ==\
    \ [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmsn1ondu.jl:33\nin expression starting at\
    \ /tmp/tmpmsn1ondu.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    if length(array) == 0 \n        return array \n    end\n    \n    sum\
    \ = 0\n    for i in 1:length(array) \n        sum += array[i]\n    end\n    \n\
    \    if sum % 2 != 0 \n        array = reverse(array) \n    end\n    \n    return\
    \ array\nend\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpv0_y1_wc.jl:38\n  Expression: candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n   Evaluated: [5, 1, 0, 3, 4, 2] == [0,\
    \ 1, 2, 3, 4, 5]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpv0_y1_wc.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpv0_y1_wc.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpv0_y1_wc.jl:39\n  Expression: candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0]\n   Evaluated: [6, 5, 1, 0, 3, 4, 2] == [6, 5,\
    \ 4, 3, 2, 1, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpv0_y1_wc.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpv0_y1_wc.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpv0_y1_wc.jl:41\n  Expression: candidate([15, 42, 87, 32, 11,\
    \ 0]) == [0, 11, 15, 32, 42, 87]\n   Evaluated: [0, 11, 32, 87, 42, 15] == [0,\
    \ 11, 15, 32, 42, 87]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpv0_y1_wc.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpv0_y1_wc.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpv0_y1_wc.jl:42\n  Expression: candidate([21, 14, 23, 11])\
    \ == [23, 21, 14, 11]\n   Evaluated: [11, 23, 14, 21] == [23, 21, 14, 11]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpv0_y1_wc.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpv0_y1_w"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpv0_y1_wc.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    sum = 0\n    for i in array\n        sum += i\n    end\n    if sum % 2\
    \ != 0\n        array.sort!\n    else\n        array.reverse!\n    end\n    return\
    \ array\nend\n</code>\n<|/ a tags=sorting,arrays,julia |>\n<| a dscore=2 |>\n\
    I like using sort! for sorting arrays. It's a little more concise than using sort.\
    \ \n<code>\njulia> a = [5,4,3,2,1]\n5-element Array{Int64,1}:\n 5\n 4\n 3\n 2\n\
    \ 1\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv97y4_do.jl:27\nin expression starting at\
    \ /tmp/tmpv97y4_do.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    array = copy(array)\n    array.sort()\n    return array\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpt_xuhlum.jl:25\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  type Array\
    \ has no field sort\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n\
    \   [2] sort_array(array::Vector{Int64})\n     @ Main /tmp/tmpt_xuhlum.jl:17\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpt_xuhlum.jl:25 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpt_xuhlum.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpt_xuhlum.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([5]) == [5]\n  type Array has no field sort\n  Stacktrace:\n   [1]\
    \ getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] sort_array(array::Vector{Int64})\n\
    \     @ Main /tmp/tmpt_xuhlum.jl:17\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpt_xuhlum.jl:26 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpt_xuhlum.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpt_xuhlum.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n  type Array has no field\
    \ sort\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2]\
    \ sort_array(array::Vector{Int64})\n     @ Main /tmp/tmpt_xuhlum.jl:17\n   [3]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpt_xuhlum.jl:27 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpt_xuhlum.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpt_xuhlum.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([2, 4, 3, 0, 1"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpt_xuhlum.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    array = copy(array)\n    \n    if sum(array) % 2 == 1\n        array =\
    \ sort_array_desc(array)\n    else\n        array = sort_array_asc(array)\n  \
    \  end\n    \n    return array\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sort_array;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([5]) == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1,\
    \ 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15, 42, 87, 32,\
    \ 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14, 23, 11]) ==\
    \ [23, 21, 14, 11])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmptdm2trk4.jl:31\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  UndefVarError:\
    \ sort_array_asc not defined\n  Stacktrace:\n   [1] sort_array(array::Vector{Int64})\n\
    \     @ Main /tmp/tmptdm2trk4.jl:21\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmptdm2trk4.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptdm2trk4.jl:30\ntest set:\
    \ Error During Test at /tmp/tmptdm2trk4.jl:32\n  Test threw exception\n  Expression:\
    \ candidate([5]) == [5]\n  UndefVarError: sort_array_desc not defined\n  Stacktrace:\n\
    \   [1] sort_array(array::Vector{Int64})\n     @ Main /tmp/tmptdm2trk4.jl:19\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmptdm2trk4.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptdm2trk4.jl:30\ntest set:\
    \ Error During Test at /tmp/tmptdm2trk4.jl:33\n  Test threw exception\n  Expression:\
    \ candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n  UndefVarError: sort_array_desc\
    \ not defined\n  Stacktrace:\n   [1] sort_array(array::Vector{Int64})\n     @\
    \ Main /tmp/tmptdm2trk4.jl:19\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmptdm2trk4.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptdm2trk4.jl:30\ntest set:\
    \ Error During Test at /tmp/tmptdm2trk4.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n  UndefVarError:\
    \ sort_array_desc not defined\n  Stacktrace:\n   [1] sort_a"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptdm2trk4.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    if length(array) == 0 \n        return array \n    end\n    \n    sum_array\
    \ = sum(array)\n    if sum_array % 2 == 0 \n        sort_array = array\n    else\n\
    \        sort_array = reverse(array)\n    end\n    \n    sort_array = sort_array[1:end-1]\n\
    \    \n    return sort_array\nend\n</cell>\n<text>\nQ2. Write a function that\
    \ takes a vector of integers and returns the sum of the numbers in the vector.\n\
    using Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm7w3anj2.jl:31\nin expression starting at\
    \ /tmp/tmpm7w3anj2.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    \n    if sum(array) == 0 \n        return array\n    end\n    \n    \n\
    \    if sum(array) % 2 != 0 \n        array = reverse(array)\n    end\n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5])\
    \ == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1,\
    \ 2])\n\t@test(candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\
    \t@test(candidate([21, 14, 23, 11]) == [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpob9rrqo9.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpob9rrqo9.jl:1\n\
    in expression starting at /tmp/tmpob9rrqo9.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    \n    sum = 0\n    for i in array\n        sum += i\n    end\n    \n \
    \   if sum % 2 != 0\n        array = reverse(array)\n    end\n    \n    return\
    \ array\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5]) == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1,\
    \ 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15, 42, 87, 32,\
    \ 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14, 23, 11]) ==\
    \ [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp70vxfbgr.jl:28\nin expression starting at\
    \ /tmp/tmp70vxfbgr.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    \n    array = copy(array)\n    \n    if sum(array) % 2 == 1\n        array\
    \ = sort_array_desc(array)\n    else\n        array = sort_array_asc(array)\n\
    \    end\n    \n    return array\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sort_array;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([5]) == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1,\
    \ 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15, 42, 87, 32,\
    \ 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14, 23, 11]) ==\
    \ [23, 21, 14, 11])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpc77ne7sn.jl:32\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  UndefVarError:\
    \ sort_array_asc not defined\n  Stacktrace:\n   [1] sort_array(array::Vector{Int64})\n\
    \     @ Main /tmp/tmpc77ne7sn.jl:22\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpc77ne7sn.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpc77ne7sn.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpc77ne7sn.jl:33\n  Test threw exception\n  Expression:\
    \ candidate([5]) == [5]\n  UndefVarError: sort_array_desc not defined\n  Stacktrace:\n\
    \   [1] sort_array(array::Vector{Int64})\n     @ Main /tmp/tmpc77ne7sn.jl:20\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpc77ne7sn.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpc77ne7sn.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpc77ne7sn.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n  UndefVarError: sort_array_desc\
    \ not defined\n  Stacktrace:\n   [1] sort_array(array::Vector{Int64})\n     @\
    \ Main /tmp/tmpc77ne7sn.jl:20\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpc77ne7sn.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpc77ne7sn.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpc77ne7sn.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n  UndefVarError:\
    \ sort_array_desc not defined\n  Stacktrace:\n   [1] sort_a"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpc77ne7sn.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    if length(array) == 0 \n        return array \n    \n    sum_array = sum(array)\
    \ \n    \n    if sum_array % 2 == 1 \n        array = sort_array(array[end-1:end])\
    \ \n        return array \n    else \n        array = sort_array(array[end-1:end])\
    \ \n        return reverse(array) \n    end \nend \nusing Test\n\n@testset begin\n\
    \ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5]) == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1,\
    \ 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15, 42, 87, 32,\
    \ 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14, 23, 11]) ==\
    \ [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpdqad8544.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpdqad8544.jl:1\n\
    in expression starting at /tmp/tmpdqad8544.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    if length(array) == 0 \n        return array \n    else \n        odd_sum\
    \ = sum(array[1:end-1]) \n        even_sum = sum(array[2:end]) \n        if odd_sum\
    \ % 2 == 1 \n            return array\n        else \n            return array.reverse\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5]) == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1,\
    \ 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15, 42, 87, 32,\
    \ 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14, 23, 11]) ==\
    \ [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphh2idhyq.jl:27\nin expression starting at\
    \ /tmp/tmphh2idhyq.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    \n    sum = 0\n    for i in array\n        sum += i\n    end\n    \n \
    \   if sum % 2 != 0\n        array = reverse(array)\n    end\n    \n    return\
    \ array\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5]) == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1,\
    \ 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15, 42, 87, 32,\
    \ 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14, 23, 11]) ==\
    \ [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprwjhalb1.jl:28\nin expression starting at\
    \ /tmp/tmprwjhalb1.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    if length(array) == 0 \n        return array \n    end\nusing Test\n\n\
    @testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpw9r22x8_.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpw9r22x8_.jl:1\n\
    in expression starting at /tmp/tmpw9r22x8_.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    if length(array) == 0 \n        return array \n    \n    sum = 0\n   \
    \ for i in array\n        sum += i\n    end\n    \n    if sum % 2 != 0\n     \
    \   array = reverse(array)\n    end\n    \n    return array\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsort_array([2, 4, 3, 0, 1, 5, 6])\n</cell>\n<text>\n4.2\
    \ Sort an array in descending order\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sort_array;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([5]) == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1,\
    \ 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15, 42, 87, 32,\
    \ 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14, 23, 11]) ==\
    \ [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxbv1xv0y.jl:30\nin expression starting at\
    \ /tmp/tmpxbv1xv0y.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    if length(array) == 0 \n        return array \n    \n    sum = 0\n   \
    \ for i in array\n        sum += i \n    end\n    \n    if sum % 2 == 0 \n   \
    \     sort_array(reverse(array))\n    else \n        sort_array(array)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sort_array;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([5]) == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1,\
    \ 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15, 42, 87, 32,\
    \ 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14, 23, 11]) ==\
    \ [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3biml6v_.jl:30\nin expression starting at\
    \ /tmp/tmp3biml6v_.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    \n    sum = 0\n    for i in array\n        sum += i\n    end\n    if sum\
    \ % 2 == 1\n        array = reverse( array )\n    end\n    return array\nend\n\
    </cell>\n<code language=julia-1.5>\n@test sort_array([]) == []\n@test sort_array([5])\
    \ == [5]\n@test sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n@test sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns the number of times a given value appears in an array.\n\
    using Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5_zv94ep.jl:26\nin expression starting at\
    \ /tmp/tmp5_zv94ep.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    \n    array = copy(array)\n    \n    if length(array) == 0 \n        return\
    \ array\n    end\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t\
    @test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5])\
    \ == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1,\
    \ 2])\n\t@test(candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\
    \t@test(candidate([21, 14, 23, 11]) == [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpb12nz3lm.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpb12nz3lm.jl:1\n\
    in expression starting at /tmp/tmpb12nz3lm.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    if sum(array) == 0 \n        return array \n    else \n        odd = sum(array)\
    \ % 2 != 0 \n        even = sum(array) % 2 == 0 \n        if odd \n          \
    \  array = sort_array(array[1::-1]) \n        else \n            array = sort_array(array[::-1])\
    \ \n        return array \n    end\nend\n</code>\n<|/ a tags=sorting,arrays,julia\
    \ |>\n<| a dscore=1 |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5])\
    \ == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1,\
    \ 2])\n\t@test(candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\
    \t@test(candidate([21, 14, 23, 11]) == [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: expected \"]\" or separator in arguments to \"\
    [ ]\"; got \"1::-1\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpvt7_azck.jl:22\n\
    in expression starting at /tmp/tmpvt7_azck.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    \n    if length(array) == 0 \n        return array \n    end \nusing Test\n\
    \n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp0n35fcub.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0n35fcub.jl:1\n\
    in expression starting at /tmp/tmp0n35fcub.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    array = copy(array)\n    array.sort()\n    return array\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpgrejbspz.jl:25\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  type Array\
    \ has no field sort\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n\
    \   [2] sort_array(array::Vector{Int64})\n     @ Main /tmp/tmpgrejbspz.jl:17\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpgrejbspz.jl:25 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpgrejbspz.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpgrejbspz.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([5]) == [5]\n  type Array has no field sort\n  Stacktrace:\n   [1]\
    \ getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] sort_array(array::Vector{Int64})\n\
    \     @ Main /tmp/tmpgrejbspz.jl:17\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpgrejbspz.jl:26 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpgrejbspz.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpgrejbspz.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n  type Array has no field\
    \ sort\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2]\
    \ sort_array(array::Vector{Int64})\n     @ Main /tmp/tmpgrejbspz.jl:17\n   [3]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpgrejbspz.jl:27 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpgrejbspz.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpgrejbspz.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([2, 4, 3, 0, 1"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgrejbspz.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    array = sort(array)\n    if sum(array) % 2 == 1\n        array = reverse(array)\n\
    \    end\n    return array\nend\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5])\
    \ == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1,\
    \ 2])\n\t@test(candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\
    \t@test(candidate([21, 14, 23, 11]) == [23, 21, 14, 11])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpr8fi202e.jl:29\n  Expression: candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n   Evaluated: [5, 4, 3, 2, 1, 0] == [0,\
    \ 1, 2, 3, 4, 5]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr8fi202e.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr8fi202e.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpr8fi202e.jl:31\n  Expression: candidate([2, 1]) == [1, 2]\n\
    \   Evaluated: [2, 1] == [1, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr8fi202e.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr8fi202e.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpr8fi202e.jl:32\n  Expression: candidate([15, 42, 87, 32, 11,\
    \ 0]) == [0, 11, 15, 32, 42, 87]\n   Evaluated: [87, 42, 32, 15, 11, 0] == [0,\
    \ 11, 15, 32, 42, 87]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr8fi202e.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr8fi202e.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpr8fi202e.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    \n    sum = 0\n    for i in array\n        sum += i\n    end\n    \n \
    \   if sum % 2 == 1\n        sort(array)\n    else\n        sort(array, reverse=true)\n\
    \    end\n    \n    return array\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sort_array;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([5]) == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1,\
    \ 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15, 42, 87, 32,\
    \ 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14, 23, 11]) ==\
    \ [23, 21, 14, 11])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp0zd0xm_m.jl:35\\n  Test threw\
    \ exception\\n  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\\\
    n  MethodError: no method matching sort!(::Vector{Int64}; reverse=true)\\n  Closest\
    \ candidates are:\\n    sort!(::Vector{Int64}, !Matched::Base.Sort.Algorithm,\
    \ !Matched::Base.Order.Perm{<:Base.Order.DirectOrdering, <:Vector{<:Union{Missing,\
    \ Float32, Float64}}}) at /shared/centos7/julia/1.7.3/share/julia/base/sort.jl:1236\
    \ got unsupported keyword argument \"reverse\"\\n    sort!(::AbstractVector; alg,\
    \ lt, by, rev, order) at /shared/centos7/julia/1.7.3/share/julia/base/sort.jl:707\
    \ got unsupported keyword argument \"reverse\"\\n    sort!(::AbstractVector, !Matched::Integer,\
    \ !Matched::Integer, !Matched::Base.Sort.InsertionSortAlg, !Matched::Base.Order.Ordering)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/sort.jl:502 got unsupported\
    \ keyword argument \"reverse\"\\n    ...\\n  Stacktrace:\\n   [1] kwerr(::NamedTuple{(:reverse,),\
    \ Tuple{Bool}}, ::Function, ::Vector{Int64})\\n     @ Base ./error.jl:163\\n \
    \  [2] sort(v::Vector{Int64}; kws::Base.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:reverse,),\
    \ Tuple{Bool}}})\\n     @ Base.Sort ./sort.jl:772\\n   [3] sort_array(array::Vector{Int64})\\\
    n     @ Main /tmp/tmp0zd0xm_m.jl:25\\n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [5] macro expansion\\n     @ /tmp/tmp0zd0xm_m.jl:35 [inlined]\\\
    n   [6] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [7] top-level scope\\n     @ /tmp/tmp0zd0xm_m.jl:34\\ntest set:\
    \ Test Failed at /tmp/tmp0zd0xm_m.jl:37\\n  Expression: candidate([2, 4, 3, 0,\
    \ 1, 5]) == [0, 1, 2, 3, 4, 5]\\n   Evaluated: [2, 4, 3, 0, 1, 5] == [0, 1, 2,\
    \ 3, 4, 5]\\nStacktrace:\\n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmp0zd0xm_m.jl:37 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    \n    array = copy(array)\n    \n    sum = 0\n    for i in array\n   \
    \     sum += i\n    end\n    \n    if sum % 2 != 0\n        sort_array(reverse(array))\n\
    \    else\n        sort_array(array)\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5]) == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1,\
    \ 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15, 42, 87, 32,\
    \ 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14, 23, 11]) ==\
    \ [23, 21, 14, 11])\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    \n    if length(array) == 0 \n        return array\n    end\n    \n  \
    \  sum = 0\n    for i in 1:length(array)\n        sum += array[i]\n    end\n \
    \   \n    if sum % 2 != 0\n        array = reverse( array )\n    end\n    \n \
    \   return array\nend\n</cell>\n<code language=julia-1.5>\n# test your code\n\
    @test sort_array([]) == []\n@test sort_array([5]) == [5]\n@test sort_array([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n@test sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0]\n</cell>\n<text>\n4.3 Sort a 2D array\nGiven a 2D array\
    \ arr[][] of integers, sort the array in ascending order according to the values\
    \ in the first column.\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5])\
    \ == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1,\
    \ 2])\n\t@test(candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\
    \t@test(candidate([21, 14, 23, 11]) == [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzcfhxbf0.jl:32\nin expression starting at\
    \ /tmp/tmpzcfhxbf0.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    sum = 0\n    for i in array\n        sum += i\n    end\n    if sum % 2\
    \ == 1\n        array = reverse(array)\n    end\n    return array\nend\n</cell>\n\
    <code language=julia-1.5>\nsort_array([2, 4, 3, 0, 1, 5, 6])\n</cell>\n<text>\n\
    Question 3\nWrite a Julia function named sort_array_desc that takes in an array\
    \ of non-negative integers and returns the sorted array in descending order.\n\
    using Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph4n8mq66.jl:25\nin expression starting at\
    \ /tmp/tmph4n8mq66.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    if length(array) == 0 \n        return array \n    end\n    \n    sum\
    \ = 0\n    for i in array\n        sum += i\n    end\n    \n    if sum % 2 !=\
    \ 0 \n        array = reverse(array)\n    end\n    \n    return array\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert sort_array([]) == []\n@assert sort_array([5])\
    \ == [5]\n@assert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n@assert\
    \ sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n</cell>\n<text>\n\
    4.3 Sum array elements\nGiven an array of non-negative integers, return a new\
    \ array consisting of the sum of the numbers in the original array.\nusing Test\n\
    \n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbwzb_prf.jl:31\nin expression starting at\
    \ /tmp/tmpbwzb_prf.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    if length(array) == 0 \n        return array \n    end\n    \n    sum_array\
    \ = sum(array)\n    if sum_array % 2 == 0 \n        array = sort_array_desc(array)\
    \ \n    else \n        array = sort_array_asc(array) \n    end\n    return array\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpjzgnnmg3.jl:34\n  Test threw exception\n\
    \  Expression: candidate([5]) == [5]\n  UndefVarError: sort_array_asc not defined\n\
    \  Stacktrace:\n   [1] sort_array(array::Vector{Int64})\n     @ Main /tmp/tmpjzgnnmg3.jl:24\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjzgnnmg3.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjzgnnmg3.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpjzgnnmg3.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n  UndefVarError: sort_array_asc\
    \ not defined\n  Stacktrace:\n   [1] sort_array(array::Vector{Int64})\n     @\
    \ Main /tmp/tmpjzgnnmg3.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjzgnnmg3.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjzgnnmg3.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpjzgnnmg3.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n  UndefVarError:\
    \ sort_array_asc not defined\n  Stacktrace:\n   [1] sort_array(array::Vector{Int64})\n\
    \     @ Main /tmp/tmpjzgnnmg3.jl:24\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjzgnnmg3.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjzgnnmg3.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpjzgnnmg3.jl:37\n  Test threw exception\n  Expression:\
    \ candidate([2, 1]) == [1, 2]\n  UndefVarError: sort_array_asc not defined\n \
    \ Stacktrace:\n   [1] sort_array(array::Vector{Int64}"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjzgnnmg3.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    array = sort(array)\n    if sum(array) % 2 != 0\n        array = reverse(array)\n\
    \    end\n    return array\nend\n</code>\n<|/ a |>\n<| c |>\nThis doesn't work\
    \ if the array is all negative numbers. Try `sort_array([-5, -4, -3, -2, -1, 0,\
    \ 1, 2, 3, 4, 5])`.\n<|/ c |>\n<| c |>\nI believe this should work, since `sort`\
    \ will sort negative numbers first. `sort_array([-5, -4, -3, -2, -1, 0, 1, 2,\
    \ 3, 4, 5])` returns `[-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]`.\n<|/ c |>\n<| c\
    \ |>\nYes, it does. I tested it before posting. My bad.\n<|/ c |>\n<| a tags=sorting,arrays,julia\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpytezcuk4.jl:22\nin expression starting at\
    \ /tmp/tmpytezcuk4.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    if length(array) == 0 \n        return array \n    end\nusing Test\n\n\
    @testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppa3nku89.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppa3nku89.jl:1\n\
    in expression starting at /tmp/tmppa3nku89.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    \n    sum = 0\n    for x in array\n        sum += x\n    end\n    if sum\
    \ % 2 == 1\n        array = reverse(array)\n    end\n    return array\nend\n</cell>\n\
    <code language=julia-1.3>\nsort_array([2, 4, 3, 0, 1, 5, 6])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the number of times a value appears\
    \ in an array.\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph8bcdbw5.jl:26\nin expression starting at\
    \ /tmp/tmph8bcdbw5.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    if sum(array) == 0 \n        return array\n    end\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5]) == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1,\
    \ 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15, 42, 87, 32,\
    \ 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14, 23, 11]) ==\
    \ [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpoz81j1o_.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoz81j1o_.jl:1\n\
    in expression starting at /tmp/tmpoz81j1o_.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    \n    sum_array = sum(array)\n    if sum_array % 2 == 1\n        sort_array\
    \ = array[end-1:end]\n    else\n        sort_array = array[end-1:end]\n      \
    \  sort_array.reverse\n    end\n    return sort_array\nend\n</cell>\n<code language=julia-1.5>\n\
    sort_array([])\n</cell>\n<code language=julia-1.5>\nsort_array([5])\n</cell>\n\
    <code language=julia-1.5>\nsort_array([2, 4, 3, 0, 1, 5])\n</cell>\n<code language=julia-1.5>\n\
    sort_array([2, 4, 3, 0, 1, 5, 6])\n</cell>\n<text>\nPart 3: Combining Functions\n\
    Julia has many built-in functions to combine functions. Here are some examples:\n\
    using Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6dt3zkku.jl:26\nin expression starting at\
    \ /tmp/tmp6dt3zkku.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    if length(array) == 0 \n        return array \n    else \n        odd\
    \ = false\n        even = false\n        sum = 0\n        for i in array\n   \
    \         sum += i\n            if sum % 2 == 0\n                even = true\n\
    \            else\n                odd = true\n            end\n        end\n\
    \        if odd\n            sort_array_odd(array, sum)\n        else\n      \
    \      sort_array_even(array, sum)\n        end\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpyf0yhhtc.jl:43\n  Test threw exception\n\
    \  Expression: candidate([5]) == [5]\n  UndefVarError: sort_array_odd not defined\n\
    \  Stacktrace:\n   [1] sort_array(array::Vector{Int64})\n     @ Main /tmp/tmpyf0yhhtc.jl:31\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpyf0yhhtc.jl:43 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpyf0yhhtc.jl:41\ntest set:\
    \ Error During Test at /tmp/tmpyf0yhhtc.jl:44\n  Test threw exception\n  Expression:\
    \ candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n  UndefVarError: sort_array_odd\
    \ not defined\n  Stacktrace:\n   [1] sort_array(array::Vector{Int64})\n     @\
    \ Main /tmp/tmpyf0yhhtc.jl:31\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpyf0yhhtc.jl:44 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpyf0yhhtc.jl:41\ntest set:\
    \ Error During Test at /tmp/tmpyf0yhhtc.jl:45\n  Test threw exception\n  Expression:\
    \ candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n  UndefVarError:\
    \ sort_array_odd not defined\n  Stacktrace:\n   [1] sort_array(array::Vector{Int64})\n\
    \     @ Main /tmp/tmpyf0yhhtc.jl:31\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpyf0yhhtc.jl:45 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpyf0yhhtc.jl:41\ntest set:\
    \ Error During Test at /tmp/tmpyf0yhhtc.jl:46\n  Test threw exception\n  Expression:\
    \ candidate([2, 1]) == [1, 2]\n  UndefVarError: sort_array_odd not defined\n \
    \ Stacktrace:\n   [1] sort_array(array::Vector{Int64}"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyf0yhhtc.jl:39\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    array = copy(array)\n    \n    if length(array) == 0 \n        return\
    \ array\n    end\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t\
    @test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5])\
    \ == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1,\
    \ 2])\n\t@test(candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\
    \t@test(candidate([21, 14, 23, 11]) == [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp9et8qnko.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9et8qnko.jl:1\n\
    in expression starting at /tmp/tmp9et8qnko.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    if length(array) == 0 \n        return array \n    else \n        odd\
    \ = sum( array[1:end-1] ) % 2 \n        even = sum( array[1:end-1] ) % 2 != 0\
    \ \n        if odd \n            return reverse array \n        else \n      \
    \      return array \n    end\nend\n</cell>\n<text>\nQ. Given an array of non-negative\
    \ integers, return a copy of the given array after sorting in ascending order\
    \ if the sum( first index value, last index value) is odd, or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nusing Test\n\
    \n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"array\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp8g3ve_01.jl:22\nin expression starting at /tmp/tmp8g3ve_01.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    \n    sum = 0\n    for i in array\n        sum += i\n    end\n    if sum\
    \ % 2 != 0\n        array = reverse(array)\n    end\n    return array\nend\n</cell>\n\
    <code language=julia-1.5>\n@test sort_array([]) == []\n@test sort_array([5]) ==\
    \ [5]\n@test sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n@test sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a vector of integers and returns the sum of the first\
    \ and last element of the vector.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ sort_array;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([5]) == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1,\
    \ 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15, 42, 87, 32,\
    \ 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14, 23, 11]) ==\
    \ [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp65z5xkl0.jl:26\nin expression starting at\
    \ /tmp/tmp65z5xkl0.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    array = sort(array)\n    if sum(array) % 2 == 1\n        array = reverse(array)\n\
    \    end\n    return array\nend\n</cell>\n<code language=julia-1.5>\n@test sort_array([])\
    \ == []\n@test sort_array([5]) == [5]\n@test sort_array([2, 4, 3, 0, 1, 5]) ==\
    \ [0, 1, 2, 3, 4, 5]\n@test sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3,\
    \ 2, 1, 0]\n</cell>\n<text>\nExercise 3\nWrite a function that returns the first\
    \ element of a given array, and if the array is empty, return -1.\nusing Test\n\
    \n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd_2w5wp_.jl:22\nin expression starting at\
    \ /tmp/tmpd_2w5wp_.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    \n    sum = 0\n    for i in array\n        sum += i\n    end\n    if sum\
    \ % 2 == 1\n        sort!(array)\n    else\n        sort!(array, reverse=true)\n\
    \    end\n    return array\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmecxg1a4.jl:28\nin expression starting at\
    \ /tmp/tmpmecxg1a4.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    if length(array) == 0 \n        return array \n    else \n        odd\
    \ = sum( array[1:end-1] ) % 2 \n        even = sum( array[1:end-1] ) % 2 != 0\
    \ \n        if odd \n            array[1:end-1], array[end] = array[end], array[1:end-1]\
    \ \n        else \n            array[1:end-1], array[end] = array[1:end-1], array[end]\
    \ \n        return array \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkyxqmwtb.jl:28\nin expression starting at\
    \ /tmp/tmpkyxqmwtb.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    if length(array) == 0 \n        return array \n    \n    sum = 0\n   \
    \ for i in array\n        sum += i\n    end\n    \n    if sum % 2 == 1 \n    \
    \    array = reverse(array)\n    end\n    \n    return array\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpwngwpbri.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwngwpbri.jl:1\n\
    in expression starting at /tmp/tmpwngwpbri.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    \n    array = copy(array)\n    \n    if sum(array) % 2 != 0\n        array\
    \ = sort_array_desc(array)\n    else\n        array = sort_array_asc(array)\n\
    \    end\n    \n    return array\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sort_array;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([5]) == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1,\
    \ 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15, 42, 87, 32,\
    \ 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14, 23, 11]) ==\
    \ [23, 21, 14, 11])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpkscqm_ih.jl:32\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  UndefVarError:\
    \ sort_array_asc not defined\n  Stacktrace:\n   [1] sort_array(array::Vector{Int64})\n\
    \     @ Main /tmp/tmpkscqm_ih.jl:22\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpkscqm_ih.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkscqm_ih.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpkscqm_ih.jl:33\n  Test threw exception\n  Expression:\
    \ candidate([5]) == [5]\n  UndefVarError: sort_array_desc not defined\n  Stacktrace:\n\
    \   [1] sort_array(array::Vector{Int64})\n     @ Main /tmp/tmpkscqm_ih.jl:20\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpkscqm_ih.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkscqm_ih.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpkscqm_ih.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n  UndefVarError: sort_array_desc\
    \ not defined\n  Stacktrace:\n   [1] sort_array(array::Vector{Int64})\n     @\
    \ Main /tmp/tmpkscqm_ih.jl:20\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpkscqm_ih.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkscqm_ih.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpkscqm_ih.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n  UndefVarError:\
    \ sort_array_desc not defined\n  Stacktrace:\n   [1] sort_a"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkscqm_ih.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    sum = 0\n    for x in array\n        sum += x\n    end\n    if sum % 2\
    \ == 1\n        sort_array(reverse(array))\n    else\n        array\n    end\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that returns the number of\
    \ times a given value appears in the given array.\nusing Test\n\n@testset begin\n\
    \ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5]) == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1,\
    \ 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15, 42, 87, 32,\
    \ 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14, 23, 11]) ==\
    \ [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6183ksmx.jl:26\nin expression starting at\
    \ /tmp/tmp6183ksmx.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    \n    sum = 0\n    \n    for i in array\n        sum += i\n    end\n \
    \   \n    if sum % 2 != 0\n        array = sort_array(array[1...end-1]) \n   \
    \     push!(array, array[1])\n    end\n    \n    return array\nend\n</cell>\n\
    <code language=julia-1.5>\n@test sort_array([]) == []\n@test sort_array([5]) ==\
    \ [5]\n@test sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n@test sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a vector of integers and returns the number of unique\
    \ elements in the vector.\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5])\
    \ == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1,\
    \ 2])\n\t@test(candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\
    \t@test(candidate([21, 14, 23, 11]) == [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: expected \"]\" or separator in arguments to \"\
    [ ]\"; got \"1...end\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyorif8o0.jl:24\n\
    in expression starting at /tmp/tmpyorif8o0.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    if length(array) == 0 \n        return array \n    else \n        odd_sum\
    \ = sum(array[1:end-1]) \n        even_sum = sum(array[2:end]) \n        if odd_sum\
    \ % 2 == 1 \n            array = array[end:-1:1]\n        else \n            array\
    \ = array[1:end-1]\n        end\n    end\n    return array\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5])\
    \ == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1,\
    \ 2])\n\t@test(candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\
    \t@test(candidate([21, 14, 23, 11]) == [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpaefc5ktq.jl:29\nin expression starting at\
    \ /tmp/tmpaefc5ktq.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    array = sort(array)\n    if sum(array) % 2 == 1\n        array = reverse(array)\n\
    \    end\n    return array\nend\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5])\
    \ == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1,\
    \ 2])\n\t@test(candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\
    \t@test(candidate([21, 14, 23, 11]) == [23, 21, 14, 11])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpd9_upkbf.jl:29\n  Expression: candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n   Evaluated: [5, 4, 3, 2, 1, 0] == [0,\
    \ 1, 2, 3, 4, 5]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd9_upkbf.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd9_upkbf.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpd9_upkbf.jl:31\n  Expression: candidate([2, 1]) == [1, 2]\n\
    \   Evaluated: [2, 1] == [1, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd9_upkbf.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd9_upkbf.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpd9_upkbf.jl:32\n  Expression: candidate([15, 42, 87, 32, 11,\
    \ 0]) == [0, 11, 15, 32, 42, 87]\n   Evaluated: [87, 42, 32, 15, 11, 0] == [0,\
    \ 11, 15, 32, 42, 87]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd9_upkbf.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd9_upkbf.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpd9_upkbf.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    if length(array) == 0 \n        return array \n    \n    sum_array = sum(array)\
    \ \n    if sum_array % 2 == 0 \n        sort_array = array\n    else\n       \
    \ sort_array = reverse(array)\n    end\n    \n    sum_array = sum(sort_array)\
    \ \n    if sum_array % 2 == 1 \n        sort_array = reverse(sort_array)\n   \
    \ end\n    \n    return sort_array\nend\n</cell>\n<code language=julia-1.5>\n\
    sort_array([])\n</cell>\n<code language=julia-1.5>\nsort_array([5])\n</cell>\n\
    <code language=julia-1.5>\nsort_array([2, 4, 3, 0, 1, 5])\n</cell>\n<code language=julia-1.5>\n\
    sort_array([2, 4, 3, 0, 1, 5, 6])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the number of times a value appears in an array.\nusing Test\n\n\
    @testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdi8q9dtt.jl:33\nin expression starting at\
    \ /tmp/tmpdi8q9dtt.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    if length(array) == 0 \n        return array \n    else \n        odd\
    \ = sum( array[1:end-1] ) % 2 \n        if odd \n            array[1:end-1] \n\
    \        else \n            array[end-1:end] \n    end\nend\n</cell>\n<text>\n\
    Q2. Write a function that takes an array of integers and returns the sum of the\
    \ numbers in the array.\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5])\
    \ == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1,\
    \ 2])\n\t@test(candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\
    \t@test(candidate([21, 14, 23, 11]) == [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp99lr0n59.jl:26\nin expression starting at\
    \ /tmp/tmp99lr0n59.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    \n    array = copy(array)\n    \n    if sum(array) % 2 == 1\n        array\
    \ = sort_array_desc(array)\n    else\n        array = sort_array_asc(array)\n\
    \    end\n    \n    return array\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sort_array;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([5]) == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1,\
    \ 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15, 42, 87, 32,\
    \ 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14, 23, 11]) ==\
    \ [23, 21, 14, 11])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmphy5vskzb.jl:32\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  UndefVarError:\
    \ sort_array_asc not defined\n  Stacktrace:\n   [1] sort_array(array::Vector{Int64})\n\
    \     @ Main /tmp/tmphy5vskzb.jl:22\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphy5vskzb.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphy5vskzb.jl:31\ntest set:\
    \ Error During Test at /tmp/tmphy5vskzb.jl:33\n  Test threw exception\n  Expression:\
    \ candidate([5]) == [5]\n  UndefVarError: sort_array_desc not defined\n  Stacktrace:\n\
    \   [1] sort_array(array::Vector{Int64})\n     @ Main /tmp/tmphy5vskzb.jl:20\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphy5vskzb.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphy5vskzb.jl:31\ntest set:\
    \ Error During Test at /tmp/tmphy5vskzb.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n  UndefVarError: sort_array_desc\
    \ not defined\n  Stacktrace:\n   [1] sort_array(array::Vector{Int64})\n     @\
    \ Main /tmp/tmphy5vskzb.jl:20\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphy5vskzb.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphy5vskzb.jl:31\ntest set:\
    \ Error During Test at /tmp/tmphy5vskzb.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n  UndefVarError:\
    \ sort_array_desc not defined\n  Stacktrace:\n   [1] sort_a"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphy5vskzb.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    if length(array) == 0 \n        return array \n    else \n        sum1\
    \ = sum(array[1:end-1]) \n        sum2 = sum(array[end:]) \n        if sum1 %\
    \ 2 == 0 && sum2 % 2 == 1 \n            return array \n        else \n       \
    \     return sort_array(array[end:]) .+ array .+ sort_array(array[1:end-1]) \n\
    \    end\nend\n</code>\n<|/ a tags=sorting,arrays,julia |>\n<| a dscore=1 |>\n\
    <code>\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"end:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpkmo69zja.jl:20\nin expression\
    \ starting at /tmp/tmpkmo69zja.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    if length(array) == 0 \n        return array \n    else \n        sum1\
    \ = sum(array[1:end-1]) \n        sum2 = sum(array[end:]) \n        if sum1 %\
    \ 2 == 0 \n            array = array[sortperm(array)]\n        else \n       \
    \     array = array[sortperm(array,rev=true)]\n        end\n        return array\
    \ \n    end\nend\n</code>\n<|/ a tags=sorting,arrays,julia |>\n<| c |>\nThis doesn't\
    \ work for me. `sortperm` returns `ERROR: MethodError: no method matching sortperm(::Array{Int64,1})`\n\
    <|/ c |>\n<| c |>\nIt works for me in Julia 0.6.2\n<|/ c |>\n<| c |>\nIt works\
    \ for me in Julia 0.6.2\n<|/ c |>\n<| c |>\nIt works for me in Julia 0.6.2\n<|/\
    \ c |>\n<| a |>\nI came up with this solution:\n<code>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5]) == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1,\
    \ 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15, 42, 87, 32,\
    \ 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14, 23, 11]) ==\
    \ [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"end:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpm03kvaaj.jl:20\nin expression\
    \ starting at /tmp/tmpm03kvaaj.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    \n    sum = 0\n    for i in array\n        sum += i\n    end\n    if sum\
    \ % 2 != 0\n        sort_array(array) \n    else\n        sort_array(reverse(array))\n\
    \    end\nend\n</code>\n<|/ a tags=sorting,arrays,julia |>\n<| a tags=sorting,arrays,julia\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzno3hc55.jl:27\nin expression starting at\
    \ /tmp/tmpzno3hc55.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    if length(array) == 0 \n        return array \n    end\n    \n    sum_array\
    \ = sum(array)\n    if sum_array % 2 == 1 \n        array = reverse(array) \n\
    \    end\n    \n    sum_array = sum(array)\n    if sum_array % 2 == 0 \n     \
    \   array = reverse(array) \n    end\n    \n    return array\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5])\
    \ == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1,\
    \ 2])\n\t@test(candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\
    \t@test(candidate([21, 14, 23, 11]) == [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp__qsebns.jl:32\nin expression starting at\
    \ /tmp/tmp__qsebns.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    if sum(array) == 0 \n        return array\n    else \n        odd = sum(array)\
    \ mod 2 != 0\n        if odd \n            array = reverse(array)\n          \
    \  array = sort(array)\n        else \n            array = sort(reverse(array))\n\
    \            array = reverse(array)\n        return array\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5])\
    \ == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1,\
    \ 2])\n\t@test(candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\
    \t@test(candidate([21, 14, 23, 11]) == [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmp31kg_s3b.jl:16 expected \"\
    end\", got \"mod\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp31kg_s3b.jl:19\n\
    in expression starting at /tmp/tmp31kg_s3b.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    if length(array) == 0 \n        return array \n    \n    sum_array = sum(array)\n\
    \    if sum_array % 2 == 1 \n        array = reverse(array) \n    end\n    \n\
    \    sum_array = sum(array)\n    if sum_array % 2 == 0 \n        array = reverse(array)\
    \ \n    end\n    \n    return array\nend\n</cell>\n<code language=julia-1.5>\n\
    @test sort_array([]) == []\n@test sort_array([5]) == [5]\n@test sort_array([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n@test sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0]\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the number of elements in the given array that are greater than the\
    \ given value.\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1sab8oyu.jl:31\nin expression starting at\
    \ /tmp/tmp1sab8oyu.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    \n    if length(array) == 0 \n        return array\n    end\nusing Test\n\
    \n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppylphba7.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppylphba7.jl:1\n\
    in expression starting at /tmp/tmppylphba7.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    array = sort(array)\n    if sum(array) % 2 == 1\n        array = reverse(array)\n\
    \    end\n    return array\nend\n</cell>\n<code language=julia-1.0>\n@test sort_array([])\
    \ == []\n@test sort_array([5]) == [5]\n@test sort_array([2, 4, 3, 0, 1, 5]) ==\
    \ [0, 1, 2, 3, 4, 5]\n@test sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3,\
    \ 2, 1, 0]\n</cell>\n<text>\nExercise 2\nWrite a function that returns the sum\
    \ of the given array. Do not use loops.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sort_array;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([5]) == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1,\
    \ 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15, 42, 87, 32,\
    \ 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14, 23, 11]) ==\
    \ [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa7q9bzo2.jl:22\nin expression starting at\
    \ /tmp/tmpa7q9bzo2.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    array = copy(array)\n    array.sort()\n    return array\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpghk41apd.jl:25\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  type Array\
    \ has no field sort\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n\
    \   [2] sort_array(array::Vector{Int64})\n     @ Main /tmp/tmpghk41apd.jl:17\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpghk41apd.jl:25 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpghk41apd.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpghk41apd.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([5]) == [5]\n  type Array has no field sort\n  Stacktrace:\n   [1]\
    \ getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] sort_array(array::Vector{Int64})\n\
    \     @ Main /tmp/tmpghk41apd.jl:17\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpghk41apd.jl:26 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpghk41apd.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpghk41apd.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n  type Array has no field\
    \ sort\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2]\
    \ sort_array(array::Vector{Int64})\n     @ Main /tmp/tmpghk41apd.jl:17\n   [3]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpghk41apd.jl:27 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpghk41apd.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpghk41apd.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([2, 4, 3, 0, 1"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpghk41apd.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    if length(array) == 0 \n        return array \n    \n    sum_array = sum(array)\
    \ \n    if sum_array % 2 == 1 \n        array = sort_array(array[end-1:end]) \n\
    \        array = [array[1], array[0]] \n    else \n        array = sort_array(array[end-1:end])\
    \ \n        array = [array[-1], array[-2]] \n    return array \nend\n</cell>\n\
    <code language=julia-1.5>\n@assert sort_array([]) == []\n@assert sort_array([5])\
    \ == [5]\n@assert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n@assert\
    \ sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n</cell>\n<text>\n\
    4.3 Sort a 2D array\nGiven a 2D array arr[][] of size m x n, sort arr[][] in ascending\
    \ order by the sum of the first column and descending order by the sum of the\
    \ second column.\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t\
    @test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5])\
    \ == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1,\
    \ 2])\n\t@test(candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\
    \t@test(candidate([21, 14, 23, 11]) == [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4d2otg4b.jl:28\nin expression starting at\
    \ /tmp/tmp4d2otg4b.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    if length(array) == 0 \n        return array \n    \n    sum = 0\n   \
    \ for i in array\n        sum += i\n    end\nusing Test\n\n@testset begin\n\n\
    candidate = sort_array;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5]) == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1,\
    \ 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15, 42, 87, 32,\
    \ 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14, 23, 11]) ==\
    \ [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy74102l4.jl:1\nin expression starting at /tmp/tmpy74102l4.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    if length(array) == 0 \n        return array \n    end\n    \n    sum\
    \ = 0\n    for i in 1:length(array) \n        sum += array[i]\n    end\n    \n\
    \    if sum % 2 == 1 \n        sorted = sort_array(array[1:end-1]) \n        sorted[end]\
    \ = array[end] \n        return sorted \n    end\n    \n    sorted = sort_array(array[1:end-1])\
    \ \n    sorted[end] = array[end] \n    sorted[end-1] = array[end-1] \n    return\
    \ sorted \nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5]) == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1,\
    \ 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15, 42, 87, 32,\
    \ 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14, 23, 11]) ==\
    \ [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsquz9yw4.jl:36\nin expression starting at\
    \ /tmp/tmpsquz9yw4.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    array = sort(array)\n    if sum(array) % 2 == 1\n        array = reverse(array)\n\
    \    end\n    return array\nend\n</cell>\n<code language=julia-1.5>\nsort_array([])\n\
    </cell>\n<code language=julia-1.5>\nsort_array([5])\n</cell>\n<code language=julia-1.5>\n\
    sort_array([2, 4, 3, 0, 1, 5])\n</cell>\n<code language=julia-1.5>\nsort_array([2,\
    \ 4, 3, 0, 1, 5, 6])\n</cell>\n<text>\nExercise\nWrite a function that returns\
    \ the sum of the given array.\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5])\
    \ == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1,\
    \ 2])\n\t@test(candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\
    \t@test(candidate([21, 14, 23, 11]) == [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe_phaa_2.jl:22\nin expression starting at\
    \ /tmp/tmpe_phaa_2.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    array = copy(array)\n    \n    sum = 0\n    for i in 1:length(array)\n\
    \        sum += array[i]\n    end\n    \n    if sum % 2 == 1\n        sort(array)\n\
    \    else\n        sort(array, by=(x->-x, rev=true))\n    end\n    \n    return\
    \ array\nend\n</cell>\n<code language=julia-1.5>\n@assert sort_array([]) == []\n\
    @assert sort_array([5]) == [5]\n@assert sort_array([2, 4, 3, 0, 1, 5]) == [0,\
    \ 1, 2, 3, 4, 5]\n@assert sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2,\
    \ 1, 0]\n</cell>\n<text>\nPart III. Sum array in Julia\nNow let's see how we can\
    \ use Julia to solve the problem of summing an array in O(n) time.\nusing Test\n\
    \n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid named tuple element \"SSAValue(4)\" around\
    \ /tmp/tmpxnxziarm.jl:26\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxnxziarm.jl:1\n\
    in expression starting at /tmp/tmpxnxziarm.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    if length(array) == 0 \n        return array \n    end\n    \n    sum1\
    \ = sum(array[1:end-1])\n    sum2 = sum(array[end:])\n    \n    if sum1 % 2 ==\
    \ 0 \n        array = array[sortperm(array)]\n        return array \n    end\n\
    \    \n    if sum2 % 2 == 0 \n        array = array[sortperm(array, reverse=true)]\n\
    \        return array \n    end\n    \n    array = array[sortperm(array)]\n  \
    \  return array \nend\n</cell>\n<code language=julia-1.5>\n@assert sort_array([])\
    \ == []\n@assert sort_array([5]) == [5]\n@assert sort_array([2, 4, 3, 0, 1, 5])\
    \ == [0, 1, 2, 3, 4, 5]\n@assert sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4,\
    \ 3, 2, 1, 0]\n</cell>\n<text>\n4.3 Find all occurrences of an element in a sorted\
    \ array\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"end:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpl9z6wul_.jl:21\nin expression\
    \ starting at /tmp/tmpl9z6wul_.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    array = copy(array)\n    sort(array)\n    return array\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpmtl3hoe_.jl:27\n  Expression: candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n   Evaluated: [2, 4, 3, 0, 1, 5] == [0,\
    \ 1, 2, 3, 4, 5]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmtl3hoe_.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmtl3hoe_.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpmtl3hoe_.jl:28\n  Expression: candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0]\n   Evaluated: [2, 4, 3, 0, 1, 5, 6] == [6, 5,\
    \ 4, 3, 2, 1, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmtl3hoe_.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmtl3hoe_.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpmtl3hoe_.jl:29\n  Expression: candidate([2, 1]) == [1, 2]\n\
    \   Evaluated: [2, 1] == [1, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmtl3hoe_.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmtl3hoe_.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpmtl3hoe_.jl:30\n  Expression: candidate([15, 42, 87, 32, 11,\
    \ 0]) == [0, 11, 15, 32, 42, 87]\n   Evaluated: [15, 42, 87, 32, 11, 0] == [0,\
    \ 11, 15, 32, 42, 87]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmtl3hoe_.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmtl3hoe_.jl:24\ntest set: Test\
    \ Failed at /tmp/tm"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmtl3hoe_.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    if length(array) == 0 \n        return array \n    end\n    \n    sum_array\
    \ = sum(array)\n    if sum_array % 2 == 0 \n        sort_array = array\n    else\n\
    \        sort_array = reverse(array)\n    end\n    \n    sum_array = sum(sort_array)\n\
    \    if sum_array % 2 == 1 \n        sort_array = reverse(sort_array)\n    end\n\
    \    \n    return sort_array\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7oxqukgw.jl:34\nin expression starting at\
    \ /tmp/tmp7oxqukgw.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    if length(array) == 0 \n        return array \n    else \n        odd_sum\
    \ = sum(array[1:end-1]) \n        even_sum = sum(array[2:end]) \n        if odd_sum\
    \ % 2 == 1 \n            array = array[2:end] \n        else \n            array\
    \ = array[1:end-1] \n        end \n    end \n    return array \nend \n</code>\n\
    <|/ a |>\n<| a dscore=0 |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sort_array;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([5]) == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1,\
    \ 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15, 42, 87, 32,\
    \ 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14, 23, 11]) ==\
    \ [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8rp1pvgz.jl:29\nin expression starting at\
    \ /tmp/tmp8rp1pvgz.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    if length(array) == 0 \n        return array \n    else \n        sum_array\
    \ = sum(array) \n        if sum_array % 2 == 1 \n            array = sort_array(array[end-1:end])\
    \ \n        else \n            array = sort_array(array[end-1:end]) \n       \
    \     array = [array[end-1], array[end]]\n        end\n        return array \n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5]) == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1,\
    \ 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15, 42, 87, 32,\
    \ 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14, 23, 11]) ==\
    \ [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpka7kl_9h.jl:29\nin expression starting at\
    \ /tmp/tmpka7kl_9h.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    if length(array) == 0 \n        return array \n    else \n        odd_sum\
    \ = sum(array[1:end-1]) \n        even_sum = sum(array[2:end]) \n        if odd_sum\
    \ % 2 == 1 \n            array = array[2:end] \n        else \n            array\
    \ = array[1:end-1] \n        end \n    end \n    return array \nend \n</cell>\n\
    <code language=julia-1.5>\n@assert sort_array([]) == []\n@assert sort_array([5])\
    \ == [5]\n@assert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n@assert\
    \ sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the sum of the numbers in the given\
    \ array.\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8pdin9r9.jl:29\nin expression starting at\
    \ /tmp/tmp8pdin9r9.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    array = copy(array)\n    sum = 0\n    for i in array\n        sum += i\n\
    \    end\n    if sum % 2 != 0\n        sort!(array)\n    else\n        sort!(array,\
    \ by = x -> -x)\n    end\n    return array\nend\n</cell>\n<code language=julia-1.5>\n\
    @test sort_array([]) == []\n@test sort_array([5]) == [5]\n@test sort_array([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n@test sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0]\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the sum of the given array's elements.\nusing Test\n\n@testset begin\n\
    \ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5]) == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1,\
    \ 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15, 42, 87, 32,\
    \ 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14, 23, 11]) ==\
    \ [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2x2pbnuf.jl:28\nin expression starting at\
    \ /tmp/tmp2x2pbnuf.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    array = copy(array)\n    sum = 0\n    for i in array\n        sum += i\n\
    \    end\n    if sum % 2 == 1\n        sort(array)\n    else\n        sort(array,\
    \ by=(x->-x, x->x))\n    end\n    return array\nend\n</cell>\n<code language=julia-1.5>\n\
    @test sort_array([]) == []\n@test sort_array([5]) == [5]\n@test sort_array([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n@test sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0]\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the sum of the first n positive integers less than or equal to n.\n\
    using Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm_ddjol0.jl:28\nin expression starting at\
    \ /tmp/tmpm_ddjol0.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    sum = 0\n    for i in array\n        sum += i\n    end\n    if sum % 2\
    \ == 1\n        array = reverse(array)\n    end\n    return array\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5])\
    \ == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1,\
    \ 2])\n\t@test(candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\
    \t@test(candidate([21, 14, 23, 11]) == [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpoczj4813.jl:25\nin expression starting at\
    \ /tmp/tmpoczj4813.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    if length(array) == 0 \n        return array \n    else \n        sum\
    \ = 0\n        for i in array\n            sum += i\n        end\n        if sum\
    \ % 2 != 0 \n            reverse(array)\n        end\n        return array\n \
    \   end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given an array of\
    \ non-negative integers, return a copy of the given array after sorting,\n   \
    \ you will sort the given array in ascending order if the sum( first index value,\
    \ last index value) is odd,\n    or sort it in descending order if the sum( first\
    \ index value, last index value) is even.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sort_array;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([5]) == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1,\
    \ 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15, 42, 87, 32,\
    \ 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14, 23, 11]) ==\
    \ [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvxdgfcbf.jl:29\nin expression starting at\
    \ /tmp/tmpvxdgfcbf.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    array = copy(array)\n    sort(array)\n    return array\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpk6si2_p8.jl:27\n  Expression: candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n   Evaluated: [2, 4, 3, 0, 1, 5] == [0,\
    \ 1, 2, 3, 4, 5]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk6si2_p8.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk6si2_p8.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpk6si2_p8.jl:28\n  Expression: candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0]\n   Evaluated: [2, 4, 3, 0, 1, 5, 6] == [6, 5,\
    \ 4, 3, 2, 1, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk6si2_p8.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk6si2_p8.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpk6si2_p8.jl:29\n  Expression: candidate([2, 1]) == [1, 2]\n\
    \   Evaluated: [2, 1] == [1, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk6si2_p8.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk6si2_p8.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpk6si2_p8.jl:30\n  Expression: candidate([15, 42, 87, 32, 11,\
    \ 0]) == [0, 11, 15, 32, 42, 87]\n   Evaluated: [15, 42, 87, 32, 11, 0] == [0,\
    \ 11, 15, 32, 42, 87]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk6si2_p8.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk6si2_p8.jl:24\ntest set: Test\
    \ Failed at /tmp/tm"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpk6si2_p8.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    array = sort(array)\n    if sum(array) % 2 == 1\n        array = reverse(array)\n\
    \    end\n    return array\nend\n</cell>\n<code language=julia-1.5>\nsort_array([])\n\
    </cell>\n<code language=julia-1.5>\nsort_array([5])\n</cell>\n<code language=julia-1.5>\n\
    sort_array([2, 4, 3, 0, 1, 5])\n</cell>\n<code language=julia-1.5>\nsort_array([2,\
    \ 4, 3, 0, 1, 5, 6])\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the sum of the given array.\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5])\
    \ == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1,\
    \ 2])\n\t@test(candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\
    \t@test(candidate([21, 14, 23, 11]) == [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7ywdk4iv.jl:22\nin expression starting at\
    \ /tmp/tmp7ywdk4iv.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    array = sort(array)\n    if sum(array) % 2 != 0\n        array = reverse(array)\n\
    \    end\n    return array\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7d833hb6.jl:22\nin expression starting at\
    \ /tmp/tmp7d833hb6.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    if length(array) == 0 \n        return array \n    end\nusing Test\n\n\
    @testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp8w43r999.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8w43r999.jl:1\n\
    in expression starting at /tmp/tmp8w43r999.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    if sum(array) == 0 \n        return array \n    else \n        odd = sum(array)\
    \ mod 2 \n        even = sum(array) div 2 \n        if odd > even \n         \
    \   array = sort_array(array[end:-1:1]) \n        else \n            array = sort_array(array[end:-1:1])\
    \ \n            array = reverse(array) \n        end \n        return array \n\
    \    end \nend \n</cell>\n<code language=julia-1.5>\n@assert sort_array([]) ==\
    \ []\n@assert sort_array([5]) == [5]\n@assert sort_array([2, 4, 3, 0, 1, 5]) ==\
    \ [0, 1, 2, 3, 4, 5]\n@assert sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3,\
    \ 2, 1, 0]\n</cell>\n<text>\n4.3 Sort a vector in descending order\nusing Test\n\
    \n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmp1hqz0fqj.jl:16 expected \"\
    end\", got \"mod\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp1hqz0fqj.jl:19\n\
    in expression starting at /tmp/tmp1hqz0fqj.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    if length(array) == 0 \n        return array \n    \n    sum = 0\n   \
    \ for i in array\n        sum += i\n    end\n    \n    if sum % 2 == 1 \n    \
    \    array = reverse(array) \n    end\n    \n    array = sort(array) \n    \n\
    \    return array\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5]) == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1,\
    \ 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15, 42, 87, 32,\
    \ 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14, 23, 11]) ==\
    \ [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvpmzfwrd.jl:32\nin expression starting at\
    \ /tmp/tmpvpmzfwrd.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    if length(array) == 0 \n        return array \n    else \n        sum\
    \ = 0\n        for i in array\n            sum += i\n        end\n        if sum\
    \ % 2 == 1 \n            reverse(array)\n        end\n        return array \n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5]) == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1,\
    \ 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15, 42, 87, 32,\
    \ 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14, 23, 11]) ==\
    \ [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpak9_2avj.jl:29\nin expression starting at\
    \ /tmp/tmpak9_2avj.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    array = copy(array)\n    sort_array(array)\n    return array\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    if length(array) == 0 \n        return array \n    else \n        odd_sum\
    \ = sum(array[1:end-1]) \n        even_sum = sum(array[2:end]) \n        if odd_sum\
    \ % 2 == 1 \n            array = array[sortperm(array)]\n        else \n     \
    \       array = array[sortperm(array, reverse = true)]\n        return array \n\
    \    end\nend\n</code>\n<|/ a tags=sorting,julia |>\n<| a dscore=0 |>\nThe Julia\
    \ standard library has several sorting functions. One of them is sortperm. \n\
    <code>\njulia> sortperm([5,4,3,2,1])\n5-element Array{Int64,1}:\n 1\n 2\n 3\n\
    \ 4\n 5\n</code>\n<|/ a tags=sorting,julia |>\n<| c |>\nThis doesn't answer the\
    \ question. `sortperm` sorts the array in ascending order. OP wants to sort it\
    \ in descending order.\n<|/ c |>\n<| c |>\nThe question was \"how to sort an array\
    \ in descending order\", not \"how to sort an array in ascending order\". `sortperm`\
    \ does exactly what OP wants, it sorts the array in descending order.\n<|/ c |>\n\
    <| c |>\nThe question was \"how to sort an array in descending order\", not \"\
    how to sort an array in ascending order\". `sortperm` does exactly what OP wants,\
    \ it sorts the array in descending order.\n<|/ c |>\n<| c |>\nThe question was\
    \ \"how to sort an array in descending order\", not \"how to sort an array in\
    \ ascending order\". `sortperm` does exactly what OP wants, it sorts the array\
    \ in descending order.\n<|/ c |>\n<| c |>\nThe question was \"how to sort an array\
    \ in descending order\", not \"how to sort an array in ascending order\". `sortperm`\
    \ does exactly what OP wants, it sorts the array in descending order.\n<|/ c |>\n\
    <| a tags=sorting,julia |>\nThe Julia standard library has several sorting functions.\
    \ One of them is sortperm. \n<code>\njulia> sortperm([5,4,3,2,1])\n5-element Array{Int64,1}:\n\
    \ 1\n 2\n 3\n 4\n 5\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't answer\
    \ the question. `sortperm` sorts the array in ascending order. OP wants to sort\
    \ it in descending order.\n<|/ c |>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sort_array;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([5]) == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1,\
    \ 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15, 42, 87, 32,\
    \ 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14, 23, 11]) ==\
    \ [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu79she9k.jl:28\nin expression starting at\
    \ /tmp/tmpu79she9k.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    \n    sum = 0\n    for i in array\n        sum += i\n    end\n    \n \
    \   if sum % 2 == 1\n        array = reverse(array)\n    end\n    \n    return\
    \ array\nend\n</cell>\n<code language=julia-1.5>\nsort_array([])\n</cell>\n<code\
    \ language=julia-1.5>\nsort_array([5])\n</cell>\n<code language=julia-1.5>\nsort_array([2,\
    \ 4, 3, 0, 1, 5])\n</cell>\n<code language=julia-1.5>\nsort_array([2, 4, 3, 0,\
    \ 1, 5, 6])\n</cell>\n<text>\n4.3 Merge Sorting\nMerge sorting is a sorting algorithm\
    \ that works by recursively splitting the input array into two halves and then\
    \ merging the two halves until only one element remains.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5]) == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1,\
    \ 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15, 42, 87, 32,\
    \ 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14, 23, 11]) ==\
    \ [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk1q2ii9o.jl:28\nin expression starting at\
    \ /tmp/tmpk1q2ii9o.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    array = sort(array)\n    if sum(array) % 2 == 1\n        array = reverse(array)\n\
    \    end\n    return array\nend\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5])\
    \ == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1,\
    \ 2])\n\t@test(candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\
    \t@test(candidate([21, 14, 23, 11]) == [23, 21, 14, 11])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpl1kxqagc.jl:29\n  Expression: candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n   Evaluated: [5, 4, 3, 2, 1, 0] == [0,\
    \ 1, 2, 3, 4, 5]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpl1kxqagc.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpl1kxqagc.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpl1kxqagc.jl:31\n  Expression: candidate([2, 1]) == [1, 2]\n\
    \   Evaluated: [2, 1] == [1, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpl1kxqagc.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpl1kxqagc.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpl1kxqagc.jl:32\n  Expression: candidate([15, 42, 87, 32, 11,\
    \ 0]) == [0, 11, 15, 32, 42, 87]\n   Evaluated: [87, 42, 32, 15, 11, 0] == [0,\
    \ 11, 15, 32, 42, 87]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpl1kxqagc.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpl1kxqagc.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpl1kxqagc.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    if length(array) == 0 \n        return array \n    else \n        sum_array\
    \ = sum(array) \n        if sum_array % 2 == 0 \n            array = sort_array(array)\
    \ \n        else \n            array = sort_array(reverse(array)) \n        end\
    \ \n        return array \n    end \nend \n</code>\n<|/ a tags=sorting,arrays,julia\
    \ |>\n<| a dscore=2 |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5])\
    \ == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1,\
    \ 2])\n\t@test(candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\
    \t@test(candidate([21, 14, 23, 11]) == [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp79pz91lu.jl:28\nin expression starting at\
    \ /tmp/tmp79pz91lu.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    \n    if length(array) == 0 \n        return array\n    end\n    \n  \
    \  sum = 0\n    for i in 1:length(array) \n        sum += array[i]\n    end\n\
    \    \n    if sum % 2 == 1 \n        array = reverse(array)\n    end\n    \n \
    \   return array\nend\n</cell>\n<code language=julia-1.5>\nsort_array([])\n</cell>\n\
    <code language=julia-1.5>\nsort_array([5])\n</cell>\n<code language=julia-1.5>\n\
    sort_array([2, 4, 3, 0, 1, 5])\n</cell>\n<code language=julia-1.5>\nsort_array([2,\
    \ 4, 3, 0, 1, 5, 6])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the sum of the numbers in the given array.\nusing Test\n\n@testset begin\n\n\
    candidate = sort_array;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5]) == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1,\
    \ 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15, 42, 87, 32,\
    \ 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14, 23, 11]) ==\
    \ [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprrorzd3s.jl:32\nin expression starting at\
    \ /tmp/tmprrorzd3s.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    if length(array) == 0 \n        return array \n    end\nusing Test\n\n\
    @testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxtp5tzyc.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxtp5tzyc.jl:1\n\
    in expression starting at /tmp/tmpxtp5tzyc.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    array = sort(array)\n    if sum(array) % 2 != 0\n        array = reverse(array)\n\
    \    end\n    return array\nend\n</cell>\n<code language=julia-1.5>\n@test sort_array([])\
    \ == []\n@test sort_array([5]) == [5]\n@test sort_array([2, 4, 3, 0, 1, 5]) ==\
    \ [0, 1, 2, 3, 4, 5]\n@test sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3,\
    \ 2, 1, 0]\n</cell>\n<text>\nExercise 2\nWrite a function that returns the first\
    \ element of a given array, and if the array is empty, return -1.\nusing Test\n\
    \n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj4dq4k6_.jl:22\nin expression starting at\
    \ /tmp/tmpj4dq4k6_.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    array = copy(array)\n    \n    sum = 0\n    for i in array\n        sum\
    \ += i\n    end\n    \n    if sum % 2 == 1\n        sort(array)\n    else\n  \
    \      sort(array, by = x -> -x)\n    end\n    \n    return array\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxt0w6paf.jl:38\n  Expression: candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n   Evaluated: [2, 4, 3, 0, 1, 5] == [0,\
    \ 1, 2, 3, 4, 5]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxt0w6paf.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxt0w6paf.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpxt0w6paf.jl:39\n  Expression: candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0]\n   Evaluated: [2, 4, 3, 0, 1, 5, 6] == [6, 5,\
    \ 4, 3, 2, 1, 0]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxt0w6paf.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxt0w6paf.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpxt0w6paf.jl:40\n  Expression: candidate([2, 1]) == [1, 2]\n\
    \   Evaluated: [2, 1] == [1, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxt0w6paf.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxt0w6paf.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpxt0w6paf.jl:41\n  Expression: candidate([15, 42, 87, 32, 11,\
    \ 0]) == [0, 11, 15, 32, 42, 87]\n   Evaluated: [15, 42, 87, 32, 11, 0] == [0,\
    \ 11, 15, 32, 42, 87]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxt0w6paf.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxt0w6paf.jl:35\ntest set: Test\
    \ Failed at /tmp/tm"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxt0w6paf.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    if length(array) == 0 \n        return array \n    else \n        sum\
    \ = 0\n        for i in array\n            sum += i\n        end\n        if sum\
    \ % 2 == 1 \n            reverse(array)\n            return array \n        else\
    \ \n            return sort(array) \n        end\n    end\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the number of times a given value appears\
    \ in an array.\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxfmxx560.jl:31\nin expression starting at\
    \ /tmp/tmpxfmxx560.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    array = copy(array)\n    \n    sum = 0\n    for i in 1:length(array)\n\
    \        sum += array[i]\n    end\n    \n    if sum % 2 == 1\n        sort(array)\n\
    \    else\n        sort(array, by=(x->-x))\n    end\n    \n    return array\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sort_array;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([5]) == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1,\
    \ 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15, 42, 87, 32,\
    \ 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14, 23, 11]) ==\
    \ [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi1tbec2d.jl:31\nin expression starting at\
    \ /tmp/tmpi1tbec2d.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    \n    sum_array = sum(array)\n    if sum_array % 2 == 1\n        array\
    \ = sort_array_desc(array)\n    else\n        array = sort_array_asc(array)\n\
    \    end\n    return array\nend\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5])\
    \ == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1,\
    \ 2])\n\t@test(candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\
    \t@test(candidate([21, 14, 23, 11]) == [23, 21, 14, 11])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpxk3zmf6r.jl:30\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  UndefVarError:\
    \ sort_array_asc not defined\n  Stacktrace:\n   [1] sort_array(array::Vector{Int64})\n\
    \     @ Main /tmp/tmpxk3zmf6r.jl:21\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxk3zmf6r.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxk3zmf6r.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpxk3zmf6r.jl:31\n  Test threw exception\n  Expression:\
    \ candidate([5]) == [5]\n  UndefVarError: sort_array_desc not defined\n  Stacktrace:\n\
    \   [1] sort_array(array::Vector{Int64})\n     @ Main /tmp/tmpxk3zmf6r.jl:19\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxk3zmf6r.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxk3zmf6r.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpxk3zmf6r.jl:32\n  Test threw exception\n  Expression:\
    \ candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n  UndefVarError: sort_array_desc\
    \ not defined\n  Stacktrace:\n   [1] sort_array(array::Vector{Int64})\n     @\
    \ Main /tmp/tmpxk3zmf6r.jl:19\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxk3zmf6r.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxk3zmf6r.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpxk3zmf6r.jl:33\n  Test threw exception\n  Expression:\
    \ candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n  UndefVarError:\
    \ sort_array_desc not defined\n  Stacktrace:\n   [1] sort_a"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxk3zmf6r.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    \n    array = sort(array)\n    if sum(array) % 2 == 1\n        array =\
    \ reverse(array)\n    end\n    \n    return array\nend\n</cell>\n<code language=julia-1.5>\n\
    sort_array([])\n</cell>\n<code language=julia-1.5>\nsort_array([5])\n</cell>\n\
    <code language=julia-1.5>\nsort_array([2, 4, 3, 0, 1, 5])\n</cell>\n<code language=julia-1.5>\n\
    sort_array([2, 4, 3, 0, 1, 5, 6])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the sum of the given array's elements.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5]) == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1,\
    \ 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15, 42, 87, 32,\
    \ 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14, 23, 11]) ==\
    \ [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0uxxkef_.jl:24\nin expression starting at\
    \ /tmp/tmp0uxxkef_.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    \n    sum = 0\n    for i in array\n        sum += i\n    end\n    if sum\
    \ % 2 != 0\n        array = reverse(array)\n    end\n    return array\nend\n</cell>\n\
    <code language=julia-1.5>\nsort_array([])\n</cell>\n<code language=julia-1.5>\n\
    sort_array([5])\n</cell>\n<code language=julia-1.5>\nsort_array([2, 4, 3, 0, 1,\
    \ 5])\n</cell>\n<code language=julia-1.5>\nsort_array([2, 4, 3, 0, 1, 5, 6])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of times\
    \ the given element appears in the given array.\nusing Test\n\n@testset begin\n\
    \ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5]) == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1,\
    \ 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15, 42, 87, 32,\
    \ 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14, 23, 11]) ==\
    \ [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpid49gq_b.jl:26\nin expression starting at\
    \ /tmp/tmpid49gq_b.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([])\
    \ => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) =>\
    \ [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3,\
    \ 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    if sum(array) == 0 \n        return array \n    else \n        odd = sum(array)\
    \ mod 2 \n        if odd \n            array = sort_array(array[2:end-1]) \n \
    \           array = [array[1], array[2], array[3], array[4], array[5]]\n     \
    \   else \n            array = sort_array(array[1:end-1]) \n            array\
    \ = [array[1], array[2], array[3], array[4], array[5], array[6]]\n        return\
    \ array \n    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5]) == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1,\
    \ 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15, 42, 87, 32,\
    \ 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14, 23, 11]) ==\
    \ [23, 21, 14, 11])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmp5xl4x_0j.jl:16 expected \"\
    end\", got \"mod\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp5xl4x_0j.jl:19\n\
    in expression starting at /tmp/tmp5xl4x_0j.jl:19\n"
  exit_code: 1
  status: SyntaxError
