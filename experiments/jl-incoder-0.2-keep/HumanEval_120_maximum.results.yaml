name: HumanEval_120_maximum
language: julia
results:
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    maximum = arr\n \
    \   for i = 2:k\n        maximum = maximum(maximum(maximum.-arr), maximum)\n \
    \   end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\nmaximum(arr,\
    \ 3)\n</cell>\n<text>\n4.3 Find Minimum\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpjk50t93h.jl:32\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpjk50t93h.jl:32\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k == 0 \n    \
    \    return arr\n    \n    maximums = maximum(arr[1:k], k-1)\n    maximums = [maximums[i]\
    \ + arr[i] if maximums[i] != -Inf else maximums[i] \n                 for i in\
    \ 1:length(maximums)]\n    maximums = maximum(maximums, k)\n    return maximums\n\
    end\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 3)\n</cell>\n<text>\n7.\
    \ \u6700\u5C0F\u503C\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t\
    @test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"]\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpuq3vn2_l.jl:31\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpuq3vn2_l.jl:31\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    maximum = arr\n \
    \   for i = 1:k\n        maximum = maximum(maximum(maximum, arr), arr)\n    end\n\
    \    maximum\nend\n</cell>\n<code language=julia-1.5>\nmaximum(arr, k)\n</cell>\n\
    <text>\n4. Sort an array\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpgwt37ek1.jl:32\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpgwt37ek1.jl:32\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    maximum = arr\n \
    \   for i = 1:k\n        maximum = maximum(maximum(maximum, arr), maximum)\n \
    \   end\n    maximum\nend\n</cell>\n<code language=julia-1.5>\nmaximum(arr, k)\n\
    </cell>\n<text>\nmaximum\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp6xosvqy6.jl:32\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp6xosvqy6.jl:32\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k == 0 \n    \
    \    return arr\n    \n    if k == 1 \n        return arr\n    \n    maximum =\
    \ maximum(maximum(arr, k-1), k-1)\n    maximum = maximum(maximum, arr)\n    \n\
    \    return maximum\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9niet83b.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp9niet83b.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    maximum = arr\n \
    \   for i = 1:k\n        maximum = maximum(maximum(maximum, arr[i]), arr[i+1])\n\
    \    end\n    return maximum\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp6nucytpd.jl:37\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  MethodError: objects\
    \ of type Array{Int64,1} are not callable\n  Use square brackets [] for indexing\
    \ an Array.\n  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp6nucytpd.jl:28\n\
    \   [2] top-level scope at /tmp/tmp6nucytpd.jl:37\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp6nucytpd.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmp6nucytpd.jl:38\n  Test threw exception\n  Expression: candidate([4,\
    \ -4, 4], 2) == [4, 4]\n  MethodError: objects of type Array{Int64,1} are not\
    \ callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n \
    \  [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp6nucytpd.jl:28\n   [2] top-level\
    \ scope at /tmp/tmp6nucytpd.jl:38\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp6nucytpd.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmp6nucytpd.jl:39\n  Test threw exception\n  Expression: candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2]\n  MethodError: objects of type Array{Int64,1}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp6nucytpd.jl:28\n   [2] top-level\
    \ scope at /tmp/tmp6nucytpd.jl:39\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp6nucytpd.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmp6nucytpd.jl:40\n  Test threw exception\n  Expression: candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  MethodError: objects of type Array{Int64,1}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp6nucytpd.jl:28\n   [2] top-level\
    \ scope at /tmp/tmp6nucytpd.jl:40\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp6nucytpd.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmp6nucytpd.jl:41\n  Test threw exception\n  Expression: candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n  MethodError: objects of type Array{Int64,1}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp6nucytpd.jl:28\n   [2] top-level\
    \ scope at /tmp/tmp6nucytpd.jl:41\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp6nucytpd.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmp6nucytpd.jl:42\n  Test threw exception\n  Expression: candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n  MethodError: objects\
    \ of type Array{Int64,1} are not callable\n  Use square brackets [] for indexing\
    \ an Array.\n  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp6nucytpd.jl:28\n\
    \   [2] top-level scope at /tmp/tmp6nucytpd.jl:42\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp6nucytpd.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmp6nucytpd.jl:43\n  Test threw exception\n  Expression: candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n  MethodError: objects of type Array{Int64,1}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp6nucytpd.jl:28\n   [2] top-level\
    \ scope at /tmp/tmp6nucytpd.jl:43\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp6nucytpd.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmp6nucytpd.jl:44\n  Test threw exception\n  Expression: candidate([1,\
    \ 0, 5, -7], 1) == [5]\n  MethodError: objects of type Array{Int64,1} are not\
    \ callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n \
    \  [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp6nucytpd.jl:28\n   [2] top-level\
    \ scope at /tmp/tmp6nucytpd.jl:44\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp6nucytpd.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmp6nucytpd.jl:45\n  Test threw exception\n  Expression: candidate([4,\
    \ -4], 2) == [-4, 4]\n  MethodError: objects of type Array{Int64,1} are not callable\n\
    \  Use square brackets [] for indexing an Array.\n  Stacktrace:\n   [1] maximum(::Array{Int64,1},\
    \ ::Int64) at /tmp/tmp6nucytpd.jl:28\n   [2] top-level scope at /tmp/tmp6nucytpd.jl:45\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp6nucytpd.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmp6nucytpd.jl:46\n  Test threw exception\n  Expression: candidate([-10,\
    \ 10], 2) == [-10, 10]\n  MethodError: objects of type Array{Int64,1} are not\
    \ callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n \
    \  [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp6nucytpd.jl:28\n   [2] top-level\
    \ scope at /tmp/tmp6nucytpd.jl:46\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp6nucytpd.jl:36\n  \ntest set: Test Failed at\
    \ /tmp/tmp6nucytpd.jl:47\n  Expression: candidate([1, 2, 3, -23, 243, -400, 0],\
    \ 0) == Vector{Int64}([])\n   Evaluated: [1, 2, 3, -23, 243, -400, 0] == Int64[]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp6nucytpd.jl:47\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp6nucytpd.jl:36\nTest Summary: | Fail  Error \
    \ Total\ntest set      |    1     10     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 1 failed, 10 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6nucytpd.jl:34\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    maximum = arr\n \
    \   for i = 1:k\n        maximum = maximum(maximum(maximum, arr), arr)\n    end\n\
    \    return maximum\nend\n</cell>\n<code language=julia-1.5>\nmaximum(arr, k)\n\
    </cell>\n<text>\n10.4 \u6700\u5C0F\u503C\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp74ywbz63.jl:32\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp74ywbz63.jl:32\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    maximum = arr\n \
    \   for i = 1:k\n        maximum = maximum(maximum(maximum, arr), maximum)\n \
    \   end\n    return maximum\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpsela1n39.jl:37\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  MethodError: objects\
    \ of type Array{Int64,1} are not callable\n  Use square brackets [] for indexing\
    \ an Array.\n  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpsela1n39.jl:28\n\
    \   [2] top-level scope at /tmp/tmpsela1n39.jl:37\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpsela1n39.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmpsela1n39.jl:38\n  Test threw exception\n  Expression: candidate([4,\
    \ -4, 4], 2) == [4, 4]\n  MethodError: objects of type Array{Int64,1} are not\
    \ callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n \
    \  [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpsela1n39.jl:28\n   [2] top-level\
    \ scope at /tmp/tmpsela1n39.jl:38\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpsela1n39.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmpsela1n39.jl:39\n  Test threw exception\n  Expression: candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2]\n  MethodError: objects of type Array{Int64,1}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpsela1n39.jl:28\n   [2] top-level\
    \ scope at /tmp/tmpsela1n39.jl:39\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpsela1n39.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmpsela1n39.jl:40\n  Test threw exception\n  Expression: candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  MethodError: objects of type Array{Int64,1}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpsela1n39.jl:28\n   [2] top-level\
    \ scope at /tmp/tmpsela1n39.jl:40\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpsela1n39.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmpsela1n39.jl:41\n  Test threw exception\n  Expression: candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n  MethodError: objects of type Array{Int64,1}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpsela1n39.jl:28\n   [2] top-level\
    \ scope at /tmp/tmpsela1n39.jl:41\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpsela1n39.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmpsela1n39.jl:42\n  Test threw exception\n  Expression: candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n  MethodError: objects\
    \ of type Array{Int64,1} are not callable\n  Use square brackets [] for indexing\
    \ an Array.\n  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpsela1n39.jl:28\n\
    \   [2] top-level scope at /tmp/tmpsela1n39.jl:42\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpsela1n39.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmpsela1n39.jl:43\n  Test threw exception\n  Expression: candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n  MethodError: objects of type Array{Int64,1}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpsela1n39.jl:28\n   [2] top-level\
    \ scope at /tmp/tmpsela1n39.jl:43\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpsela1n39.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmpsela1n39.jl:44\n  Test threw exception\n  Expression: candidate([1,\
    \ 0, 5, -7], 1) == [5]\n  MethodError: objects of type Array{Int64,1} are not\
    \ callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n \
    \  [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpsela1n39.jl:28\n   [2] top-level\
    \ scope at /tmp/tmpsela1n39.jl:44\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpsela1n39.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmpsela1n39.jl:45\n  Test threw exception\n  Expression: candidate([4,\
    \ -4], 2) == [-4, 4]\n  MethodError: objects of type Array{Int64,1} are not callable\n\
    \  Use square brackets [] for indexing an Array.\n  Stacktrace:\n   [1] maximum(::Array{Int64,1},\
    \ ::Int64) at /tmp/tmpsela1n39.jl:28\n   [2] top-level scope at /tmp/tmpsela1n39.jl:45\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpsela1n39.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmpsela1n39.jl:46\n  Test threw exception\n  Expression: candidate([-10,\
    \ 10], 2) == [-10, 10]\n  MethodError: objects of type Array{Int64,1} are not\
    \ callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n \
    \  [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpsela1n39.jl:28\n   [2] top-level\
    \ scope at /tmp/tmpsela1n39.jl:46\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpsela1n39.jl:36\n  \ntest set: Test Failed at\
    \ /tmp/tmpsela1n39.jl:47\n  Expression: candidate([1, 2, 3, -23, 243, -400, 0],\
    \ 0) == Vector{Int64}([])\n   Evaluated: [1, 2, 3, -23, 243, -400, 0] == Int64[]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpsela1n39.jl:47\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpsela1n39.jl:36\nTest Summary: | Fail  Error \
    \ Total\ntest set      |    1     10     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 1 failed, 10 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsela1n39.jl:34\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k == 0 \n    \
    \    return arr \n    else \n        maximum = maximum([maximum(arr, k-1), maximum(arr[k:],\
    \ k-1)], k-1) \n        maximum = maximum[minimum(maximum, k-1):end]\n       \
    \ return maximum\nend\n</cell>\n<code language=julia-1.0>\nmaximum(arr, 3)\n</cell>\n\
    <text>\n \nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"k:\" range expression\
    \ \nStacktrace:\n [1] top-level scope at /tmp/tmp0lrlwpmk.jl:29\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp0lrlwpmk.jl:29\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    maximums = Vector{Int64}()\n\
    \    maximums.push(maximum(arr, 1))\n    for i = 2:k\n        maximums.push(maximum(maximums,\
    \ i))\n    end\n    return maximums\nend\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 3)\n</cell>\n<text>\nExercise 3\nWrite a function that finds the\
    \ minimum number in a given array of integers. \nThe function should take in a\
    \ vector of integers and return a single number.\nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpts1qz_a7.jl:33\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpts1qz_a7.jl:33\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    maximum = arr\n \
    \   for i = 2:k\n        maximum = maximum(maximum(maximum, arr), arr[i])\n  \
    \  end\n    maximum\nend\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 3)\n\
    </cell>\n<code language=julia-1.5>\nmaximum(arr, 2)\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 4)\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 5)\n</cell>\n\
    <code language=julia-1.5>\nmaximum(arr, 6)\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 7)\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 8)\n</cell>\n\
    <code language=julia-1.5>\nmaximum(arr, 9)\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 10)\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 11)\n</cell>\n\
    <code language=julia-1.5>\nmaximum(arr, 12)\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 13)\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 14)\n</cell>\n\
    <code language=julia-1.5>\nmaximum(arr, 15)\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 16)\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 17)\n</cell>\n\
    <code language=julia-1.5>\nmaximum(arr, 18)\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 19)\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 20)\n</cell>\n\
    <code language=julia-1.5>\nmaximum(arr, 21)\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 22)\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 23)\n</cell>\n\
    <code language=julia-1.5>\nmaximum(arr, 24)\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 25)\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 26)\n</cell>\n\
    <code language=julia-1.5>\nmaximum(arr, 27)\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 28)\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 29)\n</cell>\n\
    <code language=julia-1.5>\nmaximum(arr, 30)\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 31)\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 32)\n</cell>\n\
    <code language=julia-1.5>\nmaximum(arr, 33)\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 34)\n</cell>\n<code language=julia-1.5>\nmaximum(arr, \nusing Test\n\
    \n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) ==\
    \ [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpkt9gtmys.jl:32\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpkt9gtmys.jl:32\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k == 0 \n    \
    \    return arr\n    else \n        maximum = maximum(maximum(arr, k-1), k-1)\n\
    \        maximum = maximum(maximum, k)\n        return maximum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) ==\
    \ [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpprbt6xa4.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpprbt6xa4.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpprbt6xa4.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k == 0 \n    \
    \    return arr\n    \n    maximum = maximum([arr[k]]) + maximum([arr[k-1]]) if\
    \ k > 0 else arr[k]\n    maximum = maximum([maximum]) + maximum([arr[k-1]]) if\
    \ k > 1 else arr[k]\n    maximum = maximum([maximum]) + maximum([arr[k-1]]) if\
    \ k > 2 else arr[k]\n    maximum = maximum([maximum]) + maximum([arr[k-1]]) if\
    \ k > 3 else arr[k]\n    maximum = maximum([maximum]) + maximum([arr[k-1]]) if\
    \ k > 4 else arr[k]\n    maximum = maximum([maximum]) + maximum([arr[k-1]]) if\
    \ k > 5 else arr[k]\n    maximum = maximum([maximum]) + maximum([arr[k-1]]) if\
    \ k > 6 else arr[k]\n    maximum = maximum([maximum]) + maximum([arr[k-1]]) if\
    \ k > 7 else arr[k]\n    maximum = maximum([maximum]) + maximum([arr[k-1]]) if\
    \ k > 8 else arr[k]\n    maximum = maximum([maximum]) + maximum([arr[k-1]]) if\
    \ k > 9 else arr[k]\n    maximum = maximum([maximum]) + maximum([arr[k-1]]) if\
    \ k > 10 else arr[k]\n    maximum = maximum([maximum]) + maximum([arr[k-1]]) if\
    \ k > 11 else arr[k]\n    maximum = maximum([maximum]) + maximum([arr[k-1]]) if\
    \ k > 12 else arr[k]\n    maximum = maximum([maximum]) + maximum([arr[k-1]]) if\
    \ k > 13 else arr[k]\n    maximum = maximum([maximum]) + maximum([arr[k-1]]) if\
    \ k > 14 else arr[k]\n    maximum = maximum([maximum]) + maximum([arr[k-1]]) if\
    \ k > 15 else arr[k]\n    maximum = maximum([maximum]) + maximum([arr[k-1]]) if\
    \ k > 16 else arr[k]\n    maximum = maximum([maximum]) + maximum([arr[k-1]]) if\
    \ k > 17 else arr[k]\n    maximum = maximum([maximum]) + maximum([arr[k-1]]) if\
    \ k > 18 else arr[k]\n    maximum = maximum([maximum]) + maximum([arr[k-1]]) if\
    \ k > 19 else arr[k]\n    maximum = maximum([maximum]) + maximum([arr[k-1]]) if\
    \ k > 20 else arr[k]\n    maximum = maximum([maximum]) + maximum([arr[k-1]]) if\
    \ k > 21 else arr[k]\n    maximum = maximum([maximum]) + maximum([arr[k-1]]) if\
    \ k > 22 else arr\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"if\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp_91hpmoh.jl:29\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp_91hpmoh.jl:29\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    maximum = arr\n \
    \   for i = 2:k\n        maximum = maximum(maximum(maximum, arr), i)\n    end\n\
    \    maximum\nend\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 3)\n</cell>\n\
    <text>\nExercise 3\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpkvcroa2c.jl:32\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpkvcroa2c.jl:32\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    maximum = arr\n \
    \   for i = 1:k\n        maximum = maximum(maximum(maximum, arr[i]), arr[i+1])\n\
    \    end\n    return maximum\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpy5qoab8t.jl:37\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  MethodError: objects\
    \ of type Array{Int64,1} are not callable\n  Use square brackets [] for indexing\
    \ an Array.\n  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpy5qoab8t.jl:28\n\
    \   [2] top-level scope at /tmp/tmpy5qoab8t.jl:37\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpy5qoab8t.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmpy5qoab8t.jl:38\n  Test threw exception\n  Expression: candidate([4,\
    \ -4, 4], 2) == [4, 4]\n  MethodError: objects of type Array{Int64,1} are not\
    \ callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n \
    \  [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpy5qoab8t.jl:28\n   [2] top-level\
    \ scope at /tmp/tmpy5qoab8t.jl:38\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpy5qoab8t.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmpy5qoab8t.jl:39\n  Test threw exception\n  Expression: candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2]\n  MethodError: objects of type Array{Int64,1}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpy5qoab8t.jl:28\n   [2] top-level\
    \ scope at /tmp/tmpy5qoab8t.jl:39\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpy5qoab8t.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmpy5qoab8t.jl:40\n  Test threw exception\n  Expression: candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  MethodError: objects of type Array{Int64,1}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpy5qoab8t.jl:28\n   [2] top-level\
    \ scope at /tmp/tmpy5qoab8t.jl:40\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpy5qoab8t.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmpy5qoab8t.jl:41\n  Test threw exception\n  Expression: candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n  MethodError: objects of type Array{Int64,1}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpy5qoab8t.jl:28\n   [2] top-level\
    \ scope at /tmp/tmpy5qoab8t.jl:41\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpy5qoab8t.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmpy5qoab8t.jl:42\n  Test threw exception\n  Expression: candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n  MethodError: objects\
    \ of type Array{Int64,1} are not callable\n  Use square brackets [] for indexing\
    \ an Array.\n  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpy5qoab8t.jl:28\n\
    \   [2] top-level scope at /tmp/tmpy5qoab8t.jl:42\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpy5qoab8t.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmpy5qoab8t.jl:43\n  Test threw exception\n  Expression: candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n  MethodError: objects of type Array{Int64,1}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpy5qoab8t.jl:28\n   [2] top-level\
    \ scope at /tmp/tmpy5qoab8t.jl:43\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpy5qoab8t.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmpy5qoab8t.jl:44\n  Test threw exception\n  Expression: candidate([1,\
    \ 0, 5, -7], 1) == [5]\n  MethodError: objects of type Array{Int64,1} are not\
    \ callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n \
    \  [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpy5qoab8t.jl:28\n   [2] top-level\
    \ scope at /tmp/tmpy5qoab8t.jl:44\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpy5qoab8t.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmpy5qoab8t.jl:45\n  Test threw exception\n  Expression: candidate([4,\
    \ -4], 2) == [-4, 4]\n  MethodError: objects of type Array{Int64,1} are not callable\n\
    \  Use square brackets [] for indexing an Array.\n  Stacktrace:\n   [1] maximum(::Array{Int64,1},\
    \ ::Int64) at /tmp/tmpy5qoab8t.jl:28\n   [2] top-level scope at /tmp/tmpy5qoab8t.jl:45\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpy5qoab8t.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmpy5qoab8t.jl:46\n  Test threw exception\n  Expression: candidate([-10,\
    \ 10], 2) == [-10, 10]\n  MethodError: objects of type Array{Int64,1} are not\
    \ callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n \
    \  [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpy5qoab8t.jl:28\n   [2] top-level\
    \ scope at /tmp/tmpy5qoab8t.jl:46\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpy5qoab8t.jl:36\n  \ntest set: Test Failed at\
    \ /tmp/tmpy5qoab8t.jl:47\n  Expression: candidate([1, 2, 3, -23, 243, -400, 0],\
    \ 0) == Vector{Int64}([])\n   Evaluated: [1, 2, 3, -23, 243, -400, 0] == Int64[]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpy5qoab8t.jl:47\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpy5qoab8t.jl:36\nTest Summary: | Fail  Error \
    \ Total\ntest set      |    1     10     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 1 failed, 10 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpy5qoab8t.jl:34\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    maximums = Vector{Int64}()\n\
    \    maximums = maximums.+([arr[i]] for i in range(1, k))\n    maximums = maximums.+([arr[i]]\
    \ for i in range(k+1, length(arr)))\n    maximums = maximums.+([arr[i]] for i\
    \ in range(1, length(arr)))\n    maximums = maximums.+([arr[i]] for i in range(1,\
    \ length(arr)))\n    maximums = maximums.+([arr[i]] for i in range(1, length(arr)))\n\
    \    maximums = maximums.+([arr[i]] for i in range(1, length(arr)))\n    maximums\
    \ = maximums.+([arr[i]] for i in range(1, length(arr)))\n    maximums = maximums.+([arr[i]]\
    \ for i in range(1, length(arr)))\n    maximums = maximums.+([arr[i]] for i in\
    \ range(1, length(arr)))\n    maximums = maximums.+([arr[i]] for i in range(1,\
    \ length(arr)))\n    maximums = maximums.+([arr[i]] for i in range(1, length(arr)))\n\
    \    maximums = maximums.+([arr[i]] for i in range(1, length(arr)))\n    maximums\
    \ = maximums.+([arr[i]] for i in range(1, length(arr)))\n    maximums = maximums.+([arr[i]]\
    \ for i in range(1, length(arr)))\n    maximums = maximums.+([arr[i]] for i in\
    \ range(1, length(arr)))\n    maximums = maximums.+([arr[i]] for i in range(1,\
    \ length(arr)))\n    maximums = maximums.+([arr[i]] for i in range(1, length(arr)))\n\
    \    maximums = maximums.+([arr[i]] for i in range(1, length(arr)))\n    maximums\
    \ = maximums.+([arr[i]] for i in range(1, length(arr)))\n    maximums = maximums.+([arr[i]]\
    \ for i in range(1, length(arr)))\n    maximums = maximums.+([arr[i]] for i in\
    \ range(1, length(arr)))\n    maximums = maximums.+([arr[i]] for i in range(1,\
    \ length(arr)))\n    maximums = maximums.+([arr[i]] for i in range(1, length(arr)))\n\
    \    maximums = maximums.+([arr[i]] for i in range(1, length(arr)))\n    maximums\
    \ = maximums.+([arr[i]] for i in range(1, length(arr)))\n    maximums = maximums.+([arr[i]]\
    \ for i in range(1, length(arr)))\n    maximums = maximums.+([arr[i]] for i in\
    \ range(1, length(arr)))\n    maximums = maximums.+([arr[i]] for i in range(1,\
    \ length(arr)))\n    maximums = maximums.+([arr[i]] for i in range(1, length(arr)))\n\
    \    maximums = maximums.+([arr[i]] for i in range(1, length(arr)))\n    maximums\
    \ = maximums.+([arr[i]] for i in range(1, length(arr)))\n    maximums = maximums.+([\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpcfxegfcz.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpcfxegfcz.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    maximum = arr\n \
    \   for i = k+1:length(arr)\n        maximum[i] = maximum(maximum, arr[i])\n \
    \   end\n    return maximum\nend\n</cell>\n<code language=julia-1.0>\nmaximum(arr,\
    \ 3)\n</cell>\n<text>\n6.3 Find Minimum\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmppx1oqxma.jl:32\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmppx1oqxma.jl:32\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    maximums = Vector{Int64}()\n\
    \    for ele in arr\n        if ele > maximums[k]\n            maximums[k] = ele\n\
    \        end\n    end\n    return maximums\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp7uaj23sv.jl:39\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  BoundsError: attempt\
    \ to access 0-element Array{Int64,1} at index [3]\n  Stacktrace:\n   [1] getindex\
    \ at ./array.jl:788 [inlined]\n   [2] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp7uaj23sv.jl:28\n\
    \   [3] top-level scope at /tmp/tmp7uaj23sv.jl:39\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmp7uaj23sv.jl:38\n  \ntest set: Error During\
    \ Test at /tmp/tmp7uaj23sv.jl:40\n  Test threw exception\n  Expression: candidate([4,\
    \ -4, 4], 2) == [4, 4]\n  BoundsError: attempt to access 0-element Array{Int64,1}\
    \ at index [2]\n  Stacktrace:\n   [1] getindex at ./array.jl:788 [inlined]\n \
    \  [2] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp7uaj23sv.jl:28\n   [3] top-level\
    \ scope at /tmp/tmp7uaj23sv.jl:40\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmp7uaj23sv.jl:38\n  \ntest set: Error During\
    \ Test at /tmp/tmp7uaj23sv.jl:41\n  Test threw exception\n  Expression: candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2]\n  BoundsError: attempt to access 0-element Array{Int64,1}\
    \ at index [1]\n  Stacktrace:\n   [1] getindex at ./array.jl:788 [inlined]\n \
    \  [2] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp7uaj23sv.jl:28\n   [3] top-level\
    \ scope at /tmp/tmp7uaj23sv.jl:41\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmp7uaj23sv.jl:38\n  \ntest set: Error During\
    \ Test at /tmp/tmp7uaj23sv.jl:42\n  Test threw exception\n  Expression: candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  BoundsError: attempt to access\
    \ 0-element Array{Int64,1} at index [3]\n  Stacktrace:\n   [1] getindex at ./array.jl:788\
    \ [inlined]\n   [2] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp7uaj23sv.jl:28\n\
    \   [3] top-level scope at /tmp/tmp7uaj23sv.jl:42\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmp7uaj23sv.jl:38\n  \ntest set: Error During\
    \ Test at /tmp/tmp7uaj23sv.jl:43\n  Test threw exception\n  Expression: candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n  BoundsError: attempt to access 0-element\
    \ Array{Int64,1} at index [4]\n  Stacktrace:\n   [1] getindex at ./array.jl:788\
    \ [inlined]\n   [2] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp7uaj23sv.jl:28\n\
    \   [3] top-level scope at /tmp/tmp7uaj23sv.jl:43\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmp7uaj23sv.jl:38\n  \ntest set: Error During\
    \ Test at /tmp/tmp7uaj23sv.jl:44\n  Test threw exception\n  Expression: candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n  BoundsError: attempt\
    \ to access 0-element Array{Int64,1} at index [7]\n  Stacktrace:\n   [1] getindex\
    \ at ./array.jl:788 [inlined]\n   [2] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp7uaj23sv.jl:28\n\
    \   [3] top-level scope at /tmp/tmp7uaj23sv.jl:44\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmp7uaj23sv.jl:38\n  \ntest set: Error During\
    \ Test at /tmp/tmp7uaj23sv.jl:45\n  Test threw exception\n  Expression: candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n  BoundsError: attempt to access 0-element Array{Int64,1}\
    \ at index [2]\n  Stacktrace:\n   [1] getindex at ./array.jl:788 [inlined]\n \
    \  [2] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp7uaj23sv.jl:28\n   [3] top-level\
    \ scope at /tmp/tmp7uaj23sv.jl:45\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmp7uaj23sv.jl:38\n  \ntest set: Error During\
    \ Test at /tmp/tmp7uaj23sv.jl:46\n  Test threw exception\n  Expression: candidate([1,\
    \ 0, 5, -7], 1) == [5]\n  BoundsError: attempt to access 0-element Array{Int64,1}\
    \ at index [1]\n  Stacktrace:\n   [1] getindex at ./array.jl:788 [inlined]\n \
    \  [2] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp7uaj23sv.jl:28\n   [3] top-level\
    \ scope at /tmp/tmp7uaj23sv.jl:46\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmp7uaj23sv.jl:38\n  \ntest set: Error During\
    \ Test at /tmp/tmp7uaj23sv.jl:47\n  Test threw exception\n  Expression: candidate([4,\
    \ -4], 2) == [-4, 4]\n  BoundsError: attempt to access 0-element Array{Int64,1}\
    \ at index [2]\n  Stacktrace:\n   [1] getindex at ./array.jl:788 [inlined]\n \
    \  [2] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp7uaj23sv.jl:28\n   [3] top-level\
    \ scope at /tmp/tmp7uaj23sv.jl:47\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmp7uaj23sv.jl:38\n  \ntest set: Error During\
    \ Test at /tmp/tmp7uaj23sv.jl:48\n  Test threw exception\n  Expression: candidate([-10,\
    \ 10], 2) == [-10, 10]\n  BoundsError: attempt to access 0-element Array{Int64,1}\
    \ at index [2]\n  Stacktrace:\n   [1] getindex at ./array.jl:788 [inlined]\n \
    \  [2] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp7uaj23sv.jl:28\n   [3] top-level\
    \ scope at /tmp/tmp7uaj23sv.jl:48\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmp7uaj23sv.jl:38\n  \ntest set: Error During\
    \ Test at /tmp/tmp7uaj23sv.jl:49\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([])\n  BoundsError: attempt to\
    \ access 0-element Array{Int64,1} at index [0]\n  Stacktrace:\n   [1] getindex\
    \ at ./array.jl:788 [inlined]\n   [2] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp7uaj23sv.jl:28\n\
    \   [3] top-level scope at /tmp/tmp7uaj23sv.jl:49\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmp7uaj23sv.jl:38\n  \nTest Summary: | Error \
    \ Total\ntest set      |    11     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7uaj23sv.jl:36\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    maximum = arr\n \
    \   for i = 1:k\n        maximum = maximum(maximum(maximum, arr), maximum)\n \
    \   end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\nmaximum(arr,\
    \ 3)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the minimum number\
    \ in a given array of integers.\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp5x7zbzjf.jl:32\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp5x7zbzjf.jl:32\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    maximums = Vector{Int64}()\n\
    \    maximums.push(maximum(arr, 1))\n    maximums.push(maximum(arr, 2))\n    maximums.push(maximum(arr,\
    \ 3))\n    maximums.push(maximum(arr, 4))\n    maximums.push(maximum(arr, 5))\n\
    \    maximums.push(maximum(arr, 6))\n    maximums.push(maximum(arr, 7))\n    maximums.push(maximum(arr,\
    \ 8))\n    maximums.push(maximum(arr, 9))\n    maximums.push(maximum(arr, 10))\n\
    \    maximums.push(maximum(arr, 11))\n    maximums.push(maximum(arr, 12))\n  \
    \  maximums.push(maximum(arr, 13))\n    maximums.push(maximum(arr, 14))\n    maximums.push(maximum(arr,\
    \ 15))\n    maximums.push(maximum(arr, 16))\n    maximums.push(maximum(arr, 17))\n\
    \    maximums.push(maximum(arr, 18))\n    maximums.push(maximum(arr, 19))\n  \
    \  maximums.push(maximum(arr, 20))\n    maximums.push(maximum(arr, 21))\n    maximums.push(maximum(arr,\
    \ 22))\n    maximums.push(maximum(arr, 23))\n    maximums.push(maximum(arr, 24))\n\
    \    maximums.push(maximum(arr, 25))\n    maximums.push(maximum(arr, 26))\n  \
    \  maximums.push(maximum(arr, 27))\n    maximums.push(maximum(arr, 28))\n    maximums.push(maximum(arr,\
    \ 29))\n    maximums.push(maximum(arr, 30))\n    maximums.push(maximum(arr, 31))\n\
    \    maximums.push(maximum(arr, 32))\n    maximums.push(maximum(arr, 33))\n  \
    \  maximums.push(maximum(arr, 34))\n    maximums.push(maximum(arr, 35))\n    maximums.push(maximum(arr,\
    \ 36))\n    maximums.push(maximum(arr, 37))\n    maximums.push(maximum(arr, 38))\n\
    \    maximums.push(maximum(arr, 39))\n    maximums.push(maximum(arr, 40))\n  \
    \  maximums.push(maximum(arr, 41))\n    maximums.push(maximum(arr, 42))\n    maximums.push(maximum(arr,\
    \ 43))\n    maximums.push(maximum(arr, 44))\n    maximums.push(maximum(arr, 45))\n\
    \    maximums.push(maximum(arr, 46))\n    maximums.push(maximum(arr, 47))\n  \
    \  maximums.push(maximum(arr, 48))\n    maximums.push(maximum(arr, 49))\n    maximums.push(maximum(arr,\
    \ 50))\n    maximums.push(maximum(arr, 51))\n    maximums.push(maximum(arr, 52))\n\
    \    maximums.push(maximum(arr, 53))\n    maximums.push(maximum(arr, 54))\n  \
    \  maximums.push(maximum(arr, 55))\n    maximums.push(maximum(arr, 56))\n    maximums.push(maximum(arr,\
    \ 57))\n    maximums.push(maximum(arr, 58))\n    maximums.push(maximum(arr, 59))\n\
    \    maximums.push(maximum(arr, 60))\n    maximums.push(maximum(arr, 61))\n  \
    \  maximums.push(maximum(arr, 62))\n    maximums.push(maximum(arr, 63))\n    maximums.push(maximum(arr,\
    \ 64))\n    maximum\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t\
    @test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7bscehxg.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp7bscehxg.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp7bscehxg.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k == 0 \n    \
    \    return arr \n    else \n        maximum = maximum(maximum(arr,k-1),k) \n\
    \        maximum[end] = maximum(maximum(arr,k-1),k) \n        return maximum \n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp3l2_bunj.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp3l2_bunj.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp3l2_bunj.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    maximum = arr\n \
    \   for i = 1:k\n        maximum = maximum(maximum(maximum, arr), arr[i])\n  \
    \  end\n    maximum\nend\n</cell>\n<code language=julia-1.5>\nmaximum(arr, k)\n\
    </cell>\n<text>\n13. \u6700\u5C0F\u503C\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpp0yjy4e5.jl:32\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpp0yjy4e5.jl:32\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    maximums = Vector{Int64}()\n\
    \    maximums = maximums[-k+1:k+1]\n    for x in arr\n        if x < maximums[k]\n\
    \            maximums[k] = x\n        end\n    end\n    maximums\nend\n</cell>\n\
    <code language=julia-1.5>\nmaximum(arr, 3)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes in an array of integers and a positive integer k, and\
    \ returns a sorted list of length k with the minimum k numbers in arr. \nFor example,\
    \ if the array is [4, -4, 4], and k = 3, then the function should return [-4,\
    \ -4, 4]. \nIf the array is [4, -4, 4], and k = 2, then the function should return\
    \ [4, -4]. \nIf the array is [-3, 2, 1, 2, -1, -2, 1], k = 1 (the array has only\
    \ one element), then the function should return [2]. \nIf the array is [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 2, then the function should return [-2, -1, -2, 1, 2].\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpz0d432jk.jl:35\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpz0d432jk.jl:35\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    maximum = arr\n \
    \   for i = 2:k\n        maximum = maximum(maximum(maximum.-arr), maximum)\n \
    \   end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\nmaximum(arr,\
    \ k)\n</cell>\n<text>\n6. \u6700\u5C0F\u503C\nusing Test\n\n@testset begin\n\n\
    candidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_xtm0_ai.jl:32\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_xtm0_ai.jl:32\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    maximum = arr\n \
    \   for i = 1:k\n        maximum = maximum(maximum(maximum, arr), arr[i])\n  \
    \  end\n    return maximum\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmps5r7o4mh.jl:37\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  MethodError: objects\
    \ of type Array{Int64,1} are not callable\n  Use square brackets [] for indexing\
    \ an Array.\n  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmps5r7o4mh.jl:28\n\
    \   [2] top-level scope at /tmp/tmps5r7o4mh.jl:37\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmps5r7o4mh.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmps5r7o4mh.jl:38\n  Test threw exception\n  Expression: candidate([4,\
    \ -4, 4], 2) == [4, 4]\n  MethodError: objects of type Array{Int64,1} are not\
    \ callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n \
    \  [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmps5r7o4mh.jl:28\n   [2] top-level\
    \ scope at /tmp/tmps5r7o4mh.jl:38\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmps5r7o4mh.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmps5r7o4mh.jl:39\n  Test threw exception\n  Expression: candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2]\n  MethodError: objects of type Array{Int64,1}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmps5r7o4mh.jl:28\n   [2] top-level\
    \ scope at /tmp/tmps5r7o4mh.jl:39\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmps5r7o4mh.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmps5r7o4mh.jl:40\n  Test threw exception\n  Expression: candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  MethodError: objects of type Array{Int64,1}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmps5r7o4mh.jl:28\n   [2] top-level\
    \ scope at /tmp/tmps5r7o4mh.jl:40\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmps5r7o4mh.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmps5r7o4mh.jl:41\n  Test threw exception\n  Expression: candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n  MethodError: objects of type Array{Int64,1}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmps5r7o4mh.jl:28\n   [2] top-level\
    \ scope at /tmp/tmps5r7o4mh.jl:41\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmps5r7o4mh.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmps5r7o4mh.jl:42\n  Test threw exception\n  Expression: candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n  MethodError: objects\
    \ of type Array{Int64,1} are not callable\n  Use square brackets [] for indexing\
    \ an Array.\n  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmps5r7o4mh.jl:28\n\
    \   [2] top-level scope at /tmp/tmps5r7o4mh.jl:42\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmps5r7o4mh.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmps5r7o4mh.jl:43\n  Test threw exception\n  Expression: candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n  MethodError: objects of type Array{Int64,1}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmps5r7o4mh.jl:28\n   [2] top-level\
    \ scope at /tmp/tmps5r7o4mh.jl:43\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmps5r7o4mh.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmps5r7o4mh.jl:44\n  Test threw exception\n  Expression: candidate([1,\
    \ 0, 5, -7], 1) == [5]\n  MethodError: objects of type Array{Int64,1} are not\
    \ callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n \
    \  [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmps5r7o4mh.jl:28\n   [2] top-level\
    \ scope at /tmp/tmps5r7o4mh.jl:44\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmps5r7o4mh.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmps5r7o4mh.jl:45\n  Test threw exception\n  Expression: candidate([4,\
    \ -4], 2) == [-4, 4]\n  MethodError: objects of type Array{Int64,1} are not callable\n\
    \  Use square brackets [] for indexing an Array.\n  Stacktrace:\n   [1] maximum(::Array{Int64,1},\
    \ ::Int64) at /tmp/tmps5r7o4mh.jl:28\n   [2] top-level scope at /tmp/tmps5r7o4mh.jl:45\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmps5r7o4mh.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmps5r7o4mh.jl:46\n  Test threw exception\n  Expression: candidate([-10,\
    \ 10], 2) == [-10, 10]\n  MethodError: objects of type Array{Int64,1} are not\
    \ callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n \
    \  [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmps5r7o4mh.jl:28\n   [2] top-level\
    \ scope at /tmp/tmps5r7o4mh.jl:46\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmps5r7o4mh.jl:36\n  \ntest set: Test Failed at\
    \ /tmp/tmps5r7o4mh.jl:47\n  Expression: candidate([1, 2, 3, -23, 243, -400, 0],\
    \ 0) == Vector{Int64}([])\n   Evaluated: [1, 2, 3, -23, 243, -400, 0] == Int64[]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmps5r7o4mh.jl:47\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmps5r7o4mh.jl:36\nTest Summary: | Fail  Error \
    \ Total\ntest set      |    1     10     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 1 failed, 10 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmps5r7o4mh.jl:34\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    maximum = arr\n \
    \   for i = 1:k\n        maximum = maximum(maximum(maximum.-minimum(maximum)))\n\
    \    end\n    return maximum\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpiwyps1ud.jl:37\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  MethodError: objects\
    \ of type Array{Int64,1} are not callable\n  Use square brackets [] for indexing\
    \ an Array.\n  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpiwyps1ud.jl:28\n\
    \   [2] top-level scope at /tmp/tmpiwyps1ud.jl:37\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpiwyps1ud.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmpiwyps1ud.jl:38\n  Test threw exception\n  Expression: candidate([4,\
    \ -4, 4], 2) == [4, 4]\n  MethodError: objects of type Array{Int64,1} are not\
    \ callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n \
    \  [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpiwyps1ud.jl:28\n   [2] top-level\
    \ scope at /tmp/tmpiwyps1ud.jl:38\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpiwyps1ud.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmpiwyps1ud.jl:39\n  Test threw exception\n  Expression: candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2]\n  MethodError: objects of type Array{Int64,1}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpiwyps1ud.jl:28\n   [2] top-level\
    \ scope at /tmp/tmpiwyps1ud.jl:39\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpiwyps1ud.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmpiwyps1ud.jl:40\n  Test threw exception\n  Expression: candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  MethodError: objects of type Array{Int64,1}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpiwyps1ud.jl:28\n   [2] top-level\
    \ scope at /tmp/tmpiwyps1ud.jl:40\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpiwyps1ud.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmpiwyps1ud.jl:41\n  Test threw exception\n  Expression: candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n  MethodError: objects of type Array{Int64,1}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpiwyps1ud.jl:28\n   [2] top-level\
    \ scope at /tmp/tmpiwyps1ud.jl:41\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpiwyps1ud.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmpiwyps1ud.jl:42\n  Test threw exception\n  Expression: candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n  MethodError: objects\
    \ of type Array{Int64,1} are not callable\n  Use square brackets [] for indexing\
    \ an Array.\n  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpiwyps1ud.jl:28\n\
    \   [2] top-level scope at /tmp/tmpiwyps1ud.jl:42\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpiwyps1ud.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmpiwyps1ud.jl:43\n  Test threw exception\n  Expression: candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n  MethodError: objects of type Array{Int64,1}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpiwyps1ud.jl:28\n   [2] top-level\
    \ scope at /tmp/tmpiwyps1ud.jl:43\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpiwyps1ud.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmpiwyps1ud.jl:44\n  Test threw exception\n  Expression: candidate([1,\
    \ 0, 5, -7], 1) == [5]\n  MethodError: objects of type Array{Int64,1} are not\
    \ callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n \
    \  [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpiwyps1ud.jl:28\n   [2] top-level\
    \ scope at /tmp/tmpiwyps1ud.jl:44\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpiwyps1ud.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmpiwyps1ud.jl:45\n  Test threw exception\n  Expression: candidate([4,\
    \ -4], 2) == [-4, 4]\n  MethodError: objects of type Array{Int64,1} are not callable\n\
    \  Use square brackets [] for indexing an Array.\n  Stacktrace:\n   [1] maximum(::Array{Int64,1},\
    \ ::Int64) at /tmp/tmpiwyps1ud.jl:28\n   [2] top-level scope at /tmp/tmpiwyps1ud.jl:45\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpiwyps1ud.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmpiwyps1ud.jl:46\n  Test threw exception\n  Expression: candidate([-10,\
    \ 10], 2) == [-10, 10]\n  MethodError: objects of type Array{Int64,1} are not\
    \ callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n \
    \  [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpiwyps1ud.jl:28\n   [2] top-level\
    \ scope at /tmp/tmpiwyps1ud.jl:46\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpiwyps1ud.jl:36\n  \ntest set: Test Failed at\
    \ /tmp/tmpiwyps1ud.jl:47\n  Expression: candidate([1, 2, 3, -23, 243, -400, 0],\
    \ 0) == Vector{Int64}([])\n   Evaluated: [1, 2, 3, -23, 243, -400, 0] == Int64[]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpiwyps1ud.jl:47\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpiwyps1ud.jl:36\nTest Summary: | Fail  Error \
    \ Total\ntest set      |    1     10     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 1 failed, 10 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpiwyps1ud.jl:34\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k > length(arr)\
    \ \n        error(\"k should be less than or equal to the length of arr\") \n\
    \    else \n        maximum = arr \n        for i in 1:k \n            maximum\
    \ = maximum(maximum(maximum, arr[i]), arr[i]) \n        end \n        return maximum\
    \ \n    end \nend \n\"\"\"\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the minimum k numbers\
    \ in arr.\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmplhet5xx3.jl:36\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmplhet5xx3.jl:36\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    maximum = arr\n \
    \   for i = 1:k\n        maximum = maximum(maximum(maximum, arr[i]), arr[i+1])\n\
    \    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\nmaximum(arr,\
    \ 3)\n</cell>\n<text>\n6.3 Find Minimum\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmps7eyi2hu.jl:32\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmps7eyi2hu.jl:32\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    maximum = arr\n \
    \   for i = 2:k\n        maximum = maximum(maximum(maximum, arr), i)\n    end\n\
    \    maximum\nend\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 3)\n</cell>\n\
    <text>\nProblem 3\nGiven an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the minimum k numbers in arr.\nusing Test\n\
    \n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) ==\
    \ [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpnyrexjet.jl:32\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpnyrexjet.jl:32\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k > length(arr)\n\
    \        throw(ArgumentError(\"k must be less than or equal to the length of the\
    \ array\"))\n    end\n    maximum = arr\n    for i = k+1:length(arr)\n       \
    \ maximum = maximum(maximum(maximum, arr[i]), maximum)\n    end\n    return maximum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2t8akruq.jl:40\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [-3, -4, 5] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2t8akruq.jl:40\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp2t8akruq.jl:39\ntest set: Error During Test at\
    \ /tmp/tmp2t8akruq.jl:41\n  Test threw exception\n  Expression: candidate([4,\
    \ -4, 4], 2) == [4, 4]\n  MethodError: objects of type Array{Int64,1} are not\
    \ callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n \
    \  [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp2t8akruq.jl:31\n   [2] top-level\
    \ scope at /tmp/tmp2t8akruq.jl:41\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp2t8akruq.jl:39\n  \ntest set: Error During\
    \ Test at /tmp/tmp2t8akruq.jl:42\n  Test threw exception\n  Expression: candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2]\n  MethodError: objects of type Array{Int64,1}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp2t8akruq.jl:31\n   [2] top-level\
    \ scope at /tmp/tmp2t8akruq.jl:42\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp2t8akruq.jl:39\n  \ntest set: Error During\
    \ Test at /tmp/tmp2t8akruq.jl:43\n  Test threw exception\n  Expression: candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  MethodError: objects of type Array{Int64,1}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp2t8akruq.jl:31\n   [2] top-level\
    \ scope at /tmp/tmp2t8akruq.jl:43\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp2t8akruq.jl:39\n  \ntest set: Error During\
    \ Test at /tmp/tmp2t8akruq.jl:44\n  Test threw exception\n  Expression: candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n  MethodError: objects of type Array{Int64,1}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp2t8akruq.jl:31\n   [2] top-level\
    \ scope at /tmp/tmp2t8akruq.jl:44\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp2t8akruq.jl:39\n  \ntest set: Test Failed at\
    \ /tmp/tmp2t8akruq.jl:45\n  Expression: candidate([5, 15, 0, 3, -13, -8, 0], 7)\
    \ == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [5, 15, 0, 3, -13, -8, 0] == [-13,\
    \ -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] top-level scope at /tmp/tmp2t8akruq.jl:45\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp2t8akruq.jl:39\ntest set: Error During Test at\
    \ /tmp/tmp2t8akruq.jl:46\n  Test threw exception\n  Expression: candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n  MethodError: objects of type Array{Int64,1}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp2t8akruq.jl:31\n   [2] top-level\
    \ scope at /tmp/tmp2t8akruq.jl:46\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp2t8akruq.jl:39\n  \ntest set: Error During\
    \ Test at /tmp/tmp2t8akruq.jl:47\n  Test threw exception\n  Expression: candidate([1,\
    \ 0, 5, -7], 1) == [5]\n  MethodError: objects of type Array{Int64,1} are not\
    \ callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n \
    \  [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp2t8akruq.jl:31\n   [2] top-level\
    \ scope at /tmp/tmp2t8akruq.jl:47\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp2t8akruq.jl:39\n  \ntest set: Test Failed at\
    \ /tmp/tmp2t8akruq.jl:48\n  Expression: candidate([4, -4], 2) == [-4, 4]\n   Evaluated:\
    \ [4, -4] == [-4, 4]\nStacktrace:\n [1] top-level scope at /tmp/tmp2t8akruq.jl:48\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp2t8akruq.jl:39\ntest set: Error During Test at\
    \ /tmp/tmp2t8akruq.jl:50\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([])\n  MethodError: objects of\
    \ type Array{Int64,1} are not callable\n  Use square brackets [] for indexing\
    \ an Array.\n  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp2t8akruq.jl:31\n\
    \   [2] top-level scope at /tmp/tmp2t8akruq.jl:50\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp2t8akruq.jl:39\n  \nTest Summary: | Pass  Fail\
    \  Error  Total\ntest set      |    1     3      7     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2t8akruq.jl:37\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    maximum = arr\n \
    \   for i = 1:k\n        maximum = maximum(maximum(maximum, arr), arr)\n    end\n\
    \    return maximum\nend\n</cell>\n<code language=julia-1.5>\nmaximum(arr, k)\n\
    </cell>\n<text>\n13. \u6700\u5C0F\u503C\nGiven an array arr of integers and a\
    \ positive integer k, return a sorted list \n    of length k with the minimum\
    \ k numbers in arr.\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t\
    @test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpgop6zp_z.jl:32\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpgop6zp_z.jl:32\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k == 0 \n    \
    \    return arr\n    else \n        maximum = maximum(maximum(arr, k-1), k-1)\n\
    \        maximum[end] = maximum(maximum(arr, k-1), k-1)[end]\n        return maximum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpuzmy9tui.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpuzmy9tui.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpuzmy9tui.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    maximum = arr\n \
    \   for i = 2:k\n        maximum = maximum(maximum(maximum, arr), maximum)\n \
    \   end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\nmaximum(arr,\
    \ 3)\n</cell>\n<text>\n4.3 Find Minimum\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp0i5s_m7h.jl:32\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp0i5s_m7h.jl:32\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k == 0 \n    \
    \    return arr \n    else \n        maximum = maximum(maximum(arr, k-1), k) \n\
    \        maximum[end] = maximum(maximum(arr, k-1), k) \n        return maximum\
    \ \nend\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 3)\n</cell>\n<text>\n\
    7. Kth Smallest Element in a BST\nGiven a binary search tree and a value x, find\
    \ kth smallest element in it.\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp12q2o5ey.jl:33\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp12q2o5ey.jl:33\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    maximum = arr\n \
    \   for i = 1:k\n        maximum = maximum(maximum(maximum, arr), arr)\n    end\n\
    \    maximum\nend\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 3)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that accepts an array of integers and an\
    \ integer k, and returns a sorted array with the maximum k numbers in arr. \n\
    For example, given arr = [-3, -4, 5], and k = 3, the function should return [-4,\
    \ -3, 5].\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpqddkexq7.jl:32\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpqddkexq7.jl:32\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    maximum = arr\n \
    \   for i = 2:k\n        maximum = maximum(maximum(maximum.-minimum(maximum)),\
    \ maximum)\n    end\n    return maximum\nend\nusing Test\n\n@testset begin\n\n\
    candidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp9_xo_aka.jl:37\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  MethodError: objects\
    \ of type Array{Int64,1} are not callable\n  Use square brackets [] for indexing\
    \ an Array.\n  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp9_xo_aka.jl:28\n\
    \   [2] top-level scope at /tmp/tmp9_xo_aka.jl:37\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp9_xo_aka.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmp9_xo_aka.jl:38\n  Test threw exception\n  Expression: candidate([4,\
    \ -4, 4], 2) == [4, 4]\n  MethodError: objects of type Array{Int64,1} are not\
    \ callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n \
    \  [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp9_xo_aka.jl:28\n   [2] top-level\
    \ scope at /tmp/tmp9_xo_aka.jl:38\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp9_xo_aka.jl:36\n  \ntest set: Test Failed at\
    \ /tmp/tmp9_xo_aka.jl:39\n  Expression: candidate([-3, 2, 1, 2, -1, -2, 1], 1)\
    \ == [2]\n   Evaluated: [-3, 2, 1, 2, -1, -2, 1] == [2]\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp9_xo_aka.jl:39\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9_xo_aka.jl:36\ntest set: Error During Test at\
    \ /tmp/tmp9_xo_aka.jl:40\n  Test threw exception\n  Expression: candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  MethodError: objects of type Array{Int64,1}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp9_xo_aka.jl:28\n   [2] top-level\
    \ scope at /tmp/tmp9_xo_aka.jl:40\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp9_xo_aka.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmp9_xo_aka.jl:41\n  Test threw exception\n  Expression: candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n  MethodError: objects of type Array{Int64,1}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp9_xo_aka.jl:28\n   [2] top-level\
    \ scope at /tmp/tmp9_xo_aka.jl:41\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp9_xo_aka.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmp9_xo_aka.jl:42\n  Test threw exception\n  Expression: candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n  MethodError: objects\
    \ of type Array{Int64,1} are not callable\n  Use square brackets [] for indexing\
    \ an Array.\n  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp9_xo_aka.jl:28\n\
    \   [2] top-level scope at /tmp/tmp9_xo_aka.jl:42\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp9_xo_aka.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmp9_xo_aka.jl:43\n  Test threw exception\n  Expression: candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n  MethodError: objects of type Array{Int64,1}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp9_xo_aka.jl:28\n   [2] top-level\
    \ scope at /tmp/tmp9_xo_aka.jl:43\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp9_xo_aka.jl:36\n  \ntest set: Test Failed at\
    \ /tmp/tmp9_xo_aka.jl:44\n  Expression: candidate([1, 0, 5, -7], 1) == [5]\n \
    \  Evaluated: [1, 0, 5, -7] == [5]\nStacktrace:\n [1] top-level scope at /tmp/tmp9_xo_aka.jl:44\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9_xo_aka.jl:36\ntest set: Error During Test at\
    \ /tmp/tmp9_xo_aka.jl:45\n  Test threw exception\n  Expression: candidate([4,\
    \ -4], 2) == [-4, 4]\n  MethodError: objects of type Array{Int64,1} are not callable\n\
    \  Use square brackets [] for indexing an Array.\n  Stacktrace:\n   [1] maximum(::Array{Int64,1},\
    \ ::Int64) at /tmp/tmp9_xo_aka.jl:28\n   [2] top-level scope at /tmp/tmp9_xo_aka.jl:45\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp9_xo_aka.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmp9_xo_aka.jl:46\n  Test threw exception\n  Expression: candidate([-10,\
    \ 10], 2) == [-10, 10]\n  MethodError: objects of type Array{Int64,1} are not\
    \ callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n \
    \  [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp9_xo_aka.jl:28\n   [2] top-level\
    \ scope at /tmp/tmp9_xo_aka.jl:46\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp9_xo_aka.jl:36\n  \ntest set: Test Failed at\
    \ /tmp/tmp9_xo_aka.jl:47\n  Expression: candidate([1, 2, 3, -23, 243, -400, 0],\
    \ 0) == Vector{Int64}([])\n   Evaluated: [1, 2, 3, -23, 243, -400, 0] == Int64[]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp9_xo_aka.jl:47\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9_xo_aka.jl:36\nTest Summary: | Fail  Error \
    \ Total\ntest set      |    3      8     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9_xo_aka.jl:34\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    maximum = arr\n \
    \   for i = 2:k\n        maximum = maximum(maximum(maximum, arr), i)\n    end\n\
    \    return maximum\nend\n</cell>\n<code language=julia-1.3>\nmaximum(arr, 3)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns a sorted array with\
    \ the minimum k numbers in arr. \nThe function should work for both vectors and\
    \ matrices.\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpdz4928bq.jl:32\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpdz4928bq.jl:32\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k > length(arr)\n\
    \        return arr\n    end\n    maximum = arr[k-1]\n    for i = k+1:length(arr)\n\
    \        if maximum < arr[i]\n            maximum = arr[i]\n        end\n    end\n\
    \    return maximum\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpg0fp5i9q.jl:42\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  MethodError: Cannot\
    \ `convert` an object of type Int64 to an object of type Array{Int64,1}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array\
    \ at array.jl:533\n    convert(::Type{T}, !Matched::T) where T<:AbstractArray\
    \ at abstractarray.jl:14\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpg0fp5i9q.jl:35\n\
    \   [2] top-level scope at /tmp/tmpg0fp5i9q.jl:42\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpg0fp5i9q.jl:41\n  \ntest set: Error During\
    \ Test at /tmp/tmpg0fp5i9q.jl:43\n  Test threw exception\n  Expression: candidate([4,\
    \ -4, 4], 2) == [4, 4]\n  MethodError: Cannot `convert` an object of type Int64\
    \ to an object of type Array{Int64,1}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::AbstractArray) where T<:Array at array.jl:533\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n    convert(::Type{T},\
    \ !Matched::LinearAlgebra.Factorization) where T<:AbstractArray at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpg0fp5i9q.jl:35\n\
    \   [2] top-level scope at /tmp/tmpg0fp5i9q.jl:43\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpg0fp5i9q.jl:41\n  \ntest set: Error During\
    \ Test at /tmp/tmpg0fp5i9q.jl:44\n  Test threw exception\n  Expression: candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2]\n  BoundsError: attempt to access 7-element Array{Int64,1}\
    \ at index [0]\n  Stacktrace:\n   [1] getindex at ./array.jl:788 [inlined]\n \
    \  [2] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpg0fp5i9q.jl:29\n   [3] top-level\
    \ scope at /tmp/tmpg0fp5i9q.jl:44\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpg0fp5i9q.jl:41\n  \ntest set: Error During\
    \ Test at /tmp/tmpg0fp5i9q.jl:45\n  Test threw exception\n  Expression: candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  MethodError: Cannot `convert`\
    \ an object of type Int64 to an object of type Array{Int64,1}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpg0fp5i9q.jl:35\n\
    \   [2] top-level scope at /tmp/tmpg0fp5i9q.jl:45\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpg0fp5i9q.jl:41\n  \ntest set: Error During\
    \ Test at /tmp/tmpg0fp5i9q.jl:46\n  Test threw exception\n  Expression: candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n  MethodError: Cannot `convert` an object\
    \ of type Int64 to an object of type Array{Int64,1}\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpg0fp5i9q.jl:35\n\
    \   [2] top-level scope at /tmp/tmpg0fp5i9q.jl:46\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpg0fp5i9q.jl:41\n  \ntest set: Error During\
    \ Test at /tmp/tmpg0fp5i9q.jl:47\n  Test threw exception\n  Expression: candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n  MethodError: Cannot\
    \ `convert` an object of type Int64 to an object of type Array{Int64,1}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array\
    \ at array.jl:533\n    convert(::Type{T}, !Matched::T) where T<:AbstractArray\
    \ at abstractarray.jl:14\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpg0fp5i9q.jl:35\n\
    \   [2] top-level scope at /tmp/tmpg0fp5i9q.jl:47\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpg0fp5i9q.jl:41\n  \ntest set: Error During\
    \ Test at /tmp/tmpg0fp5i9q.jl:48\n  Test threw exception\n  Expression: candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n  MethodError: Cannot `convert` an object of\
    \ type Int64 to an object of type Array{Int64,1}\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpg0fp5i9q.jl:35\n\
    \   [2] top-level scope at /tmp/tmpg0fp5i9q.jl:48\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpg0fp5i9q.jl:41\n  \ntest set: Error During\
    \ Test at /tmp/tmpg0fp5i9q.jl:49\n  Test threw exception\n  Expression: candidate([1,\
    \ 0, 5, -7], 1) == [5]\n  BoundsError: attempt to access 4-element Array{Int64,1}\
    \ at index [0]\n  Stacktrace:\n   [1] getindex at ./array.jl:788 [inlined]\n \
    \  [2] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpg0fp5i9q.jl:29\n   [3] top-level\
    \ scope at /tmp/tmpg0fp5i9q.jl:49\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpg0fp5i9q.jl:41\n  \ntest set: Error During\
    \ Test at /tmp/tmpg0fp5i9q.jl:50\n  Test threw exception\n  Expression: candidate([4,\
    \ -4], 2) == [-4, 4]\n  MethodError: Cannot `convert` an object of type Int64\
    \ to an object of type Array{Int64,1}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::AbstractArray) where T<:Array at array.jl:533\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n    convert(::Type{T},\
    \ !Matched::LinearAlgebra.Factorization) where T<:AbstractArray at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpg0fp5i9q.jl:35\n\
    \   [2] top-level scope at /tmp/tmpg0fp5i9q.jl:50\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpg0fp5i9q.jl:41\n  \ntest set: Error During\
    \ Test at /tmp/tmpg0fp5i9q.jl:51\n  Test threw exception\n  Expression: candidate([-10,\
    \ 10], 2) == [-10, 10]\n  MethodError: Cannot `convert` an object of type Int64\
    \ to an object of type Array{Int64,1}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::AbstractArray) where T<:Array at array.jl:533\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n    convert(::Type{T},\
    \ !Matched::LinearAlgebra.Factorization) where T<:AbstractArray at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpg0fp5i9q.jl:35\n\
    \   [2] top-level scope at /tmp/tmpg0fp5i9q.jl:51\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpg0fp5i9q.jl:41\n  \ntest set: Error During\
    \ Test at /tmp/tmpg0fp5i9q.jl:52\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([])\n  BoundsError: attempt to\
    \ access 7-element Array{Int64,1} at index [-1]\n  Stacktrace:\n   [1] getindex\
    \ at ./array.jl:788 [inlined]\n   [2] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpg0fp5i9q.jl:29\n\
    \   [3] top-level scope at /tmp/tmpg0fp5i9q.jl:52\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpg0fp5i9q.jl:41\n  \nTest Summary: | Error \
    \ Total\ntest set      |    11     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpg0fp5i9q.jl:39\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k == 0 \n    \
    \    return arr\n    else \n        maximum = maximum.(maximum(arr, k-1), k)\n\
    \    end\nend\nmaximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k\
    \ == 0 \n        return arr\n    else \n        maximum = maximum.(maximum(arr,\
    \ k-1), k)\n    end\nend\nmaximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    if k == 0 \n        return arr\n    else \n        maximum = maximum.(maximum(arr,\
    \ k-1), k)\n    end\nend\nmaximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    if k == 0 \n        return arr\n    else \n        maximum = maximum.(maximum(arr,\
    \ k-1), k)\n    end\nend\nmaximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    if k == 0 \n        return arr\n    else \n        maximum = maximum.(maximum(arr,\
    \ k-1), k)\n    end\nend\nmaximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    if k == 0 \n        return arr\n    else \n        maximum = maximum.(maximum(arr,\
    \ k-1), k)\n    end\nend\nmaximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    if k == 0 \n        return arr\n    else \n        maximum = maximum.(maximum(arr,\
    \ k-1), k)\n    end\nend\nmaximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    if k == 0 \n        return arr\n    else \n        maximum = maximum.(maximum(arr,\
    \ k-1), k)\n    end\nend\nmaximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    if k == 0 \n        return arr\n    else \n        maximum = maximum.(maximum(arr,\
    \ k-1), k)\n    end\nend\nmaximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    if k == 0 \n        return arr\n    else \n        maximum = maximum.(maximum(arr,\
    \ k-1), k)\n    end\nend\nmaximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    if k == 0 \n        return arr\n    else \n        maximum = maximum.(maximum(arr,\
    \ k-1), k)\n    end\nend\nmaximum(arr::Vector{Int64}, k::Int64)::Vector\nusing\
    \ Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5],\
    \ 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: UndefVarError: arr not defined\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmprwtr8xo9.jl:32\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmprwtr8xo9.jl:32\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    maximum = arr\n \
    \   for i = 2:k\n        maximum = maximum(maximum(maximum.-minimum(maximum)),\
    \ maximum)\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 3)\n</cell>\n<text>\n10.4 Minimum Number\nusing Test\n\n@testset\
    \ begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2,\
    \ 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpb4z016mn.jl:32\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpb4z016mn.jl:32\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    maximum = arr\n \
    \   for i = 2:k\n        maximum = maximum(maximum(maximum, arr), i)\n    end\n\
    \    return maximum\nend\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 3)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that accepts an array arr of integers\
    \ and an integer k and returns the number of times the number arr[k] appears in\
    \ the array arr.\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpfznat9xb.jl:32\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpfznat9xb.jl:32\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k > length(arr)\n\
    \        error(\"k should be less than or equal to length(arr)\")\n    end\n \
    \   maximum = arr\n    for i = k+1:length(arr)\n        maximum = maximum(maximum(maximum,\
    \ arr[i]), maximum)\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 3)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ minimum number in a given array.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpgy7_zqls.jl:35\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpgy7_zqls.jl:35\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k == 0 \n    \
    \    return arr\n    \n    maximum = maximum(maximum(arr, k-1), k-1)\n    maximum\
    \ = maximum(maximum, arr)\n    maximum = maximum(maximum, k)\n    \n    return\
    \ maximum\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpyfxgcw3p.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpyfxgcw3p.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpyfxgcw3p.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k == 0 \n    \
    \    return arr \n    else \n        maximum = maximum(maximum(arr, k-1), k) \n\
    \        maximum[end] = maximum(maximum(arr, k-1), k) \n        return maximum\
    \ \nend\n\"\"\"\n    Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n    of length k with the minimum k numbers in arr.\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpfrizwggg.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpfrizwggg.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k == 0 \n    \
    \    return arr\n    \n    maximum = maximum([maximum(arr[1:k], k-1), maximum(arr[k+1:end],\
    \ k-1)], k-1)\n    maximum = maximum.*(maximum.>arr[k])\n    maximum = maximum.*(maximum.<arr[k])\n\
    \    return maximum\nend\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 3)\n\
    </cell>\n<text>\nmaximum\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpaqzbh6ih.jl:34\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpaqzbh6ih.jl:34\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k > length(arr)\
    \ \n        return [] \n    else \n        maximum = arr \n        for i = k+1:length(arr)\
    \ \n            maximum = maximum(maximum(maximum, arr[i]), arr[i]) \n       \
    \ end\n        return maximum \n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpketzyu1e.jl:41\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [-3, -4, 5] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpketzyu1e.jl:41\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpketzyu1e.jl:40\ntest set: Error During Test at\
    \ /tmp/tmpketzyu1e.jl:42\n  Test threw exception\n  Expression: candidate([4,\
    \ -4, 4], 2) == [4, 4]\n  MethodError: objects of type Array{Int64,1} are not\
    \ callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n \
    \  [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpketzyu1e.jl:31\n   [2] top-level\
    \ scope at /tmp/tmpketzyu1e.jl:42\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpketzyu1e.jl:40\n  \ntest set: Error During\
    \ Test at /tmp/tmpketzyu1e.jl:43\n  Test threw exception\n  Expression: candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2]\n  MethodError: objects of type Array{Int64,1}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpketzyu1e.jl:31\n   [2] top-level\
    \ scope at /tmp/tmpketzyu1e.jl:43\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpketzyu1e.jl:40\n  \ntest set: Error During\
    \ Test at /tmp/tmpketzyu1e.jl:44\n  Test threw exception\n  Expression: candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  MethodError: objects of type Array{Int64,1}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpketzyu1e.jl:31\n   [2] top-level\
    \ scope at /tmp/tmpketzyu1e.jl:44\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpketzyu1e.jl:40\n  \ntest set: Error During\
    \ Test at /tmp/tmpketzyu1e.jl:45\n  Test threw exception\n  Expression: candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n  MethodError: objects of type Array{Int64,1}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpketzyu1e.jl:31\n   [2] top-level\
    \ scope at /tmp/tmpketzyu1e.jl:45\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpketzyu1e.jl:40\n  \ntest set: Test Failed at\
    \ /tmp/tmpketzyu1e.jl:46\n  Expression: candidate([5, 15, 0, 3, -13, -8, 0], 7)\
    \ == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [5, 15, 0, 3, -13, -8, 0] == [-13,\
    \ -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] top-level scope at /tmp/tmpketzyu1e.jl:46\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpketzyu1e.jl:40\ntest set: Error During Test at\
    \ /tmp/tmpketzyu1e.jl:47\n  Test threw exception\n  Expression: candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n  MethodError: objects of type Array{Int64,1}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpketzyu1e.jl:31\n   [2] top-level\
    \ scope at /tmp/tmpketzyu1e.jl:47\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpketzyu1e.jl:40\n  \ntest set: Error During\
    \ Test at /tmp/tmpketzyu1e.jl:48\n  Test threw exception\n  Expression: candidate([1,\
    \ 0, 5, -7], 1) == [5]\n  MethodError: objects of type Array{Int64,1} are not\
    \ callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n \
    \  [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpketzyu1e.jl:31\n   [2] top-level\
    \ scope at /tmp/tmpketzyu1e.jl:48\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpketzyu1e.jl:40\n  \ntest set: Test Failed at\
    \ /tmp/tmpketzyu1e.jl:49\n  Expression: candidate([4, -4], 2) == [-4, 4]\n   Evaluated:\
    \ [4, -4] == [-4, 4]\nStacktrace:\n [1] top-level scope at /tmp/tmpketzyu1e.jl:49\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpketzyu1e.jl:40\ntest set: Error During Test at\
    \ /tmp/tmpketzyu1e.jl:51\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([])\n  MethodError: objects of\
    \ type Array{Int64,1} are not callable\n  Use square brackets [] for indexing\
    \ an Array.\n  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpketzyu1e.jl:31\n\
    \   [2] top-level scope at /tmp/tmpketzyu1e.jl:51\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpketzyu1e.jl:40\n  \nTest Summary: | Pass  Fail\
    \  Error  Total\ntest set      |    1     3      7     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpketzyu1e.jl:38\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k == 0 \n    \
    \    return arr\n    else \n        maximum = maximum(maximum(arr, k-1), k-1)\n\
    \        return maximum\n    end\nend\n</cell>\n<code language=julia-1.5>\nmaximum(arr,\
    \ 3)\n</cell>\n<text>\n4.4 Find Minimum\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpdkkzj1xo.jl:33\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpdkkzj1xo.jl:33\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    maximum = arr\n \
    \   for i = 2:k\n        maximum = maximum(maximum(maximum, arr), maximum)\n \
    \   end\n    return maximum\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp9z3dsnwc.jl:37\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  MethodError: objects\
    \ of type Array{Int64,1} are not callable\n  Use square brackets [] for indexing\
    \ an Array.\n  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp9z3dsnwc.jl:28\n\
    \   [2] top-level scope at /tmp/tmp9z3dsnwc.jl:37\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp9z3dsnwc.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmp9z3dsnwc.jl:38\n  Test threw exception\n  Expression: candidate([4,\
    \ -4, 4], 2) == [4, 4]\n  MethodError: objects of type Array{Int64,1} are not\
    \ callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n \
    \  [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp9z3dsnwc.jl:28\n   [2] top-level\
    \ scope at /tmp/tmp9z3dsnwc.jl:38\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp9z3dsnwc.jl:36\n  \ntest set: Test Failed at\
    \ /tmp/tmp9z3dsnwc.jl:39\n  Expression: candidate([-3, 2, 1, 2, -1, -2, 1], 1)\
    \ == [2]\n   Evaluated: [-3, 2, 1, 2, -1, -2, 1] == [2]\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp9z3dsnwc.jl:39\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9z3dsnwc.jl:36\ntest set: Error During Test at\
    \ /tmp/tmp9z3dsnwc.jl:40\n  Test threw exception\n  Expression: candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  MethodError: objects of type Array{Int64,1}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp9z3dsnwc.jl:28\n   [2] top-level\
    \ scope at /tmp/tmp9z3dsnwc.jl:40\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp9z3dsnwc.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmp9z3dsnwc.jl:41\n  Test threw exception\n  Expression: candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n  MethodError: objects of type Array{Int64,1}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp9z3dsnwc.jl:28\n   [2] top-level\
    \ scope at /tmp/tmp9z3dsnwc.jl:41\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp9z3dsnwc.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmp9z3dsnwc.jl:42\n  Test threw exception\n  Expression: candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n  MethodError: objects\
    \ of type Array{Int64,1} are not callable\n  Use square brackets [] for indexing\
    \ an Array.\n  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp9z3dsnwc.jl:28\n\
    \   [2] top-level scope at /tmp/tmp9z3dsnwc.jl:42\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp9z3dsnwc.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmp9z3dsnwc.jl:43\n  Test threw exception\n  Expression: candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n  MethodError: objects of type Array{Int64,1}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp9z3dsnwc.jl:28\n   [2] top-level\
    \ scope at /tmp/tmp9z3dsnwc.jl:43\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp9z3dsnwc.jl:36\n  \ntest set: Test Failed at\
    \ /tmp/tmp9z3dsnwc.jl:44\n  Expression: candidate([1, 0, 5, -7], 1) == [5]\n \
    \  Evaluated: [1, 0, 5, -7] == [5]\nStacktrace:\n [1] top-level scope at /tmp/tmp9z3dsnwc.jl:44\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9z3dsnwc.jl:36\ntest set: Error During Test at\
    \ /tmp/tmp9z3dsnwc.jl:45\n  Test threw exception\n  Expression: candidate([4,\
    \ -4], 2) == [-4, 4]\n  MethodError: objects of type Array{Int64,1} are not callable\n\
    \  Use square brackets [] for indexing an Array.\n  Stacktrace:\n   [1] maximum(::Array{Int64,1},\
    \ ::Int64) at /tmp/tmp9z3dsnwc.jl:28\n   [2] top-level scope at /tmp/tmp9z3dsnwc.jl:45\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp9z3dsnwc.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmp9z3dsnwc.jl:46\n  Test threw exception\n  Expression: candidate([-10,\
    \ 10], 2) == [-10, 10]\n  MethodError: objects of type Array{Int64,1} are not\
    \ callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n \
    \  [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp9z3dsnwc.jl:28\n   [2] top-level\
    \ scope at /tmp/tmp9z3dsnwc.jl:46\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp9z3dsnwc.jl:36\n  \ntest set: Test Failed at\
    \ /tmp/tmp9z3dsnwc.jl:47\n  Expression: candidate([1, 2, 3, -23, 243, -400, 0],\
    \ 0) == Vector{Int64}([])\n   Evaluated: [1, 2, 3, -23, 243, -400, 0] == Int64[]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp9z3dsnwc.jl:47\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9z3dsnwc.jl:36\nTest Summary: | Fail  Error \
    \ Total\ntest set      |    3      8     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9z3dsnwc.jl:34\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    maximum = arr\n \
    \   for i = 1:k\n        maximum = maximum(maximum(maximum.-minimum(maximum),\
    \ maximum), minimum(maximum))\n    end\n    return maximum\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4,\
    \ -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpcv5a6n4b.jl:37\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  MethodError: objects\
    \ of type Array{Int64,1} are not callable\n  Use square brackets [] for indexing\
    \ an Array.\n  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpcv5a6n4b.jl:28\n\
    \   [2] top-level scope at /tmp/tmpcv5a6n4b.jl:37\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpcv5a6n4b.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmpcv5a6n4b.jl:38\n  Test threw exception\n  Expression: candidate([4,\
    \ -4, 4], 2) == [4, 4]\n  MethodError: objects of type Array{Int64,1} are not\
    \ callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n \
    \  [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpcv5a6n4b.jl:28\n   [2] top-level\
    \ scope at /tmp/tmpcv5a6n4b.jl:38\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpcv5a6n4b.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmpcv5a6n4b.jl:39\n  Test threw exception\n  Expression: candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2]\n  MethodError: objects of type Array{Int64,1}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpcv5a6n4b.jl:28\n   [2] top-level\
    \ scope at /tmp/tmpcv5a6n4b.jl:39\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpcv5a6n4b.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmpcv5a6n4b.jl:40\n  Test threw exception\n  Expression: candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  MethodError: objects of type Array{Int64,1}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpcv5a6n4b.jl:28\n   [2] top-level\
    \ scope at /tmp/tmpcv5a6n4b.jl:40\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpcv5a6n4b.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmpcv5a6n4b.jl:41\n  Test threw exception\n  Expression: candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n  MethodError: objects of type Array{Int64,1}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpcv5a6n4b.jl:28\n   [2] top-level\
    \ scope at /tmp/tmpcv5a6n4b.jl:41\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpcv5a6n4b.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmpcv5a6n4b.jl:42\n  Test threw exception\n  Expression: candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n  MethodError: objects\
    \ of type Array{Int64,1} are not callable\n  Use square brackets [] for indexing\
    \ an Array.\n  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpcv5a6n4b.jl:28\n\
    \   [2] top-level scope at /tmp/tmpcv5a6n4b.jl:42\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpcv5a6n4b.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmpcv5a6n4b.jl:43\n  Test threw exception\n  Expression: candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n  MethodError: objects of type Array{Int64,1}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpcv5a6n4b.jl:28\n   [2] top-level\
    \ scope at /tmp/tmpcv5a6n4b.jl:43\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpcv5a6n4b.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmpcv5a6n4b.jl:44\n  Test threw exception\n  Expression: candidate([1,\
    \ 0, 5, -7], 1) == [5]\n  MethodError: objects of type Array{Int64,1} are not\
    \ callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n \
    \  [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpcv5a6n4b.jl:28\n   [2] top-level\
    \ scope at /tmp/tmpcv5a6n4b.jl:44\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpcv5a6n4b.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmpcv5a6n4b.jl:45\n  Test threw exception\n  Expression: candidate([4,\
    \ -4], 2) == [-4, 4]\n  MethodError: objects of type Array{Int64,1} are not callable\n\
    \  Use square brackets [] for indexing an Array.\n  Stacktrace:\n   [1] maximum(::Array{Int64,1},\
    \ ::Int64) at /tmp/tmpcv5a6n4b.jl:28\n   [2] top-level scope at /tmp/tmpcv5a6n4b.jl:45\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpcv5a6n4b.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmpcv5a6n4b.jl:46\n  Test threw exception\n  Expression: candidate([-10,\
    \ 10], 2) == [-10, 10]\n  MethodError: objects of type Array{Int64,1} are not\
    \ callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n \
    \  [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpcv5a6n4b.jl:28\n   [2] top-level\
    \ scope at /tmp/tmpcv5a6n4b.jl:46\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpcv5a6n4b.jl:36\n  \ntest set: Test Failed at\
    \ /tmp/tmpcv5a6n4b.jl:47\n  Expression: candidate([1, 2, 3, -23, 243, -400, 0],\
    \ 0) == Vector{Int64}([])\n   Evaluated: [1, 2, 3, -23, 243, -400, 0] == Int64[]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpcv5a6n4b.jl:47\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpcv5a6n4b.jl:36\nTest Summary: | Fail  Error \
    \ Total\ntest set      |    1     10     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 1 failed, 10 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcv5a6n4b.jl:34\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k == 0 \n    \
    \    return arr\n    else \n        maximum = maximum.(maximum(arr, k-1), k)\n\
    \        maximum = maximum.(maximum(arr, k-1), k)\n        return maximum\nend\n\
    \"\"\"\n    Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    of length k with the minimum k numbers in arr.\nusing Test\n\
    \n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) ==\
    \ [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpr3lk4s55.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpr3lk4s55.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k > length(arr)\n\
    \        return arr\n    else\n        maximum = arr\n        for i = k+1:length(arr)\n\
    \            if maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpa4558ric.jl:34\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpa4558ric.jl:34\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k == 0 \n    \
    \    return arr \n    else \n        maximum = maximum(maximum(arr, k-1), k) \n\
    \        maximum[end] = maximum(maximum(arr, k-1), k) \n        return maximum\
    \ \nend\n\"\"\"\n    Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n    of length k with the minimum k numbers in arr.\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpinfzlyzf.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpinfzlyzf.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k == 0 \n    \
    \    return arr\n    else \n        maximum = maximum(maximum(arr,k-1),k-1)\n\
    \        maximum[end] = maximum(maximum(arr,k-1),k-1)[end]\n        return maximum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp65si1i5_.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp65si1i5_.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp65si1i5_.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    maximum = arr\n \
    \   for i = 1:k\n        maximum = maximum(maximum(maximum, arr), arr)\n    end\n\
    \    maximum\nend\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 3)\n</cell>\n\
    <text>\n10.3 Find Minimum\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp5z42p587.jl:32\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp5z42p587.jl:32\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    maximum = arr\n \
    \   for i = 2:k\n        maximum = maximum(maximum(maximum.-minimum(maximum)),\
    \ maximum)\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, k)\n</cell>\n<text>\nGreedy Algorithm\nGreedy algorithm is a greedy\
    \ algorithm that always picks the largest element in the array and ignores the\
    \ other elements. It is called greedy because we always pick the largest element\
    \ and ignore the other elements. It is also called greedy because we always pick\
    \ the largest element and ignore the other elements.\nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpripl72uc.jl:32\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpripl72uc.jl:32\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k == 0 \n    \
    \    return arr \n    else \n        maximum = maximum.(maximum(arr, k-1), k)\
    \ \n        maximum[end] = maximum(maximum(arr, k-1), k) \n        return maximum\
    \ \nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpr0o2aqy9.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpr0o2aqy9.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpr0o2aqy9.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k > length(arr)\
    \ \n        error(\"k should be less than or equal to length(arr)\")\n    end\n\
    \    maximum = arr\n    for i = k+1:length(arr) \n        maximum[i] = maximum(maximum[i],\
    \ arr[i])\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 3)\n</cell>\n<text>\nGreedy Algorithm\nGreedy algorithm is a greedy\
    \ algorithm that always selects the best option in the given problem. \nIt always\
    \ selects the best option in the given problem and does not make any assumptions\
    \ about the \noptimal solution of the problem. \nIt is a greedy algorithm because\
    \ it always selects the best option in the given problem.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2,\
    \ 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9_vzhjy_.jl:35\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp9_vzhjy_.jl:35\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    maximum = arr\n \
    \   for i = k+1:length(arr)\n        maximum[i] = maximum(maximum, arr[i])\n \
    \   end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\nmaximum(arr,\
    \ 3)\n</cell>\n<text>\nProblem 7\nWrite a function that returns a sorted array\
    \ of the integers whose absolute value is less than a given number k.\nusing Test\n\
    \n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) ==\
    \ [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpy7io6ozs.jl:32\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpy7io6ozs.jl:32\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k == 0 \n    \
    \    return arr\n    else \n        maximum = maximum(maximum(arr,k-1),k-1)\n\
    \        return maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpqscnukkl.jl:33\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpqscnukkl.jl:33\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    maximums = Vector{Int64}()\n\
    \    maximums = maximums[-k+1:k+1]\n    for x in arr\n        if maximums[-k+1:k+1]\
    \ \u2264 x \u2264 maximums[k+1]\n            maximums[k+1] = x\n        end\n\
    \    end\n    maximums\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp0pbwg155.jl:40\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  BoundsError: attempt\
    \ to access 0-element Array{Int64,1} at index [-2:4]\n  Stacktrace:\n   [1] throw_boundserror(::Array{Int64,1},\
    \ ::Tuple{UnitRange{Int64}}) at ./abstractarray.jl:537\n   [2] checkbounds at\
    \ ./abstractarray.jl:502 [inlined]\n   [3] getindex at ./array.jl:794 [inlined]\n\
    \   [4] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp0pbwg155.jl:27\n   [5] top-level\
    \ scope at /tmp/tmp0pbwg155.jl:40\n   [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmp0pbwg155.jl:39\n  \ntest set: Error During\
    \ Test at /tmp/tmp0pbwg155.jl:41\n  Test threw exception\n  Expression: candidate([4,\
    \ -4, 4], 2) == [4, 4]\n  BoundsError: attempt to access 0-element Array{Int64,1}\
    \ at index [-1:3]\n  Stacktrace:\n   [1] throw_boundserror(::Array{Int64,1}, ::Tuple{UnitRange{Int64}})\
    \ at ./abstractarray.jl:537\n   [2] checkbounds at ./abstractarray.jl:502 [inlined]\n\
    \   [3] getindex at ./array.jl:794 [inlined]\n   [4] maximum(::Array{Int64,1},\
    \ ::Int64) at /tmp/tmp0pbwg155.jl:27\n   [5] top-level scope at /tmp/tmp0pbwg155.jl:41\n\
    \   [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmp0pbwg155.jl:39\n  \ntest set: Error During\
    \ Test at /tmp/tmp0pbwg155.jl:42\n  Test threw exception\n  Expression: candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2]\n  BoundsError: attempt to access 0-element Array{Int64,1}\
    \ at index [0:2]\n  Stacktrace:\n   [1] throw_boundserror(::Array{Int64,1}, ::Tuple{UnitRange{Int64}})\
    \ at ./abstractarray.jl:537\n   [2] checkbounds at ./abstractarray.jl:502 [inlined]\n\
    \   [3] getindex at ./array.jl:794 [inlined]\n   [4] maximum(::Array{Int64,1},\
    \ ::Int64) at /tmp/tmp0pbwg155.jl:27\n   [5] top-level scope at /tmp/tmp0pbwg155.jl:42\n\
    \   [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmp0pbwg155.jl:39\n  \ntest set: Error During\
    \ Test at /tmp/tmp0pbwg155.jl:43\n  Test threw exception\n  Expression: candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  BoundsError: attempt to access\
    \ 0-element Array{Int64,1} at index [-2:4]\n  Stacktrace:\n   [1] throw_boundserror(::Array{Int64,1},\
    \ ::Tuple{UnitRange{Int64}}) at ./abstractarray.jl:537\n   [2] checkbounds at\
    \ ./abstractarray.jl:502 [inlined]\n   [3] getindex at ./array.jl:794 [inlined]\n\
    \   [4] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp0pbwg155.jl:27\n   [5] top-level\
    \ scope at /tmp/tmp0pbwg155.jl:43\n   [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmp0pbwg155.jl:39\n  \ntest set: Error During\
    \ Test at /tmp/tmp0pbwg155.jl:44\n  Test threw exception\n  Expression: candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n  BoundsError: attempt to access 0-element\
    \ Array{Int64,1} at index [-3:5]\n  Stacktrace:\n   [1] throw_boundserror(::Array{Int64,1},\
    \ ::Tuple{UnitRange{Int64}}) at ./abstractarray.jl:537\n   [2] checkbounds at\
    \ ./abstractarray.jl:502 [inlined]\n   [3] getindex at ./array.jl:794 [inlined]\n\
    \   [4] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp0pbwg155.jl:27\n   [5] top-level\
    \ scope at /tmp/tmp0pbwg155.jl:44\n   [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmp0pbwg155.jl:39\n  \ntest set: Error During\
    \ Test at /tmp/tmp0pbwg155.jl:45\n  Test threw exception\n  Expression: candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n  BoundsError: attempt\
    \ to access 0-element Array{Int64,1} at index [-6:8]\n  Stacktrace:\n   [1] throw_boundserror(::Array{Int64,1},\
    \ ::Tuple{UnitRange{Int64}}) at ./abstractarray.jl:537\n   [2] checkbounds at\
    \ ./abstractarray.jl:502 [inlined]\n   [3] getindex at ./array.jl:794 [inlined]\n\
    \   [4] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp0pbwg155.jl:27\n   [5] top-level\
    \ scope at /tmp/tmp0pbwg155.jl:45\n   [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmp0pbwg155.jl:39\n  \ntest set: Error During\
    \ Test at /tmp/tmp0pbwg155.jl:46\n  Test threw exception\n  Expression: candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n  BoundsError: attempt to access 0-element Array{Int64,1}\
    \ at index [-1:3]\n  Stacktrace:\n   [1] throw_boundserror(::Array{Int64,1}, ::Tuple{UnitRange{Int64}})\
    \ at ./abstractarray.jl:537\n   [2] checkbounds at ./abstractarray.jl:502 [inlined]\n\
    \   [3] getindex at ./array.jl:794 [inlined]\n   [4] maximum(::Array{Int64,1},\
    \ ::Int64) at /tmp/tmp0pbwg155.jl:27\n   [5] top-level scope at /tmp/tmp0pbwg155.jl:46\n\
    \   [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmp0pbwg155.jl:39\n  \ntest set: Error During\
    \ Test at /tmp/tmp0pbwg155.jl:47\n  Test threw exception\n  Expression: candidate([1,\
    \ 0, 5, -7], 1) == [5]\n  BoundsError: attempt to access 0-element Array{Int64,1}\
    \ at index [0:2]\n  Stacktrace:\n   [1] throw_boundserror(::Array{Int64,1}, ::Tuple{UnitRange{Int64}})\
    \ at ./abstractarray.jl:537\n   [2] checkbounds at ./abstractarray.jl:502 [inlined]\n\
    \   [3] getindex at ./array.jl:794 [inlined]\n   [4] maximum(::Array{Int64,1},\
    \ ::Int64) at /tmp/tmp0pbwg155.jl:27\n   [5] top-level scope at /tmp/tmp0pbwg155.jl:47\n\
    \   [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmp0pbwg155.jl:39\n  \ntest set: Error During\
    \ Test at /tmp/tmp0pbwg155.jl:48\n  Test threw exception\n  Expression: candidate([4,\
    \ -4], 2) == [-4, 4]\n  BoundsError: attempt to access 0-element Array{Int64,1}\
    \ at index [-1:3]\n  Stacktrace:\n   [1] throw_boundserror(::Array{Int64,1}, ::Tuple{UnitRange{Int64}})\
    \ at ./abstractarray.jl:537\n   [2] checkbounds at ./abstractarray.jl:502 [inlined]\n\
    \   [3] getindex at ./array.jl:794 [inlined]\n   [4] maximum(::Array{Int64,1},\
    \ ::Int64) at /tmp/tmp0pbwg155.jl:27\n   [5] top-level scope at /tmp/tmp0pbwg155.jl:48\n\
    \   [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmp0pbwg155.jl:39\n  \ntest set: Error During\
    \ Test at /tmp/tmp0pbwg155.jl:49\n  Test threw exception\n  Expression: candidate([-10,\
    \ 10], 2) == [-10, 10]\n  BoundsError: attempt to access 0-element Array{Int64,1}\
    \ at index [-1:3]\n  Stacktrace:\n   [1] throw_boundserror(::Array{Int64,1}, ::Tuple{UnitRange{Int64}})\
    \ at ./abstractarray.jl:537\n   [2] checkbounds at ./abstractarray.jl:502 [inlined]\n\
    \   [3] getindex at ./array.jl:794 [inlined]\n   [4] maximum(::Array{Int64,1},\
    \ ::Int64) at /tmp/tmp0pbwg155.jl:27\n   [5] top-level scope at /tmp/tmp0pbwg155.jl:49\n\
    \   [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmp0pbwg155.jl:39\n  \ntest set: Error During\
    \ Test at /tmp/tmp0pbwg155.jl:50\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([])\n  BoundsError: attempt to\
    \ access 0-element Array{Int64,1} at index [1:1]\n  Stacktrace:\n   [1] throw_boundserror(::Array{Int64,1},\
    \ ::Tuple{UnitRange{Int64}}) at ./abstractarray.jl:537\n   [2] checkbounds at\
    \ ./abstractarray.jl:502 [inlined]\n   [3] getindex at ./array.jl:794 [inlined]\n\
    \   [4] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp0pbwg155.jl:27\n   [5] top-level\
    \ scope at /tmp/tmp0pbwg155.jl:50\n   [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmp0pbwg155.jl:39\n  \nTest Summary: | Error \
    \ Total\ntest set      |    11     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0pbwg155.jl:37\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    maximum = arr\n \
    \   for i = 2:k\n        maximum = maximum(maximum(maximum, arr), arr[i])\n  \
    \  end\n    maximum\nend\n</cell>\n<code language=julia-1.5>\nmaximum(arr, k)\n\
    </cell>\n<text>\n \nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpexwnxk0y.jl:32\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpexwnxk0y.jl:32\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    maximum = arr\n \
    \   for i = 2:k\n        maximum = maximum(maximum(maximum, arr), i)\n    end\n\
    \    return maximum\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpqwsnfqrc.jl:37\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  MethodError: objects\
    \ of type Array{Int64,1} are not callable\n  Use square brackets [] for indexing\
    \ an Array.\n  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpqwsnfqrc.jl:28\n\
    \   [2] top-level scope at /tmp/tmpqwsnfqrc.jl:37\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpqwsnfqrc.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmpqwsnfqrc.jl:38\n  Test threw exception\n  Expression: candidate([4,\
    \ -4, 4], 2) == [4, 4]\n  MethodError: objects of type Array{Int64,1} are not\
    \ callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n \
    \  [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpqwsnfqrc.jl:28\n   [2] top-level\
    \ scope at /tmp/tmpqwsnfqrc.jl:38\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpqwsnfqrc.jl:36\n  \ntest set: Test Failed at\
    \ /tmp/tmpqwsnfqrc.jl:39\n  Expression: candidate([-3, 2, 1, 2, -1, -2, 1], 1)\
    \ == [2]\n   Evaluated: [-3, 2, 1, 2, -1, -2, 1] == [2]\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpqwsnfqrc.jl:39\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpqwsnfqrc.jl:36\ntest set: Error During Test at\
    \ /tmp/tmpqwsnfqrc.jl:40\n  Test threw exception\n  Expression: candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  MethodError: objects of type Array{Int64,1}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpqwsnfqrc.jl:28\n   [2] top-level\
    \ scope at /tmp/tmpqwsnfqrc.jl:40\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpqwsnfqrc.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmpqwsnfqrc.jl:41\n  Test threw exception\n  Expression: candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n  MethodError: objects of type Array{Int64,1}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpqwsnfqrc.jl:28\n   [2] top-level\
    \ scope at /tmp/tmpqwsnfqrc.jl:41\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpqwsnfqrc.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmpqwsnfqrc.jl:42\n  Test threw exception\n  Expression: candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n  MethodError: objects\
    \ of type Array{Int64,1} are not callable\n  Use square brackets [] for indexing\
    \ an Array.\n  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpqwsnfqrc.jl:28\n\
    \   [2] top-level scope at /tmp/tmpqwsnfqrc.jl:42\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpqwsnfqrc.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmpqwsnfqrc.jl:43\n  Test threw exception\n  Expression: candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n  MethodError: objects of type Array{Int64,1}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpqwsnfqrc.jl:28\n   [2] top-level\
    \ scope at /tmp/tmpqwsnfqrc.jl:43\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpqwsnfqrc.jl:36\n  \ntest set: Test Failed at\
    \ /tmp/tmpqwsnfqrc.jl:44\n  Expression: candidate([1, 0, 5, -7], 1) == [5]\n \
    \  Evaluated: [1, 0, 5, -7] == [5]\nStacktrace:\n [1] top-level scope at /tmp/tmpqwsnfqrc.jl:44\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpqwsnfqrc.jl:36\ntest set: Error During Test at\
    \ /tmp/tmpqwsnfqrc.jl:45\n  Test threw exception\n  Expression: candidate([4,\
    \ -4], 2) == [-4, 4]\n  MethodError: objects of type Array{Int64,1} are not callable\n\
    \  Use square brackets [] for indexing an Array.\n  Stacktrace:\n   [1] maximum(::Array{Int64,1},\
    \ ::Int64) at /tmp/tmpqwsnfqrc.jl:28\n   [2] top-level scope at /tmp/tmpqwsnfqrc.jl:45\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpqwsnfqrc.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmpqwsnfqrc.jl:46\n  Test threw exception\n  Expression: candidate([-10,\
    \ 10], 2) == [-10, 10]\n  MethodError: objects of type Array{Int64,1} are not\
    \ callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n \
    \  [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpqwsnfqrc.jl:28\n   [2] top-level\
    \ scope at /tmp/tmpqwsnfqrc.jl:46\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpqwsnfqrc.jl:36\n  \ntest set: Test Failed at\
    \ /tmp/tmpqwsnfqrc.jl:47\n  Expression: candidate([1, 2, 3, -23, 243, -400, 0],\
    \ 0) == Vector{Int64}([])\n   Evaluated: [1, 2, 3, -23, 243, -400, 0] == Int64[]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpqwsnfqrc.jl:47\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpqwsnfqrc.jl:36\nTest Summary: | Fail  Error \
    \ Total\ntest set      |    3      8     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqwsnfqrc.jl:34\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k == 0 \n    \
    \    return arr \n    else \n        maximum = maximum.(maximum(arr, k-1), k)\
    \ \n        maximum[end] = maximum(maximum(arr, k-1), k) \n        return maximum\
    \ \nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmplhabrdc_.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmplhabrdc_.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmplhabrdc_.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    maximum = arr\n \
    \   for i = 1:k\n        maximum = maximum(maximum(maximum, arr[i]), arr[i+1])\n\
    \    end\n    maximum\nend\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 3)\n\
    </cell>\n<code language=julia-1.5>\nmaximum(arr, 2)\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 4)\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 5)\n</cell>\n\
    <code language=julia-1.5>\nmaximum(arr, 6)\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 7)\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 8)\n</cell>\n\
    <code language=julia-1.5>\nmaximum(arr, 9)\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 10)\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 11)\n</cell>\n\
    <code language=julia-1.5>\nmaximum(arr, 12)\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 13)\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 14)\n</cell>\n\
    <code language=julia-1.5>\nmaximum(arr, 15)\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 16)\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 17)\n</cell>\n\
    <code language=julia-1.5>\nmaximum(arr, 18)\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 19)\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 20)\n</cell>\n\
    <code language=julia-1.5>\nmaximum(arr, 21)\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 22)\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 23)\n</cell>\n\
    <code language=julia-1.5>\nmaximum(arr, 24)\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 25)\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 26)\n</cell>\n\
    <code language=julia-1.5>\nmaximum(arr, 27)\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 28)\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 29)\n</cell>\n\
    <code language=julia-1.5>\nmaximum(arr, 30)\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 31)\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 32)\n</cell>\n\
    <code language=julia-1.5>\nmaximum(arr, 33)\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 34)\n</cell>\n<code language=julia-1.5>\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2,\
    \ 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpcnpf_iof.jl:32\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpcnpf_iof.jl:32\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    maximum = arr\n \
    \   for i = 1:k\n        maximum = maximum(maximum(maximum, arr), arr)\n    end\n\
    \    maximum\nend\n</cell>\n<code language=julia-1.5>\nmaximum(arr, k)\n</cell>\n\
    <text>\n\uC624\uBC84\uD50C\uB85C\uC6B0 \uC5F0\uC2B5\uBB38\uC81C 2\n\uC544\uB798\
    \ \uCF54\uB4DC\uB294 \uC624\uBC84\uD50C\uB85C\uC6B0 \uC5F0\uC2B5\uBB38\uC81C 2\uC5D0\
    \uC11C \uC2E4\uC81C\uB85C \uC2E4\uD589\uB418\uC5C8\uC2B5\uB2C8\uB2E4. \uC774 \uCF54\
    \uB4DC\uB294 Julia 1.5\uC5D0\uC11C \uC9C0\uC6D0\uB418\uC9C0 \uC54A\uC2B5\uB2C8\
    \uB2E4. \uC624\uBC84\uD50C\uB85C\uC6B0 \uC5F0\uC2B5\uBB38\uC81C 2\uC5D0\uC11C\uB294\
    \ \uC544\uB798\uC640 \uAC19\uC774 \uC2E4\uD589\uB418\uC5C8\uC2B5\uB2C8\uB2E4.\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpx9p66geq.jl:32\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpx9p66geq.jl:32\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    maximum = arr\n \
    \   for i = 1:k\n        maximum = maximum(maximum(maximum, arr), arr)\n    end\n\
    \    return maximum\nend\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3e0q97fx.jl:32\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp3e0q97fx.jl:32\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k > length(arr)\n\
    \        throw(ArgumentError(\"k must be less than or equal to length(arr)\"))\n\
    \    end\n    maximum = arr\n    for i = 1:k\n        maximum = maximum(maximum(maximum(maximum,\
    \ maximum), maximum), maximum)\n    end\n    return maximum\nend\n</cell>\n<code\
    \ language=julia-1.0>\nmaximum(arr, 3)\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the minimum number in a given array.\nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmparul53c9.jl:35\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmparul53c9.jl:35\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    maximum = arr\n \
    \   for i = 2:k\n        maximum = maximum(maximum(maximum, arr), arr[i])\n  \
    \  end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\nmaximum(arr,\
    \ 3)\n</cell>\n<text>\n6.4 Find Minimum\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpe5k9ho5b.jl:32\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpe5k9ho5b.jl:32\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k == 0 \n    \
    \    return arr\n    elseif k == 1 \n        return arr\n    elseif k == length(arr)\
    \ \n        return arr\n    else\n        maximum = maximum(maximum(arr,arr[k-1]),arr[k-1])\n\
    \    end\nend\n</cell>\n<code language=julia-1.0>\nmaximum(arr,2)\n</cell>\n<code\
    \ language=julia-1.0>\nmaximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpm9epy_op.jl:36\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpm9epy_op.jl:36\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k == 0 \n    \
    \    return arr\n    \n    maximum = maximum([maximum(arr[1:k], k-1), maximum(arr[k+1:end],\
    \ k-1)], k-1)\n    maximum = [maximum[k], maximum(maximum)]\n    return maximum\n\
    end\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 3)\n</cell>\n<text>\nmaximum([-3,\
    \ -4, 5], 3)\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphg0zdumn.jl:33\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmphg0zdumn.jl:33\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k > length(arr)\n\
    \        return arr\n    else\n        maximum = arr\n        for i = k+1:length(arr)\n\
    \            if maximum[i] > maximum[i-1]\n                maximum = maximum[i-1:end]\n\
    \            else\n                maximum = maximum[i-1:end]\n            end\n\
    \        end\n        return maximum\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpd6s2j38y.jl:45\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [-3, -4, 5] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpd6s2j38y.jl:45\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpd6s2j38y.jl:44\ntest set: Test Failed at /tmp/tmpd6s2j38y.jl:46\n\
    \  Expression: candidate([4, -4, 4], 2) == [4, 4]\n   Evaluated: [-4, 4] == [4,\
    \ 4]\nStacktrace:\n [1] top-level scope at /tmp/tmpd6s2j38y.jl:46\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpd6s2j38y.jl:44\ntest set: Error During Test at\
    \ /tmp/tmpd6s2j38y.jl:47\n  Test threw exception\n  Expression: candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2]\n  BoundsError: attempt to access 4-element Array{Int64,1}\
    \ at index [5]\n  Stacktrace:\n   [1] getindex at ./array.jl:788 [inlined]\n \
    \  [2] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpd6s2j38y.jl:31\n   [3] top-level\
    \ scope at /tmp/tmpd6s2j38y.jl:47\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpd6s2j38y.jl:44\n  \ntest set: Error During\
    \ Test at /tmp/tmpd6s2j38y.jl:48\n  Test threw exception\n  Expression: candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  BoundsError: attempt to access\
    \ 2-element Array{Int64,1} at index [6]\n  Stacktrace:\n   [1] getindex at ./array.jl:788\
    \ [inlined]\n   [2] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpd6s2j38y.jl:31\n\
    \   [3] top-level scope at /tmp/tmpd6s2j38y.jl:48\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpd6s2j38y.jl:44\n  \ntest set: Error During\
    \ Test at /tmp/tmpd6s2j38y.jl:49\n  Test threw exception\n  Expression: candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n  BoundsError: attempt to access 3-element\
    \ Array{Int64,1} at index [6]\n  Stacktrace:\n   [1] getindex at ./array.jl:788\
    \ [inlined]\n   [2] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpd6s2j38y.jl:31\n\
    \   [3] top-level scope at /tmp/tmpd6s2j38y.jl:49\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpd6s2j38y.jl:44\n  \ntest set: Test Failed at\
    \ /tmp/tmpd6s2j38y.jl:50\n  Expression: candidate([5, 15, 0, 3, -13, -8, 0], 7)\
    \ == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [5, 15, 0, 3, -13, -8, 0] == [-13,\
    \ -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] top-level scope at /tmp/tmpd6s2j38y.jl:50\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpd6s2j38y.jl:44\ntest set: Error During Test at\
    \ /tmp/tmpd6s2j38y.jl:51\n  Test threw exception\n  Expression: candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n  BoundsError: attempt to access 3-element Array{Int64,1}\
    \ at index [5]\n  Stacktrace:\n   [1] getindex at ./array.jl:788 [inlined]\n \
    \  [2] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpd6s2j38y.jl:31\n   [3] top-level\
    \ scope at /tmp/tmpd6s2j38y.jl:51\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpd6s2j38y.jl:44\n  \ntest set: Error During\
    \ Test at /tmp/tmpd6s2j38y.jl:52\n  Test threw exception\n  Expression: candidate([1,\
    \ 0, 5, -7], 1) == [5]\n  BoundsError: attempt to access 3-element Array{Int64,1}\
    \ at index [4]\n  Stacktrace:\n   [1] getindex at ./array.jl:788 [inlined]\n \
    \  [2] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpd6s2j38y.jl:31\n   [3] top-level\
    \ scope at /tmp/tmpd6s2j38y.jl:52\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpd6s2j38y.jl:44\n  \ntest set: Test Failed at\
    \ /tmp/tmpd6s2j38y.jl:53\n  Expression: candidate([4, -4], 2) == [-4, 4]\n   Evaluated:\
    \ [4, -4] == [-4, 4]\nStacktrace:\n [1] top-level scope at /tmp/tmpd6s2j38y.jl:53\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpd6s2j38y.jl:44\ntest set: Error During Test at\
    \ /tmp/tmpd6s2j38y.jl:55\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([])\n  BoundsError: attempt to\
    \ access 7-element Array{Int64,1} at index [0]\n  Stacktrace:\n   [1] getindex\
    \ at ./array.jl:788 [inlined]\n   [2] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpd6s2j38y.jl:31\n\
    \   [3] top-level scope at /tmp/tmpd6s2j38y.jl:55\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpd6s2j38y.jl:44\n  \nTest Summary: | Pass  Fail\
    \  Error  Total\ntest set      |    1     4      6     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpd6s2j38y.jl:42\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    maximum = arr\n \
    \   for i = 1:k\n        maximum = maximum(maximum(maximum.-arr), maximum)\n \
    \   end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\nmaximum(arr,\
    \ 3)\n</cell>\n<text>\n4. Finding the k-th largest element in an array\nusing\
    \ Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5],\
    \ 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpdn76epe9.jl:32\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpdn76epe9.jl:32\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    maximum = arr\n \
    \   for i = 1:k\n        maximum = maximum(maximum(maximum.max(), maximum.min()),\
    \ maximum.max())\n    end\n    return maximum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmprnhzqmpb.jl:37\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  type Array has no field\
    \ max\n  Stacktrace:\n   [1] getproperty(::Array{Int64,1}, ::Symbol) at ./Base.jl:33\n\
    \   [2] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmprnhzqmpb.jl:28\n   [3] top-level\
    \ scope at /tmp/tmprnhzqmpb.jl:37\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmprnhzqmpb.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmprnhzqmpb.jl:38\n  Test threw exception\n  Expression: candidate([4,\
    \ -4, 4], 2) == [4, 4]\n  type Array has no field max\n  Stacktrace:\n   [1] getproperty(::Array{Int64,1},\
    \ ::Symbol) at ./Base.jl:33\n   [2] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmprnhzqmpb.jl:28\n\
    \   [3] top-level scope at /tmp/tmprnhzqmpb.jl:38\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmprnhzqmpb.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmprnhzqmpb.jl:39\n  Test threw exception\n  Expression: candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2]\n  type Array has no field max\n  Stacktrace:\n\
    \   [1] getproperty(::Array{Int64,1}, ::Symbol) at ./Base.jl:33\n   [2] maximum(::Array{Int64,1},\
    \ ::Int64) at /tmp/tmprnhzqmpb.jl:28\n   [3] top-level scope at /tmp/tmprnhzqmpb.jl:39\n\
    \   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmprnhzqmpb.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmprnhzqmpb.jl:40\n  Test threw exception\n  Expression: candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  type Array has no field max\n\
    \  Stacktrace:\n   [1] getproperty(::Array{Int64,1}, ::Symbol) at ./Base.jl:33\n\
    \   [2] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmprnhzqmpb.jl:28\n   [3] top-level\
    \ scope at /tmp/tmprnhzqmpb.jl:40\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmprnhzqmpb.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmprnhzqmpb.jl:41\n  Test threw exception\n  Expression: candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n  type Array has no field max\n  Stacktrace:\n\
    \   [1] getproperty(::Array{Int64,1}, ::Symbol) at ./Base.jl:33\n   [2] maximum(::Array{Int64,1},\
    \ ::Int64) at /tmp/tmprnhzqmpb.jl:28\n   [3] top-level scope at /tmp/tmprnhzqmpb.jl:41\n\
    \   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmprnhzqmpb.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmprnhzqmpb.jl:42\n  Test threw exception\n  Expression: candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n  type Array has no\
    \ field max\n  Stacktrace:\n   [1] getproperty(::Array{Int64,1}, ::Symbol) at\
    \ ./Base.jl:33\n   [2] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmprnhzqmpb.jl:28\n\
    \   [3] top-level scope at /tmp/tmprnhzqmpb.jl:42\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmprnhzqmpb.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmprnhzqmpb.jl:43\n  Test threw exception\n  Expression: candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n  type Array has no field max\n  Stacktrace:\n\
    \   [1] getproperty(::Array{Int64,1}, ::Symbol) at ./Base.jl:33\n   [2] maximum(::Array{Int64,1},\
    \ ::Int64) at /tmp/tmprnhzqmpb.jl:28\n   [3] top-level scope at /tmp/tmprnhzqmpb.jl:43\n\
    \   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmprnhzqmpb.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmprnhzqmpb.jl:44\n  Test threw exception\n  Expression: candidate([1,\
    \ 0, 5, -7], 1) == [5]\n  type Array has no field max\n  Stacktrace:\n   [1] getproperty(::Array{Int64,1},\
    \ ::Symbol) at ./Base.jl:33\n   [2] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmprnhzqmpb.jl:28\n\
    \   [3] top-level scope at /tmp/tmprnhzqmpb.jl:44\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmprnhzqmpb.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmprnhzqmpb.jl:45\n  Test threw exception\n  Expression: candidate([4,\
    \ -4], 2) == [-4, 4]\n  type Array has no field max\n  Stacktrace:\n   [1] getproperty(::Array{Int64,1},\
    \ ::Symbol) at ./Base.jl:33\n   [2] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmprnhzqmpb.jl:28\n\
    \   [3] top-level scope at /tmp/tmprnhzqmpb.jl:45\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmprnhzqmpb.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmprnhzqmpb.jl:46\n  Test threw exception\n  Expression: candidate([-10,\
    \ 10], 2) == [-10, 10]\n  type Array has no field max\n  Stacktrace:\n   [1] getproperty(::Array{Int64,1},\
    \ ::Symbol) at ./Base.jl:33\n   [2] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmprnhzqmpb.jl:28\n\
    \   [3] top-level scope at /tmp/tmprnhzqmpb.jl:46\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmprnhzqmpb.jl:36\n  \ntest set: Test Failed at\
    \ /tmp/tmprnhzqmpb.jl:47\n  Expression: candidate([1, 2, 3, -23, 243, -400, 0],\
    \ 0) == Vector{Int64}([])\n   Evaluated: [1, 2, 3, -23, 243, -400, 0] == Int64[]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmprnhzqmpb.jl:47\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmprnhzqmpb.jl:36\nTest Summary: | Fail  Error \
    \ Total\ntest set      |    1     10     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 1 failed, 10 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprnhzqmpb.jl:34\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    maximum = arr\n \
    \   for i = 1:k\n        maximum = maximum(maximum(maximum.-arr))\n    end\n \
    \   return maximum\nend\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 3)\n\
    </cell>\n<text>\n4.3 Find Minimum\nusing Test\n\n@testset begin\n\ncandidate =\
    \ maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_7s40b1b.jl:32\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_7s40b1b.jl:32\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k > length(arr)\n\
    \        error(\"k must be less than or equal to length(arr)\")\n    end\n   \
    \ maximum = arr\n    for i in 1:k\n        maximum = maximum(maximum(maximum,\
    \ arr[i]), arr[i+1])\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 3)\n</cell>\n<text>\nExercise 4\nWrite a function that takes a vector\
    \ arr of integers and a positive integer k and returns a sorted list of length\
    \ k with the minimum k numbers in arr.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp20t5miq1.jl:35\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp20t5miq1.jl:35\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    maximum = arr\n \
    \   for i = 1:k\n        maximum = maximum(maximum(maximum, arr), arr)\n    end\n\
    \    maximum\nend\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 3)\n</cell>\n\
    <text>\nmaximum\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpl555bx97.jl:32\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpl555bx97.jl:32\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    maximums = Vector{Int64}()\n\
    \    maximums = maximums[:]\n    maximums = maximums[:]\n    maximums = maximums[:]\n\
    \    maximums = maximums[:]\n    maximums = maximums[:]\n    maximums = maximums[:]\n\
    \    maximums = maximums[:]\n    maximums = maximums[:]\n    maximums = maximums[:]\n\
    \    maximums = maximums[:]\n    maximums = maximums[:]\n    maximums = maximums[:]\n\
    \    maximums = maximums[:]\n    maximums = maximums[:]\n    maximums = maximums[:]\n\
    \    maximums = maximums[:]\n    maximums = maximums[:]\n    maximums = maximums[:]\n\
    \    maximums = maximums[:]\n    maximums = maximums[:]\n    maximums = maximums[:]\n\
    \    maximums = maximums[:]\n    maximums = maximums[:]\n    maximums = maximums[:]\n\
    \    maximums = maximums[:]\n    maximums = maximums[:]\n    maximums = maximums[:]\n\
    \    maximums = maximums[:]\n    maximums = maximums[:]\n    maximums = maximums[:]\n\
    \    maximums = maximums[:]\n    maximums = maximums[:]\n    maximums = maximums[:]\n\
    \    maximums = maximums[:]\n    maximums = maximums[:]\n    maximums = maximums[:]\n\
    \    maximums = maximums[:]\n    maximums = maximums[:]\n    maximums = maximums[:]\n\
    \    maximums = maximums[:]\n    maximums = maximums[:]\n    maximums = maximums[:]\n\
    \    maximums = maximums[:]\n    maximums = maximums[:]\n    maximums = maximums[:]\n\
    \    maximums = maximums[:]\n    maximums = maximums[:]\n    maximums = maximums[:]\n\
    \    maximums = maximums[:]\n    maximums = maximums[:]\n    maximums = maximums[:]\n\
    \    maximums = maximums[:]\n    maximums = maximums[:]\n    maximums = maximums[:]\n\
    \    maximums = maximums[:]\n    maximums = maximums[:]\n    maximums = maximums[:]\n\
    \    maximums = maximums[:]\n    maximums = maximums[:]\n    maximums = maximums[:]\n\
    \    maximums = maximums[:]\n    maximums = maximums[:]\n    maximums = maximums[:]\n\
    \    maximums = maximums[:]\n    maximums = maximums[:]\n    maximums = maximums[:]\n\
    \    maximums = maximums[:]\n    maximums = maximums[:]\n    maximums = maximums[:]\n\
    \    maximums = maximums[:]\n    maximums = maximums[:]\n    maximums = maximums[\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp86qcxc1q.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp86qcxc1q.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k == 0 \n    \
    \    return arr \n    else \n        maximum = maximum(maximum(arr, k-1), k) \n\
    \        maximum[end] = maximum(maximum(arr, k-1), k) \n        return maximum\
    \ \nend\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 3)\n</cell>\n<text>\n\
    The maximum of a vector is the element in the vector with the highest value.\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmprj_2dqtd.jl:33\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmprj_2dqtd.jl:33\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k == 0 \n    \
    \    return arr\n    \n    maximum = maximum([arr[i]+i for i in 1:k], k-1)\n \
    \   maximum = maximum([arr[i]-i for i in 1:k], k-1)\n    maximum = maximum([maximum,\
    \ arr[i]], k-1)\n    return maximum\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpk7uy2fjh.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpk7uy2fjh.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpk7uy2fjh.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    maximum = arr\n \
    \   for i = 1:k\n        maximum = maximum(maximum(maximum, arr[i]), arr[i+1])\n\
    \    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\nmaximum(arr,\
    \ 3)\n</cell>\n<text>\nProblem 4\nWrite a function that accepts a string and returns\
    \ a string where all characters have been converted to lowercase and all words\
    \ have been converted to uppercase. Words are separated by spaces.\nusing Test\n\
    \n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) ==\
    \ [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpymro2mh7.jl:32\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpymro2mh7.jl:32\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    maximum = arr\n \
    \   for i = k+1:length(arr)\n        maximum = maximum(maximum(maximum, arr[i]),\
    \ maximum)\n    end\n    return maximum\nend\n\"\"\"\n    Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n    of length k with\
    \ the minimum k numbers in arr.\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpl8zsa0p3.jl:32\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpl8zsa0p3.jl:32\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k == 0 \n    \
    \    return arr\n    else \n        maximum = maximum(maximum(arr, k-1), k-1)\n\
    \        maximum = maximum(maximum, k)\n        return maximum\nend\n\"\"\"\n\
    \    Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n    of length k with the minimum k numbers in arr.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2,\
    \ 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphay9qdkg.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmphay9qdkg.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    maximums = zeros(Int,\
    \ k)\n    for i = 1:k\n        maximums[i] = maximum(maximum(arr, i), k)\n   \
    \ end\n    return maximums\nend\n</cell>\n<code language=julia-1.5>\nmaximum(arr,\
    \ k)\n</cell>\n<text>\n4. Sort a vector\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpd97s7m7q.jl:32\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpd97s7m7q.jl:32\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    maximums = Vector{Int64}(undef,\
    \ k)\n    for i = 1:k\n        maximums[i] = maximum(arr,i)\n    end\n    return\
    \ maximums\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpticdhcmg.jl:37\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] Array at ./boot.jl:405 [inlined]\n   [2] maximum(::Array{Int64,1},\
    \ ::Int64) at /tmp/tmpticdhcmg.jl:26\n   [3] maximum(::Array{Int64,1}, ::Int64)\
    \ at /tmp/tmpticdhcmg.jl:28 (repeats 65367 times)\n   [4] top-level scope at /tmp/tmpticdhcmg.jl:37\n\
    \   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpticdhcmg.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmpticdhcmg.jl:38\n  Test threw exception\n  Expression: candidate([4,\
    \ -4, 4], 2) == [4, 4]\n  StackOverflowError:\n  Stacktrace:\n   [1] Array at\
    \ ./boot.jl:405 [inlined]\n   [2] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpticdhcmg.jl:26\n\
    \   [3] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpticdhcmg.jl:28 (repeats\
    \ 65367 times)\n   [4] top-level scope at /tmp/tmpticdhcmg.jl:38\n   [5] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpticdhcmg.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmpticdhcmg.jl:39\n  Test threw exception\n  Expression: candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2]\n  StackOverflowError:\n  Stacktrace:\n   [1]\
    \ Array at ./boot.jl:405 [inlined]\n   [2] maximum(::Array{Int64,1}, ::Int64)\
    \ at /tmp/tmpticdhcmg.jl:26\n   [3] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpticdhcmg.jl:28\
    \ (repeats 65367 times)\n   [4] top-level scope at /tmp/tmpticdhcmg.jl:39\n  \
    \ [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpticdhcmg.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmpticdhcmg.jl:40\n  Test threw exception\n  Expression: candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  StackOverflowError:\n  Stacktrace:\n\
    \   [1] Array at ./boot.jl:405 [inlined]\n   [2] maximum(::Array{Int64,1}, ::Int64)\
    \ at /tmp/tmpticdhcmg.jl:26\n   [3] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpticdhcmg.jl:28\
    \ (repeats 65367 times)\n   [4] top-level scope at /tmp/tmpticdhcmg.jl:40\n  \
    \ [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpticdhcmg.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmpticdhcmg.jl:41\n  Test threw exception\n  Expression: candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n  StackOverflowError:\n  Stacktrace:\n\
    \   [1] Array at ./boot.jl:405 [inlined]\n   [2] maximum(::Array{Int64,1}, ::Int64)\
    \ at /tmp/tmpticdhcmg.jl:26\n   [3] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpticdhcmg.jl:28\
    \ (repeats 65367 times)\n   [4] top-level scope at /tmp/tmpticdhcmg.jl:41\n  \
    \ [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpticdhcmg.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmpticdhcmg.jl:42\n  Test threw exception\n  Expression: candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] Array at ./boot.jl:405 [inlined]\n   [2] maximum(::Array{Int64,1},\
    \ ::Int64) at /tmp/tmpticdhcmg.jl:26\n   [3] maximum(::Array{Int64,1}, ::Int64)\
    \ at /tmp/tmpticdhcmg.jl:28 (repeats 65367 times)\n   [4] top-level scope at /tmp/tmpticdhcmg.jl:42\n\
    \   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpticdhcmg.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmpticdhcmg.jl:43\n  Test threw exception\n  Expression: candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n  StackOverflowError:\n  Stacktrace:\n   [1]\
    \ Array at ./boot.jl:405 [inlined]\n   [2] maximum(::Array{Int64,1}, ::Int64)\
    \ at /tmp/tmpticdhcmg.jl:26\n   [3] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpticdhcmg.jl:28\
    \ (repeats 65367 times)\n   [4] top-level scope at /tmp/tmpticdhcmg.jl:43\n  \
    \ [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpticdhcmg.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmpticdhcmg.jl:44\n  Test threw exception\n  Expression: candidate([1,\
    \ 0, 5, -7], 1) == [5]\n  StackOverflowError:\n  Stacktrace:\n   [1] Array at\
    \ ./boot.jl:405 [inlined]\n   [2] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpticdhcmg.jl:26\n\
    \   [3] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpticdhcmg.jl:28 (repeats\
    \ 65367 times)\n   [4] top-level scope at /tmp/tmpticdhcmg.jl:44\n   [5] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpticdhcmg.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmpticdhcmg.jl:45\n  Test threw exception\n  Expression: candidate([4,\
    \ -4], 2) == [-4, 4]\n  StackOverflowError:\n  Stacktrace:\n   [1] Array at ./boot.jl:405\
    \ [inlined]\n   [2] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpticdhcmg.jl:26\n\
    \   [3] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpticdhcmg.jl:28 (repeats\
    \ 65367 times)\n   [4] top-level scope at /tmp/tmpticdhcmg.jl:45\n   [5] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpticdhcmg.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmpticdhcmg.jl:46\n  Test threw exception\n  Expression: candidate([-10,\
    \ 10], 2) == [-10, 10]\n  StackOverflowError:\n  Stacktrace:\n   [1] Array at\
    \ ./boot.jl:405 [inlined]\n   [2] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpticdhcmg.jl:26\n\
    \   [3] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpticdhcmg.jl:28 (repeats\
    \ 65367 times)\n   [4] top-level scope at /tmp/tmpticdhcmg.jl:46\n   [5] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpticdhcmg.jl:36\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    1     10     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 10 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpticdhcmg.jl:34\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    maximum = arr\n \
    \   for i = 1:k\n        maximum = maximum(maximum(maximum, arr), arr)\n    end\n\
    \    return maximum\nend\n</cell>\n<code language=julia-1.5>\nmaximum(arr, k)\n\
    </cell>\n<text>\nGreatest Common Divisor\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp0h9hrv4i.jl:32\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp0h9hrv4i.jl:32\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    maximums = Vector{Int64}()\n\
    \    for x in arr\n        if maximums.length < k\n            maximums.push(x)\n\
    \        else\n            if maximums[maximums.length - 1] < x\n            \
    \    maximums[maximums.length - 1] = x\n            else\n                maximums[maximums.length]\
    \ = x\n            end\n        end\n    end\n    return maximums\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5],\
    \ 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpkhrdax0n.jl:45\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  type Array has no field\
    \ length\n  Stacktrace:\n   [1] getproperty(::Array{Int64,1}, ::Symbol) at ./Base.jl:33\n\
    \   [2] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpkhrdax0n.jl:28\n   [3] top-level\
    \ scope at /tmp/tmpkhrdax0n.jl:45\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpkhrdax0n.jl:44\n  \ntest set: Error During\
    \ Test at /tmp/tmpkhrdax0n.jl:46\n  Test threw exception\n  Expression: candidate([4,\
    \ -4, 4], 2) == [4, 4]\n  type Array has no field length\n  Stacktrace:\n   [1]\
    \ getproperty(::Array{Int64,1}, ::Symbol) at ./Base.jl:33\n   [2] maximum(::Array{Int64,1},\
    \ ::Int64) at /tmp/tmpkhrdax0n.jl:28\n   [3] top-level scope at /tmp/tmpkhrdax0n.jl:46\n\
    \   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpkhrdax0n.jl:44\n  \ntest set: Error During\
    \ Test at /tmp/tmpkhrdax0n.jl:47\n  Test threw exception\n  Expression: candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2]\n  type Array has no field length\n  Stacktrace:\n\
    \   [1] getproperty(::Array{Int64,1}, ::Symbol) at ./Base.jl:33\n   [2] maximum(::Array{Int64,1},\
    \ ::Int64) at /tmp/tmpkhrdax0n.jl:28\n   [3] top-level scope at /tmp/tmpkhrdax0n.jl:47\n\
    \   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpkhrdax0n.jl:44\n  \ntest set: Error During\
    \ Test at /tmp/tmpkhrdax0n.jl:48\n  Test threw exception\n  Expression: candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  type Array has no field length\n\
    \  Stacktrace:\n   [1] getproperty(::Array{Int64,1}, ::Symbol) at ./Base.jl:33\n\
    \   [2] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpkhrdax0n.jl:28\n   [3] top-level\
    \ scope at /tmp/tmpkhrdax0n.jl:48\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpkhrdax0n.jl:44\n  \ntest set: Error During\
    \ Test at /tmp/tmpkhrdax0n.jl:49\n  Test threw exception\n  Expression: candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n  type Array has no field length\n  Stacktrace:\n\
    \   [1] getproperty(::Array{Int64,1}, ::Symbol) at ./Base.jl:33\n   [2] maximum(::Array{Int64,1},\
    \ ::Int64) at /tmp/tmpkhrdax0n.jl:28\n   [3] top-level scope at /tmp/tmpkhrdax0n.jl:49\n\
    \   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpkhrdax0n.jl:44\n  \ntest set: Error During\
    \ Test at /tmp/tmpkhrdax0n.jl:50\n  Test threw exception\n  Expression: candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n  type Array has no\
    \ field length\n  Stacktrace:\n   [1] getproperty(::Array{Int64,1}, ::Symbol)\
    \ at ./Base.jl:33\n   [2] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpkhrdax0n.jl:28\n\
    \   [3] top-level scope at /tmp/tmpkhrdax0n.jl:50\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpkhrdax0n.jl:44\n  \ntest set: Error During\
    \ Test at /tmp/tmpkhrdax0n.jl:51\n  Test threw exception\n  Expression: candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n  type Array has no field length\n  Stacktrace:\n\
    \   [1] getproperty(::Array{Int64,1}, ::Symbol) at ./Base.jl:33\n   [2] maximum(::Array{Int64,1},\
    \ ::Int64) at /tmp/tmpkhrdax0n.jl:28\n   [3] top-level scope at /tmp/tmpkhrdax0n.jl:51\n\
    \   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpkhrdax0n.jl:44\n  \ntest set: Error During\
    \ Test at /tmp/tmpkhrdax0n.jl:52\n  Test threw exception\n  Expression: candidate([1,\
    \ 0, 5, -7], 1) == [5]\n  type Array has no field length\n  Stacktrace:\n   [1]\
    \ getproperty(::Array{Int64,1}, ::Symbol) at ./Base.jl:33\n   [2] maximum(::Array{Int64,1},\
    \ ::Int64) at /tmp/tmpkhrdax0n.jl:28\n   [3] top-level scope at /tmp/tmpkhrdax0n.jl:52\n\
    \   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpkhrdax0n.jl:44\n  \ntest set: Error During\
    \ Test at /tmp/tmpkhrdax0n.jl:53\n  Test threw exception\n  Expression: candidate([4,\
    \ -4], 2) == [-4, 4]\n  type Array has no field length\n  Stacktrace:\n   [1]\
    \ getproperty(::Array{Int64,1}, ::Symbol) at ./Base.jl:33\n   [2] maximum(::Array{Int64,1},\
    \ ::Int64) at /tmp/tmpkhrdax0n.jl:28\n   [3] top-level scope at /tmp/tmpkhrdax0n.jl:53\n\
    \   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpkhrdax0n.jl:44\n  \ntest set: Error During\
    \ Test at /tmp/tmpkhrdax0n.jl:54\n  Test threw exception\n  Expression: candidate([-10,\
    \ 10], 2) == [-10, 10]\n  type Array has no field length\n  Stacktrace:\n   [1]\
    \ getproperty(::Array{Int64,1}, ::Symbol) at ./Base.jl:33\n   [2] maximum(::Array{Int64,1},\
    \ ::Int64) at /tmp/tmpkhrdax0n.jl:28\n   [3] top-level scope at /tmp/tmpkhrdax0n.jl:54\n\
    \   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpkhrdax0n.jl:44\n  \ntest set: Error During\
    \ Test at /tmp/tmpkhrdax0n.jl:55\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([])\n  type Array has no field\
    \ length\n  Stacktrace:\n   [1] getproperty(::Array{Int64,1}, ::Symbol) at ./Base.jl:33\n\
    \   [2] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpkhrdax0n.jl:28\n   [3] top-level\
    \ scope at /tmp/tmpkhrdax0n.jl:55\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpkhrdax0n.jl:44\n  \nTest Summary: | Error \
    \ Total\ntest set      |    11     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkhrdax0n.jl:42\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    maximums = Vector{Int64}()\n\
    \    maximums[k] = arr[k]\n    for i = k+1:length(arr)\n        if arr[i] > maximums[k]\n\
    \            maximums[k] = arr[i]\n        end\n    end\n    return maximums\n\
    end\n\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the minimum k numbers in arr.\nusing Test\n\
    \n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) ==\
    \ [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpps_lmhs7.jl:35\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpps_lmhs7.jl:35\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    maximum = arr\n \
    \   for i = 2:k\n        maximum = maximum(maximum(maximum.-minimum(maximum)),\
    \ maximum)\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 3)\n</cell>\n<text>\n6. \u6700\u5C0F\u503C\nGiven an array arr of\
    \ integers and a positive integer k, return a sorted list \n    of length k with\
    \ the minimum k numbers in arr.\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpkmu6ltim.jl:32\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpkmu6ltim.jl:32\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    maximum = arr\n \
    \   for i = 2:k\n        maximum = maximum(maximum(maximum, arr), i)\n    end\n\
    \    maximum\nend\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 3)\n</cell>\n\
    <text>\n4. Find the sum of all elements in the array\nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpg6_f8kdg.jl:32\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpg6_f8kdg.jl:32\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    maximum = arr\n \
    \   for i = 2:k\n        maximum = maximum(maximum(maximum, arr), arr[i])\n  \
    \  end\n    maximum\nend\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 3)\n\
    </cell>\n<text>\nmaximum\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmped6we79b.jl:32\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmped6we79b.jl:32\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    maximum = arr\n \
    \   for i = 1:k\n        maximum = maximum(maximum(maximum, arr), arr)\n    end\n\
    \    maximum\nend\n</cell>\n<code language=julia-1.0>\nmaximum(arr, 3)\n</cell>\n\
    <text>\nmaximum\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp1gg0vzvr.jl:32\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp1gg0vzvr.jl:32\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k > length(arr)\
    \ \n        error(\"k must be less than or equal to length(arr)\")\n    end\n\
    \    maximum = arr\n    for i = k+1:length(arr) \n        maximum = maximum(maximum(maximum,\
    \ arr[i]), maximum)\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 3)\n</cell>\n<text>\nExercise 3\nWrite a function that returns the\
    \ minimum number in a given array of integers. \nThe function should take in a\
    \ vector of integers and return a single integer.\nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpxhmd9usr.jl:35\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpxhmd9usr.jl:35\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    maximum = zeros(Int64,\
    \ k)\n    maximum[arr .== maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpvfeey6u7.jl:30\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpvfeey6u7.jl:30\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    maximum = zeros(Int64,\
    \ k)\n    maximum[minimum(arr, k)] = maximum[minimum(arr, k)] \n    for i = minimum(arr,\
    \ k) + 1:length(arr)\n        maximum[i] = maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpd841b69o.jl:32\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpd841b69o.jl:32\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k == 0 \n    \
    \    return arr \n    else \n        maximum = maximum(maximum(arr,k-1),k) \n\
    \        maximum[end] = maximum(arr[end],k) \n        return maximum \nend\n</cell>\n\
    <code language=julia-1.3>\nmaximum(arr, 3)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the minimum number in a given array of numbers.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5],\
    \ 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmptmvvyez5.jl:33\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmptmvvyez5.jl:33\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    maximum = arr\n \
    \   for i = 1:k\n        maximum = maximum(maximum(maximum, arr), arr)\n    end\n\
    \    return maximum\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp3229rxi_.jl:37\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  MethodError: objects\
    \ of type Array{Int64,1} are not callable\n  Use square brackets [] for indexing\
    \ an Array.\n  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp3229rxi_.jl:28\n\
    \   [2] top-level scope at /tmp/tmp3229rxi_.jl:37\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp3229rxi_.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmp3229rxi_.jl:38\n  Test threw exception\n  Expression: candidate([4,\
    \ -4, 4], 2) == [4, 4]\n  MethodError: objects of type Array{Int64,1} are not\
    \ callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n \
    \  [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp3229rxi_.jl:28\n   [2] top-level\
    \ scope at /tmp/tmp3229rxi_.jl:38\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp3229rxi_.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmp3229rxi_.jl:39\n  Test threw exception\n  Expression: candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2]\n  MethodError: objects of type Array{Int64,1}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp3229rxi_.jl:28\n   [2] top-level\
    \ scope at /tmp/tmp3229rxi_.jl:39\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp3229rxi_.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmp3229rxi_.jl:40\n  Test threw exception\n  Expression: candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  MethodError: objects of type Array{Int64,1}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp3229rxi_.jl:28\n   [2] top-level\
    \ scope at /tmp/tmp3229rxi_.jl:40\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp3229rxi_.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmp3229rxi_.jl:41\n  Test threw exception\n  Expression: candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n  MethodError: objects of type Array{Int64,1}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp3229rxi_.jl:28\n   [2] top-level\
    \ scope at /tmp/tmp3229rxi_.jl:41\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp3229rxi_.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmp3229rxi_.jl:42\n  Test threw exception\n  Expression: candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n  MethodError: objects\
    \ of type Array{Int64,1} are not callable\n  Use square brackets [] for indexing\
    \ an Array.\n  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp3229rxi_.jl:28\n\
    \   [2] top-level scope at /tmp/tmp3229rxi_.jl:42\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp3229rxi_.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmp3229rxi_.jl:43\n  Test threw exception\n  Expression: candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n  MethodError: objects of type Array{Int64,1}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp3229rxi_.jl:28\n   [2] top-level\
    \ scope at /tmp/tmp3229rxi_.jl:43\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp3229rxi_.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmp3229rxi_.jl:44\n  Test threw exception\n  Expression: candidate([1,\
    \ 0, 5, -7], 1) == [5]\n  MethodError: objects of type Array{Int64,1} are not\
    \ callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n \
    \  [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp3229rxi_.jl:28\n   [2] top-level\
    \ scope at /tmp/tmp3229rxi_.jl:44\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp3229rxi_.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmp3229rxi_.jl:45\n  Test threw exception\n  Expression: candidate([4,\
    \ -4], 2) == [-4, 4]\n  MethodError: objects of type Array{Int64,1} are not callable\n\
    \  Use square brackets [] for indexing an Array.\n  Stacktrace:\n   [1] maximum(::Array{Int64,1},\
    \ ::Int64) at /tmp/tmp3229rxi_.jl:28\n   [2] top-level scope at /tmp/tmp3229rxi_.jl:45\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp3229rxi_.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmp3229rxi_.jl:46\n  Test threw exception\n  Expression: candidate([-10,\
    \ 10], 2) == [-10, 10]\n  MethodError: objects of type Array{Int64,1} are not\
    \ callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n \
    \  [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp3229rxi_.jl:28\n   [2] top-level\
    \ scope at /tmp/tmp3229rxi_.jl:46\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp3229rxi_.jl:36\n  \ntest set: Test Failed at\
    \ /tmp/tmp3229rxi_.jl:47\n  Expression: candidate([1, 2, 3, -23, 243, -400, 0],\
    \ 0) == Vector{Int64}([])\n   Evaluated: [1, 2, 3, -23, 243, -400, 0] == Int64[]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp3229rxi_.jl:47\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp3229rxi_.jl:36\nTest Summary: | Fail  Error \
    \ Total\ntest set      |    1     10     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 1 failed, 10 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3229rxi_.jl:34\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k > length(arr)\n\
    \        throw(ArgumentError(\"k must be less than or equal to length(arr)\"))\n\
    \    end\n    maximum = arr\n    for i = k+1:length(arr)\n        if maximum[i]\
    \ > maximum[i-1]\n            maximum = maximum[i-1:end]\n        else\n     \
    \       push!(maximum, maximum[i])\n        end\n    end\n    return maximum\n\
    end\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 3)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a vector of integers and a positive integer k\
    \ and returns the k largest elements of the vector.\nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3w06q2z4.jl:39\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp3w06q2z4.jl:39\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k == 0 \n    \
    \    return arr\n    else \n        maximum = maximum(maximum(arr, k-1), k-1)\n\
    \        maximum = maximum(maximum, k)\n        return maximum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) ==\
    \ [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp9lezljly.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp9lezljly.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp9lezljly.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    maximum = arr\n \
    \   for i = k+1:length(arr)\n        maximum = maximum(maximum(maximum, arr[i]),\
    \ maximum)\n    end\n    return maximum\nend\nusing Test\n\n@testset begin\n\n\
    candidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9zafo18c.jl:37\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [-3, -4, 5] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9zafo18c.jl:37\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9zafo18c.jl:36\ntest set: Error During Test at\
    \ /tmp/tmp9zafo18c.jl:38\n  Test threw exception\n  Expression: candidate([4,\
    \ -4, 4], 2) == [4, 4]\n  MethodError: objects of type Array{Int64,1} are not\
    \ callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n \
    \  [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp9zafo18c.jl:28\n   [2] top-level\
    \ scope at /tmp/tmp9zafo18c.jl:38\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp9zafo18c.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmp9zafo18c.jl:39\n  Test threw exception\n  Expression: candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2]\n  MethodError: objects of type Array{Int64,1}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp9zafo18c.jl:28\n   [2] top-level\
    \ scope at /tmp/tmp9zafo18c.jl:39\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp9zafo18c.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmp9zafo18c.jl:40\n  Test threw exception\n  Expression: candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  MethodError: objects of type Array{Int64,1}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp9zafo18c.jl:28\n   [2] top-level\
    \ scope at /tmp/tmp9zafo18c.jl:40\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp9zafo18c.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmp9zafo18c.jl:41\n  Test threw exception\n  Expression: candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n  MethodError: objects of type Array{Int64,1}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp9zafo18c.jl:28\n   [2] top-level\
    \ scope at /tmp/tmp9zafo18c.jl:41\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp9zafo18c.jl:36\n  \ntest set: Test Failed at\
    \ /tmp/tmp9zafo18c.jl:42\n  Expression: candidate([5, 15, 0, 3, -13, -8, 0], 7)\
    \ == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [5, 15, 0, 3, -13, -8, 0] == [-13,\
    \ -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] top-level scope at /tmp/tmp9zafo18c.jl:42\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9zafo18c.jl:36\ntest set: Error During Test at\
    \ /tmp/tmp9zafo18c.jl:43\n  Test threw exception\n  Expression: candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n  MethodError: objects of type Array{Int64,1}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp9zafo18c.jl:28\n   [2] top-level\
    \ scope at /tmp/tmp9zafo18c.jl:43\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp9zafo18c.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmp9zafo18c.jl:44\n  Test threw exception\n  Expression: candidate([1,\
    \ 0, 5, -7], 1) == [5]\n  MethodError: objects of type Array{Int64,1} are not\
    \ callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n \
    \  [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp9zafo18c.jl:28\n   [2] top-level\
    \ scope at /tmp/tmp9zafo18c.jl:44\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp9zafo18c.jl:36\n  \ntest set: Test Failed at\
    \ /tmp/tmp9zafo18c.jl:45\n  Expression: candidate([4, -4], 2) == [-4, 4]\n   Evaluated:\
    \ [4, -4] == [-4, 4]\nStacktrace:\n [1] top-level scope at /tmp/tmp9zafo18c.jl:45\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9zafo18c.jl:36\ntest set: Error During Test at\
    \ /tmp/tmp9zafo18c.jl:47\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([])\n  MethodError: objects of\
    \ type Array{Int64,1} are not callable\n  Use square brackets [] for indexing\
    \ an Array.\n  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp9zafo18c.jl:28\n\
    \   [2] top-level scope at /tmp/tmp9zafo18c.jl:47\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp9zafo18c.jl:36\n  \nTest Summary: | Pass  Fail\
    \  Error  Total\ntest set      |    1     3      7     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9zafo18c.jl:34\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k > length(arr)\n\
    \        throw(ArgumentError(\"k must be less than or equal to length(arr)\"))\n\
    \    end\n    maximum = arr\n    for i = k+1:length(arr)\n        maximum = maximum(maximum(maximum,\
    \ arr[i]), maximum)\n    end\n    return maximum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2,\
    \ 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpl9z2f97r.jl:40\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [-3, -4, 5] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpl9z2f97r.jl:40\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpl9z2f97r.jl:39\ntest set: Error During Test at\
    \ /tmp/tmpl9z2f97r.jl:41\n  Test threw exception\n  Expression: candidate([4,\
    \ -4, 4], 2) == [4, 4]\n  MethodError: objects of type Array{Int64,1} are not\
    \ callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n \
    \  [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpl9z2f97r.jl:31\n   [2] top-level\
    \ scope at /tmp/tmpl9z2f97r.jl:41\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpl9z2f97r.jl:39\n  \ntest set: Error During\
    \ Test at /tmp/tmpl9z2f97r.jl:42\n  Test threw exception\n  Expression: candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2]\n  MethodError: objects of type Array{Int64,1}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpl9z2f97r.jl:31\n   [2] top-level\
    \ scope at /tmp/tmpl9z2f97r.jl:42\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpl9z2f97r.jl:39\n  \ntest set: Error During\
    \ Test at /tmp/tmpl9z2f97r.jl:43\n  Test threw exception\n  Expression: candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  MethodError: objects of type Array{Int64,1}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpl9z2f97r.jl:31\n   [2] top-level\
    \ scope at /tmp/tmpl9z2f97r.jl:43\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpl9z2f97r.jl:39\n  \ntest set: Error During\
    \ Test at /tmp/tmpl9z2f97r.jl:44\n  Test threw exception\n  Expression: candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n  MethodError: objects of type Array{Int64,1}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpl9z2f97r.jl:31\n   [2] top-level\
    \ scope at /tmp/tmpl9z2f97r.jl:44\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpl9z2f97r.jl:39\n  \ntest set: Test Failed at\
    \ /tmp/tmpl9z2f97r.jl:45\n  Expression: candidate([5, 15, 0, 3, -13, -8, 0], 7)\
    \ == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [5, 15, 0, 3, -13, -8, 0] == [-13,\
    \ -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] top-level scope at /tmp/tmpl9z2f97r.jl:45\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpl9z2f97r.jl:39\ntest set: Error During Test at\
    \ /tmp/tmpl9z2f97r.jl:46\n  Test threw exception\n  Expression: candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n  MethodError: objects of type Array{Int64,1}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpl9z2f97r.jl:31\n   [2] top-level\
    \ scope at /tmp/tmpl9z2f97r.jl:46\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpl9z2f97r.jl:39\n  \ntest set: Error During\
    \ Test at /tmp/tmpl9z2f97r.jl:47\n  Test threw exception\n  Expression: candidate([1,\
    \ 0, 5, -7], 1) == [5]\n  MethodError: objects of type Array{Int64,1} are not\
    \ callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n \
    \  [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpl9z2f97r.jl:31\n   [2] top-level\
    \ scope at /tmp/tmpl9z2f97r.jl:47\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpl9z2f97r.jl:39\n  \ntest set: Test Failed at\
    \ /tmp/tmpl9z2f97r.jl:48\n  Expression: candidate([4, -4], 2) == [-4, 4]\n   Evaluated:\
    \ [4, -4] == [-4, 4]\nStacktrace:\n [1] top-level scope at /tmp/tmpl9z2f97r.jl:48\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpl9z2f97r.jl:39\ntest set: Error During Test at\
    \ /tmp/tmpl9z2f97r.jl:50\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([])\n  MethodError: objects of\
    \ type Array{Int64,1} are not callable\n  Use square brackets [] for indexing\
    \ an Array.\n  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpl9z2f97r.jl:31\n\
    \   [2] top-level scope at /tmp/tmpl9z2f97r.jl:50\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpl9z2f97r.jl:39\n  \nTest Summary: | Pass  Fail\
    \  Error  Total\ntest set      |    1     3      7     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpl9z2f97r.jl:37\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k == 0 \n    \
    \    return arr\n    elseif k == 1 \n        return arr\n    elseif k == 2 \n\
    \        return arr\n    elseif k == length(arr) \n        return arr\n    elseif\
    \ k > length(arr) \n        return maximum(arr, k-1)\n    elseif k == length(arr)-1\
    \ \n        return maximum(arr, k+1)\n    elseif k == length(arr)-2 \n       \
    \ return maximum(maximum(arr, k-1), k+1)\n    elseif k == length(arr)-3 \n   \
    \     return maximum(maximum(maximum(arr, k-1), k+1), k+1)\n    elseif k == length(arr)-4\
    \ \n        return maximum(maximum(maximum(maximum(arr, k-1), k+1), k+1), k+1)\n\
    \    elseif k == length(arr)-5 \n        return maximum(maximum(maximum(maximum(maximum(arr,\
    \ k-1), k+1), k+1), k+1), k+1)\n    elseif k == length(arr)-6 \n        return\
    \ maximum(maximum(maximum(maximum(maximum(maximum(arr, k-1), k+1), k+1), k+1),\
    \ k+1), k+1)\n    elseif k == length(arr)-7 \n        return maximum(maximum(maximum(maximum(maximum(maximum(maximum(arr,\
    \ k-1), k+1), k+1), k+1), k+1), k+1), k+1)\n    elseif k == length(arr)-8 \n \
    \       return maximum(maximum(maximum(maximum(maximum(maximum(maximum(arr, k-1),\
    \ k+1), k+1), k+1), k+1), k+1), k+1)\n    elseif k == length(arr)-9 \n       \
    \ return maximum(maximum(maximum(maximum(maximum(maximum(maximum(arr, k-1), k+1),\
    \ k+1), k+1), k+1), k+1), k+1), k+1)\n    elseif k == length(arr)-10 \n      \
    \  return maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(arr,\
    \ k-1), k+1), k+1), k+1), k+1), k+1), k+1), k+1), k+1)\n    elseif k == length(arr)-11\
    \ \n        return maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(arr,\
    \ k-1), k+1), k+1), k+1), k+1), k+1), k+1), k+1), k+1), k+1)\n    elseif k ==\
    \ length(arr)-12 \n        return maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(arr,\
    \ k-1), k+1), k+1), k+1), k+1), k+1), k+1), k+1), k+1), k+1), k+1)\n    elseif\
    \ k == length(arr)-13 \n        return maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(arr,\
    \ k-1), k+1), k+1), k+1), k+1), k+1), k+1), k+1), k+1), k+1), k+1), k+1), \nusing\
    \ Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5],\
    \ 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \")\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3qe6g73m.jl:53\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp3qe6g73m.jl:53\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    maximums = Vector{Int64}()\n\
    \    maximums.push(maximum(arr, 0))\n    for i = 1:k-1\n        maximums.push(maximum(maximums,\
    \ i))\n    end\n    return maximums\nend\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 3)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a positive\
    \ integer k and returns the number of numbers in arr that are less than or equal\
    \ to k.\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpm1bxkdcn.jl:33\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpm1bxkdcn.jl:33\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k == 0 \n    \
    \    return arr\n    else \n        maximum = maximum(maximum(arr,k-1),k-1)\n\
    \        maximum = maximum(maximum,maximum(arr,k-2),k-1)\n        maximum = maximum(maximum,maximum(arr,k-3),k-1)\n\
    \        return maximum\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp3m0dk1_e.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp3m0dk1_e.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp3m0dk1_e.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k > length(arr)\
    \ \n        error(\"k should be less than or equal to length(arr)\") \n    else\
    \ \n        maximum = arr \n        for i = k+1:length(arr) \n            maximum[i]\
    \ = maximum(maximum[i], arr[i]) \n        end\n        return maximum \n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 3)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that finds the minimum number in a given array. \nThe function\
    \ should take in a vector of integers and return a vector of integers. \nThe function\
    \ should return an error if the length of the vector is less than or equal to\
    \ 0.\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp1q1vayy9.jl:36\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp1q1vayy9.jl:36\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    maximum = arr\n \
    \   for i = 1:k\n        maximum = maximum(maximum(maximum, arr), arr)\n    end\n\
    \    maximum\nend\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 3)\n</cell>\n\
    <text>\nmaximum\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmptfxz3mal.jl:32\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmptfxz3mal.jl:32\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    maximum = zeros(Int64,\
    \ k)\n    for i = 1:k\n        maximum[i] = maximum(maximum(maximum(arr), maximum[i]),\
    \ maximum[i])\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 3)\n</cell>\n<text>\nExercise 3\nWrite a function that returns the\
    \ minimum number in a given array.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphr9ftuws.jl:32\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmphr9ftuws.jl:32\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k == 0 \n    \
    \    return arr\n    else \n        maximum = maximum(maximum(arr,k-1),k-1)\n\
    \        maximum = maximum(maximum,maximum(arr,k-2),k-1)\n        return maximum\n\
    end\n\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the minimum k numbers in arr.\nusing Test\n\
    \n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) ==\
    \ [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpq_2czuzi.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpq_2czuzi.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    maximums = Vector{Int64}()\n\
    \    maximums = maximums.+(k-1)\n    maximums = maximums.+maximum(arr,k-1)\n \
    \   maximums = maximums.+maximum(arr,k-1)\n    return maximums[2:end]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5],\
    \ 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpcopcbqqn.jl:37\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] Array at ./boot.jl:405 [inlined]\n   [2] Array at ./boot.jl:424\
    \ [inlined]\n   [3] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpcopcbqqn.jl:26\n\
    \   [4] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpcopcbqqn.jl:28 (repeats\
    \ 52324 times)\n   [5] top-level scope at /tmp/tmpcopcbqqn.jl:37\n   [6] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmpcopcbqqn.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmpcopcbqqn.jl:38\n  Test threw exception\n  Expression: candidate([4,\
    \ -4, 4], 2) == [4, 4]\n  StackOverflowError:\n  Stacktrace:\n   [1] Array at\
    \ ./boot.jl:405 [inlined]\n   [2] Array at ./boot.jl:424 [inlined]\n   [3] maximum(::Array{Int64,1},\
    \ ::Int64) at /tmp/tmpcopcbqqn.jl:26\n   [4] maximum(::Array{Int64,1}, ::Int64)\
    \ at /tmp/tmpcopcbqqn.jl:28 (repeats 52324 times)\n   [5] top-level scope at /tmp/tmpcopcbqqn.jl:38\n\
    \   [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmpcopcbqqn.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmpcopcbqqn.jl:39\n  Test threw exception\n  Expression: candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2]\n  StackOverflowError:\n  Stacktrace:\n   [1]\
    \ Array at ./boot.jl:405 [inlined]\n   [2] Array at ./boot.jl:424 [inlined]\n\
    \   [3] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpcopcbqqn.jl:26\n   [4] maximum(::Array{Int64,1},\
    \ ::Int64) at /tmp/tmpcopcbqqn.jl:28 (repeats 52324 times)\n   [5] top-level scope\
    \ at /tmp/tmpcopcbqqn.jl:39\n   [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmpcopcbqqn.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmpcopcbqqn.jl:40\n  Test threw exception\n  Expression: candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  StackOverflowError:\n  Stacktrace:\n\
    \   [1] Array at ./boot.jl:405 [inlined]\n   [2] Array at ./boot.jl:424 [inlined]\n\
    \   [3] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpcopcbqqn.jl:26\n   [4] maximum(::Array{Int64,1},\
    \ ::Int64) at /tmp/tmpcopcbqqn.jl:28 (repeats 52324 times)\n   [5] top-level scope\
    \ at /tmp/tmpcopcbqqn.jl:40\n   [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmpcopcbqqn.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmpcopcbqqn.jl:41\n  Test threw exception\n  Expression: candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n  StackOverflowError:\n  Stacktrace:\n\
    \   [1] Array at ./boot.jl:405 [inlined]\n   [2] Array at ./boot.jl:424 [inlined]\n\
    \   [3] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpcopcbqqn.jl:26\n   [4] maximum(::Array{Int64,1},\
    \ ::Int64) at /tmp/tmpcopcbqqn.jl:28 (repeats 52324 times)\n   [5] top-level scope\
    \ at /tmp/tmpcopcbqqn.jl:41\n   [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmpcopcbqqn.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmpcopcbqqn.jl:42\n  Test threw exception\n  Expression: candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] Array at ./boot.jl:405 [inlined]\n   [2] Array at ./boot.jl:424\
    \ [inlined]\n   [3] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpcopcbqqn.jl:26\n\
    \   [4] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpcopcbqqn.jl:28 (repeats\
    \ 52324 times)\n   [5] top-level scope at /tmp/tmpcopcbqqn.jl:42\n   [6] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmpcopcbqqn.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmpcopcbqqn.jl:43\n  Test threw exception\n  Expression: candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n  StackOverflowError:\n  Stacktrace:\n   [1]\
    \ Array at ./boot.jl:405 [inlined]\n   [2] Array at ./boot.jl:424 [inlined]\n\
    \   [3] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpcopcbqqn.jl:26\n   [4] maximum(::Array{Int64,1},\
    \ ::Int64) at /tmp/tmpcopcbqqn.jl:28 (repeats 52324 times)\n   [5] top-level scope\
    \ at /tmp/tmpcopcbqqn.jl:43\n   [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmpcopcbqqn.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmpcopcbqqn.jl:44\n  Test threw exception\n  Expression: candidate([1,\
    \ 0, 5, -7], 1) == [5]\n  StackOverflowError:\n  Stacktrace:\n   [1] Array at\
    \ ./boot.jl:405 [inlined]\n   [2] Array at ./boot.jl:424 [inlined]\n   [3] maximum(::Array{Int64,1},\
    \ ::Int64) at /tmp/tmpcopcbqqn.jl:26\n   [4] maximum(::Array{Int64,1}, ::Int64)\
    \ at /tmp/tmpcopcbqqn.jl:28 (repeats 52324 times)\n   [5] top-level scope at /tmp/tmpcopcbqqn.jl:44\n\
    \   [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmpcopcbqqn.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmpcopcbqqn.jl:45\n  Test threw exception\n  Expression: candidate([4,\
    \ -4], 2) == [-4, 4]\n  StackOverflowError:\n  Stacktrace:\n   [1] Array at ./boot.jl:405\
    \ [inlined]\n   [2] Array at ./boot.jl:424 [inlined]\n   [3] maximum(::Array{Int64,1},\
    \ ::Int64) at /tmp/tmpcopcbqqn.jl:26\n   [4] maximum(::Array{Int64,1}, ::Int64)\
    \ at /tmp/tmpcopcbqqn.jl:28 (repeats 52324 times)\n   [5] top-level scope at /tmp/tmpcopcbqqn.jl:45\n\
    \   [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmpcopcbqqn.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmpcopcbqqn.jl:46\n  Test threw exception\n  Expression: candidate([-10,\
    \ 10], 2) == [-10, 10]\n  StackOverflowError:\n  Stacktrace:\n   [1] Array at\
    \ ./boot.jl:405 [inlined]\n   [2] Array at ./boot.jl:424 [inlined]\n   [3] maximum(::Array{Int64,1},\
    \ ::Int64) at /tmp/tmpcopcbqqn.jl:26\n   [4] maximum(::Array{Int64,1}, ::Int64)\
    \ at /tmp/tmpcopcbqqn.jl:28 (repeats 52324 times)\n   [5] top-level scope at /tmp/tmpcopcbqqn.jl:46\n\
    \   [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmpcopcbqqn.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmpcopcbqqn.jl:47\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([])\n  StackOverflowError:\n \
    \ Stacktrace:\n   [1] Array at ./boot.jl:405 [inlined]\n   [2] Array at ./boot.jl:424\
    \ [inlined]\n   [3] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpcopcbqqn.jl:26\n\
    \   [4] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpcopcbqqn.jl:28 (repeats\
    \ 52324 times)\n   [5] top-level scope at /tmp/tmpcopcbqqn.jl:47\n   [6] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmpcopcbqqn.jl:36\n  \nTest Summary: | Error \
    \ Total\ntest set      |    11     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcopcbqqn.jl:34\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    maximum = arr\n \
    \   for i = 1:k\n        maximum = maximum(maximum(maximum, arr[i]), arr[i+1])\n\
    \    end\n    maximum\nend\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 3)\n\
    </cell>\n<text>\n10.4 Find Minimum\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpdwrfhsxr.jl:32\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpdwrfhsxr.jl:32\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    maximum = arr\n \
    \   for i = 1:k\n        maximum = maximum(maximum(maximum, arr), maximum)\n \
    \   end\n    maximum\nend\n</cell>\n<code language=julia-1.5>\nmaximum(arr, k)\n\
    </cell>\n<text>\n\u6700\u5C0F\u503C\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp1o3bd9_i.jl:32\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp1o3bd9_i.jl:32\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k > length(arr)\n\
    \        return arr\n    else\n        maximum = arr\n        for i = k+1:length(arr)\n\
    \            if maximum[i] > maximum[k-1]\n                maximum = maximum[i-1:end]\n\
    \            else\n                maximum = maximum[k-1:end]\n            end\n\
    \        end\n        return maximum\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 3)\n</cell>\n<text>\n4.3 Find Minimum\nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpgnypkcq8.jl:40\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpgnypkcq8.jl:40\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k > length(arr)\n\
    \        throw(ArgumentError(\"k must be less than or equal to length(arr)\"))\n\
    \    end\n    maximum = arr\n    for i = 1:k\n        maximum = maximum(maximum(maximum,\
    \ arr[i]))\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 3)\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 2)\n</cell>\n\
    <code language=julia-1.5>\nmaximum(arr, 4)\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 5)\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 6)\n</cell>\n\
    <code language=julia-1.5>\nmaximum(arr, 7)\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 8)\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 9)\n</cell>\n\
    <code language=julia-1.5>\nmaximum(arr, 10)\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 11)\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 12)\n</cell>\n\
    <code language=julia-1.5>\nmaximum(arr, 13)\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 14)\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 15)\n</cell>\n\
    <code language=julia-1.5>\nmaximum(arr, 16)\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 17)\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 18)\n</cell>\n\
    <code language=julia-1.5>\nmaximum(arr, 19)\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 20)\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 21)\n</cell>\n\
    <code language=julia-1.5>\nmaximum(arr, 22)\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 23)\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 24)\n</cell>\n\
    <code language=julia-1.5>\nmaximum(arr, 25)\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 26)\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 27)\n</cell>\n\
    <code language=julia-1.5>\nmaximum(arr, 28)\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 29)\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 30)\n</cell>\n\
    <code language=julia-1.5>\nmaximum(arr, 31)\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 32)\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 33)\n</cell>\n\
    <code language=julia-\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t\
    @test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp92pr3iac.jl:35\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp92pr3iac.jl:35\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k == 0 \n    \
    \    return arr\n    else \n        maximum = maximum.(maximum(arr, k-1), k)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp6rnwsb1s.jl:37\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  UndefVarError: maximum\
    \ not defined\n  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp6rnwsb1s.jl:29\n\
    \   [2] top-level scope at /tmp/tmp6rnwsb1s.jl:37\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp6rnwsb1s.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmp6rnwsb1s.jl:38\n  Test threw exception\n  Expression: candidate([4,\
    \ -4, 4], 2) == [4, 4]\n  UndefVarError: maximum not defined\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp6rnwsb1s.jl:29\n   [2] top-level\
    \ scope at /tmp/tmp6rnwsb1s.jl:38\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp6rnwsb1s.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmp6rnwsb1s.jl:39\n  Test threw exception\n  Expression: candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2]\n  UndefVarError: maximum not defined\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp6rnwsb1s.jl:29\n   [2] top-level\
    \ scope at /tmp/tmp6rnwsb1s.jl:39\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp6rnwsb1s.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmp6rnwsb1s.jl:40\n  Test threw exception\n  Expression: candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  UndefVarError: maximum not defined\n\
    \  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp6rnwsb1s.jl:29\n\
    \   [2] top-level scope at /tmp/tmp6rnwsb1s.jl:40\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp6rnwsb1s.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmp6rnwsb1s.jl:41\n  Test threw exception\n  Expression: candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n  UndefVarError: maximum not defined\n\
    \  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp6rnwsb1s.jl:29\n\
    \   [2] top-level scope at /tmp/tmp6rnwsb1s.jl:41\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp6rnwsb1s.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmp6rnwsb1s.jl:42\n  Test threw exception\n  Expression: candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n  UndefVarError: maximum\
    \ not defined\n  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp6rnwsb1s.jl:29\n\
    \   [2] top-level scope at /tmp/tmp6rnwsb1s.jl:42\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp6rnwsb1s.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmp6rnwsb1s.jl:43\n  Test threw exception\n  Expression: candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n  UndefVarError: maximum not defined\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp6rnwsb1s.jl:29\n   [2] top-level\
    \ scope at /tmp/tmp6rnwsb1s.jl:43\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp6rnwsb1s.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmp6rnwsb1s.jl:44\n  Test threw exception\n  Expression: candidate([1,\
    \ 0, 5, -7], 1) == [5]\n  UndefVarError: maximum not defined\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp6rnwsb1s.jl:29\n   [2] top-level\
    \ scope at /tmp/tmp6rnwsb1s.jl:44\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp6rnwsb1s.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmp6rnwsb1s.jl:45\n  Test threw exception\n  Expression: candidate([4,\
    \ -4], 2) == [-4, 4]\n  UndefVarError: maximum not defined\n  Stacktrace:\n  \
    \ [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp6rnwsb1s.jl:29\n   [2] top-level\
    \ scope at /tmp/tmp6rnwsb1s.jl:45\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp6rnwsb1s.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmp6rnwsb1s.jl:46\n  Test threw exception\n  Expression: candidate([-10,\
    \ 10], 2) == [-10, 10]\n  UndefVarError: maximum not defined\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp6rnwsb1s.jl:29\n   [2] top-level\
    \ scope at /tmp/tmp6rnwsb1s.jl:46\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp6rnwsb1s.jl:36\n  \ntest set: Test Failed at\
    \ /tmp/tmp6rnwsb1s.jl:47\n  Expression: candidate([1, 2, 3, -23, 243, -400, 0],\
    \ 0) == Vector{Int64}([])\n   Evaluated: [1, 2, 3, -23, 243, -400, 0] == Int64[]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp6rnwsb1s.jl:47\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp6rnwsb1s.jl:36\nTest Summary: | Fail  Error \
    \ Total\ntest set      |    1     10     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 1 failed, 10 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6rnwsb1s.jl:34\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k == 0 \n    \
    \    return arr\n    else \n        maximum = maximum(maximum(arr, k-1), k-1)\n\
    \        maximum = maximum(maximum, k)\n        return maximum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) ==\
    \ [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpd0gvjg71.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpd0gvjg71.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpd0gvjg71.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k > length(arr)\
    \ \n        error(\"k should be less than or equal to length(arr)\") \n    else\
    \ \n        maximum = arr \n        for i = k+1:length(arr) \n            maximum[i]\
    \ = maximum(maximum[i], arr[i]) \n        endfor \n        return maximum \n \
    \   end\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpw91akr7r.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpw91akr7r.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpw91akr7r.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k == 0 \n    \
    \    return arr \n    else \n        maximum = maximum(maximum(arr, k-1), k) \n\
    \        maximum[end] = maximum(maximum(arr, k-1), k) \n        return maximum\
    \ \nend\n</cell>\n<code language=julia-1.5>\nmaximum(arr, k)\n</cell>\n<text>\n\
    4.4 Find Minimum\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpqkk1t3dg.jl:33\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpqkk1t3dg.jl:33\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    maximum = arr\n \
    \   for i = 2:k\n        maximum = maximum(maximum(maximum, arr), arr[i])\n  \
    \  end\n    maximum\nend\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 3)\n\
    </cell>\n<text>\n4.3 Find Minimum\nusing Test\n\n@testset begin\n\ncandidate =\
    \ maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpywoh9s98.jl:32\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpywoh9s98.jl:32\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    maximum = arr\n \
    \   for i = 2:k\n        maximum = maximum(maximum(maximum.-arr), maximum)\n \
    \   end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\nmaximum(arr,\
    \ k)\n</cell>\n<text>\n4.3 Find Minimum\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpcshdg2xl.jl:32\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpcshdg2xl.jl:32\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k > length(arr)\n\
    \        throw(ArgumentError(\"k must be less than or equal to length(arr)\"))\n\
    \    end\n    maximum = arr\n    for i = k+1:length(arr)\n        maximum = maximum(maximum(maximum,\
    \ arr[i]), maximum)\n    end\n    return maximum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2,\
    \ 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpgs8qe9ec.jl:40\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [-3, -4, 5] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpgs8qe9ec.jl:40\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpgs8qe9ec.jl:39\ntest set: Error During Test at\
    \ /tmp/tmpgs8qe9ec.jl:41\n  Test threw exception\n  Expression: candidate([4,\
    \ -4, 4], 2) == [4, 4]\n  MethodError: objects of type Array{Int64,1} are not\
    \ callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n \
    \  [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpgs8qe9ec.jl:31\n   [2] top-level\
    \ scope at /tmp/tmpgs8qe9ec.jl:41\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpgs8qe9ec.jl:39\n  \ntest set: Error During\
    \ Test at /tmp/tmpgs8qe9ec.jl:42\n  Test threw exception\n  Expression: candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2]\n  MethodError: objects of type Array{Int64,1}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpgs8qe9ec.jl:31\n   [2] top-level\
    \ scope at /tmp/tmpgs8qe9ec.jl:42\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpgs8qe9ec.jl:39\n  \ntest set: Error During\
    \ Test at /tmp/tmpgs8qe9ec.jl:43\n  Test threw exception\n  Expression: candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  MethodError: objects of type Array{Int64,1}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpgs8qe9ec.jl:31\n   [2] top-level\
    \ scope at /tmp/tmpgs8qe9ec.jl:43\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpgs8qe9ec.jl:39\n  \ntest set: Error During\
    \ Test at /tmp/tmpgs8qe9ec.jl:44\n  Test threw exception\n  Expression: candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n  MethodError: objects of type Array{Int64,1}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpgs8qe9ec.jl:31\n   [2] top-level\
    \ scope at /tmp/tmpgs8qe9ec.jl:44\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpgs8qe9ec.jl:39\n  \ntest set: Test Failed at\
    \ /tmp/tmpgs8qe9ec.jl:45\n  Expression: candidate([5, 15, 0, 3, -13, -8, 0], 7)\
    \ == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [5, 15, 0, 3, -13, -8, 0] == [-13,\
    \ -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] top-level scope at /tmp/tmpgs8qe9ec.jl:45\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpgs8qe9ec.jl:39\ntest set: Error During Test at\
    \ /tmp/tmpgs8qe9ec.jl:46\n  Test threw exception\n  Expression: candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n  MethodError: objects of type Array{Int64,1}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpgs8qe9ec.jl:31\n   [2] top-level\
    \ scope at /tmp/tmpgs8qe9ec.jl:46\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpgs8qe9ec.jl:39\n  \ntest set: Error During\
    \ Test at /tmp/tmpgs8qe9ec.jl:47\n  Test threw exception\n  Expression: candidate([1,\
    \ 0, 5, -7], 1) == [5]\n  MethodError: objects of type Array{Int64,1} are not\
    \ callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n \
    \  [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpgs8qe9ec.jl:31\n   [2] top-level\
    \ scope at /tmp/tmpgs8qe9ec.jl:47\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpgs8qe9ec.jl:39\n  \ntest set: Test Failed at\
    \ /tmp/tmpgs8qe9ec.jl:48\n  Expression: candidate([4, -4], 2) == [-4, 4]\n   Evaluated:\
    \ [4, -4] == [-4, 4]\nStacktrace:\n [1] top-level scope at /tmp/tmpgs8qe9ec.jl:48\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpgs8qe9ec.jl:39\ntest set: Error During Test at\
    \ /tmp/tmpgs8qe9ec.jl:50\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([])\n  MethodError: objects of\
    \ type Array{Int64,1} are not callable\n  Use square brackets [] for indexing\
    \ an Array.\n  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpgs8qe9ec.jl:31\n\
    \   [2] top-level scope at /tmp/tmpgs8qe9ec.jl:50\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpgs8qe9ec.jl:39\n  \nTest Summary: | Pass  Fail\
    \  Error  Total\ntest set      |    1     3      7     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgs8qe9ec.jl:37\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    maximum = arr\n \
    \   for i = 1:k\n        maximum = maximum(maximum(maximum, arr), arr)\n    end\n\
    \    return maximum\nend\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 3)\n\
    </cell>\n<text>\nmaximum\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmpmns1_p.jl:32\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpmpmns1_p.jl:32\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    maximum = arr\n \
    \   for i = 1:k\n        maximum = maximum(maximum(maximum, arr), arr)\n    end\n\
    \    return maximum\nend\n</cell>\n<code language=julia-1.5>\nmaximum(arr, k)\n\
    </cell>\n<text>\n4.3 Find Minimum\nusing Test\n\n@testset begin\n\ncandidate =\
    \ maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpr94ws3ue.jl:32\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpr94ws3ue.jl:32\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k == 0 \n    \
    \    return arr\n    \n    if k == 1 \n        return maximum.(arr[1:end-1], k)\n\
    \    \n    if k == length(arr) \n        return maximum.(arr[1:end-1], k)\n  \
    \  \n    maximum.(arr[1:end-1], k) = maximum(maximum(arr[1:end-1], k-1), k)\n\
    \    maximum.(arr[1:end-1], k)\nend\n</cell>\n<code language=julia-1.5>\nmaximum(arr,\
    \ 3)\n</cell>\n<text>\nmaximum.(maximum.(arr, 1), 2)\nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp23tuhywt.jl:38\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp23tuhywt.jl:38\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    maximum = zeros(Int,\
    \ k)\n    for i = 1:k\n        maximum[i] = maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp1mhmszh0.jl:31\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp1mhmszh0.jl:31\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    maximum = arr\n \
    \   for i = 1:k\n        maximum = maximum(maximum(maximum, arr), arr)\n    end\n\
    \    return maximum\nend\n</code>\n<|/ a tags=sorting,arrays,julia |>\n<| a dscore=0\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp5779rbs3.jl:32\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp5779rbs3.jl:32\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k > length(arr)\n\
    \        throw(ArgumentError(\"k must be less than or equal to length(arr)\"))\n\
    \    end\n    maximum = arr\n    for i = length(arr) - k + 1 downto 1\n      \
    \  maximum = maximum(maximum(maximum, arr[i]), maximum)\n    end\n    return maximum\n\
    end\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 3)\n</cell>\n<text>\nmaximum\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"1\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3fyhfr6g.jl:30\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp3fyhfr6g.jl:30\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k > length(arr)\
    \ \n        error(\"k should be less than or equal to length(arr)\")\n    end\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpv8p57gyh.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpv8p57gyh.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpv8p57gyh.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    maximum = arr\n \
    \   for i = k+1:length(arr)\n        maximum[i] = maximum(maximum, arr[i])\n \
    \   end\n    return maximum\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4s21ql49.jl:37\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [-3, -4, 5] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4s21ql49.jl:37\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4s21ql49.jl:36\ntest set: Error During Test at\
    \ /tmp/tmp4s21ql49.jl:38\n  Test threw exception\n  Expression: candidate([4,\
    \ -4, 4], 2) == [4, 4]\n  MethodError: objects of type Array{Int64,1} are not\
    \ callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n \
    \  [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp4s21ql49.jl:28\n   [2] top-level\
    \ scope at /tmp/tmp4s21ql49.jl:38\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp4s21ql49.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmp4s21ql49.jl:39\n  Test threw exception\n  Expression: candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2]\n  MethodError: objects of type Array{Int64,1}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp4s21ql49.jl:28\n   [2] top-level\
    \ scope at /tmp/tmp4s21ql49.jl:39\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp4s21ql49.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmp4s21ql49.jl:40\n  Test threw exception\n  Expression: candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  MethodError: objects of type Array{Int64,1}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp4s21ql49.jl:28\n   [2] top-level\
    \ scope at /tmp/tmp4s21ql49.jl:40\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp4s21ql49.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmp4s21ql49.jl:41\n  Test threw exception\n  Expression: candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n  MethodError: objects of type Array{Int64,1}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp4s21ql49.jl:28\n   [2] top-level\
    \ scope at /tmp/tmp4s21ql49.jl:41\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp4s21ql49.jl:36\n  \ntest set: Test Failed at\
    \ /tmp/tmp4s21ql49.jl:42\n  Expression: candidate([5, 15, 0, 3, -13, -8, 0], 7)\
    \ == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [5, 15, 0, 3, -13, -8, 0] == [-13,\
    \ -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] top-level scope at /tmp/tmp4s21ql49.jl:42\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4s21ql49.jl:36\ntest set: Error During Test at\
    \ /tmp/tmp4s21ql49.jl:43\n  Test threw exception\n  Expression: candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n  MethodError: objects of type Array{Int64,1}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp4s21ql49.jl:28\n   [2] top-level\
    \ scope at /tmp/tmp4s21ql49.jl:43\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp4s21ql49.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmp4s21ql49.jl:44\n  Test threw exception\n  Expression: candidate([1,\
    \ 0, 5, -7], 1) == [5]\n  MethodError: objects of type Array{Int64,1} are not\
    \ callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n \
    \  [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp4s21ql49.jl:28\n   [2] top-level\
    \ scope at /tmp/tmp4s21ql49.jl:44\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp4s21ql49.jl:36\n  \ntest set: Test Failed at\
    \ /tmp/tmp4s21ql49.jl:45\n  Expression: candidate([4, -4], 2) == [-4, 4]\n   Evaluated:\
    \ [4, -4] == [-4, 4]\nStacktrace:\n [1] top-level scope at /tmp/tmp4s21ql49.jl:45\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4s21ql49.jl:36\ntest set: Error During Test at\
    \ /tmp/tmp4s21ql49.jl:47\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([])\n  MethodError: objects of\
    \ type Array{Int64,1} are not callable\n  Use square brackets [] for indexing\
    \ an Array.\n  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp4s21ql49.jl:28\n\
    \   [2] top-level scope at /tmp/tmp4s21ql49.jl:47\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp4s21ql49.jl:36\n  \nTest Summary: | Pass  Fail\
    \  Error  Total\ntest set      |    1     3      7     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4s21ql49.jl:34\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    maximum = arr\n \
    \   for i = 2:k\n        maximum = maximum(maximum(maximum, arr), arr[i])\n  \
    \  end\n    maximum\nend\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 3)\n\
    </cell>\n<text>\nmaximum() is a built-in function in Julia. maximum() returns\
    \ the maximum element of an array. maximum() can also accept a vector as an argument.\
    \ maximum() returns the maximum element of the vector arr. maximum() can also\
    \ accept a range as an argument. maximum() returns the maximum element of the\
    \ range [first, last].\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp0sbvtg_u.jl:32\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp0sbvtg_u.jl:32\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    maximum = arr\n \
    \   for i = 1:k\n        maximum = maximum(maximum(maximum, arr), arr)\n    end\n\
    \    return maximum\nend\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 3)\n\
    </cell>\n<text>\n6.4 Find Minimum\nusing Test\n\n@testset begin\n\ncandidate =\
    \ maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp5cr6wqhs.jl:32\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp5cr6wqhs.jl:32\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    maximums = Vector{Int64}()\n\
    \    for x in arr\n        if maximums.length < k\n            maximums.push(x)\n\
    \        else\n            if maximums[maximums.length-1] < x\n              \
    \  maximums[maximums.length-1] = x\n            end\n        end\n    end\n  \
    \  return maximums\nend\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 3)\n\
    </cell>\n<code language=julia-1.5>\nmaximum(arr, 2)\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 4)\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 5)\n</cell>\n\
    <code language=julia-1.5>\nmaximum(arr, 6)\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 7)\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 8)\n</cell>\n\
    <code language=julia-1.5>\nmaximum(arr, 9)\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 10)\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 11)\n</cell>\n\
    <code language=julia-1.5>\nmaximum(arr, 12)\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 13)\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 14)\n</cell>\n\
    <code language=julia-1.5>\nmaximum(arr, 15)\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 16)\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 17)\n</cell>\n\
    <code language=julia-1.5>\nmaximum(arr, 18)\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 19)\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 20)\n</cell>\n\
    <code language=julia-1.5>\nmaximum(arr, 21)\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 22)\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 23)\n</cell>\n\
    <code language=julia-1.5>\nmaximum(arr, 24)\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 25)\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 26)\n</cell>\n\
    <code language=julia-1.5>\nmaximum(arr, 27)\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 28)\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 29)\n</cell>\n\
    <code language=julia-1.5>\nmaximum(arr, 30)\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 31)\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 32)\n</cell>\n\
    <code language=julia-1.5>\nmaximum(arr, 33)\nusing Test\n\n@testset begin\n\n\
    candidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9twmd3m3.jl:38\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp9twmd3m3.jl:38\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    maximum = arr\n \
    \   for i = 2:k\n        maximum = maximum(maximum(maximum, arr), i)\n    end\n\
    \    return maximum\nend\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 3)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns a sorted array with\
    \ the minimum k numbers in arr. \nThe function should take in an array of integers\
    \ and a positive integer k as arguments.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpgy7ek_n3.jl:32\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpgy7ek_n3.jl:32\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k == 0 \n    \
    \    return arr \n    else \n        maximum = maximum(maximum(arr, k-1), k) \n\
    \        maximum = maximum(maximum, minimum(arr, k)) \n        return maximum\
    \ \nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmplp2snpxl.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmplp2snpxl.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmplp2snpxl.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    maximums = Vector{Int64}()\n\
    \    maximums = maximums[-k+1:k+1]\n    maximums[end] = maximum(arr[end+1:end+k],\
    \ k)\n    maximums\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpq_62s9ry.jl:36\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  BoundsError: attempt\
    \ to access 0-element Array{Int64,1} at index [-2:4]\n  Stacktrace:\n   [1] throw_boundserror(::Array{Int64,1},\
    \ ::Tuple{UnitRange{Int64}}) at ./abstractarray.jl:537\n   [2] checkbounds at\
    \ ./abstractarray.jl:502 [inlined]\n   [3] getindex at ./array.jl:794 [inlined]\n\
    \   [4] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpq_62s9ry.jl:27\n   [5] top-level\
    \ scope at /tmp/tmpq_62s9ry.jl:36\n   [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmpq_62s9ry.jl:35\n  \ntest set: Error During\
    \ Test at /tmp/tmpq_62s9ry.jl:37\n  Test threw exception\n  Expression: candidate([4,\
    \ -4, 4], 2) == [4, 4]\n  BoundsError: attempt to access 0-element Array{Int64,1}\
    \ at index [-1:3]\n  Stacktrace:\n   [1] throw_boundserror(::Array{Int64,1}, ::Tuple{UnitRange{Int64}})\
    \ at ./abstractarray.jl:537\n   [2] checkbounds at ./abstractarray.jl:502 [inlined]\n\
    \   [3] getindex at ./array.jl:794 [inlined]\n   [4] maximum(::Array{Int64,1},\
    \ ::Int64) at /tmp/tmpq_62s9ry.jl:27\n   [5] top-level scope at /tmp/tmpq_62s9ry.jl:37\n\
    \   [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmpq_62s9ry.jl:35\n  \ntest set: Error During\
    \ Test at /tmp/tmpq_62s9ry.jl:38\n  Test threw exception\n  Expression: candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2]\n  BoundsError: attempt to access 0-element Array{Int64,1}\
    \ at index [0:2]\n  Stacktrace:\n   [1] throw_boundserror(::Array{Int64,1}, ::Tuple{UnitRange{Int64}})\
    \ at ./abstractarray.jl:537\n   [2] checkbounds at ./abstractarray.jl:502 [inlined]\n\
    \   [3] getindex at ./array.jl:794 [inlined]\n   [4] maximum(::Array{Int64,1},\
    \ ::Int64) at /tmp/tmpq_62s9ry.jl:27\n   [5] top-level scope at /tmp/tmpq_62s9ry.jl:38\n\
    \   [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmpq_62s9ry.jl:35\n  \ntest set: Error During\
    \ Test at /tmp/tmpq_62s9ry.jl:39\n  Test threw exception\n  Expression: candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  BoundsError: attempt to access\
    \ 0-element Array{Int64,1} at index [-2:4]\n  Stacktrace:\n   [1] throw_boundserror(::Array{Int64,1},\
    \ ::Tuple{UnitRange{Int64}}) at ./abstractarray.jl:537\n   [2] checkbounds at\
    \ ./abstractarray.jl:502 [inlined]\n   [3] getindex at ./array.jl:794 [inlined]\n\
    \   [4] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpq_62s9ry.jl:27\n   [5] top-level\
    \ scope at /tmp/tmpq_62s9ry.jl:39\n   [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmpq_62s9ry.jl:35\n  \ntest set: Error During\
    \ Test at /tmp/tmpq_62s9ry.jl:40\n  Test threw exception\n  Expression: candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n  BoundsError: attempt to access 0-element\
    \ Array{Int64,1} at index [-3:5]\n  Stacktrace:\n   [1] throw_boundserror(::Array{Int64,1},\
    \ ::Tuple{UnitRange{Int64}}) at ./abstractarray.jl:537\n   [2] checkbounds at\
    \ ./abstractarray.jl:502 [inlined]\n   [3] getindex at ./array.jl:794 [inlined]\n\
    \   [4] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpq_62s9ry.jl:27\n   [5] top-level\
    \ scope at /tmp/tmpq_62s9ry.jl:40\n   [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmpq_62s9ry.jl:35\n  \ntest set: Error During\
    \ Test at /tmp/tmpq_62s9ry.jl:41\n  Test threw exception\n  Expression: candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n  BoundsError: attempt\
    \ to access 0-element Array{Int64,1} at index [-6:8]\n  Stacktrace:\n   [1] throw_boundserror(::Array{Int64,1},\
    \ ::Tuple{UnitRange{Int64}}) at ./abstractarray.jl:537\n   [2] checkbounds at\
    \ ./abstractarray.jl:502 [inlined]\n   [3] getindex at ./array.jl:794 [inlined]\n\
    \   [4] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpq_62s9ry.jl:27\n   [5] top-level\
    \ scope at /tmp/tmpq_62s9ry.jl:41\n   [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmpq_62s9ry.jl:35\n  \ntest set: Error During\
    \ Test at /tmp/tmpq_62s9ry.jl:42\n  Test threw exception\n  Expression: candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n  BoundsError: attempt to access 0-element Array{Int64,1}\
    \ at index [-1:3]\n  Stacktrace:\n   [1] throw_boundserror(::Array{Int64,1}, ::Tuple{UnitRange{Int64}})\
    \ at ./abstractarray.jl:537\n   [2] checkbounds at ./abstractarray.jl:502 [inlined]\n\
    \   [3] getindex at ./array.jl:794 [inlined]\n   [4] maximum(::Array{Int64,1},\
    \ ::Int64) at /tmp/tmpq_62s9ry.jl:27\n   [5] top-level scope at /tmp/tmpq_62s9ry.jl:42\n\
    \   [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmpq_62s9ry.jl:35\n  \ntest set: Error During\
    \ Test at /tmp/tmpq_62s9ry.jl:43\n  Test threw exception\n  Expression: candidate([1,\
    \ 0, 5, -7], 1) == [5]\n  BoundsError: attempt to access 0-element Array{Int64,1}\
    \ at index [0:2]\n  Stacktrace:\n   [1] throw_boundserror(::Array{Int64,1}, ::Tuple{UnitRange{Int64}})\
    \ at ./abstractarray.jl:537\n   [2] checkbounds at ./abstractarray.jl:502 [inlined]\n\
    \   [3] getindex at ./array.jl:794 [inlined]\n   [4] maximum(::Array{Int64,1},\
    \ ::Int64) at /tmp/tmpq_62s9ry.jl:27\n   [5] top-level scope at /tmp/tmpq_62s9ry.jl:43\n\
    \   [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmpq_62s9ry.jl:35\n  \ntest set: Error During\
    \ Test at /tmp/tmpq_62s9ry.jl:44\n  Test threw exception\n  Expression: candidate([4,\
    \ -4], 2) == [-4, 4]\n  BoundsError: attempt to access 0-element Array{Int64,1}\
    \ at index [-1:3]\n  Stacktrace:\n   [1] throw_boundserror(::Array{Int64,1}, ::Tuple{UnitRange{Int64}})\
    \ at ./abstractarray.jl:537\n   [2] checkbounds at ./abstractarray.jl:502 [inlined]\n\
    \   [3] getindex at ./array.jl:794 [inlined]\n   [4] maximum(::Array{Int64,1},\
    \ ::Int64) at /tmp/tmpq_62s9ry.jl:27\n   [5] top-level scope at /tmp/tmpq_62s9ry.jl:44\n\
    \   [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmpq_62s9ry.jl:35\n  \ntest set: Error During\
    \ Test at /tmp/tmpq_62s9ry.jl:45\n  Test threw exception\n  Expression: candidate([-10,\
    \ 10], 2) == [-10, 10]\n  BoundsError: attempt to access 0-element Array{Int64,1}\
    \ at index [-1:3]\n  Stacktrace:\n   [1] throw_boundserror(::Array{Int64,1}, ::Tuple{UnitRange{Int64}})\
    \ at ./abstractarray.jl:537\n   [2] checkbounds at ./abstractarray.jl:502 [inlined]\n\
    \   [3] getindex at ./array.jl:794 [inlined]\n   [4] maximum(::Array{Int64,1},\
    \ ::Int64) at /tmp/tmpq_62s9ry.jl:27\n   [5] top-level scope at /tmp/tmpq_62s9ry.jl:45\n\
    \   [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmpq_62s9ry.jl:35\n  \ntest set: Error During\
    \ Test at /tmp/tmpq_62s9ry.jl:46\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([])\n  BoundsError: attempt to\
    \ access 0-element Array{Int64,1} at index [1:1]\n  Stacktrace:\n   [1] throw_boundserror(::Array{Int64,1},\
    \ ::Tuple{UnitRange{Int64}}) at ./abstractarray.jl:537\n   [2] checkbounds at\
    \ ./abstractarray.jl:502 [inlined]\n   [3] getindex at ./array.jl:794 [inlined]\n\
    \   [4] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpq_62s9ry.jl:27\n   [5] top-level\
    \ scope at /tmp/tmpq_62s9ry.jl:46\n   [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmpq_62s9ry.jl:35\n  \nTest Summary: | Error \
    \ Total\ntest set      |    11     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpq_62s9ry.jl:33\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k == 0 \n    \
    \    return arr \n    else \n        maximum = maximum(maximum(arr, k-1), k) \n\
    \        maximum[end] = maximum(arr[end], k) \n        return maximum \nend\n\
    </code>\n<|/ a tags=arrays,sorting,julia |>\n<| a dscore=0 |>\nI wrote a Julia\
    \ package called ArrayTools.jl that provides many useful array manipulation functions.\
    \ Here is a simple example of how to use it:\n<code>\njulia> using ArrayTools\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpdemdboum.jl:33\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpdemdboum.jl:33\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k == 0 \n    \
    \    return arr\n    else \n        maximum = maximum(maximum(arr,k-1),k-1)\n\
    \        maximum = maximum(maximum(maximum,k-1),k-1)\n        maximum = maximum(maximum(maximum,k-1),k-1)\n\
    \        maximum = maximum(maximum(maximum,k-1),k-1)\n        maximum = maximum(maximum(maximum,k-1),k-1)\n\
    \        maximum = maximum(maximum(maximum,k-1),k-1)\n        maximum = maximum(maximum(maximum,k-1),k-1)\n\
    \        maximum = maximum(maximum(maximum,k-1),k-1)\n        maximum = maximum(maximum(maximum,k-1),k-1)\n\
    \        maximum = maximum(maximum(maximum,k-1),k-1)\n        maximum = maximum(maximum(maximum,k-1),k-1)\n\
    \        maximum = maximum(maximum(maximum,k-1),k-1)\n        maximum = maximum(maximum(maximum,k-1),k-1)\n\
    \        maximum = maximum(maximum(maximum,k-1),k-1)\n        maximum = maximum(maximum(maximum,k-1),k-1)\n\
    \        maximum = maximum(maximum(maximum,k-1),k-1)\n        maximum = maximum(maximum(maximum,k-1),k-1)\n\
    \        maximum = maximum(maximum(maximum,k-1),k-1)\n        maximum = maximum(maximum(maximum,k-1),k-1)\n\
    \        maximum = maximum(maximum(maximum,k-1),k-1)\n        maximum = maximum(maximum(maximum,k-1),k-1)\n\
    \        maximum = maximum(maximum(maximum,k-1),k-1)\n        maximum = maximum(maximum(maximum,k-1),k-1)\n\
    \        maximum = maximum(maximum(maximum,k-1),k-1)\n        maximum = maximum(maximum(maximum,k-1),k-1)\n\
    \        maximum = maximum(maximum(maximum,k-1),k-1)\n        maximum = maximum(maximum(maximum,k-1),k-1)\n\
    \        maximum = maximum(maximum(maximum,k-1),k-1)\n        maximum = maximum(maximum(maximum,k-1),k-1)\n\
    \        maximum = maximum(maximum(maximum,k-1),k-1)\n        maximum = maximum(maximum(maximum,k-1),k-1)\n\
    \        maximum = maximum(maximum(maximum,k-1),k-1)\n        maximum = maximum(maximum(maximum,k-1),k-1)\n\
    \        maximum = maximum(maximum(maximum,k-1),k-1)\n        maximum = maximum(maximum(maximum,k-1),k-1)\n\
    \        maximum = maximum(maximum(maximum,k-1),k-1)\n        maximum = maximum(maximum(maximum,k-1),k-1)\n\
    \        maximum = maximum(maximum(maximum,k-1),k-1)\n        maximum = maximum(maximum(maximum,k-1),k-1)\n\
    \        maximum = maximum(maximum(maximum,k-1),k-1)\n        maximum = maximum(maximum(maximum,k-1),k-1)\n\
    \        maximum = maximum(maximum(maximum,k-1),\nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpvm4wp5ym.jl:73\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpvm4wp5ym.jl:73\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    maximum = arr\n \
    \   for i = 1:k\n        maximum = maximum(maximum(maximum, arr), maximum)\n \
    \   end\n    return maximum\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpl1mi_wan.jl:37\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  MethodError: objects\
    \ of type Array{Int64,1} are not callable\n  Use square brackets [] for indexing\
    \ an Array.\n  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpl1mi_wan.jl:28\n\
    \   [2] top-level scope at /tmp/tmpl1mi_wan.jl:37\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpl1mi_wan.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmpl1mi_wan.jl:38\n  Test threw exception\n  Expression: candidate([4,\
    \ -4, 4], 2) == [4, 4]\n  MethodError: objects of type Array{Int64,1} are not\
    \ callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n \
    \  [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpl1mi_wan.jl:28\n   [2] top-level\
    \ scope at /tmp/tmpl1mi_wan.jl:38\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpl1mi_wan.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmpl1mi_wan.jl:39\n  Test threw exception\n  Expression: candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2]\n  MethodError: objects of type Array{Int64,1}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpl1mi_wan.jl:28\n   [2] top-level\
    \ scope at /tmp/tmpl1mi_wan.jl:39\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpl1mi_wan.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmpl1mi_wan.jl:40\n  Test threw exception\n  Expression: candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  MethodError: objects of type Array{Int64,1}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpl1mi_wan.jl:28\n   [2] top-level\
    \ scope at /tmp/tmpl1mi_wan.jl:40\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpl1mi_wan.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmpl1mi_wan.jl:41\n  Test threw exception\n  Expression: candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n  MethodError: objects of type Array{Int64,1}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpl1mi_wan.jl:28\n   [2] top-level\
    \ scope at /tmp/tmpl1mi_wan.jl:41\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpl1mi_wan.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmpl1mi_wan.jl:42\n  Test threw exception\n  Expression: candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n  MethodError: objects\
    \ of type Array{Int64,1} are not callable\n  Use square brackets [] for indexing\
    \ an Array.\n  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpl1mi_wan.jl:28\n\
    \   [2] top-level scope at /tmp/tmpl1mi_wan.jl:42\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpl1mi_wan.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmpl1mi_wan.jl:43\n  Test threw exception\n  Expression: candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n  MethodError: objects of type Array{Int64,1}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpl1mi_wan.jl:28\n   [2] top-level\
    \ scope at /tmp/tmpl1mi_wan.jl:43\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpl1mi_wan.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmpl1mi_wan.jl:44\n  Test threw exception\n  Expression: candidate([1,\
    \ 0, 5, -7], 1) == [5]\n  MethodError: objects of type Array{Int64,1} are not\
    \ callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n \
    \  [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpl1mi_wan.jl:28\n   [2] top-level\
    \ scope at /tmp/tmpl1mi_wan.jl:44\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpl1mi_wan.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmpl1mi_wan.jl:45\n  Test threw exception\n  Expression: candidate([4,\
    \ -4], 2) == [-4, 4]\n  MethodError: objects of type Array{Int64,1} are not callable\n\
    \  Use square brackets [] for indexing an Array.\n  Stacktrace:\n   [1] maximum(::Array{Int64,1},\
    \ ::Int64) at /tmp/tmpl1mi_wan.jl:28\n   [2] top-level scope at /tmp/tmpl1mi_wan.jl:45\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpl1mi_wan.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmpl1mi_wan.jl:46\n  Test threw exception\n  Expression: candidate([-10,\
    \ 10], 2) == [-10, 10]\n  MethodError: objects of type Array{Int64,1} are not\
    \ callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n \
    \  [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpl1mi_wan.jl:28\n   [2] top-level\
    \ scope at /tmp/tmpl1mi_wan.jl:46\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpl1mi_wan.jl:36\n  \ntest set: Test Failed at\
    \ /tmp/tmpl1mi_wan.jl:47\n  Expression: candidate([1, 2, 3, -23, 243, -400, 0],\
    \ 0) == Vector{Int64}([])\n   Evaluated: [1, 2, 3, -23, 243, -400, 0] == Int64[]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpl1mi_wan.jl:47\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpl1mi_wan.jl:36\nTest Summary: | Fail  Error \
    \ Total\ntest set      |    1     10     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 1 failed, 10 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpl1mi_wan.jl:34\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    maximum = arr\n \
    \   for i = 1:k\n        maximum = maximum(maximum(maximum, arr), arr[i])\n  \
    \  end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\nmaximum(arr,\
    \ k)\n</cell>\n<text>\nmaximum() is a built-in function in Julia. maximum() returns\
    \ the maximum element in a given array. maximum() can take in two types of inputs:\
    \ Vector{Int64} and Array{Int64}.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp5di1pq9c.jl:32\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp5di1pq9c.jl:32\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    maximum = arr\n \
    \   for i = 1:k\n        maximum = maximum(maximum(maximum, arr), arr)\n    end\n\
    \    maximum\nend\n</cell>\n<code language=julia-1.4>\nmaximum(arr, 3)\n</cell>\n\
    <text>\n6.4 Find Minimum\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4m48owmi.jl:32\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp4m48owmi.jl:32\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k == 0 \n    \
    \    return arr\n    else \n        maximum = maximum(maximum(arr, k-1), k-1)\n\
    \        maximum = maximum(maximum, arr)\n        return maximum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) ==\
    \ [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp72l0umc1.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp72l0umc1.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp72l0umc1.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k > length(arr)\
    \ \n        throw(ArgumentError(\"k must be less than or equal to the length of\
    \ arr\"))\n    end\n    maximum = arr\n    for i = k+1:length(arr) \n        maximum\
    \ = maximum(maximum(maximum, arr[i]), maximum)\n    end\n    return maximum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmplju9vrqf.jl:40\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [-3, -4, 5] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmplju9vrqf.jl:40\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmplju9vrqf.jl:39\ntest set: Error During Test at\
    \ /tmp/tmplju9vrqf.jl:41\n  Test threw exception\n  Expression: candidate([4,\
    \ -4, 4], 2) == [4, 4]\n  MethodError: objects of type Array{Int64,1} are not\
    \ callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n \
    \  [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmplju9vrqf.jl:31\n   [2] top-level\
    \ scope at /tmp/tmplju9vrqf.jl:41\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmplju9vrqf.jl:39\n  \ntest set: Error During\
    \ Test at /tmp/tmplju9vrqf.jl:42\n  Test threw exception\n  Expression: candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2]\n  MethodError: objects of type Array{Int64,1}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmplju9vrqf.jl:31\n   [2] top-level\
    \ scope at /tmp/tmplju9vrqf.jl:42\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmplju9vrqf.jl:39\n  \ntest set: Error During\
    \ Test at /tmp/tmplju9vrqf.jl:43\n  Test threw exception\n  Expression: candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  MethodError: objects of type Array{Int64,1}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmplju9vrqf.jl:31\n   [2] top-level\
    \ scope at /tmp/tmplju9vrqf.jl:43\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmplju9vrqf.jl:39\n  \ntest set: Error During\
    \ Test at /tmp/tmplju9vrqf.jl:44\n  Test threw exception\n  Expression: candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n  MethodError: objects of type Array{Int64,1}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmplju9vrqf.jl:31\n   [2] top-level\
    \ scope at /tmp/tmplju9vrqf.jl:44\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmplju9vrqf.jl:39\n  \ntest set: Test Failed at\
    \ /tmp/tmplju9vrqf.jl:45\n  Expression: candidate([5, 15, 0, 3, -13, -8, 0], 7)\
    \ == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [5, 15, 0, 3, -13, -8, 0] == [-13,\
    \ -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] top-level scope at /tmp/tmplju9vrqf.jl:45\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmplju9vrqf.jl:39\ntest set: Error During Test at\
    \ /tmp/tmplju9vrqf.jl:46\n  Test threw exception\n  Expression: candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n  MethodError: objects of type Array{Int64,1}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmplju9vrqf.jl:31\n   [2] top-level\
    \ scope at /tmp/tmplju9vrqf.jl:46\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmplju9vrqf.jl:39\n  \ntest set: Error During\
    \ Test at /tmp/tmplju9vrqf.jl:47\n  Test threw exception\n  Expression: candidate([1,\
    \ 0, 5, -7], 1) == [5]\n  MethodError: objects of type Array{Int64,1} are not\
    \ callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n \
    \  [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmplju9vrqf.jl:31\n   [2] top-level\
    \ scope at /tmp/tmplju9vrqf.jl:47\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmplju9vrqf.jl:39\n  \ntest set: Test Failed at\
    \ /tmp/tmplju9vrqf.jl:48\n  Expression: candidate([4, -4], 2) == [-4, 4]\n   Evaluated:\
    \ [4, -4] == [-4, 4]\nStacktrace:\n [1] top-level scope at /tmp/tmplju9vrqf.jl:48\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmplju9vrqf.jl:39\ntest set: Error During Test at\
    \ /tmp/tmplju9vrqf.jl:50\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([])\n  MethodError: objects of\
    \ type Array{Int64,1} are not callable\n  Use square brackets [] for indexing\
    \ an Array.\n  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmplju9vrqf.jl:31\n\
    \   [2] top-level scope at /tmp/tmplju9vrqf.jl:50\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmplju9vrqf.jl:39\n  \nTest Summary: | Pass  Fail\
    \  Error  Total\ntest set      |    1     3      7     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplju9vrqf.jl:37\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    maximum = arr\n \
    \   for i = 1:k\n        maximum = maximum(maximum(maximum, arr), arr)\n    end\n\
    \    return maximum\nend\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 3)\n\
    </cell>\n<text>\n5.4 Find Minimum\nusing Test\n\n@testset begin\n\ncandidate =\
    \ maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp6q5ahx2v.jl:32\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp6q5ahx2v.jl:32\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k > length(arr)\n\
    \        return arr\n    else\n        maximum = arr\n        for i = k+1:length(arr)\n\
    \            if maximum[i] > maximum[i-1]\n                maximum = maximum[i-1:end]\n\
    \            else\n                break\n        end\n        return maximum\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 3)\n</cell>\n\
    <text>\n6. \u6700\u5C0F\u503C\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpglonmjt_.jl:39\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpglonmjt_.jl:39\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    maximum = arr\n \
    \   for i = 1:k\n        maximum = maximum(maximum(maximum, arr), arr[i])\n  \
    \  end\n    maximum\nend\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 3)\n\
    </cell>\n<text>\n \nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpin1_mvo5.jl:32\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpin1_mvo5.jl:32\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k > length(arr)\n\
    \        throw(ArgumentError(\"k must be less than or equal to length(arr)\"))\n\
    \    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp_wnjxg5l.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp_wnjxg5l.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp_wnjxg5l.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k == 0 \n    \
    \    return arr\n    else \n        maximum = maximum.(maximum(arr,k-1),k)\n \
    \       maximum = maximum.(maximum(maximum(arr,k-1),k-1),k)\n        return maximum\n\
    end\n\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the minimum k numbers in arr.\nusing Test\n\
    \n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) ==\
    \ [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpegd704tm.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpegd704tm.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    maximum = arr\n \
    \   for i = 1:k\n        maximum = maximum(maximum(maximum, arr), maximum)\n \
    \   end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\nmaximum(arr,\
    \ 3)\n</cell>\n<text>\nExercise 3\nWrite a function that returns the minimum number\
    \ in a given array.\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t\
    @test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp6wl48f8s.jl:32\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp6wl48f8s.jl:32\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    maximum = arr\n \
    \   for i = k+1:length(arr)\n        if maximum[i] > maximum[i-1]\n          \
    \  maximum[i] = maximum[i-1]\n        else\n            maximum[i] = maximum[i-1]\n\
    \        end\n    end\n    return maximum\nend\n</code>\n<|/ a dscore=0 |>\n<|\
    \ a dscore=0 |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp67dsn82n.jl:36\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp67dsn82n.jl:36\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k > length(arr)\
    \ \n        error(\"k should be less than or equal to length(arr)\") \n    else\
    \ \n        maximum = arr \n        for i = k+1:length(arr) \n            maximum\
    \ = maximum(maximum(maximum, arr[i]), maximum) \n        end\n        return maximum\
    \ \n    end\nend\n</cell>\n<code language=julia-1.3>\nmaximum(arr, 3)\n</cell>\n\
    <text>\n13. \u6700\u5C0F\u503C\nGiven an array arr of integers and a positive\
    \ integer k, return the minimum number in the array.\nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpv251slkc.jl:36\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpv251slkc.jl:36\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k == 0 \n    \
    \    return arr\n    else \n        maximum = maximum(maximum(arr, k-1), k-1)\n\
    \        maximum = maximum(maximum, arr)\n        return maximum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) ==\
    \ [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmph3djub4c.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmph3djub4c.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmph3djub4c.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    maximum = arr\n \
    \   for i = 1:k\n        maximum = maximum(maximum(maximum.-minimum(maximum),\
    \ maximum), minimum(maximum))\n    end\n    return maximum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nmaximum(arr, k)\n</cell>\n<text>\nProblem 4\nWrite a function\
    \ that returns a sorted array with the minimum k numbers in arr. \nIf there are\
    \ less than k numbers in arr, then the function should return an empty array.\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_huy23i0.jl:32\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_huy23i0.jl:32\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    maximum = arr\n \
    \   for i = 1:k\n        maximum = maximum(maximum(maximum, arr), arr)\n    end\n\
    \    return maximum\nend\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 3)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns a sorted array with\
    \ the minimum k numbers in arr. \nThe function should take in a vector arr of\
    \ integers and a positive integer k. \nThe function should return a sorted array\
    \ with the minimum k numbers in arr.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpamxpaqf7.jl:32\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpamxpaqf7.jl:32\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k == 0 \n    \
    \    return arr \n    else \n        maximum = maximum.(maximum(arr, k-1), k)\
    \ \n        maximum[end] = maximum(maximum(arr, k-1), k) \n        return maximum\
    \ \nend\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 3)\n</cell>\n<text>\n\
    maximum.(maximum(arr, k-1), k)\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpnq_6j98o.jl:33\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpnq_6j98o.jl:33\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k > length(arr)\
    \ \n        return [] \n    else \n        maximum = arr[k] \n        for i =\
    \ k+1:length(arr) \n            if maximum < arr[i] \n                maximum\
    \ = arr[i] \n            end \n        end \n        return maximum::Vector{Int64}\
    \ \n    end \nend \nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpsfrmmym1.jl:43\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  TypeError: in typeassert,\
    \ expected Array{Int64,1}, got Int64\n  Stacktrace:\n   [1] maximum(::Array{Int64,1},\
    \ ::Int64) at /tmp/tmpsfrmmym1.jl:35\n   [2] top-level scope at /tmp/tmpsfrmmym1.jl:43\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpsfrmmym1.jl:42\n  \ntest set: Error During\
    \ Test at /tmp/tmpsfrmmym1.jl:44\n  Test threw exception\n  Expression: candidate([4,\
    \ -4, 4], 2) == [4, 4]\n  TypeError: in typeassert, expected Array{Int64,1}, got\
    \ Int64\n  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpsfrmmym1.jl:35\n\
    \   [2] top-level scope at /tmp/tmpsfrmmym1.jl:44\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpsfrmmym1.jl:42\n  \ntest set: Error During\
    \ Test at /tmp/tmpsfrmmym1.jl:45\n  Test threw exception\n  Expression: candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2]\n  TypeError: in typeassert, expected Array{Int64,1},\
    \ got Int64\n  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpsfrmmym1.jl:35\n\
    \   [2] top-level scope at /tmp/tmpsfrmmym1.jl:45\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpsfrmmym1.jl:42\n  \ntest set: Error During\
    \ Test at /tmp/tmpsfrmmym1.jl:46\n  Test threw exception\n  Expression: candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  TypeError: in typeassert, expected\
    \ Array{Int64,1}, got Int64\n  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64)\
    \ at /tmp/tmpsfrmmym1.jl:35\n   [2] top-level scope at /tmp/tmpsfrmmym1.jl:46\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpsfrmmym1.jl:42\n  \ntest set: Error During\
    \ Test at /tmp/tmpsfrmmym1.jl:47\n  Test threw exception\n  Expression: candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n  TypeError: in typeassert, expected\
    \ Array{Int64,1}, got Int64\n  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64)\
    \ at /tmp/tmpsfrmmym1.jl:35\n   [2] top-level scope at /tmp/tmpsfrmmym1.jl:47\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpsfrmmym1.jl:42\n  \ntest set: Error During\
    \ Test at /tmp/tmpsfrmmym1.jl:48\n  Test threw exception\n  Expression: candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n  TypeError: in typeassert,\
    \ expected Array{Int64,1}, got Int64\n  Stacktrace:\n   [1] maximum(::Array{Int64,1},\
    \ ::Int64) at /tmp/tmpsfrmmym1.jl:35\n   [2] top-level scope at /tmp/tmpsfrmmym1.jl:48\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpsfrmmym1.jl:42\n  \ntest set: Error During\
    \ Test at /tmp/tmpsfrmmym1.jl:49\n  Test threw exception\n  Expression: candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n  TypeError: in typeassert, expected Array{Int64,1},\
    \ got Int64\n  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpsfrmmym1.jl:35\n\
    \   [2] top-level scope at /tmp/tmpsfrmmym1.jl:49\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpsfrmmym1.jl:42\n  \ntest set: Error During\
    \ Test at /tmp/tmpsfrmmym1.jl:50\n  Test threw exception\n  Expression: candidate([1,\
    \ 0, 5, -7], 1) == [5]\n  TypeError: in typeassert, expected Array{Int64,1}, got\
    \ Int64\n  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpsfrmmym1.jl:35\n\
    \   [2] top-level scope at /tmp/tmpsfrmmym1.jl:50\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpsfrmmym1.jl:42\n  \ntest set: Error During\
    \ Test at /tmp/tmpsfrmmym1.jl:51\n  Test threw exception\n  Expression: candidate([4,\
    \ -4], 2) == [-4, 4]\n  TypeError: in typeassert, expected Array{Int64,1}, got\
    \ Int64\n  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpsfrmmym1.jl:35\n\
    \   [2] top-level scope at /tmp/tmpsfrmmym1.jl:51\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpsfrmmym1.jl:42\n  \ntest set: Error During\
    \ Test at /tmp/tmpsfrmmym1.jl:52\n  Test threw exception\n  Expression: candidate([-10,\
    \ 10], 2) == [-10, 10]\n  TypeError: in typeassert, expected Array{Int64,1}, got\
    \ Int64\n  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpsfrmmym1.jl:35\n\
    \   [2] top-level scope at /tmp/tmpsfrmmym1.jl:52\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpsfrmmym1.jl:42\n  \ntest set: Error During\
    \ Test at /tmp/tmpsfrmmym1.jl:53\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([])\n  BoundsError: attempt to\
    \ access 7-element Array{Int64,1} at index [0]\n  Stacktrace:\n   [1] getindex\
    \ at ./array.jl:788 [inlined]\n   [2] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpsfrmmym1.jl:29\n\
    \   [3] top-level scope at /tmp/tmpsfrmmym1.jl:53\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpsfrmmym1.jl:42\n  \nTest Summary: | Error \
    \ Total\ntest set      |    11     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsfrmmym1.jl:40\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k > length(arr)\
    \ \n        error(\"k should be less than or equal to length(arr)\")\n    end\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp_8h6spsg.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp_8h6spsg.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp_8h6spsg.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k > length(arr)\n\
    \        return arr\n    \n    maximum = arr[k-1]\n    for i in k+1:length(arr)\n\
    \        if maximum < arr[i]\n            maximum = arr[i]\n        end\n    end\n\
    \    return maximum\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmprtwdkj7f.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmprtwdkj7f.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmprtwdkj7f.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    maximum = arr\n \
    \   for i = 1:k\n        maximum = maximum(maximum(maximum, arr), maximum)\n \
    \   end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\nmaximum(arr,\
    \ k)\n</cell>\n<text>\n4.3 Find Minimum\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_fnw8197.jl:32\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_fnw8197.jl:32\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k > length(arr)\
    \ \n        error(\"k should be less than or equal to length(arr)\") \n    else\
    \ \n        maximum = arr \n        for i = k+1:length(arr) \n            maximum[i]\
    \ = maximum(maximum, arr[i]) \n        end\n        return maximum \n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 3)\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 2)\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 4)\n</cell>\n\
    <code language=julia-1.5>\nmaximum(arr, 5)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a positive integer n and returns the number of integers\
    \ from 1 to n that are divisible by 3.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpw27dgjjr.jl:36\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpw27dgjjr.jl:36\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    maximum = arr\n \
    \   for i = 1:k\n        maximum = maximum(maximum(maximum, arr), arr)\n    end\n\
    \    return maximum\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp3_equ9y2.jl:37\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  MethodError: objects\
    \ of type Array{Int64,1} are not callable\n  Use square brackets [] for indexing\
    \ an Array.\n  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp3_equ9y2.jl:28\n\
    \   [2] top-level scope at /tmp/tmp3_equ9y2.jl:37\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp3_equ9y2.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmp3_equ9y2.jl:38\n  Test threw exception\n  Expression: candidate([4,\
    \ -4, 4], 2) == [4, 4]\n  MethodError: objects of type Array{Int64,1} are not\
    \ callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n \
    \  [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp3_equ9y2.jl:28\n   [2] top-level\
    \ scope at /tmp/tmp3_equ9y2.jl:38\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp3_equ9y2.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmp3_equ9y2.jl:39\n  Test threw exception\n  Expression: candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2]\n  MethodError: objects of type Array{Int64,1}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp3_equ9y2.jl:28\n   [2] top-level\
    \ scope at /tmp/tmp3_equ9y2.jl:39\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp3_equ9y2.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmp3_equ9y2.jl:40\n  Test threw exception\n  Expression: candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  MethodError: objects of type Array{Int64,1}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp3_equ9y2.jl:28\n   [2] top-level\
    \ scope at /tmp/tmp3_equ9y2.jl:40\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp3_equ9y2.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmp3_equ9y2.jl:41\n  Test threw exception\n  Expression: candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n  MethodError: objects of type Array{Int64,1}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp3_equ9y2.jl:28\n   [2] top-level\
    \ scope at /tmp/tmp3_equ9y2.jl:41\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp3_equ9y2.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmp3_equ9y2.jl:42\n  Test threw exception\n  Expression: candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n  MethodError: objects\
    \ of type Array{Int64,1} are not callable\n  Use square brackets [] for indexing\
    \ an Array.\n  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp3_equ9y2.jl:28\n\
    \   [2] top-level scope at /tmp/tmp3_equ9y2.jl:42\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp3_equ9y2.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmp3_equ9y2.jl:43\n  Test threw exception\n  Expression: candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n  MethodError: objects of type Array{Int64,1}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp3_equ9y2.jl:28\n   [2] top-level\
    \ scope at /tmp/tmp3_equ9y2.jl:43\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp3_equ9y2.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmp3_equ9y2.jl:44\n  Test threw exception\n  Expression: candidate([1,\
    \ 0, 5, -7], 1) == [5]\n  MethodError: objects of type Array{Int64,1} are not\
    \ callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n \
    \  [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp3_equ9y2.jl:28\n   [2] top-level\
    \ scope at /tmp/tmp3_equ9y2.jl:44\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp3_equ9y2.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmp3_equ9y2.jl:45\n  Test threw exception\n  Expression: candidate([4,\
    \ -4], 2) == [-4, 4]\n  MethodError: objects of type Array{Int64,1} are not callable\n\
    \  Use square brackets [] for indexing an Array.\n  Stacktrace:\n   [1] maximum(::Array{Int64,1},\
    \ ::Int64) at /tmp/tmp3_equ9y2.jl:28\n   [2] top-level scope at /tmp/tmp3_equ9y2.jl:45\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp3_equ9y2.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmp3_equ9y2.jl:46\n  Test threw exception\n  Expression: candidate([-10,\
    \ 10], 2) == [-10, 10]\n  MethodError: objects of type Array{Int64,1} are not\
    \ callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n \
    \  [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp3_equ9y2.jl:28\n   [2] top-level\
    \ scope at /tmp/tmp3_equ9y2.jl:46\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp3_equ9y2.jl:36\n  \ntest set: Test Failed at\
    \ /tmp/tmp3_equ9y2.jl:47\n  Expression: candidate([1, 2, 3, -23, 243, -400, 0],\
    \ 0) == Vector{Int64}([])\n   Evaluated: [1, 2, 3, -23, 243, -400, 0] == Int64[]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp3_equ9y2.jl:47\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp3_equ9y2.jl:36\nTest Summary: | Fail  Error \
    \ Total\ntest set      |    1     10     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 1 failed, 10 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3_equ9y2.jl:34\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k == 0 \n    \
    \    return arr\n    else \n        maximum = maximum(maximum(arr,k-1),k-1)\n\
    \        maximum = maximum(maximum(maximum,k-1),k-1)\n        return maximum(maximum(maximum,k-1),k-1)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpaf2d3zca.jl:39\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  UndefVarError: maximum\
    \ not defined\n  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpaf2d3zca.jl:29\n\
    \   [2] top-level scope at /tmp/tmpaf2d3zca.jl:39\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpaf2d3zca.jl:38\n  \ntest set: Error During\
    \ Test at /tmp/tmpaf2d3zca.jl:40\n  Test threw exception\n  Expression: candidate([4,\
    \ -4, 4], 2) == [4, 4]\n  UndefVarError: maximum not defined\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpaf2d3zca.jl:29\n   [2] top-level\
    \ scope at /tmp/tmpaf2d3zca.jl:40\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpaf2d3zca.jl:38\n  \ntest set: Error During\
    \ Test at /tmp/tmpaf2d3zca.jl:41\n  Test threw exception\n  Expression: candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2]\n  UndefVarError: maximum not defined\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpaf2d3zca.jl:29\n   [2] top-level\
    \ scope at /tmp/tmpaf2d3zca.jl:41\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpaf2d3zca.jl:38\n  \ntest set: Error During\
    \ Test at /tmp/tmpaf2d3zca.jl:42\n  Test threw exception\n  Expression: candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  UndefVarError: maximum not defined\n\
    \  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpaf2d3zca.jl:29\n\
    \   [2] top-level scope at /tmp/tmpaf2d3zca.jl:42\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpaf2d3zca.jl:38\n  \ntest set: Error During\
    \ Test at /tmp/tmpaf2d3zca.jl:43\n  Test threw exception\n  Expression: candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n  UndefVarError: maximum not defined\n\
    \  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpaf2d3zca.jl:29\n\
    \   [2] top-level scope at /tmp/tmpaf2d3zca.jl:43\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpaf2d3zca.jl:38\n  \ntest set: Error During\
    \ Test at /tmp/tmpaf2d3zca.jl:44\n  Test threw exception\n  Expression: candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n  UndefVarError: maximum\
    \ not defined\n  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpaf2d3zca.jl:29\n\
    \   [2] top-level scope at /tmp/tmpaf2d3zca.jl:44\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpaf2d3zca.jl:38\n  \ntest set: Error During\
    \ Test at /tmp/tmpaf2d3zca.jl:45\n  Test threw exception\n  Expression: candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n  UndefVarError: maximum not defined\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpaf2d3zca.jl:29\n   [2] top-level\
    \ scope at /tmp/tmpaf2d3zca.jl:45\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpaf2d3zca.jl:38\n  \ntest set: Error During\
    \ Test at /tmp/tmpaf2d3zca.jl:46\n  Test threw exception\n  Expression: candidate([1,\
    \ 0, 5, -7], 1) == [5]\n  UndefVarError: maximum not defined\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpaf2d3zca.jl:29\n   [2] top-level\
    \ scope at /tmp/tmpaf2d3zca.jl:46\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpaf2d3zca.jl:38\n  \ntest set: Error During\
    \ Test at /tmp/tmpaf2d3zca.jl:47\n  Test threw exception\n  Expression: candidate([4,\
    \ -4], 2) == [-4, 4]\n  UndefVarError: maximum not defined\n  Stacktrace:\n  \
    \ [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpaf2d3zca.jl:29\n   [2] top-level\
    \ scope at /tmp/tmpaf2d3zca.jl:47\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpaf2d3zca.jl:38\n  \ntest set: Error During\
    \ Test at /tmp/tmpaf2d3zca.jl:48\n  Test threw exception\n  Expression: candidate([-10,\
    \ 10], 2) == [-10, 10]\n  UndefVarError: maximum not defined\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpaf2d3zca.jl:29\n   [2] top-level\
    \ scope at /tmp/tmpaf2d3zca.jl:48\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpaf2d3zca.jl:38\n  \ntest set: Test Failed at\
    \ /tmp/tmpaf2d3zca.jl:49\n  Expression: candidate([1, 2, 3, -23, 243, -400, 0],\
    \ 0) == Vector{Int64}([])\n   Evaluated: [1, 2, 3, -23, 243, -400, 0] == Int64[]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpaf2d3zca.jl:49\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpaf2d3zca.jl:38\nTest Summary: | Fail  Error \
    \ Total\ntest set      |    1     10     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 1 failed, 10 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpaf2d3zca.jl:36\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    maximum = arr\n \
    \   for i = 2:k\n        maximum = maximum(maximum(maximum.-arr), maximum)\n \
    \   end\n    return maximum\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp6xsc8svk.jl:37\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  MethodError: objects\
    \ of type Array{Int64,1} are not callable\n  Use square brackets [] for indexing\
    \ an Array.\n  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp6xsc8svk.jl:28\n\
    \   [2] top-level scope at /tmp/tmp6xsc8svk.jl:37\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp6xsc8svk.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmp6xsc8svk.jl:38\n  Test threw exception\n  Expression: candidate([4,\
    \ -4, 4], 2) == [4, 4]\n  MethodError: objects of type Array{Int64,1} are not\
    \ callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n \
    \  [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp6xsc8svk.jl:28\n   [2] top-level\
    \ scope at /tmp/tmp6xsc8svk.jl:38\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp6xsc8svk.jl:36\n  \ntest set: Test Failed at\
    \ /tmp/tmp6xsc8svk.jl:39\n  Expression: candidate([-3, 2, 1, 2, -1, -2, 1], 1)\
    \ == [2]\n   Evaluated: [-3, 2, 1, 2, -1, -2, 1] == [2]\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp6xsc8svk.jl:39\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp6xsc8svk.jl:36\ntest set: Error During Test at\
    \ /tmp/tmp6xsc8svk.jl:40\n  Test threw exception\n  Expression: candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  MethodError: objects of type Array{Int64,1}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp6xsc8svk.jl:28\n   [2] top-level\
    \ scope at /tmp/tmp6xsc8svk.jl:40\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp6xsc8svk.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmp6xsc8svk.jl:41\n  Test threw exception\n  Expression: candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n  MethodError: objects of type Array{Int64,1}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp6xsc8svk.jl:28\n   [2] top-level\
    \ scope at /tmp/tmp6xsc8svk.jl:41\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp6xsc8svk.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmp6xsc8svk.jl:42\n  Test threw exception\n  Expression: candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n  MethodError: objects\
    \ of type Array{Int64,1} are not callable\n  Use square brackets [] for indexing\
    \ an Array.\n  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp6xsc8svk.jl:28\n\
    \   [2] top-level scope at /tmp/tmp6xsc8svk.jl:42\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp6xsc8svk.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmp6xsc8svk.jl:43\n  Test threw exception\n  Expression: candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n  MethodError: objects of type Array{Int64,1}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp6xsc8svk.jl:28\n   [2] top-level\
    \ scope at /tmp/tmp6xsc8svk.jl:43\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp6xsc8svk.jl:36\n  \ntest set: Test Failed at\
    \ /tmp/tmp6xsc8svk.jl:44\n  Expression: candidate([1, 0, 5, -7], 1) == [5]\n \
    \  Evaluated: [1, 0, 5, -7] == [5]\nStacktrace:\n [1] top-level scope at /tmp/tmp6xsc8svk.jl:44\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp6xsc8svk.jl:36\ntest set: Error During Test at\
    \ /tmp/tmp6xsc8svk.jl:45\n  Test threw exception\n  Expression: candidate([4,\
    \ -4], 2) == [-4, 4]\n  MethodError: objects of type Array{Int64,1} are not callable\n\
    \  Use square brackets [] for indexing an Array.\n  Stacktrace:\n   [1] maximum(::Array{Int64,1},\
    \ ::Int64) at /tmp/tmp6xsc8svk.jl:28\n   [2] top-level scope at /tmp/tmp6xsc8svk.jl:45\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp6xsc8svk.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmp6xsc8svk.jl:46\n  Test threw exception\n  Expression: candidate([-10,\
    \ 10], 2) == [-10, 10]\n  MethodError: objects of type Array{Int64,1} are not\
    \ callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n \
    \  [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp6xsc8svk.jl:28\n   [2] top-level\
    \ scope at /tmp/tmp6xsc8svk.jl:46\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp6xsc8svk.jl:36\n  \ntest set: Test Failed at\
    \ /tmp/tmp6xsc8svk.jl:47\n  Expression: candidate([1, 2, 3, -23, 243, -400, 0],\
    \ 0) == Vector{Int64}([])\n   Evaluated: [1, 2, 3, -23, 243, -400, 0] == Int64[]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp6xsc8svk.jl:47\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp6xsc8svk.jl:36\nTest Summary: | Fail  Error \
    \ Total\ntest set      |    3      8     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6xsc8svk.jl:34\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    maximum = arr\n \
    \   for i = 1:k\n        maximum = maximum(maximum(maximum, arr[i]), arr[i+1])\n\
    \    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\nmaximum(arr,\
    \ k)\n</cell>\n<text>\n10.3 Find Minimum\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp7rykmita.jl:32\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp7rykmita.jl:32\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k > length(arr)\n\
    \        error(\"k should be less than or equal to length of array\")\n    end\n\
    \    maximum = arr\n    for i in 1:k\n        maximum = maximum(maximum(maximum,\
    \ arr[i]), arr[i+1])\n    end\n    return maximum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2,\
    \ 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpjbt2culc.jl:40\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  MethodError: objects\
    \ of type Array{Int64,1} are not callable\n  Use square brackets [] for indexing\
    \ an Array.\n  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpjbt2culc.jl:31\n\
    \   [2] top-level scope at /tmp/tmpjbt2culc.jl:40\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpjbt2culc.jl:39\n  \ntest set: Error During\
    \ Test at /tmp/tmpjbt2culc.jl:41\n  Test threw exception\n  Expression: candidate([4,\
    \ -4, 4], 2) == [4, 4]\n  MethodError: objects of type Array{Int64,1} are not\
    \ callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n \
    \  [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpjbt2culc.jl:31\n   [2] top-level\
    \ scope at /tmp/tmpjbt2culc.jl:41\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpjbt2culc.jl:39\n  \ntest set: Error During\
    \ Test at /tmp/tmpjbt2culc.jl:42\n  Test threw exception\n  Expression: candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2]\n  MethodError: objects of type Array{Int64,1}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpjbt2culc.jl:31\n   [2] top-level\
    \ scope at /tmp/tmpjbt2culc.jl:42\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpjbt2culc.jl:39\n  \ntest set: Error During\
    \ Test at /tmp/tmpjbt2culc.jl:43\n  Test threw exception\n  Expression: candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  MethodError: objects of type Array{Int64,1}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpjbt2culc.jl:31\n   [2] top-level\
    \ scope at /tmp/tmpjbt2culc.jl:43\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpjbt2culc.jl:39\n  \ntest set: Error During\
    \ Test at /tmp/tmpjbt2culc.jl:44\n  Test threw exception\n  Expression: candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n  MethodError: objects of type Array{Int64,1}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpjbt2culc.jl:31\n   [2] top-level\
    \ scope at /tmp/tmpjbt2culc.jl:44\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpjbt2culc.jl:39\n  \ntest set: Error During\
    \ Test at /tmp/tmpjbt2culc.jl:45\n  Test threw exception\n  Expression: candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n  MethodError: objects\
    \ of type Array{Int64,1} are not callable\n  Use square brackets [] for indexing\
    \ an Array.\n  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpjbt2culc.jl:31\n\
    \   [2] top-level scope at /tmp/tmpjbt2culc.jl:45\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpjbt2culc.jl:39\n  \ntest set: Error During\
    \ Test at /tmp/tmpjbt2culc.jl:46\n  Test threw exception\n  Expression: candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n  MethodError: objects of type Array{Int64,1}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpjbt2culc.jl:31\n   [2] top-level\
    \ scope at /tmp/tmpjbt2culc.jl:46\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpjbt2culc.jl:39\n  \ntest set: Error During\
    \ Test at /tmp/tmpjbt2culc.jl:47\n  Test threw exception\n  Expression: candidate([1,\
    \ 0, 5, -7], 1) == [5]\n  MethodError: objects of type Array{Int64,1} are not\
    \ callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n \
    \  [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpjbt2culc.jl:31\n   [2] top-level\
    \ scope at /tmp/tmpjbt2culc.jl:47\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpjbt2culc.jl:39\n  \ntest set: Error During\
    \ Test at /tmp/tmpjbt2culc.jl:48\n  Test threw exception\n  Expression: candidate([4,\
    \ -4], 2) == [-4, 4]\n  MethodError: objects of type Array{Int64,1} are not callable\n\
    \  Use square brackets [] for indexing an Array.\n  Stacktrace:\n   [1] maximum(::Array{Int64,1},\
    \ ::Int64) at /tmp/tmpjbt2culc.jl:31\n   [2] top-level scope at /tmp/tmpjbt2culc.jl:48\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpjbt2culc.jl:39\n  \ntest set: Error During\
    \ Test at /tmp/tmpjbt2culc.jl:49\n  Test threw exception\n  Expression: candidate([-10,\
    \ 10], 2) == [-10, 10]\n  MethodError: objects of type Array{Int64,1} are not\
    \ callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n \
    \  [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpjbt2culc.jl:31\n   [2] top-level\
    \ scope at /tmp/tmpjbt2culc.jl:49\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpjbt2culc.jl:39\n  \ntest set: Test Failed at\
    \ /tmp/tmpjbt2culc.jl:50\n  Expression: candidate([1, 2, 3, -23, 243, -400, 0],\
    \ 0) == Vector{Int64}([])\n   Evaluated: [1, 2, 3, -23, 243, -400, 0] == Int64[]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpjbt2culc.jl:50\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjbt2culc.jl:39\nTest Summary: | Fail  Error \
    \ Total\ntest set      |    1     10     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 1 failed, 10 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjbt2culc.jl:37\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    maximum = arr\n \
    \   for i = 1:k\n        maximum = maximum(maximum(maximum, arr), arr)\n    end\n\
    \    maximum\nend\n</cell>\n<code language=julia-1.5>\nmaximum(arr, k)\n</cell>\n\
    <text>\nmaximum\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpjb2za1bw.jl:32\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpjb2za1bw.jl:32\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    maximum = arr\n \
    \   for i = k+1:length(arr)\n        maximum = maximum(maximum(maximum, arr[i]),\
    \ maximum)\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.0>\n\
    maximum(arr, 3)\n</cell>\n<text>\nExercise 2\nWrite a function that takes in an\
    \ array of integers and a positive integer k, and returns a sorted list of length\
    \ k with the minimum k numbers in arr. \nFor example, given arr = [-3, -4, 5],\
    \ and k = 3, the function should return [-3, -4, -5, 4]. \nThe function should\
    \ return an empty array if k is greater than or equal to the length of the array.\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpodzf20ar.jl:32\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpodzf20ar.jl:32\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k > length(arr)\n\
    \        throw(ArgumentError(\"k must be less than or equal to length(arr)\"))\n\
    \    end\n    maximum = arr\n    for i = k+1:length(arr)\n        maximum = max(maximum,\
    \ arr[i])\n    end\n    return maximum\nend\nusing Test\n\n@testset begin\n\n\
    candidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpyl0r9kg8.jl:40\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [-3, -4, 5] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpyl0r9kg8.jl:40\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpyl0r9kg8.jl:39\ntest set: Error During Test at\
    \ /tmp/tmpyl0r9kg8.jl:41\n  Test threw exception\n  Expression: candidate([4,\
    \ -4, 4], 2) == [4, 4]\n  MethodError: no method matching isless(::Int64, ::Array{Int64,1})\n\
    \  Closest candidates are:\n    isless(!Matched::Missing, ::Any) at missing.jl:87\n\
    \    isless(::Real, !Matched::AbstractFloat) at operators.jl:157\n    isless(::Real,\
    \ !Matched::Real) at operators.jl:346\n    ...\n  Stacktrace:\n   [1] max(::Array{Int64,1},\
    \ ::Int64) at ./operators.jl:408\n   [2] maximum(::Array{Int64,1}, ::Int64) at\
    \ /tmp/tmpyl0r9kg8.jl:31\n   [3] top-level scope at /tmp/tmpyl0r9kg8.jl:41\n \
    \  [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpyl0r9kg8.jl:39\n  \ntest set: Error During\
    \ Test at /tmp/tmpyl0r9kg8.jl:42\n  Test threw exception\n  Expression: candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2]\n  MethodError: no method matching isless(::Int64,\
    \ ::Array{Int64,1})\n  Closest candidates are:\n    isless(!Matched::Missing,\
    \ ::Any) at missing.jl:87\n    isless(::Real, !Matched::AbstractFloat) at operators.jl:157\n\
    \    isless(::Real, !Matched::Real) at operators.jl:346\n    ...\n  Stacktrace:\n\
    \   [1] max(::Array{Int64,1}, ::Int64) at ./operators.jl:408\n   [2] maximum(::Array{Int64,1},\
    \ ::Int64) at /tmp/tmpyl0r9kg8.jl:31\n   [3] top-level scope at /tmp/tmpyl0r9kg8.jl:42\n\
    \   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpyl0r9kg8.jl:39\n  \ntest set: Error During\
    \ Test at /tmp/tmpyl0r9kg8.jl:43\n  Test threw exception\n  Expression: candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  MethodError: no method matching\
    \ isless(::Int64, ::Array{Int64,1})\n  Closest candidates are:\n    isless(!Matched::Missing,\
    \ ::Any) at missing.jl:87\n    isless(::Real, !Matched::AbstractFloat) at operators.jl:157\n\
    \    isless(::Real, !Matched::Real) at operators.jl:346\n    ...\n  Stacktrace:\n\
    \   [1] max(::Array{Int64,1}, ::Int64) at ./operators.jl:408\n   [2] maximum(::Array{Int64,1},\
    \ ::Int64) at /tmp/tmpyl0r9kg8.jl:31\n   [3] top-level scope at /tmp/tmpyl0r9kg8.jl:43\n\
    \   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpyl0r9kg8.jl:39\n  \ntest set: Error During\
    \ Test at /tmp/tmpyl0r9kg8.jl:44\n  Test threw exception\n  Expression: candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n  MethodError: no method matching isless(::Int64,\
    \ ::Array{Int64,1})\n  Closest candidates are:\n    isless(!Matched::Missing,\
    \ ::Any) at missing.jl:87\n    isless(::Real, !Matched::AbstractFloat) at operators.jl:157\n\
    \    isless(::Real, !Matched::Real) at operators.jl:346\n    ...\n  Stacktrace:\n\
    \   [1] max(::Array{Int64,1}, ::Int64) at ./operators.jl:408\n   [2] maximum(::Array{Int64,1},\
    \ ::Int64) at /tmp/tmpyl0r9kg8.jl:31\n   [3] top-level scope at /tmp/tmpyl0r9kg8.jl:44\n\
    \   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpyl0r9kg8.jl:39\n  \ntest set: Test Failed at\
    \ /tmp/tmpyl0r9kg8.jl:45\n  Expression: candidate([5, 15, 0, 3, -13, -8, 0], 7)\
    \ == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [5, 15, 0, 3, -13, -8, 0] == [-13,\
    \ -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] top-level scope at /tmp/tmpyl0r9kg8.jl:45\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpyl0r9kg8.jl:39\ntest set: Error During Test at\
    \ /tmp/tmpyl0r9kg8.jl:46\n  Test threw exception\n  Expression: candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n  MethodError: no method matching isless(::Int64,\
    \ ::Array{Int64,1})\n  Closest candidates are:\n    isless(!Matched::Missing,\
    \ ::Any) at missing.jl:87\n    isless(::Real, !Matched::AbstractFloat) at operators.jl:157\n\
    \    isless(::Real, !Matched::Real) at operators.jl:346\n    ...\n  Stacktrace:\n\
    \   [1] max(::Array{Int64,1}, ::Int64) at ./operators.jl:408\n   [2] maximum(::Array{Int64,1},\
    \ ::Int64) at /tmp/tmpyl0r9kg8.jl:31\n   [3] top-level scope at /tmp/tmpyl0r9kg8.jl:46\n\
    \   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpyl0r9kg8.jl:39\n  \ntest set: Error During\
    \ Test at /tmp/tmpyl0r9kg8.jl:47\n  Test threw exception\n  Expression: candidate([1,\
    \ 0, 5, -7], 1) == [5]\n  MethodError: no method matching isless(::Int64, ::Array{Int64,1})\n\
    \  Closest candidates are:\n    isless(!Matched::Missing, ::Any) at missing.jl:87\n\
    \    isless(::Real, !Matched::AbstractFloat) at operators.jl:157\n    isless(::Real,\
    \ !Matched::Real) at operators.jl:346\n    ...\n  Stacktrace:\n   [1] max(::Array{Int64,1},\
    \ ::Int64) at ./operators.jl:408\n   [2] maximum(::Array{Int64,1}, ::Int64) at\
    \ /tmp/tmpyl0r9kg8.jl:31\n   [3] top-level scope at /tmp/tmpyl0r9kg8.jl:47\n \
    \  [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpyl0r9kg8.jl:39\n  \ntest set: Test Failed at\
    \ /tmp/tmpyl0r9kg8.jl:48\n  Expression: candidate([4, -4], 2) == [-4, 4]\n   Evaluated:\
    \ [4, -4] == [-4, 4]\nStacktrace:\n [1] top-level scope at /tmp/tmpyl0r9kg8.jl:48\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpyl0r9kg8.jl:39\ntest set: Error During Test at\
    \ /tmp/tmpyl0r9kg8.jl:50\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([])\n  MethodError: no method\
    \ matching isless(::Int64, ::Array{Int64,1})\n  Closest candidates are:\n    isless(!Matched::Missing,\
    \ ::Any) at missing.jl:87\n    isless(::Real, !Matched::AbstractFloat) at operators.jl:157\n\
    \    isless(::Real, !Matched::Real) at operators.jl:346\n    ...\n  Stacktrace:\n\
    \   [1] max(::Array{Int64,1}, ::Int64) at ./operators.jl:408\n   [2] maximum(::Array{Int64,1},\
    \ ::Int64) at /tmp/tmpyl0r9kg8.jl:31\n   [3] top-level scope at /tmp/tmpyl0r9kg8.jl:50\n\
    \   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpyl0r9kg8.jl:39\n  \nTest Summary: | Pass  Fail\
    \  Error  Total\ntest set      |    1     3      7     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyl0r9kg8.jl:37\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    maximum = arr\n \
    \   for i = 1:k\n        maximum = maximum(maximum(maximum, arr), maximum)\n \
    \   end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\nmaximum(arr,\
    \ 3)\n</cell>\n<text>\nExercise 3\nWrite a function that returns the minimum number\
    \ in the given array. \nThe function should take in a vector of integers and return\
    \ a single integer.\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t\
    @test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp6zskvy8r.jl:32\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp6zskvy8r.jl:32\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k == 0 \n    \
    \    return arr \n    else \n        maximum = maximum(maximum(arr,k-1),k) \n\
    \        maximum[end] = maximum(maximum[end],maximum(arr,k-1))[end] \n       \
    \ return maximum \nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpgkey1g6k.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpgkey1g6k.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpgkey1g6k.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    maximum = arr\n \
    \   for i = 2:k\n        maximum = maximum(maximum(maximum, arr), i)\n    end\n\
    \    return maximum\nend\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 3)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the minimum number\
    \ in a given array.\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t\
    @test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpujbhkzg3.jl:32\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpujbhkzg3.jl:32\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k == 0 \n    \
    \    return arr\n    else\n        maximum = maximum.(maximum(arr,k-1),k)\n  \
    \      maximum = maximum.(maximum(maximum(arr,k-1),k-1),k)\n        maximum =\
    \ maximum.(maximum(maximum(maximum(arr,k-1),k-1),k-1),k)\n        maximum = maximum.(maximum(maximum(maximum(maximum(arr,k-1),k-1),k-1),k-1),k)\n\
    \        maximum = maximum.(maximum(maximum(maximum(maximum(maximum(arr,k-1),k-1),k-1),k-1),k-1),k)\n\
    \        maximum = maximum.(maximum(maximum(maximum(maximum(maximum(maximum(arr,k-1),k-1),k-1),k-1),k-1),k-1),k)\n\
    \        maximum = maximum.(maximum(maximum(maximum(maximum(maximum(maximum(maximum(arr,k-1),k-1),k-1),k-1),k-1),k-1),k-1),k)\n\
    \        maximum = maximum.(maximum(maximum(maximum(maximum(maximum(maximum(maximum(arr,k-1),k-1),k-1),k-1),k-1),k-1),k-1),k)\n\
    \        maximum = maximum.(maximum(maximum(maximum(maximum(maximum(maximum(maximum(arr,k-1),k-1),k-1),k-1),k-1),k-1),k-1),k)\n\
    \        maximum = maximum.(maximum(maximum(maximum(maximum(maximum(maximum(maximum(arr,k-1),k-1),k-1),k-1),k-1),k-1),k-1),k)\n\
    \        maximum = maximum.(maximum(maximum(maximum(maximum(maximum(maximum(maximum(arr,k-1),k-1),k-1),k-1),k-1),k-1),k-1),k)\n\
    \        maximum = maximum.(maximum(maximum(maximum(maximum(maximum(maximum(maximum(arr,k-1),k-1),k-1),k-1),k-1),k-1),k-1),k)\n\
    \        maximum = maximum.(maximum(maximum(maximum(maximum(maximum(maximum(maximum(arr,k-1),k-1),k-1),k-1),k-1),k-1),k-1),k)\n\
    \        maximum = maximum.(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(arr,k-1),k-1),k-1),k-1),k-1),k-1),k-1),k)\n\
    \        maximum = maximum.(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(arr,k-1),k-1),k-1),k-1),k-1),k-1),k-1),k-1),k)\n\
    \        maximum = maximum.(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(arr,k-1),k-1),k-1),k-1),k-1),k-1),k-1),k-1),k)\n\
    \        maximum = maximum.(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(arr,k-1),k-1),k-1),k-1),k-1),k-1),k-1),k-1),k)\n\
    \        maximum = maximum.(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(arr,k-1),k-1),k-1),k-1),k-1),k-1),\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpvot8eswt.jl:43\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpvot8eswt.jl:43\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    maximum = arr\n \
    \   for i = 1:k\n        maximum = maximum(maximum(maximum, arr[i]), arr[i+1])\n\
    \    end\n    return maximum\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpgp58_6sy.jl:37\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  MethodError: objects\
    \ of type Array{Int64,1} are not callable\n  Use square brackets [] for indexing\
    \ an Array.\n  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpgp58_6sy.jl:28\n\
    \   [2] top-level scope at /tmp/tmpgp58_6sy.jl:37\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpgp58_6sy.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmpgp58_6sy.jl:38\n  Test threw exception\n  Expression: candidate([4,\
    \ -4, 4], 2) == [4, 4]\n  MethodError: objects of type Array{Int64,1} are not\
    \ callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n \
    \  [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpgp58_6sy.jl:28\n   [2] top-level\
    \ scope at /tmp/tmpgp58_6sy.jl:38\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpgp58_6sy.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmpgp58_6sy.jl:39\n  Test threw exception\n  Expression: candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2]\n  MethodError: objects of type Array{Int64,1}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpgp58_6sy.jl:28\n   [2] top-level\
    \ scope at /tmp/tmpgp58_6sy.jl:39\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpgp58_6sy.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmpgp58_6sy.jl:40\n  Test threw exception\n  Expression: candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  MethodError: objects of type Array{Int64,1}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpgp58_6sy.jl:28\n   [2] top-level\
    \ scope at /tmp/tmpgp58_6sy.jl:40\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpgp58_6sy.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmpgp58_6sy.jl:41\n  Test threw exception\n  Expression: candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n  MethodError: objects of type Array{Int64,1}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpgp58_6sy.jl:28\n   [2] top-level\
    \ scope at /tmp/tmpgp58_6sy.jl:41\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpgp58_6sy.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmpgp58_6sy.jl:42\n  Test threw exception\n  Expression: candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n  MethodError: objects\
    \ of type Array{Int64,1} are not callable\n  Use square brackets [] for indexing\
    \ an Array.\n  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpgp58_6sy.jl:28\n\
    \   [2] top-level scope at /tmp/tmpgp58_6sy.jl:42\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpgp58_6sy.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmpgp58_6sy.jl:43\n  Test threw exception\n  Expression: candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n  MethodError: objects of type Array{Int64,1}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpgp58_6sy.jl:28\n   [2] top-level\
    \ scope at /tmp/tmpgp58_6sy.jl:43\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpgp58_6sy.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmpgp58_6sy.jl:44\n  Test threw exception\n  Expression: candidate([1,\
    \ 0, 5, -7], 1) == [5]\n  MethodError: objects of type Array{Int64,1} are not\
    \ callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n \
    \  [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpgp58_6sy.jl:28\n   [2] top-level\
    \ scope at /tmp/tmpgp58_6sy.jl:44\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpgp58_6sy.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmpgp58_6sy.jl:45\n  Test threw exception\n  Expression: candidate([4,\
    \ -4], 2) == [-4, 4]\n  MethodError: objects of type Array{Int64,1} are not callable\n\
    \  Use square brackets [] for indexing an Array.\n  Stacktrace:\n   [1] maximum(::Array{Int64,1},\
    \ ::Int64) at /tmp/tmpgp58_6sy.jl:28\n   [2] top-level scope at /tmp/tmpgp58_6sy.jl:45\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpgp58_6sy.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmpgp58_6sy.jl:46\n  Test threw exception\n  Expression: candidate([-10,\
    \ 10], 2) == [-10, 10]\n  MethodError: objects of type Array{Int64,1} are not\
    \ callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n \
    \  [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpgp58_6sy.jl:28\n   [2] top-level\
    \ scope at /tmp/tmpgp58_6sy.jl:46\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpgp58_6sy.jl:36\n  \ntest set: Test Failed at\
    \ /tmp/tmpgp58_6sy.jl:47\n  Expression: candidate([1, 2, 3, -23, 243, -400, 0],\
    \ 0) == Vector{Int64}([])\n   Evaluated: [1, 2, 3, -23, 243, -400, 0] == Int64[]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpgp58_6sy.jl:47\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpgp58_6sy.jl:36\nTest Summary: | Fail  Error \
    \ Total\ntest set      |    1     10     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 1 failed, 10 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgp58_6sy.jl:34\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k == 0 \n    \
    \    return arr\n    \n    maximum = arr[1]\n    for x in arr[2:end]\n       \
    \ if x > maximum\n            maximum = x\n        end\n    end\n    \n    return\
    \ maximum\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp79dx9ac8.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp79dx9ac8.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp79dx9ac8.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k > length(arr)\n\
    \        return arr\n    end\n    \n    maximum = arr\n    for i = 1:k\n     \
    \   maximum = maximum(maximum(maximum(maximum, maximum), maximum), maximum)\n\
    \    end\n    return maximum\nend\n</cell>\n<code language=julia-1.3>\nmaximum(arr,\
    \ 3)\n</cell>\n<text>\nmaximum\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpm4r80x1p.jl:36\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpm4r80x1p.jl:36\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    maximum = arr\n \
    \   for i = 1:k\n        maximum = maximum(maximum(maximum, arr), maximum)\n \
    \   end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\nmaximum(arr,\
    \ 3)\n</cell>\n<text>\nmaximum\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpkkd0d1uy.jl:32\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpkkd0d1uy.jl:32\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    maximum = arr\n \
    \   for i = 2:k\n        maximum = maximum(maximum(maximum, arr), i)\n    end\n\
    \    return maximum\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpbylzbq47.jl:37\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  MethodError: objects\
    \ of type Array{Int64,1} are not callable\n  Use square brackets [] for indexing\
    \ an Array.\n  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpbylzbq47.jl:28\n\
    \   [2] top-level scope at /tmp/tmpbylzbq47.jl:37\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpbylzbq47.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmpbylzbq47.jl:38\n  Test threw exception\n  Expression: candidate([4,\
    \ -4, 4], 2) == [4, 4]\n  MethodError: objects of type Array{Int64,1} are not\
    \ callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n \
    \  [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpbylzbq47.jl:28\n   [2] top-level\
    \ scope at /tmp/tmpbylzbq47.jl:38\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpbylzbq47.jl:36\n  \ntest set: Test Failed at\
    \ /tmp/tmpbylzbq47.jl:39\n  Expression: candidate([-3, 2, 1, 2, -1, -2, 1], 1)\
    \ == [2]\n   Evaluated: [-3, 2, 1, 2, -1, -2, 1] == [2]\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpbylzbq47.jl:39\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpbylzbq47.jl:36\ntest set: Error During Test at\
    \ /tmp/tmpbylzbq47.jl:40\n  Test threw exception\n  Expression: candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  MethodError: objects of type Array{Int64,1}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpbylzbq47.jl:28\n   [2] top-level\
    \ scope at /tmp/tmpbylzbq47.jl:40\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpbylzbq47.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmpbylzbq47.jl:41\n  Test threw exception\n  Expression: candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n  MethodError: objects of type Array{Int64,1}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpbylzbq47.jl:28\n   [2] top-level\
    \ scope at /tmp/tmpbylzbq47.jl:41\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpbylzbq47.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmpbylzbq47.jl:42\n  Test threw exception\n  Expression: candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n  MethodError: objects\
    \ of type Array{Int64,1} are not callable\n  Use square brackets [] for indexing\
    \ an Array.\n  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpbylzbq47.jl:28\n\
    \   [2] top-level scope at /tmp/tmpbylzbq47.jl:42\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpbylzbq47.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmpbylzbq47.jl:43\n  Test threw exception\n  Expression: candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n  MethodError: objects of type Array{Int64,1}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpbylzbq47.jl:28\n   [2] top-level\
    \ scope at /tmp/tmpbylzbq47.jl:43\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpbylzbq47.jl:36\n  \ntest set: Test Failed at\
    \ /tmp/tmpbylzbq47.jl:44\n  Expression: candidate([1, 0, 5, -7], 1) == [5]\n \
    \  Evaluated: [1, 0, 5, -7] == [5]\nStacktrace:\n [1] top-level scope at /tmp/tmpbylzbq47.jl:44\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpbylzbq47.jl:36\ntest set: Error During Test at\
    \ /tmp/tmpbylzbq47.jl:45\n  Test threw exception\n  Expression: candidate([4,\
    \ -4], 2) == [-4, 4]\n  MethodError: objects of type Array{Int64,1} are not callable\n\
    \  Use square brackets [] for indexing an Array.\n  Stacktrace:\n   [1] maximum(::Array{Int64,1},\
    \ ::Int64) at /tmp/tmpbylzbq47.jl:28\n   [2] top-level scope at /tmp/tmpbylzbq47.jl:45\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpbylzbq47.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmpbylzbq47.jl:46\n  Test threw exception\n  Expression: candidate([-10,\
    \ 10], 2) == [-10, 10]\n  MethodError: objects of type Array{Int64,1} are not\
    \ callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n \
    \  [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpbylzbq47.jl:28\n   [2] top-level\
    \ scope at /tmp/tmpbylzbq47.jl:46\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpbylzbq47.jl:36\n  \ntest set: Test Failed at\
    \ /tmp/tmpbylzbq47.jl:47\n  Expression: candidate([1, 2, 3, -23, 243, -400, 0],\
    \ 0) == Vector{Int64}([])\n   Evaluated: [1, 2, 3, -23, 243, -400, 0] == Int64[]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpbylzbq47.jl:47\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpbylzbq47.jl:36\nTest Summary: | Fail  Error \
    \ Total\ntest set      |    3      8     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbylzbq47.jl:34\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k > length(arr)\
    \ \n        error(\"k must be less than or equal to length(arr)\")\n    end\n\
    \    maximum = arr\n    for i = k+1:length(arr) \n        maximum[i] = maximum(maximum(maximum,\
    \ arr[i]), maximum[i])\n    end\n    return maximum\nend\n\"\"\"\n    Given an\
    \ array arr of integers and a positive integer k, return a sorted list \n    of\
    \ length k with the minimum k numbers in arr.\nusing Test\n\n@testset begin\n\n\
    candidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpfxh3rs1z.jl:35\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpfxh3rs1z.jl:35\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k == 0 \n    \
    \    return arr \n    else \n        maximum = maximum(maximum(arr,k-1),k) \n\
    \        maximum[end] = maximum(maximum(arr,k-1),k-1) \n        return maximum\
    \ \nend\n\"\"\"\n    Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n    of length k with the minimum k numbers in arr.\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpoyhd1pmb.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpoyhd1pmb.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    maximum = arr\n \
    \   for i = k+1:length(arr)\n        maximum = maximum(maximum(maximum, arr[i]),\
    \ maximum)\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 3)\n</cell>\n<text>\n6.3 Find Minimum\nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2v3bt8f4.jl:32\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp2v3bt8f4.jl:32\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    maximum = arr\n \
    \   for i = 1:k\n        maximum = maximum(maximum(maximum, arr), arr[i])\n  \
    \  end\n    maximum\nend\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 3)\n\
    </cell>\n<text>\n13. \u6700\u5C0F\u503C\nGiven an array arr of integers and a\
    \ positive integer k, return a sorted list \n    of length k with the minimum\
    \ k numbers in arr.\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t\
    @test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpxwqrez9i.jl:32\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpxwqrez9i.jl:32\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    maximums = Vector{Int64}()\n\
    \    maximums = maximums.(arr[k+1:end])\n    maximums = maximums.(arr[1:k])\n\
    \    return maximums\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpyc3e9c02.jl:36\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  MethodError: objects\
    \ of type Array{Union{},1} are not callable\n  Use square brackets [] for indexing\
    \ an Array.\n  Stacktrace:\n   [1] _broadcast_getindex_evalf at ./broadcast.jl:631\
    \ [inlined]\n   [2] _broadcast_getindex at ./broadcast.jl:604 [inlined]\n   [3]\
    \ getindex at ./broadcast.jl:564 [inlined]\n   [4] copy at ./broadcast.jl:854\
    \ [inlined]\n   [5] materialize at ./broadcast.jl:820 [inlined]\n   [6] maximum(::Array{Int64,1},\
    \ ::Int64) at /tmp/tmpyc3e9c02.jl:28\n   [7] top-level scope at /tmp/tmpyc3e9c02.jl:36\n\
    \   [8] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [9] top-level scope at /tmp/tmpyc3e9c02.jl:35\n  \ntest set: Error During\
    \ Test at /tmp/tmpyc3e9c02.jl:37\n  Test threw exception\n  Expression: candidate([4,\
    \ -4, 4], 2) == [4, 4]\n  MethodError: objects of type Array{Int64,1} are not\
    \ callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n \
    \  [1] _broadcast_getindex_evalf at ./broadcast.jl:631 [inlined]\n   [2] _broadcast_getindex\
    \ at ./broadcast.jl:604 [inlined]\n   [3] getindex at ./broadcast.jl:564 [inlined]\n\
    \   [4] copy at ./broadcast.jl:854 [inlined]\n   [5] materialize at ./broadcast.jl:820\
    \ [inlined]\n   [6] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpyc3e9c02.jl:27\n\
    \   [7] top-level scope at /tmp/tmpyc3e9c02.jl:37\n   [8] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [9] top-level scope at /tmp/tmpyc3e9c02.jl:35\n  \ntest set: Error During\
    \ Test at /tmp/tmpyc3e9c02.jl:38\n  Test threw exception\n  Expression: candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2]\n  MethodError: objects of type Array{Int64,1}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] _broadcast_getindex_evalf at ./broadcast.jl:631 [inlined]\n   [2] _broadcast_getindex\
    \ at ./broadcast.jl:604 [inlined]\n   [3] getindex at ./broadcast.jl:564 [inlined]\n\
    \   [4] copy at ./broadcast.jl:854 [inlined]\n   [5] materialize at ./broadcast.jl:820\
    \ [inlined]\n   [6] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpyc3e9c02.jl:27\n\
    \   [7] top-level scope at /tmp/tmpyc3e9c02.jl:38\n   [8] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [9] top-level scope at /tmp/tmpyc3e9c02.jl:35\n  \ntest set: Error During\
    \ Test at /tmp/tmpyc3e9c02.jl:39\n  Test threw exception\n  Expression: candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  MethodError: objects of type Array{Int64,1}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] _broadcast_getindex_evalf at ./broadcast.jl:631 [inlined]\n   [2] _broadcast_getindex\
    \ at ./broadcast.jl:604 [inlined]\n   [3] getindex at ./broadcast.jl:564 [inlined]\n\
    \   [4] copy at ./broadcast.jl:854 [inlined]\n   [5] materialize at ./broadcast.jl:820\
    \ [inlined]\n   [6] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpyc3e9c02.jl:27\n\
    \   [7] top-level scope at /tmp/tmpyc3e9c02.jl:39\n   [8] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [9] top-level scope at /tmp/tmpyc3e9c02.jl:35\n  \ntest set: Error During\
    \ Test at /tmp/tmpyc3e9c02.jl:40\n  Test threw exception\n  Expression: candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n  MethodError: objects of type Array{Int64,1}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] _broadcast_getindex_evalf at ./broadcast.jl:631 [inlined]\n   [2] _broadcast_getindex\
    \ at ./broadcast.jl:604 [inlined]\n   [3] getindex at ./broadcast.jl:564 [inlined]\n\
    \   [4] copy at ./broadcast.jl:854 [inlined]\n   [5] materialize at ./broadcast.jl:820\
    \ [inlined]\n   [6] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpyc3e9c02.jl:27\n\
    \   [7] top-level scope at /tmp/tmpyc3e9c02.jl:40\n   [8] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [9] top-level scope at /tmp/tmpyc3e9c02.jl:35\n  \ntest set: Error During\
    \ Test at /tmp/tmpyc3e9c02.jl:41\n  Test threw exception\n  Expression: candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n  MethodError: objects\
    \ of type Array{Union{},1} are not callable\n  Use square brackets [] for indexing\
    \ an Array.\n  Stacktrace:\n   [1] _broadcast_getindex_evalf at ./broadcast.jl:631\
    \ [inlined]\n   [2] _broadcast_getindex at ./broadcast.jl:604 [inlined]\n   [3]\
    \ getindex at ./broadcast.jl:564 [inlined]\n   [4] copy at ./broadcast.jl:854\
    \ [inlined]\n   [5] materialize at ./broadcast.jl:820 [inlined]\n   [6] maximum(::Array{Int64,1},\
    \ ::Int64) at /tmp/tmpyc3e9c02.jl:28\n   [7] top-level scope at /tmp/tmpyc3e9c02.jl:41\n\
    \   [8] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [9] top-level scope at /tmp/tmpyc3e9c02.jl:35\n  \ntest set: Error During\
    \ Test at /tmp/tmpyc3e9c02.jl:42\n  Test threw exception\n  Expression: candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n  MethodError: objects of type Array{Int64,1}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] _broadcast_getindex_evalf at ./broadcast.jl:631 [inlined]\n   [2] _broadcast_getindex\
    \ at ./broadcast.jl:604 [inlined]\n   [3] getindex at ./broadcast.jl:564 [inlined]\n\
    \   [4] copy at ./broadcast.jl:854 [inlined]\n   [5] materialize at ./broadcast.jl:820\
    \ [inlined]\n   [6] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpyc3e9c02.jl:27\n\
    \   [7] top-level scope at /tmp/tmpyc3e9c02.jl:42\n   [8] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [9] top-level scope at /tmp/tmpyc3e9c02.jl:35\n  \ntest set: Error During\
    \ Test at /tmp/tmpyc3e9c02.jl:43\n  Test threw exception\n  Expression: candidate([1,\
    \ 0, 5, -7], 1) == [5]\n  MethodError: objects of type Array{Int64,1} are not\
    \ callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n \
    \  [1] _broadcast_getindex_evalf at ./broadcast.jl:631 [inlined]\n   [2] _broadcast_getindex\
    \ at ./broadcast.jl:604 [inlined]\n   [3] getindex at ./broadcast.jl:564 [inlined]\n\
    \   [4] copy at ./broadcast.jl:854 [inlined]\n   [5] materialize at ./broadcast.jl:820\
    \ [inlined]\n   [6] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpyc3e9c02.jl:27\n\
    \   [7] top-level scope at /tmp/tmpyc3e9c02.jl:43\n   [8] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [9] top-level scope at /tmp/tmpyc3e9c02.jl:35\n  \ntest set: Error During\
    \ Test at /tmp/tmpyc3e9c02.jl:44\n  Test threw exception\n  Expression: candidate([4,\
    \ -4], 2) == [-4, 4]\n  MethodError: objects of type Array{Union{},1} are not\
    \ callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n \
    \  [1] _broadcast_getindex_evalf at ./broadcast.jl:631 [inlined]\n   [2] _broadcast_getindex\
    \ at ./broadcast.jl:604 [inlined]\n   [3] getindex at ./broadcast.jl:564 [inlined]\n\
    \   [4] copy at ./broadcast.jl:854 [inlined]\n   [5] materialize at ./broadcast.jl:820\
    \ [inlined]\n   [6] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpyc3e9c02.jl:28\n\
    \   [7] top-level scope at /tmp/tmpyc3e9c02.jl:44\n   [8] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [9] top-level scope at /tmp/tmpyc3e9c02.jl:35\n  \ntest set: Error During\
    \ Test at /tmp/tmpyc3e9c02.jl:45\n  Test threw exception\n  Expression: candidate([-10,\
    \ 10], 2) == [-10, 10]\n  MethodError: objects of type Array{Union{},1} are not\
    \ callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n \
    \  [1] _broadcast_getindex_evalf at ./broadcast.jl:631 [inlined]\n   [2] _broadcast_getindex\
    \ at ./broadcast.jl:604 [inlined]\n   [3] getindex at ./broadcast.jl:564 [inlined]\n\
    \   [4] copy at ./broadcast.jl:854 [inlined]\n   [5] materialize at ./broadcast.jl:820\
    \ [inlined]\n   [6] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpyc3e9c02.jl:28\n\
    \   [7] top-level scope at /tmp/tmpyc3e9c02.jl:45\n   [8] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [9] top-level scope at /tmp/tmpyc3e9c02.jl:35\n  \ntest set: Error During\
    \ Test at /tmp/tmpyc3e9c02.jl:46\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([])\n  MethodError: objects of\
    \ type Array{Int64,1} are not callable\n  Use square brackets [] for indexing\
    \ an Array.\n  Stacktrace:\n   [1] _broadcast_getindex_evalf at ./broadcast.jl:631\
    \ [inlined]\n   [2] _broadcast_getindex at ./broadcast.jl:604 [inlined]\n   [3]\
    \ getindex at ./broadcast.jl:564 [inlined]\n   [4] copy at ./broadcast.jl:854\
    \ [inlined]\n   [5] materialize at ./broadcast.jl:820 [inlined]\n   [6] maximum(::Array{Int64,1},\
    \ ::Int64) at /tmp/tmpyc3e9c02.jl:27\n   [7] top-level scope at /tmp/tmpyc3e9c02.jl:46\n\
    \   [8] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [9] top-level scope at /tmp/tmpyc3e9c02.jl:35\n  \nTest Summary: | Error \
    \ Total\ntest set      |    11     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyc3e9c02.jl:33\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    maximum = arr\n \
    \   for i = 2:k\n        maximum = maximum(maximum(maximum.-minimum(maximum),\
    \ maximum), minimum(maximum))\n    end\n    return maximum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nmaximum(arr, 3)\n</cell>\n<text>\nProblem 4\nWrite a function\
    \ that returns the minimum number in a given array of numbers.\nusing Test\n\n\
    @testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4,\
    \ -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmxgnpgpc.jl:32\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpmxgnpgpc.jl:32\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    maximums = Vector{Int64}()\n\
    \    maximums = maximums.+(k-1) * arr\n    maximums = maximums.+k * arr\n    maximums\
    \ = maximums.+k * arr\n    maximums = maximums.+k * arr\n    maximums = maximums.+k\
    \ * arr\n    maximums = maximums.+k * arr\n    maximums = maximums.+k * arr\n\
    \    maximums = maximums.+k * arr\n    maximums = maximums.+k * arr\n    maximums\
    \ = maximums.+k * arr\n    maximums = maximums.+k * arr\n    maximums = maximums.+k\
    \ * arr\n    maximums = maximums.+k * arr\n    maximums = maximums.+k * arr\n\
    \    maximums = maximums.+k * arr\n    maximums = maximums.+k * arr\n    maximums\
    \ = maximums.+k * arr\n    maximums = maximums.+k * arr\n    maximums = maximums.+k\
    \ * arr\n    maximums = maximums.+k * arr\n    maximums = maximums.+k * arr\n\
    \    maximums = maximums.+k * arr\n    maximums = maximums.+k * arr\n    maximums\
    \ = maximums.+k * arr\n    maximums = maximums.+k * arr\n    maximums = maximums.+k\
    \ * arr\n    maximums = maximums.+k * arr\n    maximums = maximums.+k * arr\n\
    \    maximums = maximums.+k * arr\n    maximums = maximums.+k * arr\n    maximums\
    \ = maximums.+k * arr\n    maximums = maximums.+k * arr\n    maximums = maximums.+k\
    \ * arr\n    maximums = maximums.+k * arr\n    maximums = maximums.+k * arr\n\
    \    maximums = maximums.+k * arr\n    maximums = maximums.+k * arr\n    maximums\
    \ = maximums.+k * arr\n    maximums = maximums.+k * arr\n    maximums = maximums.+k\
    \ * arr\n    maximums = maximums.+k * arr\n    maximums = maximums.+k * arr\n\
    \    maximums = maximums.+k * arr\n    maximums = maximums.+k * arr\n    maximums\
    \ = maximums.+k * arr\n    maximums = maximums.+k * arr\n    maximums = maximums.+k\
    \ * arr\n    maximums = maximums.+k * arr\n    maximums = maximums.+k * arr\n\
    \    maximums = maximums.+k * arr\n    \nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpncpdxz0r.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpncpdxz0r.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpncpdxz0r.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    maximum = zeros(Int64,\
    \ k)\n    for i = 1:k\n        maximum[i] = maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpiu135ala.jl:31\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpiu135ala.jl:31\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k > length(arr)\n\
    \        throw(ArgumentError(\"k must be less than or equal to the length of arr\"\
    ))\n    end\n    maximum = arr\n    for i = k+1:length(arr)\n        maximum =\
    \ maximum(maximum(maximum, arr[i]), maximum)\n    end\n    return maximum\nend\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxb1e3_lj.jl:40\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [-3, -4, 5] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpxb1e3_lj.jl:40\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpxb1e3_lj.jl:39\ntest set: Error During Test at\
    \ /tmp/tmpxb1e3_lj.jl:41\n  Test threw exception\n  Expression: candidate([4,\
    \ -4, 4], 2) == [4, 4]\n  MethodError: objects of type Array{Int64,1} are not\
    \ callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n \
    \  [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpxb1e3_lj.jl:31\n   [2] top-level\
    \ scope at /tmp/tmpxb1e3_lj.jl:41\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpxb1e3_lj.jl:39\n  \ntest set: Error During\
    \ Test at /tmp/tmpxb1e3_lj.jl:42\n  Test threw exception\n  Expression: candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2]\n  MethodError: objects of type Array{Int64,1}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpxb1e3_lj.jl:31\n   [2] top-level\
    \ scope at /tmp/tmpxb1e3_lj.jl:42\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpxb1e3_lj.jl:39\n  \ntest set: Error During\
    \ Test at /tmp/tmpxb1e3_lj.jl:43\n  Test threw exception\n  Expression: candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  MethodError: objects of type Array{Int64,1}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpxb1e3_lj.jl:31\n   [2] top-level\
    \ scope at /tmp/tmpxb1e3_lj.jl:43\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpxb1e3_lj.jl:39\n  \ntest set: Error During\
    \ Test at /tmp/tmpxb1e3_lj.jl:44\n  Test threw exception\n  Expression: candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n  MethodError: objects of type Array{Int64,1}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpxb1e3_lj.jl:31\n   [2] top-level\
    \ scope at /tmp/tmpxb1e3_lj.jl:44\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpxb1e3_lj.jl:39\n  \ntest set: Test Failed at\
    \ /tmp/tmpxb1e3_lj.jl:45\n  Expression: candidate([5, 15, 0, 3, -13, -8, 0], 7)\
    \ == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [5, 15, 0, 3, -13, -8, 0] == [-13,\
    \ -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] top-level scope at /tmp/tmpxb1e3_lj.jl:45\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpxb1e3_lj.jl:39\ntest set: Error During Test at\
    \ /tmp/tmpxb1e3_lj.jl:46\n  Test threw exception\n  Expression: candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n  MethodError: objects of type Array{Int64,1}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpxb1e3_lj.jl:31\n   [2] top-level\
    \ scope at /tmp/tmpxb1e3_lj.jl:46\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpxb1e3_lj.jl:39\n  \ntest set: Error During\
    \ Test at /tmp/tmpxb1e3_lj.jl:47\n  Test threw exception\n  Expression: candidate([1,\
    \ 0, 5, -7], 1) == [5]\n  MethodError: objects of type Array{Int64,1} are not\
    \ callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n \
    \  [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpxb1e3_lj.jl:31\n   [2] top-level\
    \ scope at /tmp/tmpxb1e3_lj.jl:47\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpxb1e3_lj.jl:39\n  \ntest set: Test Failed at\
    \ /tmp/tmpxb1e3_lj.jl:48\n  Expression: candidate([4, -4], 2) == [-4, 4]\n   Evaluated:\
    \ [4, -4] == [-4, 4]\nStacktrace:\n [1] top-level scope at /tmp/tmpxb1e3_lj.jl:48\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpxb1e3_lj.jl:39\ntest set: Error During Test at\
    \ /tmp/tmpxb1e3_lj.jl:50\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([])\n  MethodError: objects of\
    \ type Array{Int64,1} are not callable\n  Use square brackets [] for indexing\
    \ an Array.\n  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpxb1e3_lj.jl:31\n\
    \   [2] top-level scope at /tmp/tmpxb1e3_lj.jl:50\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpxb1e3_lj.jl:39\n  \nTest Summary: | Pass  Fail\
    \  Error  Total\ntest set      |    1     3      7     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxb1e3_lj.jl:37\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k > length(arr)\n\
    \        error(\"k should be less than or equal to length(arr)\")\n    end\n \
    \   maximum = arr\n    for i = k+1:length(arr)\n        maximum = maximum(maximum(maximum,\
    \ arr[i]), maximum)\n    end\n    return maximum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2,\
    \ 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpj1ua6ecg.jl:40\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [-3, -4, 5] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpj1ua6ecg.jl:40\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpj1ua6ecg.jl:39\ntest set: Error During Test at\
    \ /tmp/tmpj1ua6ecg.jl:41\n  Test threw exception\n  Expression: candidate([4,\
    \ -4, 4], 2) == [4, 4]\n  MethodError: objects of type Array{Int64,1} are not\
    \ callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n \
    \  [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpj1ua6ecg.jl:31\n   [2] top-level\
    \ scope at /tmp/tmpj1ua6ecg.jl:41\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpj1ua6ecg.jl:39\n  \ntest set: Error During\
    \ Test at /tmp/tmpj1ua6ecg.jl:42\n  Test threw exception\n  Expression: candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2]\n  MethodError: objects of type Array{Int64,1}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpj1ua6ecg.jl:31\n   [2] top-level\
    \ scope at /tmp/tmpj1ua6ecg.jl:42\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpj1ua6ecg.jl:39\n  \ntest set: Error During\
    \ Test at /tmp/tmpj1ua6ecg.jl:43\n  Test threw exception\n  Expression: candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  MethodError: objects of type Array{Int64,1}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpj1ua6ecg.jl:31\n   [2] top-level\
    \ scope at /tmp/tmpj1ua6ecg.jl:43\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpj1ua6ecg.jl:39\n  \ntest set: Error During\
    \ Test at /tmp/tmpj1ua6ecg.jl:44\n  Test threw exception\n  Expression: candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n  MethodError: objects of type Array{Int64,1}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpj1ua6ecg.jl:31\n   [2] top-level\
    \ scope at /tmp/tmpj1ua6ecg.jl:44\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpj1ua6ecg.jl:39\n  \ntest set: Test Failed at\
    \ /tmp/tmpj1ua6ecg.jl:45\n  Expression: candidate([5, 15, 0, 3, -13, -8, 0], 7)\
    \ == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [5, 15, 0, 3, -13, -8, 0] == [-13,\
    \ -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] top-level scope at /tmp/tmpj1ua6ecg.jl:45\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpj1ua6ecg.jl:39\ntest set: Error During Test at\
    \ /tmp/tmpj1ua6ecg.jl:46\n  Test threw exception\n  Expression: candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n  MethodError: objects of type Array{Int64,1}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpj1ua6ecg.jl:31\n   [2] top-level\
    \ scope at /tmp/tmpj1ua6ecg.jl:46\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpj1ua6ecg.jl:39\n  \ntest set: Error During\
    \ Test at /tmp/tmpj1ua6ecg.jl:47\n  Test threw exception\n  Expression: candidate([1,\
    \ 0, 5, -7], 1) == [5]\n  MethodError: objects of type Array{Int64,1} are not\
    \ callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n \
    \  [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpj1ua6ecg.jl:31\n   [2] top-level\
    \ scope at /tmp/tmpj1ua6ecg.jl:47\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpj1ua6ecg.jl:39\n  \ntest set: Test Failed at\
    \ /tmp/tmpj1ua6ecg.jl:48\n  Expression: candidate([4, -4], 2) == [-4, 4]\n   Evaluated:\
    \ [4, -4] == [-4, 4]\nStacktrace:\n [1] top-level scope at /tmp/tmpj1ua6ecg.jl:48\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpj1ua6ecg.jl:39\ntest set: Error During Test at\
    \ /tmp/tmpj1ua6ecg.jl:50\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([])\n  MethodError: objects of\
    \ type Array{Int64,1} are not callable\n  Use square brackets [] for indexing\
    \ an Array.\n  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpj1ua6ecg.jl:31\n\
    \   [2] top-level scope at /tmp/tmpj1ua6ecg.jl:50\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpj1ua6ecg.jl:39\n  \nTest Summary: | Pass  Fail\
    \  Error  Total\ntest set      |    1     3      7     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpj1ua6ecg.jl:37\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k > length(arr)\
    \ \n        error(\"k should be less than or equal to length(arr)\") \n    else\
    \ \n        maximum = arr \n        for i in 1:k-1 \n            maximum = maximum(maximum(maximum,\
    \ arr[i]), arr[i+1])\n        end\n    end\n    return maximum\nend\n\"\"\"\n\
    \    Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n    of length k with the minimum k numbers in arr.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2,\
    \ 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmplt6d79qh.jl:36\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmplt6d79qh.jl:36\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    maximum = arr\n \
    \   for i = 1:k\n        maximum = maximum(maximum(maximum, arr), arr)\n    end\n\
    \    return maximum\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp5lnuyqgu.jl:37\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  MethodError: objects\
    \ of type Array{Int64,1} are not callable\n  Use square brackets [] for indexing\
    \ an Array.\n  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp5lnuyqgu.jl:28\n\
    \   [2] top-level scope at /tmp/tmp5lnuyqgu.jl:37\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp5lnuyqgu.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmp5lnuyqgu.jl:38\n  Test threw exception\n  Expression: candidate([4,\
    \ -4, 4], 2) == [4, 4]\n  MethodError: objects of type Array{Int64,1} are not\
    \ callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n \
    \  [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp5lnuyqgu.jl:28\n   [2] top-level\
    \ scope at /tmp/tmp5lnuyqgu.jl:38\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp5lnuyqgu.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmp5lnuyqgu.jl:39\n  Test threw exception\n  Expression: candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2]\n  MethodError: objects of type Array{Int64,1}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp5lnuyqgu.jl:28\n   [2] top-level\
    \ scope at /tmp/tmp5lnuyqgu.jl:39\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp5lnuyqgu.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmp5lnuyqgu.jl:40\n  Test threw exception\n  Expression: candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  MethodError: objects of type Array{Int64,1}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp5lnuyqgu.jl:28\n   [2] top-level\
    \ scope at /tmp/tmp5lnuyqgu.jl:40\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp5lnuyqgu.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmp5lnuyqgu.jl:41\n  Test threw exception\n  Expression: candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n  MethodError: objects of type Array{Int64,1}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp5lnuyqgu.jl:28\n   [2] top-level\
    \ scope at /tmp/tmp5lnuyqgu.jl:41\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp5lnuyqgu.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmp5lnuyqgu.jl:42\n  Test threw exception\n  Expression: candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n  MethodError: objects\
    \ of type Array{Int64,1} are not callable\n  Use square brackets [] for indexing\
    \ an Array.\n  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp5lnuyqgu.jl:28\n\
    \   [2] top-level scope at /tmp/tmp5lnuyqgu.jl:42\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp5lnuyqgu.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmp5lnuyqgu.jl:43\n  Test threw exception\n  Expression: candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n  MethodError: objects of type Array{Int64,1}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp5lnuyqgu.jl:28\n   [2] top-level\
    \ scope at /tmp/tmp5lnuyqgu.jl:43\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp5lnuyqgu.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmp5lnuyqgu.jl:44\n  Test threw exception\n  Expression: candidate([1,\
    \ 0, 5, -7], 1) == [5]\n  MethodError: objects of type Array{Int64,1} are not\
    \ callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n \
    \  [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp5lnuyqgu.jl:28\n   [2] top-level\
    \ scope at /tmp/tmp5lnuyqgu.jl:44\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp5lnuyqgu.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmp5lnuyqgu.jl:45\n  Test threw exception\n  Expression: candidate([4,\
    \ -4], 2) == [-4, 4]\n  MethodError: objects of type Array{Int64,1} are not callable\n\
    \  Use square brackets [] for indexing an Array.\n  Stacktrace:\n   [1] maximum(::Array{Int64,1},\
    \ ::Int64) at /tmp/tmp5lnuyqgu.jl:28\n   [2] top-level scope at /tmp/tmp5lnuyqgu.jl:45\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp5lnuyqgu.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmp5lnuyqgu.jl:46\n  Test threw exception\n  Expression: candidate([-10,\
    \ 10], 2) == [-10, 10]\n  MethodError: objects of type Array{Int64,1} are not\
    \ callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n \
    \  [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmp5lnuyqgu.jl:28\n   [2] top-level\
    \ scope at /tmp/tmp5lnuyqgu.jl:46\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp5lnuyqgu.jl:36\n  \ntest set: Test Failed at\
    \ /tmp/tmp5lnuyqgu.jl:47\n  Expression: candidate([1, 2, 3, -23, 243, -400, 0],\
    \ 0) == Vector{Int64}([])\n   Evaluated: [1, 2, 3, -23, 243, -400, 0] == Int64[]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp5lnuyqgu.jl:47\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp5lnuyqgu.jl:36\nTest Summary: | Fail  Error \
    \ Total\ntest set      |    1     10     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 1 failed, 10 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5lnuyqgu.jl:34\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    maximum = arr\n \
    \   for i = 1:k\n        maximum = maximum(maximum(maximum, arr), arr)\n    end\n\
    \    maximum\nend\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 3)\n</cell>\n\
    <text>\n13. \u6700\u5C0F\u503C\nGiven an array arr of integers, find the minimum\
    \ value in arr. \nIf there are more than one minimum values, return the smallest\
    \ one.\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpfzsceu6b.jl:32\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpfzsceu6b.jl:32\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    maximum = arr\n \
    \   for i = 1:k\n        maximum = maximum(maximum(maximum, arr), maximum)\n \
    \   end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\nmaximum(arr,\
    \ 3)\n</cell>\n<text>\n4.3 Find Minimum\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmprzklevxt.jl:32\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmprzklevxt.jl:32\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k == 0 \n    \
    \    return arr \n    else \n        maximum = maximum(maximum(arr, k-1), k) \n\
    \        maximum[end] = maximum(maximum(arr, k-1), k)[end] \n        return maximum\
    \ \nend\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 3)\n</cell>\n<text>\n\
    maximum\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmfhp47pr.jl:33\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpmfhp47pr.jl:33\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    maximum = arr\n \
    \   for i = 1:k\n        maximum = maximum(maximum(maximum, arr), maximum)\n \
    \   end\n    return maximum\nend\n</cell>\n<code language=julia-1.3>\nmaximum(arr,\
    \ k)\n</cell>\n<text>\nQuestion 4\nWrite a function that returns the minimum number\
    \ in a given array.\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t\
    @test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphwnl2s0p.jl:32\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmphwnl2s0p.jl:32\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    maximums = zeros(Int,\
    \ k)\n    for i = 1:length(arr)\n        maximums[i] = maximum(maximum(maximums,\
    \ arr[i:]), arr[i:])\n    end\n    return maximums\nend\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 3)\n</cell>\n<text>\n6.3 Find all duplicates in an array\nusing Test\n\
    \n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) ==\
    \ [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"i:\" range expression\
    \ \nStacktrace:\n [1] top-level scope at /tmp/tmpunbebdxt.jl:28\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpunbebdxt.jl:28\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k == 0 \n    \
    \    return arr\n    \n    maximum = maximum(arr[k+1:end], k)\n    maximum = maximum(maximum(maximum,\
    \ arr[k]), k)\n    return maximum\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpkove4xi5.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpkove4xi5.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpkove4xi5.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    maximum = arr\n \
    \   for i = k+1:length(arr)\n        maximum[i] = maximum(maximum, arr[i])\n \
    \   end\n    maximum\nend\n</cell>\n<code language=julia-1.5>\nmaximum(arr, k)\n\
    </cell>\n<text>\n4.3 Find Minimum\nusing Test\n\n@testset begin\n\ncandidate =\
    \ maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp45rof0w3.jl:32\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp45rof0w3.jl:32\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    maximum = arr\n \
    \   for i = 1:k\n        maximum = maximum(maximum(maximum, arr), arr)\n    end\n\
    \    return maximum\nend\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 3)\n\
    </cell>\n<text>\nmaximum\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpi0zpxdwd.jl:32\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpi0zpxdwd.jl:32\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    maximum = arr\n \
    \   for i = k+1:length(arr)\n        maximum[i] = maximum(maximum, arr[i])\n \
    \   end\n    return maximum\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqip97_5d.jl:37\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [-3, -4, 5] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpqip97_5d.jl:37\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpqip97_5d.jl:36\ntest set: Error During Test at\
    \ /tmp/tmpqip97_5d.jl:38\n  Test threw exception\n  Expression: candidate([4,\
    \ -4, 4], 2) == [4, 4]\n  MethodError: objects of type Array{Int64,1} are not\
    \ callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n \
    \  [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpqip97_5d.jl:28\n   [2] top-level\
    \ scope at /tmp/tmpqip97_5d.jl:38\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpqip97_5d.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmpqip97_5d.jl:39\n  Test threw exception\n  Expression: candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2]\n  MethodError: objects of type Array{Int64,1}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpqip97_5d.jl:28\n   [2] top-level\
    \ scope at /tmp/tmpqip97_5d.jl:39\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpqip97_5d.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmpqip97_5d.jl:40\n  Test threw exception\n  Expression: candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  MethodError: objects of type Array{Int64,1}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpqip97_5d.jl:28\n   [2] top-level\
    \ scope at /tmp/tmpqip97_5d.jl:40\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpqip97_5d.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmpqip97_5d.jl:41\n  Test threw exception\n  Expression: candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n  MethodError: objects of type Array{Int64,1}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpqip97_5d.jl:28\n   [2] top-level\
    \ scope at /tmp/tmpqip97_5d.jl:41\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpqip97_5d.jl:36\n  \ntest set: Test Failed at\
    \ /tmp/tmpqip97_5d.jl:42\n  Expression: candidate([5, 15, 0, 3, -13, -8, 0], 7)\
    \ == [-13, -8, 0, 0, 3, 5, 15]\n   Evaluated: [5, 15, 0, 3, -13, -8, 0] == [-13,\
    \ -8, 0, 0, 3, 5, 15]\nStacktrace:\n [1] top-level scope at /tmp/tmpqip97_5d.jl:42\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpqip97_5d.jl:36\ntest set: Error During Test at\
    \ /tmp/tmpqip97_5d.jl:43\n  Test threw exception\n  Expression: candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n  MethodError: objects of type Array{Int64,1}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpqip97_5d.jl:28\n   [2] top-level\
    \ scope at /tmp/tmpqip97_5d.jl:43\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpqip97_5d.jl:36\n  \ntest set: Error During\
    \ Test at /tmp/tmpqip97_5d.jl:44\n  Test threw exception\n  Expression: candidate([1,\
    \ 0, 5, -7], 1) == [5]\n  MethodError: objects of type Array{Int64,1} are not\
    \ callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n \
    \  [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpqip97_5d.jl:28\n   [2] top-level\
    \ scope at /tmp/tmpqip97_5d.jl:44\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpqip97_5d.jl:36\n  \ntest set: Test Failed at\
    \ /tmp/tmpqip97_5d.jl:45\n  Expression: candidate([4, -4], 2) == [-4, 4]\n   Evaluated:\
    \ [4, -4] == [-4, 4]\nStacktrace:\n [1] top-level scope at /tmp/tmpqip97_5d.jl:45\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpqip97_5d.jl:36\ntest set: Error During Test at\
    \ /tmp/tmpqip97_5d.jl:47\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([])\n  MethodError: objects of\
    \ type Array{Int64,1} are not callable\n  Use square brackets [] for indexing\
    \ an Array.\n  Stacktrace:\n   [1] maximum(::Array{Int64,1}, ::Int64) at /tmp/tmpqip97_5d.jl:28\n\
    \   [2] top-level scope at /tmp/tmpqip97_5d.jl:47\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpqip97_5d.jl:36\n  \nTest Summary: | Pass  Fail\
    \  Error  Total\ntest set      |    1     3      7     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqip97_5d.jl:34\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k == 0 \n    \
    \    return arr \n    else \n        maximum = maximum(maximum(arr, k-1), k) \n\
    \        maximum[end] = maximum(arr[end], k) \n        return maximum \nend\n\
    </code>\n<|/ a tags=sorting,algorithm,arrays,julia |>\n<| a tags=sorting,algorithm,arrays,julia\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp51iw6fot.jl:33\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp51iw6fot.jl:33\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    maximums = Vector{Int64}()\n\
    \    maximums = maximums[1:k] .+ maximums[k]\n    return maximums\nend\n</cell>\n\
    <code language=julia-1.0>\nmaximum(arr, 3)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the index of the maximum number in arr when sorted in\
    \ descending order.\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t\
    @test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpczonr_sp.jl:30\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpczonr_sp.jl:30\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    maximum = arr\n \
    \   for i = k+1:length(arr)\n        maximum = maximum(maximum(maximum, arr[i]),\
    \ arr[i+1])\n    end\n    maximum\nend\n</cell>\n<code language=julia-1.5>\nmaximum(arr,\
    \ 3)\n</cell>\n<text>\nmaximum_by function\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpo7fssqab.jl:32\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpo7fssqab.jl:32\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    maximum = arr\n \
    \   for i = k+1:length(arr)\n        maximum = maximum(maximum(maximum, arr[i]),\
    \ maximum)\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 3)\n</cell>\n<text>\nProblem 3\nGiven an array arr of integers, return\
    \ a new array with the largest number in the array \n    repeated k times.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5],\
    \ 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpeelk_6o7.jl:32\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpeelk_6o7.jl:32\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\
    \n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4,\
    \ 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\
    \        Output: [2]\n\n    Note:\n        1. The length of the array will be\
    \ in the range of [1, 1000].\n        2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction\
    \ maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    maximum = arr\n \
    \   for i = 1:k\n        maximum = maximum(maximum(maximum, arr), arr)\n    end\n\
    \    maximum\nend\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 3)\n</cell>\n\
    <text>\n4. Find all occurrences of an element in a sorted array\nusing Test\n\n\
    @testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4,\
    \ -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpkja8wbs4.jl:32\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpkja8wbs4.jl:32\n"
  exit_code: 1
  status: Exception
