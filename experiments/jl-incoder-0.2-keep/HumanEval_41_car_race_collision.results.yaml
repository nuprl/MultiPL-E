name: HumanEval_41_car_race_collision
language: julia
results:
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"\"\"\n    Imagine a\
    \ road that's a perfectly straight infinitely long line.\n    n cars are driving\
    \ left to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\nusing Test\n\n\
    @testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\
    \t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph75x3eav.jl:1\nin expression starting at /tmp/tmph75x3eav.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collide = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_race_collision_test(i,j)\n\
    \                collide = collide + 1\n            end\n        end\n    end\n\
    \    return collide\nend\n\"\"\"\n    car_race_collision_test(i,j)\n    returns\
    \ true if the cars i and j collide\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmp5ak75eyq.jl:23\nin expression starting at /tmp/tmp5ak75eyq.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j) == true\n\
    \                collisions += 1\n            end\n        end\n    end\n    return\
    \ collisions\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl2r8ko2s.jl:23\nin expression starting at\
    \ /tmp/tmpl2r8ko2s.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_race_collision_helper(i,\
    \ j) == true\n                collisions += 1\n            end\n        end\n\
    \    end\n    return collisions\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpt9gnlmn2.jl:28\n  Test threw exception\n\
    \  Expression: candidate(2) == 4\n  UndefVarError: car_race_collision_helper not\
    \ defined\n  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpt9gnlmn2.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpt9gnlmn2.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpt9gnlmn2.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpt9gnlmn2.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(3) == 9\n  UndefVarError: car_race_collision_helper not defined\n\
    \  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpt9gnlmn2.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpt9gnlmn2.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpt9gnlmn2.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpt9gnlmn2.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(4) == 16\n  UndefVarError: car_race_collision_helper not defined\n\
    \  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpt9gnlmn2.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpt9gnlmn2.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpt9gnlmn2.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpt9gnlmn2.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(8) == 64\n  UndefVarError: car_race_collision_helper not defined\n\
    \  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpt9gnlmn2.jl:16\n\
    \   [2] macro expansio"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpt9gnlmn2.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j) == true\n\
    \                collisions += 1\n            end\n        end\n    end\n    return\
    \ collisions\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1igobfp8.jl:23\nin expression starting at\
    \ /tmp/tmp1igobfp8.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = 1:n\n            if i != j && car_collision(i, j)\n\
    \                collisions += 1\n            end\n        end\n    end\n    return\
    \ collisions\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmps9od3l9n.jl:28\n  Test threw exception\n\
    \  Expression: candidate(2) == 4\n  UndefVarError: car_collision not defined\n\
    \  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmps9od3l9n.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmps9od3l9n.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmps9od3l9n.jl:27\ntest set:\
    \ Error During Test at /tmp/tmps9od3l9n.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(3) == 9\n  UndefVarError: car_collision not defined\n  Stacktrace:\n\
    \   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmps9od3l9n.jl:16\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmps9od3l9n.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmps9od3l9n.jl:27\ntest set:\
    \ Error During Test at /tmp/tmps9od3l9n.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(4) == 16\n  UndefVarError: car_collision not defined\n  Stacktrace:\n\
    \   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmps9od3l9n.jl:16\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmps9od3l9n.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmps9od3l9n.jl:27\ntest set:\
    \ Error During Test at /tmp/tmps9od3l9n.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(8) == 64\n  UndefVarError: car_collision not defined\n  Stacktrace:\n\
    \   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmps9od3l9n.jl:16\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmps9od3l9n.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j) == true\n\
    \                collisions += 1\n            end\n        end\n    end\n    return\
    \ collisions\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf_j2uj9f.jl:23\nin expression starting at\
    \ /tmp/tmpf_j2uj9f.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = 1:n\n            if i != j\n                if abs(car_speed(i,\
    \ j)) < car_speed(i, j+1)\n                    collisions += 1\n             \
    \   end\n            end\n        end\n    end\n    return collisions\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5y5ho7_3.jl:25\nin expression starting at\
    \ /tmp/tmp5y5ho7_3.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_race_collision_helper(i,\
    \ j) == true\n                collisions += 1\n            end\n        end\n\
    \    end\n    return collisions\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp3b570ji6.jl:28\n  Test threw exception\n\
    \  Expression: candidate(2) == 4\n  UndefVarError: car_race_collision_helper not\
    \ defined\n  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmp3b570ji6.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3b570ji6.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3b570ji6.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp3b570ji6.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(3) == 9\n  UndefVarError: car_race_collision_helper not defined\n\
    \  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmp3b570ji6.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3b570ji6.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3b570ji6.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp3b570ji6.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(4) == 16\n  UndefVarError: car_race_collision_helper not defined\n\
    \  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmp3b570ji6.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3b570ji6.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3b570ji6.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp3b570ji6.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(8) == 64\n  UndefVarError: car_race_collision_helper not defined\n\
    \  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmp3b570ji6.jl:16\n\
    \   [2] macro expansio"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3b570ji6.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j) == true\n\
    \                collisions = collisions + 1\n            end\n        end\n \
    \   end\n    return collisions\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjjdbquvl.jl:23\nin expression starting at\
    \ /tmp/tmpjjdbquvl.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j) == true\n\
    \                collisions += 1\n            end\n        end\n    end\n    return\
    \ collisions\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5bq0evus.jl:23\nin expression starting at\
    \ /tmp/tmp5bq0evus.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_race_collision_helper(i,\
    \ j) == true\n                collisions += 1\n            end\n        end\n\
    \    end\n    return collisions\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpbhj_5byo.jl:28\n  Test threw exception\n\
    \  Expression: candidate(2) == 4\n  UndefVarError: car_race_collision_helper not\
    \ defined\n  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpbhj_5byo.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbhj_5byo.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbhj_5byo.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpbhj_5byo.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(3) == 9\n  UndefVarError: car_race_collision_helper not defined\n\
    \  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpbhj_5byo.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbhj_5byo.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbhj_5byo.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpbhj_5byo.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(4) == 16\n  UndefVarError: car_race_collision_helper not defined\n\
    \  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpbhj_5byo.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbhj_5byo.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbhj_5byo.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpbhj_5byo.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(8) == 64\n  UndefVarError: car_race_collision_helper not defined\n\
    \  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpbhj_5byo.jl:16\n\
    \   [2] macro expansio"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbhj_5byo.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collide::Int64 = 0\n\
    \    for i = 1:n\n        for j = i+1:n\n            if car_collision(i, j)\n\
    \                collide += 1\n            end\n        end\n    end\n    return\
    \ collide\nend\n</cell>\n<code language=julia-1.1>\nusing Test\n\n@testset begin\n\
    \ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnn38mwib.jl:23\nin expression starting at\
    \ /tmp/tmpnn38mwib.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"\"\"\n    Imagine a\
    \ road that's a perfectly straight infinitely long line.\n    n cars are driving\
    \ left to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\nusing Test\n\n\
    @testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\
    \t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7xot6rj9.jl:1\nin expression starting at /tmp/tmp7xot6rj9.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j)\n       \
    \         collisions += 1\n            end\n        end\n    end\n    return collisions\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp0letvkkd.jl:28\n  Test threw exception\n\
    \  Expression: candidate(2) == 4\n  UndefVarError: car_collision not defined\n\
    \  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmp0letvkkd.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0letvkkd.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0letvkkd.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp0letvkkd.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(3) == 9\n  UndefVarError: car_collision not defined\n  Stacktrace:\n\
    \   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmp0letvkkd.jl:16\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0letvkkd.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0letvkkd.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp0letvkkd.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(4) == 16\n  UndefVarError: car_collision not defined\n  Stacktrace:\n\
    \   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmp0letvkkd.jl:16\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0letvkkd.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0letvkkd.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp0letvkkd.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(8) == 64\n  UndefVarError: car_collision not defined\n  Stacktrace:\n\
    \   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmp0letvkkd.jl:16\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0letvkkd.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j) \n      \
    \          collisions += 1\n            end\n        end\n    end\n    return\
    \ collisions\nend\n</cell>\n<code language=julia-1.0>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw4d716_h.jl:23\nin expression starting at\
    \ /tmp/tmpw4d716_h.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collide = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j) == true\n\
    \                collide = collide + 1\n            end\n        end\n    end\n\
    \    return collide\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpljltm3xn.jl:23\nin expression starting at\
    \ /tmp/tmpljltm3xn.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collide = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i,j)\n        \
    \        collide = collide + 1\n            end\n        end\n    end\n    return\
    \ collide\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwtuulx3z.jl:23\nin expression starting at\
    \ /tmp/tmpwtuulx3z.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j) \n      \
    \          collisions += 1\n            end\n        end\n    end\n    return\
    \ collisions\nend\n</cell>\n<code language=julia-1.5>\ncar_race_collision(10)\n\
    </cell>\n<text>\nExercise: Write a function that calculates the number of cars\
    \ that collide with each other in a race.  (The function should take two integer\
    \ arguments: the number of cars in the first race and the number of cars in the\
    \ second race.)\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1lx_6bpf.jl:23\nin expression starting at\
    \ /tmp/tmp1lx_6bpf.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(j, i)\n       \
    \         collisions += 1\n            end\n        end\n    end\n    return collisions\n\
    end\n</cell>\n<code language=julia-1.4>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe6ov2yuz.jl:23\nin expression starting at\
    \ /tmp/tmpe6ov2yuz.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"\"\"\n    Imagine a\
    \ road that's a perfectly straight infinitely long line.\n    n cars are driving\
    \ left to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\nusing Test\n\n\
    @testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\
    \t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4wr19ccx.jl:1\nin expression starting at /tmp/tmp4wr19ccx.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"\"\"\n    Imagine a\
    \ road that's a perfectly straight infinitely long line.\n    n cars are driving\
    \ left to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\nusing Test\n\n\
    @testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\
    \t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph5t2iwij.jl:1\nin expression starting at /tmp/tmph5t2iwij.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"\"\"\n    Imagine a\
    \ road that's a perfectly straight infinitely long line.\n    n cars are driving\
    \ left to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\nusing Test\n\n\
    @testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\
    \t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk9wl6jqc.jl:1\nin expression starting at /tmp/tmpk9wl6jqc.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_race_collision_check(i,j)\
    \ == true\n                collisions = collisions + 1\n            end\n    \
    \    end\n    end\n    return collisions\nend\n\"\"\"\n    car_race_collision_check(i,j)\
    \ checks to see if the cars at indices i and j collide.\n    car_race_collision_check(i,j)\
    \ returns true if the cars at indices i and j collide.\n    car_race_collision_check(i,j)\
    \ returns false if the cars at indices i and j do not collide.\n    car_race_collision_check(i,j)\
    \ returns false if cars at indices i and j do not collide.\n    car_race_collision_check(i,j)\
    \ returns false if cars at indices i and j do not collide.\n    car_race_collision_check(i,j)\
    \ returns false if cars at indices i and j do not collide.\n    car_race_collision_check(i,j)\
    \ returns false if cars at indices i and j do not collide.\n    car_race_collision_check(i,j)\
    \ returns false if cars at indices i and j do not collide.\n    car_race_collision_check(i,j)\
    \ returns false if cars at indices i and j do not collide.\n    car_race_collision_check(i,j)\
    \ returns false if cars at indices i and j do not collide.\n    car_race_collision_check(i,j)\
    \ returns false if cars at indices i and j do not collide.\n    car_race_collision_check(i,j)\
    \ returns false if cars at indices i and j do not collide.\n    car_race_collision_check(i,j)\
    \ returns false if cars at indices i and j do not collide.\n    car_race_collision_check(i,j)\
    \ returns false if cars at indices i and j do not collide.\n    car_race_collision_check(i,j)\
    \ returns false if cars at indices i and j do not collide.\n    car_race_collision_check(i,j)\
    \ returns false if cars at indices i and j do not collide.\n    car_race_collision_check(i,j)\
    \ returns false if cars at indices i and j do not collide.\n    car_race_collision_check(i,j)\
    \ returns false if cars at indices i and j do not collide.\n    car_race_collision_check(i,j)\
    \ returns false if cars at indices i and j do not collide.\n    car_race_collision_check(i,j)\
    \ returns false if cars at indices i and j do not collide.\n    car_\nusing Test\n\
    \n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\
    \t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe2vsdkzq.jl:23\nin expression starting at\
    \ /tmp/tmpe2vsdkzq.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j) == true\n\
    \                collisions += 1\n            end\n        end\n    end\n    return\
    \ collisions\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9ips0b5q.jl:23\nin expression starting at\
    \ /tmp/tmp9ips0b5q.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_race_collision_helper(i,\
    \ j) == true\n                collisions += 1\n            end\n        end\n\
    \    end\n    return collisions\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp31d6xirv.jl:28\n  Test threw exception\n\
    \  Expression: candidate(2) == 4\n  UndefVarError: car_race_collision_helper not\
    \ defined\n  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmp31d6xirv.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp31d6xirv.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp31d6xirv.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp31d6xirv.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(3) == 9\n  UndefVarError: car_race_collision_helper not defined\n\
    \  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmp31d6xirv.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp31d6xirv.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp31d6xirv.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp31d6xirv.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(4) == 16\n  UndefVarError: car_race_collision_helper not defined\n\
    \  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmp31d6xirv.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp31d6xirv.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp31d6xirv.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp31d6xirv.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(8) == 64\n  UndefVarError: car_race_collision_helper not defined\n\
    \  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmp31d6xirv.jl:16\n\
    \   [2] macro expansio"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp31d6xirv.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j)\n       \
    \         collisions += 1\n            end\n        end\n    end\n    return collisions\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpg688gq39.jl:28\n  Test threw exception\n\
    \  Expression: candidate(2) == 4\n  UndefVarError: car_collision not defined\n\
    \  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpg688gq39.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpg688gq39.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpg688gq39.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpg688gq39.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(3) == 9\n  UndefVarError: car_collision not defined\n  Stacktrace:\n\
    \   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpg688gq39.jl:16\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpg688gq39.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpg688gq39.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpg688gq39.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(4) == 16\n  UndefVarError: car_collision not defined\n  Stacktrace:\n\
    \   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpg688gq39.jl:16\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpg688gq39.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpg688gq39.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpg688gq39.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(8) == 64\n  UndefVarError: car_collision not defined\n  Stacktrace:\n\
    \   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpg688gq39.jl:16\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpg688gq39.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = 1:n\n            if i != j\n                if abs(car_position(i,\
    \ 1) - car_position(j, 1)) < car_speed\n                    collisions += 1\n\
    \                end\n            end\n        end\n    end\n    return collisions\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg1f97wfh.jl:25\nin expression starting at\
    \ /tmp/tmpg1f97wfh.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collides = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j) == true\n\
    \                collides += 1\n            end\n        end\n    end\n    return\
    \ collides\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0xoqe64y.jl:23\nin expression starting at\
    \ /tmp/tmp0xoqe64y.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j)\n       \
    \         collisions += 1\n            end\n        end\n    end\n    return collisions\n\
    end\n</cell>\n<code language=julia-1.0>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9u39ckfc.jl:23\nin expression starting at\
    \ /tmp/tmp9u39ckfc.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collide = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j)\n       \
    \         collide += 1\n            end\n        end\n    end\n    return collide\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3a_nhry_.jl:23\nin expression starting at\
    \ /tmp/tmp3a_nhry_.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j) == true\n\
    \                collisions += 1\n            end\n        end\n    end\n    return\
    \ collisions\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppf1ef_o9.jl:23\nin expression starting at\
    \ /tmp/tmppf1ef_o9.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"\"\"\n    Imagine a\
    \ road that's a perfectly straight infinitely long line.\n    n cars are driving\
    \ left to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\nusing Test\n\n\
    @testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\
    \t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuohcbkdz.jl:1\nin expression starting at /tmp/tmpuohcbkdz.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = 1:n\n            if i != j\n                if abs(car_distance(i,j))\
    \ < car_distance(i,j+1)\n                    collisions += 1\n               \
    \ end\n            end\n        end\n    end\n    return collisions\nend\n</cell>\n\
    <code language=julia-1.0>\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp08kb61hj.jl:25\nin expression starting at\
    \ /tmp/tmp08kb61hj.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i) && car_collision(j)\n\
    \                collisions += 1\n            end\n        end\n    end\n    return\
    \ collisions\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg321y8xo.jl:23\nin expression starting at\
    \ /tmp/tmpg321y8xo.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_race_collision_helper(i,\
    \ j) == true\n                collisions += 1\n            end\n        end\n\
    \    end\n    return collisions\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp4hibk1pk.jl:28\n  Test threw exception\n\
    \  Expression: candidate(2) == 4\n  UndefVarError: car_race_collision_helper not\
    \ defined\n  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmp4hibk1pk.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4hibk1pk.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4hibk1pk.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp4hibk1pk.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(3) == 9\n  UndefVarError: car_race_collision_helper not defined\n\
    \  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmp4hibk1pk.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4hibk1pk.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4hibk1pk.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp4hibk1pk.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(4) == 16\n  UndefVarError: car_race_collision_helper not defined\n\
    \  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmp4hibk1pk.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4hibk1pk.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4hibk1pk.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp4hibk1pk.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(8) == 64\n  UndefVarError: car_race_collision_helper not defined\n\
    \  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmp4hibk1pk.jl:16\n\
    \   [2] macro expansio"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4hibk1pk.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i) && car_collision(j)\n\
    \                collisions += 1\n            end\n        end\n    end\n    return\
    \ collisions\nend\n</cell>\n<code language=julia-1.1>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5ixykv3a.jl:23\nin expression starting at\
    \ /tmp/tmp5ixykv3a.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collides = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j)\n       \
    \         collides += 1\n            end\n        end\n    end\n    return collides\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprjwq4krp.jl:23\nin expression starting at\
    \ /tmp/tmprjwq4krp.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j)\n       \
    \         collisions += 1\n            end\n        end\n    end\n    return collisions\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnp0ypu0y.jl:23\nin expression starting at\
    \ /tmp/tmpnp0ypu0y.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j) == true\n\
    \                collisions += 1\n            end\n        end\n    end\n    return\
    \ collisions\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpypc4sdd2.jl:28\n  Test threw exception\n\
    \  Expression: candidate(2) == 4\n  UndefVarError: car_collision not defined\n\
    \  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpypc4sdd2.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpypc4sdd2.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpypc4sdd2.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpypc4sdd2.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(3) == 9\n  UndefVarError: car_collision not defined\n  Stacktrace:\n\
    \   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpypc4sdd2.jl:16\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpypc4sdd2.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpypc4sdd2.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpypc4sdd2.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(4) == 16\n  UndefVarError: car_collision not defined\n  Stacktrace:\n\
    \   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpypc4sdd2.jl:16\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpypc4sdd2.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpypc4sdd2.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpypc4sdd2.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(8) == 64\n  UndefVarError: car_collision not defined\n  Stacktrace:\n\
    \   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpypc4sdd2.jl:16\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpypc4sdd2.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collide = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i) && car_collision(j)\n\
    \                collide += 1\n            end\n        end\n    end\n    return\
    \ collide\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp4ycmxjx5.jl:28\n  Test threw exception\n\
    \  Expression: candidate(2) == 4\n  UndefVarError: car_collision not defined\n\
    \  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmp4ycmxjx5.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4ycmxjx5.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4ycmxjx5.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp4ycmxjx5.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(3) == 9\n  UndefVarError: car_collision not defined\n  Stacktrace:\n\
    \   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmp4ycmxjx5.jl:16\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4ycmxjx5.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4ycmxjx5.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp4ycmxjx5.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(4) == 16\n  UndefVarError: car_collision not defined\n  Stacktrace:\n\
    \   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmp4ycmxjx5.jl:16\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4ycmxjx5.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4ycmxjx5.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp4ycmxjx5.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(8) == 64\n  UndefVarError: car_collision not defined\n  Stacktrace:\n\
    \   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmp4ycmxjx5.jl:16\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4ycmxjx5.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i) && car_collision(j)\n\
    \                collisions += 1\n            end\n        end\n    end\n    return\
    \ collisions\nend\n</cell>\n<code language=julia-1.5>\ncar_race_collision(10)\n\
    </cell>\n<text>\nExercise: Write a function that computes the number of collisions\
    \ given any two cars.\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp00_latiw.jl:23\nin expression starting at\
    \ /tmp/tmp00_latiw.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"\"\"\n    Imagine a\
    \ road that's a perfectly straight infinitely long line.\n    n cars are driving\
    \ left to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\nusing Test\n\n\
    @testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\
    \t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbldde9ph.jl:1\nin expression starting at /tmp/tmpbldde9ph.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_race_collision_helper(i,\
    \ j) == true\n                collisions += 1\n            end\n        end\n\
    \    end\n    return collisions\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpl6nky3jv.jl:28\n  Test threw exception\n\
    \  Expression: candidate(2) == 4\n  UndefVarError: car_race_collision_helper not\
    \ defined\n  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpl6nky3jv.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpl6nky3jv.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpl6nky3jv.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpl6nky3jv.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(3) == 9\n  UndefVarError: car_race_collision_helper not defined\n\
    \  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpl6nky3jv.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpl6nky3jv.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpl6nky3jv.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpl6nky3jv.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(4) == 16\n  UndefVarError: car_race_collision_helper not defined\n\
    \  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpl6nky3jv.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpl6nky3jv.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpl6nky3jv.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpl6nky3jv.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(8) == 64\n  UndefVarError: car_race_collision_helper not defined\n\
    \  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpl6nky3jv.jl:16\n\
    \   [2] macro expansio"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpl6nky3jv.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collides = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i) && car_collision(j)\n\
    \                collides += 1\n            end\n        end\n    end\n    return\
    \ collides\nend\n</cell>\n<code language=julia-1.0>\nusing Test\n\n@testset begin\n\
    \ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8t6_e2eb.jl:23\nin expression starting at\
    \ /tmp/tmp8t6_e2eb.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collides = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j)\n       \
    \         collides += 1\n            end\n        end\n    end\n    return collides\n\
    end\n</cell>\n<code language=julia-1.3>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyx6fuh_r.jl:23\nin expression starting at\
    \ /tmp/tmpyx6fuh_r.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_race_collision_helper(i,\
    \ j) == true\n                collisions += 1\n            end\n        end\n\
    \    end\n    return collisions\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpnj_475u_.jl:28\n  Test threw exception\n\
    \  Expression: candidate(2) == 4\n  UndefVarError: car_race_collision_helper not\
    \ defined\n  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpnj_475u_.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnj_475u_.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnj_475u_.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpnj_475u_.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(3) == 9\n  UndefVarError: car_race_collision_helper not defined\n\
    \  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpnj_475u_.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnj_475u_.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnj_475u_.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpnj_475u_.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(4) == 16\n  UndefVarError: car_race_collision_helper not defined\n\
    \  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpnj_475u_.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnj_475u_.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnj_475u_.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpnj_475u_.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(8) == 64\n  UndefVarError: car_race_collision_helper not defined\n\
    \  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpnj_475u_.jl:16\n\
    \   [2] macro expansio"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnj_475u_.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j)\n       \
    \         collisions += 1\n            end\n        end\n    end\n    return collisions\n\
    end\n</cell>\n<code language=julia-1.5>\ncar_race_collision(10)\n</cell>\n<text>\n\
    Exercise\nWrite a function that computes the number of collisions given any two\
    \ cars.\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp71fq0nj.jl:23\nin expression starting at\
    \ /tmp/tmpp71fq0nj.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i) && car_collision(j)\n\
    \                collisions += 1\n            end\n        end\n    end\n    return\
    \ collisions\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo6kh_od8.jl:23\nin expression starting at\
    \ /tmp/tmpo6kh_od8.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j) == true\n\
    \                collisions += 1\n            end\n        end\n    end\n    return\
    \ collisions\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnp_gy1me.jl:23\nin expression starting at\
    \ /tmp/tmpnp_gy1me.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_race_collision_helper(i,\
    \ j) == true\n                collisions += 1\n            end\n        end\n\
    \    end\n    return collisions\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp7fa_4m6y.jl:28\n  Test threw exception\n\
    \  Expression: candidate(2) == 4\n  UndefVarError: car_race_collision_helper not\
    \ defined\n  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmp7fa_4m6y.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7fa_4m6y.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7fa_4m6y.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp7fa_4m6y.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(3) == 9\n  UndefVarError: car_race_collision_helper not defined\n\
    \  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmp7fa_4m6y.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7fa_4m6y.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7fa_4m6y.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp7fa_4m6y.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(4) == 16\n  UndefVarError: car_race_collision_helper not defined\n\
    \  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmp7fa_4m6y.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7fa_4m6y.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7fa_4m6y.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp7fa_4m6y.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(8) == 64\n  UndefVarError: car_race_collision_helper not defined\n\
    \  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmp7fa_4m6y.jl:16\n\
    \   [2] macro expansio"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7fa_4m6y.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j) == true\n\
    \                collisions += 1\n            end\n        end\n    end\n    return\
    \ collisions\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0828_po6.jl:23\nin expression starting at\
    \ /tmp/tmp0828_po6.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collides = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j)\n       \
    \         collides += 1\n            end\n        end\n    end\n    return collides\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2ylasdyd.jl:23\nin expression starting at\
    \ /tmp/tmp2ylasdyd.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = 1:n\n            if i != j && car_collision(i - 1,\
    \ j) && car_collision(i, j - 1)\n                collisions += 1\n           \
    \ end\n        end\n    end\n    return collisions\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp88e6ysfi.jl:23\nin expression starting at\
    \ /tmp/tmp88e6ysfi.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j) == true\n\
    \                collisions += 1\n            end\n        end\n    end\n    return\
    \ collisions\nend\n</cell>\n<code language=julia-1.3>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9ai8xvkd.jl:23\nin expression starting at\
    \ /tmp/tmp9ai8xvkd.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collide::Int64 = 0\n\
    \    for i = 1:n\n        for j = i+1:n\n            if car_collision(i, j) ==\
    \ true\n                collide += 1\n            end\n        end\n    end\n\
    \    return collide\nend\n</cell>\n<code language=julia-1.4>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpate0ynz1.jl:23\nin expression starting at\
    \ /tmp/tmpate0ynz1.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i) && car_collision(j)\n\
    \                collisions += 1\n            end\n        end\n    end\n    return\
    \ collisions\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbcwdkejx.jl:23\nin expression starting at\
    \ /tmp/tmpbcwdkejx.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collides = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j) == true\n\
    \                collides += 1\n            end\n        end\n    end\n    return\
    \ collides\nend\n</cell>\n<code language=julia-1.4>\nusing Test\n\n@testset begin\n\
    \ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkfp2sqmp.jl:23\nin expression starting at\
    \ /tmp/tmpkfp2sqmp.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j) == true\n\
    \                collisions += 1\n            end\n        end\n    end\n    return\
    \ collisions\nend\n</cell>\n<code language=julia-1.1>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpihkz3los.jl:23\nin expression starting at\
    \ /tmp/tmpihkz3los.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"\"\"\n    Imagine a\
    \ road that's a perfectly straight infinitely long line.\n    n cars are driving\
    \ left to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\nusing Test\n\n\
    @testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\
    \t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkuth0xn3.jl:1\nin expression starting at /tmp/tmpkuth0xn3.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j) == true\n\
    \                collisions += 1\n            end\n        end\n    end\n    return\
    \ collisions\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkkz19m3q.jl:23\nin expression starting at\
    \ /tmp/tmpkkz19m3q.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j) == true\n\
    \                collisions = collisions + 1\n            end\n        end\n \
    \   end\n    return collisions\nend\n</cell>\n<code language=julia-1.0>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzz8a966_.jl:23\nin expression starting at\
    \ /tmp/tmpzz8a966_.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j) == true\n\
    \                collisions += 1\n            end\n        end\n    end\n    return\
    \ collisions\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpik7ddj9e.jl:28\n  Test threw exception\n\
    \  Expression: candidate(2) == 4\n  UndefVarError: car_collision not defined\n\
    \  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpik7ddj9e.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpik7ddj9e.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpik7ddj9e.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpik7ddj9e.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(3) == 9\n  UndefVarError: car_collision not defined\n  Stacktrace:\n\
    \   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpik7ddj9e.jl:16\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpik7ddj9e.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpik7ddj9e.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpik7ddj9e.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(4) == 16\n  UndefVarError: car_collision not defined\n  Stacktrace:\n\
    \   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpik7ddj9e.jl:16\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpik7ddj9e.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpik7ddj9e.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpik7ddj9e.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(8) == 64\n  UndefVarError: car_collision not defined\n  Stacktrace:\n\
    \   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpik7ddj9e.jl:16\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpik7ddj9e.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i) && car_collision(j)\n\
    \                collisions += 1\n            end\n        end\n    end\n    return\
    \ collisions\nend\n</cell>\n<code language=julia-1.0>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuc1l4z6c.jl:23\nin expression starting at\
    \ /tmp/tmpuc1l4z6c.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i) && car_collision(j)\n\
    \                collisions += 1\n            end\n        end\n    end\n    return\
    \ collisions\nend\n</cell>\n<code language=julia-1.0>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprpp11w2k.jl:23\nin expression starting at\
    \ /tmp/tmprpp11w2k.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"\"\"\n    Imagine a\
    \ road that's a perfectly straight infinitely long line.\n    n cars are driving\
    \ left to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\nusing Test\n\n\
    @testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\
    \t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzkf8aifa.jl:1\nin expression starting at /tmp/tmpzkf8aifa.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_race_collision_test(i,j)\
    \ == true\n                collisions += 1\n            end\n        end\n   \
    \ end\n    return collisions\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp51fqvsg4.jl:28\n  Test threw exception\n\
    \  Expression: candidate(2) == 4\n  UndefVarError: car_race_collision_test not\
    \ defined\n  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmp51fqvsg4.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp51fqvsg4.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp51fqvsg4.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp51fqvsg4.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(3) == 9\n  UndefVarError: car_race_collision_test not defined\n  Stacktrace:\n\
    \   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmp51fqvsg4.jl:16\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp51fqvsg4.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp51fqvsg4.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp51fqvsg4.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(4) == 16\n  UndefVarError: car_race_collision_test not defined\n \
    \ Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmp51fqvsg4.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp51fqvsg4.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp51fqvsg4.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp51fqvsg4.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(8) == 64\n  UndefVarError: car_race_collision_test not defined\n \
    \ Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmp51fqvsg4.jl:16\n\
    \   [2] macro expansion\n     @"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp51fqvsg4.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_race_collision_helper(i,\
    \ j) == true\n                collisions += 1\n            end\n        end\n\
    \    end\n    return collisions\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp_td9b7w3.jl:28\n  Test threw exception\n\
    \  Expression: candidate(2) == 4\n  UndefVarError: car_race_collision_helper not\
    \ defined\n  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmp_td9b7w3.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_td9b7w3.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_td9b7w3.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp_td9b7w3.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(3) == 9\n  UndefVarError: car_race_collision_helper not defined\n\
    \  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmp_td9b7w3.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_td9b7w3.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_td9b7w3.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp_td9b7w3.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(4) == 16\n  UndefVarError: car_race_collision_helper not defined\n\
    \  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmp_td9b7w3.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_td9b7w3.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_td9b7w3.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp_td9b7w3.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(8) == 64\n  UndefVarError: car_race_collision_helper not defined\n\
    \  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmp_td9b7w3.jl:16\n\
    \   [2] macro expansio"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_td9b7w3.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"\"\"\n    Imagine a\
    \ road that's a perfectly straight infinitely long line.\n    n cars are driving\
    \ left to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\nusing Test\n\n\
    @testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\
    \t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf1qn3k54.jl:1\nin expression starting at /tmp/tmpf1qn3k54.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i) && car_collision(j)\n\
    \                collisions += 1\n            end\n        end\n    end\n    return\
    \ collisions\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprxfprtg9.jl:23\nin expression starting at\
    \ /tmp/tmprxfprtg9.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"\"\"\n    Imagine a\
    \ road that's a perfectly straight infinitely long line.\n    n cars are driving\
    \ left to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\nusing Test\n\n\
    @testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\
    \t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8n6p5a65.jl:1\nin expression starting at /tmp/tmp8n6p5a65.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j)\n       \
    \         collisions += 1\n            end\n        end\n    end\n    return collisions\n\
    end\n</cell>\n<code language=julia-1.5>\ncar_race_collision(10)\n</cell>\n<text>\n\
    Exercise: Write a function that calculates the number of cars colliding with each\
    \ other in a race car race.  You will need to use car_race_collision to do this.\n\
    using Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpoxgmo8n5.jl:23\nin expression starting at\
    \ /tmp/tmpoxgmo8n5.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collide = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j) == true\n\
    \                collide = collide + 1\n            end\n        end\n    end\n\
    \    return collide\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw0z9im3c.jl:23\nin expression starting at\
    \ /tmp/tmpw0z9im3c.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j) \n      \
    \          collisions += 1\n            end\n        end\n    end\n    return\
    \ collisions\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphumw23zy.jl:23\nin expression starting at\
    \ /tmp/tmphumw23zy.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i - 1, j - 1) ||\
    \ car_collision(i, j - 1)\n                collisions += 1\n            end\n\
    \        end\n    end\n    return collisions\nend\n</cell>\n<code language=julia-1.5>\n\
    car_race_collision(10)\n</cell>\n<text>\nExercise: Write a function that calculates\
    \ the number of cars that collide with each other in a race.  Then use that function\
    \ to calculate the number of cars that collide with each other in a race with\
    \ $n$ cars.\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp82aqhprd.jl:23\nin expression starting at\
    \ /tmp/tmp82aqhprd.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j) == true\n\
    \                collisions = collisions + 1\n            end\n        end\n \
    \   end\n    return collisions\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4hjvvytu.jl:23\nin expression starting at\
    \ /tmp/tmp4hjvvytu.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"\"\"\n    Imagine a\
    \ road that's a perfectly straight infinitely long line.\n    n cars are driving\
    \ left to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\nusing Test\n\n\
    @testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\
    \t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0a9l4kld.jl:1\nin expression starting at /tmp/tmp0a9l4kld.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = 1:n\n            if i != j\n                if car_collision(i)\
    \ == car_collision(j)\n                    collisions += 1\n                end\n\
    \            end\n        end\n    end\n    return collisions\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzz2k2ubo.jl:25\nin expression starting at\
    \ /tmp/tmpzz2k2ubo.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collides = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i,j) \n       \
    \         collides += 1\n            end\n        end\n    end\n    return collides\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyn40dr7g.jl:23\nin expression starting at\
    \ /tmp/tmpyn40dr7g.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j) == true\n\
    \                collisions += 1\n            end\n        end\n    end\n    return\
    \ collisions\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphhac2ge5.jl:23\nin expression starting at\
    \ /tmp/tmphhac2ge5.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_race_collision_helper(i,\
    \ j) == true\n                collisions += 1\n            end\n        end\n\
    \    end\n    return collisions\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2mmesgja.jl:23\nin expression starting at\
    \ /tmp/tmp2mmesgja.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j) \n      \
    \          collisions += 1\n            end\n        end\n    end\n    return\
    \ collisions\nend\n</cell>\n<code language=julia-1.0>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuup12hkr.jl:23\nin expression starting at\
    \ /tmp/tmpuup12hkr.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_race_collision_helper(i,\
    \ j) == true\n                collisions += 1\n            end\n        end\n\
    \    end\n    return collisions\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp41sfq8c6.jl:28\n  Test threw exception\n\
    \  Expression: candidate(2) == 4\n  UndefVarError: car_race_collision_helper not\
    \ defined\n  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmp41sfq8c6.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp41sfq8c6.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp41sfq8c6.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp41sfq8c6.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(3) == 9\n  UndefVarError: car_race_collision_helper not defined\n\
    \  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmp41sfq8c6.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp41sfq8c6.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp41sfq8c6.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp41sfq8c6.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(4) == 16\n  UndefVarError: car_race_collision_helper not defined\n\
    \  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmp41sfq8c6.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp41sfq8c6.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp41sfq8c6.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp41sfq8c6.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(8) == 64\n  UndefVarError: car_race_collision_helper not defined\n\
    \  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmp41sfq8c6.jl:16\n\
    \   [2] macro expansio"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp41sfq8c6.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = 1:n\n            if i != j\n                if car_collision(i,\
    \ j) == true\n                    collisions += 1\n                end\n     \
    \       end\n        end\n    end\n    return collisions\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9zwa1ydj.jl:25\nin expression starting at\
    \ /tmp/tmp9zwa1ydj.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i) && car_collision(j)\n\
    \                collisions += 1\n            end\n        end\n    end\n    return\
    \ collisions\nend\n</cell>\n<code language=julia-1.0>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7ysr4fs9.jl:23\nin expression starting at\
    \ /tmp/tmp7ysr4fs9.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j) \n      \
    \          collisions += 1\n            end\n        end\n    end\n    return\
    \ collisions\nend\n</cell>\n<code language=julia-1.3>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp__hy_nfp.jl:23\nin expression starting at\
    \ /tmp/tmp__hy_nfp.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_race_collision_helper(i,\
    \ j) == true\n                collisions += 1\n            end\n        end\n\
    \    end\n    return collisions\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpxiinp8xw.jl:28\n  Test threw exception\n\
    \  Expression: candidate(2) == 4\n  UndefVarError: car_race_collision_helper not\
    \ defined\n  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpxiinp8xw.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxiinp8xw.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxiinp8xw.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpxiinp8xw.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(3) == 9\n  UndefVarError: car_race_collision_helper not defined\n\
    \  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpxiinp8xw.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxiinp8xw.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxiinp8xw.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpxiinp8xw.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(4) == 16\n  UndefVarError: car_race_collision_helper not defined\n\
    \  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpxiinp8xw.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxiinp8xw.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxiinp8xw.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpxiinp8xw.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(8) == 64\n  UndefVarError: car_race_collision_helper not defined\n\
    \  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpxiinp8xw.jl:16\n\
    \   [2] macro expansio"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxiinp8xw.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = 1:n\n            if i != j && car_collision(i, j)\n\
    \                collisions += 1\n            end\n        end\n    end\n    return\
    \ collisions\nend\n</cell>\n<code language=julia-1.5>\ncar_race_collision(10)\n\
    </cell>\n<text>\nExercise: Write a function that returns the number of cars that\
    \ collide with each other in a race.  (The function should take two arguments:\
    \ the number of cars in the race and the number of cars in the race after a collision.)\n\
    using Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjh42obp1.jl:23\nin expression starting at\
    \ /tmp/tmpjh42obp1.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j) \n      \
    \          collisions += 1\n            end\n        end\n    end\n    return\
    \ collisions\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxjfac_a0.jl:23\nin expression starting at\
    \ /tmp/tmpxjfac_a0.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j) == true\n\
    \                collisions += 1\n            end\n        end\n    end\n    return\
    \ collisions\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpxb48gp0b.jl:28\n  Test threw exception\n\
    \  Expression: candidate(2) == 4\n  UndefVarError: car_collision not defined\n\
    \  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpxb48gp0b.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxb48gp0b.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxb48gp0b.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpxb48gp0b.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(3) == 9\n  UndefVarError: car_collision not defined\n  Stacktrace:\n\
    \   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpxb48gp0b.jl:16\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxb48gp0b.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxb48gp0b.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpxb48gp0b.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(4) == 16\n  UndefVarError: car_collision not defined\n  Stacktrace:\n\
    \   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpxb48gp0b.jl:16\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxb48gp0b.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxb48gp0b.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpxb48gp0b.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(8) == 64\n  UndefVarError: car_collision not defined\n  Stacktrace:\n\
    \   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpxb48gp0b.jl:16\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxb48gp0b.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_race_collision_helper(i,\
    \ j) == true\n                collisions += 1\n            end\n        end\n\
    \    end\n    return collisions\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpkcg6tnsb.jl:28\n  Test threw exception\n\
    \  Expression: candidate(2) == 4\n  UndefVarError: car_race_collision_helper not\
    \ defined\n  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpkcg6tnsb.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpkcg6tnsb.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkcg6tnsb.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpkcg6tnsb.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(3) == 9\n  UndefVarError: car_race_collision_helper not defined\n\
    \  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpkcg6tnsb.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpkcg6tnsb.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkcg6tnsb.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpkcg6tnsb.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(4) == 16\n  UndefVarError: car_race_collision_helper not defined\n\
    \  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpkcg6tnsb.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpkcg6tnsb.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkcg6tnsb.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpkcg6tnsb.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(8) == 64\n  UndefVarError: car_race_collision_helper not defined\n\
    \  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpkcg6tnsb.jl:16\n\
    \   [2] macro expansio"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkcg6tnsb.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_race_collision_test(i,j)\
    \ == true\n                collisions += 1\n            end\n        end\n   \
    \ end\n    return collisions\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpzi8ak1nj.jl:28\n  Test threw exception\n\
    \  Expression: candidate(2) == 4\n  UndefVarError: car_race_collision_test not\
    \ defined\n  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpzi8ak1nj.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzi8ak1nj.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzi8ak1nj.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpzi8ak1nj.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(3) == 9\n  UndefVarError: car_race_collision_test not defined\n  Stacktrace:\n\
    \   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpzi8ak1nj.jl:16\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzi8ak1nj.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzi8ak1nj.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpzi8ak1nj.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(4) == 16\n  UndefVarError: car_race_collision_test not defined\n \
    \ Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpzi8ak1nj.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzi8ak1nj.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzi8ak1nj.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpzi8ak1nj.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(8) == 64\n  UndefVarError: car_race_collision_test not defined\n \
    \ Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpzi8ak1nj.jl:16\n\
    \   [2] macro expansion\n     @"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzi8ak1nj.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i) && car_collision(j)\n\
    \                collisions += 1\n            end\n        end\n    end\n    return\
    \ collisions\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcmtmrrsi.jl:23\nin expression starting at\
    \ /tmp/tmpcmtmrrsi.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j) \n      \
    \          collisions += 1\n            end\n        end\n    end\n    return\
    \ collisions\nend\n</cell>\n<code language=julia-1.3>\ncar_race_collision(10)\n\
    </cell>\n<text>\nExercise: Write a function car_collision that takes two cars\
    \ as inputs and returns true if the cars collide, false otherwise.\nusing Test\n\
    \n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\
    \t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmv64r7y2.jl:23\nin expression starting at\
    \ /tmp/tmpmv64r7y2.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j) == true\n\
    \                collisions += 1\n            end\n        end\n    end\n    return\
    \ collisions\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3p0sepa_.jl:23\nin expression starting at\
    \ /tmp/tmp3p0sepa_.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_race_collision_helper(i,\
    \ j) == true\n                collisions += 1\n            end\n        end\n\
    \    end\n    return collisions\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmprdjtkxjt.jl:28\n  Test threw exception\n\
    \  Expression: candidate(2) == 4\n  UndefVarError: car_race_collision_helper not\
    \ defined\n  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmprdjtkxjt.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmprdjtkxjt.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprdjtkxjt.jl:27\ntest set:\
    \ Error During Test at /tmp/tmprdjtkxjt.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(3) == 9\n  UndefVarError: car_race_collision_helper not defined\n\
    \  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmprdjtkxjt.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmprdjtkxjt.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprdjtkxjt.jl:27\ntest set:\
    \ Error During Test at /tmp/tmprdjtkxjt.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(4) == 16\n  UndefVarError: car_race_collision_helper not defined\n\
    \  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmprdjtkxjt.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmprdjtkxjt.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprdjtkxjt.jl:27\ntest set:\
    \ Error During Test at /tmp/tmprdjtkxjt.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(8) == 64\n  UndefVarError: car_race_collision_helper not defined\n\
    \  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmprdjtkxjt.jl:16\n\
    \   [2] macro expansio"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprdjtkxjt.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j) \n      \
    \          collisions += 1\n            end\n        end\n    end\n    return\
    \ collisions\nend\n</cell>\n<code language=julia-1.3>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6ud5adp8.jl:23\nin expression starting at\
    \ /tmp/tmp6ud5adp8.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i) && car_collision(j)\n\
    \                collisions += 1\n            end\n        end\n    end\n    return\
    \ collisions\nend\n</cell>\n<code language=julia-1.0>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnln6ryj5.jl:23\nin expression starting at\
    \ /tmp/tmpnln6ryj5.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collide = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_race_collision_helper(i,\
    \ j) == true\n                collide += 1\n            end\n        end\n   \
    \ end\n    return collide\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\
    \t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz3o0qoh0.jl:23\nin expression starting at\
    \ /tmp/tmpz3o0qoh0.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collides = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j) == true\n\
    \                collides += 1\n            end\n        end\n    end\n    return\
    \ collides\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpdykpepj6.jl:28\n  Test threw exception\n\
    \  Expression: candidate(2) == 4\n  UndefVarError: car_collision not defined\n\
    \  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpdykpepj6.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdykpepj6.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdykpepj6.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpdykpepj6.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(3) == 9\n  UndefVarError: car_collision not defined\n  Stacktrace:\n\
    \   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpdykpepj6.jl:16\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdykpepj6.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdykpepj6.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpdykpepj6.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(4) == 16\n  UndefVarError: car_collision not defined\n  Stacktrace:\n\
    \   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpdykpepj6.jl:16\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdykpepj6.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdykpepj6.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpdykpepj6.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(8) == 64\n  UndefVarError: car_collision not defined\n  Stacktrace:\n\
    \   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpdykpepj6.jl:16\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdykpepj6.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j) \n      \
    \          collisions += 1\n            end\n        end\n    end\n    return\
    \ collisions\nend\n</cell>\n<code language=julia-1.0>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj2uedu1h.jl:23\nin expression starting at\
    \ /tmp/tmpj2uedu1h.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j)\n       \
    \         collisions += 1\n            end\n        end\n    end\n    return collisions\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpo39nzzln.jl:28\n  Test threw exception\n\
    \  Expression: candidate(2) == 4\n  UndefVarError: car_collision not defined\n\
    \  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpo39nzzln.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpo39nzzln.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpo39nzzln.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpo39nzzln.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(3) == 9\n  UndefVarError: car_collision not defined\n  Stacktrace:\n\
    \   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpo39nzzln.jl:16\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpo39nzzln.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpo39nzzln.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpo39nzzln.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(4) == 16\n  UndefVarError: car_collision not defined\n  Stacktrace:\n\
    \   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpo39nzzln.jl:16\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpo39nzzln.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpo39nzzln.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpo39nzzln.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(8) == 64\n  UndefVarError: car_collision not defined\n  Stacktrace:\n\
    \   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpo39nzzln.jl:16\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpo39nzzln.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_race_collision_test(car_position(i),\
    \ car_position(j))\n                collisions += 1\n            end\n       \
    \ end\n    end\n    return collisions\nend\n</cell>\n<code language=julia-1.4>\n\
    using Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu0eqtrhk.jl:23\nin expression starting at\
    \ /tmp/tmpu0eqtrhk.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = 1:n\n            if i != j && car_collision(i, j) ==\
    \ true\n                collisions += 1\n            end\n        end\n    end\n\
    \    return collisions\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n\
    @testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\
    \t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6a_4ni12.jl:23\nin expression starting at\
    \ /tmp/tmp6a_4ni12.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j) == true\n\
    \                collisions = collisions + 1\n            end\n        end\n \
    \   end\n    return collisions\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp27jinaz1.jl:23\nin expression starting at\
    \ /tmp/tmp27jinaz1.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collide = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j)\n       \
    \         collide += 1\n            end\n        end\n    end\n    return collide\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5ekp8bz4.jl:23\nin expression starting at\
    \ /tmp/tmp5ekp8bz4.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j) == true\n\
    \                collisions += 1\n            end\n        end\n    end\n    return\
    \ collisions\nend\n</cell>\n<code language=julia-1.3>\ncar_race_collision(10)\n\
    </cell>\n<text>\nExercise: Write a function that computes the number of cars that\
    \ collide with each other in a race.  Then use that function to find the smallest\
    \ number of cars that collide with each other in a race (that is, that minimizes\
    \ the number of cars that collide).\nusing Test\n\n@testset begin\n\ncandidate\
    \ = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0rukkfr6.jl:23\nin expression starting at\
    \ /tmp/tmp0rukkfr6.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_race_collision_test(i,j)\
    \ == true\n                collisions += 1\n            end\n        end\n   \
    \ end\n    return collisions\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpp0edh_3c.jl:28\n  Test threw exception\n\
    \  Expression: candidate(2) == 4\n  UndefVarError: car_race_collision_test not\
    \ defined\n  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpp0edh_3c.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpp0edh_3c.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpp0edh_3c.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpp0edh_3c.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(3) == 9\n  UndefVarError: car_race_collision_test not defined\n  Stacktrace:\n\
    \   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpp0edh_3c.jl:16\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpp0edh_3c.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpp0edh_3c.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpp0edh_3c.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(4) == 16\n  UndefVarError: car_race_collision_test not defined\n \
    \ Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpp0edh_3c.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpp0edh_3c.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpp0edh_3c.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpp0edh_3c.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(8) == 64\n  UndefVarError: car_race_collision_test not defined\n \
    \ Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpp0edh_3c.jl:16\n\
    \   [2] macro expansion\n     @"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpp0edh_3c.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = 1:n\n            if i != j\n                if abs(car_positions[i,1]\
    \ - car_positions[j,1]) < car_speed\n                    collisions += 1\n   \
    \             end\n            end\n        end\n    end\n    return collisions\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcepg6k0x.jl:25\nin expression starting at\
    \ /tmp/tmpcepg6k0x.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_race_collision_helper(i,\
    \ j) == true\n                collisions += 1\n            end\n        end\n\
    \    end\n    return collisions\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpsf2kezhg.jl:28\n  Test threw exception\n\
    \  Expression: candidate(2) == 4\n  UndefVarError: car_race_collision_helper not\
    \ defined\n  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpsf2kezhg.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsf2kezhg.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsf2kezhg.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpsf2kezhg.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(3) == 9\n  UndefVarError: car_race_collision_helper not defined\n\
    \  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpsf2kezhg.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsf2kezhg.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsf2kezhg.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpsf2kezhg.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(4) == 16\n  UndefVarError: car_race_collision_helper not defined\n\
    \  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpsf2kezhg.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsf2kezhg.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsf2kezhg.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpsf2kezhg.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(8) == 64\n  UndefVarError: car_race_collision_helper not defined\n\
    \  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpsf2kezhg.jl:16\n\
    \   [2] macro expansio"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsf2kezhg.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = 1:n\n            if i != j\n                if abs(car_x_position(i)\
    \ - car_x_position(j)) < car_width + car_length\n                    collisions\
    \ += 1\n                end\n            end\n        end\n    end\n    return\
    \ collisions\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu5k9_s_3.jl:25\nin expression starting at\
    \ /tmp/tmpu5k9_s_3.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collides = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j) \n      \
    \          collides += 1\n            end\n        end\n    end\n    return collides\n\
    end\n</cell>\n<code language=julia-1.0>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplhs5r25p.jl:23\nin expression starting at\
    \ /tmp/tmplhs5r25p.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collide = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j) == true\n\
    \                collide = collide + 1\n            end\n        end\n    end\n\
    \    return collide\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl7n6ygid.jl:23\nin expression starting at\
    \ /tmp/tmpl7n6ygid.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collide = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j) == true\n\
    \                collide = collide + 1\n            end\n        end\n    end\n\
    \    return collide\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph87op9fx.jl:23\nin expression starting at\
    \ /tmp/tmph87op9fx.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collides = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j) \n      \
    \          collides += 1\n            end\n        end\n    end\n    return collides\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4_1dghmk.jl:23\nin expression starting at\
    \ /tmp/tmp4_1dghmk.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i) && car_collision(j)\n\
    \                collisions += 1\n            end\n        end\n    end\n    return\
    \ collisions\nend\n</cell>\n<code language=julia-1.3>\ncar_race_collision(10)\n\
    </cell>\n<text>\nExercise: Write a function that determines whether two cars collide\
    \ with each other.\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2r8hqx7w.jl:23\nin expression starting at\
    \ /tmp/tmp2r8hqx7w.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"\"\"\n    Imagine a\
    \ road that's a perfectly straight infinitely long line.\n    n cars are driving\
    \ left to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\nusing Test\n\n\
    @testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\
    \t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjiek5t44.jl:1\nin expression starting at /tmp/tmpjiek5t44.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"\"\"\n    Imagine a\
    \ road that's a perfectly straight infinitely long line.\n    n cars are driving\
    \ left to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\nusing Test\n\n\
    @testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\
    \t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpibtwdbkq.jl:1\nin expression starting at /tmp/tmpibtwdbkq.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_race_collision_helper(i,\
    \ j) == true\n                collisions += 1\n            end\n        end\n\
    \    end\n    return collisions\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpbnme2qkr.jl:28\n  Test threw exception\n\
    \  Expression: candidate(2) == 4\n  UndefVarError: car_race_collision_helper not\
    \ defined\n  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpbnme2qkr.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbnme2qkr.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbnme2qkr.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpbnme2qkr.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(3) == 9\n  UndefVarError: car_race_collision_helper not defined\n\
    \  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpbnme2qkr.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbnme2qkr.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbnme2qkr.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpbnme2qkr.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(4) == 16\n  UndefVarError: car_race_collision_helper not defined\n\
    \  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpbnme2qkr.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbnme2qkr.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbnme2qkr.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpbnme2qkr.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(8) == 64\n  UndefVarError: car_race_collision_helper not defined\n\
    \  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpbnme2qkr.jl:16\n\
    \   [2] macro expansio"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbnme2qkr.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_race_collision_helper(i,\
    \ j) == true\n                collisions += 1\n            end\n        end\n\
    \    end\n    return collisions\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpwm_h1v3m.jl:28\n  Test threw exception\n\
    \  Expression: candidate(2) == 4\n  UndefVarError: car_race_collision_helper not\
    \ defined\n  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpwm_h1v3m.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwm_h1v3m.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwm_h1v3m.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpwm_h1v3m.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(3) == 9\n  UndefVarError: car_race_collision_helper not defined\n\
    \  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpwm_h1v3m.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwm_h1v3m.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwm_h1v3m.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpwm_h1v3m.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(4) == 16\n  UndefVarError: car_race_collision_helper not defined\n\
    \  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpwm_h1v3m.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwm_h1v3m.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwm_h1v3m.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpwm_h1v3m.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(8) == 64\n  UndefVarError: car_race_collision_helper not defined\n\
    \  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpwm_h1v3m.jl:16\n\
    \   [2] macro expansio"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwm_h1v3m.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collide = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j) == true\n\
    \                collide = collide + 1\n            end\n        end\n    end\n\
    \    return collide\nend\n</cell>\n<code language=julia-1.0>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp3c79a74.jl:23\nin expression starting at\
    \ /tmp/tmpp3c79a74.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collides = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_race_collision_helper(i,\
    \ j) == true\n                collides += 1\n            end\n        end\n  \
    \  end\n    return collides\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpol0nav2v.jl:28\n  Test threw exception\n\
    \  Expression: candidate(2) == 4\n  UndefVarError: car_race_collision_helper not\
    \ defined\n  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpol0nav2v.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpol0nav2v.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpol0nav2v.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpol0nav2v.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(3) == 9\n  UndefVarError: car_race_collision_helper not defined\n\
    \  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpol0nav2v.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpol0nav2v.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpol0nav2v.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpol0nav2v.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(4) == 16\n  UndefVarError: car_race_collision_helper not defined\n\
    \  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpol0nav2v.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpol0nav2v.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpol0nav2v.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpol0nav2v.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(8) == 64\n  UndefVarError: car_race_collision_helper not defined\n\
    \  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpol0nav2v.jl:16\n\
    \   [2] macro expansio"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpol0nav2v.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collides = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j) == true\n\
    \                collides += 1\n            end\n        end\n    end\n    return\
    \ collides\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpul6hiccq.jl:28\n  Test threw exception\n\
    \  Expression: candidate(2) == 4\n  UndefVarError: car_collision not defined\n\
    \  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpul6hiccq.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpul6hiccq.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpul6hiccq.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpul6hiccq.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(3) == 9\n  UndefVarError: car_collision not defined\n  Stacktrace:\n\
    \   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpul6hiccq.jl:16\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpul6hiccq.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpul6hiccq.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpul6hiccq.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(4) == 16\n  UndefVarError: car_collision not defined\n  Stacktrace:\n\
    \   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpul6hiccq.jl:16\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpul6hiccq.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpul6hiccq.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpul6hiccq.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(8) == 64\n  UndefVarError: car_collision not defined\n  Stacktrace:\n\
    \   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpul6hiccq.jl:16\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpul6hiccq.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j) \n      \
    \          collisions += 1\n            end\n        end\n    end\n    return\
    \ collisions\nend\n</cell>\n<code language=julia-1.3>\ncar_race_collision(10)\n\
    </cell>\n<text>\nExercise: Write a function that calculates the number of cars\
    \ that collide with each other in a race.  Test it by calling it with the number\
    \ of cars in the simulation.\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnzda6je7.jl:23\nin expression starting at\
    \ /tmp/tmpnzda6je7.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(j, i)\n       \
    \         collisions += 1\n    return collisions\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmp3e30q6vy.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3e30q6vy.jl:1\n\
    in expression starting at /tmp/tmp3e30q6vy.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j)\n       \
    \         collisions += 1\n            end\n        end\n    end\n    return collisions\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0pxq9q7p.jl:23\nin expression starting at\
    \ /tmp/tmp0pxq9q7p.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_race_collision_helper(i,\
    \ j) == true\n                collisions += 1\n            end\n        end\n\
    \    end\n    return collisions\nend\n</cell>\n<code language=julia-1.4>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpulfwdi89.jl:23\nin expression starting at\
    \ /tmp/tmpulfwdi89.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j) == true\n\
    \                collisions += 1\n            end\n        end\n    end\n    return\
    \ collisions\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb0gs52k5.jl:23\nin expression starting at\
    \ /tmp/tmpb0gs52k5.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j) \n      \
    \          collisions += 1\n            end\n        end\n    end\n    return\
    \ collisions\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp29cu3n6f.jl:23\nin expression starting at\
    \ /tmp/tmp29cu3n6f.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collide::Int64 = 0\n\
    \    for i = 1:n\n        for j = 1:n\n            if i != j\n               \
    \ if abs(car_x_position(i) - car_x_position(j)) < car_width/2 \n             \
    \       collide = collide + 1\n                end\n            end\n        end\n\
    \    end\n    return collide\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\
    \t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpukl6m2w7.jl:25\nin expression starting at\
    \ /tmp/tmpukl6m2w7.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i) && car_collision(j)\n\
    \                collisions += 1\n            end\n        end\n    end\n    return\
    \ collisions\nend\n</cell>\n<code language=julia-1.0>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptio1b5jl.jl:23\nin expression starting at\
    \ /tmp/tmptio1b5jl.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collide = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_race_collision_test(i,j)\
    \ == true\n                collide = collide + 1\n            end\n        end\n\
    \    end\n    return collide\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmph4ss4nx3.jl:28\n  Test threw exception\n\
    \  Expression: candidate(2) == 4\n  UndefVarError: car_race_collision_test not\
    \ defined\n  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmph4ss4nx3.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmph4ss4nx3.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmph4ss4nx3.jl:27\ntest set:\
    \ Error During Test at /tmp/tmph4ss4nx3.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(3) == 9\n  UndefVarError: car_race_collision_test not defined\n  Stacktrace:\n\
    \   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmph4ss4nx3.jl:16\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmph4ss4nx3.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmph4ss4nx3.jl:27\ntest set:\
    \ Error During Test at /tmp/tmph4ss4nx3.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(4) == 16\n  UndefVarError: car_race_collision_test not defined\n \
    \ Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmph4ss4nx3.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmph4ss4nx3.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmph4ss4nx3.jl:27\ntest set:\
    \ Error During Test at /tmp/tmph4ss4nx3.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(8) == 64\n  UndefVarError: car_race_collision_test not defined\n \
    \ Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmph4ss4nx3.jl:16\n\
    \   [2] macro expansion\n     @"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmph4ss4nx3.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"\"\"\n    Imagine a\
    \ road that's a perfectly straight infinitely long line.\n    n cars are driving\
    \ left to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\nusing Test\n\n\
    @testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\
    \t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc328cpob.jl:1\nin expression starting at /tmp/tmpc328cpob.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_race_collision_helper(i,\
    \ j) == true\n                collisions += 1\n            end\n        end\n\
    \    end\n    return collisions\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpg10dtb6r.jl:28\n  Test threw exception\n\
    \  Expression: candidate(2) == 4\n  UndefVarError: car_race_collision_helper not\
    \ defined\n  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpg10dtb6r.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpg10dtb6r.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpg10dtb6r.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpg10dtb6r.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(3) == 9\n  UndefVarError: car_race_collision_helper not defined\n\
    \  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpg10dtb6r.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpg10dtb6r.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpg10dtb6r.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpg10dtb6r.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(4) == 16\n  UndefVarError: car_race_collision_helper not defined\n\
    \  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpg10dtb6r.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpg10dtb6r.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpg10dtb6r.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpg10dtb6r.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(8) == 64\n  UndefVarError: car_race_collision_helper not defined\n\
    \  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpg10dtb6r.jl:16\n\
    \   [2] macro expansio"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpg10dtb6r.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i) && car_collision(j)\n\
    \                collisions += 1\n            end\n        end\n    end\n    return\
    \ collisions\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp831v2k0u.jl:23\nin expression starting at\
    \ /tmp/tmp831v2k0u.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collides = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j) \n      \
    \          collides += 1\n            end\n        end\n    end\n    return collides\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkn7saupd.jl:23\nin expression starting at\
    \ /tmp/tmpkn7saupd.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = 1:n\n            if i != j\n                if abs(car_position(i,\
    \ j) - car_position(j, i)) < car_speed\n                    collisions += 1\n\
    \                end\n            end\n        end\n    end\n    return collisions\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp21eggzll.jl:25\nin expression starting at\
    \ /tmp/tmp21eggzll.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collide = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j) == true\n\
    \                collide = collide + 1\n            end\n        end\n    end\n\
    \    return collide\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvd9x_dmz.jl:23\nin expression starting at\
    \ /tmp/tmpvd9x_dmz.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collide = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i) && car_collision(j)\n\
    \                collide = collide + 1\n            end\n        end\n    end\n\
    \    return collide\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnum978cf.jl:23\nin expression starting at\
    \ /tmp/tmpnum978cf.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j)\n       \
    \         collisions += 1\n            end\n        end\n    end\n    return collisions\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprsu9x_1_.jl:23\nin expression starting at\
    \ /tmp/tmprsu9x_1_.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j) \n      \
    \          collisions += 1\n            end\n        end\n    end\n    return\
    \ collisions\nend\n</cell>\n<code language=julia-1.0>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb0erp62p.jl:23\nin expression starting at\
    \ /tmp/tmpb0erp62p.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collides = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j)\n       \
    \         collides += 1\n            end\n        end\n    end\n    return collides\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj6nk57b5.jl:23\nin expression starting at\
    \ /tmp/tmpj6nk57b5.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j) \n      \
    \          collisions += 1\n            end\n        end\n    end\n    return\
    \ collisions\nend\n</cell>\n<code language=julia-1.5>\ncar_race_collision(10)\n\
    </cell>\n<text>\nExercise: Write a function that calculates the time it takes\
    \ to drive n cars through a race car collision.\nusing Test\n\n@testset begin\n\
    \ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpudcrsw8c.jl:23\nin expression starting at\
    \ /tmp/tmpudcrsw8c.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j) == true\n\
    \                collisions += 1\n            end\n        end\n    end\n    return\
    \ collisions\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnfd50tuk.jl:23\nin expression starting at\
    \ /tmp/tmpnfd50tuk.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collide = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i) && car_collision(j)\n\
    \                collide = collide + 1\n            end\n        end\n    end\n\
    \    return collide\nend\n</cell>\n<code language=julia-1.0>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpql1nohse.jl:23\nin expression starting at\
    \ /tmp/tmpql1nohse.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i) && car_collision(j)\n\
    \                collisions += 1\n            end\n        end\n    end\n    return\
    \ collisions\nend\n</cell>\n<code language=julia-1.3>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3nppxwe1.jl:23\nin expression starting at\
    \ /tmp/tmp3nppxwe1.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j) \n      \
    \          collisions += 1\n            end\n        end\n    end\n    return\
    \ collisions\nend\n</cell>\n<code language=julia-1.5>\ncar_race_collision(10)\n\
    </cell>\n<text>\nExercise: Write a function that counts the number of cars colliding\
    \ with each other in a race.  (The function should take two arguments: the number\
    \ of cars in the race and the number of cars in the race that have already collided.)\n\
    using Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnyzfev7i.jl:23\nin expression starting at\
    \ /tmp/tmpnyzfev7i.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_race_collision_helper(i,\
    \ j) == true\n                collisions += 1\n            end\n        end\n\
    \    end\n    return collisions\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp8bhzdj2s.jl:28\n  Test threw exception\n\
    \  Expression: candidate(2) == 4\n  UndefVarError: car_race_collision_helper not\
    \ defined\n  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmp8bhzdj2s.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8bhzdj2s.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8bhzdj2s.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp8bhzdj2s.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(3) == 9\n  UndefVarError: car_race_collision_helper not defined\n\
    \  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmp8bhzdj2s.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8bhzdj2s.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8bhzdj2s.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp8bhzdj2s.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(4) == 16\n  UndefVarError: car_race_collision_helper not defined\n\
    \  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmp8bhzdj2s.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8bhzdj2s.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8bhzdj2s.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp8bhzdj2s.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(8) == 64\n  UndefVarError: car_race_collision_helper not defined\n\
    \  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmp8bhzdj2s.jl:16\n\
    \   [2] macro expansio"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8bhzdj2s.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"\"\"\n    Imagine a\
    \ road that's a perfectly straight infinitely long line.\n    n cars are driving\
    \ left to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\nusing Test\n\n\
    @testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\
    \t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp15u1w08p.jl:1\nin expression starting at /tmp/tmp15u1w08p.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collide = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_race_collision_helper(i,\
    \ j) == true\n                collide += 1\n            end\n        end\n   \
    \ end\n    return collide\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpp1j54ccx.jl:28\n  Test threw exception\n\
    \  Expression: candidate(2) == 4\n  UndefVarError: car_race_collision_helper not\
    \ defined\n  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpp1j54ccx.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpp1j54ccx.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpp1j54ccx.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpp1j54ccx.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(3) == 9\n  UndefVarError: car_race_collision_helper not defined\n\
    \  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpp1j54ccx.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpp1j54ccx.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpp1j54ccx.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpp1j54ccx.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(4) == 16\n  UndefVarError: car_race_collision_helper not defined\n\
    \  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpp1j54ccx.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpp1j54ccx.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpp1j54ccx.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpp1j54ccx.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(8) == 64\n  UndefVarError: car_race_collision_helper not defined\n\
    \  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpp1j54ccx.jl:16\n\
    \   [2] macro expansio"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpp1j54ccx.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(@car_positions(i,:),\
    \ @car_positions(j,:))\n                collisions += 1\n            end\n   \
    \     end\n    end\n    return collisions\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: UndefVarError: @car_positions not defined\nStacktrace:\n\
    \ [1] top-level scope\n   @ :0\n [2] #macroexpand#51\n   @ ./expr.jl:115 [inlined]\n\
    \ [3] macroexpand\n   @ ./expr.jl:114 [inlined]\n [4] docm(source::LineNumberNode,\
    \ mod::Module, meta::Any, ex::Any, define::Bool) (repeats 2 times)\n   @ Base.Docs\
    \ ./docs/Docs.jl:537\n [5] var\"@doc\"(::LineNumberNode, ::Module, ::String, ::Vararg{Any})\n\
    \   @ Core ./boot.jl:517\nin expression starting at /tmp/tmp8u5lksqp.jl:1\nin\
    \ expression starting at /tmp/tmp8u5lksqp.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(@car_pos(i,j))\n\
    \                collisions += 1\n            end\n        end\n    end\n    return\
    \ collisions\nend\n</cell>\n<code language=julia-1.5>\ncar_race_collision(10)\n\
    </cell>\n<text>\nExercise: Write a function that outputs the number of cars that\
    \ collide with each other in a race.  (The function should take two arguments:\
    \ the number of cars in the race and the number of cars in the race that collide\
    \ with each other.)\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: UndefVarError: @car_pos not defined\nStacktrace:\n [1]\
    \ top-level scope\n   @ :0\n [2] #macroexpand#51\n   @ ./expr.jl:115 [inlined]\n\
    \ [3] macroexpand\n   @ ./expr.jl:114 [inlined]\n [4] docm(source::LineNumberNode,\
    \ mod::Module, meta::Any, ex::Any, define::Bool) (repeats 2 times)\n   @ Base.Docs\
    \ ./docs/Docs.jl:537\n [5] var\"@doc\"(::LineNumberNode, ::Module, ::String, ::Vararg{Any})\n\
    \   @ Core ./boot.jl:517\nin expression starting at /tmp/tmput_85y71.jl:1\nin\
    \ expression starting at /tmp/tmput_85y71.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i) && car_collision(j)\n\
    \                collisions += 1\n            end\n        end\n    end\n    return\
    \ collisions\nend\n</cell>\n<code language=julia-1.0>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwup5p9kh.jl:23\nin expression starting at\
    \ /tmp/tmpwup5p9kh.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"\"\"\n    Imagine a\
    \ road that's a perfectly straight infinitely long line.\n    n cars are driving\
    \ left to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\nusing Test\n\n\
    @testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\
    \t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbb9jifiy.jl:1\nin expression starting at /tmp/tmpbb9jifiy.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j)\n       \
    \         collisions += 1\n            end\n        end\n    end\n    return collisions\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppcymxr2n.jl:23\nin expression starting at\
    \ /tmp/tmppcymxr2n.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_race_collision_helper(i,\
    \ j) == true\n                collisions += 1\n            end\n        end\n\
    \    end\n    return collisions\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpoq0a4wl6.jl:23\nin expression starting at\
    \ /tmp/tmpoq0a4wl6.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"\"\"\n    Imagine a\
    \ road that's a perfectly straight infinitely long line.\n    n cars are driving\
    \ left to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\nusing Test\n\n\
    @testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\
    \t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf7p_p3hv.jl:1\nin expression starting at /tmp/tmpf7p_p3hv.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i) && car_collision(j)\n\
    \                collisions += 1\n            end\n        end\n    end\n    return\
    \ collisions\nend\n</cell>\n<code language=julia-1.3>\ncar_race_collision(10)\n\
    </cell>\n<text>\nExercise: Write a function that returns the number of cars that\
    \ collide with each other.\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8d9f3eua.jl:23\nin expression starting at\
    \ /tmp/tmp8d9f3eua.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"\"\"\n    Imagine a\
    \ road that's a perfectly straight infinitely long line.\n    n cars are driving\
    \ left to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\nusing Test\n\n\
    @testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\
    \t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0q60jghw.jl:1\nin expression starting at /tmp/tmp0q60jghw.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_race_collision_check(i,j)\n\
    \                collisions += 1\n            end\n        end\n    end\n    return\
    \ collisions\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyrcut_yb.jl:23\nin expression starting at\
    \ /tmp/tmpyrcut_yb.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j) == true\n\
    \                collisions += 1\n            end\n        end\n    end\n    return\
    \ collisions\nend\n</cell>\n<code language=julia-1.0>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0pcipqqe.jl:23\nin expression starting at\
    \ /tmp/tmp0pcipqqe.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"\"\"\n    Imagine a\
    \ road that's a perfectly straight infinitely long line.\n    n cars are driving\
    \ left to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\nusing Test\n\n\
    @testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\
    \t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuc86icx8.jl:1\nin expression starting at /tmp/tmpuc86icx8.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j) == true\n\
    \                collisions += 1\n            end\n        end\n    end\n    return\
    \ collisions\nend\n</cell>\n<code language=julia-1.3>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7v7_zmxk.jl:23\nin expression starting at\
    \ /tmp/tmp7v7_zmxk.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j)\n       \
    \         collisions += 1\n            end\n        end\n    end\n    return collisions\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0nwpoct6.jl:23\nin expression starting at\
    \ /tmp/tmp0nwpoct6.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_race_collision_helper(i,\
    \ j) == true\n                collisions += 1\n            end\n        end\n\
    \    end\n    return collisions\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4dr_ydti.jl:23\nin expression starting at\
    \ /tmp/tmp4dr_ydti.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j)\n       \
    \         collisions += 1\n            end\n        end\n    end\n    return collisions\n\
    end\n</cell>\n<code language=julia-1.5>\ncar_race_collision(10)\n</cell>\n<text>\n\
    Exercise: Write a function car_collision that takes two cars as inputs and returns\
    \ true if the cars collide.  (The function should return false if either of the\
    \ cars is out of bounds.)\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc4gmqkun.jl:23\nin expression starting at\
    \ /tmp/tmpc4gmqkun.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j)\n       \
    \         collisions += 1\n            end\n        end\n    end\n    return collisions\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmphkk_poor.jl:28\n  Test threw exception\n\
    \  Expression: candidate(2) == 4\n  UndefVarError: car_collision not defined\n\
    \  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmphkk_poor.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphkk_poor.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphkk_poor.jl:27\ntest set:\
    \ Error During Test at /tmp/tmphkk_poor.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(3) == 9\n  UndefVarError: car_collision not defined\n  Stacktrace:\n\
    \   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmphkk_poor.jl:16\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphkk_poor.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphkk_poor.jl:27\ntest set:\
    \ Error During Test at /tmp/tmphkk_poor.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(4) == 16\n  UndefVarError: car_collision not defined\n  Stacktrace:\n\
    \   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmphkk_poor.jl:16\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphkk_poor.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphkk_poor.jl:27\ntest set:\
    \ Error During Test at /tmp/tmphkk_poor.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(8) == 64\n  UndefVarError: car_collision not defined\n  Stacktrace:\n\
    \   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmphkk_poor.jl:16\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphkk_poor.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i) == car_collision(j)\n\
    \                collisions += 1\n            end\n        end\n    end\n    return\
    \ collisions\nend\n</cell>\n<code language=julia-1.3>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvfhqydxy.jl:23\nin expression starting at\
    \ /tmp/tmpvfhqydxy.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collide = 0\n    for\
    \ i = 1:n\n        for j = 1:n\n            if i != j && car_collision(i, j)\n\
    \                collide = collide + 1\n            end\n        end\n    end\n\
    \    return collide\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpld0v1wd_.jl:28\n  Test threw exception\n\
    \  Expression: candidate(2) == 4\n  UndefVarError: car_collision not defined\n\
    \  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpld0v1wd_.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpld0v1wd_.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpld0v1wd_.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpld0v1wd_.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(3) == 9\n  UndefVarError: car_collision not defined\n  Stacktrace:\n\
    \   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpld0v1wd_.jl:16\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpld0v1wd_.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpld0v1wd_.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpld0v1wd_.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(4) == 16\n  UndefVarError: car_collision not defined\n  Stacktrace:\n\
    \   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpld0v1wd_.jl:16\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpld0v1wd_.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpld0v1wd_.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpld0v1wd_.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(8) == 64\n  UndefVarError: car_collision not defined\n  Stacktrace:\n\
    \   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpld0v1wd_.jl:16\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpld0v1wd_.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"\"\"\n    Imagine a\
    \ road that's a perfectly straight infinitely long line.\n    n cars are driving\
    \ left to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\nusing Test\n\n\
    @testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\
    \t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdes2b22d.jl:1\nin expression starting at /tmp/tmpdes2b22d.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j) == true\n\
    \                collisions += 1\n            end\n        end\n    end\n    return\
    \ collisions\nend\n</cell>\n<code language=julia-1.4>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8wq3eqfb.jl:23\nin expression starting at\
    \ /tmp/tmp8wq3eqfb.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j) \n      \
    \          collisions += 1\n            end\n        end\n    end\n    return\
    \ collisions\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1xgxkh23.jl:23\nin expression starting at\
    \ /tmp/tmp1xgxkh23.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_race_collision_helper(i,\
    \ j) == true\n                collisions += 1\n            end\n        end\n\
    \    end\n    return collisions\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp5q2zaj2w.jl:28\n  Test threw exception\n\
    \  Expression: candidate(2) == 4\n  UndefVarError: car_race_collision_helper not\
    \ defined\n  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmp5q2zaj2w.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5q2zaj2w.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5q2zaj2w.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp5q2zaj2w.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(3) == 9\n  UndefVarError: car_race_collision_helper not defined\n\
    \  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmp5q2zaj2w.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5q2zaj2w.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5q2zaj2w.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp5q2zaj2w.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(4) == 16\n  UndefVarError: car_race_collision_helper not defined\n\
    \  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmp5q2zaj2w.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5q2zaj2w.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5q2zaj2w.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp5q2zaj2w.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(8) == 64\n  UndefVarError: car_race_collision_helper not defined\n\
    \  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmp5q2zaj2w.jl:16\n\
    \   [2] macro expansio"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5q2zaj2w.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j) \n      \
    \          collisions += 1\n            end\n        end\n    end\n    return\
    \ collisions\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj7c0j0zw.jl:23\nin expression starting at\
    \ /tmp/tmpj7c0j0zw.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j)\n       \
    \         collisions += 1\n            end\n        end\n    end\n    return collisions\n\
    end\n</cell>\n<code language=julia-1.5>\ncar_race_collision(10)\n</cell>\n<text>\n\
    Exercise\nWrite a function called car_race_collisions that takes in an array of\
    \ n cars, and outputs the number of cars that collide with each other.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbqzd1rpd.jl:23\nin expression starting at\
    \ /tmp/tmpbqzd1rpd.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"\"\"\n    Imagine a\
    \ road that's a perfectly straight infinitely long line.\n    n cars are driving\
    \ left to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\nusing Test\n\n\
    @testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\
    \t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv9ewxabn.jl:1\nin expression starting at /tmp/tmpv9ewxabn.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collide = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j)\n       \
    \         collide += 1\n            end\n        end\n    end\n    return collide\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpls7kxaew.jl:23\nin expression starting at\
    \ /tmp/tmpls7kxaew.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_race_collision_helper(i,\
    \ j) == true\n                collisions += 1\n            end\n        end\n\
    \    end\n    return collisions\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpygq482v9.jl:23\nin expression starting at\
    \ /tmp/tmpygq482v9.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collides = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i) && car_collision(j)\n\
    \                collides += 1\n            end\n        end\n    end\n    return\
    \ collides\nend\n</cell>\n<code language=julia-1.3>\nusing Test\n\n@testset begin\n\
    \ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw6r3qi6j.jl:23\nin expression starting at\
    \ /tmp/tmpw6r3qi6j.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = 1:n\n            if i != j && car_collision(i, j)\n\
    \                collisions += 1\n            end\n        end\n    end\n    return\
    \ collisions\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0bctnt78.jl:23\nin expression starting at\
    \ /tmp/tmp0bctnt78.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_race_collision_test(i,j)\
    \ then \n                collisions += 1\n            end\n        end\n    end\n\
    \    return collisions\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n\
    @testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\
    \t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp990u6zxt.jl:23\nin expression starting at\
    \ /tmp/tmp990u6zxt.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"\"\"\n    Imagine a\
    \ road that's a perfectly straight infinitely long line.\n    n cars are driving\
    \ left to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\nusing Test\n\n\
    @testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\
    \t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp04wf7qzv.jl:1\nin expression starting at /tmp/tmp04wf7qzv.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_race_collision_check(i,j)\
    \ == true\n                collisions = collisions + 1\n            end\n    \
    \    end\n    end\n    return collisions\nend\n\"\"\"\n    car_race_collision_check(i,j)\
    \ returns true if the cars at indices i and j collide.\n    car_race_collision_check(i,j)\
    \ returns false if the cars at indices i and j do not collide.\n\"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpd7kh_0ay.jl:23\nin expression starting at /tmp/tmpd7kh_0ay.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j) == true\n\
    \                collisions += 1\n            end\n        end\n    end\n    return\
    \ collisions\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxns1g3tl.jl:23\nin expression starting at\
    \ /tmp/tmpxns1g3tl.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j) == true\n\
    \                collisions += 1\n            end\n        end\n    end\n    return\
    \ collisions\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzvw91qv7.jl:23\nin expression starting at\
    \ /tmp/tmpzvw91qv7.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = 1:n\n            if i != j\n                if abs(car_distance(i,j))\
    \ < car_distance(i,j+1)\n                    collisions += 1\n               \
    \ end\n            end\n        end\n    end\n    return collisions\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjhidcyhm.jl:25\nin expression starting at\
    \ /tmp/tmpjhidcyhm.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j)\n       \
    \         collisions += 1\n            end\n        end\n    end\n    return collisions\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk35gy741.jl:23\nin expression starting at\
    \ /tmp/tmpk35gy741.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i) && car_collision(j)\n\
    \                collisions += 1\n            end\n        end\n    end\n    return\
    \ collisions\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_me8y5j9.jl:23\nin expression starting at\
    \ /tmp/tmp_me8y5j9.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j) \n      \
    \          collisions += 1\n            end\n        end\n    end\n    return\
    \ collisions\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptn826jdl.jl:23\nin expression starting at\
    \ /tmp/tmptn826jdl.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j) == true\n\
    \                collisions += 1\n            end\n        end\n    end\n    return\
    \ collisions\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6fowbec2.jl:23\nin expression starting at\
    \ /tmp/tmp6fowbec2.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = 1:n\n            if i != j\n                if abs(car_speed(i,j))\
    \ < car_speed(i,j+1)\n                    collisions += 1\n                end\n\
    \            end\n        end\n    end\n    return collisions\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9gdyze37.jl:25\nin expression starting at\
    \ /tmp/tmp9gdyze37.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j) \n      \
    \          collisions += 1\n            end\n        end\n    end\n    return\
    \ collisions\nend\n</cell>\n<code language=julia-1.1>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc59kejjt.jl:23\nin expression starting at\
    \ /tmp/tmpc59kejjt.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j)\n       \
    \         collisions += 1\n            end\n        end\n    end\n    return collisions\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpse0ugner.jl:23\nin expression starting at\
    \ /tmp/tmpse0ugner.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j) == true\n\
    \                collisions += 1\n            end\n        end\n    end\n    return\
    \ collisions\nend\n</cell>\n<code language=julia-1.0>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp10d67h8_.jl:23\nin expression starting at\
    \ /tmp/tmp10d67h8_.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collide = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_race_collision_helper(i,\
    \ j) == true\n                collide += 1\n            end\n        end\n   \
    \ end\n    return collide\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp73057aot.jl:28\n  Test threw exception\n\
    \  Expression: candidate(2) == 4\n  UndefVarError: car_race_collision_helper not\
    \ defined\n  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmp73057aot.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp73057aot.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp73057aot.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp73057aot.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(3) == 9\n  UndefVarError: car_race_collision_helper not defined\n\
    \  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmp73057aot.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp73057aot.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp73057aot.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp73057aot.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(4) == 16\n  UndefVarError: car_race_collision_helper not defined\n\
    \  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmp73057aot.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp73057aot.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp73057aot.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp73057aot.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(8) == 64\n  UndefVarError: car_race_collision_helper not defined\n\
    \  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmp73057aot.jl:16\n\
    \   [2] macro expansio"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp73057aot.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collide = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j)\n       \
    \         collide += 1\n            end\n        end\n    end\n    return collide\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgsfctmql.jl:23\nin expression starting at\
    \ /tmp/tmpgsfctmql.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collides = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i,j) \n       \
    \         collides += 1\n            end\n        end\n    end\n    return collides\n\
    end\n</cell>\n<code language=julia-1.0>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdt0ltpfn.jl:23\nin expression starting at\
    \ /tmp/tmpdt0ltpfn.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j) == true\n\
    \                collisions += 1\n            end\n        end\n    end\n    return\
    \ collisions\nend\n</cell>\n<code language=julia-1.3>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx5sal5wo.jl:23\nin expression starting at\
    \ /tmp/tmpx5sal5wo.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_race_collision_helper(i,\
    \ j) == true\n                collisions += 1\n            end\n        end\n\
    \    end\n    return collisions\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp98cq13mf.jl:28\n  Test threw exception\n\
    \  Expression: candidate(2) == 4\n  UndefVarError: car_race_collision_helper not\
    \ defined\n  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmp98cq13mf.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp98cq13mf.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp98cq13mf.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp98cq13mf.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(3) == 9\n  UndefVarError: car_race_collision_helper not defined\n\
    \  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmp98cq13mf.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp98cq13mf.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp98cq13mf.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp98cq13mf.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(4) == 16\n  UndefVarError: car_race_collision_helper not defined\n\
    \  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmp98cq13mf.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp98cq13mf.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp98cq13mf.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp98cq13mf.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(8) == 64\n  UndefVarError: car_race_collision_helper not defined\n\
    \  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmp98cq13mf.jl:16\n\
    \   [2] macro expansio"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp98cq13mf.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = 1:n\n            if i != j\n                if abs(car_speed(i,j))\
    \ > car_speed(i,j+1)\n                    collisions += 1\n                end\n\
    \            end\n        end\n    end\n    return collisions\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1yd37l37.jl:25\nin expression starting at\
    \ /tmp/tmp1yd37l37.jl:25\n"
  exit_code: 1
  status: SyntaxError
