name: HumanEval_35_max_element
language: julia
results:
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    maximum\
    \ = l[1]\n    for i in l[2:end]\n        if i > maximum\n            maximum =\
    \ i\n        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the minimum element in the list.\n    >>> min_element([1,\
    \ 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    -10\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = max_element;\n\
    \t@test(candidate([1, 2, 3]) == 3)\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9,\
    \ 0, 124, 1, -10]) == 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpggu1dkd5.jl:16\nin expression starting at\
    \ /tmp/tmpggu1dkd5.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    maximum\
    \ = max_element(l)\n    if maximum == -1\n        error(\"max_element failed\"\
    )\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\nmax_element([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the sum of the elements in a list.\n>>> sum([1, 2, 3])\n6\n>>>\
    \ sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n123\n>>> sum([5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10, -5, -6, -7, -8])\n-77\n>>> sum([5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10, -5, -6, -7, -8, 9])\n-77\n>>> sum([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10, -5, -6, -7, -8, 9, 10])\n-77\n>>> sum([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10, -5, -6, -7, -8, 9, 10, 11])\n-77\n>>> sum([5, 3, -5, 2, -3, 3,\
    \ 9, 0, 123, 1, -10, -5, -6, -7, -8, 9, 10, 11, 12])\n-77\n>>> sum([5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10, -5, -6, -7, -8, 9, 10, 11, 12, 13])\n-77\n>>> sum([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, -5, -6, -7, -8, 9, 10, 11, 12, 13, 14])\n\
    -77\n>>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, -5, -6, -7, -8, 9, 10, 11,\
    \ 12, 13, 14, 15])\n-77\n>>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, -5, -6,\
    \ -7, -8, 9, 10, 11, 12, 13, 14, 15, 16])\n-77\n>>> sum([5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10, -5, -6, -7, -8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n-77\n>>>\
    \ sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, -5, -6, -7, -8, 9, 10, 11, 12, 13,\
    \ 14, 15, 16, 17, 18])\n-77\n>>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, -5,\
    \ -6, -7, -8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n-77\n>>> sum([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -\nusing Test\n\n@testset begin\n\ncandidate = max_element;\n\
    \t@test(candidate([1, 2, 3]) == 3)\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9,\
    \ 0, 124, 1, -10]) == 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp__rk181s.jl:14\nin expression starting at\
    \ /tmp/tmp__rk181s.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    if length(l)\
    \ == 0 \n        throw(ArgumentError(\"List is empty\"))\n    end\n    largest\
    \ = l[1]\n    for i in 2:length(l)\n        if l[i] > largest \n            largest\
    \ = l[i]\n        end\n    end\n    return largest\nend\n</cell>\n<code language=julia-1.4>\n\
    using Test\n\n@testset begin\n\ncandidate = max_element;\n\t@test(candidate([1,\
    \ 2, 3]) == 3)\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) ==\
    \ 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa88cf3xv.jl:19\nin expression starting at\
    \ /tmp/tmpa88cf3xv.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    maximum\
    \ = l[1]\n    for i in l[2:end]\n        if i > maximum\n            maximum =\
    \ i\n        end\n    end\n    maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = max_element;\n\t@test(candidate([1,\
    \ 2, 3]) == 3)\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) ==\
    \ 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph0tvpehs.jl:16\nin expression starting at\
    \ /tmp/tmph0tvpehs.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    maximum\
    \ = l[1]\n    for i in l[2:end]\n        if i > maximum\n            maximum =\
    \ i\n        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the minimum element in the list.\n    >>> min_element([1,\
    \ 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    -10\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = max_element;\n\
    \t@test(candidate([1, 2, 3]) == 3)\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9,\
    \ 0, 124, 1, -10]) == 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsy_9oz7p.jl:16\nin expression starting at\
    \ /tmp/tmpsy_9oz7p.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    maximum\
    \ = l[1]\n    for i in l[2:end]\n        if i > maximum\n            maximum =\
    \ i\n        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = max_element;\n\t@test(candidate([1,\
    \ 2, 3]) == 3)\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) ==\
    \ 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1csykt2p.jl:16\nin expression starting at\
    \ /tmp/tmp1csykt2p.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    if length(l)\
    \ == 0 \n        throw(ArgumentError(\"List is empty\"))\n    end\n    \n    maximum\
    \ = l[1]\n    for i in 2:length(l) \n        if l[i] > maximum \n            maximum\
    \ = l[i]\n        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = max_element;\n\t@test(candidate([1,\
    \ 2, 3]) == 3)\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) ==\
    \ 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpen9qxwf1.jl:20\nin expression starting at\
    \ /tmp/tmpen9qxwf1.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    maximum\
    \ = l[1]\n    for x in l[2:end]\n        if x > maximum\n            maximum =\
    \ x\n        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = max_element;\n\t@test(candidate([1,\
    \ 2, 3]) == 3)\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) ==\
    \ 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9bmbxffr.jl:16\nin expression starting at\
    \ /tmp/tmp9bmbxffr.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    if length(l)\
    \ == 0 \n        throw(ArgumentError(\"List is empty\"))\n    end\n    maximum\
    \ = l[1]\n    for i in 2:length(l) \n        if l[i] > maximum \n            maximum\
    \ = l[i]\n        end\n    end\n    return maximum\nend\n</cell>\n<text>\nExercise\
    \ 3: Write a function that returns the minimum element in the list.\n    >>> min_element([1,\
    \ 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    -10\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = max_element;\n\
    \t@test(candidate([1, 2, 3]) == 3)\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9,\
    \ 0, 124, 1, -10]) == 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmi04euoh.jl:19\nin expression starting at\
    \ /tmp/tmpmi04euoh.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    if length(l)\
    \ == 0 \n        throw(ArgumentError(\"List is empty\"))\n    end\n    maximum\
    \ = l[1]\n    for i in 2:length(l) \n        if l[i] > maximum \n            maximum\
    \ = l[i]\n        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = max_element;\n\t@test(candidate([1,\
    \ 2, 3]) == 3)\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) ==\
    \ 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc862iof5.jl:19\nin expression starting at\
    \ /tmp/tmpc862iof5.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    \n  \
    \  if length(l) == 0 \n        return 0 \n    else \n        return maximum(l)\
    \ \nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\n\
    candidate = max_element;\n\t@test(candidate([1, 2, 3]) == 3)\n\t@test(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxhc1lxd9.jl:14\nin expression starting at\
    \ /tmp/tmpxhc1lxd9.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    if length(l)\
    \ == 0 \n        throw(ArgumentError(\"Empty list\"))\n    end\n    \n    maximum\
    \ = l[1]\n    for i in 2:length(l) \n        if l[i] > maximum \n            maximum\
    \ = l[i]\n        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the sum of the elements in the list.\n    >>>\
    \ sum([1, 2, 3])\n    6\n    >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = max_element;\n\
    \t@test(candidate([1, 2, 3]) == 3)\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9,\
    \ 0, 124, 1, -10]) == 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgo_x3g3b.jl:20\nin expression starting at\
    \ /tmp/tmpgo_x3g3b.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    maximum\
    \ = l[1]\n    for i in l[2:end]\n        if i > maximum\n            maximum =\
    \ i\n        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = max_element;\n\t@test(candidate([1,\
    \ 2, 3]) == 3)\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) ==\
    \ 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcjw3pco1.jl:16\nin expression starting at\
    \ /tmp/tmpcjw3pco1.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    if length(l)\
    \ == 0 \n        throw(ArgumentError(\"Cannot find max element of empty list\"\
    ))\n    end\n    maximum = l[1]\n    for i in 2:length(l) \n        if l[i] >\
    \ maximum \n            maximum = l[i]\n        end\n    end\n    return maximum\n\
    end\n</cell>\n<text>\nExercise 7\nWrite a function that returns the sum of the\
    \ elements in a list.\n    >>> sum([1, 2, 3])\n    6\n    >>> sum([1, 2, 3, 0])\n\
    \    6\n    >>> sum([1, 2, 3, -1])\n    6\n    >>> sum([1, 2, 3, 0])\n    6\n\
    \    >>> sum([1, 2, 3, -1])\n    6\n    >>> sum([1, 2, 3, 0])\n    6\n    >>>\
    \ sum([1, 2, 3, -1])\n    6\n    >>> sum([1, 2, 3, 0])\n    6\n    >>> sum([1,\
    \ 2, 3, -1])\n    6\n    >>> sum([1, 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, -1])\n\
    \    6\n    >>> sum([1, 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, -1])\n    6\n\
    \    >>> sum([1, 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, -1])\n    6\n    >>>\
    \ sum([1, 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, -1])\n    6\n    >>> sum([1,\
    \ 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, -1])\n    6\n    >>> sum([1, 2, 3, 0])\n\
    \    6\n    >>> sum([1, 2, 3, -1])\n    6\n    >>> sum([1, 2, 3, 0])\n    6\n\
    \    >>> sum([1, 2, 3, -1])\n    6\n    >>> sum([1, 2, 3, 0])\n    6\n    >>>\
    \ sum([1, 2, 3, -1])\n    6\n    >>> sum([1, 2, 3, 0])\n    6\n    >>> sum([1,\
    \ 2, 3, -1])\n    6\n    >>> sum([1, 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, -1])\n\
    \    6\n    >>> sum([1, 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, -1])\n    6\n\
    \    >>> sum([1, 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, -1])\n    6\n    >>>\
    \ sum([1, 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, -1])\n    6\n    >>> sum([1,\
    \ 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, -1])\n    6\n    >>> sum([1, 2, 3, 0])\n\
    \    6\n    >>> sum([1, 2, 3, -1])\n    6\n    >>> sum([1, 2, 3, 0])\n    6\n\
    \    >>> sum([1, 2, 3, -1])\n    6\n    >>> sum([1, 2, 3, 0])\n    6\n    >>>\
    \ sum([1, 2, 3, -1])\n    6\n    >>> sum([1, 2, 3, 0])\n    6\n    >>> sum([1,\
    \ 2, 3, -1])\n    6\n    >>> sum([1, 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, -1])\n\
    \    6\n    >>> sum([1, 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, -1])\n\nusing\
    \ Test\n\n@testset begin\n\ncandidate = max_element;\n\t@test(candidate([1, 2,\
    \ 3]) == 3)\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuu_1xo95.jl:19\nin expression starting at\
    \ /tmp/tmpuu_1xo95.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    if length(l)\
    \ == 0 \n        throw(ArgumentError(\"List is empty\"))\n    end\n    maximum\
    \ = l[1]\n    for i in 2:length(l) \n        if l[i] > maximum \n            maximum\
    \ = l[i]\n        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.4>\n\
    max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the minimum element in the list.\n    >>> min_element([1,\
    \ 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    -10\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = max_element;\n\
    \t@test(candidate([1, 2, 3]) == 3)\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9,\
    \ 0, 124, 1, -10]) == 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7hh_kwax.jl:19\nin expression starting at\
    \ /tmp/tmp7hh_kwax.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    \n  \
    \  maximum = l[1]\n    for i in l[2:end]\n        if i > maximum\n           \
    \ maximum = i\n        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = max_element;\n\t@test(candidate([1,\
    \ 2, 3]) == 3)\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) ==\
    \ 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplqrngq14.jl:17\nin expression starting at\
    \ /tmp/tmplqrngq14.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    maximum\
    \ = l[1]\n    for i in l[2:end]\n        if i > maximum\n            maximum =\
    \ i\n        end\n    end\n    return maximum\nend\n</cell>\n<text>\nmax_element()\n\
    using Test\n\n@testset begin\n\ncandidate = max_element;\n\t@test(candidate([1,\
    \ 2, 3]) == 3)\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) ==\
    \ 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl0cxztbg.jl:16\nin expression starting at\
    \ /tmp/tmpl0cxztbg.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    maximum\
    \ = l[1]\n    for i in l[2:end]\n        if i > maximum\n            maximum =\
    \ i\n        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = max_element;\n\t@test(candidate([1,\
    \ 2, 3]) == 3)\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) ==\
    \ 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3bih2zoh.jl:16\nin expression starting at\
    \ /tmp/tmp3bih2zoh.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    \n  \
    \  maximum = l[1]\n    for x in l[2:end]\n        if x > maximum\n           \
    \ maximum = x\n        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = max_element;\n\t@test(candidate([1,\
    \ 2, 3]) == 3)\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) ==\
    \ 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvnd7o91v.jl:17\nin expression starting at\
    \ /tmp/tmpvnd7o91v.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    maximum\
    \ = l[1]\n    for i in l[2:end]\n        if i > maximum\n            maximum =\
    \ i\n        end\n    end\n    maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"Return minimum element in the list.\n    >>> min_element([1, 2, 3])\n  \
    \  1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = max_element;\n\t@test(candidate([1,\
    \ 2, 3]) == 3)\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) ==\
    \ 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4lx3d38j.jl:16\nin expression starting at\
    \ /tmp/tmp4lx3d38j.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    maximum\
    \ = l[1]\n    for x in l[2:end]\n        if x > maximum\n            maximum =\
    \ x\n        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = max_element;\n\t@test(candidate([1,\
    \ 2, 3]) == 3)\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) ==\
    \ 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppjn_03ni.jl:16\nin expression starting at\
    \ /tmp/tmppjn_03ni.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    maximum\
    \ = l[1]\n    for i in l[2:end]\n        if i > maximum\n            maximum =\
    \ i\n        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.3>\n\
    max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n</cell>\n<text>\nExercise\
    \ 3.2\nWrite a function that returns the minimum element in the list.\n    >>>\
    \ min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    -10\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = max_element;\n\t@test(candidate([1, 2, 3]) == 3)\n\t@test(candidate([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp2crig4f.jl:16\nin expression starting at\
    \ /tmp/tmpp2crig4f.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    maximum\
    \ = l[1]\n    for i in 2:length(l)\n        if l[i] > maximum\n            maximum\
    \ = l[i]\n        end\n    end\n    return maximum\nend\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThis does not provide an answer to the question. To critique or\
    \ request clarification from an author, leave a comment below their post. - [From\
    \ Review](/review/low-quality-posts/27859524)\n<|/ c |>\n<| c |>\nI believe this\
    \ does answer the question. He asked how to find the maximum element in a list.\
    \ He also asked how to do it efficiently. He also asked how to do it in a functional\
    \ programming style. He also asked how to do it in a \"functional style\" without\
    \ using loops. He also asked how to do it in a \"functional style\" without using\
    \ loops. He also asked how to do it in a \"functional style\" without using loops.\
    \ He also asked how to do it in a \"functional style\" without using loops. He\
    \ also asked how to do it in a \"functional style\" without using loops. He also\
    \ asked how to do it in a \"functional style\" without using loops. He also asked\
    \ how to do it in a \"functional style\" without using loops. He also asked how\
    \ to do it in a \"functional style\" without using loops. He also asked how to\
    \ do it in a \"functional style\" without using loops. He also asked how to do\
    \ it in a \"functional style\" without using loops. He also asked how to do it\
    \ in a \"functional style\" without using loops. He also asked how to do it in\
    \ a \"functional style\" without using loops. He also asked how to do it in a\
    \ \"functional style\" without using loops. He also asked how to do it in a \"\
    functional style\" without using loops. He also asked how to do it in a \"functional\
    \ style\" without using loops. He also asked how to do it in a \"functional style\"\
    \ without using loops. He also asked how to do it in a \"functional style\" without\
    \ using loops. He also asked how to do it in a \"functional style\" without using\
    \ loops. He also asked how to do it in a \"functional style\" without using loops.\
    \ He also asked how to do it in a \"functional style\" without using loops. He\
    \ also asked how to do it in a \"functional style\" without using loops. He also\
    \ asked how to do it in a \nusing Test\n\n@testset begin\n\ncandidate = max_element;\n\
    \t@test(candidate([1, 2, 3]) == 3)\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9,\
    \ 0, 124, 1, -10]) == 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpchku97x4.jl:16\nin expression starting at\
    \ /tmp/tmpchku97x4.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    maximum\
    \ = l[1]\n    for i in l[2:end]\n        if i > maximum\n            maximum =\
    \ i\n        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the number of elements in the list that satisfy\
    \ the condition $x>0$. For example, if the list is [5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10], the function should return 6.\nusing Test\n\n@testset begin\n\n\
    candidate = max_element;\n\t@test(candidate([1, 2, 3]) == 3)\n\t@test(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbhilr6o6.jl:16\nin expression starting at\
    \ /tmp/tmpbhilr6o6.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    maximum\
    \ = l[1]\n    for i in l[2:end]\n        if i > maximum\n            maximum =\
    \ i\n        end\n    end\n    maximum\nend\n</cell>\n<text>\nExercise 2: Write\
    \ a function that returns the sum of the elements in the list.\n    >>> sum([1,\
    \ 2, 3])\n    6\n    >>> sum([10, 20, 30])\n    60\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = max_element;\n\t@test(candidate([1, 2, 3]) == 3)\n\
    \t@test(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyd2ej_47.jl:16\nin expression starting at\
    \ /tmp/tmpyd2ej_47.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    maximum\
    \ = l[1]\n    for x in l[2:end]\n        if x > maximum\n            maximum =\
    \ x\n        end\n    end\n    return maximum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = max_element;\n\t@test(candidate([1, 2, 3]) == 3)\n\t@test(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    if length(l)\
    \ == 0 \n        throw(ArgumentError(\"Empty list\"))\n    end\n    maximum =\
    \ l[1]\n    for x in l[2:end]\n        if x > maximum\n            maximum = x\n\
    \        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the sum of the elements in the list.\n    >>>\
    \ sum([1, 2, 3])\n    6\n    >>> sum([1, 2, 3, 5])\n    10\n    >>> sum([1, 2,\
    \ 3, 5])\n    10\n    >>> sum([1, 2, 3, 5])\n    10\n    >>> sum([1, 2, 3, 5])\n\
    \    10\n    >>> sum([1, 2, 3, 5])\n    10\n    >>> sum([1, 2, 3, 5])\n    10\n\
    \    >>> sum([1, 2, 3, 5])\n    10\n    >>> sum([1, 2, 3, 5])\n    10\n    >>>\
    \ sum([1, 2, 3, 5])\n    10\n    >>> sum([1, 2, 3, 5])\n    10\n    >>> sum([1,\
    \ 2, 3, 5])\n    10\n    >>> sum([1, 2, 3, 5])\n    10\n    >>> sum([1, 2, 3,\
    \ 5])\n    10\n    >>> sum([1, 2, 3, 5])\n    10\n    >>> sum([1, 2, 3, 5])\n\
    \    10\n    >>> sum([1, 2, 3, 5])\n    10\n    >>> sum([1, 2, 3, 5])\n    10\n\
    \    >>> sum([1, 2, 3, 5])\n    10\n    >>> sum([1, 2, 3, 5])\n    10\n    >>>\
    \ sum([1, 2, 3, 5])\n    10\n    >>> sum([1, 2, 3, 5])\n    10\n    >>> sum([1,\
    \ 2, 3, 5])\n    10\n    >>> sum([1, 2, 3, 5])\n    10\n    >>> sum([1, 2, 3,\
    \ 5])\n    10\n    >>> sum([1, 2, 3, 5])\n    10\n    >>> sum([1, 2, 3, 5])\n\
    \    10\n    >>> sum([1, 2, 3, 5])\n    10\n    >>> sum([1, 2, 3, 5])\n    10\n\
    \    >>> sum([1, 2, 3, 5])\n    10\n    >>> sum([1, 2, 3, 5])\n    10\n    >>>\
    \ sum([1, 2, 3, 5])\n    10\n    >>> sum([1, 2, 3, 5])\n    10\n    >>> sum([1,\
    \ 2, 3, 5])\n    10\n    >>> sum([1, 2, 3, 5])\n    10\n    >>> sum([1, 2, 3,\
    \ 5])\n    10\n    >>> sum([1, 2, 3, 5])\n    10\n    >>> sum([1, 2, 3, 5])\n\
    \    10\n    >>> sum([1, 2, 3, 5])\n    10\n    >>> sum([1, 2, 3, 5])\n    10\n\
    \    >>> sum([1, 2, 3, 5])\n    10\n    >>> sum([1, 2, 3, 5])\n    10\n    >>>\
    \ sum([1, 2, 3, 5])\n    10\n    >>> sum([1, 2, 3, 5])\n    10\n    >>> sum([1,\
    \ 2, 3, 5])\n    10\n    >>> sum([1, 2, 3, 5])\n    10\n    >>> sum([1, 2, 3,\
    \ 5])\n\nusing Test\n\n@testset begin\n\ncandidate = max_element;\n\t@test(candidate([1,\
    \ 2, 3]) == 3)\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) ==\
    \ 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp66jy2stx.jl:19\nin expression starting at\
    \ /tmp/tmp66jy2stx.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    maximum\
    \ = l[1]\n    for i in l[2:end]\n        if i > maximum\n            maximum =\
    \ i\n        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = max_element;\n\t@test(candidate([1,\
    \ 2, 3]) == 3)\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) ==\
    \ 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpus1cxild.jl:16\nin expression starting at\
    \ /tmp/tmpus1cxild.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    if length(l)\
    \ == 0 \n        throw(ArgumentError(\"Empty list\"))\n    end\n    maximum =\
    \ l[1]\n    for i in 2:length(l) \n        if l[i] > maximum \n            maximum\
    \ = l[i]\n        end\n    end\n    return maximum\nend\n</cell>\n<text>\nExercise\
    \ 10\nWrite a function that returns the minimum element in the list.\n    >>>\
    \ min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n    -10\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = max_element;\n\t@test(candidate([1, 2, 3]) == 3)\n\t@test(candidate([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpubrtkad4.jl:19\nin expression starting at\
    \ /tmp/tmpubrtkad4.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    if length(l)\
    \ == 0 \n        throw(ArgumentError(\"List is empty\"))\n    end\n    largest\
    \ = l[1]\n    for i in 2:length(l) \n        if l[i] > largest \n            largest\
    \ = l[i]\n        end\n    end\n    return largest\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = max_element;\n\t@test(candidate([1,\
    \ 2, 3]) == 3)\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) ==\
    \ 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcksvdf9d.jl:19\nin expression starting at\
    \ /tmp/tmpcksvdf9d.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    maximum\
    \ = l[1]\n    for i in 2:length(l)\n        if l[i] > maximum\n            maximum\
    \ = l[i]\n        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = max_element;\n\t@test(candidate([1,\
    \ 2, 3]) == 3)\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) ==\
    \ 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphqjkj5nt.jl:16\nin expression starting at\
    \ /tmp/tmphqjkj5nt.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    maximum\
    \ = l[1]\n    for i in l[2:end]\n        if i > maximum\n            maximum =\
    \ i\n        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = max_element;\n\t@test(candidate([1,\
    \ 2, 3]) == 3)\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) ==\
    \ 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8m8tci31.jl:16\nin expression starting at\
    \ /tmp/tmp8m8tci31.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    if length(l)\
    \ == 0 \n        throw(ArgumentError(\"Empty list\"))\n    end\n    \n    maximum\
    \ = l[1]\n    for i in 2:length(l) \n        if maximum < l[i] \n            maximum\
    \ = l[i]\n        end\n    end\n    return maximum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = max_element;\n\t@test(candidate([1, 2, 3]) == 3)\n\t@test(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    maximum\
    \ = l[1]\n    for i in l[2:end]\n        if i > maximum\n            maximum =\
    \ i\n        end\n    end\n    return maximum\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the minimum element in the list.\n    >>> min_element([1,\
    \ 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    -10\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = max_element;\n\
    \t@test(candidate([1, 2, 3]) == 3)\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9,\
    \ 0, 124, 1, -10]) == 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgq4r5aps.jl:16\nin expression starting at\
    \ /tmp/tmpgq4r5aps.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    \n  \
    \  maximum = l[1]\n    for i in l[2:end]\n        if i > maximum\n           \
    \ maximum = i\n        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n</cell>\n<text>\nExercise\
    \ 9\nWrite a function that returns the sum of the elements in the list.\n    >>>\
    \ sum([1, 2, 3])\n    6\n    >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = max_element;\n\
    \t@test(candidate([1, 2, 3]) == 3)\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9,\
    \ 0, 124, 1, -10]) == 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsh6kq2gc.jl:17\nin expression starting at\
    \ /tmp/tmpsh6kq2gc.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    if length(l)\
    \ == 0 \n        throw(ArgumentError(\"Empty list\"))\n    end\n    \n    maximum\
    \ = l[1]\n    for i in 2:length(l) \n        if l[i] > maximum \n            maximum\
    \ = l[i]\n        end\n    end\n    return maximum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = max_element;\n\t@test(candidate([1, 2, 3]) == 3)\n\t@test(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    maximum\
    \ = l[1]\n    for i in l[2:end]\n        if i > maximum\n            maximum =\
    \ i\n        end\n    end\n    return maximum\nend\n</cell>\n<text>\nmax_element()\n\
    This function returns the maximum element in the list.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = max_element;\n\t@test(candidate([1, 2, 3]) == 3)\n\t@test(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprrfafyy8.jl:16\nin expression starting at\
    \ /tmp/tmprrfafyy8.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    maximum\
    \ = l[1]\n    for i in l[2:end]\n        if i > maximum\n            maximum =\
    \ i\n        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = max_element;\n\t@test(candidate([1,\
    \ 2, 3]) == 3)\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) ==\
    \ 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1f_l2usd.jl:16\nin expression starting at\
    \ /tmp/tmp1f_l2usd.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    maximum\
    \ = l[1]\n    for i in l[2:end]\n        if i > maximum\n            maximum =\
    \ i\n        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the minimum element in the list.\n    >>> min_element([1,\
    \ 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    -10\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = max_element;\n\
    \t@test(candidate([1, 2, 3]) == 3)\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9,\
    \ 0, 124, 1, -10]) == 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc5thfaqz.jl:16\nin expression starting at\
    \ /tmp/tmpc5thfaqz.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    maximum\
    \ = l[1]\n    for i in l[2:end]\n        if i > maximum\n            maximum =\
    \ i\n        end\n    end\n    return maximum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = max_element;\n\t@test(candidate([1, 2, 3]) == 3)\n\t@test(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    maximum\
    \ = l[1]\n    for i in l[2:end]\n        if i > maximum\n            maximum =\
    \ i\n        end\n    end\n    return maximum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = max_element;\n\t@test(candidate([1, 2, 3]) == 3)\n\t@test(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    maximum\
    \ = l[1]\n    for i in l[2:end]\n        if i > maximum\n            maximum =\
    \ i\n        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = max_element;\n\t@test(candidate([1,\
    \ 2, 3]) == 3)\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) ==\
    \ 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk68efye2.jl:16\nin expression starting at\
    \ /tmp/tmpk68efye2.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    if length(l)\
    \ == 0 \n        throw(ArgumentError(\"List is empty\"))\n    end\n    maximum\
    \ = l[1]\n    for i in 2:length(l) \n        if l[i] > maximum \n            maximum\
    \ = l[i]\n        end\n    end\n    return maximum\nend\n</cell>\n<text>\nmax_element\n\
    using Test\n\n@testset begin\n\ncandidate = max_element;\n\t@test(candidate([1,\
    \ 2, 3]) == 3)\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) ==\
    \ 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp904mjxyd.jl:19\nin expression starting at\
    \ /tmp/tmp904mjxyd.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    maximum\
    \ = l[1]\n    for i in l[2:end]\n        if i > maximum\n            maximum =\
    \ i\n        end\n    end\n    maximum\nend\n</code>\n<|/ a tags=julia,arrays,function\
    \ |>\n<| c |>\nThis does not answer the question. The question asks how to write\
    \ a function that returns the maximum element in a list. Your function returns\
    \ the maximum element in the first element of the list. Also, your function does\
    \ not return the maximum element in the list.\n<|/ c |>\n<| c |>\nThe question\
    \ asks how to write a function that returns the maximum element in a list. Your\
    \ function returns the maximum element in the first element of the list. Also,\
    \ your function does not return the maximum element in the list.\n<|/ c |>\n<|\
    \ c |>\nThe question asks how to write a function that returns the maximum element\
    \ in a list. Your function returns the maximum element in the first element of\
    \ the list. Also, your function does not return the maximum element in the list.\n\
    <|/ c |>\n<| c |>\nThe question asks how to write a function that returns the\
    \ maximum element in a list. Your function returns the maximum element in the\
    \ first element of the list. Also, your function does not return the maximum element\
    \ in the list.\n<|/ c |>\n<| c |>\nThe question asks how to write a function that\
    \ returns the maximum element in a list. Your function returns the maximum element\
    \ in the first element of the list. Also, your function does not return the maximum\
    \ element in the list.\n<|/ c |>\n<| a dscore=5 |>\n<code>\njulia> maximum(A)\n\
    </code>\n<|/ a tags=julia,arrays,function |>\n<| c |>\nThis does not answer the\
    \ question. The question asks how to write a function that returns the maximum\
    \ element in a list. Your function returns the maximum element in the first element\
    \ of the list. Also, your function does not return the maximum element in the\
    \ list.\n<|/ c |>\n<| c |>\nThe question asks how to write a function that returns\
    \ the maximum element in a list. Your function returns the maximum element in\
    \ the first element of the list. Also, your function does not return the maximum\
    \ element in the list.\n<|/ c |>\n<| c |>\nThe question asks how to write a function\
    \ that returns the maximum element in a list. Your function returns the maximum\
    \ element in the first element of the list. Also, your function does not return\
    \ the maximum element in the list.\n<|/ c |>\n<| c |>\nThe question asks how to\
    \ write a function that returns the maximum element in a list. Your function returns\
    \ the maximum element in the first element of the list. Also, your function does\
    \ not return the maximum element in the list.\n<|/ c |>\n<| c |>\nThe question\
    \ asks how to write a function that returns the maximum element in a list. Your\
    \ function returns the maximum element in the first element of the list. Also,\
    \ your function does not return the maximum \nusing Test\n\n@testset begin\n\n\
    candidate = max_element;\n\t@test(candidate([1, 2, 3]) == 3)\n\t@test(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpupjdjawj.jl:16\nin expression starting at\
    \ /tmp/tmpupjdjawj.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    maximum\
    \ = l[1]\n    for i in 2:length(l)\n        if l[i] > maximum\n            maximum\
    \ = l[i]\n        end\n    end\n    return maximum\nend\n</code>\n<|/ a tags=julia,arrays,max\
    \ |>\n<| c |>\nThis doesn't work if there are multiple `Int64`s in the array.\
    \ For example, `max_element([Int64(1), Int64(2)])` returns `Int64(2)` instead\
    \ of `Int64(1)`.\n<|/ c |>\n<| c |>\nYes, I realized that after I posted my comment.\
    \ I've updated my answer accordingly.\n<|/ c |>\n<| c |>\nI believe this should\
    \ be the accepted answer. `max_element` should return a `Int64` and not a `Vector{Int64}`.\n\
    <|/ c |>\n<| a tags=julia,arrays,max |>\n<code>\nusing Test\n\n@testset begin\n\
    \ncandidate = max_element;\n\t@test(candidate([1, 2, 3]) == 3)\n\t@test(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpthu71y_h.jl:16\nin expression starting at\
    \ /tmp/tmpthu71y_h.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    \n  \
    \  maximum = l[1]\n    for x in l[2:end]\n        if x > maximum\n           \
    \ maximum = x\n        end\n    end\n    return maximum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = max_element;\n\t@test(candidate([1, 2, 3]) == 3)\n\t@test(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    maximum\
    \ = l[1]\n    for i in l[2:end]\n        if i > maximum\n            maximum =\
    \ i\n        end\n    end\n    return maximum\nend\n</code>\n<|/ a tags=julia,list\
    \ |>\n<| c |>\nThis does not answer the question. `max_element` returns the maximum\
    \ element in the list, but does not return the index of the maximum element. Also,\
    \ `max_element` does not return `nothing` when the list is empty.\n<|/ c |>\n\
    <| c |>\nThanks for the comment. I updated the answer to include a solution that\
    \ returns the index of the maximum element.\n<|/ c |>\n<| a dscore=4 |>\nThe Julia\
    \ standard library has several functions for finding maximum and minimum elements\
    \ in a collection:\nusing Test\n\n@testset begin\n\ncandidate = max_element;\n\
    \t@test(candidate([1, 2, 3]) == 3)\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9,\
    \ 0, 124, 1, -10]) == 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzm8v2371.jl:16\nin expression starting at\
    \ /tmp/tmpzm8v2371.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    \n  \
    \  if length(l) == 0 \n        throw(ArgumentError(\"Empty list\"))\n    end\n\
    \    \n    maximum = l[1]\n    for i in 2:length(l) \n        if l[i] > maximum\
    \ \n            maximum = l[i]\n        end\n    end\n    return maximum\nend\n\
    </cell>\n<text>\nmax_element()\nusing Test\n\n@testset begin\n\ncandidate = max_element;\n\
    \t@test(candidate([1, 2, 3]) == 3)\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9,\
    \ 0, 124, 1, -10]) == 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppx1_7bjf.jl:21\nin expression starting at\
    \ /tmp/tmppx1_7bjf.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    maximum\
    \ = l[1]\n    for i in l[2:end]\n        if i > maximum\n            maximum =\
    \ i\n        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = max_element;\n\t@test(candidate([1,\
    \ 2, 3]) == 3)\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) ==\
    \ 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt4rn6w8t.jl:16\nin expression starting at\
    \ /tmp/tmpt4rn6w8t.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    maximum\
    \ = l[1]\n    for i in 2:length(l)\n        if l[i] > maximum\n            maximum\
    \ = l[i]\n        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = max_element;\n\t@test(candidate([1,\
    \ 2, 3]) == 3)\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) ==\
    \ 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprmt3r9iq.jl:16\nin expression starting at\
    \ /tmp/tmprmt3r9iq.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    if length(l)\
    \ == 0 \n        throw(ArgumentError(\"List is empty\"))\n    end\n    largest\
    \ = l[1]\n    for i in 2:length(l) \n        if l[i] > largest \n            largest\
    \ = l[i]\n        end\n    end\n    return largest\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = max_element;\n\t@test(candidate([1,\
    \ 2, 3]) == 3)\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) ==\
    \ 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpak53nwcy.jl:19\nin expression starting at\
    \ /tmp/tmpak53nwcy.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    if length(l)\
    \ == 0 \n        throw(ArgumentError(\"Empty list\"))\n    end\n    \n    maximum\
    \ = l[1]\n    for i in 2:length(l) \n        if l[i] > maximum \n            maximum\
    \ = l[i]\n        end\n    end\n    \n    return maximum\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = max_element;\n\t@test(candidate([1, 2, 3]) == 3)\n\
    \t@test(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    maximum\
    \ = l[1]\n    for i in l[2:end]\n        if i > maximum\n            maximum =\
    \ i\n        end\n    end\n    maximum\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns the sum of the elements in the list.\n>>> sum([1, 2,\
    \ 3])\n6\n>>> sum([1, -2, 3])\n2\n>>> sum([1, -2, -3, 4])\n6\n>>> sum([1, -2,\
    \ -3, 4, 5])\n10\n>>> sum([1, -2, -3, 4, 5], 10)\n10\n>>> sum([1, -2, -3, 4, 5],\
    \ 0)\n10\n>>> sum([1, -2, -3, 4, 5], -10)\n10\n>>> sum([1, -2, -3, 4, 5], -0)\n\
    10\n>>> sum([1, -2, -3, 4, 5], NaN)\n10\n>>> sum([1, -2, -3, 4, 5], Inf)\n10\n\
    >>> sum([1, -2, -3, 4, 5], -Inf)\n10\n>>> sum([1, -2, -3, 4, 5], Float64(0))\n\
    10\n>>> sum([1, -2, -3, 4, 5], Float64(-10))\n10\n>>> sum([1, -2, -3, 4, 5], Float64(-0))\n\
    10\n>>> sum([1, -2, -3, 4, 5], Float64(NaN))\n10\n>>> sum([1, -2, -3, 4, 5], Float64(Inf))\n\
    10\n>>> sum([1, -2, -3, 4, 5], Float64(-Inf))\n10\n>>> sum([1, -2, -3, 4, 5],\
    \ Float64(0))\n10\n>>> sum([1, -2, -3, 4, 5], Float64(-10))\n10\n>>> sum([1, -2,\
    \ -3, 4, 5], Float64(-0))\n10\n>>> sum([1, -2, -3, 4, 5], Float64(NaN))\n10\n\
    >>> sum([1, -2, -3, 4, 5], Float64(Inf))\n10\n>>> sum([1, -2, -3, 4, 5], Float64(-Inf))\n\
    10\n>>> sum([1, -2, -3, 4, 5], Float64(0))\n10\n>>> sum([1, -2, -3, 4, 5], Float64(-10))\n\
    10\n>>> sum([1, -2, -3, 4, 5], Float64(-0))\n10\n>>> sum([1, -2, -3, 4, 5], Float64(NaN))\n\
    10\n>>> sum([1, -2, -3, 4, 5], Float64(Inf))\n10\n>>> sum([1, -2, -3, 4, 5], Float64(-Inf))\n\
    10\n>>> sum([1, -2, -3, 4, 5], Float64(0))\n10\n>>> sum([1, -2, -3, 4, 5], Float64(-10))\n\
    10\n>>> sum([1, -2, -3, 4, 5], Float64(-0))\n10\n>>> sum([1, -2, -3, 4, 5], Float64(NaN))\n\
    10\n>>> sum([1, -2, -3, 4, 5], Float64(Inf))\n10\n>>> sum([1, -2, -3, 4, 5], Float64(-Inf))\n\
    10\n>>> sum([1, -2, -3, 4, 5], Float64\nusing Test\n\n@testset begin\n\ncandidate\
    \ = max_element;\n\t@test(candidate([1, 2, 3]) == 3)\n\t@test(candidate([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2kesp4hc.jl:16\nin expression starting at\
    \ /tmp/tmp2kesp4hc.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    maximum\
    \ = l[1]\n    for i in l[2:end]\n        if i > maximum\n            maximum =\
    \ i\n        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.3>\n\
    using Test\n\n@testset begin\n\ncandidate = max_element;\n\t@test(candidate([1,\
    \ 2, 3]) == 3)\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) ==\
    \ 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv_upwbox.jl:16\nin expression starting at\
    \ /tmp/tmpv_upwbox.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    maximum\
    \ = l[1]\n    for i in l[2:end]\n        if i > maximum\n            maximum =\
    \ i\n        end\n    end\n    return maximum\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the index of the first element of the list\
    \ that is greater than a given value.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = max_element;\n\t@test(candidate([1, 2, 3]) == 3)\n\t@test(candidate([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwqeaagf4.jl:16\nin expression starting at\
    \ /tmp/tmpwqeaagf4.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    \n  \
    \  maximum = l[1]\n    for i in l[2:end]\n        if i > maximum\n           \
    \ maximum = i\n        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the minimum element in the list.\n    >>> min_element([1,\
    \ 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    -10\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = max_element;\n\
    \t@test(candidate([1, 2, 3]) == 3)\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9,\
    \ 0, 124, 1, -10]) == 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr38phb6u.jl:17\nin expression starting at\
    \ /tmp/tmpr38phb6u.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    \n  \
    \  maximum = l[1]\n    for e in l[2:end]\n        if e > maximum\n           \
    \ maximum = e\n        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = max_element;\n\t@test(candidate([1,\
    \ 2, 3]) == 3)\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) ==\
    \ 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw9266f8c.jl:17\nin expression starting at\
    \ /tmp/tmpw9266f8c.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    maximum\
    \ = l[1]\n    for x in l[2:end]\n        if x > maximum\n            maximum =\
    \ x\n        end\n    end\n    maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = max_element;\n\t@test(candidate([1,\
    \ 2, 3]) == 3)\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) ==\
    \ 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxxx4osh0.jl:16\nin expression starting at\
    \ /tmp/tmpxxx4osh0.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    maximum\
    \ = l[1]\n    for i in 2:length(l)\n        if l[i] > maximum\n            maximum\
    \ = l[i]\n        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the index of the maximum element in the list.\n\
    \    >>> max_element_index(l::Vector{Int64})\n    >>> max_element_index([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    12\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = max_element;\n\t@test(candidate([1, 2, 3]) == 3)\n\t@test(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdhrnh7vf.jl:16\nin expression starting at\
    \ /tmp/tmpdhrnh7vf.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    maximum\
    \ = l[1]\n    for i in l[2:end]\n        if i > maximum\n            maximum =\
    \ i\n        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = max_element;\n\t@test(candidate([1,\
    \ 2, 3]) == 3)\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) ==\
    \ 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz4lkwp7z.jl:16\nin expression starting at\
    \ /tmp/tmpz4lkwp7z.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    if length(l)\
    \ == 0 \n        throw(ArgumentError(\"Cannot find the max element of an empty\
    \ list\"))\n    end\n    \n    largest = l[1]\n    for i in 2:length(l) \n   \
    \     if l[i] > largest \n            largest = l[i]\n        end\n    end\n \
    \   return largest\nend\n</cell>\n<code language=julia-1.4>\nmax_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n</cell>\n<text>\nExercise\nWrite a function\
    \ that returns the sum of the elements of a list.\nusing Test\n\n@testset begin\n\
    \ncandidate = max_element;\n\t@test(candidate([1, 2, 3]) == 3)\n\t@test(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5cxqq9mn.jl:20\nin expression starting at\
    \ /tmp/tmp5cxqq9mn.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    maximum\
    \ = l[1]\n    for i in l[2:end]\n        if i > maximum\n            maximum =\
    \ i\n        end\n    end\n    return maximum\nend\n</cell>\n<text>\nExercise\
    \ 9\nWrite a function that returns the minimum element in the list.\n    >>> min_element([1,\
    \ 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    -10\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = max_element;\n\
    \t@test(candidate([1, 2, 3]) == 3)\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9,\
    \ 0, 124, 1, -10]) == 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0w6h9hx_.jl:16\nin expression starting at\
    \ /tmp/tmp0w6h9hx_.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    if length(l)\
    \ == 0 \n        throw(ArgumentError(\"List is empty\"))\n    end\n    maximum\
    \ = l[1]\n    for i in 2:length(l) \n        if l[i] > maximum \n            maximum\
    \ = l[i]\n        end\n    end\n    return maximum\nend\n</cell>\n<text>\nExercise\
    \ 6\nWrite a function that returns the minimum element in the list.\n    >>> min_element([1,\
    \ 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    -10\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = max_element;\n\
    \t@test(candidate([1, 2, 3]) == 3)\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9,\
    \ 0, 124, 1, -10]) == 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4704lvkl.jl:19\nin expression starting at\
    \ /tmp/tmp4704lvkl.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    maximum\
    \ = max_element(l)\n    maximum == l ? maximum : maximum(maximum(maximum))\nend\n\
    </code>\n<|/ a dscore=2 |>\n<| c |>\nI like your solution, but I wonder if it\
    \ can be done without recursion.\n<|/ c |>\n<| c |>\nI added a solution without\
    \ recursion.\n<|/ c |>\n<| c |>\nI added a solution without recursion.\n<|/ c\
    \ |>\n<| a tags=julia,list |>\nI like your solution, but I wonder if it can be\
    \ done without recursion.\nusing Test\n\n@testset begin\n\ncandidate = max_element;\n\
    \t@test(candidate([1, 2, 3]) == 3)\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9,\
    \ 0, 124, 1, -10]) == 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppaen4eew.jl:11\nin expression starting at\
    \ /tmp/tmppaen4eew.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    if length(l)\
    \ == 0 \n        throw(ArgumentError(\"Empty list\"))\n    end\n    \n    maximum\
    \ = l[1]\n    for i in 2:length(l) \n        if maximum < l[i] \n            maximum\
    \ = l[i]\n        end\n    end\n    return maximum\nend\n</cell>\n<text>\nmax_element\n\
    using Test\n\n@testset begin\n\ncandidate = max_element;\n\t@test(candidate([1,\
    \ 2, 3]) == 3)\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) ==\
    \ 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbbqg62gw.jl:20\nin expression starting at\
    \ /tmp/tmpbbqg62gw.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    if length(l)\
    \ == 0 \n        throw(ArgumentError(\"Empty list\"))\n    end\n    maximum =\
    \ l[1]\n    for i in 2:length(l) \n        if l[i] > maximum \n            maximum\
    \ = l[i]\n        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.3>\n\
    max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the sum of the elements in the list.\n    >>>\
    \ sum([1, 2, 3])\n    6\n    >>> sum([1, 2, 3, 0])\n    6\n    >>> sum([1, 2,\
    \ 3, 0])\n    6\n    >>> sum([1, 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, 0])\n\
    \    6\n    >>> sum([1, 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, 0])\n    6\n \
    \   >>> sum([1, 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, 0])\n    6\n    >>> sum([1,\
    \ 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, 0])\n\
    \    6\n    >>> sum([1, 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, 0])\n    6\n \
    \   >>> sum([1, 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, 0])\n    6\n    >>> sum([1,\
    \ 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, 0])\n\
    \    6\n    >>> sum([1, 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, 0])\n    6\n \
    \   >>> sum([1, 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, 0])\n    6\n    >>> sum([1,\
    \ 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, 0])\n\
    \    6\n    >>> sum([1, 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, 0])\n    6\n \
    \   >>> sum([1, 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, 0])\n    6\n    >>> sum([1,\
    \ 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, 0])\n\
    \    6\n    >>> sum([1, 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, 0])\n    6\n \
    \   >>> sum([1, 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, 0])\n    6\n    >>> sum([1,\
    \ 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, 0])\n\
    \    6\n    >>> sum([1, 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, 0])\n    6\n \
    \   >>> sum([1, 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, 0])\n    6\n    >>> sum([1,\
    \ 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, 0])\n    6\n    >>> sum([\nusing Test\n\
    \n@testset begin\n\ncandidate = max_element;\n\t@test(candidate([1, 2, 3]) ==\
    \ 3)\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_xha4hxc.jl:19\nin expression starting at\
    \ /tmp/tmp_xha4hxc.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    maximum\
    \ = l[1]\n    for x in l[2:end]\n        if x > maximum\n            maximum =\
    \ x\n        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = max_element;\n\t@test(candidate([1,\
    \ 2, 3]) == 3)\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) ==\
    \ 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjev5nela.jl:16\nin expression starting at\
    \ /tmp/tmpjev5nela.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    maximum\
    \ = l[1]\n    for i in l[2:end]\n        if i > maximum\n            maximum =\
    \ i\n        end\n    end\n    maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"Return minimum element in the list.\n    >>> min_element([1, 2, 3])\n  \
    \  1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = max_element;\n\t@test(candidate([1,\
    \ 2, 3]) == 3)\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) ==\
    \ 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp99un08lt.jl:16\nin expression starting at\
    \ /tmp/tmp99un08lt.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    maximum\
    \ = l[1]\n    for i in l[2:end]\n        if i > maximum\n            maximum =\
    \ i\n        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = max_element;\n\t@test(candidate([1,\
    \ 2, 3]) == 3)\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) ==\
    \ 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpviqzml0s.jl:16\nin expression starting at\
    \ /tmp/tmpviqzml0s.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    maximum\
    \ = l[1]\n    for i in l[2:end]\n        if i > maximum\n            maximum =\
    \ i\n        end\n    end\n    return maximum\nend\n</code>\n<|/ a dscore=1 |>\n\
    <| a dscore=1 |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = max_element;\n\
    \t@test(candidate([1, 2, 3]) == 3)\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9,\
    \ 0, 124, 1, -10]) == 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpabpwi7hl.jl:16\nin expression starting at\
    \ /tmp/tmpabpwi7hl.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    maximum\
    \ = l[1]\n    for i in l[2:end]\n        if i > maximum\n            maximum =\
    \ i\n        end\n    end\n    return maximum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = max_element;\n\t@test(candidate([1, 2, 3]) == 3)\n\t@test(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    maximum\
    \ = l[1]\n    for i in l[2:end]\n        if i > maximum\n            maximum =\
    \ i\n        end\n    end\n    return maximum\nend\n</code>\n<|/ a |>\n<| a tags=julia,arrays,max\
    \ |>\nThe Julia standard library has a function called max.\n<code>\njulia> max([1,\
    \ 2, 3, 4])\n4\nusing Test\n\n@testset begin\n\ncandidate = max_element;\n\t@test(candidate([1,\
    \ 2, 3]) == 3)\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) ==\
    \ 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzh89vn0v.jl:16\nin expression starting at\
    \ /tmp/tmpzh89vn0v.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    maximum\
    \ = l[1]\n    for i in 2:length(l)\n        if l[i] > maximum\n            maximum\
    \ = l[i]\n        end\n    end\n    return maximum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = max_element;\n\t@test(candidate([1, 2, 3]) == 3)\n\t@test(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    \n  \
    \  maximum = l[1]\n    for i in 2:length(l)\n        if l[i] > maximum\n     \
    \       maximum = l[i]\n        end\n    end\n    return maximum\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = max_element;\n\
    \t@test(candidate([1, 2, 3]) == 3)\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9,\
    \ 0, 124, 1, -10]) == 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy6dnttgn.jl:17\nin expression starting at\
    \ /tmp/tmpy6dnttgn.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    maximum\
    \ = l[1]\n    for e in l[2:end]\n        if e > maximum\n            maximum =\
    \ e\n        end\n    end\n    return maximum\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the minimum element in the list.\n    >>> min_element([1,\
    \ 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    -10\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = max_element;\n\
    \t@test(candidate([1, 2, 3]) == 3)\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9,\
    \ 0, 124, 1, -10]) == 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8sc9u82o.jl:16\nin expression starting at\
    \ /tmp/tmp8sc9u82o.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    if length(l)\
    \ == 0 \n        throw(ArgumentError(\"List is empty\"))\n    end\n    largest\
    \ = l[1]\n    for i in 2:length(l) \n        if l[i] > largest \n            largest\
    \ = l[i]\n        end\n    end\n    return largest\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = max_element;\n\t@test(candidate([1, 2, 3]) == 3)\n\t@test(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    maximum\
    \ = l[1]\n    for i in l[2:end]\n        if i > maximum\n            maximum =\
    \ i\n        end\n    end\n    return maximum\nend\n</code>\n<|/ a tags=julia\
    \ |>\n<| c |>\nThis doesn't work for me. `max_element([1,2,3])` returns `3` instead\
    \ of `2`.\n<|/ c |>\n<| c |>\nI tested it on Julia 0.6.2 and it works. I guess\
    \ you have a different version of Julia. Can you please tell me what Julia version\
    \ you have?\n<|/ c |>\n<| c |>\nI tested it on 0.6.2 and it works. I guess you\
    \ have a different version of Julia. Can you please tell me what Julia version\
    \ you have?\n<|/ c |>\n<| c |>\nI tested it on 0.6.2 and it works. I guess you\
    \ have a different version of Julia. Can you please tell me what Julia version\
    \ you have?\n<|/ c |>\n<| c |>\nI tested it on 0.6.2 and it works. I guess you\
    \ have a different version of Julia. Can you please tell me what Julia version\
    \ you have?\n<|/ c |>\n<| a dscore=4 |>\nThe answer by is correct but can be simplified\
    \ a bit:\n<code>\nmax_element(l::Vector{Int64})::Int64\n    maximum = l[1]\n \
    \   for i in l[2:end]\n        if i > maximum\n            maximum = i\n     \
    \   end\n    end\n    return maximum\nend\n</code>\n<|/ a tags=julia |>\n<| c\
    \ |>\nThis doesn't work for me. `max_element([1,2,3])` returns `3` instead of\
    \ `2`.\n<|/ c |>\n<| c |>\nI tested it on Julia 0.6.2 and it works. I guess you\
    \ have a different version of Julia. Can you please tell me what Julia version\
    \ you have?\n<|/ c |>\n<| c |>\nI tested it on 0.6.2 and it works. I guess you\
    \ have a different version of Julia. Can you please tell me what Julia version\
    \ you have?\n<|/ c |>\n<| c |>\nI tested it on 0.6.2 and it works. I guess you\
    \ have a different version of Julia. Can you please tell me what Julia version\
    \ you have?\n<|/ c |>\n<| a tags=julia |>\nThe answer by is correct but can be\
    \ simplified a bit:\n<code>\nmax_element(l::Vector{Int64})::Int64\n\nusing Test\n\
    \n@testset begin\n\ncandidate = max_element;\n\t@test(candidate([1, 2, 3]) ==\
    \ 3)\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_y_daoe0.jl:16\nin expression starting at\
    \ /tmp/tmp_y_daoe0.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    maximum\
    \ = max_element(l)\n    return maximum\nend\nusing Test\n\n@testset begin\n\n\
    candidate = max_element;\n\t@test(candidate([1, 2, 3]) == 3)\n\t@test(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    if length(l)\
    \ == 0 \n        throw(ArgumentError(\"Empty list\"))\n    end\n    maximum =\
    \ l[1]\n    for i in 2:length(l) \n        if l[i] > maximum \n            maximum\
    \ = l[i]\n        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = max_element;\n\t@test(candidate([1,\
    \ 2, 3]) == 3)\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) ==\
    \ 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp797mw2or.jl:19\nin expression starting at\
    \ /tmp/tmp797mw2or.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    \n  \
    \  maximum = l[1]\n    for i in 2:length(l)\n        if l[i] > maximum\n     \
    \       maximum = l[i]\n        end\n    end\n    maximum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = max_element;\n\
    \t@test(candidate([1, 2, 3]) == 3)\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9,\
    \ 0, 124, 1, -10]) == 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu660ylup.jl:17\nin expression starting at\
    \ /tmp/tmpu660ylup.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    maximum\
    \ = max_element(l)\n    return maximum\nend\nusing Test\n\n@testset begin\n\n\
    candidate = max_element;\n\t@test(candidate([1, 2, 3]) == 3)\n\t@test(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    maximum\
    \ = l[1]\n    for i in l[2:end]\n        if i > maximum\n            maximum =\
    \ i\n        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the minimum element in the list.\n    >>> min_element([1,\
    \ 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    -10\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = max_element;\n\
    \t@test(candidate([1, 2, 3]) == 3)\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9,\
    \ 0, 124, 1, -10]) == 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr7is5cbk.jl:16\nin expression starting at\
    \ /tmp/tmpr7is5cbk.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    maximum\
    \ = l[1]\n    for i in l[2:end]\n        if i > maximum\n            maximum =\
    \ i\n        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the index of the maximum element in a given\
    \ list. \nThe function should return -1 if the list is empty.\nusing Test\n\n\
    @testset begin\n\ncandidate = max_element;\n\t@test(candidate([1, 2, 3]) == 3)\n\
    \t@test(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptubbx1hn.jl:16\nin expression starting at\
    \ /tmp/tmptubbx1hn.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    maximum\
    \ = l[1]\n    for i in l[2:end]\n        if i > maximum\n            maximum =\
    \ i\n        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = max_element;\n\t@test(candidate([1,\
    \ 2, 3]) == 3)\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) ==\
    \ 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7bvg4mbp.jl:16\nin expression starting at\
    \ /tmp/tmp7bvg4mbp.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    maximum\
    \ = l[1]\n    for i in l[2:end]\n        if i > maximum\n            maximum =\
    \ i\n        end\n    end\n    return maximum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = max_element;\n\t@test(candidate([1, 2, 3]) == 3)\n\t@test(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    if length(l)\
    \ == 0 \n        throw(ArgumentError(\"List is empty\"))\n    end\n    max = l[1]\n\
    \    for i in 2:length(l) \n        if l[i] > max \n            max = l[i]\n \
    \       end\n    end\n    return max\nend\n</cell>\n<text>\nmax_element\nusing\
    \ Test\n\n@testset begin\n\ncandidate = max_element;\n\t@test(candidate([1, 2,\
    \ 3]) == 3)\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjtx3au9m.jl:19\nin expression starting at\
    \ /tmp/tmpjtx3au9m.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    maximum\
    \ = l[1]\n    for i in l[2:end]\n        if i > maximum\n            maximum =\
    \ i\n        end\n    end\n    maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = max_element;\n\t@test(candidate([1,\
    \ 2, 3]) == 3)\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) ==\
    \ 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkmtwp9o_.jl:16\nin expression starting at\
    \ /tmp/tmpkmtwp9o_.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    maximum\
    \ = l[1]\n    for i in l[2:end]\n        if i > maximum\n            maximum =\
    \ i\n        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = max_element;\n\t@test(candidate([1,\
    \ 2, 3]) == 3)\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) ==\
    \ 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpblezcvos.jl:16\nin expression starting at\
    \ /tmp/tmpblezcvos.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    if length(l)\
    \ == 0 \n        throw(ArgumentError(\"Empty list\"))\n    end\n    maximum =\
    \ l[1]\n    for i in 2:length(l) \n        if l[i] > maximum \n            maximum\
    \ = l[i]\n        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.3>\n\
    using Test\n\n@testset begin\n\ncandidate = max_element;\n\t@test(candidate([1,\
    \ 2, 3]) == 3)\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) ==\
    \ 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo27ifvrb.jl:19\nin expression starting at\
    \ /tmp/tmpo27ifvrb.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    \n  \
    \  maximum = l[1]\n    for i in l[2:end]\n        if i > maximum\n           \
    \ maximum = i\n        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = max_element;\n\t@test(candidate([1,\
    \ 2, 3]) == 3)\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) ==\
    \ 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpog6b6ehw.jl:17\nin expression starting at\
    \ /tmp/tmpog6b6ehw.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    maximum\
    \ = l[1]\n    for i in l[2:end]\n        if i > maximum\n            maximum =\
    \ i\n        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the minimum element in the list.\n    >>> min_element([1,\
    \ 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    -10\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = max_element;\n\
    \t@test(candidate([1, 2, 3]) == 3)\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9,\
    \ 0, 124, 1, -10]) == 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpej6sgvty.jl:16\nin expression starting at\
    \ /tmp/tmpej6sgvty.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    maximum\
    \ = l[1]\n    for i in l[2:end]\n        if i > maximum\n            maximum =\
    \ i\n        end\n    end\n    maximum\nend\n</cell>\n<text>\nExercise 9\nWrite\
    \ a function that returns the minimum element in the list.\n    >>> min_element([1,\
    \ 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    -10\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = max_element;\n\
    \t@test(candidate([1, 2, 3]) == 3)\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9,\
    \ 0, 124, 1, -10]) == 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpej3nhpc_.jl:16\nin expression starting at\
    \ /tmp/tmpej3nhpc_.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    maximum\
    \ = l[1]\n    for i in l[2:end]\n        if i > maximum\n            maximum =\
    \ i\n        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the sum of the elements in the list.\n    >>>\
    \ sum([1, 2, 3])\n    6\n    >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = max_element;\n\
    \t@test(candidate([1, 2, 3]) == 3)\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9,\
    \ 0, 124, 1, -10]) == 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzpdwggvu.jl:16\nin expression starting at\
    \ /tmp/tmpzpdwggvu.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    if length(l)\
    \ == 0 \n        throw(ArgumentError(\"List is empty\"))\n    end\n    maximum\
    \ = l[1]\n    for i in 2:length(l) \n        if l[i] > maximum \n            maximum\
    \ = l[i]\n        end\n    end\n    return maximum\nend\n</cell>\n<text>\nExercise\
    \ 6\nWrite a function that takes a list as an argument and returns a list with\
    \ the elements of the list sorted in descending order.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = max_element;\n\t@test(candidate([1, 2, 3]) == 3)\n\t@test(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4e4b6zxg.jl:19\nin expression starting at\
    \ /tmp/tmp4e4b6zxg.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    if length(l)\
    \ == 0 \n        throw(ArgumentError(\"List is empty\"))\n    end\n    \n    maximum\
    \ = l[1]\n    for i in 2:length(l) \n        if maximum < l[i] \n            maximum\
    \ = l[i]\n        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n</cell>\n<text>\nThe function\
    \ max_element returns the maximum element in the list. \nThe function throws an\
    \ ArgumentError if the list is empty.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = max_element;\n\t@test(candidate([1, 2, 3]) == 3)\n\t@test(candidate([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqgnsh94g.jl:20\nin expression starting at\
    \ /tmp/tmpqgnsh94g.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    maximum\
    \ = l[1]\n    for i in 2:length(l)\n        if l[i] > maximum\n            maximum\
    \ = l[i]\n        end\n    end\n    return maximum\nend\n</code>\n<|/ a dscore=2\
    \ |>\n<| c |>\nThis is not the fastest solution, since it uses `sort` which is\
    \ O(nlogn) instead of `findmax` which is O(n).\n<|/ c |>\n<| c |>\nI agree, it's\
    \ just an alternative to find the max element in a vector. Of course it could\
    \ be optimized further, but this was the simplest solution that came to my mind.\n\
    <|/ c |>\n<| a tags=julia,max,arrays |>\n<code>\njulia> maximum(collect(1:10))\n\
    10\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis does not answer the question. `maximum`\
    \ does not return the element with the maximum value, it returns the maximum value\
    \ itself.\n<|/ c |>\n<| a dscore=1 |>\n<code>\njulia> maximum(collect(1:10))\n\
    10\n</code>\n<|/ a tags=julia,max,arrays |>\n<| a tags=julia,max,arrays |>\n<code>\n\
    julia> maximum(collect(1:10))\n10\n</code>\n<|/ a dscore=1 |>\n<| a tags=julia,max,arrays\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = max_element;\n\t@test(candidate([1,\
    \ 2, 3]) == 3)\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) ==\
    \ 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_tbbfl4f.jl:16\nin expression starting at\
    \ /tmp/tmp_tbbfl4f.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    if length(l)\
    \ == 0 \n        throw(ArgumentError(\"Empty list\"))\n    end\n    \n    max\
    \ = l[1]\n    for i in 2:length(l) \n        if l[i] > max \n            max =\
    \ l[i]\n        end\n    end\n    return max\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = max_element;\n\t@test(candidate([1,\
    \ 2, 3]) == 3)\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) ==\
    \ 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw2w0yi49.jl:20\nin expression starting at\
    \ /tmp/tmpw2w0yi49.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    maximum\
    \ = l[1]\n    for i in 2:length(l)\n        if l[i] > maximum\n            maximum\
    \ = l[i]\n        end\n    end\n    return maximum\nend\n</cell>\n<text>\nExercise\
    \ 10\nWrite a function that returns the sum of the elements in the list.\n>>>\
    \ sum([1, 2, 3])\n6\n>>> sum([1, -2, 3])\n1\n>>> sum([1, 2, -3, 4])\n-5\n>>> sum([1,\
    \ 2, -3, 4, 5])\n-5\n>>> sum([1, 2, -3, 4, 5], 10)\n10\n>>> sum([1, 2, -3, 4,\
    \ 5], 0)\n0\n>>> sum([1, 2, -3, 4, 5], -10)\n-10\n>>> sum([1, 2, -3, 4, 5], 10)\n\
    10\n>>> sum([1, 2, -3, 4, 5], 0)\n0\n>>> sum([1, 2, -3, 4, 5], -10)\n-10\n>>>\
    \ sum([1, 2, -3, 4, 5], 10)\n10\n>>> sum([1, 2, -3, 4, 5], 0)\n0\n>>> sum([1,\
    \ 2, -3, 4, 5], -10)\n-10\n>>> sum([1, 2, -3, 4, 5], 10)\n10\n>>> sum([1, 2, -3,\
    \ 4, 5], 0)\n0\n>>> sum([1, 2, -3, 4, 5], -10)\n-10\n>>> sum([1, 2, -3, 4, 5],\
    \ 10)\n10\n>>> sum([1, 2, -3, 4, 5], 0)\n0\n>>> sum([1, 2, -3, 4, 5], -10)\n-10\n\
    >>> sum([1, 2, -3, 4, 5], 10)\n10\n>>> sum([1, 2, -3, 4, 5], 0)\n0\n>>> sum([1,\
    \ 2, -3, 4, 5], -10)\n-10\n>>> sum([1, 2, -3, 4, 5], 10)\n10\n>>> sum([1, 2, -3,\
    \ 4, 5], 0)\n0\n>>> sum([1, 2, -3, 4, 5], -10)\n-10\n>>> sum([1, 2, -3, 4, 5],\
    \ 10)\n10\n>>> sum([1, 2, -3, 4, 5], 0)\n0\n>>> sum([1, 2, -3, 4, 5], -10)\n-10\n\
    >>> sum([1, 2, -3, 4, 5], 10)\n10\n>>> sum([1, 2, -3, 4, 5], 0)\n0\n>>> sum([1,\
    \ 2, -3, 4, 5], -10)\n-10\n>>> sum([1, 2, -3, 4, 5], 10)\n10\n>>> sum([1, 2, -3,\
    \ 4, 5], 0)\n0\n>>> sum([1, 2, -3, 4, 5], -10)\n-10\n>>> sum([1, 2, -3, 4, 5],\
    \ 10)\n10\n>>> sum([1, 2, -3, 4, 5], 0)\n0\n>>> sum([1, 2, -3, 4, 5], -10)\n-10\n\
    >>> sum([1, 2, -3, 4, 5], 10)\n10\n>>> sum([1, 2, -3, 4, 5], 0)\n0\n>>> sum([1,\
    \ 2, -3, 4, 5], -10)\n-10\n>>> sum([1, 2, -3, 4, 5], 10)\n10\n>>> sum([1, 2, -3,\
    \ 4, 5], 0)\n0\n>>> sum([1, 2, -3, 4, 5], -10)\n-10\n>>> sum([1, 2, -3, 4, 5],\
    \ 10)\n10\n>>> sum([1, 2, -3, 4, 5], 0)\n0\n>>> sum([1, 2, -\nusing Test\n\n@testset\
    \ begin\n\ncandidate = max_element;\n\t@test(candidate([1, 2, 3]) == 3)\n\t@test(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5gve3pt_.jl:16\nin expression starting at\
    \ /tmp/tmp5gve3pt_.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    if length(l)\
    \ == 0 \n        throw(ArgumentError(\"Empty list\"))\n    end\n    largest =\
    \ l[1]\n    for i in 2:length(l) \n        if l[i] > largest \n            largest\
    \ = l[i]\n        end\n    end\n    return largest\nend\n</cell>\n<code language=julia-1.5>\n\
    max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the minimum element in the list.\n    >>> min_element([1,\
    \ 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    -10\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = max_element;\n\
    \t@test(candidate([1, 2, 3]) == 3)\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9,\
    \ 0, 124, 1, -10]) == 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptrcgmzj9.jl:19\nin expression starting at\
    \ /tmp/tmptrcgmzj9.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    maximum\
    \ = l[1]\n    for i in l[2:end]\n        if i > maximum\n            maximum =\
    \ i\n        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = max_element;\n\t@test(candidate([1,\
    \ 2, 3]) == 3)\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) ==\
    \ 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb8bk3xv4.jl:16\nin expression starting at\
    \ /tmp/tmpb8bk3xv4.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    maximum\
    \ = l[1]\n    for i in l[2:end]\n        if i > maximum\n            maximum =\
    \ i\n        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = max_element;\n\t@test(candidate([1,\
    \ 2, 3]) == 3)\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) ==\
    \ 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpld7vkspa.jl:16\nin expression starting at\
    \ /tmp/tmpld7vkspa.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    \n  \
    \  maximum = l[1]\n    for i in l[2:end]\n        if i > maximum\n           \
    \ maximum = i\n        end\n    end\n    maximum\nend\n</cell>\n<text>\n\u041C\
    \u0435\u0442\u043E\u0434 max_element \u0432\u043E\u0437\u0432\u0440\u0430\u0449\
    \u0430\u0435\u0442 \u043C\u0438\u043D\u0438\u043C\u0430\u043B\u044C\u043D\u044B\
    \u0439 \u044D\u043B\u0435\u043C\u0435\u043D\u0442 \u0432 \u0441\u043F\u0438\u0441\
    \u043A\u0435. \u0415\u0441\u043B\u0438 \u044D\u043B\u0435\u043C\u0435\u043D\u0442\
    \ \u043C\u0435\u043D\u044C\u0448\u0435 \u043C\u0438\u043D\u0438\u043C\u0430\u043B\
    \u044C\u043D\u043E\u0433\u043E \u044D\u043B\u0435\u043C\u0435\u043D\u0442\u0430\
    , \u0442\u043E \u0438\u0441\u043A\u043E\u043C\u044B\u0439 \u044D\u043B\u0435\u043C\
    \u0435\u043D\u0442 \u0438\u0437 \u0441\u043F\u0438\u0441\u043A\u0430, \u0438\u043D\
    \u0430\u0447\u0435 \u043F\u043E \u0438\u043D\u0434\u0435\u043A\u0441\u0443.\n\
    using Test\n\n@testset begin\n\ncandidate = max_element;\n\t@test(candidate([1,\
    \ 2, 3]) == 3)\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) ==\
    \ 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa8kaimad.jl:17\nin expression starting at\
    \ /tmp/tmpa8kaimad.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    maximum\
    \ = l[1]\n    for i in l[2:end]\n        if i > maximum\n            maximum =\
    \ i\n        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the sum of the elements in the list.\n>>> sum([1,\
    \ 2, 3])\n6\n>>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n123\n>>> sum([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, 0])\n0\n>>> sum([5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10, 0, 0])\n0\n>>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, 0,\
    \ 0, 0])\n0\n>>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, 0, 0, 0, 0])\n0\n\
    >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, 0, 0, 0, 0, 0])\n0\n>>> sum([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, 0, 0, 0, 0, 0, 0])\n0\n>>> sum([5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10, 0, 0, 0, 0, 0, 0, 0])\n0\n>>> sum([5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10, 0, 0, 0, 0, 0, 0, 0, 0])\n0\n>>> sum([5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n0\n>>> sum([5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n0\n>>> sum([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n0\n>>>\
    \ sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\
    \ 0])\n0\n>>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, 0, 0, 0, 0, 0, 0, 0,\
    \ 0, 0, 0, 0, 0, 0])\n0\n>>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, 0, 0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n0\n>>> sum([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n0\n>>> sum([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\
    \ 0])\n0\n>>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, 0, 0, 0, 0, 0, 0, 0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n0\n>>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1,\
    \ -10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n0\n>>> sum([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\
    \ 0, 0, 0, 0, 0])\n0\n\nusing Test\n\n@testset begin\n\ncandidate = max_element;\n\
    \t@test(candidate([1, 2, 3]) == 3)\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9,\
    \ 0, 124, 1, -10]) == 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps8kt58rt.jl:16\nin expression starting at\
    \ /tmp/tmps8kt58rt.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    maximum\
    \ = l[1]\n    for i in l[2:end]\n        if i > maximum\n            maximum =\
    \ i\n        end\n    end\n    maximum\nend\n</code>\n<|/ a tags=julia,list |>\n\
    <| a dscore=2 |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = max_element;\n\
    \t@test(candidate([1, 2, 3]) == 3)\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9,\
    \ 0, 124, 1, -10]) == 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfygbfieb.jl:16\nin expression starting at\
    \ /tmp/tmpfygbfieb.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    if length(l)\
    \ == 0 \n        throw(ArgumentError(\"Empty list\"))\n    end\n    maximum =\
    \ l[1]\n    for i in 2:length(l) \n        if l[i] > maximum \n            maximum\
    \ = l[i]\n        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = max_element;\n\t@test(candidate([1,\
    \ 2, 3]) == 3)\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) ==\
    \ 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu7douaxb.jl:19\nin expression starting at\
    \ /tmp/tmpu7douaxb.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    maximum\
    \ = l[1]\n    for i in l[2:end]\n        if i > maximum\n            maximum =\
    \ i\n        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.4>\n\
    using Test\n\n@testset begin\n\ncandidate = max_element;\n\t@test(candidate([1,\
    \ 2, 3]) == 3)\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) ==\
    \ 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpur7zten_.jl:16\nin expression starting at\
    \ /tmp/tmpur7zten_.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    \n  \
    \  maximum = l[1]\n    for i in l[2:end]\n        if i > maximum\n           \
    \ maximum = i\n        end\n    end\n    return maximum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = max_element;\n\t@test(candidate([1, 2, 3]) == 3)\n\t@test(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    if length(l)\
    \ == 0 \n        throw(ArgumentError(\"Empty list\"))\n    end\n    maximum =\
    \ l[1]\n    for i in 2:length(l) \n        if l[i] > maximum \n            maximum\
    \ = l[i]\n        end\n    end\n    return maximum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = max_element;\n\t@test(candidate([1, 2, 3]) == 3)\n\t@test(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    if length(l)\
    \ == 0 \n        throw(ArgumentError(\"Empty list\"))\n    end\n    maximum =\
    \ l[1]\n    for i in 2:length(l) \n        if l[i] > maximum \n            maximum\
    \ = l[i]\n        end\n    end\n    return maximum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = max_element;\n\t@test(candidate([1, 2, 3]) == 3)\n\t@test(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    if length(l)\
    \ == 0 \n        throw(ArgumentError(\"List is empty\"))\n    end\n    maximum\
    \ = l[1]\n    for i in 2:length(l) \n        if l[i] > maximum \n            maximum\
    \ = l[i]\n        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = max_element;\n\t@test(candidate([1,\
    \ 2, 3]) == 3)\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) ==\
    \ 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8x7stnh9.jl:19\nin expression starting at\
    \ /tmp/tmp8x7stnh9.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    maximum\
    \ = l[1]\n    for i in l[2:end]\n        if i > maximum\n            maximum =\
    \ i\n        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the minimum element in the list.\n    >>> min_element([1,\
    \ 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    -10\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = max_element;\n\
    \t@test(candidate([1, 2, 3]) == 3)\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9,\
    \ 0, 124, 1, -10]) == 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfv89a55f.jl:16\nin expression starting at\
    \ /tmp/tmpfv89a55f.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    maximum\
    \ = l[1]\n    for i in l[2:end]\n        if i > maximum\n            maximum =\
    \ i\n        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = max_element;\n\t@test(candidate([1,\
    \ 2, 3]) == 3)\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) ==\
    \ 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvdzd3381.jl:16\nin expression starting at\
    \ /tmp/tmpvdzd3381.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    if length(l)\
    \ == 0 \n        throw(ArgumentError(\"Empty list\"))\n    end\n    maximum =\
    \ l[1]\n    for i in 2:length(l) \n        if l[i] > maximum \n            maximum\
    \ = l[i]\n        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n</cell>\n<text>\nThe function\
    \ max_element returns the maximum element in the list. \nThe function throws an\
    \ ArgumentError if the list is empty.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = max_element;\n\t@test(candidate([1, 2, 3]) == 3)\n\t@test(candidate([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8s1rn76z.jl:19\nin expression starting at\
    \ /tmp/tmp8s1rn76z.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    if length(l)\
    \ == 0 \n        throw(ArgumentError(\"List is empty\"))\n    end\n    maximum\
    \ = l[1]\n    for i in 2:length(l) \n        if l[i] > maximum \n            maximum\
    \ = l[i]\n        end\n    end\n    return maximum\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the minimum element in the list.\n    >>> min_element([1,\
    \ 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    -10\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = max_element;\n\
    \t@test(candidate([1, 2, 3]) == 3)\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9,\
    \ 0, 124, 1, -10]) == 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgmnzsa20.jl:19\nin expression starting at\
    \ /tmp/tmpgmnzsa20.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    if length(l)\
    \ == 0 \n        throw(ArgumentError(\"Empty list\"))\n    end\n    largest =\
    \ l[1]\n    for i in 2:length(l) \n        if l[i] > largest \n            largest\
    \ = l[i]\n        end\n    end\n    return largest\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = max_element;\n\t@test(candidate([1, 2, 3]) == 3)\n\t@test(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    if length(l)\
    \ == 0 \n        throw(ArgumentError(\"Empty list\"))\n    end\n    maximum =\
    \ l[1]\n    for i in 2:length(l) \n        if l[i] > maximum \n            maximum\
    \ = l[i]\n        end\n    end\n    return maximum\nend\n</cell>\n<text>\nmax_element()\n\
    This function returns the maximum element in the list.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = max_element;\n\t@test(candidate([1, 2, 3]) == 3)\n\t@test(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz2534nx_.jl:19\nin expression starting at\
    \ /tmp/tmpz2534nx_.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    if length(l)\
    \ == 0 \n        throw(ArgumentError(\"Empty list\"))\n    end\n    max = l[1]\n\
    \    for i in 2:length(l) \n        if l[i] > max \n            max = l[i] \n\
    \        end\n    end\n    return max\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = max_element;\n\t@test(candidate([1, 2, 3]) == 3)\n\t@test(candidate([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    maximum\
    \ = l[1]\n    for i in l[2:end]\n        if i > maximum\n            maximum =\
    \ i\n        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n</cell>\n<text>\nExercise\
    \ 4\nWrite a function that returns the minimum element in the list.\n    >>> min_element([1,\
    \ 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    -10\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = max_element;\n\
    \t@test(candidate([1, 2, 3]) == 3)\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9,\
    \ 0, 124, 1, -10]) == 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqs0slhb0.jl:16\nin expression starting at\
    \ /tmp/tmpqs0slhb0.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    \n  \
    \  maximum = l[1]\n    for i in 2:length(l)\n        if l[i] > maximum\n     \
    \       maximum = l[i]\n        end\n    end\n    return maximum\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = max_element;\n\
    \t@test(candidate([1, 2, 3]) == 3)\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9,\
    \ 0, 124, 1, -10]) == 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7ainq1ga.jl:17\nin expression starting at\
    \ /tmp/tmp7ainq1ga.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    maximum\
    \ = l[1]\n    for i in l[2:end]\n        if i > maximum\n            maximum =\
    \ i\n        end\n    end\n    maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n</cell>\n<text>\n\u041C\u0430\
    \u043A\u0441\u0438\u043C\u0430\u043B\u044C\u043D\u044B\u0439 \u044D\u043B\u0435\
    \u043C\u0435\u043D\u0442\n\u041C\u0430\u043A\u0441\u0438\u043C\u0430\u043B\u044C\
    \u043D\u044B\u0439 \u044D\u043B\u0435\u043C\u0435\u043D\u0442 - \u044D\u0442\u043E\
    \ \u043C\u0438\u043D\u0438\u043C\u0430\u043B\u044C\u043D\u044B\u0439 \u044D\u043B\
    \u0435\u043C\u0435\u043D\u0442, \u043A\u043E\u0442\u043E\u0440\u044B\u0439 \u043C\
    \u043E\u0436\u0435\u0442 \u0431\u044B\u0442\u044C \u043F\u0440\u0435\u0434\u0441\
    \u0442\u0430\u0432\u043B\u0435\u043D \u0442\u0430\u043A \u0436\u0435, \u043A\u0430\
    \u043A \u0438 \u043C\u0438\u043D\u0438\u043C\u0430\u043B\u044C\u043D\u044B\u0439\
    \ \u044D\u043B\u0435\u043C\u0435\u043D\u0442, \u043A\u043E\u0442\u043E\u0440\u044B\
    \u0439 \u0438\u043C\u0435\u0435\u0442 \u0442\u043E \u0436\u0435 \u0441\u0430\u043C\
    \u043E\u0435 \u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0435.\nusing Test\n\n\
    @testset begin\n\ncandidate = max_element;\n\t@test(candidate([1, 2, 3]) == 3)\n\
    \t@test(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp33pwxplg.jl:16\nin expression starting at\
    \ /tmp/tmp33pwxplg.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    if length(l)\
    \ == 0 \n        throw(ArgumentError(\"List is empty\"))\n    end\n    largest\
    \ = l[1]\n    for i in 2:length(l) \n        if l[i] > largest \n            largest\
    \ = l[i]\n        end\n    end\n    return largest\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = max_element;\n\t@test(candidate([1, 2, 3]) == 3)\n\t@test(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    maximum\
    \ = l[1]\n    for i in 2:length(l)\n        if l[i] > maximum\n            maximum\
    \ = l[i]\n        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = max_element;\n\t@test(candidate([1,\
    \ 2, 3]) == 3)\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) ==\
    \ 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwlqgr5m5.jl:16\nin expression starting at\
    \ /tmp/tmpwlqgr5m5.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    maximum\
    \ = l[1]\n    for i in 2:length(l)\n        if l[i] > maximum\n            maximum\
    \ = l[i]\n        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = max_element;\n\t@test(candidate([1,\
    \ 2, 3]) == 3)\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) ==\
    \ 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3amnbrvd.jl:16\nin expression starting at\
    \ /tmp/tmp3amnbrvd.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    maximum\
    \ = l[1]\n    for i in 2:length(l)\n        if l[i] > maximum\n            maximum\
    \ = l[i]\n        end\n    end\n    maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = max_element;\n\t@test(candidate([1,\
    \ 2, 3]) == 3)\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) ==\
    \ 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdfy6bhum.jl:16\nin expression starting at\
    \ /tmp/tmpdfy6bhum.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    if length(l)\
    \ == 0 \n        return 0 \n    else \n        return max(l) \nend \n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = max_element;\n\
    \t@test(candidate([1, 2, 3]) == 3)\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9,\
    \ 0, 124, 1, -10]) == 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpaco0ncxz.jl:13\nin expression starting at\
    \ /tmp/tmpaco0ncxz.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    maximum\
    \ = l[1]\n    for i in l[2:end]\n        if i > maximum\n            maximum =\
    \ i\n        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = max_element;\n\t@test(candidate([1,\
    \ 2, 3]) == 3)\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) ==\
    \ 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp824zrqj9.jl:16\nin expression starting at\
    \ /tmp/tmp824zrqj9.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    \n  \
    \  maximum = l[1]\n    for i in 2:length(l)\n        if l[i] > maximum\n     \
    \       maximum = l[i]\n        end\n    end\n    return maximum\nend\n</cell>\n\
    <code language=julia-1.3>\nmax_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the minimum element\
    \ in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = max_element;\n\t@test(candidate([1, 2, 3]) == 3)\n\t@test(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe3sd7zzc.jl:17\nin expression starting at\
    \ /tmp/tmpe3sd7zzc.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    if length(l)\
    \ == 0 \n        throw(ArgumentError(\"Empty list\"))\n    end\n    maximum =\
    \ l[1]\n    for i in 2:length(l) \n        if l[i] > maximum \n            maximum\
    \ = l[i]\n        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = max_element;\n\t@test(candidate([1,\
    \ 2, 3]) == 3)\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) ==\
    \ 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpthfwcnhh.jl:19\nin expression starting at\
    \ /tmp/tmpthfwcnhh.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    maximum\
    \ = l[1]\n    for i in l[2:end]\n        if i > maximum\n            maximum =\
    \ i\n        end\n    end\n    return maximum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = max_element;\n\t@test(candidate([1, 2, 3]) == 3)\n\t@test(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    if length(l)\
    \ == 0 \n        throw(ArgumentError(\"Empty list\"))\n    end\n    maximum =\
    \ l[1]\n    for x in l[2:end]\n        if x > maximum\n            maximum = x\n\
    \        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the minimum element in the list.\n    >>> min_element([1,\
    \ 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    -10\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = max_element;\n\
    \t@test(candidate([1, 2, 3]) == 3)\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9,\
    \ 0, 124, 1, -10]) == 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9yceaq_u.jl:19\nin expression starting at\
    \ /tmp/tmp9yceaq_u.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    maximum\
    \ = l[1]\n    for i in l[2:end]\n        if i > maximum\n            maximum =\
    \ i\n        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the minimum element in the list.\n    >>> min_element([1,\
    \ 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    -10\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = max_element;\n\
    \t@test(candidate([1, 2, 3]) == 3)\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9,\
    \ 0, 124, 1, -10]) == 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp6hk2rux.jl:16\nin expression starting at\
    \ /tmp/tmpp6hk2rux.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    \n  \
    \  if length(l) == 0 \n        throw(ArgumentError(\"Cannot find max element of\
    \ empty list\"))\n    end\n    \n    max = l[1]\n    for i in 2:length(l) \n \
    \       if l[i] > max \n            max = l[i]\n        end\n    end\n    return\
    \ max\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns the index\
    \ of the maximum element in the list.\n    >>> max_element_index([1, 2, 3])\n\
    \    1\n    >>> max_element_index([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   12\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = max_element;\n\
    \t@test(candidate([1, 2, 3]) == 3)\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9,\
    \ 0, 124, 1, -10]) == 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwagf0ar0.jl:21\nin expression starting at\
    \ /tmp/tmpwagf0ar0.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    maximum\
    \ = l[1]\n    for i in l[2:end]\n        if i > maximum\n            maximum =\
    \ i\n        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = max_element;\n\t@test(candidate([1,\
    \ 2, 3]) == 3)\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) ==\
    \ 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwiusv3k9.jl:16\nin expression starting at\
    \ /tmp/tmpwiusv3k9.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    maximum\
    \ = l[1]\n    for i in l[2:end]\n        if i > maximum\n            maximum =\
    \ i\n        end\n    end\n    return maximum\nend\n</code>\n<|/ a tags=julia,arrays\
    \ |>\n<| c |>\n`maximum` should be `maximum!` since it modifies the input `l`.\n\
    <|/ c |>\n<| c |>\n`maximum!` modifies the input `l` but `maximum` does not. `maximum!`\
    \ modifies the input `l` but `maximum` does not. `maximum` modifies the input\
    \ `l` but `maximum!` does not. `maximum` modifies the input `l` but `maximum!`\
    \ does not.\n<|/ c |>\n<| c |>\n`maximum` modifies the input `l` but `maximum!`\
    \ does not. `maximum` modifies the input `l` but `maximum!` does not. `maximum`\
    \ modifies the input `l` but `maximum!` does not. `maximum` modifies the input\
    \ `l` but `maximum!` does not.\n<|/ c |>\n<| c |>\n`maximum` modifies the input\
    \ `l` but `maximum!` does not. `maximum` modifies the input `l` but `maximum!`\
    \ does not. `maximum` modifies the input `l` but `maximum!` does not. `maximum`\
    \ modifies the input `l` but `maximum!` does not.\n<|/ c |>\n<| c |>\n`maximum`\
    \ modifies the input `l` but `maximum!` does not. `maximum` modifies the input\
    \ `l` but `maximum!` does not. `maximum` modifies the input `l` but `maximum!`\
    \ does not. `maximum` modifies the input `l` but `maximum!` does not.\n<|/ c |>\n\
    <| a tags=julia,arrays |>\nThe most efficient way is to use maximum and minimum:\n\
    <code>\njulia> maximum(A)\n5\nusing Test\n\n@testset begin\n\ncandidate = max_element;\n\
    \t@test(candidate([1, 2, 3]) == 3)\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9,\
    \ 0, 124, 1, -10]) == 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps09eb0oi.jl:16\nin expression starting at\
    \ /tmp/tmps09eb0oi.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    if length(l)\
    \ == 0 \n        throw(ArgumentError(\"List is empty\"))\n    end\n    max = l[1]\n\
    \    for i in 2:length(l) \n        if l[i] > max \n            max = l[i]\n \
    \       end\n    end\n    return max\nend\n</cell>\n<code language=julia-1.4>\n\
    using Test\n\n@testset begin\n\ncandidate = max_element;\n\t@test(candidate([1,\
    \ 2, 3]) == 3)\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) ==\
    \ 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj41mymli.jl:19\nin expression starting at\
    \ /tmp/tmpj41mymli.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    \n  \
    \  maximum = l[1]\n    for i in 2:length(l)\n        if l[i] > maximum\n     \
    \       maximum = l[i]\n        end\n    end\n    maximum\nend\n</cell>\n<text>\n\
    Exercise 10\nWrite a function that returns the minimum element in the list.\n\
    \    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = max_element;\n\t@test(candidate([1, 2, 3]) == 3)\n\t@test(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp85v6fg27.jl:17\nin expression starting at\
    \ /tmp/tmp85v6fg27.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    if length(l)\
    \ == 0 \n        throw(ArgumentError(\"List is empty\"))\n    end\n    max = l[1]\n\
    \    for i in 2:length(l) \n        if l[i] > max \n            max = l[i] \n\
    \        end\n    end\n    return max\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = max_element;\n\t@test(candidate([1,\
    \ 2, 3]) == 3)\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) ==\
    \ 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprlnithsy.jl:19\nin expression starting at\
    \ /tmp/tmprlnithsy.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    maximum\
    \ = l[1]\n    for x in l[2:end]\n        if x > maximum\n            maximum =\
    \ x\n        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the sum of the elements in the list.\n    >>>\
    \ sum([1, 2, 3])\n    6\n    >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = max_element;\n\
    \t@test(candidate([1, 2, 3]) == 3)\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9,\
    \ 0, 124, 1, -10]) == 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdvinpb9k.jl:16\nin expression starting at\
    \ /tmp/tmpdvinpb9k.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    if length(l)\
    \ == 0 \n        throw(ArgumentError(\"Empty list\"))\n    end\n    max = l[1]\n\
    \    for i in 2:length(l) \n        if l[i] > max \n            max = l[i]\n \
    \       end\n    end\n    return max\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = max_element;\n\t@test(candidate([1,\
    \ 2, 3]) == 3)\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) ==\
    \ 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0sbmn5m4.jl:19\nin expression starting at\
    \ /tmp/tmp0sbmn5m4.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    if length(l)\
    \ == 0 \n        throw(ArgumentError(\"Empty list\"))\n    end\n    largest =\
    \ l[1]\n    for i in 2:length(l) \n        if l[i] > largest \n            largest\
    \ = l[i]\n        end\n    end\n    return largest\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = max_element;\n\t@test(candidate([1,\
    \ 2, 3]) == 3)\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) ==\
    \ 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptlnisol2.jl:19\nin expression starting at\
    \ /tmp/tmptlnisol2.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    maximum\
    \ = l[1]\n    for i in l[2:end]\n        if i > maximum\n            maximum =\
    \ i\n        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = max_element;\n\t@test(candidate([1,\
    \ 2, 3]) == 3)\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) ==\
    \ 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppixi9t0c.jl:16\nin expression starting at\
    \ /tmp/tmppixi9t0c.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    if length(l)\
    \ == 0 \n        throw(ArgumentError(\"Empty list\"))\n    end\n    \n    maximum\
    \ = l[1]\n    for i in 2:length(l) \n        if maximum < l[i] \n            maximum\
    \ = l[i] \n        end\n    end\n    return maximum\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the minimum element in the list.\n    >>> min_element([1,\
    \ 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    -10\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = max_element;\n\
    \t@test(candidate([1, 2, 3]) == 3)\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9,\
    \ 0, 124, 1, -10]) == 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppk3ziw3v.jl:20\nin expression starting at\
    \ /tmp/tmppk3ziw3v.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    if length(l)\
    \ == 0 \n        throw(ArgumentError(\"Empty list\"))\n    end\n    maximum =\
    \ l[1]\n    for i in 2:length(l) \n        if l[i] > maximum \n            maximum\
    \ = l[i]\n        end\n    end\n    return maximum\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the minimum element in the list.\n    >>> min_element([1,\
    \ 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    -10\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = max_element;\n\
    \t@test(candidate([1, 2, 3]) == 3)\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9,\
    \ 0, 124, 1, -10]) == 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf6b7s282.jl:19\nin expression starting at\
    \ /tmp/tmpf6b7s282.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    maximum\
    \ = l[1]\n    for i in l[2:end]\n        if i > maximum\n            maximum =\
    \ i\n        end\n    end\n    return maximum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = max_element;\n\t@test(candidate([1, 2, 3]) == 3)\n\t@test(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    if length(l)\
    \ == 0 \n        throw(ArgumentError(\"Empty list\"))\n    end\n    \n    max\
    \ = l[1]\n    for i in 2:length(l) \n        if l[i] > max \n            max =\
    \ l[i] \n        end\n    end\n    return max\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = max_element;\n\t@test(candidate([1,\
    \ 2, 3]) == 3)\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) ==\
    \ 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4z0buzm0.jl:20\nin expression starting at\
    \ /tmp/tmp4z0buzm0.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    maximum\
    \ = l[1]\n    for i in l[2:end]\n        if i > maximum\n            maximum =\
    \ i\n        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the sum of the elements in the list.\n    >>>\
    \ sum([1, 2, 3])\n    6\n    >>> sum([1, 2, 3, 0])\n    6\n    >>> sum([1, 2,\
    \ 3, -1])\n    6\n    >>> sum([1, 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, -1])\n\
    \    6\n    >>> sum([1, 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, -1])\n    6\n\
    \    >>> sum([1, 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, -1])\n    6\n    >>>\
    \ sum([1, 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, -1])\n    6\n    >>> sum([1,\
    \ 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, -1])\n    6\n    >>> sum([1, 2, 3, 0])\n\
    \    6\n    >>> sum([1, 2, 3, -1])\n    6\n    >>> sum([1, 2, 3, 0])\n    6\n\
    \    >>> sum([1, 2, 3, -1])\n    6\n    >>> sum([1, 2, 3, 0])\n    6\n    >>>\
    \ sum([1, 2, 3, -1])\n    6\n    >>> sum([1, 2, 3, 0])\n    6\n    >>> sum([1,\
    \ 2, 3, -1])\n    6\n    >>> sum([1, 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, -1])\n\
    \    6\n    >>> sum([1, 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, -1])\n    6\n\
    \    >>> sum([1, 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, -1])\n    6\n    >>>\
    \ sum([1, 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, -1])\n    6\n    >>> sum([1,\
    \ 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, -1])\n    6\n    >>> sum([1, 2, 3, 0])\n\
    \    6\n    >>> sum([1, 2, 3, -1])\n    6\n    >>> sum([1, 2, 3, 0])\n    6\n\
    \    >>> sum([1, 2, 3, -1])\n    6\n    >>> sum([1, 2, 3, 0])\n    6\n    >>>\
    \ sum([1, 2, 3, -1])\n    6\n    >>> sum([1, 2, 3, 0])\n    6\n    >>> sum([1,\
    \ 2, 3, -1])\n    6\n    >>> sum([1, 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, -1])\n\
    \    6\n    >>> sum([1, 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, -1])\n    6\n\
    \    >>> sum([1, 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, -1])\n    6\n    >>>\
    \ sum([1, 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, -1])\n    6\n    >>> sum([1,\
    \ 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, -1])\nusing Test\n\n@testset begin\n\
    \ncandidate = max_element;\n\t@test(candidate([1, 2, 3]) == 3)\n\t@test(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpiy52a6dh.jl:16\nin expression starting at\
    \ /tmp/tmpiy52a6dh.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    maximum\
    \ = l[1]\n    for x in l[2:end]\n        if x > maximum\n            maximum =\
    \ x\n        end\n    end\n    return maximum\nend\n</code>\n<|/ a dscore=1 |>\n\
    <| a tags=julia,list |>\nThe other answers here are great, but I wanted to add\
    \ that you can also use reduce to find the maximum element in a vector:\n<code>\n\
    reduce(max, [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=julia,list |>\nThe other answers here are great, but I wanted\
    \ to add that you can also use reduce to find the maximum element in a vector:\n\
    <code>\nreduce(max, [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=julia,list |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = max_element;\n\t@test(candidate([1, 2, 3]) == 3)\n\t@test(candidate([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfudmx7up.jl:16\nin expression starting at\
    \ /tmp/tmpfudmx7up.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    maximum\
    \ = l[1]\n    for i in l[2:end]\n        if i > maximum\n            maximum =\
    \ i\n        end\n    end\n    maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = max_element;\n\t@test(candidate([1,\
    \ 2, 3]) == 3)\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) ==\
    \ 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9125w6bg.jl:16\nin expression starting at\
    \ /tmp/tmp9125w6bg.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    maximum\
    \ = l[1]\n    for i in l[2:end]\n        if i > maximum\n            maximum =\
    \ i\n        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.3>\n\
    using Test\n\n@testset begin\n\ncandidate = max_element;\n\t@test(candidate([1,\
    \ 2, 3]) == 3)\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) ==\
    \ 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyct1gpcx.jl:16\nin expression starting at\
    \ /tmp/tmpyct1gpcx.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    if length(l)\
    \ == 0 \n        throw(ArgumentError(\"Empty list\"))\n    end\n    maximum =\
    \ l[1]\n    for x in l[2:end]\n        if x > maximum\n            maximum = x\n\
    \        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = max_element;\n\t@test(candidate([1,\
    \ 2, 3]) == 3)\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) ==\
    \ 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjpnme25x.jl:19\nin expression starting at\
    \ /tmp/tmpjpnme25x.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    maximum\
    \ = l[1]\n    for x in l[2:end]\n        if x > maximum\n            maximum =\
    \ x\n        end\n    end\n    maximum\nend\n</cell>\n<text>\nExercise 2: max_element\n\
    Write a function that returns the maximum element in the list.\nWrite a function\
    \ that returns the minimum element in the list.\nWrite a function that returns\
    \ the median element in the list.\nWrite a function that returns the mode element\
    \ in the list.\nusing Test\n\n@testset begin\n\ncandidate = max_element;\n\t@test(candidate([1,\
    \ 2, 3]) == 3)\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) ==\
    \ 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6ghfbmc7.jl:16\nin expression starting at\
    \ /tmp/tmp6ghfbmc7.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    if length(l)\
    \ == 0 \n        throw(ArgumentError(\"Empty list\"))\n    end\n    \n    maximum\
    \ = l[1]\n    for i in 2:length(l) \n        if l[i] > maximum \n            maximum\
    \ = l[i]\n        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = max_element;\n\t@test(candidate([1,\
    \ 2, 3]) == 3)\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) ==\
    \ 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc9g1cwy4.jl:20\nin expression starting at\
    \ /tmp/tmpc9g1cwy4.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    if length(l)\
    \ == 0 \n        throw(ArgumentError(\"Empty list\"))\n    end\n    maximum =\
    \ l[1]\n    for i in 2:length(l) \n        if l[i] > maximum \n            maximum\
    \ = l[i]\n        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.4>\n\
    using Test\n\n@testset begin\n\ncandidate = max_element;\n\t@test(candidate([1,\
    \ 2, 3]) == 3)\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) ==\
    \ 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2wwvdtzs.jl:19\nin expression starting at\
    \ /tmp/tmp2wwvdtzs.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    if length(l)\
    \ == 0 \n        throw(ArgumentError(\"List is empty\"))\n    end\n    maximum\
    \ = l[1]\n    for i in 2:length(l) \n        if l[i] > maximum \n            maximum\
    \ = l[i]\n        end\n    end\n    return maximum\nend\n</cell>\n<text>\nmax_element\n\
    using Test\n\n@testset begin\n\ncandidate = max_element;\n\t@test(candidate([1,\
    \ 2, 3]) == 3)\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) ==\
    \ 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy9uoux_b.jl:19\nin expression starting at\
    \ /tmp/tmpy9uoux_b.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    \n  \
    \  maximum = l[1]\n    for x in l[2:end]\n        if x > maximum\n           \
    \ maximum = x\n        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the sum of the elements in the list.\n>>> sum([1,\
    \ 2, 3])\n6\n>>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n123\n>>> sum([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, 100])\n123\n>>> sum([5, 3, -5, 2, -3, 3,\
    \ 9, 0, 123, 1, -10, 100], 10)\n123\n>>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1,\
    \ -10, 100], -10)\n100\n>>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, 100],\
    \ 0)\n100\n>>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, 100], 1)\n100\n>>>\
    \ sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, 100], 2)\n100\n>>> sum([5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10, 100], 3)\n100\n>>> sum([5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10, 100], 4)\n100\n>>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10,\
    \ 100], 5)\n100\n>>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, 100], 6)\n100\n\
    >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, 100], 7)\n100\n>>> sum([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10, 100], 8)\n100\n>>> sum([5, 3, -5, 2, -3, 3,\
    \ 9, 0, 123, 1, -10, 100], 9)\n100\n>>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1,\
    \ -10, 100], 10)\n100\n>>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, 100], 11)\n\
    100\n>>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, 100], 12)\n100\n>>> sum([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, 100], 13)\n100\n>>> sum([5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10, 100], 14)\n100\n>>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10, 100], 15)\n100\n>>> sum([5, 3, -5, 2, -3, 3, 9, \nusing Test\n\n@testset\
    \ begin\n\ncandidate = max_element;\n\t@test(candidate([1, 2, 3]) == 3)\n\t@test(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmacgelrk.jl:17\nin expression starting at\
    \ /tmp/tmpmacgelrk.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    maximum\
    \ = l[1]\n    for i in 2:length(l)\n        if l[i] > maximum\n            maximum\
    \ = l[i]\n        end\n    end\n    return maximum\nend\n</code>\n<|/ a dscore=2\
    \ |>\n<| c |>\nI like your solution, but I wonder why you use `maximum` instead\
    \ of `maximum!`?\n<|/ c |>\n<| c |>\nI used `maximum` because I thought it would\
    \ be more efficient than `maximum!`. I don't know if this is true though.\n<|/\
    \ c |>\n<| c |>\nI guess it depends on how you define efficiency. `maximum!` will\
    \ have to allocate memory for the new value, whereas `maximum` will just return\
    \ the existing value. `maximum` will also have to allocate memory for the new\
    \ value if it doesn't exist.\n<|/ c |>\n<| c |>\nYes, I agree. `maximum!` will\
    \ allocate memory for the new value, whereas `maximum` will just return the existing\
    \ value. `maximum` will also have to allocate memory for the new value if it doesn't\
    \ exist.\n<|/ c |>\n<| a dscore=2 |>\nI like your solution, but I wonder why you\
    \ use maximum instead of maximum!?\nusing Test\n\n@testset begin\n\ncandidate\
    \ = max_element;\n\t@test(candidate([1, 2, 3]) == 3)\n\t@test(candidate([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3ghix1kl.jl:16\nin expression starting at\
    \ /tmp/tmp3ghix1kl.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    \n  \
    \  maximum = l[1]\n    for i in l[2:end]\n        if i > maximum\n           \
    \ maximum = i\n        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = max_element;\n\t@test(candidate([1,\
    \ 2, 3]) == 3)\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) ==\
    \ 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm_lhcn2t.jl:17\nin expression starting at\
    \ /tmp/tmpm_lhcn2t.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    maximum\
    \ = l[1]\n    for i in l[2:end]\n        if i > maximum\n            maximum =\
    \ i\n        end\n    end\n    return maximum\nend\n</code>\n<|/ a |>\n<| c |>\n\
    This doesn't work if you have negative numbers in the list\n<|/ c |>\n<| c |>\n\
    It works with negative numbers. I tested it before posting. What do you mean by\
    \ \"doesn't work\"?\n<|/ c |>\n<| c |>\nI mean it returns `0` instead of `-inf`\n\
    <|/ c |>\n<| c |>\nIt returns `-inf` if you have negative numbers in the list.\
    \ Try it yourself.\n<|/ c |>\n<| c |>\nI tested it before posting. What do you\
    \ mean by \"doesn't work\"?\n<|/ c |>\n<| a dscore=4 |>\nI believe that this is\
    \ what you're looking for:\n<code>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = max_element;\n\t@test(candidate([1, 2, 3]) == 3)\n\t@test(candidate([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz5ghqy11.jl:16\nin expression starting at\
    \ /tmp/tmpz5ghqy11.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    maximum\
    \ = l[1]\n    for x in l[2:end]\n        if x > maximum\n            maximum =\
    \ x\n        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = max_element;\n\t@test(candidate([1,\
    \ 2, 3]) == 3)\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) ==\
    \ 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppt7_tjj4.jl:16\nin expression starting at\
    \ /tmp/tmppt7_tjj4.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    if length(l)\
    \ == 0 \n        throw(ArgumentError(\"Empty list\"))\n    end\n    largest =\
    \ l[1]\n    for i in 2:length(l) \n        if l[i] > largest \n            largest\
    \ = l[i]\n        end\n    end\n    return largest\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the minimum element in the list.\n    >>> min_element([1,\
    \ 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    -10\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = max_element;\n\
    \t@test(candidate([1, 2, 3]) == 3)\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9,\
    \ 0, 124, 1, -10]) == 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpci8ebp_3.jl:19\nin expression starting at\
    \ /tmp/tmpci8ebp_3.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    if length(l)\
    \ == 0 \n        throw(ArgumentError(\"List is empty\"))\n    end\n    largest\
    \ = l[1]\n    for i in 2:length(l) \n        if l[i] > largest \n            largest\
    \ = l[i]\n        end\n    end\n    return largest\nend\n</code>\n<|/ a tags=julia\
    \ |>\n<| a dscore=1 |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = max_element;\n\
    \t@test(candidate([1, 2, 3]) == 3)\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9,\
    \ 0, 124, 1, -10]) == 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphdh_gd23.jl:19\nin expression starting at\
    \ /tmp/tmphdh_gd23.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    if length(l)\
    \ == 0 \n        throw(ArgumentError(\"List is empty\"))\n    end\n    maximum\
    \ = l[1]\n    for i in 2:length(l) \n        if l[i] > maximum \n            maximum\
    \ = l[i] \n        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.3>\n\
    using Test\n\n@testset begin\n\ncandidate = max_element;\n\t@test(candidate([1,\
    \ 2, 3]) == 3)\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) ==\
    \ 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp41bziz8i.jl:19\nin expression starting at\
    \ /tmp/tmp41bziz8i.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    maximum\
    \ = l[1]\n    for i in 2:length(l)\n        if l[i] > maximum\n            maximum\
    \ = l[i]\n        end\n    end\n    return maximum\nend\n</code>\n<|/ a dscore=1\
    \ |>\n<| a |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = max_element;\n\
    \t@test(candidate([1, 2, 3]) == 3)\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9,\
    \ 0, 124, 1, -10]) == 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf6vi76e2.jl:16\nin expression starting at\
    \ /tmp/tmpf6vi76e2.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    maximum\
    \ = l[1]\n    for i in l[2:end]\n        if i > maximum\n            maximum =\
    \ i\n        end\n    end\n    return maximum\nend\n</code>\n<|/ a dscore=0 |>\n\
    <| a dscore=0 |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = max_element;\n\
    \t@test(candidate([1, 2, 3]) == 3)\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9,\
    \ 0, 124, 1, -10]) == 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6an50q7t.jl:16\nin expression starting at\
    \ /tmp/tmp6an50q7t.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    if length(l)\
    \ == 0 \n        throw(ArgumentError(\"Cannot find max element of empty list\"\
    ))\n    end\n    maximum = l[1]\n    for i in 2:length(l) \n        if l[i] >\
    \ maximum \n            maximum = l[i]\n        end\n    end\n    return maximum\n\
    end\n</cell>\n<text>\nmax_element!\nusing Test\n\n@testset begin\n\ncandidate\
    \ = max_element;\n\t@test(candidate([1, 2, 3]) == 3)\n\t@test(candidate([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwqltc002.jl:19\nin expression starting at\
    \ /tmp/tmpwqltc002.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    if length(l)\
    \ == 0 \n        throw(ArgumentError(\"Empty list\"))\n    end\n    \n    maximum\
    \ = l[1]\n    for i in 2:length(l) \n        if l[i] > maximum \n            maximum\
    \ = l[i]\n        end\n    end\n    \n    return maximum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nmax_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    </cell>\n<text>\nExercise: Write a function that returns the sum of the elements\
    \ in the list.\n    >>> sum([1, 2, 3])\n    6\n    >>> sum([5, 3, -5, 2, -3, 3,\
    \ 9, 0, 123, 1, -10])\n    123\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = max_element;\n\t@test(candidate([1, 2, 3]) == 3)\n\t@test(candidate([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5clmfwrt.jl:21\nin expression starting at\
    \ /tmp/tmp5clmfwrt.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    maximum\
    \ = l[1]\n    for i in l[2:end]\n        if i > maximum\n            maximum =\
    \ i\n        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.3>\n\
    using Test\n\n@testset begin\n\ncandidate = max_element;\n\t@test(candidate([1,\
    \ 2, 3]) == 3)\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) ==\
    \ 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2d6ld1xf.jl:16\nin expression starting at\
    \ /tmp/tmp2d6ld1xf.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    maximum\
    \ = l[1]\n    for i in l[2:end]\n        if i > maximum\n            maximum =\
    \ i\n        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the sum of the elements in the list.\n    >>>\
    \ sum([1, 2, 3])\n    6\n    >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = max_element;\n\
    \t@test(candidate([1, 2, 3]) == 3)\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9,\
    \ 0, 124, 1, -10]) == 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5b5yzj0g.jl:16\nin expression starting at\
    \ /tmp/tmp5b5yzj0g.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    if length(l)\
    \ == 0 \n        throw(ArgumentError(\"Empty list\"))\n    end\n    maximum =\
    \ l[1]\n    for x in l[2:end]\n        if x > maximum \n            maximum =\
    \ x\n        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.3>\n\
    max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the sum of the elements in the list.\n>>> sum([1,\
    \ 2, 3])\n6\n>>> sum([1, 2, 3, 0])\n6\n>>> sum([1, 2, 3, 0])\n6\n>>> sum([1, 2,\
    \ 3, 0])\n6\n>>> sum([1, 2, 3, 0])\n6\n>>> sum([1, 2, 3, 0])\n6\n>>> sum([1, 2,\
    \ 3, 0])\n6\n>>> sum([1, 2, 3, 0])\n6\n>>> sum([1, 2, 3, 0])\n6\n>>> sum([1, 2,\
    \ 3, 0])\n6\n>>> sum([1, 2, 3, 0])\n6\n>>> sum([1, 2, 3, 0])\n6\n>>> sum([1, 2,\
    \ 3, 0])\n6\n>>> sum([1, 2, 3, 0])\n6\n>>> sum([1, 2, 3, 0])\n6\n>>> sum([1, 2,\
    \ 3, 0])\n6\n>>> sum([1, 2, 3, 0])\n6\n>>> sum([1, 2, 3, 0])\n6\n>>> sum([1, 2,\
    \ 3, 0])\n6\n>>> sum([1, 2, 3, 0])\n6\n>>> sum([1, 2, 3, 0])\n6\n>>> sum([1, 2,\
    \ 3, 0])\n6\n>>> sum([1, 2, 3, 0])\n6\n>>> sum([1, 2, 3, 0])\n6\n>>> sum([1, 2,\
    \ 3, 0])\n6\n>>> sum([1, 2, 3, 0])\n6\n>>> sum([1, 2, 3, 0])\n6\n>>> sum([1, 2,\
    \ 3, 0])\n6\n>>> sum([1, 2, 3, 0])\n6\n>>> sum([1, 2, 3, 0])\n6\n>>> sum([1, 2,\
    \ 3, 0])\n6\n>>> sum([1, 2, 3, 0])\n6\n>>> sum([1, 2, 3, 0])\n6\n>>> sum([1, 2,\
    \ 3, 0])\n6\n>>> sum([1, 2, 3, 0])\n6\n>>> sum([1, 2, 3, 0])\n6\n>>> sum([1, 2,\
    \ 3, 0])\n6\n>>> sum([1, 2, 3, 0])\n6\n>>> sum([1, 2, 3, 0])\n6\n>>> sum([1, 2,\
    \ 3, 0])\n6\n>>> sum([1, 2, 3, 0])\n6\n>>> sum([1, 2, 3, 0])\n6\n>>> sum([1, 2,\
    \ 3, 0])\n6\n>>> sum([1, 2, 3, 0])\n6\n>>> sum([1, 2, 3, 0])\n6\n>>> sum([1, 2,\
    \ 3, 0])\n6\n>>> sum([1, 2, 3, 0])\n6\n>>> sum([1, 2, 3, 0])\n6\n>>> sum([1, 2,\
    \ 3, 0])\n6\n>>> sum([1, 2, 3, 0])\n6\n>>> sum([1, 2, 3, 0])\n6\n>>> sum([1, 2,\
    \ 3, 0])\n6\n>>> sum([1, 2, 3, \nusing Test\n\n@testset begin\n\ncandidate = max_element;\n\
    \t@test(candidate([1, 2, 3]) == 3)\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9,\
    \ 0, 124, 1, -10]) == 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxllqpsqi.jl:19\nin expression starting at\
    \ /tmp/tmpxllqpsqi.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    if length(l)\
    \ == 0 \n        throw(ArgumentError(\"List is empty\"))\n    end\n    maximum\
    \ = l[1]\n    for i in 2:length(l) \n        if l[i] > maximum \n            maximum\
    \ = l[i]\n        end\n    end\n    return maximum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = max_element;\n\t@test(candidate([1, 2, 3]) == 3)\n\t@test(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    maximum\
    \ = l[1]\n    for i in l[2:end]\n        if i > maximum\n            maximum =\
    \ i\n        end\n    end\n    maximum\nend\n</cell>\n<code language=julia-1.3>\n\
    max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the number of elements in the list that are\
    \ less than the given value.\nusing Test\n\n@testset begin\n\ncandidate = max_element;\n\
    \t@test(candidate([1, 2, 3]) == 3)\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9,\
    \ 0, 124, 1, -10]) == 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpncqwmb38.jl:16\nin expression starting at\
    \ /tmp/tmpncqwmb38.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    maximum\
    \ = l[1]\n    for i in l[2:end]\n        if i > maximum\n            maximum =\
    \ i\n        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = max_element;\n\t@test(candidate([1,\
    \ 2, 3]) == 3)\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) ==\
    \ 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1mwhsx5_.jl:16\nin expression starting at\
    \ /tmp/tmp1mwhsx5_.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    maximum\
    \ = l[1]\n    for i in l[2:end]\n        if i > maximum\n            maximum =\
    \ i\n        end\n    end\n    return maximum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = max_element;\n\t@test(candidate([1, 2, 3]) == 3)\n\t@test(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    if length(l)\
    \ == 0 \n        throw(ArgumentError(\"Empty list\"))\n    end\n    maximum =\
    \ l[1]\n    for i in 2:length(l) \n        if l[i] > maximum \n            maximum\
    \ = l[i]\n        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = max_element;\n\t@test(candidate([1,\
    \ 2, 3]) == 3)\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) ==\
    \ 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr29vyutx.jl:19\nin expression starting at\
    \ /tmp/tmpr29vyutx.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    maximum\
    \ = l[1]\n    for x in l[2:end]\n        if x > maximum\n            maximum =\
    \ x\n        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the minimum element in the list.\n    >>> min_element([1,\
    \ 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    -10\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = max_element;\n\
    \t@test(candidate([1, 2, 3]) == 3)\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9,\
    \ 0, 124, 1, -10]) == 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfdq4c9kh.jl:16\nin expression starting at\
    \ /tmp/tmpfdq4c9kh.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    maximum\
    \ = l[1]\n    for i in l[2:end]\n        if i > maximum\n            maximum =\
    \ i\n        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = max_element;\n\t@test(candidate([1,\
    \ 2, 3]) == 3)\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) ==\
    \ 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc2ay0y1j.jl:16\nin expression starting at\
    \ /tmp/tmpc2ay0y1j.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    \n  \
    \  if length(l) == 0 \n        return 0 \n    \n    maximum = l[1] \n    for x\
    \ in l[2:end] \n        if x > maximum \n            maximum = x \n        end\
    \ \n    end \n    return maximum \nend \nusing Test\n\n@testset begin\n\ncandidate\
    \ = max_element;\n\t@test(candidate([1, 2, 3]) == 3)\n\t@test(candidate([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp21bmg56n.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp21bmg56n.jl:1\n\
    in expression starting at /tmp/tmp21bmg56n.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    if length(l)\
    \ == 0 \n        throw(ArgumentError(\"List is empty\"))\n    end\n    \n    maximum\
    \ = l[1]\n    for i in 2:length(l) \n        if maximum < l[i] \n            maximum\
    \ = l[i] \n        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = max_element;\n\t@test(candidate([1,\
    \ 2, 3]) == 3)\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) ==\
    \ 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw5k4v031.jl:20\nin expression starting at\
    \ /tmp/tmpw5k4v031.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    \n  \
    \  maximum = l[1]\n    for x in l[2:end]\n        if x > maximum\n           \
    \ maximum = x\n        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = max_element;\n\t@test(candidate([1,\
    \ 2, 3]) == 3)\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) ==\
    \ 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7emazaqu.jl:17\nin expression starting at\
    \ /tmp/tmp7emazaqu.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    if length(l)\
    \ == 0 \n        throw(ArgumentError(\"Empty list\"))\n    end\n    maximum =\
    \ l[1]\n    for i in 2:length(l) \n        if l[i] > maximum \n            maximum\
    \ = l[i]\n        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = max_element;\n\t@test(candidate([1,\
    \ 2, 3]) == 3)\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) ==\
    \ 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpeytls0rq.jl:19\nin expression starting at\
    \ /tmp/tmpeytls0rq.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    if l==[]\n\
    \        throw(ArgumentError(\"Empty list\"))\n    end\n    \n    maximum = l[1]\n\
    \    for i in l[2:end]\n        if i > maximum\n            maximum = i\n    \
    \    end\n    end\n    return maximum\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = max_element;\n\t@test(candidate([1, 2, 3]) == 3)\n\t@test(candidate([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    if length(l)\
    \ == 0 \n        throw(ArgumentError(\"List is empty\"))\n    end\n    maximum\
    \ = l[1]\n    for i in 2:length(l) \n        if l[i] > maximum \n            maximum\
    \ = l[i] \n        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = max_element;\n\t@test(candidate([1,\
    \ 2, 3]) == 3)\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) ==\
    \ 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphtux1k1y.jl:19\nin expression starting at\
    \ /tmp/tmphtux1k1y.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    if length(l)\
    \ == 0 \n        throw(ArgumentError(\"List is empty\"))\n    end\n    maximum\
    \ = l[1]\n    for i in 2:length(l) \n        if l[i] > maximum \n            maximum\
    \ = l[i]\n        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = max_element;\n\t@test(candidate([1,\
    \ 2, 3]) == 3)\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) ==\
    \ 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9a18ov2j.jl:19\nin expression starting at\
    \ /tmp/tmp9a18ov2j.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    if length(l)\
    \ == 0 \n        throw(ArgumentError(\"Empty list\"))\n    end\n    maximum =\
    \ l[1]\n    for i in 2:length(l) \n        if l[i] > maximum \n            maximum\
    \ = l[i]\n        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = max_element;\n\t@test(candidate([1,\
    \ 2, 3]) == 3)\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) ==\
    \ 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcennnbbm.jl:19\nin expression starting at\
    \ /tmp/tmpcennnbbm.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    maximum\
    \ = l[1]\n    for i in l[2:end]\n        if i > maximum\n            maximum =\
    \ i\n        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.3>\n\
    max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the minimum element in the list.\n    >>> min_element([1,\
    \ 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    -10\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = max_element;\n\
    \t@test(candidate([1, 2, 3]) == 3)\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9,\
    \ 0, 124, 1, -10]) == 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9xh82inv.jl:16\nin expression starting at\
    \ /tmp/tmp9xh82inv.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    if length(l)\
    \ == 0 \n        throw(ArgumentError(\"Empty list\"))\n    end\n    maximum =\
    \ l[1]\n    for i in 2:length(l) \n        if l[i] > maximum \n            maximum\
    \ = l[i]\n        end\n    end\n    return maximum\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the sum of the elements in the list.\n    >>>\
    \ sum([1, 2, 3])\n    6\n    >>> sum([1, 2, 3, 0])\n    6\n    >>> sum([1, 2,\
    \ 3, -1])\n    6\n    >>> sum([1, 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, -1])\n\
    \    6\n    >>> sum([1, 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, -1])\n    6\n\
    \    >>> sum([1, 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, -1])\n    6\n    >>>\
    \ sum([1, 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, -1])\n    6\n    >>> sum([1,\
    \ 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, -1])\n    6\n    >>> sum([1, 2, 3, 0])\n\
    \    6\n    >>> sum([1, 2, 3, -1])\n    6\n    >>> sum([1, 2, 3, 0])\n    6\n\
    \    >>> sum([1, 2, 3, -1])\n    6\n    >>> sum([1, 2, 3, 0])\n    6\n    >>>\
    \ sum([1, 2, 3, -1])\n    6\n    >>> sum([1, 2, 3, 0])\n    6\n    >>> sum([1,\
    \ 2, 3, -1])\n    6\n    >>> sum([1, 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, -1])\n\
    \    6\n    >>> sum([1, 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, -1])\n    6\n\
    \    >>> sum([1, 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, -1])\n    6\n    >>>\
    \ sum([1, 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, -1])\n    6\n    >>> sum([1,\
    \ 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, -1])\n    6\n    >>> sum([1, 2, 3, 0])\n\
    \    6\n    >>> sum([1, 2, 3, -1])\n    6\n    >>> sum([1, 2, 3, 0])\n    6\n\
    \    >>> sum([1, 2, 3, -1])\n    6\n    >>> sum([1, 2, 3, 0])\n    6\n    >>>\
    \ sum([1, 2, 3, -1])\n    6\n    >>> sum([1, 2, 3, 0])\n    6\n    >>> sum([1,\
    \ 2, 3, -1])\n    6\n    >>> sum([1, 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, -1])\n\
    \    6\n    >>> sum([1, 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, -1])\n    6\n\
    \    >>> sum([1, 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, -1])\n    6\n    >>>\
    \ sum([1, 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, -1])\n    6\n    >>> sum([1,\
    \ 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, -1])\n    6\n    >>> sum([\nusing Test\n\
    \n@testset begin\n\ncandidate = max_element;\n\t@test(candidate([1, 2, 3]) ==\
    \ 3)\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwae9bm1p.jl:19\nin expression starting at\
    \ /tmp/tmpwae9bm1p.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    \n  \
    \  maximum = l[1]\n    for i in 2:length(l)\n        if l[i] > maximum\n     \
    \       maximum = l[i]\n        end\n    end\n    return maximum\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = max_element;\n\
    \t@test(candidate([1, 2, 3]) == 3)\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9,\
    \ 0, 124, 1, -10]) == 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzvz7dvwk.jl:17\nin expression starting at\
    \ /tmp/tmpzvz7dvwk.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    maximum\
    \ = l[1]\n    for i in l[2:end]\n        if i > maximum\n            maximum =\
    \ i\n        end\n    end\n    maximum\nend\n</cell>\n<code language=julia-1.4>\n\
    using Test\n\n@testset begin\n\ncandidate = max_element;\n\t@test(candidate([1,\
    \ 2, 3]) == 3)\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) ==\
    \ 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe3iym1we.jl:16\nin expression starting at\
    \ /tmp/tmpe3iym1we.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    \n  \
    \  maximum = l[1]\n    for i in l[2:end]\n        if i > maximum\n           \
    \ maximum = i\n        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = max_element;\n\t@test(candidate([1,\
    \ 2, 3]) == 3)\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) ==\
    \ 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsyz45rmq.jl:17\nin expression starting at\
    \ /tmp/tmpsyz45rmq.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    if length(l)\
    \ == 0 \n        throw(ArgumentError(\"List is empty\"))\n    end\n    maximum\
    \ = l[1]\n    for i in 2:length(l) \n        if l[i] > maximum \n            maximum\
    \ = l[i] \n        end\n    end\n    return maximum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = max_element;\n\t@test(candidate([1, 2, 3]) == 3)\n\t@test(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    \n  \
    \  maximum = l[1]\n    for i in l[2:end]\n        if i > maximum\n           \
    \ maximum = i\n        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.4>\n\
    max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the index of the maximum element in a given\
    \ list. For example, for the list [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10] the\
    \ function should return 6.\nusing Test\n\n@testset begin\n\ncandidate = max_element;\n\
    \t@test(candidate([1, 2, 3]) == 3)\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9,\
    \ 0, 124, 1, -10]) == 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmrgpzi8z.jl:17\nin expression starting at\
    \ /tmp/tmpmrgpzi8z.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    if length(l)\
    \ == 0 \n        throw(ArgumentError(\"List is empty\"))\n    end\n    \n    maximum\
    \ = l[1]\n    for i in 2:length(l) \n        if l[i] > maximum \n            maximum\
    \ = l[i]\n        end\n    end\n    return maximum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = max_element;\n\t@test(candidate([1, 2, 3]) == 3)\n\t@test(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    2      2\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    maximum\
    \ = l[1]\n    for i in l[2:end]\n        if i > maximum\n            maximum =\
    \ i\n        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = max_element;\n\t@test(candidate([1,\
    \ 2, 3]) == 3)\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) ==\
    \ 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe9yunyuw.jl:16\nin expression starting at\
    \ /tmp/tmpe9yunyuw.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    maximum\
    \ = l[1]\n    for i in l[2:end]\n        if i > maximum\n            maximum =\
    \ i\n        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = max_element;\n\t@test(candidate([1,\
    \ 2, 3]) == 3)\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) ==\
    \ 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc7s9w5hf.jl:16\nin expression starting at\
    \ /tmp/tmpc7s9w5hf.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    \n  \
    \  maximum = l[1]\n    for x in l[2:end]\n        if x > maximum\n           \
    \ maximum = x\n        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.4>\n\
    using Test\n\n@testset begin\n\ncandidate = max_element;\n\t@test(candidate([1,\
    \ 2, 3]) == 3)\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) ==\
    \ 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvbttsulg.jl:17\nin expression starting at\
    \ /tmp/tmpvbttsulg.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    maximum\
    \ = l[1]\n    for i in l[2:end]\n        if i > maximum\n            maximum =\
    \ i\n        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the sum of the elements of a list.\n>>> sum([1,\
    \ 2, 3])\n6\n>>> sum([1, -2, 3])\n1\n>>> sum([1, 2, -3, 4])\n5\n>>> sum([1, 2,\
    \ -3, 4], -2)\n1\n>>> sum([1, 2, -3, 4], -3)\n0\n>>> sum([1, 2, -3, 4], -4)\n\
    -4\n>>> sum([1, 2, -3, 4], 5)\n-5\n>>> sum([1, 2, -3, 4], 0)\n0\n>>> sum([1, 2,\
    \ -3, 4], 1)\n-4\n>>> sum([1, 2, -3, 4], 2)\n-4\n>>> sum([1, 2, -3, 4], 3)\n-4\n\
    >>> sum([1, 2, -3, 4], 4)\n-4\n>>> sum([1, 2, -3, 4], 5)\n-5\n>>> sum([1, 2, -3,\
    \ 4], 6)\n-5\n>>> sum([1, 2, -3, 4], 7)\n-5\n>>> sum([1, 2, -3, 4], 8)\n-5\n>>>\
    \ sum([1, 2, -3, 4], 9)\n-5\n>>> sum([1, 2, -3, 4], 10)\n-5\n>>> sum([1, 2, -3,\
    \ 4], 11)\n-5\n>>> sum([1, 2, -3, 4], 12)\n-5\n>>> sum([1, 2, -3, 4], 13)\n-5\n\
    >>> sum([1, 2, -3, 4], 14)\n-5\n>>> sum([1, 2, -3, 4], 15)\n-5\n>>> sum([1, 2,\
    \ -3, 4], 16)\n-5\n>>> sum([1, 2, -3, 4], 17)\n-5\n>>> sum([1, 2, -3, 4], 18)\n\
    -5\n>>> sum([1, 2, -3, 4], 19)\n-5\n>>> sum([1, 2, -3, 4], 20)\n-5\n>>> sum([1,\
    \ 2, -3, 4], 21)\n-5\n>>> sum([1, 2, -3, 4], 22)\n-5\n>>> sum([1, 2, -3, 4], 23)\n\
    -5\n>>> sum([1, 2, -3, 4], 24)\n-5\n>>> sum([1, 2, -3, 4], 25)\n-5\n>>> sum([1,\
    \ 2, -3, 4], 26)\n-5\n>>> sum([1, 2, -3, 4], 27)\n-5\n>>> sum([1, 2, -3, 4], 28)\n\
    -5\n>>> sum([1, 2, -3, 4], 29)\n-5\n>>> sum([1, 2, -3, 4], 30)\n-5\n>>> sum([1,\
    \ 2, -3, 4], 31)\n-5\n>>> sum([1, 2, -3, 4], 32)\n-5\n>>> sum([1, 2, -3, 4], 33)\n\
    -5\n>>> sum([1, 2, -3, 4], 34)\n-5\n>>> sum([1, 2, -3, 4], 35)\n-5\nusing Test\n\
    \n@testset begin\n\ncandidate = max_element;\n\t@test(candidate([1, 2, 3]) ==\
    \ 3)\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_rfpffrl.jl:16\nin expression starting at\
    \ /tmp/tmp_rfpffrl.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    if length(l)\
    \ == 0 \n        throw(ArgumentError(\"Empty list\"))\n    end\n    \n    maximum\
    \ = l[1]\n    for i in 2:length(l) \n        if l[i] > maximum \n            maximum\
    \ = l[i]\n        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the sum of the elements in the list.\n    >>>\
    \ sum([1, 2, 3])\n    6\n    >>> sum([1, 2, 3, 0])\n    6\n    >>> sum([1, 2,\
    \ 3, -1])\n    6\n    >>> sum([1, 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, -1])\n\
    \    6\n    >>> sum([1, 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, -1])\n    6\n\
    \    >>> sum([1, 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, -1])\n    6\n    >>>\
    \ sum([1, 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, -1])\n    6\n    >>> sum([1,\
    \ 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, -1])\n    6\n    >>> sum([1, 2, 3, 0])\n\
    \    6\n    >>> sum([1, 2, 3, -1])\n    6\n    >>> sum([1, 2, 3, 0])\n    6\n\
    \    >>> sum([1, 2, 3, -1])\n    6\n    >>> sum([1, 2, 3, 0])\n    6\n    >>>\
    \ sum([1, 2, 3, -1])\n    6\n    >>> sum([1, 2, 3, 0])\n    6\n    >>> sum([1,\
    \ 2, 3, -1])\n    6\n    >>> sum([1, 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, -1])\n\
    \    6\n    >>> sum([1, 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, -1])\n    6\n\
    \    >>> sum([1, 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, -1])\n    6\n    >>>\
    \ sum([1, 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, -1])\n    6\n    >>> sum([1,\
    \ 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, -1])\n    6\n    >>> sum([1, 2, 3, 0])\n\
    \    6\n    >>> sum([1, 2, 3, -1])\n    6\n    >>> sum([1, 2, 3, 0])\n    6\n\
    \    >>> sum([1, 2, 3, -1])\n    6\n    >>> sum([1, 2, 3, 0])\n    6\n    >>>\
    \ sum([1, 2, 3, -1])\n    6\n    >>> sum([1, 2, 3, 0])\n    6\n    >>> sum([1,\
    \ 2, 3, -1])\n    6\n    >>> sum([1, 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, -1])\n\
    \    6\n    >>> sum([1, 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, -1])\n    6\n\
    \    >>> sum([1, 2, 3, 0])\n    6\n    >>> sum([1, 2, 3, -1])\n    6\n    >>>\
    \ sum([1, 2, 3, 0])\n    6\n\nusing Test\n\n@testset begin\n\ncandidate = max_element;\n\
    \t@test(candidate([1, 2, 3]) == 3)\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9,\
    \ 0, 124, 1, -10]) == 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0gj8_myb.jl:20\nin expression starting at\
    \ /tmp/tmp0gj8_myb.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    if length(l)\
    \ == 0 \n        throw(ArgumentError(\"List is empty\"))\n    end\n    \n    maximum\
    \ = l[1]\n    for i in 2:length(l) \n        if l[i] > maximum \n            maximum\
    \ = l[i]\n        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the minimum element in the list.\n    >>> min_element([1,\
    \ 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    -10\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = max_element;\n\
    \t@test(candidate([1, 2, 3]) == 3)\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9,\
    \ 0, 124, 1, -10]) == 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpidc1wl9s.jl:20\nin expression starting at\
    \ /tmp/tmpidc1wl9s.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    maximum\
    \ = l[1]\n    for i in l[2:end]\n        if i > maximum\n            maximum =\
    \ i\n        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.3>\n\
    using Test\n\n@testset begin\n\ncandidate = max_element;\n\t@test(candidate([1,\
    \ 2, 3]) == 3)\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) ==\
    \ 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2zkfrka1.jl:16\nin expression starting at\
    \ /tmp/tmp2zkfrka1.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2,\
    \ 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n \
    \   123\n    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n    if length(l)\
    \ == 0 \n        throw(ArgumentError(\"List is empty\"))\n    end\n    maximum\
    \ = l[1]\n    for i in 2:length(l) \n        if l[i] > maximum \n            maximum\
    \ = l[i]\n        end\n    end\n    return maximum\nend\n</cell>\n<text>\nmax_element\n\
    using Test\n\n@testset begin\n\ncandidate = max_element;\n\t@test(candidate([1,\
    \ 2, 3]) == 3)\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) ==\
    \ 124)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf994wkwf.jl:19\nin expression starting at\
    \ /tmp/tmpf994wkwf.jl:19\n"
  exit_code: 1
  status: SyntaxError
