name: HumanEval_16_count_distinct_characters
language: julia
prompt: "\"\"\" Given a string, find out how many distinct characters (regardless\
  \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n   \
  \ 3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction count_distinct_characters(string::String)::Int64\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
  @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
  abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
  Jerry jERRY JeRRRY\") == 5)\nend\n"
completions: ["    count_distinct_characters(string, 0)\nend", "    count_distinct_characters_helper(string,0,0)\n\
    end", "    \n    count_distinct_characters = HashSet()\n    for character in string:\n\
    \        count_distinct_characters.add(character)\n    return count_distinct_characters.length\n\
    </code>\n<|/ a tags=string,haskell |>\n<| a tags=string,haskell |>\n<code>\nimport\
    \ Data.List", "    count_distinct_characters(string, 0)\nend", "    \n    count\
    \ = 0\n    \n    for c in string:\n        if c.isUpper():\n            count\
    \ += 1\n        elif c.isLower():\n            count += 1\n        elif c.isDigit():\n\
    \            count += 1\n        elif c.isSpace():\n            count += 1\n \
    \       else:\n            count += 1\n            \n    return count\n</code>\n\
    <|/ a tags=string,haskell |>\n<| c |>\nThe `if c.isUpper()` can be replaced with\
    \ `if c.isUppercase()`.\n<|/ c |>\n<| c |>\nYes, but that would require a newer\
    \ version of GHC. `isUppercase` was added in version 7.10.\n<|/ c |>\n<| c |>\n\
    I guess it depends on the version of GHC. `isUppercase` was added in 7.10.\n<|/\
    \ c |>\n<| c |>\nI guess it depends on the version of GHC. `isUppercase` was added\
    \ in 7.10.\n<|/ c |>\n<| c |>\nI guess it depends on the version of GHC. `isUppercase`\
    \ was added in 7.10.\n<|/ c |>\n<| a dscore=2 |>\nThe simplest way is to use Data.Char.\n\
    <code>\nimport Data.Char", "    count_distinct_characters(string, 0)\nend", " \
    \   \n    count_distinct_characters = \n        string.map(x => x.toUpperCase()).filter(x\
    \ => x != ' ').length\n    \n    return count_distinct_characters\nend\n</cell>\n\
    <code language=julia-1.5>\ncount_distinct_characters('xyzXYZ')\n</cell>\n<code\
    \ language=julia-1.5>\ncount_distinct_characters('Jerry')\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns the number of times each\
    \ character appears in the string. \nFor example, if the input string is \"Jerry\
    \ Jerry Jerry\" the output should be [Jerry => 3, Jerry => 2, Jerry => 1]", " \
    \   count_distinct_characters(string, 0)\nend", "    count_distinct_characters\
    \ = string.count{char}\nend\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a string and returns the number of characters in the string that are not\
    \ in the alphabet (case insensitive).", "    count_distinct_characters(string,\
    \ 0)\nend", "    \n    count_distinct_characters = \"\"\n    \n    for character\
    \ in string:\n        if character not in count_distinct_characters:\n       \
    \     count_distinct_characters = count_distinct_characters + character\n    \
    \        \n    return count_distinct_characters.length\n</code>\n<|/ a dscore=0\
    \ |>\n<| a dscore=0 |>\n<code>\ndef count_distinct_characters(string::String)::Int64\n\
    \    \n    count_distinct_characters = \"\"\n    \n    for character in string:\n\
    \        if character not in count_distinct_characters:\n            count_distinct_characters\
    \ = count_distinct_characters + character\n            \n    return count_distinct_characters.length\n\
    </code>\n<|/ a tags=string,haskell |>\n<| c |>\nWhile this code may answer the\
    \ question, providing additional context regarding how and/or why it solves the\
    \ problem would improve the answer's long-term value.\n<|/ c |>\n<| a tags=string,haskell\
    \ |>\n<code>\nimport Data.List", "    \n    \"\"\"\n    Count the distinct characters\
    \ in a string\n    \n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>>\
    \ count_distinct_characters('Jerry')\n    4\n    \"\"\"", "    count_distinct_characters\
    \ = \"\"\n    for char in string:\n        if count_distinct_characters[char]\
    \ == \"\":\n            count_distinct_characters[char] = 1\n        else:\n \
    \           count_distinct_characters[char] += 1\n    return count_distinct_characters[char]\n\
    </code>\n<|/ a tags=string,haskell |>\n<| c |>\nThanks for your answer! I did\
    \ some research and found that `Data.Char` has a function `toUpper` that does\
    \ exactly what I want.\n<|/ c |>\n<| c |>\nYes, `toUpper` will work, but `toUpper`\
    \ will also convert `'a'` to `'A'`, which is not what you want. `toUpper` will\
    \ also convert `'A'` to `'a'`, which is not what you want. `toUpper` will also\
    \ convert `'0'` to `'0'`, which is not what you want. `toUpper` will also convert\
    \ `'1'` to `'1'`, which is not what you want. `toUpper` will also convert `'2'`\
    \ to `'2'`, which is not what you want. `toUpper` will also convert `'3'` to `'3'`,\
    \ which is not what you want. `toUpper` will also convert `'4'` to `'4'`, which\
    \ is not what you want. `toUpper` will also convert `'5'` to `'5'`, which is not\
    \ what you want. `toUpper` will also convert `'6'` to `'6'`, which is not what\
    \ you want. `toUpper` will also convert `'7'` to `'7'`, which is not what you\
    \ want. `toUpper` will also convert `'8'` to `'8'`, which is not what you want.\
    \ `toUpper` will also convert `'9'` to `'9'`, which is not what you want.\n<|/\
    \ c |>\n<| c |>\n`toUpper` will also convert `'a'` to `'A'`, which is not what\
    \ you want. `toUpper` will also convert `'A'` to `'a'`, which is not what you\
    \ want. `toUpper` will also convert `'0'` to `'0'`, which is not what you want.\
    \ `toUpper` will also convert `'1'` to `'1'`, which is not what you want. `toUpper`\
    \ will also convert `'2'` to `'2'`, which is not what you want. `toUpper` will\
    \ also convert `'3'` to `'3'`, which is not what you want. `toUpper` will also\
    \ convert `", "    count_distinct_characters = \n        count_distinct_characters(string::String)::Int64\n\
    \    \n    if string == \"\"\n        0\n    else\n        count_distinct_characters(string[1:end-1])\
    \ + count_distinct_characters(string[end])\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a string and returns the number of characters in the\
    \ string that are not in the alphabet (case insensitive). For example, the string\
    \ \"hello\" has 5 characters that are not in the alphabet, namely \"e\", \"l\"\
    , \"o\", and \"w\".", "    count_distinct_characters = \n        string.map(x\
    \ => x.toLowercase()).filter(x => x != ' ').length\nend\n</cell>\n<code language=julia-1.5>\n\
    count_distinct_characters('xyzXYZ')\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters('Jerry')\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of times each character appears in the string.", "    \n    count\
    \ = 0\n    for c in string:\n        if c.isUpper():\n            count += 1\n\
    \        elif c.isLower():\n            count += 1\n        elif c.isUpper():\n\
    \            count += 1\n        elif c.isLower():\n            count += 1\n \
    \   return count\n</code>\n<|/ a tags=string,haskell,count |>\n<| c |>\nThis doesn't\
    \ work. Try it with `count_distinct_characters('Jerry')`.\n<|/ c |>\n<| c |>\n\
    Thanks, I fixed it. I had a typo which I fixed now.\n<|/ c |>\n<| c |>\nThe `if`\
    \ statement is redundant. Just `count` the upper and lower case letters.\n<|/\
    \ c |>\n<| c |>\nYes, I know, but I wanted to show how it could be done with if-statements.\n\
    <|/ c |>\n<| c |>\nI see. But you still have `count` twice in your code. Also,\
    \ `count` should be `0` for the empty string. `count` should also be `1` for the\
    \ string `\"Jerry\"`.\n<|/ c |>\n<| a tags=string,haskell,count |>\n<code>\nimport\
    \ Data.List", "    \n    count_distinct_characters_helper(string,0,0)\nend", " \
    \   \n    count = 0\n    for c in string:\n        if c.isUpper():\n         \
    \   count += 1\n        elif c.isLower():\n            count += 1\n        elif\
    \ c.isDigit():\n            count += 1\n        elif c.isSpace():\n          \
    \  count += 1\n        else:\n            count += 1\n    return count\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThis does not provide an answer to the question. To\
    \ critique or request clarification from an author, leave a comment below their\
    \ post. - [From Review](/review/low-quality-posts/27814774)\n<|/ c |>\n<| c |>\n\
    I believe this does answer the question. He asked how to count the number of distinct\
    \ characters in a string. He also gave a solution that works. He also provided\
    \ a link to a solution that works. He also provided a link to a solution that\
    \ does not work. He also provided a link to a solution that does not work. He\
    \ also provided a link to a solution that does not work. He also provided a link\
    \ to a solution that does not work. He also provided a link to a solution that\
    \ does not work. He also provided a link to a solution that does not work. He\
    \ also provided a link to a solution that does not work. He also provided a link\
    \ to a solution that does not work. He also provided a link to a solution that\
    \ does not work. He also provided a link to a solution that does not work. He\
    \ also provided a link to a solution that does not work. He also provided a link\
    \ to a solution that does not work. He also provided a link to a solution that\
    \ does not work. He also provided a link to a solution that does not work. He\
    \ also provided a link to a solution that does not work. He also provided a link\
    \ to a solution that does not work. He also provided a link to a solution that\
    \ does not work. He also provided a link to a solution that does not work. He\
    \ also provided a link to a solution that does not work. He also provided a link\
    \ to a solution that does not work. He also provided a link to a solution that\
    \ does not work. He also provided a link to a solution that does not work. He\
    \ also provided a link to a solution that does not work. He also provided a link\
    \ to a solution that does not work. He also provided a link to a solution that\
    \ does not work. He also provided a link to a solution that does not work. He\
    \ also provided a link to a solution that does not work. He also provided a link\
    \ to a solution that does not work. He also provided a link to a solution that\
    \ does not ", "    if string == \"\"\n        0\n    else\n        count_distinct_characters(string[1:end-1])\
    \ + count_distinct_characters(string[end])\nend\n</cell>\n<text>\nExercise 9\n\
    Write a function that takes a string and returns the number of characters that\
    \ are repeated more than once.", "    \n    count = 0\n    for c in string:\n\
    \        if c.isUpper():\n            count += 1\n        elif c.isLower():\n\
    \            count += 1\n        elif c.isDigit():\n            count += 1\n \
    \       elif c.isSpace():\n            count += 1\n    return count\n</code>\n\
    <|/ a tags=string,haskell,functional-programming |>\n<| c |>\nThe `count` function\
    \ can be written more concisely as `length . filter (\\c -> isUpper c || isLower\
    \ c || isDigit c || isSpace c)`.\n<|/ c |>\n<| c |>\nI agree, that is a better\
    \ way to write it. I was trying to keep it close to the original code as much\
    \ as possible.\n<|/ c |>\n<| a dscore=1 |>\n<code>\nimport Data.Char", "    \n\
    \    count = 0\n    for c in string:\n        if c.isUpper():\n            count\
    \ += 1\n        elif c.isLower():\n            count += 1\n        elif c.isDigit():\n\
    \            count += 1\n    return count\n</cell>\n<text>\nExercise 7\nWrite\
    \ a function that takes a string and returns the number of distinct characters\
    \ (regardless of case) does it consist of. For example, given 'xyzXYZ', it should\
    \ return 3.", "    count_distinct_characters(string, 0)\nend", "    \n    count\
    \ = 0\n    for c in string:\n        if c.isUpper():\n            count += 1\n\
    \        elif c.isLower():\n            count += 1\n        elif c.isDigit():\n\
    \            count += 1\n        elif c.isSpace():\n            count += 1\n \
    \   return count\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis does not provide an\
    \ answer to the question. To critique or request clarification from an author,\
    \ leave a comment below their post. - [From Review](/review/low-quality-posts/29690138)\n\
    <|/ c |>\n<| c |>\nI believe this does answer the question. He wants to count\
    \ the number of distinct characters in a string. He also wants to count the number\
    \ of distinct characters in any string. He also wants to count the number of distinct\
    \ characters in any string. He also wants to count the number of distinct characters\
    \ in any string. He also wants to count the number of distinct characters in any\
    \ string. He also wants to count the number of distinct characters in any string.\
    \ He also wants to count the number of distinct characters in any string. He also\
    \ wants to count the number of distinct characters in any string. He also wants\
    \ to count the number of distinct characters in any string. He also wants to count\
    \ the number of distinct characters in any string. He also wants to count the\
    \ number of distinct characters in any string. He also wants to count the number\
    \ of distinct characters in any string. He also wants to count the number of distinct\
    \ characters in any string. He also wants to count the number of distinct characters\
    \ in any string. He also wants to count the number of distinct characters in any\
    \ string. He also wants to count the number of distinct characters in any string.\
    \ He also wants to count the number of distinct characters in any string. He also\
    \ wants to count the number of distinct characters in any string. He also wants\
    \ to count the number of distinct characters in any string. He also wants to count\
    \ the number of distinct characters in any string. He also wants to count the\
    \ number of distinct characters in any string. He also wants to count the number\
    \ of distinct characters in any string. He also wants to count the number of distinct\
    \ characters in any string. He also wants to count the number of distinct characters\
    \ in any string. He also wants to count the number of distinct characters in any\
    \ string. He also wants to count the number of distinct characters in any string.\
    \ He also wants to count the number of distinct characters in any string. He also\
    \ wants to count the number of distinct characters in any string. He also wants\
    \ to count the number of distinct characters in any string. He also wants to count\
    \ the number of distinct character", "    count_distinct_characters(string, 0)\n\
    end", "    count_distinct_characters(string, 0)\nend", "    count_distinct_characters\
    \ = \n        string.foldl(\n            0,\n            |acc, c| acc + if c.isUppercase()\
    \ then 1 else 0 end\n        )\nend\n</cell>\n<text>\nExercise: Write a function\
    \ that counts the number of distinct characters in a string that only consist\
    \ of lowercase letters.", "    \n    count = 0\n    for c in string:\n       \
    \ if c.isUpper():\n            count += 1\n        elif c.isLower():\n       \
    \     count += 1\n        elif c.isAlpha():\n            count += 1\n    return\
    \ count\n</code>\n<|/ a tags=string,haskell |>\n<| a dscore=1 |>\n<code>\nimport\
    \ Data.List", "    \n    count = 0\n    for c in string:\n        if c.isUpper():\n\
    \            count += 1\n        elif c.isLower():\n            count += 1\n \
    \       else:\n            count += 1\n    return count\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns the number of times each\
    \ character appears in the string. For example, the string 'abracadabra' would\
    \ return {'a': 2, 'b':2, 'c':1, 'd':1, 'r':2}.", "    count_distinct_characters\
    \ = \n        count_distinct_characters(string::String)::Int64\n    \n    if string\
    \ == \"\"\n        count_distinct_characters = 1\n    else\n        count_distinct_characters\
    \ = \n            count_distinct_characters(string::String)::Int64 + \n      \
    \      count_distinct_characters(string::String)::Int64\n    end\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of times each character appears in the string. For example, given the string\
    \ \"Jerry Jerry Jerry\" the function should return {\"Jerry\" => 3, \"r\" => 2,\
    \ \"e\" => 3}", "    count_distinct_characters(string, 0)\nend", "    count_distinct_characters(string,\
    \ 0)\nend", "    \n    count = 0\n    for c in string:\n        if c.isUpper():\n\
    \            count += 1\n        elif c.isLower():\n            count += 1\n \
    \       elif c.isDigit():\n            count += 1\n        elif c.isSpace():\n\
    \            count += 1\n    return count\n</code>\n<|/ a dscore=1 |>\n<| a tags=string,haskell\
    \ |>\n<code>\nimport Data.List\nimport Data.Char", "    \n    \"\"\"\n    Count\
    \ the distinct characters in a string\n    \n    Arguments:\n        string {String}\
    \ -- The string to be counted\n    \n    Returns:\n        Int64 -- The number\
    \ of distinct characters in the string\n    \"\"\"\n    \n    count = 0\n    for\
    \ char in string:\n        if char.isalpha():\n            count += 1\n    return\
    \ count\n</cell>\n<text>\nExercise 3: Write a function that takes a string and\
    \ returns the number of uppercase letters in the string", "    count_distinct_characters\
    \ = Set.new()\n    for c in string:\n        count_distinct_characters.add(c)\n\
    \    return count_distinct_characters.length\n</code>\n<|/ a dscore=1 |>\n<| a\
    \ tags=string,haskell,algorithm |>\n<code>\nimport Data.List", "    \n    \"\"\
    \"\n    Count the distinct characters in a string\n    \n    >>> count_distinct_characters('xyzXYZ')\n\
    \    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"", "    count_distinct_characters(string,\
    \ 0)\nend", "    count_distinct_characters(string, 0)\nend", "    count_distinct_characters\
    \ = \n        count_distinct_characters(\n            string.map(\n          \
    \      char::Char\n            )\n        )\n    return count_distinct_characters\n\
    </code>\n<|/ a tags=haskell,functional-programming |>\n<| c |>\nI like your solution,\
    \ but I believe it can be simplified a bit. `count_distinct_characters = length\
    \ . map toLower` would do the same thing.\n<|/ c |>\n<| c |>\nYes, that's true.\
    \ Thanks.\n<|/ c |>\n<| a dscore=2 |>\n<code>\nimport Data.Char (toLower)", " \
    \   count_distinct_characters(string, 0)\nend", "    \n    count_distinct_characters\
    \ = \n        count_distinct_characters_helper(string)\n    \n    return count_distinct_characters\n\
    end count_distinct_characters", "    count_distinct_characters(string, 0)\nend",
  "    count_distinct_characters(string, 0)\nend", "    count_distinct_characters(string,\
    \ 0)\nend\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters('xyzXYZ')\n\
    </cell>\n<code language=julia-1.5>\ncount_distinct_characters('Jerry')\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of distinct characters\
    \ in a string that appear in another string.", "    count_distinct_characters(string,\
    \ 0)\nend", "    \n    count = 0\n    for c in string:\n        if c.isUpper():\n\
    \            count += 1\n        elif c.isLower():\n            count += 1\n \
    \       else:\n            count += 1\n    return count\n</code>\n<|/ a tags=string,haskell\
    \ |>\n<| c |>\nI like this solution, but I wonder if there is a way to do it without\
    \ having to use recursion.\n<|/ c |>\n<| c |>\nI agree with you, this is probably\
    \ the most efficient solution. I'm just trying to show how to do it without recursion.\n\
    <|/ c |>\n<| c |>\nI added a solution without recursion.\n<|/ c |>\n<| c |>\n\
    I like your solution, but I wonder if there is a way to do it without recursion.\n\
    <|/ c |>\n<| c |>\nI added a solution without recursion.\n<|/ c |>\n<| a |>\n\
    <code>\nimport Data.List", "    \n    count = 0\n    for c in string:\n      \
    \  if c.isUpper():\n            count += 1\n        elif c.isLower():\n      \
    \      count += 1\n        else:\n            count += 1\n    return count\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a string and returns the number\
    \ of characters in the string that are uppercase and lowercase. For example, count_distinct_characters('xyzXYZ')\
    \ should return 3.", "    \n    count = 0\n    for c in string:\n        if c.isUpper():\n\
    \            count += 1\n        elif c.isLower():\n            count += 1\n \
    \       else:\n            count += 1\n    return count\n</cell>\n<text>\nExercise\
    \ 10\nWrite a function that takes a string and returns the number of times each\
    \ character appears in the string. For example, if the string is 'Jerry', the\
    \ function should return {'J':1, 'e':2, 'r':1}.", "    count_distinct_characters_helper(string,0,0)\n\
    end\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters('xyzXYZ')\n\
    </cell>\n<code language=julia-1.5>\ncount_distinct_characters('Jerry')\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of characters in that string that occur more than once.", "    count_distinct_characters(string,\
    \ 0)\nend", "    \n    count_distinct_characters = \n        count_distinct_characters(string,\
    \ 0, string.length)\n    \n    return count_distinct_characters\nend", "    count_distinct_characters(string,\
    \ 0)\nend", "    \n    count = 0\n    for c in string:\n        if c.isUpper():\n\
    \            count += 1\n        elif c.isLower():\n            count += 1\n \
    \       elif c.isAlpha():\n            count += 1\n    return count\n</cell>\n\
    <text>\nExercise 4\nWrite a function that takes a string and returns a string\
    \ where all characters are capitalized. \nFor example, given 'hello', your function\
    \ should return 'Hello'.", "    count_distinct_characters = String.length(string)\n\
    \    return count_distinct_characters\nend count_distinct_characters\n</cell>\n\
    <code language=julia-1.3>\ncount_distinct_characters('xyzXYZ')\n</cell>\n<code\
    \ language=julia-1.3>\ncount_distinct_characters('Jerry')\n</cell>\n<text>\nWrite\
    \ a function that takes a string and returns the number of characters that are\
    \ not repeated in the string.", "    count_distinct_characters = \"\"\n    for\
    \ character in string\n        count_distinct_characters = count_distinct_characters\
    \ + character\n    end\n    return count_distinct_characters\nend\n</cell>\n<code\
    \ language=julia-1.5>\ncount_distinct_characters(\"hello\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the number of times\
    \ the character \"e\" occurs in the string.", "    count_distinct_characters(string,\
    \ 0)\nend", "    \n    count_distinct_characters = string.count{|x| x <=> ' '}\n\
    end\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters('xyzXYZ')\n\
    </cell>\n<code language=julia-1.5>\ncount_distinct_characters('Jerry')\n</cell>\n\
    <text>\nExercise: Write a function that takes a string and returns the number\
    \ of distinct characters (regardless of case) does it consist of. For example,\
    \ given \"xyzXYZ\", it should return 3.", "    \n    count = 0\n    for character\
    \ in string\n        if character in string.lowercase\n            count += 1\n\
    \        else if character in string.uppercase\n            count += 1\n     \
    \   else if character in string.digits\n            count += 1\n        else if\
    \ character in string.special\n            count += 1\n        else if character\
    \ in string.whitespace\n            count += 1\n        else if character in string.printable\n\
    \            count += 1\n        else\n            count += 0\n    return count\n\
    </code>\n<|/ a dscore=0 |>\n<| a tags=string,haskell |>\n<code>\nimport Data.List",
  "    \n    count_distinct_characters = string.count{|x| x != ' '}\n    \n    return\
    \ count_distinct_characters\nend\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters('xyzXYZ')\n\
    </cell>\n<code language=julia-1.5>\ncount_distinct_characters('Jerry')\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a string and returns the number\
    \ of characters in the string that are spaces.", "    \n    count_distinct_characters\
    \ = String.length(string)\n    \n    for char in string\n        count_distinct_characters\
    \ = count_distinct_characters - String.length(String.lower(char))\n        count_distinct_characters\
    \ = count_distinct_characters - String.length(String.upper(char))\n        \n\
    \    return count_distinct_characters\n</code>\n<|/ a tags=string,haskell,count\
    \ |>\n<| c |>\nThis doesn't work if you have a string with multiple repeated characters.\
    \ For example, `count_distinct_characters(\"abcabc\")` returns `3`, but should\
    \ be `2`.\n<|/ c |>\n<| c |>\nYes, I noticed that and fixed it now. Thanks!\n\
    <|/ c |>\n<| a tags=string,haskell,count |>\n<code>\nimport Data.List", "    \n\
    \    count_distinct_characters = \n        count_distinct_characters(string.lower(),\
    \ string.upper())\n    \n    return count_distinct_characters\nend\n</cell>\n\
    <code language=julia-1.5>\ncount_distinct_characters(\"Jerry\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the number of characters\
    \ in the string that are uppercase letters.", "    \n    \"\"\"\n    Count the\
    \ distinct characters in a string\n    \n    >>> count_distinct_characters('xyzXYZ')\n\
    \    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"", "    count_distinct_characters\
    \ = string.count\n    return count_distinct_characters(string)\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    count = 0\n    for c in string:\n     \
    \   if c.isUpper():\n            count += 1\n        elif c.isLower():\n     \
    \       count += 1\n        elif c.isDigit():\n            count += 1\n      \
    \  elif c.isSpace():\n            count += 1\n    return count\n</code>\n<|/ a\
    \ tags=string,haskell,count,character |>\n<| a tags=string,haskell,count,character\
    \ |>\nI like using Data.Char.\n<code>\nimport Data.Char", "    count_distinct_characters\
    \ = string.count\nend", "    count_distinct_characters(string, 0)\nend", "   \
    \ count_distinct_characters(string, 0)\nend", "    count_distinct_characters(string,\
    \ 0)\nend", "    if string == \"\"\n        0\n    else\n        count_distinct_characters(string[1:end-1])\
    \ + count_distinct_characters(string[end])\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function that counts the number of times a substring appears in a string.\
    \ For example, count_substring('abcabc', 'abc') should return 3.", "    count_distinct_characters\
    \ = count(string) |> count\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a string and returns the number of times each character appears in\
    \ the string. For example, given \"abcabc\", your function should return {\"a\"\
    \ => 1, \"b\" => 2, \"c\" => 3}.", "    count_distinct_characters_helper(string,0,0)\n\
    end", "    count_distinct_characters = Set.new()\n    for c in string:\n     \
    \   count_distinct_characters.add(c)\n    return count_distinct_characters.length\n\
    </code>\n<|/ a tags=string,haskell,algorithm |>\n<| c |>\nThis doesn't work if\
    \ there are repeated characters in the string.\n<|/ c |>\n<| c |>\nI believe this\
    \ solution is O(n^2) in the worst case. `count_distinct_characters` has O(n) complexity\
    \ in the worst case. `count_distinct_characters` has O(n) complexity in the best\
    \ case. `count_distinct_characters` has O(n) complexity in the average case. `count_distinct_characters`\
    \ has O(n) complexity in the best case when `count_distinct_characters` has O(n)\
    \ complexity in the worst case.\n<|/ c |>\n<| c |>\nI believe this solution is\
    \ O(n) in the worst case. `count_distinct_characters` has O(n) complexity in the\
    \ worst case. `count_distinct_characters` has O(n) complexity in the best case.\
    \ `count_distinct_characters` has O(n) complexity in the average case. `count_distinct_characters`\
    \ has O(n) complexity in the best case when `count_distinct_characters` has O(n)\
    \ complexity in the worst case.\n<|/ c |>\n<| c |>\nI believe this solution is\
    \ O(n) in the worst case. `count_distinct_characters` has O(n) complexity in the\
    \ worst case. `count_distinct_characters` has O(n) complexity in the best case.\
    \ `count_distinct_characters` has O(n) complexity in the average case. `count_distinct_characters`\
    \ has O(n) complexity in the best case when `count_distinct_characters` has O(n)\
    \ complexity in the worst case.\n<|/ c |>\n<| c |>\nI believe this solution is\
    \ O(n) in the worst case. `count_distinct_characters` has O(n) complexity in the\
    \ worst case. `count_distinct_characters` has O(n) complexity in the best case.\
    \ `count_distinct_characters` has O(n) complexity in the average case. `count_distinct_characters`\
    \ has O(n) complexity in the best case when `count_distinct_characters` has O(n)\
    \ complexity in the worst case.\n<|/ c |>\n<| a |>\nI believe this solution is\
    \ O(n) in the worst case. count_distinct_characters has O(n) complexity in the ",
  "    if string == \"\"\n        0\n    else\n        count_distinct_characters(string[1:end-1])\
    \ + count_distinct_characters(string[end])\nend\n</cell>\n<code language=julia-1.5>\n\
    count_distinct_characters('xyzXYZ')\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a string and returns the number of characters in the string that\
    \ are uppercase letters.", "    count_distinct_characters = \"\"\n    for character\
    \ in string\n        count_distinct_characters = count_distinct_characters + character\n\
    \    end\n    return count_distinct_characters.length\nend", "    \n    count_distinct_characters\
    \ = \n        string.\n        foldl(\n            0,\n            |acc, c| acc\
    \ + if c.isUpperCase then 1 else 0,\n            String.Chars.toList\n       \
    \ )\nend\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters('xyzXYZ')\n\
    </cell>\n<text>\nExercise 2\nWrite a function that counts the number of times\
    \ a character appears in a string.", "    \n    count_distinct_characters(string,\
    \ 0)\nend", "    count_distinct_characters(string, 0)\nend", "    count_distinct_characters(string,\
    \ 0)\nend\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"abc\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"abcXYZ\")\n\
    </cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"abcXYZ\", 0)\n\
    </cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"abcXYZ\", 2)\n\
    </cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"abcXYZ\", 3)\n\
    </cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"abcXYZ\", 4)\n\
    </cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"abcXYZ\", 5)\n\
    </cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"abcXYZ\", 6)\n\
    </cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"abcXYZ\", 7)\n\
    </cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"abcXYZ\", 8)\n\
    </cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"abcXYZ\", 9)\n\
    </cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"abcXYZ\", 10)\n\
    </cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"abcXYZ\", 11)\n\
    </cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"abcXYZ\", 12)\n\
    </cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"abcXYZ\", 13)\n\
    </cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"abcXYZ\", 14)\n\
    </cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"abcXYZ\", 15)\n\
    </cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"abcXYZ\", 16)\n\
    </cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"abcXYZ\", 17)\n\
    </cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"abcXYZ\", 18)\n\
    </cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"abcXYZ\", 19)\n\
    </cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"abcXYZ\", 20)\n\
    </cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"abcXYZ\", 21)\n\
    </cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"abcXYZ\", 22)\n\
    </cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"abcXYZ\", 23)\n\
    </cell", "    if string == \"\"\n        0\n    else\n        count_distinct_characters(string[1:end-1])\
    \ + count_distinct_characters(string[end])\nend\n</cell>\n<code language=julia-1.5>\n\
    count_distinct_characters(\"abc\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and returns the number of times each character appears in\
    \ the string.", "    count_distinct_characters(string, 0)\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@code_native count_distinct_characters('xyzXYZ')\n</cell>\n\
    <code language=julia-1.5>\n@code_native count_distinct_characters('Jerry')\n</cell>\n\
    <text>\nExercise 3\nWrite a function that counts the number of times a character\
    \ appears in a string. For example, count_characters('xyzXYZ') should return 3.",
  "    \n    count_distinct_characters = String.length(string)\n    for character\
    \ in string.chars()\n        count_distinct_characters = count_distinct_characters\
    \ - String.length(String.lower(character))\n        count_distinct_characters\
    \ = count_distinct_characters - String.length(String.upper(character))\n    return\
    \ count_distinct_characters\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n\
    def count_distinct_characters(string::String)::Int64\n    count_distinct_characters\
    \ = String.length(string)\n    for character in string.chars()\n        count_distinct_characters\
    \ = count_distinct_characters - String.length(String.lower(character))\n     \
    \   count_distinct_characters = count_distinct_characters - String.length(String.upper(character))\n\
    \    return count_distinct_characters\n</code>\n<|/ a tags=string,haskell |>\n\
    <| c |>\nWhile this code may answer the question, providing additional context\
    \ regarding why and/or how this code answers the question improves its long-term\
    \ value.\n<|/ c |>\n<| a tags=string,haskell |>\n<code>\nimport Data.List", " \
    \   if string == \"\"\n        0\n    else\n        count_distinct_characters(string[1:end-1])\
    \ + count_distinct_characters(string[end])\n    end\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a string and returns the number of characters\
    \ in that string that are not in the alphabet (including spaces). For example,\
    \ given the string \"Jerry\" the function should return 3.", "    \n    count\
    \ = 0\n    for c in string:\n        if c.isUpper():\n            count += 1\n\
    \        elif c.isLower():\n            count += 1\n        elif c.isDigit():\n\
    \            count += 1\n        elif c.isSpace():\n            count += 1\n \
    \   return count\n</code>\n<|/ a tags=string,haskell |>\n<| c |>\nThis doesn't\
    \ count spaces as distinct characters. `count_distinct_characters(\"  \")` returns\
    \ `1` instead of `2`.\n<|/ c |>\n<| c |>\nI fixed the bug, thanks for pointing\
    \ it out. Now it returns `2` instead of `1`.\n<|/ c |>\n<| a dscore=2 |>\n<code>\n\
    import Data.List", "    count_distinct_characters(string, 0)\nend\n</cell>\n<code\
    \ language=julia-1.5>\ncount_distinct_characters('xyzXYZ')\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a string and returns the number of distinct\
    \ characters in that string in alphabetical order.", "    if string == \"\"\n\
    \        0\n    else\n        count_distinct_characters(string[1:end-1]) + count_distinct_characters(string[end])\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>", "    count_distinct_characters\
    \ = \"\"\n    for character in string\n        count_distinct_characters = count_distinct_characters\
    \ + character\n    end\n    return count_distinct_characters.length\nend\n</cell>\n\
    <code language=julia-1.5>\ncount_distinct_characters(\"Jerry\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_distinct_characters(\"xyzXYZ\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the number of times\
    \ each character appears in the string.", "    count_distinct_characters = \n\
    \        count_distinct_characters(string.chars)\nend", "    \n    count_distinct_characters\
    \ = \n        string.map(x => x.toLowerCase |> String.length |> Int64).distinct\n\
    \    \nend\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(strings)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of times each character appears in the string. For example, given\
    \ \"abcde\", it should return [('a', 1), ('b', 1), ('c', 1), ('d', 1), ('e', 2)]",
  "    \n    count = 0\n    \n    for char in string:\n        if char.isUpper():\n\
    \            count += 1\n        elif char.isLower():\n            count += 1\n\
    \        elif char.isDigit():\n            count += 1\n        elif char.isSpace():\n\
    \            count += 1\n        elif char.isAlpha():\n            count += 1\n\
    \        elif char.isAlphaNumeric():\n            count += 1\n        elif char.isPunct():\n\
    \            count += 1\n        elif char.isSymbol():\n            count += 1\n\
    \        elif char.isSeparator():\n            count += 1\n        elif char.isPunctuation():\n\
    \            count += 1\n        elif char.isWhitespace():\n            count\
    \ += 1\n        elif char.isControl():\n            count += 1\n        elif char.isNewline():\n\
    \            count += 1\n        elif char.isUnicode():\n            count +=\
    \ 1\n        elif char.isASCII():\n            count += 1\n        elif char.isControlCharacter():\n\
    \            count += 1\n        elif char.isPrintable():\n            count +=\
    \ 1\n        elif char.isLineTerminator():\n            count += 1\n        elif\
    \ char.isUnicodeControlCharacter():\n            count += 1\n        elif char.isUnicodeControlCharacter():\n\
    \            count += 1\n        elif char.isUnicodeControlCharacter():\n    \
    \        count += 1\n        elif char.isUnicodeControlCharacter():\n        \
    \    count += 1\n        elif char.isUnicodeControlCharacter():\n            count\
    \ += 1\n        elif char.isUnicodeControlCharacter():\n            count += 1\n\
    \        elif char.isUnicodeControlCharacter():\n            count += 1\n    \
    \    elif char.isUnicodeControlCharacter():\n            count += 1\n        elif\
    \ char.isUnicodeControlCharacter():\n            count += 1\n        elif char.isUnicodeControlCharacter():\n\
    \            count += 1\n        elif char.isUnicodeControlCharacter():\n    \
    \        count += 1\n        elif char.isUnicodeControlCharacter():\n        \
    \    count += 1\n        elif char.isUnicodeControlCharacter():\n            count\
    \ += 1\n        elif char.isUnicodeControlCharacter():\n            count += 1\n\
    \        elif char.isUnicodeControlCharacter():\n            count += 1\n    \
    \    elif char.isUnicodeControlCharacter():\n            count += 1\n        elif\
    \ char.isUnicodeControlCharacter():\n            count += 1\n        elif char.isUnicodeControlCharacter():\n\
    \            count += 1\n        elif char.isUnicodeControlCharacter():\n    \
    \        count += 1\n        elif char.isUnicodeControlCharacter():\n        \
    \    count += 1\n        elif char.isUnicodeControlCharacter():\n            count\
    \ += 1\n        elif char.isUnicodeControlCharacter():\n            count += 1\n\
    \        elif char.isUnicodeControlCharacter():\n            count += 1\n    \
    \    elif char.isUnicodeControlCharacter():\n            count += 1\n        elif\
    \ char.isUnicodeControlCharacter():\n            count += 1\n        elif char.isUnicodeControlCharacter():\n\
    \            count += 1\n        elif char.isUnicodeControlCharacter():\n    \
    \        count += 1\n        elif char.isUnicodeControlCharacter():\n        \
    \    count += 1\n        elif char.isUnicodeControlCharacter():\n            count\
    \ += 1\n        elif char.isUnicodeControlCharacter():\n            count += 1\n\
    \        elif ", "    count_distinct_characters(string, 0)\nend\n</cell>\n<code\
    \ language=julia-1.1>\ncount_distinct_characters('xyzXYZ')\n</cell>\n<code language=julia-1.1>\n\
    count_distinct_characters('Jerry')\n</cell>\n<text>\nExercise\nWrite a function\
    \ that counts the number of distinct characters in a string ignoring case.", " \
    \   count_distinct_characters(string, 0)\nend", "    \n    count_distinct_characters\
    \ = string.len()\n    for character in string.chars()\n        count_distinct_characters\
    \ = count_distinct_characters - 1\n    end\n    return count_distinct_characters\n\
    end", "    count_distinct_characters(string, 0)\nend", "    count_distinct_characters(string,\
    \ 0)\nend", "    \n    count_distinct_characters = string.count{|x| x != ' '}\n\
    \    \n    return count_distinct_characters\nend\n</cell>\n<code language=julia-1.5>\n\
    count_distinct_characters('xyzXYZ')\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters('Jerry')\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of times each character appears in the string.", "    count_distinct_characters(string,\
    \ 0)\nend\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"hello\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"hello\", 0)\n\
    </cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"hello\", 1)\n\
    </cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"hello\", 2)\n\
    </cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"hello\", 3)\n\
    </cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"hello\", 4)\n\
    </cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"hello\", 5)\n\
    </cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"hello\", 6)\n\
    </cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"hello\", 7)\n\
    </cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"hello\", 8)\n\
    </cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"hello\", 9)\n\
    </cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"hello\", 10)\n\
    </cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"hello\", 11)\n\
    </cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"hello\", 12)\n\
    </cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"hello\", 13)\n\
    </cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"hello\", 14)\n\
    </cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"hello\", 15)\n\
    </cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"hello\", 16)\n\
    </cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"hello\", 17)\n\
    </cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"hello\", 18)\n\
    </cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"hello\", 19)\n\
    </cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"hello\", 20)\n\
    </cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"hello\", 21)\n\
    </cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"hello\", 22)\n\
    </cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"hello\", 23)\n\
    </cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"hello\", 24)\n\
    </cell>\n<code language=julia-", "    count_distinct_characters(string, 0)\nend",
  "    \n    count_distinct_characters = \n        foldl(\n            fun(acc, x)\
    \ -> acc + count_distinct_characters_helper(x),\n            0,\n            string\n\
    \        )\nend\n</cell>\n<code language=julia-1.3>\ncount_distinct_characters('xyzXYZ')\n\
    </cell>\n<code language=julia-1.3>\ncount_distinct_characters('Jerry')\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a string and returns the number\
    \ of distinct characters in that string that appear in alphabetical order (ignoring\
    \ case).", "    count_distinct_characters_helper(string,0,0)\nend", "    count_distinct_characters_helper(string,0,0)\n\
    end", "    \n    count_distinct_characters = \n        string.filter(!is_space).filter(!is_punctuation).filter(!is_digit).length\n\
    \    \n    return count_distinct_characters\n</code>\n<|/ a dscore=1 |>\n<| a\
    \ tags=string,haskell |>\n<code>\nimport Data.Char\nimport Data.List", "    count_distinct_characters_helper(string,0,0)\n\
    end", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    count\
    \ = 0\n    for c in string:\n        if c.isUpper():\n            count += 1\n\
    \        elif c.isLower():\n            count += 1\n        else:\n          \
    \  count += 1\n    return count\n</cell>\n<text>\nExercise 4\nWrite a function\
    \ that takes a string and returns the number of distinct characters in that string.",
  "    count_distinct_characters = \n        count_distinct_characters(string.chars)\n\
    \    return count_distinct_characters\nend\n</cell>\n<code language=julia-1.5>",
  "    count_distinct_characters(string, 0)\nend", "    count_distinct_characters(string,\
    \ 0)\nend", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    count_distinct_characters(string,\
    \ 0)\nend", "    if string == \"\"\n        0\n    else\n        count_distinct_characters(string[1:end-1])\
    \ + count_distinct_characters(string[end])\n    end\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a string and returns the number of characters\
    \ in the string that are not in the alphabet (case insensitive).", "    count_distinct_characters(string,\
    \ 0)\nend", "    count_distinct_characters(string, 0)\nend\n</cell>\n<code language=julia-1.5>\n\
    count_distinct_characters(\"\")\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"\
    abc\")\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"abC\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"abC\")\n</cell>\n\
    <code language=julia-1.5>\ncount_distinct_characters(\"abC\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_distinct_characters(\"abC\")\n</cell>\n<code language=julia-1.5>\n\
    count_distinct_characters(\"abC\")\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"\
    abC\")\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"abC\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"abC\")\n</cell>\n\
    <code language=julia-1.5>\ncount_distinct_characters(\"abC\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_distinct_characters(\"abC\")\n</cell>\n<code language=julia-1.5>\n\
    count_distinct_characters(\"abC\")\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"\
    abC\")\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"abC\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"abC\")\n</cell>\n\
    <code language=julia-1.5>\ncount_distinct_characters(\"abC\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_distinct_characters(\"abC\")\n</cell>\n<code language=julia-1.5>\n\
    count_distinct_characters(\"abC\")\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"\
    abC\")\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"abC\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"abC\")\n</cell>\n\
    <code language=julia-1.5>\ncount_distinct_characters(\"abC\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_distinct_characters(\"abC\")\n</cell>\n<code language=julia-1.5>\n\
    count_distinct_characters(\"abC\")\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"\
    abC\")\n</cell>\n<code language=julia-1.5>\n", "    count_distinct_characters(string,\
    \ 0)\nend", "    count_distinct_characters = \"\"\n    for character in string\n\
    \        count_distinct_characters = count_distinct_characters + character\n \
    \   end\n    return count_distinct_characters\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a string and returns the number of times the\
    \ string \"Jerry\" appears in the string. \n    >>> count_times_string(\"Jerry\"\
    )\n    1\n    >>> count_times_string(\"JerryJerry\")\n    2\n    >>> count_times_string(\"\
    JerryJerryJerry\")\n    3\n    \"\"\"", "    \n    count = 0\n    for c in string:\n\
    \        if c.isUpper():\n            count += 1\n        elif c.isLower():\n\
    \            count += 1\n        elif c.isDigit():\n            count += 1\n \
    \       elif c.isSpace():\n            count += 1\n    return count\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=string,haskell,count |>\n<code>\nimport Data.List",
  "    \n    count = 0\n    for c in string:\n        if c.isUpper():\n          \
    \  count += 1\n        elif c.isLower():\n            count += 1\n        elif\
    \ c.isDigit():\n            count += 1\n        elif c.isSpace():\n          \
    \  count += 1\n    return count\n</code>\n<|/ a |>\n<| c |>\nThis does not answer\
    \ the question. He asked for distinct characters, not distinct letters.\n<|/ c\
    \ |>\n<| c |>\nI believe he wants to count distinct characters, regardless of\
    \ case. He also wants to count spaces as distinct characters. He also wants to\
    \ count digits and punctuation as distinct characters. He also wants to count\
    \ the length of the string as distinct characters. He also wants to count the\
    \ length of the string as distinct characters. He also wants to count the length\
    \ of the string as distinct characters. He also wants to count the length of the\
    \ string as distinct characters. He also wants to count the length of the string\
    \ as distinct characters. He also wants to count the length of the string as distinct\
    \ characters. He also wants to count the length of the string as distinct characters.\
    \ He also wants to count the length of the string as distinct characters. He also\
    \ wants to count the length of the string as distinct characters. He also wants\
    \ to count the length of the string as distinct characters. He also wants to count\
    \ the length of the string as distinct characters. He also wants to count the\
    \ length of the string as distinct characters. He also wants to count the length\
    \ of the string as distinct characters. He also wants to count the length of the\
    \ string as distinct characters. He also wants to count the length of the string\
    \ as distinct characters. He also wants to count the length of the string as distinct\
    \ characters. He also wants to count the length of the string as distinct characters.\
    \ He also wants to count the length of the string as distinct characters. He also\
    \ wants to count the length of the string as distinct characters. He also wants\
    \ to count the length of the string as distinct characters. He also wants to count\
    \ the length of the string as distinct characters. He also wants to count the\
    \ length of the string as distinct characters. He also wants to count the length\
    \ of the string as distinct characters. He also wants to count the length of the\
    \ string as distinct characters. He also wants to count the length of the string\
    \ as distinct characters. He also wants to count the length of the string as distinct\
    \ characters. He also wants to count the length of the string as distinct characters.\
    \ He also wants to count the length of the string as distinct characters. He also\
    \ wants to count the length of the string as distinct characters. He also wants\
    \ to count the length of the string ", "    count_distinct_characters(string,\
    \ 0)\nend\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters('xyzXYZ')\n\
    </cell>\n<code language=julia-1.5>\ncount_distinct_characters('Jerry')\n</cell>\n\
    <text>\nExercise 2\nWrite a function that counts the number of times a character\
    \ appears in a string. For example, count_characters('xyzXYZ') should return 3.",
  "    count_distinct_characters(string, 0)\nend\n</cell>\n<code language=julia-1.5>\n\
    count_distinct_characters('xyzXYZ')\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters('Jerry')\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the number of distinct\
    \ characters in a string that start with a given character. For example, if the\
    \ given character is 'z', then 'z' has 2 distinct characters, 'Z' has 1, and 'ZY'\
    \ has 3.", "    count_distinct_characters = HashSet()\n    for character in string:\n\
    \        if character in count_distinct_characters:\n            count_distinct_characters.remove(character)\n\
    \        else:\n            count_distinct_characters.add(character)\n    return\
    \ count_distinct_characters.length\n</code>\n<|/ a tags=string,haskell |>\n<|\
    \ c |>\n`count_distinct_characters = foldl (\\_ x -> x + (x `elem` [False, True]))\
    \ 0` would be a more efficient solution.\n<|/ c |>\n<| c |>\nI didn't know about\
    \ `foldl`, thanks for teaching me something new!\n<|/ c |>\n<| a tags=string,haskell\
    \ |>\n<code>\nimport Data.List", "    count_distinct_characters(string, 0)\nend",
  "    \n    \"\"\"\n    Count the number of distinct characters in a string\n   \
    \ \n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"", "    \n    count_distinct_characters = String.length(string)\n\
    \    \n    for character in string\n        count_distinct_characters = count_distinct_characters\
    \ - String.length(String.lower(character))\n        count_distinct_characters\
    \ = count_distinct_characters - String.length(String.upper(character))\n     \
    \   count_distinct_characters = count_distinct_characters - String.length(character)\n\
    \    end\n    \n    return count_distinct_characters\nend\n</cell>\n<code language=julia-1.5>\n\
    count_distinct_characters('xyzXYZ')\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters('Jerry')\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of characters in that string that occur more than once.", "    count_distinct_characters\
    \ = string.len()\n    for character in string.chars()\n        count_distinct_characters\
    \ = count_distinct_characters - 1\n    return count_distinct_characters\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\ndef count_distinct_characters(string::String)::Int64\
    \ \n    count_distinct_characters = string.len()\n    for character in string.chars()\n\
    \        count_distinct_characters = count_distinct_characters - 1\n    return\
    \ count_distinct_characters\n</code>\n<|/ a tags=haskell |>\n<| a dscore=1 |>\n\
    <code>\nimport Data.List\nimport Data.Maybe", "    \n    count_distinct_characters\
    \ = String.length(string)\n    \n    return count_distinct_characters\nend", " \
    \   \n    count = 0\n    for character in string\n        count += 1\n    end\n\
    \    return count\nend", "    count_distinct_characters(string, 0)\nend", "  \
    \  count_distinct_characters(string, 0)\nend", "    count_distinct_characters(string,\
    \ 0)\nend", "    count_distinct_characters(string, 0)\nend", "    count_distinct_characters\
    \ = \n        string.map(x => x.toLowerCase |> String.length |> Int64).distinct\n\
    \    count_distinct_characters\nend\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters('xyzXYZ')\n\
    </cell>\n<code language=julia-1.5>\ncount_distinct_characters('Jerry')\n</cell>\n\
    <text>\nExercise 2\nWrite a function that counts the number of times a substring\
    \ appears in a string. For example, count_substring('abc', 'bc') should return\
    \ 1. count_substring('abc', 'a') should return 2. count_substring('abc', 'z')\
    \ should return 3.", "    count_distinct_characters = Set.new()\n    for character\
    \ in string:\n        count_distinct_characters.add(character)\n    return count_distinct_characters.length\n\
    </code>\n<|/ a tags=string,haskell,algorithm |>\n<| c |>\n`count_distinct_characters\
    \ = foldl (\\acc x -> acc + (if x == ' ' then 1 else 0)) 0` would do the same\
    \ thing more efficiently.\n<|/ c |>\n<| c |>\n`foldl` would also work here, but\
    \ `foldl` has the advantage of being tail-recursive, so it can avoid the extra\
    \ allocations caused by `if`.\n<|/ c |>\n<| c |>\nI agree, `foldl` is definitely\
    \ the way to go. `foldl` also has the advantage of being lazy, so you don't have\
    \ to worry about `if` being evaluated or not.\n<|/ c |>\n<| c |>\n`foldl` also\
    \ has the advantage of being tail-recursive, so it can avoid the extra allocations\
    \ caused by `if`.\n<|/ c |>\n<| c |>\n`foldl` also has the advantage of being\
    \ lazy, so you don't have to worry about `if` being evaluated or not.\n<|/ c |>\n\
    <| a tags=string,haskell,algorithm |>\n<code>\nimport Data.List", "    count_distinct_characters(string,\
    \ 0)\nend\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters('xyzXYZ')\n\
    </cell>\n<code language=julia-1.5>\ncount_distinct_characters('Jerry')\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of distinct characters in it.", "    if string == \"\"\n        return 0 \n\
    \    \n    chars = string.chars()\n    chars = chars.filter(!is_space)\n    chars\
    \ = chars.filter(!is_punctuation)\n    chars = chars.filter(!is_digit)\n    chars\
    \ = chars.filter(!is_alpha)\n    chars = chars.filter(!is_symbol)\n    \n    chars\
    \ = chars.distinct()\n    \n    return chars.count() \nend\n</cell>\n<code language=julia-1.5>",
  "    \n    count_distinct_characters = string.len()\n    \n    for char in string:\n\
    \        if string.count(char) > count_distinct_characters:\n            count_distinct_characters\
    \ = string.count(char)\n    \n    return count_distinct_characters\n</cell>\n\
    <cell>\ncount_distinct_characters('xyzXYZ')\n</cell>\n<cell>\ncount_distinct_characters('Jerry')\n\
    </cell>\n<text>\nQuestion 3\nWrite a function that takes a string and returns\
    \ the number of times the string \"Jerry\" occurs in the string.", "    if string\
    \ == \"\"\n        0\n    else\n        count_distinct_characters(string[1:end-1])\
    \ + count_distinct_characters(string[end])\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a string and returns the number of distinct characters\
    \ in it.", "    if string == \"\"\n        0\n    else\n        count_distinct_characters(string[1:end-1])\
    \ + count_distinct_characters(string[end])\nend\n</cell>\n<code language=julia-1.4>\n\
    count_distinct_characters('xyzXYZ')\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a string as input and returns the number of characters in the string\
    \ that are not in the alphabet (case-insensitive).", "    count_distinct_characters\
    \ = \n        string.foldl(\n            0,\n            |acc, c| acc + (if c.isUppercase()\
    \ then 1 else 0)\n        )\nend\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters('xyzXYZ')\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a string and returns\
    \ the number of distinct characters in that string that appear in alphabetical\
    \ order.", "    count_distinct_characters = \n        foldl(\n            foldl(\n\
    \                foldl(\n                    foldl(\n                        foldl(\n\
    \                            foldl(\n                                foldl(\n\
    \                                    foldl(\n                                \
    \        foldl(\n                                            foldl(\n        \
    \                                        foldl(\n                            \
    \                        foldl(\n                                            \
    \            foldl(\n                                                        \
    \    foldl(\n                                                                foldl(\n\
    \                                                                    foldl(\n\
    \                                                                        foldl(\n\
    \                                                                            foldl(\n\
    \                                                                            \
    \    foldl(\n                                                                \
    \                    foldl(\n                                                \
    \                                        foldl(\n                            \
    \                                                                foldl(\n    \
    \                                                                            \
    \                foldl(\n                                                    \
    \                                                foldl(\n                    \
    \                                                                            \
    \        foldl(\n                                                            \
    \                                                foldl(\n                    \
    \                                                                            \
    \                foldl(\n                                                    \
    \                                                                foldl(\n    \
    \                                                                            \
    \                                        foldl(\n                            \
    \                                                                            \
    \                    foldl(\n                                                \
    \                                                                            \
    \    foldl(\n                                                                \
    \                                                                    foldl(\n\
    \                                                                            \
    \                                                            foldl(\n        \
    \                                                                            \
    \                                                        foldl(\n            \
    \                                                                            \
    \                                                        foldl(\n            \
    \                                                                            \
    \                                                            foldl(\n        \
    \                                                                            \
    \                                                                    foldl(\n\
    \                                                                            \
    \                                                                            \
    \    foldl(\n                                                                \
    \                                                                            \
    \                    foldl(\n                                                \
    \                                                                            \
    \                                        foldl(\n                            \
    \                                                                            \
    \                                                                foldl(\n    \
    \                                                                            \
    \                                                                            \
    \                foldl(\n                                                    \
    \                                                                            \
    \                                                foldl(\n                    \
    \                                                                            \
    \                                                                            \
    \        foldl(\n                                                            \
    \                                                                            \
    \                                                foldl(\n                    \
    \                                                                            \
    \                                                                            \
    \                foldl(\n                                                    \
    \                                                                            \
    \                                                                foldl(\n    \
    \                                                                            \
    \                                                                            \
    \                                        foldl(\n                            \
    \                                                                            \
    \                                                                            \
    \                    foldl(\n                                                \
    \                                                                            \
    \                                                                            \
    \    foldl(\n                                                                \
    \                                                                            \
    \                                                                    foldl(\n\
    \                                                                            \
    \                                                                            \
    \                                                            foldl(\n        \
    \                                                                            \
    \                                                                            \
    \                                                        foldl(\n            \
    \                                                                            \
    \                                                                            \
    \                                                        foldl(\n            \
    \                                                                            \
    \                                                                            \
    \                                                            foldl(\n        \
    \                                                                            \
    \                                                                            \
    \                                                                    foldl(\n\
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \    foldl(\n                                                                \
    \                                                                            \
    \                                                                            \
    \                    foldl(\n                                                \
    \                                                                            \
    \                                                                            \
    \                                        foldl(\n                            \
    \                                                                            \
    \                                                                            \
    \                                                                foldl(\n    \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                foldl(\n                                                    \
    \                                                                            \
    \                                                                            \
    \                                                foldl(\n                    \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \        foldl(\n                                                            \
    \                                                                            \
    \                                                                            \
    \                                                foldl(\n                    \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                foldl(\n                                                    \
    \                                                                            \
    \                                                                            \
    \                                                                foldl(\n    \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                        foldl(\n                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                    foldl(\n                                                \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \    foldl(\n                                                                \
    \                                                                            \
    \                                                                            \
    \                                                                    foldl(\n\
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                            foldl(\n        \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                        foldl(\n            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                        foldl(\n            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                            foldl(\n        \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                    foldl(\n\
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \    foldl(\n                                                                \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                    foldl(\n                                                \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                        foldl(\n                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                foldl(\n    \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                foldl(\n                                                    \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                foldl(\n                    \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \        foldl(\n                                                            \
    \                                                                    ", "    count_distinct_characters(string,\
    \ 0)\nend\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters('xyzXYZ')\n\
    </cell>\n<code language=julia-1.5>\ncount_distinct_characters('Jerry')\n</cell>\n\
    <text>\nExercise 3\nWrite a function that counts the number of times a character\
    \ appears in a given string.", "    count_distinct_characters_helper(string,0)\n\
    end", "    count_distinct_characters = \n        count_distinct_characters(string::String)::Int64\n\
    \    \n    if string == \"\"\n        0\n    else\n        count_distinct_characters(string[1:])::Int64\
    \ + count_distinct_characters(string[1:])::Int64\nend\n</cell>\n<text>\nExercise:\
    \ Write a function that takes a string and returns the number of distinct characters\
    \ in that string. For example, count_distinct_characters('xyzXYZ') should return\
    \ 3.", "    if string == \"\"\n        0\n    else\n        count_distinct_characters(string[1:end-1])\
    \ + count_distinct_characters(string[end])\nend\n</cell>\n<code language=julia-1.3>\n\
    count_distinct_characters(\"Jerry\")\n</cell>\n<text>\nExercise\nWrite a function\
    \ that takes a string and returns the number of distinct characters (regardless\
    \ of case) in the string. For example, given \"Jerry\" it should return 4.", " \
    \   if string == \"\" then return 0\n    else if string[0] == string[1] then return\
    \ 1\n    else if string[0] == string[2] then return 2\n    else if string[0] ==\
    \ string[3] then return 3\n    else if string[0] == string[4] then return 4\n\
    \    else if string[0] == string[5] then return 5\n    else if string[0] == string[6]\
    \ then return 6\n    else if string[0] == string[7] then return 7\n    else if\
    \ string[0] == string[8] then return 8\n    else if string[0] == string[9] then\
    \ return 9\n    else if string[0] == string[10] then return 10\n    else if string[0]\
    \ == string[11] then return 11\n    else if string[0] == string[12] then return\
    \ 12\n    else if string[0] == string[13] then return 13\n    else if string[0]\
    \ == string[14] then return 14\n    else if string[0] == string[15] then return\
    \ 15\n    else if string[0] == string[16] then return 16\n    else if string[0]\
    \ == string[17] then return 17\n    else if string[0] == string[18] then return\
    \ 18\n    else if string[0] == string[19] then return 19\n    else if string[0]\
    \ == string[20] then return 20\n    else if string[0] == string[21] then return\
    \ 21\n    else if string[0] == string[22] then return 22\n    else if string[0]\
    \ == string[23] then return 23\n    else if string[0] == string[24] then return\
    \ 24\n    else if string[0] == string[25] then return 25\n    else if string[0]\
    \ == string[26] then return 26\n    else if string[0] == string[27] then return\
    \ 27\n    else if string[0] == string[28] then return 28\n    else if string[0]\
    \ == string[29] then return 29\n    else if string[0] == string[30] then return\
    \ 30\n    else if string[0] == string[31] then return 31\n    else if string[0]\
    \ == string[32] then return 32\n    else if string[0] == string[33] then return\
    \ 33\n    else if string[0] == string[34] then return 34\n    else if string[0]\
    \ == string[35] then return 35\n    else if string[0] == string[36] then return\
    \ 36\n    else if string[0] == string[37] then return 37\n    else if string[0]\
    \ == string[38] then return 38\n    else if string[0] == string[39] then return\
    \ 39\n    else if string[0] == string[40] then return 40\n", "    \n    \"\"\"\
    \n    Count the number of distinct characters in a given string\n    \n    >>>\
    \ count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"", "    \n    count = 0\n    for c in string:\n        if c.isUpper():\n\
    \            count += 1\n        elif c.isLower():\n            count += 1\n \
    \       elif c.isAlpha():\n            count += 1\n        elif c.isDigit():\n\
    \            count += 1\n    return count\n</code>\n<|/ a tags=string,haskell,count,distinct\
    \ |>\n<| c |>\n`isUpper` and `isLower` are not in `Data.Char`\n<|/ c |>\n<| c\
    \ |>\n`isUpper` and `isLower` are in `Data.Char`\n<|/ c |>\n<| c |>\n`isUpper`\
    \ and `isLower` are in `Data.Char`\n<|/ c |>\n<| c |>\n`isUpper` and `isLower`\
    \ are in `Data.Char`\n<|/ c |>\n<| c |>\n`isUpper` and `isLower` are in `Data.Char`\n\
    <|/ c |>\n<| a dscore=4 |>\n<code>\nimport Data.List", "    count_distinct_characters(string,\
    \ 0)\nend", "    \n    count = 0\n    for c in string:\n        if c.isUpper():\n\
    \            count += 1\n        elif c.isLower():\n            count += 1\n \
    \       elif c.isUpper():\n            count += 1\n        elif c.isLower():\n\
    \            count += 1\n    return count\n</code>\n<|/ a tags=haskell,functional-programming\
    \ |>\n<| c |>\nI like this solution, but I believe it can be simplified even further\
    \ by just using `foldl` instead of `foldl1'`.\n<|/ c |>\n<| c |>\nI agree with\
    \ you, `foldl` is more elegant and more efficient.\n<|/ c |>\n<| a tags=haskell,functional-programming\
    \ |>\n<code>\nimport Data.List", "    \n    \"\"\"\n    Count the number of distinct\
    \ characters in a string\n    \n    Arguments:\n    string -- a string\n    \n\
    \    Returns:\n    Int -- number of distinct characters\n    \"\"\"\n    \n  \
    \  count = 0\n    for c in string:\n        if c.isUpper():\n            count\
    \ += 1\n        elif c.isLower():\n            count += 1\n        elif c.isUpper():\n\
    \            count += 1\n        elif c.isLower():\n            count += 1\n \
    \   return count\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns the number of times each character appears in the string. Case is\
    \ ignored.", "    \n    count_distinct_characters_helper(string, 0, \"\")\nend",
  "    count_distinct_characters(string, 0)\nend", "    \n    count = 0\n    for c\
    \ in string:\n        if c.isUpper():\n            count += 1\n        elif c.isLower():\n\
    \            count += 1\n        else:\n            count += 1\n    return count\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a string and returns\
    \ the number of times the string \"a\" appears in the string. \n    >>> count_a('abracadabra')\n\
    \    2\n    >>> count_a('abracadabra')\n    2\n    >>> count_a('abracadabra')\n\
    \    2\n    >>> count_a('abracadabra')\n    2\n    >>> count_a('abracadabra')\n\
    \    2\n    >>> count_a('abracadabra')\n    2\n    >>> count_a('abracadabra')\n\
    \    2\n    >>> count_a('abracadabra')\n    2\n    >>> count_a('abracadabra')\n\
    \    2\n    >>> count_a('abracadabra')\n    2\n    >>> count_a('abracadabra')\n\
    \    2\n    >>> count_a('abracadabra')\n    2\n    >>> count_a('abracadabra')\n\
    \    2\n    >>> count_a('abracadabra')\n    2\n    >>> count_a('abracadabra')\n\
    \    2\n    >>> count_a('abracadabra')\n    2\n    >>> count_a('abracadabra')\n\
    \    2\n    >>> count_a('abracadabra')\n    2\n    >>> count_a('abracadabra')\n\
    \    2\n    >>> count_a('abracadabra')\n    2\n    >>> count_a('abracadabra')\n\
    \    2\n    >>> count_a('abracadabra')\n    2\n    >>> count_a('abracadabra')\n\
    \    2\n    >>> count_a('abracadabra')\n    2\n    >>> count_a('abracadabra')\n\
    \    2\n    >>> count_a('abracadabra')\n    2\n    >>> count_a('abracadabra')\n\
    \    2\n    >>> count_a('abracadabra')\n    2\n    >>> count_a('abracadabra')\n\
    \    2\n    >>> count_a('abracadabra')\n    2\n    >>> count_a('abracadabra')\n\
    \    2\n    >>> count_a('abracadabra')\n    2\n    >>> count_a('abracadabra')\n\
    \    2\n    >>> count_a('abracadabra')\n    2\n    >>> count_a('abrac", "    count_distinct_characters(string,\
    \ 0)\nend\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters('xyzXYZ')\n\
    </cell>\n<code language=julia-1.5>\ncount_distinct_characters('Jerry')\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of characters in the string that are not in the alphabet (case insensitive).\
    \ For example, the string \"Jerry\" has 3 characters that are not in the alphabet,\
    \ namely \"J\", \"e\" and \"r\".", "    \n    \"\"\"\n    Count the distinct characters\
    \ in a string\n    \"\"\"\n    \n    count = 0\n    for c in string:\n       \
    \ if c.isUpper():\n            count += 1\n        elif c.isLower():\n       \
    \     count += 1\n        elif c.isDigit():\n            count += 1\n        elif\
    \ c.isSpace():\n            count += 1\n    return count\n</cell>\n<code language=julia-1.4>\n\
    count_distinct_characters(\"Jerry\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and returns the number of uppercase letters, lowercase letters,\
    \ digits, and spaces.", "    count_distinct_characters_helper(string,0,0)\nend",
  "    count_distinct_characters_helper(string,0,0)\nend", "    count_distinct_characters\
    \ = HashSet()\n    for character in string:\n        if character in count_distinct_characters:\n\
    \            count_distinct_characters.remove(character)\n        else:\n    \
    \        count_distinct_characters.add(character)\n    return count_distinct_characters.length\n\
    </code>\n<|/ a dscore=0 |>\n<| a tags=haskell,string |>\n<code>\nimport Data.List",
  "    count_distinct_characters = \n        foldl(\n            +,\n            map(\n\
    \                count_distinct_character,\n                string.chars\n   \
    \         )\n        )\n    return count_distinct_characters\nend\n</cell>\n<code\
    \ language=julia-1.0>\ncount_distinct_characters('xyzXYZ')\n</cell>\n<code language=julia-1.0>\n\
    count_distinct_characters('Jerry')\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a string and returns the number of distinct characters in that string\
    \ in alphabetical order.", "    \n    count = 0\n    for c in string:\n      \
    \  if c.isUpper():\n            count += 1\n        elif c.isLower():\n      \
    \      count += 1\n        else:\n            count += 1\n    return count\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nThank you for your answer. Can you please explain\
    \ why you used `if c.isUpper():` instead of `if c.isupper():`?\n<|/ c |>\n<| c\
    \ |>\n`isUpper` checks if the character is upper case and `islower` checks if\
    \ the character is lower case. `isupper` checks if the character is upper case\
    \ and `islower` checks if the character is lower case. `isupper` checks if the\
    \ character is upper case and `islower` checks if the character is lower case.\
    \ `isupper` checks if the character is upper case and `islower` checks if the\
    \ character is lower case. `isupper` checks if the character is upper case and\
    \ `islower` checks if the character is lower case. `isupper` checks if the character\
    \ is upper case and `islower` checks if the character is lower case. `isupper`\
    \ checks if the character is upper case and `islower` checks if the character\
    \ is lower case. `isupper` checks if the character is upper case and `islower`\
    \ checks if the character is lower case. `isupper` checks if the character is\
    \ upper case and `islower` checks if the character is lower case. `isupper` checks\
    \ if the character is upper case and `islower` checks if the character is lower\
    \ case. `isupper` checks if the character is upper case and `islower` checks if\
    \ the character is lower case. `isupper` checks if the character is upper case\
    \ and `islower` checks if the character is lower case. `isupper` checks if the\
    \ character is upper case and `islower` checks if the character is lower case.\
    \ `isupper` checks if the character is upper case and `islower` checks if the\
    \ character is lower case. `isupper` checks if the character is upper case and\
    \ `islower` checks if the character is lower case. `isupper` checks if the character\
    \ is upper case and `islower` checks if the character is lower case. `isupper`\
    \ checks if the character is upper case and `islower` checks if the character\
    \ is lower case. `isupper` checks if the character is upper case and `islower`\
    \ checks if the character is lower case. `isupper` checks if the character is\
    \ upper case and `islower` checks if the character is lower case. `isupper` ",
  "    count_distinct_characters = \n        count_distinct_characters(string.chars)\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string and returns\
    \ the number of characters in the string that are not in the alphabet (case insensitive).",
  "    count_distinct_characters = \n        foldl(\n            foldl(\n        \
    \        foldl(\n                    foldl(\n                        foldl(\n\
    \                            foldl(\n                                foldl(\n\
    \                                    foldl(\n                                \
    \        foldl(\n                                            foldl(\n        \
    \                                        foldl(\n                            \
    \                        foldl(\n                                            \
    \            foldl(\n                                                        \
    \    foldl(\n                                                                foldl(\n\
    \                                                                    foldl(\n\
    \                                                                        foldl(\n\
    \                                                                            foldl(\n\
    \                                                                            \
    \    foldl(\n                                                                \
    \                    foldl(\n                                                \
    \                                        foldl(\n                            \
    \                                                                foldl(\n    \
    \                                                                            \
    \                foldl(\n                                                    \
    \                                                foldl(\n                    \
    \                                                                            \
    \        foldl(\n                                                            \
    \                                                foldl(\n                    \
    \                                                                            \
    \                foldl(\n                                                    \
    \                                                                foldl(\n    \
    \                                                                            \
    \                                        foldl(\n                            \
    \                                                                            \
    \                    foldl(\n                                                \
    \                                                                            \
    \    foldl(\n                                                                \
    \                                                                    foldl(\n\
    \                                                                            \
    \                                                            foldl(\n        \
    \                                                                            \
    \                                                        foldl(\n            \
    \                                                                            \
    \                                                        foldl(\n            \
    \                                                                            \
    \                                                            foldl(\n        \
    \                                                                            \
    \                                                                    foldl(\n\
    \                                                                            \
    \                                                                            \
    \    foldl(\n                                                                \
    \                                                                            \
    \                    foldl(\n                                                \
    \                                                                            \
    \                                        foldl(\n                            \
    \                                                                            \
    \                                                                foldl(\n    \
    \                                                                            \
    \                                                                            \
    \                foldl(\n                                                    \
    \                                                                            \
    \                                                foldl(\n                    \
    \                                                                            \
    \                                                                            \
    \        foldl(\n                                                            \
    \                                                                            \
    \                                                foldl(\n                    \
    \                                                                            \
    \                                                                            \
    \                foldl(\n                                                    \
    \                                                                            \
    \                                                                foldl(\n    \
    \                                                                            \
    \                                                                            \
    \                                        foldl(\n                            \
    \                                                                            \
    \                                                                            \
    \                    foldl(\n                                                \
    \                                                                            \
    \                                                                            \
    \    foldl(\n                                                                \
    \                                                                            \
    \                                                                    foldl(\n\
    \                                                                            \
    \                                                                            \
    \                                                            foldl(\n        \
    \                                                                            \
    \                                                                            \
    \                                                        foldl(\n            \
    \                                                                            \
    \                                                                            \
    \                                                        foldl(\n            \
    \                                                                            \
    \                                                                            \
    \                                                            foldl(\n        \
    \                                                                            \
    \                                                                            \
    \                                                                    foldl(\n\
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \    foldl(\n                                                                \
    \                                                                            \
    \                                                                            \
    \                    foldl(\n                                                \
    \                                                                            \
    \                                                                            \
    \                                        foldl(\n                            \
    \                                                                            \
    \                                                                            \
    \                                                                foldl(\n    \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                foldl(\n                                                    \
    \                                                                            \
    \                                                                            \
    \                                                foldl(\n                    \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \        foldl(\n                                                            \
    \                                                                            \
    \                                                                            \
    \                                                foldl(\n                    \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                foldl(\n                                                    \
    \                                                                            \
    \                                                                            \
    \                                                                foldl(\n    \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                        foldl(\n                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                    foldl(\n                                                \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \    foldl(\n                                                                \
    \                                                                            \
    \                                                                            \
    \                                                                    foldl(\n\
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                            foldl(\n        \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                        foldl(\n            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                        foldl(\n            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                            foldl(\n        \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                    foldl(\n\
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \    foldl(\n                                                                \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                    foldl(\n                                                \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                        foldl(\n                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                foldl(\n    \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                foldl(\n                                                    \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                foldl(\n                    \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \        foldl(\n                                                            \
    \                                                                    ", "    count_distinct_characters\
    \ = \n        foldl(\n            count_distinct_characters_helper,\n        \
    \    0,\n            string.chars\n        )\n    return count_distinct_characters\n\
    end\n</cell>\n<code language=julia-1.4>\ncount_distinct_characters('xyzXYZ')\n\
    </cell>\n<code language=julia-1.4>\ncount_distinct_characters('Jerry')\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of times each character appears in the string.", "    if string == \"\"\n  \
    \      0\n    else\n        count_distinct_characters(string[1:end-1]) + count_distinct_characters(string[end])\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string and returns\
    \ the number of times a substring appears in the string. For example, given the\
    \ string \"abracadabra\", the substring \"abr\" appears twice in the string, and\
    \ so does the substring \"cad\". The function should return the number 2. Write\
    \ a test that ensures that your function works as expected.", "    count_distinct_characters\
    \ = Set.new()\n    for c in string:\n        if c not in count_distinct_characters:\n\
    \            count_distinct_characters.add(c)\n    return count_distinct_characters.length\n\
    </code>\n<|/ a tags=haskell,string |>\n<| c |>\n`Set` has `length` function, so\
    \ you can just use `length . Set.fromList` instead of `foldl`.\n<|/ c |>\n<| c\
    \ |>\nThanks, I didn't know about `Set.fromList`\n<|/ c |>\n<| c |>\n`Set.fromList`\
    \ has O(n) complexity, while `foldl` has O(n^2) complexity. `foldl` is more efficient\
    \ than `Set.fromList`.\n<|/ c |>\n<| c |>\n`foldl` has O(n) complexity, `foldl`\
    \ is more efficient than `Set.fromList`\n<|/ c |>\n<| c |>\n`foldl` has O(n) complexity,\
    \ `foldl` is more efficient than `Set.fromList`\n<|/ c |>\n<| a tags=haskell,string\
    \ |>\n<code>\nimport Data.List\nimport Data.Char", "    count_distinct_characters(string,\
    \ 0)\nend\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"abc\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"abC\")\n</cell>\n\
    <code language=julia-1.5>\ncount_distinct_characters(\"abC\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_distinct_characters(\"abC\")\n</cell>\n<code language=julia-1.5>\n\
    count_distinct_characters(\"abC\")\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"\
    abC\")\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"abC\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"abC\")\n</cell>\n\
    <code language=julia-1.5>\ncount_distinct_characters(\"abC\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_distinct_characters(\"abC\")\n</cell>\n<code language=julia-1.5>\n\
    count_distinct_characters(\"abC\")\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"\
    abC\")\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"abC\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"abC\")\n</cell>\n\
    <code language=julia-1.5>\ncount_distinct_characters(\"abC\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_distinct_characters(\"abC\")\n</cell>\n<code language=julia-1.5>\n\
    count_distinct_characters(\"abC\")\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"\
    abC\")\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"abC\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"abC\")\n</cell>\n\
    <code language=julia-1.5>\ncount_distinct_characters(\"abC\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_distinct_characters(\"abC\")\n</cell>\n<code language=julia-1.5>\n\
    count_distinct_characters(\"abC\")\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"\
    abC\")\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"abC\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"abC\")\n</cell>\n\
    <code language=julia-1.5", "    count_distinct_characters(string, 0)\nend", " \
    \   count_distinct_characters = \"\"\n    for character in string\n        count_distinct_characters\
    \ += character\n    end\n    return count_distinct_characters.length\nend\n</cell>\n\
    <code language=julia-1.5>\ncount_distinct_characters(\"hello\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_distinct_characters(\"helloWorld\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_distinct_characters(\"helloWorld\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_distinct_characters(\"helloWorld\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_distinct_characters(\"helloWorld\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_distinct_characters(\"helloWorld\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_distinct_characters(\"helloWorld\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_distinct_characters(\"helloWorld\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_distinct_characters(\"helloWorld\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_distinct_characters(\"helloWorld\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_distinct_characters(\"helloWorld\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_distinct_characters(\"helloWorld\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_distinct_characters(\"helloWorld\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_distinct_characters(\"helloWorld\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_distinct_characters(\"helloWorld\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_distinct_characters(\"helloWorld\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_distinct_characters(\"helloWorld\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_distinct_characters(\"helloWorld\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_distinct_characters(\"helloWorld\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_distinct_characters(\"helloWorld\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_distinct_characters(\"helloWorld\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_distinct_characters(\"helloWorld\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_distinct_characters(\"helloWorld\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_distinct_characters(\"helloWorld\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_distinct_characters(\"helloWorld\")\n</cell>\n<code\
    \ language=juli", "    \n    count = 0\n    for c in string:\n        if c.isUpper():\n\
    \            count += 1\n        elif c.isLower():\n            count += 1\n \
    \       elif c.isAlpha():\n            count += 1\n    return count\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a string and returns the number\
    \ of uppercase characters, lowercase characters, and non-alphabetic characters.\
    \ For example, count_distinct_characters('xyzXYZ') should return 3.", "    count_distinct_characters_helper(string,0,0)\n\
    end", "    count_distinct_characters(string, 0)\nend\n</cell>\n<code language=julia-1.3>\n\
    count_distinct_characters('xyzXYZ')\n</cell>\n<code language=julia-1.3>\ncount_distinct_characters('Jerry')\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a string and returns\
    \ the number of characters in the string that are not in the alphabet of English.",
  "    count_distinct_characters = \n        foldl(\n            +,\n            map(\n\
    \                count_distinct_character,\n                filter(\n        \
    \            is_character,\n                    string\n                )\n  \
    \          )\n        )\nend\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(strings)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of characters in the string that are not in the alphabet of English.",
  "    count_distinct_characters(string, 0)\nend", "    count_distinct_characters_helper(string,0,0)\n\
    end", "    \n    count = 0\n    for c in string:\n        if c.isUpper():\n  \
    \          count += 1\n        elif c.isLower():\n            count += 1\n   \
    \     elif c.isDigit():\n            count += 1\n        elif c.isSpace():\n \
    \           count += 1\n    return count\n</code>\n<|/ a dscore=1 |>\n<| c |>\n\
    This doesn't work. `count_distinct_characters('Jerry')` returns `4` instead of\
    \ `3`.\n<|/ c |>\n<| c |>\nThanks for pointing that out. I fixed the code. Now\
    \ it should work.\n<|/ c |>\n<| a dscore=1 |>\n<code>", "    count_distinct_characters(string,\
    \ 0)\nend\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters('xyzXYZ')\n\
    </cell>\n<code language=julia-1.5>\ncount_distinct_characters('Jerry')\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a string and returns the number\
    \ of characters in the string that are not in the alphabet (including spaces).\
    \ For example, if the string is 'Jerry', the function should return 3.", "   \
    \ count_distinct_characters(string, 0)\nend\n</cell>\n<code language=julia-1.5>\n\
    count_distinct_characters(\"\")\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"\
    a\")\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"ab\")\n\
    </cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"abc\")\n</cell>\n\
    <code language=julia-1.5>\ncount_distinct_characters(\"abA\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_distinct_characters(\"abA\")\n</cell>\n<code language=julia-1.5>\n\
    count_distinct_characters(\"abA\")\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"\
    abA\")\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"abA\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"abA\")\n</cell>\n\
    <code language=julia-1.5>\ncount_distinct_characters(\"abA\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_distinct_characters(\"abA\")\n</cell>\n<code language=julia-1.5>\n\
    count_distinct_characters(\"abA\")\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"\
    abA\")\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"abA\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"abA\")\n</cell>\n\
    <code language=julia-1.5>\ncount_distinct_characters(\"abA\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_distinct_characters(\"abA\")\n</cell>\n<code language=julia-1.5>\n\
    count_distinct_characters(\"abA\")\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"\
    abA\")\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"abA\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"abA\")\n</cell>\n\
    <code language=julia-1.5>\ncount_distinct_characters(\"abA\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_distinct_characters(\"abA\")\n</cell>\n<code language=julia-1.5>\n\
    count_distinct_characters(\"abA\")\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"\
    abA\")\n</cell>\n<code language=julia-1.5>\ncount_distinct_", "    \n    count_distinct_characters\
    \ = HashSet{Char}(string.uppercase)\n    count_distinct_characters.merge(string.lowercase)\n\
    \    count_distinct_characters.merge(string.digits)\n    count_distinct_characters.merge(string.whitespace)\n\
    \    count_distinct_characters.merge(string.ascii_lowercase)\n    count_distinct_characters.merge(string.ascii_uppercase)\n\
    \    count_distinct_characters.merge(string.ascii_letters)\n    count_distinct_characters.merge(string.ascii_lowercase)\n\
    \    count_distinct_characters.merge(string.ascii_uppercase)\n    count_distinct_characters.merge(string.ascii_letters)\n\
    \    count_distinct_characters.merge(string.ascii_lowercase)\n    count_distinct_characters.merge(string.ascii_uppercase)\n\
    \    count_distinct_characters.merge(string.ascii_letters)\n    count_distinct_characters.merge(string.ascii_lowercase)\n\
    \    count_distinct_characters.merge(string.ascii_uppercase)\n    count_distinct_characters.merge(string.ascii_letters)\n\
    \    count_distinct_characters.merge(string.ascii_lowercase)\n    count_distinct_characters.merge(string.ascii_uppercase)\n\
    \    count_distinct_characters.merge(string.ascii_letters)\n    count_distinct_characters.merge(string.ascii_lowercase)\n\
    \    count_distinct_characters.merge(string.ascii_uppercase)\n    count_distinct_characters.merge(string.ascii_letters)\n\
    \    count_distinct_characters.merge(string.ascii_lowercase)\n    count_distinct_characters.merge(string.ascii_uppercase)\n\
    \    count_distinct_characters.merge(string.ascii_letters)\n    count_distinct_characters.merge(string.ascii_lowercase)\n\
    \    count_distinct_characters.merge(string.ascii_uppercase)\n    count_distinct_characters.merge(string.ascii_letters)\n\
    \    count_distinct_characters.merge(string.ascii_lowercase)\n    count_distinct_characters.merge(string.ascii_uppercase)\n\
    \    count_distinct_characters.merge(string.ascii_letters)\n    count_distinct_characters.merge(string.ascii_lowercase)\n\
    \    count_distinct_characters.merge(string.ascii_uppercase)\n    count_distinct_characters.merge(string.ascii_letters)\n\
    \    count_distinct_characters.merge(string.ascii_lowercase)\n    count_distinct_characters.merge(string.ascii_uppercase)\n\
    \    count_distinct_characters.merge(string.ascii_letters)\n    count_distinct_characters.merge(string.ascii_lowercase)\n\
    \    count_distinct_characters.merge(string.ascii_uppercase)\n    count_distinct_characters.merge(string.ascii_letters)\n\
    \    count_distinct_characters.merge(string.ascii_lowercase)\n    count_distinct_characters.merge(string.ascii_uppercase)\n\
    \    count_distinct_characters.merge(string.ascii_letters)\n    count_distinct_characters.merge(string.ascii_lowercase)\n\
    \    count_distinct_characters.merge(string.ascii_uppercase)\n    count_distinct_characters.merge(string.ascii_letters)\n\
    \    count_distin", "    count_distinct_characters(string, 0)\nend\n</cell>\n\
    <code language=julia-1.3>\ncount_distinct_characters('xyzXYZ')\n</cell>\n<code\
    \ language=julia-1.3>\ncount_distinct_characters('Jerry')\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that counts the number of times a character appears in a\
    \ string. For example, count_characters('Jerry') = 4.", "    \n    count_distinct_characters\
    \ = HashSet{Char}(Char.uppercase)\n    for c in string\n        count_distinct_characters.add(c)\n\
    \    return count_distinct_characters.size\nend\n</cell>\n<code language=julia-1.5>\n\
    count_distinct_characters(\"Jerry\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and returns the number of distinct characters in that string\
    \ in upper case. For example, given \"Jerry\", your function should return 4.",
  "    \n    count_distinct_characters = String.length(string)\n    \n    for char\
    \ in string\n        count_distinct_characters = count_distinct_characters - String.length(String.lower(char))\n\
    \        count_distinct_characters = count_distinct_characters - String.length(String.upper(char))\n\
    \    end\n    \n    return count_distinct_characters\nend\n</cell>\n<code language=julia-1.5>\n\
    count_distinct_characters('xyzXYZ')\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters('Jerry')\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a string and returns\
    \ the number of characters in the string that are not in the alphabet (case insensitive).",
  "    count_distinct_characters(string, 0)\nend\n</cell>\n<code language=julia-1.5>\n\
    count_distinct_characters('xyzXYZ')\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters('Jerry')\n\
    </cell>\n<text>\nExercise 2\nWrite a function that counts the number of characters\
    \ in a string that appears more than once in a row. For example, given \"abcabcbb\"\
    , your function should return 3.", "    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    count_distinct_characters(string, 0)\nend", "    count_distinct_characters_helper(string,\
    \ 0)\nend\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters('xyzXYZ')\n\
    </cell>\n<code language=julia-1.5>\ncount_distinct_characters('Jerry')\n</cell>\n\
    <text>\nExercise 2\nWrite a function that counts the number of times a character\
    \ appears in a string. For example, if the string is 'Jerry', the function should\
    \ return 4.", "    \n    count_distinct_characters = Set.new()\n    for c in string:\n\
    \        count_distinct_characters.add(c)\n    return count_distinct_characters.length\n\
    </code>\n<|/ a dscore=1 |>\n<| a |>\n<code>\ndef count_distinct_characters(string::String)\n\
    \    string.downcase!\n    string.gsub!(/[^a-z]/,'')\n    string.gsub!(/[^A-Z]/,'')\n\
    \    string.gsub!(/[^0-9]/,'')\n    string.gsub!(/[^a-zA-Z0-9]/,'')\n    string.gsub!(/[^a-zA-Z]/,'')\n\
    \    string.gsub!(/[^0-9a-zA-Z]/,'')\n    string.gsub!(/[^a-zA-Z0-9]/,'')\n  \
    \  string.gsub!(/[^a-zA-Z]/,'')\n    string.gsub!(/[^0-9a-zA-Z]/,'')\n    string.gsub!(/[^a-zA-Z0-9]/,'')\n\
    \    string.gsub!(/[^a-zA-Z]/,'')\n    string.gsub!(/[^0-9a-zA-Z]/,'')\n    string.gsub!(/[^a-zA-Z0-9]/,'')\n\
    \    string.gsub!(/[^a-zA-Z]/,'')\n    string.gsub!(/[^0-9a-zA-Z]/,'')\n    string.gsub!(/[^a-zA-Z0-9]/,'')\n\
    \    string.gsub!(/[^a-zA-Z]/,'')\n    string.gsub!(/[^0-9a-zA-Z]/,'')\n    string.gsub!(/[^a-zA-Z0-9]/,'')\n\
    \    string.gsub!(/[^a-zA-Z]/,'')\n    string.gsub!(/[^0-9a-zA-Z]/,'')\n    string.gsub!(/[^a-zA-Z0-9]/,'')\n\
    \    string.gsub!(/[^a-zA-Z]/,'')\n    string.gsub!(/[^0-9a-zA-Z]/,'')\n    string.gsub!(/[^a-zA-Z0-9]/,'')\n\
    \    string.gsub!(/[^a-zA-Z]/,'')\n    string.gsub!(/[^0-9a-zA-Z]/,'')\n    string.gsub!(/[^a-zA-Z0-9]/,'')\n\
    \    string.gsub!(/[^a-zA-Z]/,'')\n    string.gsub!(/[^0-9a-zA-Z]/,'')\n    string.gsub!(/[^a-zA-Z0-9]/,'')\n\
    \    string.gsub!(/[^a-zA-Z]/,'')\n    string.gsub!(/[^0-9a-zA-Z]/,'')\n    string.gsub!(/[^a-zA-Z0-9]/,'')\n\
    \    string.gsub!(/[^a-zA-Z]/,'')\n    string.gsub!(/[^0-9", "    \n    count_distinct_characters(string,\
    \ 0)\nend", "    count_distinct_characters_helper(string,0)\nend\n</cell>\n<code\
    \ language=julia-1.5>\ncount_distinct_characters('xyzXYZ')\n</cell>\n<code language=julia-1.5>\n\
    count_distinct_characters('Jerry')\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a string and returns the number of characters in the string that\
    \ are not in the alphabet (case insensitive).", "    \n    count = 0\n    for\
    \ c in string:\n        if c.isUpper():\n            count += 1\n        elif\
    \ c.isLower():\n            count += 1\n        elif c.isDigit():\n          \
    \  count += 1\n    return count\n</code>\n<|/ a tags=haskell,functional-programming\
    \ |>\n<| c |>\nI like the idea of using foldl, but I think it would be more idiomatic\
    \ to use `foldl (\\count c -> if c.isUpper() then count + 1 else count) 0`.\n\
    <|/ c |>\n<| c |>\nI agree with you. My answer was more to show how it can be\
    \ done with foldl and how it can be done with foldr.\n<|/ c |>\n<| c |>\nI like\
    \ your solution, but I prefer `foldl (\\count c -> if c.isUpper() then count +\
    \ 1 else count) 0`.\n<|/ c |>\n<| c |>\nI agree, foldl is more idiomatic. Thanks\
    \ for your suggestion.\n<|/ c |>\n<| c |>\nI prefer `foldl (\\count c -> if c.isUpper()\
    \ then count + 1 else count) 0` because it is more readable. `foldl` has more\
    \ general type than `foldl (+) 0`.\n<|/ c |>\n<| a tags=haskell,functional-programming\
    \ |>\nA simple solution using foldl:\n<code>\ncount_distinct_characters :: String\
    \ -> Int\ncount_distinct_characters s = foldl (\\acc c -> if c.isUpper() then\
    \ acc + 1 else acc) 0 s\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\nA simple\
    \ solution using foldl and map:\n<code>\ncount_distinct_characters :: String ->\
    \ Int\ncount_distinct_characters s = foldl (\\acc c -> if c.isUpper() then acc\
    \ + 1 else acc) 0 $ map toUpper s\n</code>\n<|/ a tags=haskell,functional-programming\
    \ |>\n<| a tags=haskell,functional-programming |>\n<code>\ncount_distinct_characters\
    \ :: String -> Int\ncount_distinct_characters s = foldl (\\acc c -> if c.isUpper()\
    \ then acc + 1 else acc) 0 s\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n\
    count_distinct_characters :: String -> Int\ncount_distinct_characters s = foldl\
    \ (\\acc c -> if c.isUpper() then acc + 1 else acc) 0 ", "    count_distinct_characters(string,\
    \ 0)\nend", "    \n    count_distinct_characters = HashSet{Char}(string.chars)\n\
    \    \n    return length(count_distinct_characters)\nend\n</cell>\n<code language=julia-1.5>\n\
    count_distinct_characters('xyzXYZ')\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters('Jerry')\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of times each character appears in the string.", "    count_distinct_characters(string,\
    \ 0)\nend", "    count_distinct_characters(string, 0)\nend\n</cell>\n<code language=julia-1.0>\n\
    count_distinct_characters('xyzXYZ')\n</cell>\n<code language=julia-1.0>\ncount_distinct_characters('Jerry')\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a string and returns\
    \ the number of distinct characters (regardless of case) in the string.", "  \
    \  count_distinct_characters_helper(string,0,0)\nend", "    \n    count = 0\n\
    \    for c in string:\n        if c.isUpper():\n            count += 1\n     \
    \   elif c.isLower():\n            count += 1\n        elif c.isDigit():\n   \
    \         count += 1\n    return count\n</code>\n<|/ a dscore=0 |>\n<| a |>\n\
    <code>\ndef count_distinct_characters(string::String)::Int64\n    count = 0\n\
    \    for c in string:\n        if c.isUpper():\n            count += 1\n     \
    \   elif c.isLower():\n            count += 1\n        elif c.isDigit():\n   \
    \         count += 1\n    return count\n</code>\n<|/ a dscore=0 tags=haskell,functional-programming\
    \ |>\n<| a dscore=0 |>\n<code>\nimport Data.Char", "    count_distinct_characters\
    \ = HashSet{Char}(string.chars)\n    return count_distinct_characters.length\n\
    end\n</cell>\n<code language=julia-1.3>\ncount_distinct_characters(string::String)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of times each character appears in the string. For example, given\
    \ \"abcabcbb\", the function should return {\"a\" => 3, \"b\" => 2, \"c\" => 3,\
    \ \"b\" => 2}.", "    \n    count_distinct_characters = HashSet{Char}(string.chars)\n\
    \    \n    return count_distinct_characters.length\nend\n</cell>\n<code language=julia-1.5>",
  "    count_distinct_characters = string.count\nend\n</cell>\n<code language=julia-1.5>",
  "    count_distinct_characters = \n        foldl(\n            +,\n            map(\n\
    \                char,\n                string\n            )\n        )\nend\n\
    </cell>\n<code language=julia-1.5>\ncount_distinct_characters(strings)\n</cell>\n\
    <text>\nExercise\nWrite a function that takes a string and returns the number\
    \ of distinct characters in that string. \nFor example, given \"Jerry\" it should\
    \ return 4.", "    count_distinct_characters(string, 0)\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    count_distinct_characters = String.length(string)\n    \n    return count_distinct_characters\n\
    end", "    count_distinct_characters_helper(string,0,0)\nend\n</cell>\n<code language=julia-1.5>\n\
    count_distinct_characters('xyzXYZ')\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters('Jerry')\n\
    </cell>\n<text>\nExercise\nWrite a function that takes a string and returns the\
    \ number of distinct characters (regardless of case) does it consist of. For example,\
    \ given \"xyzXYZ\", it should return 3.", "    count_distinct_characters(string,\
    \ 0)\nend\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters('xyzXYZ')\n\
    </cell>\n<text>\nExercise\nWrite a function that returns the number of distinct\
    \ characters in a string that consist of only lowercase letters."]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
