name: HumanEval_19_sort_numbers
language: julia
prompt: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
  \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
  \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to\
  \ largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\
  \"\nfunction sort_numbers(numbers::String)::String \n"
tests: "using Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\
  \") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"three\
  \ five nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four seven\
  \ nine eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"six\
  \ five four three two one zero\") == \"zero one two three four five six\")\nend\n"
completions: ["    numbers = numbers.split(\" \")\n    numbers.sort\n    return join(numbers,\
    \ \" \")\nend\n</cell>\n<code language=julia-1.4>\nsort_numbers(\"one three five\"\
    )\n</cell>\n<text>\nExercise 4\nWrite a function that takes a string and returns\
    \ the string with all the words capitalized.\n>>> capitalize_words(\"one two three\"\
    )\n'One Two Three'\n>>> capitalize_words(\"one two three four\")\n'One Two Three\
    \ Four'\n>>> capitalize_words(\"one two three four five\")\n'One Two Three Four\
    \ Five'\n>>> capitalize_words(\"one two three four five six\")\n'One Two Three\
    \ Four Five Six'\n>>> capitalize_words(\"one two three four five six seven\")\n\
    'One Two Three Four Five Six Seven'\n>>> capitalize_words(\"one two three four\
    \ five six seven eight\")\n'One Two Three Four Five Six Seven Eight'\n>>> capitalize_words(\"\
    one two three four five six seven eight nine\")\n'One Two Three Four Five Six\
    \ Seven Eight Nine'\n>>> capitalize_words(\"one two three four five six seven\
    \ eight nine ten\")\n'One Two Three Four Five Six Seven Eight Nine Ten'\n>>> capitalize_words(\"\
    one two three four five six seven eight nine ten eleven\")\n'One Two Three Four\
    \ Five Six Seven Eight Nine Ten Eleven'\n>>> capitalize_words(\"one two three\
    \ four five six seven eight nine ten eleven twelve\")\n'One Two Three Four Five\
    \ Six Seven Eight Nine Ten Eleven Twelve'\n>>> capitalize_words(\"one two three\
    \ four five six seven eight nine ten eleven twelve thirteen\")\n'One Two Three\
    \ Four Five Six Seven Eight Nine Ten Eleven Twelve Thirteen'\n>>> capitalize_words(\"\
    one two three four five six seven eight nine ten eleven twelve thirteen fourteen\"\
    )\n'One Two Three Four Five Six Seven Eight Nine Ten Eleven T", "    numbers =\
    \ numbers.split(\" \")\n    numbers.sort()\n    return \" \".join(numbers)\nend\n\
    </cell>\n<code language=julia-1.0>\nsort_numbers(\"three one five\")\n</cell>\n\
    <text>\nExercise 4\nWrite a function that takes a string as input and returns\
    \ a string with all the characters in lower case. \nThe string can contain any\
    \ characters, including spaces.\nThe function should ignore all non-alphabetic\
    \ characters and only return alphabetic characters.\nThe function should ignore\
    \ all non-alphabetic characters and only return alphabetic characters.\nThe function\
    \ should ignore all non-alphabetic characters and only return alphabetic characters.\n\
    The function should ignore all non-alphabetic characters and only return alphabetic\
    \ characters.\nThe function should ignore all non-alphabetic characters and only\
    \ return alphabetic characters.\nThe function should ignore all non-alphabetic\
    \ characters and only return alphabetic characters.\nThe function should ignore\
    \ all non-alphabetic characters and only return alphabetic characters.\nThe function\
    \ should ignore all non-alphabetic characters and only return alphabetic characters.\n\
    The function should ignore all non-alphabetic characters and only return alphabetic\
    \ characters.\nThe function should ignore all non-alphabetic characters and only\
    \ return alphabetic characters.\nThe function should ignore all non-alphabetic\
    \ characters and only return alphabetic characters.\nThe function should ignore\
    \ all non-alphabetic characters and only return alphabetic characters.\nThe function\
    \ should ignore all non-alphabetic characters and only return alphabetic characters.\n\
    The function should ignore all non-alphabetic characters and only return alphabetic\
    \ characters.\nThe function should ignore all non-alphabetic characters and only\
    \ return alphabetic characters.\nThe function should ignore all non-alphabetic\
    \ characters and only return alphabetic characters.\nThe function should ignore\
    \ all non-alphabetic characters and only return alphabetic characters.\nThe function\
    \ should ignore all non-alphabetic characters and only return alphabetic characters.\n\
    The function should ignore all non-alphabetic characters and only return alphabetic\
    \ characters.\nThe function should ignore all non-alphabetic characters and only\
    \ return alphabetic characters.\nThe function should ignore all non-alphabetic\
    \ characters and only return alphabetic characters.\nThe function should ignore\
    \ all non-alphabetic characters and only return alphabetic characters.\nThe function\
    \ should ignore all non-alphabetic characters and only return alphabetic characters.\n\
    The function should ignore all non-alphabetic characters and only return alphabetic\
    \ characters.\nThe function should ignore all non-", "    numbers = numbers.split('\
    \ ')\n    numbers.sort()\n    return ' '.join(numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    sort_numbers(\"one two three four five six seven eight nine\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the number of words\
    \ in the string.\n    >>> count_words(\"one two three four five six seven eight\
    \ nine\")\n    7\n    >>> count_words(\"one two three four five six seven eight\
    \ nine\")\n    7\n    >>> count_words(\"one two three four five six seven eight\
    \ nine\")\n    7\n    >>> count_words(\"one two three four five six seven eight\
    \ nine\")\n    7\n    >>> count_words(\"one two three four five six seven eight\
    \ nine\")\n    7\n    >>> count_words(\"one two three four five six seven eight\
    \ nine\")\n    7\n    >>> count_words(\"one two three four five six seven eight\
    \ nine\")\n    7\n    >>> count_words(\"one two three four five six seven eight\
    \ nine\")\n    7\n    >>> count_words(\"one two three four five six seven eight\
    \ nine\")\n    7\n    >>> count_words(\"one two three four five six seven eight\
    \ nine\")\n    7\n    >>> count_words(\"one two three four five six seven eight\
    \ nine\")\n    7\n    >>> count_words(\"one two three four five six seven eight\
    \ nine\")\n    7\n    >>> count_words(\"one two three four five six seven eight\
    \ nine\")\n    7\n    >>> count_words(\"one two three four five six seven eight\
    \ nine\")\n    7\n    >>> count_words(\"one two three four five six seven eight\
    \ nine\")\n    7\n    >>> count_words(\"one two three four five six seven eight\
    \ nine\")\n    7\n    >>> count_words(\"one two three four five six seven eight\
    \ nine\")\n    7\n    >>> count_words(\"one two three four five six seven eight\
    \ nine\")\n    7\n    >>> count_words(\"one two three four five six seven eight\
    \ nine\")\n    7\n    >>> count_words(\"one two three ", "    numbers = numbers.split('\
    \ ')\n    numbers.sort()\n    return ' '.join(numbers)\nend\n</cell>\n<code language=julia-1.0>\n\
    sort_numbers('three one five')\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and returns the string with all numbers in reverse order.\n\
    >>> reverse_numbers('one two three four five six seven eight nine')\n'nine eight\
    \ seven six five four three two one'\n>>> reverse_numbers('one two three four\
    \ five six seven eight nine')\n'nine eight seven six five four three two one'\n\
    >>> reverse_numbers('one two three four five six seven eight nine')\n'nine eight\
    \ seven six five four three two one'\n>>> reverse_numbers('one two three four\
    \ five six seven eight nine')\n'nine eight seven six five four three two one'\n\
    >>> reverse_numbers('one two three four five six seven eight nine')\n'nine eight\
    \ seven six five four three two one'\n>>> reverse_numbers('one two three four\
    \ five six seven eight nine')\n'nine eight seven six five four three two one'\n\
    >>> reverse_numbers('one two three four five six seven eight nine')\n'nine eight\
    \ seven six five four three two one'\n>>> reverse_numbers('one two three four\
    \ five six seven eight nine')\n'nine eight seven six five four three two one'\n\
    >>> reverse_numbers('one two three four five six seven eight nine')\n'nine eight\
    \ seven six five four three two one'\n>>> reverse_numbers('one two three four\
    \ five six seven eight nine')\n'nine eight seven six five four three two one'\n\
    >>> reverse_numbers('one two three four five six seven eight nine')\n'nine eight\
    \ seven six five four three two one'\n>>> reverse_numbers('one two three four\
    \ five six seven eight nine')\n'nine eight seven six five four three two one'\n\
    >>> reverse_numbers('one two three four ", "    numbers = numbers.split(\" \"\
    )\n    numbers.sort()\n    return \" \".join(numbers)\nend\n</cell>\n<code language=julia-1.0>\n\
    sort_numbers(\"one two three four five six seven eight nine\")\n</cell>\n<text>\n\
    Exercise: Write a function that takes a string and returns a string with the first\
    \ letter of each word capitalized.\n    >>> capitalize_first_letter(\"one two\
    \ three four five six seven eight nine\")\n    'One Two Three Four Five Six Seven\
    \ Eight Nine'\n    \"\"\"", "    numbers = numbers.split(\" \")\n    numbers.sort!\n\
    \    numbers = join(numbers, \" \")\n    return numbers\nend\n</code>\n<|/ a tags=julia,sorting,string\
    \ |>\n<| a dscore=1 |>\nI like using sort! to sort a vector:\n<code>\njulia> sort!(\"\
    one two three\")\n\"one two three\"\n</code>\n<|/ a tags=julia,sorting,string\
    \ |>\n<| a dscore=0 |>\nI like using sort! to sort a vector:\n<code>\njulia> sort!(\"\
    one two three\")\n\"one two three\"\n</code>\n<|/ a tags=julia,sorting,string\
    \ |>\n<| a dscore=0 |>\nI like using sort! to sort a vector:\n<code>\njulia> sort!(\"\
    one two three\")\n\"one two three\"\n</code>\n<|/ a tags=julia,sorting,string\
    \ |>\n<| a dscore=0 |>\nI like using sort! to sort a vector:\n<code>\njulia> sort!(\"\
    one two three\")\n\"one two three\"\n</code>\n<|/ a tags=julia,sorting,string\
    \ |>\n<| c |>\nPlease don't post only code as an answer, but also provide an explanation\
    \ of what your code does and how it solves the problem of the question. Answers\
    \ with an explanation are usually more helpful and of better quality, and are\
    \ more likely to attract upvotes.\n<|/ c |>\n<| c |>\nThis does not provide an\
    \ answer to the question. Once you have sufficient [reputation](https://stackoverflow.com/help/whats-reputation)\
    \ you will be able to [comment on any post](https://stackoverflow.com/help/privileges/comment);\
    \ instead, [provide answers that don't require clarification from the asker](https://meta.stackexchange.com/questions/214173/why-do-i-need-50-reputation-to-comment-what-can-i-do-instead).\
    \ - [From Review](/review/low-quality-posts/26825827)\n<|/ c |>\n<| c |>\nI thought\
    \ this was an answer. Maybe I misunderstood the question. I'll delete my answer\
    \ if that's not the case.\n<|/ c |>\n<| c |>\nI thought this was an answer. Maybe\
    \ I misunderstood the question. I'll delete my answer if that's not the case.\n\
    <|/ c |>\n<| c |>\nI thought this was an answer. Maybe I misundersto", "    numbers\
    \ = numbers.split(' ')\n    numbers = sort(numbers)\n    return join(numbers,\
    \ ' ')\nend\n</cell>\n<code language=julia-1.0>\nsort_numbers('three one five')\n\
    </cell>\n<text>\nExercise: Write a function that takes a string and returns the\
    \ string with all numbers in it sorted from smallest to largest.\n    Valid choices\
    \ are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and\
    \ 'nine'.\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\
    \"\"", "    numbers = numbers.split(\" \")\n    numbers.sort()\n    return \"\
    \ \".join(numbers)\n</code>\n<|/ a dscore=0 |>\n<| a tags=string,sorting,haskell,list\
    \ |>\n<code>\nimport Data.List\nimport Data.Ord", "    numbers = numbers.split(\"\
    \ \")\n    numbers.sort\n    return \" \".join(numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    sort_numbers(\"one two three four five six seven eight nine\")\n</cell>\n<text>\n\
    Exercise: Write a function that takes a string and returns the string with all\
    \ numbers in reverse order. For example, sort_numbers(\"one two three four five\
    \ six seven eight nine\") should return \"nine eight seven six five four three\
    \ two one\".", "    \"\"\"\n    Input is a space-delimited string of numberals\
    \ from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three',\
    \ 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with\
    \ numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n\
    \    'one three five'\n    \"\"\"", "    numbers = numbers.split(\" \")\n    numbers.sort()\n\
    \    return \" \".join(numbers)\nend\n</cell>\n<code language=julia-1.5>\nsort_numbers(\"\
    one two three\")\n</cell>\n<code language=julia-1.5>\nsort_numbers(\"one two three\"\
    )\n</cell>\n<code language=julia-1.5>\nsort_numbers(\"one two three\")\n</cell>\n\
    <code language=julia-1.5>\nsort_numbers(\"one two three\")\n</cell>\n<code language=julia-1.5>\n\
    sort_numbers(\"one two three\")\n</cell>\n<code language=julia-1.5>\nsort_numbers(\"\
    one two three\")\n</cell>\n<code language=julia-1.5>\nsort_numbers(\"one two three\"\
    )\n</cell>\n<code language=julia-1.5>\nsort_numbers(\"one two three\")\n</cell>\n\
    <code language=julia-1.5>\nsort_numbers(\"one two three\")\n</cell>\n<code language=julia-1.5>\n\
    sort_numbers(\"one two three\")\n</cell>\n<code language=julia-1.5>\nsort_numbers(\"\
    one two three\")\n</cell>\n<code language=julia-1.5>\nsort_numbers(\"one two three\"\
    )\n</cell>\n<code language=julia-1.5>\nsort_numbers(\"one two three\")\n</cell>\n\
    <code language=julia-1.5>\nsort_numbers(\"one two three\")\n</cell>\n<code language=julia-1.5>\n\
    sort_numbers(\"one two three\")\n</cell>\n<code language=julia-1.5>\nsort_numbers(\"\
    one two three\")\n</cell>\n<code language=julia-1.5>\nsort_numbers(\"one two three\"\
    )\n</cell>\n<code language=julia-1.5>\nsort_numbers(\"one two three\")\n</cell>\n\
    <code language=julia-1.5>\nsort_numbers(\"one two three\")\n</cell>\n<code language=julia-1.5>\n\
    sort_numbers(\"one two three\")\n</cell>\n<code language=julia-1.5>\nsort_numbers(\"\
    one two three\")\n</cell>\n<code language=julia-1.5>\nsort_numbers(\"one two three\"\
    )\n</cell>\n<code language=julia-1.5>\nsort_numbers(\"one two three\")\n</cell>\n\
    <code language=julia-1.5>\nsort_numbers(\"one two three\")\n</cell>\n<code language=julia-1.5>\n\
    sort_numbers(\"one two three\")\n</cell>\n<code language=julia-1.5>\nsort_numbers(\"\
    one two three\")\n</cell>\n<code language=julia-1.5>\nsort_numbers(\"one two three\"\
    )\n</cell>\n<code language=julia-1.5>", "    numbers = numbers.split(\" \")\n\
    \    numbers.sort()\n    numbers = \" \".join(numbers)\n    return numbers\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=sorting,haskell,string |>\n<code>\nimport Data.List\n\
    import Data.Maybe", "    numbers = split(numbers, \" \")\n    numbers = sort(numbers)\n\
    \    numbers = join(numbers, \" \")\n    return numbers\nend\n</code>\n<|/ a dscore=1\
    \ |>\n<| a |>\nI wrote a function that sorts numbers in ascending order and returns\
    \ a list of sorted numbers. \n<code>", "    numbers = numbers.split(\" \")\n \
    \   numbers.sort!\n    return numbers.join(\" \")\nend\n</code>\n<|/ a dscore=2\
    \ |>\n<| a tags=julia,sorting,string |>\nIn Julia 1.5 you can do:\n<code>\njulia>\
    \ sort!(split(\" one two three four five six seven eight nine ten\"))\n\"one two\
    \ three four five six seven eight nine ten\"\n</code>\n<|/ a dscore=2 |>\n<| a\
    \ dscore=1 |>\n<code>", "    numbers = numbers.split(\" \")\n    numbers.sort()\n\
    \    return \" \".join(numbers)\n</code>\n<|/ a dscore=1 |>\n<| a tags=sorting,haskell\
    \ |>\n<code>\nimport Data.List", "    numbers = numbers.split(\" \")\n    numbers.sort!\n\
    \    return numbers.join(\" \")\nend\n</cell>\n<code language=julia-1.0>", " \
    \   numbers = numbers.split(\" \")\n    numbers.sort!\n    return numbers.join(\"\
    \ \")\nend\n</cell>\n<code language=julia-1.0>\nsort_numbers(\"three one five\"\
    )\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string as input\
    \ and returns a string with the first letter of each word capitalized.\n>>> capitalize_first_letter(\"\
    the quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_first_letter(\"the quick brown fox jumps over\
    \ the lazy dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_first_letter(\"\
    the quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_first_letter(\"the quick brown fox jumps over\
    \ the lazy dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_first_letter(\"\
    the quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_first_letter(\"the quick brown fox jumps over\
    \ the lazy dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_first_letter(\"\
    the quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_first_letter(\"the quick brown fox jumps over\
    \ the lazy dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_first_letter(\"\
    the quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_first_letter(\"the quick brown fox jumps over\
    \ the lazy dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_first_letter(\"\
    the quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_first_letter(\"the quick brown fox jumps over\
    \ the lazy dog\")\n\"The Quick Brown Fox Jumps O", "    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\nend\n</cell>\n<code\
    \ language=julia-1.3>", "    \"\"\"\n    Input is a space-delimited string of\
    \ numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two',\
    \ 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the\
    \ string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"", "    numbers = numbers[2:]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n",
  "    numbers = numbers.split(\" \")\n    numbers.sort!\n    return \" \".join(numbers)\n\
    end\n</cell>\n<code language=julia-1.0>\nsort_numbers(\"three one five\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns a string\
    \ with all the words capitalized.\n>>> capitalize_words(\"The quick brown fox\
    \ jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n\
    >>> capitalize_words(\"The quick brown fox jumps over the lazy dog\")\n\"The Quick\
    \ Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"The quick brown\
    \ fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\
    \n>>> capitalize_words(\"The quick brown fox jumps over the lazy dog\")\n\"The\
    \ Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"The quick\
    \ brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over The Lazy\
    \ Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy dog\"\
    )\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"The\
    \ quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick ", "    numbers = numbers.split(\" \")\n    numbers.sort!\n    numbers\
    \ = numbers.join(\" \")\n    return numbers\nend\n</code>\n<|/ a tags=julia |>\n\
    <| a tags=julia |>\n<code>", "    numbers = numbers.split(\" \")\n    numbers.sort()\n\
    \    return \" \".join(numbers)\nend\n</cell>\n<code language=julia-1.0>\nsort_numbers(\"\
    one two three four five six seven eight nine\")\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a string as input and returns a string with all the\
    \ words capitalized.\n>>> capitalize_words(\"one two three four five six seven\
    \ eight nine\")\n\"One Two Three Four Five Six Seven Eight Nine\"\n>>> capitalize_words(\"\
    one two three four five six seven eight nine ten\")\n\"One Two Three Four Five\
    \ Six Seven Eight Nine Ten\"\n>>> capitalize_words(\"one two three four five six\
    \ seven eight nine ten eleven twelve\")\n\"One Two Three Four Five Six Seven Eight\
    \ Nine Ten Eleven Twelve\"\n>>> capitalize_words(\"one two three four five six\
    \ seven eight nine ten eleven twelve thirteen\")\n\"One Two Three Four Five Six\
    \ Seven Eight Nine Ten Eleven Twelve Thirteen\"\n>>> capitalize_words(\"one two\
    \ three four five six seven eight nine ten eleven twelve thirteen fourteen\")\n\
    \"One Two Three Four Five Six Seven Eight Nine Ten Eleven Twelve Thirteen Fourteen\"\
    \n>>> capitalize_words(\"one two three four five six seven eight nine ten eleven\
    \ twelve thirteen fourteen fifteen\")\n\"One Two Three Four Five Six Seven Eight\
    \ Nine Ten Eleven Twelve Thirteen Fourteen Fifteen\"\n>>> capitalize_words(\"\
    one two three four five six seven eight nine ten eleven twelve thirteen fourteen\
    \ fifteen sixteen\")\n\"One Two Three Four Five Six Seven Eight Nine Ten Eleven\
    \ Twelve Thirteen Fourteen Fifteen Sixteen\"\n>>> capitalize_words(\"one two three\
    \ four five six seven eight nine ten eleven twelve thirteen fourteen fifte", " \
    \   numbers = numbers.split(\" \")\n    numbers.sort()\n    return \" \".join(numbers)\n\
    end\n</cell>\n<code language=julia-1.5>\nsort_numbers(\"one two three four five\
    \ six seven eight nine\")\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a string as input and returns a string with all the words in lower case.\
    \ \nFor example \"The quick brown fox jumps over the lazy dog\" becomes \"the\
    \ quick brown fox jumps over the lazy dog\".\nMake sure you only use one space\
    \ between words. \nMake sure you do not use any punctuation marks.\nMake sure\
    \ you do not use any capital letters.\nMake sure you do not use any numbers. \n\
    Make sure you do not use any special characters. \nMake sure you do not use any\
    \ spaces.\nMake sure you do not use any special characters or capital letters.\n\
    Make sure you do not use any numbers or special characters or capital letters.\n\
    Make sure you do not use any numbers or special characters or capital letters.\n\
    Make sure you do not use any numbers or special characters or capital letters.\n\
    Make sure you do not use any numbers or special characters or capital letters.\n\
    Make sure you do not use any numbers or special characters or capital letters.\n\
    Make sure you do not use any numbers or special characters or capital letters.\n\
    Make sure you do not use any numbers or special characters or capital letters.\n\
    Make sure you do not use any numbers or special characters or capital letters.\n\
    Make sure you do not use any numbers or special characters or capital letters.\n\
    Make sure you do not use any numbers or special characters or capital letters.\n\
    Make sure you do not use any numbers or special characters or capital letters.\n\
    Make sure you do not use any numbers or special characters or capital letters.\n\
    Make sure you do not use any numbers or special characters or capital letters.\n\
    Make sure you do not use any numbers or special characters or capital letters.\n\
    Make sure you do not use any numbers or special characters or capital letters.\n\
    Make sure you do not use any numbers or special characters or capital letters.\n\
    Make sure you do not use any numbers or special characters or capital letters.\n\
    Make sure you do not use any numbers or special characters or capital letters.\n\
    Make sure you do not use any numbers or special characters or capital letters.\n\
    Make sure you do not use any numbers or special characters or capital letters.\n\
    Make sure you do not use any numbers or special characters or capital letters.\n\
    Make sure you do not use any numbers or special characters or capital letters.\n\
    Make sure you do not use any numbers or special characters or capit", "    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n", "    numbers = numbers[2:]\n    numbers = numbers.split(\"\
    \ \")\n    numbers = sort(numbers)\n    numbers = join(numbers, \" \")\n    return\
    \ numbers\nend\n</cell>\n<code language=julia-1.0>", "    numbers = split(numbers,\
    \ \" \")\n    numbers = sort(numbers)\n    return join(numbers, \" \")\nend\n\
    </code>\n<|/ a tags=julia,sorting |>\n<| c |>\nThis doesn't work for me. `sort`\
    \ doesn't seem to exist in Julia 1.5.1. I get the error `ERROR: UndefVarError:\
    \ sort not defined`.\n<|/ c |>\n<| c |>\n`sort` was introduced in Julia 1.5.1.\
    \ See https://github.com/JuliaLang/julia/blob/master/CHANGELOG.md#1501-2015-07-29\n\
    <|/ c |>\n<| c |>\nAh, I see. Thanks for pointing that out. I'm still getting\
    \ used to the version numbering scheme.\n<|/ c |>\n<| a dscore=2 |>\nThe answer\
    \ by is correct, but I thought I'd add some explanation as to why it works.\n\
    The function sort() is a function that is defined in the Base package. As such,\
    \ it is available to all Julia packages. However, this does not mean that it is\
    \ available by default to all functions. In fact, it is only available to functions\
    \ that are defined in the Base package. \nIn your case, sort() is defined in the\
    \ Base package. As such, it is available to all Julia packages. However, this\
    \ does not mean that it is available by default to all functions. In fact, it\
    \ is only available to functions that are defined in the Base package. \nIn your\
    \ case, sort() is defined in the Base package. As such, it is available to all\
    \ Julia packages. However, this does not mean that it is available by default\
    \ to all functions. In fact, it is only available to functions that are defined\
    \ in the Base package. \nIn your case, sort() is defined in the Base package.\
    \ As such, it is available to all Julia packages. However, this does not mean\
    \ that it is available by default to all functions. In fact, it is only available\
    \ to functions that are defined in the Base package. \nIn your case, sort() is\
    \ defined in the Base package. As such, it is available to all Julia packages.\
    \ However, this does not mean that it is available by default to all functions.\
    \ In fact, it is only available to functions that are defined in the Base package.\
    \ \nIn your case, sort() is defined in the Base package. As such, it is available\
    \ to all Julia packages. However, this does not mean that it is available by default\
    \ to all functions. In fact, it is only available to functions that are defined\
    \ in the Base package. \nIn your case, sort() is defined in the Base package.\
    \ As such, it is available to all Julia packages. However, this does not mean\
    \ that it is available by default to all functions. In fact, it is only available\
    \ to functions that are defined in the Base package. \nIn your case, sort(", " \
    \   \"\"\"\n    Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted\
    \ from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three\
    \ five'\n    \"\"\"", "    numbers = numbers.split(\" \")\n    numbers = sort(numbers)\n\
    \    return join(numbers, \" \")\nend\n</cell>\n<code language=julia-1.5>\nsort_numbers(\"\
    one two three four five six seven eight nine\")\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a string and returns the string with all numbers in\
    \ reverse order. \nFor example, sort_numbers(\"one two three four five six seven\
    \ eight nine\") returns \"nine eight seven six five four three two one\".\nHint:\
    \ Use a for loop to iterate over the string and append each character to a new\
    \ string.", "    numbers = numbers.split(\" \")\n    numbers.sort!\n    return\
    \ numbers.join(\" \")\nend\n</cell>\n<code language=julia-1.0>\nsort_numbers(\"\
    three one five\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes a\
    \ string and returns a string with all the words capitalized.\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick ", "    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n", "    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\nend\n</cell>\n<code\
    \ language=julia-1.0>\nsort_numbers(\"three one five\")\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a string as input and returns the string with\
    \ all numbers in sorted order.\nThe input string can contain any number of spaces\
    \ between the numbers, including none.\nThe output string should contain only\
    \ numbers, sorted from smallest to largest.\nFor example, sort_numbers(\"one two\
    \ three four five six seven eight nine\") should return \"one two three four five\
    \ six seven eight nine\".", "    numbers = numbers.split(\" \")\n    numbers.sort!\n\
    \    return numbers.join(\" \")\nend\n</cell>\n<code language=julia-1.0>\nsort_numbers(\"\
    three one five\")\n</cell>\n<text>\nExercise: Write a function that takes a string\
    \ and returns a string with all the words in alphabetical order.\n    Valid strings\
    \ are 'one two three four five six seven eight nine'.\n    >>> sort_words('one\
    \ two three four five six seven eight nine')\n    'one two three four five six\
    \ seven eight nine'\n    \"\"\"", "    numbers = numbers[2:]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n", "    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    numbers = split(numbers, \" \")\n    numbers = sort(numbers)\n\
    \    return join(numbers, \" \")\nend\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\n<code>", "    numbers = numbers.split(\" \")\n    numbers.sort()\n    return\
    \ \" \".join(numbers)\nend\n</cell>\n<code language=julia-1.5>\nsort_numbers(\"\
    three one five\")\n</cell>\n<text>\nExercise: Write a function that takes a string\
    \ and returns a string with all the words capitalized.\n    >>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n    'The Quick Brown Fox Jumps\
    \ Over The Lazy Dog'\n    \"\"\"", "    numbers = numbers.split(\" \")\n    numbers.sort()\n\
    \    return \" \".join(numbers)\nend\n</cell>\n<code language=julia-1.0>\nsort_numbers(\"\
    one two three four five six seven eight nine\")\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a string as input and returns the string with all\
    \ 'o's replaced with 'x's.\n>>> replace_o(\"one two three four five six seven\
    \ eight nine\")\n\"one xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx\
    \ xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx\
    \ xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx\
    \ xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx\
    \ xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx\
    \ xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx\
    \ xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx\
    \ xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx\
    \ xx xx xx xx xx xx ", "    numbers = numbers.split(\" \")\n    numbers.sort()\n\
    \    return \" \".join(numbers)\nend\n</cell>\n<code language=julia-1.3>\nsort_numbers(\"\
    three one five\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes a\
    \ string as input and returns a string with all the characters in lower case separated\
    \ by spaces.\ne.g. \"Hello World\" => \"Hello World\"\ne.g. \"Hello World\" =>\
    \ \"Hello World\"\ne.g. \"Hello World\" => \"Hello World\"\ne.g. \"Hello World\"\
    \ => \"Hello World\"\ne.g. \"Hello World\" => \"Hello World\"\ne.g. \"Hello World\"\
    \ => \"Hello World\"\ne.g. \"Hello World\" => \"Hello World\"\ne.g. \"Hello World\"\
    \ => \"Hello World\"\ne.g. \"Hello World\" => \"Hello World\"\ne.g. \"Hello World\"\
    \ => \"Hello World\"\ne.g. \"Hello World\" => \"Hello World\"\ne.g. \"Hello World\"\
    \ => \"Hello World\"\ne.g. \"Hello World\" => \"Hello World\"\ne.g. \"Hello World\"\
    \ => \"Hello World\"\ne.g. \"Hello World\" => \"Hello World\"\ne.g. \"Hello World\"\
    \ => \"Hello World\"\ne.g. \"Hello World\" => \"Hello World\"\ne.g. \"Hello World\"\
    \ => \"Hello World\"\ne.g. \"Hello World\" => \"Hello World\"\ne.g. \"Hello World\"\
    \ => \"Hello World\"\ne.g. \"Hello World\" => \"Hello World\"\ne.g. \"Hello World\"\
    \ => \"Hello World\"\ne.g. \"Hello World\" => \"Hello World\"\ne.g. \"Hello World\"\
    \ => \"Hello World\"\ne.g. \"Hello World\" => \"Hello World\"\ne.g. \"Hello World\"\
    \ => \"Hello World\"\ne.g. \"Hello World\" => \"Hello World\"\ne.g. \"Hello World\"\
    \ => \"Hello World\"\ne.g. \"Hello World\" => \"Hello World\"\ne.g. \"Hello World\"\
    \ => \"Hello World\"\ne.g. \"Hello World\" => \"Hello World\"\ne.g. \"Hello World\"\
    \ => \"Hello World\"\ne.g. \"Hello World\" => \"Hello World\"\ne.g. \"Hello World\"\
    \ => \"Hello World\"\ne.g. \"Hello World\" => \"Hello World\"\ne.g. \"Hello World\"\
    \ => \"Hello World\"\ne.g. \"Hello World\" => \"Hello World\"\ne.g. \"Hello World\"\
    \ => \"Hello World\"\ne.g. \"Hello World\" => \"Hello World\"\ne.g. \"Hello World\"\
    \ => \"Hello World\"\ne.g. \"Hello World\" => \"Hello World\"\ne.g. \"Hello World\"\
    \ => \"Hello World\"\ne.g. \"Hello World\" => \"Hello World\"\ne.g. \"Hello World\"\
    \ => \"Hello World\"\ne.g. \"Hello World\" => \"", "    \"\"\"\n    Input is a\
    \ space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices\
    \ are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and\
    \ 'nine'.\n    Return the string with numbers sorted from smallest to largest\n\
    \    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"", " \
    \   numbers = numbers.split(' ')\n    numbers.sort()\n    return ' '.join(numbers)\n\
    end\n</cell>\n<code language=julia-1.0>\nsort_numbers('three one five')\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string as input and returns\
    \ a string with the first letter of each word capitalized.\n>>> capitalize_first_letter('one\
    \ two three')\n'One Two Three'\n>>> capitalize_first_letter('one two three four')\n\
    'One Two Three Four'\n>>> capitalize_first_letter('one two three four five')\n\
    'One Two Three Four Five'\n>>> capitalize_first_letter('one two three four five\
    \ six')\n'One Two Three Four Five Six'\n>>> capitalize_first_letter('one two three\
    \ four five six seven')\n'One Two Three Four Five Six Seven'\n>>> capitalize_first_letter('one\
    \ two three four five six seven eight')\n'One Two Three Four Five Six Seven Eight'\n\
    >>> capitalize_first_letter('one two three four five six seven eight nine')\n\
    'One Two Three Four Five Six Seven Eight Nine'\n>>> capitalize_first_letter('one\
    \ two three four five six seven eight nine ten')\n'One Two Three Four Five Six\
    \ Seven Eight Nine Ten'\n>>> capitalize_first_letter('one two three four five\
    \ six seven eight nine ten eleven')\n'One Two Three Four Five Six Seven Eight\
    \ Nine Ten Eleven'\n>>> capitalize_first_letter('one two three four five six seven\
    \ eight nine ten eleven twelve')\n'One Two Three Four Five Six Seven Eight Nine\
    \ Ten Eleven Twelve'\n>>> capitalize_first_letter('one two three four five six\
    \ seven eight nine ten eleven twelve thirteen')\n'One Two Three Four Five Six\
    \ Seven Eight Nine Ten Eleven Twelve Thirteen'\n>>> capitalize_first_letter('one\
    \ two three four five six seven eight nine ten eleven twelve thirteen fourteen')\n\
    'One Two Three Four Fi", "    numbers = numbers.split(\" \")\n    numbers.sort()\n\
    \    return \" \".join(numbers)\nend\n</cell>\n<code language=julia-1.0>", " \
    \   \"\"\"\n    Input is a space-delimited string of numberals from 'zero' to\
    \ 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted\
    \ from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three\
    \ five'\n    \"\"\"", "    numbers = numbers.split(' ')\n    numbers.sort()\n\
    \    return ' '.join(numbers)\nend\n</cell>\n<code language=julia-1.4>", "   \
    \ \"\"\"\n    Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"", "    numbers = numbers.split(\" \")\n    numbers.sort()\n    return\
    \ \" \".join(numbers)\nend\n</cell>\n<code language=julia-1.5>", "    numbers\
    \ = numbers.split(' ')\n    numbers.sort!\n    return numbers.join(' ')\nend\n\
    </cell>\n<code language=julia-1.0>\nsort_numbers(\"three one five\")\n</cell>\n\
    <text>\nExercise: Write a function that takes a string and returns the string\
    \ with all the words capitalized. \n    >>> capitalize_words(\"the quick brown\
    \ fox jumped over the lazy dog\")\n    'The Quick Brown Fox Jumped Over The Lazy\
    \ Dog'\n    \"\"\"", "    numbers = numbers.split(' ')\n    numbers = sort(numbers)\n\
    \    numbers = join(numbers, ' ')\n    return numbers\nend\n</cell>\n<code language=julia-1.5>",
  "    numbers = numbers.split(\" \")\n    numbers.sort!\n    return numbers.join(\"\
    \ \")\nend\n</cell>\n<code language=julia-1.0>", "    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    return numbers.join(\" \")\nend\n</cell>\n<code\
    \ language=julia-1.1>\nsort_numbers(\"one two three four five six seven eight\
    \ nine\")\n</cell>\n<text>\nExercise: Write a function that takes a string and\
    \ returns the string with all the words capitalized.\n    For example, \"Hello\
    \ World\" returns \"Hello World\"\n    >>> capitalize_string(\"Hello World\")\n\
    \    \"Hello World\"\n    \"\"\"", "    numbers = numbers.split(\" \")\n    numbers.sort()\n\
    \    return \" \".join(numbers)\nend\n</cell>\n<code language=julia-1.5>\nsort_numbers(\"\
    one two three four\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns a string with all the words capitalized.\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick bro", "    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n", "    numbers = numbers.split(\"\
    \ \")\n    numbers.sort\n    return \" \".join(numbers)\nend\n</cell>\n<code language=julia-1.0>\n\
    sort_numbers(\"three one five\")\n</cell>\n<text>\nExercise\nWrite a function\
    \ that takes a string as input and returns a string with the first letter of each\
    \ word capitalized.", "    numbers = numbers.split(\" \")\n    numbers.sort\n\
    \    return \" \".join(numbers)\nend\n</cell>\n<code language=julia-1.0>", " \
    \   numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n", "    numbers = numbers.split(\" \")\n    numbers.sort!\n\
    \    return numbers.join(\" \")\nend\n</cell>\n<code language=julia-1.4>\nsort_numbers(\"\
    one two three four five six seven eight nine\")\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a string as input and returns a string with all the\
    \ characters in lower case.\nIf the input string has any non-alphabetic characters,\
    \ return an empty string.\nIf the input string has only alphabetic characters,\
    \ return the string with all the alphabetic characters in lower case.\nIf the\
    \ input string has both alphabetic and non-alphabetic characters, return the string\
    \ with all the alphabetic characters in lower case and all the non-alphabetic\
    \ characters in upper case.\nIf the input string has only alphabetic characters,\
    \ return the string with all the alphabetic characters in lower case.\nIf the\
    \ input string has only non-alphabetic characters, return the string with all\
    \ the non-alphabetic characters in upper case.", "    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\nend\n</cell>\n<code\
    \ language=julia-1.3>", "    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n", "    numbers = numbers[2:]\n\
    \    numbers = numbers.split(\" \")\n    numbers = sort(numbers)\n    numbers\
    \ = join(numbers, \" \")\n    return numbers\n</code>\n<|/ a |>\n<| c |>\nThis\
    \ doesn't work if you have a string like \"one two three four five\"\n<|/ c |>\n\
    <| c |>\nIt does work if you have a string like \"one two three four five\"\n\
    <|/ c |>\n<| c |>\nIt does work if you have a string like \"one two three four\
    \ five\"\n<|/ c |>\n<| a dscore=2 |>\n<code>\ndef sort_numbers(numbers):\n   \
    \ numbers = numbers.split(\" \")\n    numbers = sort(numbers)\n    numbers = join(numbers,\
    \ \" \")\n    return numbers\n</code>\n<|/ a tags=sorting,haskell |>\n<| a dscore=2\
    \ |>\n<code>\nimport Data.List", "    numbers = numbers.split(\" \")\n    numbers.sort()\n\
    \    return \" \".join(numbers)\nend\n</cell>\n<code language=julia-1.5>", " \
    \   numbers = numbers.split(\" \")\n    numbers = sort(numbers)\n    numbers =\
    \ join(numbers, \" \")\n    return numbers\nend\n</cell>\n<code language=julia-1.5>\n\
    sort_numbers(\"one two three four five six seven eight nine\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the string with all\
    \ numbers in reverse order. \nFor example, sort_numbers(\"one two three four five\
    \ six seven eight nine\") returns \"nine eight seven six five four three two one\"\
    .", "    numbers = numbers.split(\" \")\n    numbers.sort()\n    return \" \"\
    .join(numbers)\nend\n</cell>\n<code language=julia-1.5>", "    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\nend\n</cell>\n<code\
    \ language=julia-1.0>", "    numbers = numbers.split(\" \")\n    numbers.sort!\n\
    \    return numbers.join(\" \")\nend\n</cell>\n<code language=julia-1.0>\nsort_numbers(\"\
    three one five\")\n</cell>\n<text>\nExercise: Write a function that takes a string\
    \ and returns the string with all numbers in reverse order.\n    Valid choices\
    \ are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and\
    \ 'nine'.\n    >>> sort_numbers(\"three one five\")\n    'five three one'\n  \
    \  \"\"\"", "    numbers = numbers.split(\" \")\n    numbers.sort()\n    return\
    \ \" \".join(numbers)\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't work\
    \ if you have more than 9 numbers. For example, `sort_numbers(\"one two three\
    \ four five six seven eight nine\")` returns `\"one two three four five six seven\
    \ eight nine\"`.\n<|/ c |>\n<| c |>\nI added a version that works with more than\
    \ 9 numbers. Thanks for pointing that out.\n<|/ c |>\n<| a tags=sorting,haskell\
    \ |>\n<code>\nimport Data.List", "    numbers = numbers.split(\" \")\n    numbers\
    \ = sort(numbers)\n    numbers = join(numbers, \" \")\n    return numbers\n</code>\n\
    <|/ a tags=sorting,string,haskell |>\n<| c |>\nI like your solution, but I feel\
    \ like it could be improved by using [`sortBy`](http://hackage.haskell.org/package/base-4.8.0.0/docs/Data-List.html#v:sortBy)\
    \ instead of `sort`.  It would also make sense to define `sortNumbers` as a `sortBy\
    \ (comparing fst)` rather than a `sort` which would require an additional `map`\
    \ step.\n<|/ c |>\n<| c |>\nI agree with you. I was just trying to solve the problem\
    \ as it was presented. I'll edit my answer to include your suggestions.\n<|/ c\
    \ |>\n<| c |>\nI added a solution using `sortBy` which I think is more elegant.\n\
    <|/ c |>\n<| a dscore=3 |>\nHere's a solution using sortBy:\n<code>\nimport Data.List\
    \ (sortBy)", "    numbers = numbers.split(' ')\n    numbers.sort()\n    return\
    \ ' '.join(numbers)\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\ndef\
    \ sort_numbers(numbers):\n    numbers = numbers.split(' ')\n    numbers.sort()\n\
    \    return ' '.join(numbers)\n</code>\n<|/ a tags=sorting,python |>\n<| c |>\n\
    Please add some explanation to your answer such that others can learn from it\n\
    <|/ c |>\n<| a tags=sorting,python |>\n<code>\ndef sort_numbers(numbers):\n  \
    \  numbers = numbers.split(' ')\n    numbers.sort()\n    return ' '.join(numbers)\n\
    </code>\n<|/ a dscore=0 |>\n<| a tags=sorting,python |>\n<code>\ndef sort_numbers(numbers):\n\
    \    numbers = numbers.split(' ')\n    numbers.sort()\n    return ' '.join(numbers)\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nPlease add some explanation to your answer\
    \ such that others can learn from it\n<|/ c |>\n<| a tags=sorting,python |>\n\
    <code>\ndef sort_numbers(numbers):\n    numbers = numbers.split(' ')\n    numbers.sort()\n\
    \    return ' '.join(numbers)\n</code>\n<|/ a dscore=0 |>\n<| a tags=sorting,python\
    \ |>\n<code>\ndef sort_numbers(numbers):\n    numbers = numbers.split(' ')\n \
    \   numbers.sort()\n    return ' '.join(numbers)\n</code>\n<|/ a dscore=0 |>\n\
    <| c |>\nPlease add some explanation to your answer such that others can learn\
    \ from it\n<|/ c |>\n<| a tags=sorting,python |>\n<code>\ndef sort_numbers(numbers):\n\
    \    numbers = numbers.split(' ')\n    numbers.sort()\n    return ' '.join(numbers)\n\
    </code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\ndef sort_numbers(numbers):\n\
    \    numbers = numbers.split(' ')\n    numbers.sort()\n    return ' '.join(numbers)\n\
    </code>\n<|/ a tags=sorting,python |>\n<| a tags=sorting,python |>\n<code>\ndef\
    \ sort_numbers(numbers):\n    numbers = numbers.split(' ')\n    numbers.sort()\n\
    \    return ' '.join(numbers)\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n\
    <code>\ndef sort_numbers(numbers):\n    numbers = numbers.split(' ')\n    numbers.sort()\n\
    \    return ' '.join(numbers)\n</code>\n<|/ a tags=sorting,python |>\n<| a tags=sorting,python\
    \ |>\n<code>\ndef sort_numbers(numbers):\n", "    numbers = numbers.split(\" \"\
    )\n    numbers.sort!\n    return numbers.join(\" \")\nend\n</cell>\n<code language=julia-1.0>\n\
    sort_numbers(\"three one five\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and returns the number of words in the string. \nFor example,\
    \ \n>>> count_words(\"The quick brown fox jumps over the lazy dog\")\n5\n>>> count_words(\"\
    The quick brown fox jumps over the lazy dog.\")\n4\n>>> count_words(\"The quick\
    \ brown fox jumps over the lazy dog.\")\n4\n>>> count_words(\"The quick brown\
    \ fox jumps over the lazy dog.\")\n4\n>>> count_words(\"The quick brown fox jumps\
    \ over the lazy dog.\")\n4\n>>> count_words(\"The quick brown fox jumps over the\
    \ lazy dog.\")\n4\n>>> count_words(\"The quick brown fox jumps over the lazy dog.\"\
    )\n4\n>>> count_words(\"The quick brown fox jumps over the lazy dog.\")\n4\n>>>\
    \ count_words(\"The quick brown fox jumps over the lazy dog.\")\n4\n>>> count_words(\"\
    The quick brown fox jumps over the lazy dog.\")\n4\n>>> count_words(\"The quick\
    \ brown fox jumps over the lazy dog.\")\n4\n>>> count_words(\"The quick brown\
    \ fox jumps over the lazy dog.\")\n4\n>>> count_words(\"The quick brown fox jumps\
    \ over the lazy dog.\")\n4\n>>> count_words(\"The quick brown fox jumps over the\
    \ lazy dog.\")\n4\n>>> count_words(\"The quick brown fox jumps over the lazy dog.\"\
    )\n4\n>>> count_words(\"The quick brown fox jumps over the lazy dog.\")\n4\n>>>\
    \ count_words(\"The quick brown fox jumps over the lazy dog.\")\n4\n>>> count_words(\"\
    The quick brown fox jumps over the lazy dog.\")\n4\n>>> count_words(\"The quick\
    \ brown fox jumps over the lazy dog.\")\n4\n>>> count_words(\"The quick brown\
    \ fox jumps over the lazy dog.\")\n4\n>>> count_words(\"The quick brown fox jumps\
    \ over the lazy dog.\")\n4\n>>> count_words(\"The quick brown fox jumps over the\
    \ lazy dog.\")\n4\n>>> count_words(\"The quick brown fox jump", "    numbers =\
    \ numbers.split(\" \")\n    numbers.sort()\n    return \" \".join(numbers)\n</code>\n\
    <|/ a tags=sorting,string,haskell |>\n<| a tags=sorting,string,haskell |>\n<code>\n\
    import Data.List", "    numbers = numbers.split(\" \")\n    numbers.sort()\n \
    \   return \" \".join(numbers)\nend\n</cell>\n<code language=julia-1.0>\nsort_numbers(\"\
    one three five\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ string and returns the string with all spaces replaced with underscores\n>>>\
    \ replace_spaces(\"hello world\")\n\"hello_world\"\n>>> replace_spaces(\"one two\
    \ three\")\n\"one_two_three\"\n>>> replace_spaces(\"one two three four\")\n\"\
    one_two_three_four\"\n>>> replace_spaces(\"one two three four  five\")\n\"one_two_three_four_five\"\
    \n>>> replace_spaces(\"one two three four  five six\")\n\"one_two_three_four_five_six\"\
    \n>>> replace_spaces(\"one two three four  five six seven\")\n\"one_two_three_four_five_six_seven\"\
    \n>>> replace_spaces(\"one two three four  five six seven eight\")\n\"one_two_three_four_five_six_seven_eight\"\
    \n>>> replace_spaces(\"one two three four  five six seven eight nine\")\n\"one_two_three_four_five_six_seven_eight_nine\"\
    \n>>> replace_spaces(\"one two three four  five six seven eight nine ten\")\n\"\
    one_two_three_four_five_six_seven_eight_nine_ten\"\n>>> replace_spaces(\"one two\
    \ three four  five six seven eight nine ten eleven\")\n\"one_two_three_four_five_six_seven_eight_nine_ten_eleven\"\
    \n>>> replace_spaces(\"one two three four  five six seven eight nine ten eleven\
    \ twelve\")\n\"one_two_three_four_five_six_seven_eight_nine_ten_eleven_twelve\"\
    \n>>> replace_spaces(\"one two three four  five six seven eight nine ten eleven\
    \ twelve thirteen\")\n\"one_two_three_four_five_six_seven_eight_nine_ten_eleven_twelve_thirteen\"\
    \n>>> replace_spaces(\"one two three four  five six seven eight nine ten eleven\
    \ twelve thirteen fourteen\")\n\"one_two_three_four_five_", "    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n", "    numbers = numbers.split(\"\
    \ \")\n    numbers = sort(numbers)\n    return join(numbers, \" \")\nend\n</cell>\n\
    <code language=julia-1.5>\nsort_numbers(\"one two three four five six seven eight\
    \ nine\")\n</cell>\n<text>\nExercise: Write a function that takes a string and\
    \ returns the string with all numbers in reverse order.\n    Valid choices are\
    \ 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n\
    \    >>> sort_numbers(\"three one five\")\n    'five one three'\n    \"\"\"",
  "    numbers = numbers[2:]\n    numbers = numbers.split(\" \")\n    numbers = sort(numbers)\n\
    \    numbers = join(numbers, \" \")\n    return numbers\n</code>\n<|/ a tags=sorting,string,julia\
    \ |>\n<| c |>\nThis doesn't work for me. `sort_numbers(\"one two three\")` returns\
    \ `[\"one\", \"two\", \"three\"]` instead of `[\"one\", \"three\", \"two\"]`.\n\
    <|/ c |>\n<| c |>\nThis doesn't work for me. `sort_numbers(\"one two three\")`\
    \ returns `[\"one\", \"two\", \"three\"]` instead of `[\"one\", \"three\", \"\
    two\"]`.\n<|/ c |>\n<| c |>\nThis doesn't work for me. `sort_numbers(\"one two\
    \ three\")` returns `[\"one\", \"two\", \"three\"]` instead of `[\"one\", \"three\"\
    , \"two\"]`.\n<|/ c |>\n<| c |>\nThis doesn't work for me. `sort_numbers(\"one\
    \ two three\")` returns `[\"one\", \"two\", \"three\"]` instead of `[\"one\",\
    \ \"three\", \"two\"]`.\n<|/ c |>\n<| a dscore=2 |>\nThe accepted answer doesn't\
    \ work for me. sort_numbers(\"one two three\") returns [\"one\", \"two\", \"three\"\
    ] instead of [\"one\", \"three\", \"two\"]. \nI wrote my own version that works:\n\
    <code>", "    numbers = numbers.split(\" \")\n    numbers.sort!\n    return numbers.join(\"\
    \ \")\nend\n</code>\n<|/ a tags=julia |>\n<| c |>\nThe `sort!` method modifies\
    \ the array in-place, so the return value is not useful. `sort!` returns a new\
    \ array with the sorted elements.\n<|/ c |>\n<| c |>\nThanks, I didn't know that.\
    \ I've updated the answer.\n<|/ c |>\n<| a dscore=2 |>\nThe simplest solution\
    \ is to use sort!:\n<code>\njulia> sort!(\"three one five\")\n\"one three five\"\
    \n</code>\n<|/ a tags=julia |>\n<| c |>\n`sort!` modifies the array in-place,\
    \ so the return value is not useful. `sort!` returns a new array with the sorted\
    \ elements.\n<|/ c |>\n<| c |>\nThanks, I didn't know that. I've updated the answer.\n\
    <|/ c |>\n<| a dscore=2 |>\nI like to use sort! for this:\n<code>\njulia> sort!(\"\
    three one five\")\n\"one three five\"\n</code>\n<|/ a tags=julia |>\n<| a dscore=2\
    \ |>\nI like to use sort! for this:\n<code>\njulia> sort!(\"three one five\")\n\
    \"one three five\"\n</code>\n<|/ a tags=julia |>\n<| a tags=julia |>\n<code>\n\
    julia> sort!(\"three one five\")\n\"one three five\"\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\n`sort!` modifies the array in-place, so the return value is not\
    \ useful. `sort!` returns a new array with the sorted elements.\n<|/ c |>\n<|\
    \ a tags=julia |>\n<code>\njulia> sort!(\"three one five\")\n\"one three five\"\
    \n</code>\n<|/ a dscore=1 |>\n<| c |>\n`sort!` modifies the array in-place, so\
    \ the return value is not useful. `sort!` returns a new array with the sorted\
    \ elements.\n<|/ c |>\n<| a tags=julia |>\n<code>\njulia> sort!(\"three one five\"\
    )\n\"one three five\"\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n\
    julia> sort!(\"three one five\")\n\"one three five\"\n</code>", "    numbers =\
    \ numbers.split(\" \")\n    numbers.sort()\n    return \" \".join(numbers)\nend\n\
    </cell>\n<code language=julia-1.0>", "    numbers = numbers.split(' ')\n    numbers.sort()\n\
    \    return ' '.join(numbers)\nend\n</cell>\n<code language=julia-1.5>\nsort_numbers(\"\
    one two three four five six seven eight nine\")\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a string and returns the string with all numbers in\
    \ reverse order. For example, sort_numbers(\"one two three four five six seven\
    \ eight nine\") should return \"nine eight seven six five four three two one\"\
    .", "    numbers = numbers.split(\" \")\n    numbers.sort\n    return \" \".join(numbers)\n\
    </code>\n<|/ a dscore=0 |>\n<| a |>\n<code>", "    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    return \" \".join(numbers)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsort_numbers(\"one two three four five six seven eight\
    \ nine\")\n</cell>\n<text>\nExercise: Write a function that takes a string and\
    \ returns a string with the first letter of each word capitalized.", "    numbers\
    \ = numbers.split(\" \")\n    numbers.sort\n    return join(numbers, \" \")\n\
    end\n</cell>\n<code language=julia-1.5>\nsort_numbers(\"one two three\")\n</cell>\n\
    <text>\nExercise: Write a function that takes a string and returns a string with\
    \ all the words capitalized.\n    For example, sort_words(\"one two three\") should\
    \ return \"One Two Three\"\n    >>> sort_words(\"one two three\")\n    'One Two\
    \ Three'\n    \"\"\"", "    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n", "    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    return numbers.join(\" \")\nend\n</cell>\n<code\
    \ language=julia-1.0>\nsort_numbers(\"three one five\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns a string with all the characters\
    \ in lower case. \nFor example,\n>>> capitalize(\"Hello World\")\n\"hello world\"\
    \n>>> capitalize(\"hello\")\n\"Hello\"\n>>> capitalize(\"hello  world\")\n\"Hello\
    \ world\"\n>>> capitalize(\"hello world\")\n\"Hello World\"\n>>> capitalize(\"\
    hello world \")\n\"Hello World\"\n>>> capitalize(\"hello world  \")\n\"Hello World\"\
    \n>>> capitalize(\"hello world \")\n\"Hello World\"\n>>> capitalize(\"hello world\
    \  \")\n\"Hello World\"\n>>> capitalize(\"hello world \")\n\"Hello World\"\n>>>\
    \ capitalize(\"hello world  \")\n\"Hello World\"\n>>> capitalize(\"hello world\
    \ \")\n\"Hello World\"\n>>> capitalize(\"hello world  \")\n\"Hello World\"\n>>>\
    \ capitalize(\"hello world \")\n\"Hello World\"\n>>> capitalize(\"hello world\
    \  \")\n\"Hello World\"\n>>> capitalize(\"hello world \")\n\"Hello World\"\n>>>\
    \ capitalize(\"hello world  \")\n\"Hello World\"\n>>> capitalize(\"hello world\
    \ \")\n\"Hello World\"\n>>> capitalize(\"hello world  \")\n\"Hello World\"\n>>>\
    \ capitalize(\"hello world \")\n\"Hello World\"\n>>> capitalize(\"hello world\
    \  \")\n\"Hello World\"\n>>> capitalize(\"hello world \")\n\"Hello World\"\n>>>\
    \ capitalize(\"hello world  \")\n\"Hello World\"\n>>> capitalize(\"hello world\
    \ \")\n\"Hello World\"\n>>> capitalize(\"hello world  \")\n\"Hello World\"\n>>>\
    \ capitalize(\"hello world \")\n\"Hello World\"\n>>> capitalize(\"hello world\
    \  \")\n\"Hello World\"\n>>> capitalize(\"hello world \")\n\"Hello World\"\n>>>\
    \ capitalize(\"hello world  \")\n\"Hello World\"\n>>> capitalize(\"hello world\
    \ \")\n\"Hello World\"\n>>> capitalize(\"hello world  \")\n\"Hello World\"\n>>>\
    \ capitalize(\"hello world \")\n\"Hello World\"\n>>> capitalize(\"hello world\
    \  \")\n\"Hello World\"\n>>> capitalize(\"hello world \")\n\"Hello World\"\n>>>\
    \ capitalize(\"hello world  \")\n\"Hello World\"\n>>> capitalize(\"hello world\
    \ \")\n\"Hello World\"\n>>> capitalize(\"hello world  \")\n\"Hello World\"", " \
    \   numbers = numbers.split(\" \")\n    numbers.sort\n    return join(numbers,\
    \ \" \")\nend\n</cell>\n<code language=julia-1.5>\nsort_numbers(\"three one five\"\
    )\n</cell>\n<text>\nExercise: Write a function that takes a string and returns\
    \ the string with all numbers sorted from smallest to largest.\n    Valid choices\
    \ are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and\
    \ 'nine'.\n    For example, sort_numbers(\"three one five\") returns \"one three\
    \ five\".\n    Use sort_numbers to solve the problem:", "    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=sorting,haskell,string |>\n<code>\nimport Data.List", "    numbers\
    \ = numbers.split(' ')\n    numbers.sort()\n    return ' '.join(numbers)\nend\n\
    </cell>\n<code language=julia-1.4>", "    numbers = numbers.split(\" \")\n   \
    \ numbers.sort()\n    return \" \".join(numbers)\n</code>\n<|/ a |>\n<| a tags=sorting,haskell,string\
    \ |>\nHere's a solution that uses Data.List.sortBy and Data.List.tails:\n<code>\n\
    import Data.List (sortBy)", "    numbers = numbers.split(\" \")\n    numbers.sort!\n\
    \    return numbers.join(\" \")\nend\n</cell>\n<code language=julia-1.0>\nsort_numbers(\"\
    one three five\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ string and returns a string with all the words capitalized.\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick ", "    numbers = numbers.split(\" \")\n    numbers.sort()\n    return\
    \ \" \".join(numbers)\nend\n</cell>\n<code language=julia-1.0>\nsort_numbers(\"\
    three one five\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ string as input and returns a string with all the words in the string sorted\
    \ alphabetically.\nThe function should ignore punctuation and capitalization.\n\
    The function should ignore numbers and spaces.\nThe function should ignore words\
    \ that are only one character long.\nThe function should ignore words that are\
    \ only one character long.\nThe function should ignore words that are only one\
    \ character long.\nThe function should ignore words that are only one character\
    \ long.\nThe function should ignore words that are only one character long.\n\
    The function should ignore words that are only one character long.\nThe function\
    \ should ignore words that are only one character long.\nThe function should ignore\
    \ words that are only one character long.\nThe function should ignore words that\
    \ are only one character long.\nThe function should ignore words that are only\
    \ one character long.\nThe function should ignore words that are only one character\
    \ long.\nThe function should ignore words that are only one character long.\n\
    The function should ignore words that are only one character long.\nThe function\
    \ should ignore words that are only one character long.\nThe function should ignore\
    \ words that are only one character long.\nThe function should ignore words that\
    \ are only one character long.\nThe function should ignore words that are only\
    \ one character long.\nThe function should ignore words that are only one character\
    \ long.\nThe function should ignore words that are only one character long.\n\
    The function should ignore words that are only one character long.\nThe function\
    \ should ignore words that are only one character long.\nThe function should ignore\
    \ words that are only one character long.\nThe function should ignore words that\
    \ are only one character long.\nThe function should ignore words that are only\
    \ one character long.\nThe function should ignore words that are only one character\
    \ long.\nThe function should ignore words that are only one character long.\n\
    The function should ignore words that are only one character long.\nThe function\
    \ should ignore words that are only one character long.\nThe function should ignore\
    \ words that are only one character long.\nThe function should ignore words that\
    \ are only one character long.\nThe function should ignore words that are only\
    \ one character long.\nThe function should ignore words that are only one character\
    \ long.\nThe function should ignore words that are only one character long.\n\
    The function should ignore words that are only one character long.\nThe function\
    \ should ignore words that are only one character long.\nThe function should ignore\
    \ words that are only one character long.\nThe function should ignore words that\
    \ are only one character long.\nThe function should ignore words that are only\
    \ one character long.\nThe function should ignore words that are only one character\
    \ long.", "    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers =\
    \ numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n", "    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    return numbers.join(\" \")\nend\n</cell>\n<code\
    \ language=julia-1.0>\nsort_numbers(\"one two three four five six seven eight\
    \ nine\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string as\
    \ input and returns the string with all numbers in reverse order.\nFor example,\
    \ sort_numbers(\"one two three four five six seven eight nine\") should return\
    \ \"nine eight seven six five four three two one\".\nThe function should ignore\
    \ non-numeric characters and return an empty string if there are no numbers.\n\
    >>> sort_numbers(\"one two three four five six seven eight nine\")\n\"nine eight\
    \ seven six five four three two one\"\n>>> sort_numbers(\"one two three four five\
    \ six seven eight nine\")\n\"\"\n>>> sort_numbers(\"one two three four five six\
    \ seven eight nine\")\n\"\"\n>>> sort_numbers(\"one two three four five six seven\
    \ eight nine\")\n\"\"\n>>> sort_numbers(\"one two three four five six seven eight\
    \ nine\")\n\"\"\n>>> sort_numbers(\"one two three four five six seven eight nine\"\
    )\n\"\"\n>>> sort_numbers(\"one two three four five six seven eight nine\")\n\"\
    \"\n>>> sort_numbers(\"one two three four five six seven eight nine\")\n\"\"\n\
    >>> sort_numbers(\"one two three four five six seven eight nine\")\n\"\"\n>>>\
    \ sort_numbers(\"one two three four five six seven eight nine\")\n\"\"\n>>> sort_numbers(\"\
    one two three four five six seven eight nine\")\n\"\"\n>>> sort_numbers(\"one\
    \ two three four five six seven eight nine\")\n\"\"\n>>> sort_numbers(\"one two\
    \ three four five six seven eight nine\")\n\"\"\n>>> sort_numbers(\"one two three\
    \ four five six seven eight nine\")\n\"\"\n>>> sort_numbers(\"one two three four\
    \ five six seven eight nine\")\n\"\"\n>>> sort_numbers(\"one two three four five\
    \ six seven eight nine\")\n\"\"\n>>> sort_numbers(\"one two three four five six\
    \ seven eight nine\")\n", "    numbers = numbers.split(\" \")\n    numbers.sort()\n\
    \    return \" \".join(numbers)\nend\n</cell>\n<code language=julia-1.5>", " \
    \   numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n", "    numbers = numbers.split(\" \")\n    numbers.sort!\n\
    \    return numbers.join(\" \")\nend\n</cell>\n<code language=julia-1.4>\nsort_numbers(\"\
    three one five\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ string as input and returns the string with all the words capitalized. \nFor\
    \ example, the input \"The quick brown fox jumps over the lazy dog\" should return\
    \ the string \"The Quick Brown Fox Jumps Over The Lazy Dog\"\nHint: Use split()\
    \ to split the string into an array of words, and capitalize() to capitalize the\
    \ first letter of each word. \nHint: Use join() to join the array of words back\
    \ into a string.", "    numbers = numbers.split(\" \")\n    numbers.sort!\n  \
    \  return numbers.join(\" \")\nend\n</cell>\n<code language=julia-1.0>", "   \
    \ numbers = numbers.split(\" \")\n    numbers.sort!\n    return \" \".join(numbers)\n\
    end\n</cell>\n<code language=julia-1.5>", "    \"\"\"\n    Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"", "    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsort_numbers(\"one two three four five six seven eight\
    \ nine\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string and\
    \ returns the string with all non-alphabetic characters removed.\ne.g. \"hello,\
    \ world!\" -> \"helloworld\"", "    numbers = numbers.split(\" \")\n    numbers.sort!\n\
    \    return numbers.join(\" \")\nend\n</cell>\n<code language=julia-1.5>\nsort_numbers(\"\
    three one five\")\n</cell>\n<text>\nExercise\nWrite a function that takes a string\
    \ as input and returns the string with all numbers in descending order.\nFor example,\
    \ sort_numbers(\"three one five\") should return \"five one three\".", "    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n", "    numbers = numbers.split(\" \")\n    numbers.sort()\n\
    \    return \" \".join(numbers)\nend\n</cell>\n<code language=julia-1.1>\nsort_numbers(\"\
    three one five\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ string and returns the string with all numbers in descending order.\nFor example,\
    \ sort_numbers(\"three one five\") should return \"five one three\".\nHint: Use\
    \ a regular expression to find all the numbers in the string.", "    numbers =\
    \ numbers.split(\" \")\n    numbers = sort(numbers)\n    return join(numbers,\
    \ \" \")\nend\n</cell>\n<code language=julia-1.0>\nsort_numbers(\"one two three\
    \ four\")\n</cell>\n<text>\nExercise: Write a function that takes a string and\
    \ returns the string with all the numbers in reverse order. For example, sort_numbers(\"\
    one two three four\") should return \"four three two one\".", "    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    numbers = join(numbers, \" \")\n    return numbers\n\
    </code>\n<|/ a tags=sorting,string,julia |>\n<| c |>\nThis doesn't work for me.\
    \ `sort_numbers(\"one two three\")` returns `\"one two three\"`\n<|/ c |>\n<|\
    \ c |>\nIt works for me on Julia 0.6.2\n<|/ c |>\n<| c |>\nI guess I should have\
    \ mentioned that I'm on 0.6.2\n<|/ c |>\n<| c |>\nI guess I should have mentioned\
    \ that I'm on 0.6.2\n<|/ c |>\n<| c |>\nI guess I should have mentioned that I'm\
    \ on 0.6.2\n<|/ c |>\n<| a dscore=2 |>\nThe other answers here are great, but\
    \ I thought I'd add my own solution, since I find it more elegant and easier to\
    \ understand.\n<code>", "    numbers = numbers.split(\" \")\n    numbers.sort\n\
    \    return \" \".join(numbers)\nend\n</cell>\n<code language=julia-1.4>\nsort_numbers(\"\
    one two three four five six seven eight nine\")\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a string as input and returns the string with all\
    \ numbers in it sorted from smallest to largest.\nFor example, sort_numbers(\"\
    one two three four five six seven eight nine\") returns \"one two three four five\
    \ six seven eight nine\".", "    numbers = numbers.split(\" \")\n    numbers.sort()\n\
    \    return \" \".join(numbers)\nend\n</cell>\n<code language=julia-1.5>\nsort_numbers(\"\
    one two three four\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns a string with all the characters in lower case. \n>>> capitalize(\"\
    hello world\")\n\"Hello World\"\n>>> capitalize(\"hello\")\n\"Hello\"\n>>> capitalize(\"\
    hello, world\")\n\"Hello, World\"\n>>> capitalize(\"hello, world!\")\n\"Hello,\
    \ World!\"\n>>> capitalize(\"hello, world!\", \" \")\n\"Hello, World!\"\n>>> capitalize(\"\
    hello, world!\", \" -\")\n\"Hello-World!\"\n>>> capitalize(\"hello, world!\",\
    \ \" -\")\n\"Hello-World!\"\n>>> capitalize(\"hello, world!\", \" -\")\n\"Hello-World!\"\
    \n>>> capitalize(\"hello, world!\", \" -\")\n\"Hello-World!\"\n>>> capitalize(\"\
    hello, world!\", \" -\")\n\"Hello-World!\"\n>>> capitalize(\"hello, world!\",\
    \ \" -\")\n\"Hello-World!\"\n>>> capitalize(\"hello, world!\", \" -\")\n\"Hello-World!\"\
    \n>>> capitalize(\"hello, world!\", \" -\")\n\"Hello-World!\"\n>>> capitalize(\"\
    hello, world!\", \" -\")\n\"Hello-World!\"\n>>> capitalize(\"hello, world!\",\
    \ \" -\")\n\"Hello-World!\"\n>>> capitalize(\"hello, world!\", \" -\")\n\"Hello-World!\"\
    \n>>> capitalize(\"hello, world!\", \" -\")\n\"Hello-World!\"\n>>> capitalize(\"\
    hello, world!\", \" -\")\n\"Hello-World!\"\n>>> capitalize(\"hello, world!\",\
    \ \" -\")\n\"Hello-World!\"\n>>> capitalize(\"hello, world!\", \" -\")\n\"Hello-World!\"\
    \n>>> capitalize(\"hello, world!\", \" -\")\n\"Hello-World!\"\n>>> capitalize(\"\
    hello, world!\", \" -\")\n\"Hello-World!\"\n>>> capitalize(\"hello, world!\",\
    \ \" -\")\n\"Hello-World!\"\n>>> capitalize(\"hello, world!\", \" -\")\n\"Hello-World!\"\
    \n>>> capitalize(\"hello, world!\", \" -\")\n\"Hello-World!\"\n>>> capitalize(\"\
    hello, world!\", \" -\")\n\"Hello-World!\"\n>>> capitalize(\"hello, world!\",\
    \ \" -\")\n\"Hello-World!\"\n>>> capitalize(\"hello, world!\", \" -\")\n\"Hello",
  "    numbers = numbers.split(\" \")\n    numbers = sort(numbers)\n    numbers =\
    \ join(numbers, \" \")\n    return numbers\n</code>\n<|/ a tags=sorting,haskell\
    \ |>\n<| c |>\nThanks for your answer! I understand that my code is not the most\
    \ efficient way to solve this problem, but I'm just trying to learn Haskell and\
    \ I wanted to see how I could solve this problem using only basic functions. I\
    \ appreciate your help!\n<|/ c |>\n<| c |>\nI added a more efficient solution\
    \ that uses only basic functions. I hope it helps.\n<|/ c |>\n<| a dscore=0 |>\n\
    <code>\nimport Data.List", "    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n", "    numbers = numbers[2:]\n\
    \    numbers = numbers.split(\" \")\n    numbers = sort(numbers)\n    numbers\
    \ = join(numbers, \" \")\n    return numbers\n</code>\n<|/ a tags=sorting,string,julia\
    \ |>\n<| c |>\nThis doesn't seem to work for me. `sort_numbers(\"one two three\"\
    )` returns `[\"one\", \"two\", \"three\"]`\n<|/ c |>\n<| c |>\nI fixed the bug\
    \ in the original code. Sorry about that. Now it works.\n<|/ c |>\n<| a dscore=2\
    \ |>\nI wrote a package for this: https://github.com/jamiewilson/sorting.jl\n\
    <code>\nusing Sorting\nsort(\"one two three\")\n</code>\n<|/ a tags=sorting,string,julia\
    \ |>\n<| a dscore=2 |>\nI wrote a package for this: https://github.com/jamiewilson/sorting.jl\n\
    <code>\nusing Sorting\nsort(\"one two three\")\n</code>\n<|/ a tags=sorting,string,julia\
    \ |>\n<| a tags=sorting,string,julia |>\n<code>", "    numbers = numbers.split(\"\
    \ \")\n    numbers.sort\n    return \" \".join(numbers)\nend\n</cell>\n<code language=julia-1.5>",
  "    numbers = numbers.split(\" \")\n    numbers.sort!\n    numbers.join(\" \")\n\
    end\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>", "    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    return join(numbers, \" \")\nend\n</code>\n<|/ a\
    \ dscore=1 |>\n<| a dscore=0 |>\n<code>", "    \"\"\"\n    Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"", "    numbers = numbers.split(\"\
    \ \")\n    numbers.sort\n    return \" \".join(numbers)\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=sorting,haskell |>\n<code>\nimport Data.List", "    numbers =\
    \ numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n", "    numbers = numbers[2:]\n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    numbers = \" \".join(numbers)\n    return numbers\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=sorting,haskell,string |>\n<code>\nimport\
    \ Data.List", "    numbers = numbers.split(\" \")\n    numbers.sort()\n    return\
    \ \" \".join(numbers)\nend\n</cell>\n<code language=julia-1.3>\nsort_numbers(\"\
    three one five\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes a\
    \ string and returns a string with all the words capitalized.\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick bro", "    numbers = numbers.split(\" \")\n    numbers.sort\n    numbers\
    \ = join(numbers, \" \")\n    return numbers\nend\n</code>\n<|/ a dscore=2 |>\n\
    <| c |>\nThis doesn't work if you have a string like \"one two three\"\n<|/ c\
    \ |>\n<| c |>\nIt does work if you have a string like \"one two three\".  It doesn't\
    \ work if you have a string like \"one two three four\".\n<|/ c |>\n<| c |>\n\
    It does work if you have a string like \"one two three four\".  It doesn't work\
    \ if you have a string like \"one two three four\".\n<|/ c |>\n<| c |>\nIt does\
    \ work if you have a string like \"one two three four\".  It doesn't work if you\
    \ have a string like \"one two three four\".\n<|/ c |>\n<| c |>\nIt does work\
    \ if you have a string like \"one two three four\".  It doesn't work if you have\
    \ a string like \"one two three four\".\n<|/ c |>\n<| a tags=julia |>\n<code>",
  "    numbers = numbers.split(\" \")\n    numbers.sort!\n    return numbers.join(\"\
    \ \")\nend\n</cell>\n<code language=julia-1.0>\nsort_numbers(\"one two three four\"\
    )\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the string with all vowels removed\n>>> remove_vowels(\"The quick brown fox\
    \ jumps over the lazy dog\")\n'Th quick brwn fx jumps ovr thy lzy'\n>>> remove_vowels(\"\
    The quick brown fox jumps over the lazy dog\")\n'Th quick brwn fx jumps ovr thy\
    \ lzy'\n>>> remove_vowels(\"The quick brown fox jumps over the lazy dog\")\n'Th\
    \ quick brwn fx jumps ovr thy lzy'\n>>> remove_vowels(\"The quick brown fox jumps\
    \ over the lazy dog\")\n'Th quick brwn fx jumps ovr thy lzy'\n>>> remove_vowels(\"\
    The quick brown fox jumps over the lazy dog\")\n'Th quick brwn fx jumps ovr thy\
    \ lzy'\n>>> remove_vowels(\"The quick brown fox jumps over the lazy dog\")\n'Th\
    \ quick brwn fx jumps ovr thy lzy'\n>>> remove_vowels(\"The quick brown fox jumps\
    \ over the lazy dog\")\n'Th quick brwn fx jumps ovr thy lzy'\n>>> remove_vowels(\"\
    The quick brown fox jumps over the lazy dog\")\n'Th quick brwn fx jumps ovr thy\
    \ lzy'\n>>> remove_vowels(\"The quick brown fox jumps over the lazy dog\")\n'Th\
    \ quick brwn fx jumps ovr thy lzy'\n>>> remove_vowels(\"The quick brown fox jumps\
    \ over the lazy dog\")\n'Th quick brwn fx jumps ovr thy lzy'\n>>> remove_vowels(\"\
    The quick brown fox jumps over the lazy dog\")\n'Th quick brwn fx jumps ovr thy\
    \ lzy'\n>>> remove_vowels(\"The quick brown fox jumps over the lazy dog\")\n'Th\
    \ quick brwn fx jumps ovr thy lzy'\n>>> remove_vowels(\"The quick brown fox jumps\
    \ over the lazy dog\")\n'Th quick brwn fx jumps ovr thy l", "    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    return numbers.join(\" \")\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsort_numbers(\"one two three four five six seven eight\
    \ nine\")\n</cell>\n<text>\nExercise: Write a function that takes a string and\
    \ returns the string with all the letters capitalized.\n    Valid strings are\
    \ 'hello', 'HELLO', 'HeLLo', 'hELLO', 'HeLlO', 'HellO', 'hello', 'HELLO', 'HeLLo',\
    \ 'hELLO', 'HeLlO', 'HellO'\n    >>> capitalize_letters(\"hello\")\n    'Hello'\n\
    \    >>> capitalize_letters(\"HELLO\")\n    'Hello'\n    >>> capitalize_letters(\"\
    HeLLo\")\n    'Hello'\n    >>> capitalize_letters(\"hELLO\")\n    'Hello'\n  \
    \  >>> capitalize_letters(\"HeLlO\")\n    'Hello'\n    >>> capitalize_letters(\"\
    HellO\")\n    'Hello'\n    >>> capitalize_letters(\"HeLlO\")\n    'Hello'\n  \
    \  >>> capitalize_letters(\"HellO\")\n    'Hello'\n    >>> capitalize_letters(\"\
    HellO\")\n    'Hello'\n    >>> capitalize_letters(\"HellO\")\n    'Hello'\n  \
    \  >>> capitalize_letters(\"HellO\")\n    'Hello'\n    >>> capitalize_letters(\"\
    HellO\")\n    'Hello'\n    >>> capitalize_letters(\"HellO\")\n    'Hello'\n  \
    \  >>> capitalize_letters(\"HellO\")\n    'Hello'\n    >>> capitalize_letters(\"\
    HellO\")\n    'Hello'\n    >>> capitalize_letters(\"HellO\")\n    'Hello'\n  \
    \  >>> capitalize_letters(\"HellO\")\n    'Hello'\n    >>> capitalize_letters(\"\
    HellO\")\n    'Hello'\n    >>> capitalize_letters(\"HellO\")\n    'Hello'\n  \
    \  >>> capitalize_letters(\"HellO\")\n    'Hello'\n    >>> capitalize_letters(\"\
    HellO\")\n    'Hello'\n    >>> capitalize_letters(\"HellO\")\n    'Hello'\n  \
    \  >>> capitalize_letters(\"HellO\")\n    'Hello'\n    >>> capitalize_letters(\"\
    HellO\")\n    'Hello'\n    >>> capitalize_letters(\"HellO\")\n    'Hello'\n  \
    \  >>> capitalize_letters(\"HellO\")\n    'Hello'\n    >>> capitalize_letters(\"\
    HellO\")\n    'Hello'\n    >>> capitalize_letters(\"HellO\")\n    'Hello'\n",
  "    numbers = split(numbers, \" \")\n    numbers = sort(numbers)\n    return join(numbers,\
    \ \" \")\nend\n</code>\n<|/ a tags=julia,sorting,string |>\n<| c |>\nThis doesn't\
    \ seem to work. `sort` doesn't seem to work on strings. `sort!` doesn't seem to\
    \ work either. `sort` seems to work only on arrays. `sort!` seems to work only\
    \ on arrays. `sort` seems to work only on arrays. `sort!` seems to work only on\
    \ arrays. `sort` seems to work only on arrays. `sort!` seems to work only on arrays.\
    \ `sort` seems to work only on arrays. `sort!` seems to work only on arrays. `sort`\
    \ seems to work only on arrays. `sort!` seems to work only on arrays. `sort` seems\
    \ to work only on arrays. `sort!` seems to work only on arrays. `sort` seems to\
    \ work only on arrays. `sort!` seems to work only on arrays. `sort` seems to work\
    \ only on arrays. `sort!` seems to work only on arrays. `sort` seems to work only\
    \ on arrays. `sort!` seems to work only on arrays. `sort` seems to work only on\
    \ arrays. `sort!` seems to work only on arrays. `sort` seems to work only on arrays.\
    \ `sort!` seems to work only on arrays. `sort` seems to work only on arrays. `sort!`\
    \ seems to work only on arrays. `sort` seems to work only on arrays. `sort!` seems\
    \ to work only on arrays. `sort` seems to work only on arrays. `sort!` seems to\
    \ work only on arrays. `sort` seems to work only on arrays. `sort!` seems to work\
    \ only on arrays. `sort` seems to work only on arrays. `sort!` seems to work only\
    \ on arrays. `sort` seems to work only on arrays. `sort!` seems to work only on\
    \ arrays. `sort` seems to work only on arrays. `sort!` seems to work only on arrays.\
    \ `sort` seems to work only on arrays. `sort!` seems to work only on arrays. `sort`\
    \ seems to work only on arrays. `sort!` seems to work only on arrays. `sort` seems\
    \ to work only on arrays. `sort!` seems to work only on arrays. `sort` seems to\
    \ work only on arrays. `sort!` seems to work only on arrays. `sort` seems to work\
    \ only on arrays. `sort!` seems to work only on arrays. `sort` seems to work only\
    \ on arrays. `sort", "    numbers = numbers.split(\" \")\n    numbers.sort\n \
    \   return \" \".join(numbers)\nend\n</cell>\n<code language=julia-1.0>\nsort_numbers(\"\
    three one five\")\n</cell>\n<text>\nExercise: Write a function that takes a string\
    \ and returns a string with the first letter of each word capitalized. For example,\
    \ sort_caps(\"the quick brown fox jumped over the lazy dog\") should return \"\
    The Quick Brown Fox Jumped Over The Lazy Dog\"", "    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    return numbers.join(\" \")\nend\n</code>\n<|/ a\
    \ tags=julia,sorting,string |>\n<| a dscore=2 |>\n<code>", "    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    return numbers.join(\" \")\nend\n</cell>\n<code\
    \ language=julia-1.0>\nsort_numbers(\"one two three four five six seven eight\
    \ nine\")\n</cell>\n<text>\nExercise\nWrite a function that takes a string and\
    \ returns the string with all numbers in descending order\ne.g. \"one two three\
    \ four five six seven eight nine\" -> \"nine eight seven six five four three two\
    \ one\"", "    numbers = numbers.split(\" \")\n    numbers.sort()\n    return\
    \ \" \".join(numbers)\nend\n</cell>\n<code language=julia-1.3>\nsort_numbers(\"\
    three one five\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ string as input and returns the string with all numbers in reverse order.\n\
    For example, the input \"one two three four five six seven eight nine\" should\
    \ return the string \"nine eight six five four three two one\".\nWrite a test\
    \ for this function.\nHint: Use a regular expression to find all numbers in the\
    \ string.", "    numbers = numbers.split(\" \")\n    numbers.sort!\n    return\
    \ numbers.join(\" \")\nend\n</cell>\n<code language=julia-1.5>\nsort_numbers(\"\
    one two three\")\n</cell>\n<text>\nExercise: Write a function that takes a string\
    \ and returns a string with all the words capitalized.\n    For example, \"The\
    \ quick brown fox jumps over the lazy dog\" becomes \"The Quick Brown Fox Jumps\
    \ Over The Lazy Dog\"\n    Make sure you handle words that are less than 3 characters\
    \ long.\n    Use a regular expression to capitalize each word in the string.\n\
    \    Make sure you handle words that are more than 3 characters long.\n    Use\
    \ a regular expression to capitalize each word in the string.\n    Make sure you\
    \ handle words that are more than 3 characters long.\n    Use a regular expression\
    \ to capitalize each word in the string.\n    Make sure you handle words that\
    \ are more than 3 characters long.\n    Use a regular expression to capitalize\
    \ each word in the string.\n    Make sure you handle words that are more than\
    \ 3 characters long.\n    Use a regular expression to capitalize each word in\
    \ the string.\n    Make sure you handle words that are more than 3 characters\
    \ long.\n    Use a regular expression to capitalize each word in the string.\n\
    \    Make sure you handle words that are more than 3 characters long.\n    Use\
    \ a regular expression to capitalize each word in the string.\n    Make sure you\
    \ handle words that are more than 3 characters long.\n    Use a regular expression\
    \ to capitalize each word in the string.\n    Make sure you handle words that\
    \ are more than 3 characters long.\n    Use a regular expression to capitalize\
    \ each word in the string.\n    Make sure you handle words that are more than\
    \ 3 characters long.\n    Use a regular expression to capitalize each word in\
    \ the string.\n    Make sure you handle words that are more than 3 characters\
    \ long.\n    Use a regular expression to capitalize each word in the string.\n\
    \    Make sure you handle words that are more than 3 characters long.\n    Use\
    \ a regular expression to capitalize each word in the string.\n    Make sure you\
    \ handle words that are more than 3 characters long.\n    Use a regular expression\
    \ to capitalize each word in the string.\n    Make sure you handle words that\
    \ are more than 3 characters long.\n    Use a regular expression to capitalize\
    \ each word in the string.\n    Make sure you handle words that are more than\
    \ 3 characters long.\n    Use a regular expression to capitalize each word in\
    \ the string.\n    Make sure you handle words that are more than 3 characters\
    \ long.\n    Use a regular expression to capitalize each word in the string.\n\
    \    Make sure you handle words that are more than 3 characters long.\n    Use\
    \ a regular expression to capitalize each word in the string.\n    Make sure you\
    \ handle words that are more than 3 characters long", "    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    numbers = numbers.join(\" \")\n    return numbers\n\
    end\n</cell>\n<code language=julia-1.0>", "    \"\"\"\n    Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"", "    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\n</code>\n<|/ a |>\n\
    <| a |>\n<code>", "    \"\"\"\n    Input is a space-delimited string of numberals\
    \ from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three',\
    \ 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with\
    \ numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n\
    \    'one three five'\n    \"\"\"", "    numbers = numbers.split(' ')\n    numbers.sort()\n\
    \    return ' '.join(numbers)\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't\
    \ answer the question. OP wants to sort numbers in string format. Your answer\
    \ doesn't do that.\n<|/ c |>\n<| c |>\nI believe this does answer the question.\
    \ OP wants to sort numbers in string format. Your answer doesn't do that.\n<|/\
    \ c |>\n<| c |>\nThis doesn't answer the question. OP wants to sort numbers in\
    \ string format. Your answer doesn't do that.\n<|/ c |>\n<| c |>\nThis doesn't\
    \ answer the question. OP wants to sort numbers in string format. Your answer\
    \ doesn't do that.\n<|/ c |>\n<| c |>\nThis doesn't answer the question. OP wants\
    \ to sort numbers in string format. Your answer doesn't do that.\n<|/ c |>\n<|\
    \ a dscore=0 |>\n<code>\ndef sort_numbers(numbers):\n    numbers = numbers.split('\
    \ ')\n    numbers.sort()\n    return ' '.join(numbers)\n</code>\n<|/ a tags=sorting,string,python\
    \ |>\n<| c |>\nThis doesn't answer the question. OP wants to sort numbers in string\
    \ format. Your answer doesn't do that.\n<|/ c |>\n<| a tags=sorting,string,python\
    \ |>\n<code>\ndef sort_numbers(numbers):\n    numbers = numbers.split(' ')\n \
    \   numbers.sort()\n    return ' '.join(numbers)\n</code>\n<|/ a dscore=0 |>\n\
    <| c |>\nThis doesn't answer the question. OP wants to sort numbers in string\
    \ format. Your answer doesn't do that.\n<|/ c |>\n<| a tags=sorting,string,python\
    \ |>\n<code>\ndef sort_numbers(numbers):\n    numbers = numbers.split(' ')\n \
    \   numbers.sort()\n    return ' '.join(numbers)\n</code>\n<|/ a dscore=0 |>\n\
    <| c |>\nThis doesn't answer the question. OP wants to sort numbers in string\
    \ format. Your answer doesn't do that.\n<|/ c |>\n<| a tags=sorting,string,python\
    \ |>\n<code>\ndef sort_numbers(numbers):\n    numbers = numbers.split(' ')\n \
    \   numbers.sort()\n    return ' '.join(numbers)\n</code>\n<|/ a dscore=0 |>\n\
    <| c |>\nThis doesn't answer the question. OP wants to sort numbers in string\
    \ format. Your answer doesn't do that.\n<|/ c |>\n<| a tags=sorting,string,python\
    \ |>\n<code>\ndef sort_numbers(", "    numbers = numbers.split(\" \")\n    numbers.sort!\n\
    \    return \" \".join(numbers)\nend\n</cell>\n<code language=julia-1.0>\nsort_numbers(\"\
    three one five\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes a\
    \ string and returns the string with all numbers reversed.\n>>> reverse(\"one\
    \ two three four five six seven eight nine\")\n\"nine eight six five four three\
    \ two one \"\n>>> reverse(\"one two three four five six seven eight nine\")\n\"\
    nine eight six five four three two one \"\n>>> reverse(\"one two three four five\
    \ six seven eight nine\")\n\"nine eight six five four three two one \"\n>>> reverse(\"\
    one two three four five six seven eight nine\")\n\"nine eight six five four three\
    \ two one \"\n>>> reverse(\"one two three four five six seven eight nine\")\n\"\
    nine eight six five four three two one \"\n>>> reverse(\"one two three four five\
    \ six seven eight nine\")\n\"nine eight six five four three two one \"\n>>> reverse(\"\
    one two three four five six seven eight nine\")\n\"nine eight six five four three\
    \ two one \"\n>>> reverse(\"one two three four five six seven eight nine\")\n\"\
    nine eight six five four three two one \"\n>>> reverse(\"one two three four five\
    \ six seven eight nine\")\n\"nine eight six five four three two one \"\n>>> reverse(\"\
    one two three four five six seven eight nine\")\n\"nine eight six five four three\
    \ two one \"\n>>> reverse(\"one two three four five six seven eight nine\")\n\"\
    nine eight six five four three two one \"\n>>> reverse(\"one two three four five\
    \ six seven eight nine\")\n\"nine eight six five four three two one \"\n>>> reverse(\"\
    one two three four five six seven eight nine\")\n\"nine eight six five four three\
    \ two one \"\n>>> reverse(\"one two three four five si", "    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    numbers = \" \".join(numbers)\n    return numbers\n\
    </code>\n<|/ a tags=sorting,string,haskell |>\n<| a tags=sorting,string,haskell\
    \ |>\n<code>\nimport Data.List", "    numbers = numbers.split(\" \")\n    numbers.sort\n\
    \    return join(numbers, \" \")\nend\n</cell>\n<code language=julia-1.4>\nsort_numbers(\"\
    three one five\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ string as input and returns a string with all the words capitalized. \nThe input\
    \ string may contain any number of words and spaces.\nThe output string should\
    \ not contain any spaces.\nThe output string should not contain any punctuation\
    \ marks.\nThe output string should not contain any numbers.\nThe output string\
    \ should not contain any special characters.\nThe output string should not contain\
    \ any words that are longer than two characters.\nThe output string should not\
    \ contain any words that are shorter than three characters.\nThe output string\
    \ should not contain any words that are longer than five characters.\nThe output\
    \ string should not contain any words that are shorter than three characters.\n\
    The output string should not contain any words that are longer than ten characters.\n\
    The output string should not contain any words that are shorter than five characters.\n\
    The output string should not contain any words that are shorter than ten characters.\n\
    The output string should not contain any words that are longer than twenty characters.\n\
    The output string should not contain any words that are shorter than twenty characters.\n\
    The output string should not contain any words that are longer than twenty characters.\n\
    The output string should not contain any words that are shorter than twenty characters.\n\
    The output string should not contain any words that are longer than twenty characters.\n\
    The output string should not contain any words that are shorter than twenty characters.\n\
    The output string should not contain any words that are longer than twenty characters.\n\
    The output string should not contain any words that are shorter than twenty characters.\n\
    The output string should not contain any words that are longer than twenty characters.\n\
    The output string should not contain any words that are shorter than twenty characters.\n\
    The output string should not contain any words that are longer than twenty characters.\n\
    The output string should not contain any words that are shorter than twenty characters.\n\
    The output string should not contain any words that are longer than twenty characters.\n\
    The output string should not contain any words that are shorter than twenty characters.\n\
    The output string should not contain any words that are longer than twenty characters.\n\
    The output string should not contain any words that are shorter than twenty characters.\n\
    The output string should not contain any words that are longer than twenty characters.\n\
    The output string should not contain any words that are shorter than twenty characters.\n\
    The output string should not contain any words that are longer than twenty characters.\n\
    The output string should not contain any words that are shorter than twenty characters.\n\
    The output string should not contain any ", "    \"\"\"\n    Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"", "    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\nend\n</cell>\n<code\
    \ language=julia-1.0>\nsort_numbers(\"one two three four five six seven eight\
    \ nine\")\n</cell>\n<text>\nExercise: Write a function that takes a string and\
    \ returns a string with all the words in lowercase.\n    >>> sort_words(\"one\
    \ two three four five six seven eight nine\")\n    'one two three four five six\
    \ seven eight nine'\n    \"\"\"", "    numbers = numbers.split(' ')\n    numbers\
    \ = sort(numbers)\n    return join(numbers, ' ')\nend\n</cell>\n<code language=julia-1.5>",
  "    numbers = split(numbers, \" \")\n    numbers.sort!\n    return join(numbers,\
    \ \" \")\nend\n</cell>\n<code language=julia-1.0>\nsort_numbers(\"one two three\
    \ four five six seven eight nine\")\n</cell>\n<text>\nExercise: Write a function\
    \ that takes a string and returns a string with all the characters in lower case.\
    \ \n    For example, sort_characters(\"one two three four five six seven eight\
    \ nine\") should return \"one two three four five six seven eight nine\".\n  \
    \  Use a for loop to iterate through the characters in the string.\n    Use a\
    \ regular expression to replace all non-alphanumeric characters with an empty\
    \ string.\n    Use a regular expression to replace all non-alphanumeric characters\
    \ with a single space.\n    Use a regular expression to replace all non-alphanumeric\
    \ characters with a single space.\n    Use a regular expression to replace all\
    \ non-alphanumeric characters with a single space.\n    Use a regular expression\
    \ to replace all non-alphanumeric characters with a single space.\n    Use a regular\
    \ expression to replace all non-alphanumeric characters with a single space.\n\
    \    Use a regular expression to replace all non-alphanumeric characters with\
    \ a single space.\n    Use a regular expression to replace all non-alphanumeric\
    \ characters with a single space.\n    Use a regular expression to replace all\
    \ non-alphanumeric characters with a single space.\n    Use a regular expression\
    \ to replace all non-alphanumeric characters with a single space.\n    Use a regular\
    \ expression to replace all non-alphanumeric characters with a single space.\n\
    \    Use a regular expression to replace all non-alphanumeric characters with\
    \ a single space.\n    Use a regular expression to replace all non-alphanumeric\
    \ characters with a single space.\n    Use a regular expression to replace all\
    \ non-alphanumeric characters with a single space.\n    Use a regular expression\
    \ to replace all non-alphanumeric characters with a single space.\n    Use a regular\
    \ expression to replace all non-alphanumeric characters with a single space.\n\
    \    Use a regular expression to replace all non-alphanumeric characters with\
    \ a single space.\n    Use a regular expression to replace all non-alphanumeric\
    \ characters with a single space.\n    Use a regular expression to replace all\
    \ non-alphanumeric characters with a single space.\n    Use a regular expression\
    \ to replace all non-alphanumeric characters with a single space.\n    Use a regular\
    \ expression to replace all non-alphanumeric characters with a single space.\n\
    \    Use a regular expression to replace all non-alphanumeric characters with\
    \ a single space.\n    Use a regular expression to replace all non-alphanumeric\
    \ characters with a single space.\n    Use a regular expression to replace all\
    \ non-alphanumeric characters with a single space.\n    Use ", "    numbers =\
    \ numbers.split(\" \")\n    numbers.sort()\n    return \" \".join(numbers)\nend\n\
    </cell>\n<code language=julia-1.0>", "    numbers = numbers.split(' ')\n    numbers.sort!\n\
    \    numbers.join(' ')\nend\n</cell>\n<code language=julia-1.5>\nsort_numbers('three\
    \ one five')\n</cell>\n<text>\nExercise: Write a function that takes a string\
    \ and returns the string with all lowercase letters replaced with uppercase letters.\n\
    \    Valid choices are 'hello' and 'HELLO'\n    >>> replace_lowercase('hello')\n\
    \    'HELLO'\n    >>> replace_lowercase('HELLO')\n    'HELLO'\n    \"\"\"", " \
    \   numbers = numbers.split(\" \")\n    numbers.sort!\n    return numbers.join(\"\
    \ \")\nend\n</cell>\n<code language=julia-1.0>\nsort_numbers(\"three one five\"\
    )\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the string with all the words capitalized.\n>>> capitalize_words(\"The quick\
    \ brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over The Lazy\
    \ Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy dog\"\
    )\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"The\
    \ quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick ", "    numbers = numbers.split(\" \")\n    numbers.sort!\n    return\
    \ numbers.join(\" \")\nend\n</cell>\n<code language=julia-1.0>\nsort_numbers(\"\
    three one five\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes a\
    \ string and returns a string with all the characters in lower case. \n>>> capitalize_string(\"\
    hello world\")\n\"Hello World\"\n>>> capitalize_string(\"hello\")\n\"Hello\"\n\
    >>> capitalize_string(\"hello, world\")\n\"Hello, World\"\n>>> capitalize_string(\"\
    hello, world!\")\n\"Hello, World!\"\n>>> capitalize_string(\"hello, world! \"\
    )\n\"Hello, World! \" \n>>> capitalize_string(\"hello, world! !\")\n\"Hello, World!\
    \ !\"\n>>> capitalize_string(\"hello, world! !?\")\n\"Hello, World! !\"\n>>> capitalize_string(\"\
    hello, world! !? \")\n\"Hello, World! !\"\n>>> capitalize_string(\"hello, world!\
    \ !? !\")\n\"Hello, World! !\"\n>>> capitalize_string(\"hello, world! !? !?\"\
    )\n\"Hello, World! !\"\n>>> capitalize_string(\"hello, world! !? !? \")\n\"Hello,\
    \ World! !\"\n>>> capitalize_string(\"hello, world! !? !? !\")\n\"Hello, World!\
    \ !\"\n>>> capitalize_string(\"hello, world! !? !? !?\")\n\"Hello, World! !\"\n\
    >>> capitalize_string(\"hello, world! !? !? !? \")\n\"Hello, World! !\"\n>>> capitalize_string(\"\
    hello, world! !? !? !? !\")\n\"Hello, World! !\"\n>>> capitalize_string(\"hello,\
    \ world! !? !? !? !?\")\n\"Hello, World! !\"\n>>> capitalize_string(\"hello, world!\
    \ !? !? !? !? \")\n\"Hello, World! !\"\n>>> capitalize_string(\"hello, world!\
    \ !? !? !? !? !\")\n\"Hello, World! !\"\n>>> capitalize_string(\"hello, world!\
    \ !? !? !? !? !?\")\n\"Hello, World! !\"\n>>> capitalize_string(\"hello, world!\
    \ !? !? !? !? !? \")\n\"Hello, World! !\"\n>>> capitalize_string(\"hello, world!\
    \ !? !? !? !? !? !\")\n\"Hello, World! !\"\n>>> capitalize_string(\"hello, world!\
    \ !? !? !? !? !? !?\")\n\"Hello, World! !\"\n>>> capitalize_string(\"hello, world!\
    \ !? !? !", "    numbers = numbers.split(\" \")\n    numbers.sort()\n    return\
    \ \" \".join(numbers)\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n\
    def sort_numbers(numbers):\n    numbers = numbers.split(\" \")\n    numbers.sort()\n\
    \    return \" \".join(numbers)\n</code>\n<|/ a tags=sorting,python |>\n<| c |>\n\
    While this code may answer the question, providing additional context regarding\
    \ why and/or how this code answers the question improves its long-term value.\n\
    <|/ c |>\n<| c |>\nWhile this code may answer the question, providing additional\
    \ context regarding why and/or how this code answers the question improves its\
    \ long-term value.\n<|/ c |>\n<| a dscore=0 |>\n<code>\ndef sort_numbers(numbers):\n\
    \    numbers = numbers.split(\" \")\n    numbers.sort()\n    return \" \".join(numbers)\n\
    </code>\n<|/ a tags=sorting,python |>\n<| a tags=sorting,python |>\n<code>\ndef\
    \ sort_numbers(numbers):\n    numbers = numbers.split(\" \")\n    numbers.sort()\n\
    \    return \" \".join(numbers)\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n\
    <code>\ndef sort_numbers(numbers):\n    numbers = numbers.split(\" \")\n    numbers.sort()\n\
    \    return \" \".join(numbers)\n</code>\n<|/ a tags=sorting,python |>\n<| a dscore=0\
    \ |>\n<code>\ndef sort_numbers(numbers):\n    numbers = numbers.split(\" \")\n\
    \    numbers.sort()\n    return \" \".join(numbers)\n</code>\n<|/ a tags=sorting,python\
    \ |>\n<| a dscore=0 |>\n<code>\ndef sort_numbers(numbers):\n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\n</code>\n<|/ a tags=sorting,python\
    \ |>\n<| a tags=sorting,python |>\n<code>\ndef sort_numbers(numbers):\n    numbers\
    \ = numbers.split(\" \")\n    numbers.sort()\n    return \" \".join(numbers)\n\
    </code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\ndef sort_numbers(numbers):\n\
    \    numbers = numbers.split(\" \")\n    numbers.sort()\n    return \" \".join(numbers)\n\
    </code>\n<|/ a tags=sorting,python |>\n<| a |>\n<code>\ndef sort_numbers(numbers):\n\
    \    numbers = numbers.split(\" \")\n    numbers.sort()\n    return \" \".join(numbers)\n\
    </code>\n<|/ a dscore=0 tags=sorting,python |>\n<| a |>\n<code>\ndef sort_numbers(numbers):\n\
    \    numbers = numbers.", "    numbers = numbers.split(\" \")\n    numbers.sort()\n\
    \    return \" \".join(numbers)\nend\n</cell>\n<code language=julia-1.0>\nsort_numbers(\"\
    one two three four five six seven eight nine\")\n</cell>\n<text>\nExercise: Write\
    \ a function that takes a string and returns a string with all the words capitalized.\n\
    \    For example, sort_words(\"the quick brown fox jumped over the lazy dog\"\
    ) should return the string \"The Quick Brown Fox Jumped Over The Lazy Dog\"\n\
    \    >>> sort_words(\"the quick brown fox jumped over the lazy dog\")\n    'The\
    \ Quick Brown Fox Jumped Over The Lazy Dog'\n    \"\"\"", "    numbers = numbers.split('\
    \ ')\n    numbers.sort()\n    return ' '.join(numbers)\nend\n</cell>\n<code language=julia-1.0>\n\
    sort_numbers('three one five')\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and returns the string with all lowercase letters replaced\
    \ by uppercase letters.\n>>> replace_letters('Hello World')\n'HELLO WORLD'\n>>>\
    \ replace_letters('Hello World!')\n'HELLO WORLD!'\n>>> replace_letters('Hello\
    \ World!!')\n'HELLO WORLD!!'\n>>> replace_letters('Hello World!!!')\n'HELLO WORLD!!!'\n\
    >>> replace_letters('Hello World!!!')\n'HELLO WORLD!!!'\n>>> replace_letters('Hello\
    \ World!!!')\n'HELLO WORLD!!!'\n>>> replace_letters('Hello World!!!')\n'HELLO\
    \ WORLD!!!'\n>>> replace_letters('Hello World!!!')\n'HELLO WORLD!!!'\n>>> replace_letters('Hello\
    \ World!!!')\n'HELLO WORLD!!!'\n>>> replace_letters('Hello World!!!')\n'HELLO\
    \ WORLD!!!'\n>>> replace_letters('Hello World!!!')\n'HELLO WORLD!!!'\n>>> replace_letters('Hello\
    \ World!!!')\n'HELLO WORLD!!!'\n>>> replace_letters('Hello World!!!')\n'HELLO\
    \ WORLD!!!'\n>>> replace_letters('Hello World!!!')\n'HELLO WORLD!!!'\n>>> replace_letters('Hello\
    \ World!!!')\n'HELLO WORLD!!!'\n>>> replace_letters('Hello World!!!')\n'HELLO\
    \ WORLD!!!'\n>>> replace_letters('Hello World!!!')\n'HELLO WORLD!!!'\n>>> replace_letters('Hello\
    \ World!!!')\n'HELLO WORLD!!!'\n>>> replace_letters('Hello World!!!')\n'HELLO\
    \ WORLD!!!'\n>>> replace_letters('Hello World!!!')\n'HELLO WORLD!!!'\n>>> replace_letters('Hello\
    \ World!!!')\n'HELLO WORLD!!!'\n>>> replace_letters('Hello World!!!')\n'HELLO\
    \ WORLD!!!'\n>>> replace_letters('Hello World!!!')\n'HELLO WORLD!!!'\n>>> replace_letters('Hello\
    \ World!!!')\n'HELLO WORLD!!!'\n>>> replace_letters('Hello World!!!')\n'HELLO\
    \ WORLD!!!'\n", "    numbers = numbers.split(\" \")\n    numbers.sort()\n    return\
    \ \" \".join(numbers)\nend\n</cell>\n<code language=julia-1.0>\nsort_numbers(\"\
    three one five\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes a\
    \ string and returns the string with each word capitalized.\n>>> capitalize_words(\"\
    one two three\")\n'One Two Three'\n>>> capitalize_words(\"one two three four\"\
    )\n'One Two Three Four'\n>>> capitalize_words(\"one two three four five\")\n'One\
    \ Two Three Four Five'\n>>> capitalize_words(\"one two three four five six\")\n\
    'One Two Three Four Five Six'\n>>> capitalize_words(\"one two three four five\
    \ six seven\")\n'One Two Three Four Five Six Seven'\n>>> capitalize_words(\"one\
    \ two three four five six seven eight\")\n'One Two Three Four Five Six Seven Eight'\n\
    >>> capitalize_words(\"one two three four five six seven eight nine\")\n'One Two\
    \ Three Four Five Six Seven Eight Nine'\n>>> capitalize_words(\"one two three\
    \ four five six seven eight nine ten\")\n'One Two Three Four Five Six Seven Eight\
    \ Nine Ten'\n>>> capitalize_words(\"one two three four five six seven eight nine\
    \ ten eleven\")\n'One Two Three Four Five Six Seven Eight Nine Ten Eleven'\n>>>\
    \ capitalize_words(\"one two three four five six seven eight nine ten eleven twelve\"\
    )\n'One Two Three Four Five Six Seven Eight Nine Ten Eleven Twelve'\n>>> capitalize_words(\"\
    one two three four five six seven eight nine ten eleven twelve thirteen\")\n'One\
    \ Two Three Four Five Six Seven Eight Nine Ten Eleven Twelve Thirteen'\n>>> capitalize_words(\"\
    one two three four five six seven eight nine ten eleven twelve thirteen fourteen\"\
    )\n'One Two Three Four Five Six Seven Eight Nine Ten Eleven Twel", "    numbers\
    \ = numbers.split(\" \")\n    numbers.sort()\n    return \" \".join(numbers)\n\
    </code>\n<|/ a tags=sorting,string,julia |>\n<| a dscore=2 |>\nI like using sort!\
    \ for this:\n<code>\njulia> sort!(\"one two three\")\n\"one two three\"\n</code>\n\
    <|/ a tags=sorting,string,julia |>\n<| a |>\nI like using sort! for this:\n<code>\n\
    julia> sort!(\"one two three\")\n\"one two three\"\n</code>\n<|/ a dscore=2 tags=sorting,string,julia\
    \ |>\n<| a dscore=2 |>\nI like using sort! for this:\n<code>\njulia> sort!(\"\
    one two three\")\n\"one two three\"\n</code>\n<|/ a tags=sorting,string,julia\
    \ |>\n<| a tags=sorting,string,julia |>\nI like using sort! for this:\n<code>\n\
    julia> sort!(\"one two three\")\n\"one two three\"\n</code>\n<|/ a dscore=2 |>\n\
    <| a tags=sorting,string,julia |>\nI like using sort! for this:\n<code>\njulia>\
    \ sort!(\"one two three\")\n\"one two three\"\n</code>\n<|/ a dscore=1 |>\n<|\
    \ a dscore=1 |>\nI like using sort! for this:\n<code>\njulia> sort!(\"one two\
    \ three\")\n\"one two three\"\n</code>\n<|/ a tags=sorting,string,julia |>\n<|\
    \ a tags=sorting,string,julia |>\nI like using sort! for this:\n<code>\njulia>\
    \ sort!(\"one two three\")\n\"one two three\"\n</code>\n<|/ a dscore=1 |>\n<|\
    \ a tags=sorting,string,julia |>\nI like using sort! for this:\n<code>\njulia>\
    \ sort!(\"one two three\")\n\"one two three\"\n</code>\n<|/ a dscore=1 |>\n<|\
    \ a tags=sorting,string,julia |>\nI like using sort! for this:\n<code>\njulia>\
    \ sort!(\"one two three\")\n\"one two three\"\n</code>\n<|/ a dscore=1 |>\n<|\
    \ a tags=sorting,string,julia |>\nI like using sort! for this:\n<code>\njulia>\
    \ sort!(\"one two three\")\n\"one two three\"\n</code>\n<|/", "    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsort_numbers(\"three one five\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns the string with all numbers\
    \ in reverse order. \nFor example, sort_numbers(\"three one five\") should return\
    \ \"five one three\".\nHint: Use a regular expression to find all numbers in the\
    \ string.", "    numbers = numbers[2:]\n    numbers = numbers.split(\" \")\n \
    \   numbers = map(int, numbers)\n    numbers.sort()\n    return \" \".join(map(str,\
    \ numbers))\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\ndef sort_numbers(numbers):\n\
    \    numbers = numbers.split(\" \")\n    numbers = map(int, numbers)\n    numbers.sort()\n\
    \    return \" \".join(map(str, numbers))\n</code>\n<|/ a tags=sorting,python,string\
    \ |>\n<| a tags=sorting,python,string |>\n<code>\ndef sort_numbers(numbers):\n\
    \    numbers = numbers.split(\" \")\n    numbers = map(int, numbers)\n    numbers.sort()\n\
    \    return \" \".join(map(str, numbers))\n</code>\n<|/ a dscore=0 |>\n<| c |>\n\
    While this code may answer the question, providing additional context regarding\
    \ why and/or how this code answers the question improves its long-term value.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\ndef sort_numbers(numbers):\n    numbers =\
    \ numbers.split(\" \")\n    numbers = map(int, numbers)\n    numbers.sort()\n\
    \    return \" \".join(map(str, numbers))\n</code>\n<|/ a tags=sorting,python,string\
    \ |>\n<| a tags=sorting,python,string |>\n<code>\ndef sort_numbers(numbers):\n\
    \    numbers = numbers.split(\" \")\n    numbers = map(int, numbers)\n    numbers.sort()\n\
    \    return \" \".join(map(str, numbers))\n</code>\n<|/ a dscore=0 |>\n<| a tags=sorting,python,string\
    \ |>\n<code>\ndef sort_numbers(numbers):\n    numbers = numbers.split(\" \")\n\
    \    numbers = map(int, numbers)\n    numbers.sort()\n    return \" \".join(map(str,\
    \ numbers))\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\ndef sort_numbers(numbers):\n\
    \    numbers = numbers.split(\" \")\n    numbers = map(int, numbers)\n    numbers.sort()\n\
    \    return \" \".join(map(str, numbers))\n</code>\n<|/ a tags=sorting,python,string\
    \ |>\n<| a dscore=0 |>\n<code>\ndef sort_numbers(numbers):\n    numbers = numbers.split(\"\
    \ \")\n    numbers = map(int, numbers)\n    numbers.sort()\n    return \" \".join(map(str,\
    \ numbers))\n</code>\n<|/ a tags=sorting,python,string |>\n<| a |>\n<code>\ndef\
    \ sort_numbers(numbers):\n    numbers = numbers.split(\" \")\n    numbers = map(int,\
    \ numbers)\n    numbers.sort()\n    return \" \".join(map(str, numbers))\n</code>\n",
  "    numbers = numbers.split(\" \")\n    numbers.sort\n    return \" \".join(numbers)\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=sorting,string,haskell |>\n<code>\nimport\
    \ Data.List", "    numbers = numbers.split(\" \")\n    numbers.sort!\n    return\
    \ numbers.join(\" \")\nend\n</cell>\n<code language=julia-1.0>\nsort_numbers(\"\
    three one five\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ string as input and returns a string with all the words capitalized.\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The ", "    numbers = numbers.split(\" \")\n    numbers.sort()\n    return \"\
    \ \".join(numbers)\n</code>\n<|/ a tags=sorting,string,haskell |>\n<| c |>\nThis\
    \ doesn't work for me. `sort_numbers \"one two three\"` returns `\"one two three\"\
    `.\n<|/ c |>\n<| c |>\nIt works for me in GHCi 6.12.3 on OS X 10.8.5\n<|/ c |>\n\
    <| c |>\nI tested this in GHCi 6.12.3 on OS X 10.8.5 and it works fine.\n<|/ c\
    \ |>\n<| c |>\nI tested this in GHCi 6.12.3 on OS X 10.8.5 and it works fine.\n\
    <|/ c |>\n<| c |>\nI tested this in GHCi 6.12.3 on OS X 10.8.5 and it works fine.\n\
    <|/ c |>\n<| a dscore=3 |>\n<code>\nimport Data.List", "    numbers = numbers.split(\"\
    \ \")\n    numbers.sort\n    return \" \".join(numbers)\nend\n</cell>\n<code language=julia-1.5>",
  "    numbers = numbers.split(\" \")\n    numbers = sort(numbers)\n    return join(numbers,\
    \ \" \")\nend\n</cell>\n<code language=julia-1.0>", "    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsort_numbers(\"three one five\")\n</cell>\n<text>\nExercise:\
    \ Write a function that takes a string and returns a string with all the words\
    \ capitalized.\n    For example, \"The quick brown fox jumps over the lazy dog\"\
    \ becomes \"The Quick Brown Fox Jumps Over The Lazy Dog\"\n    Your function should\
    \ ignore numbers and punctuation marks.\n    Use a regular expression to ignore\
    \ non-alphabetic characters (numbers and punctuation marks).\n    Use a regular\
    \ expression to ignore non-alphabetic characters (numbers and punctuation marks).\n\
    \    Use a regular expression to ignore non-alphabetic characters (numbers and\
    \ punctuation marks).\n    Use a regular expression to ignore non-alphabetic characters\
    \ (numbers and punctuation marks).\n    Use a regular expression to ignore non-alphabetic\
    \ characters (numbers and punctuation marks).\n    Use a regular expression to\
    \ ignore non-alphabetic characters (numbers and punctuation marks).\n    Use a\
    \ regular expression to ignore non-alphabetic characters (numbers and punctuation\
    \ marks).\n    Use a regular expression to ignore non-alphabetic characters (numbers\
    \ and punctuation marks).\n    Use a regular expression to ignore non-alphabetic\
    \ characters (numbers and punctuation marks).\n    Use a regular expression to\
    \ ignore non-alphabetic characters (numbers and punctuation marks).\n    Use a\
    \ regular expression to ignore non-alphabetic characters (numbers and punctuation\
    \ marks).\n    Use a regular expression to ignore non-alphabetic characters (numbers\
    \ and punctuation marks).\n    Use a regular expression to ignore non-alphabetic\
    \ characters (numbers and punctuation marks).\n    Use a regular expression to\
    \ ignore non-alphabetic characters (numbers and punctuation marks).\n    Use a\
    \ regular expression to ignore non-alphabetic characters (numbers and punctuation\
    \ marks).\n    Use a regular expression to ignore non-alphabetic characters (numbers\
    \ and punctuation marks).\n    Use a regular expression to ignore non-alphabetic\
    \ characters (numbers and punctuation marks).\n    Use a regular expression to\
    \ ignore non-alphabetic characters (numbers and punctuation marks).\n    Use a\
    \ regular expression to ignore non-alphabetic characters (numbers and punctuation\
    \ marks).\n    Use a regular expression to ignore non-alphabetic characters (numbers\
    \ and punctuation marks).\n    Use a regular expression to ignore non-alphabetic\
    \ characters (numbers and punctuation marks).\n    Use a regular expression to\
    \ ignore non-", "    numbers = numbers.split(\" \")\n    numbers.sort()\n    return\
    \ \" \".join(numbers)\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\ndef sort_numbers(numbers):\n\
    \    numbers = numbers.split(\" \")\n    numbers.sort()\n    return \" \".join(numbers)\n\
    </code>\n<|/ a tags=sorting,python dscore=0 |>\n<| c |>\nWhile this code may answer\
    \ the question, providing additional context regarding how and/or why it solves\
    \ the problem would improve the answer's long-term value.\n<|/ c |>\n<| a tags=sorting,python\
    \ |>\n<code>\ndef sort_numbers(numbers):\n    numbers = numbers.split(\" \")\n\
    \    numbers.sort()\n    return \" \".join(numbers)\n</code>\n<|/ a dscore=0 |>\n\
    <| a dscore=0 |>\n<code>\ndef sort_numbers(numbers):\n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\n</code>\n<|/ a tags=sorting,python\
    \ |>\n<| a tags=sorting,python |>\n<code>\ndef sort_numbers(numbers):\n    numbers\
    \ = numbers.split(\" \")\n    numbers.sort()\n    return \" \".join(numbers)\n\
    </code>\n<|/ a dscore=0 |>\n<| a tags=sorting,python |>\n<code>\ndef sort_numbers(numbers):\n\
    \    numbers = numbers.split(\" \")\n    numbers.sort()\n    return \" \".join(numbers)\n\
    </code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\ndef sort_numbers(numbers):\n    numbers\
    \ = numbers.split(\" \")\n    numbers.sort()\n    return \" \".join(numbers)\n\
    </code>\n<|/ a tags=sorting,python dscore=0 |>\n<| a tags=sorting,python |>\n\
    <code>\ndef sort_numbers(numbers):\n    numbers = numbers.split(\" \")\n    numbers.sort()\n\
    \    return \" \".join(numbers)\n</code>\n<|/ a dscore=0 |>\n<| a tags=sorting,python\
    \ |>\n<code>\ndef sort_numbers(numbers):\n    numbers = numbers.split(\" \")\n\
    \    numbers.sort()\n    return \" \".join(numbers)\n</code>\n<|/ a dscore=0 |>\n\
    <| a tags=sorting,python |>\n<code>\ndef sort_numbers(numbers):\n    numbers =\
    \ numbers.split(\" \")\n    numbers.sort()\n    return \" \".join(numbers)\n</code>\n\
    <|/ a dscore=0 |>\n<| a |>\n<code>\ndef sort_numbers(numbers):\n    numbers =\
    \ numbers.split(\" \")\n    numbers.sort()\n    return \" \".join(numbers)\n</code>\n\
    <|/ a dscore=0 tags=sorting,python |>\n<| a tags=sorting,python ", "    numbers\
    \ = numbers.split(\" \")\n    numbers.sort()\n    return \" \".join(numbers)\n\
    </code>\n<|/ a tags=sorting,string,haskell |>\n<| a tags=sorting,string,haskell\
    \ |>\n<code>\nimport Data.List", "    \"\"\"\n    Input is a space-delimited string\
    \ of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two',\
    \ 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the\
    \ string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"", "    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=sorting,haskell,string |>\n<code>\nimport Data.List", "    numbers\
    \ = numbers.split(' ')\n    numbers.sort()\n    return ' '.join(numbers)\nend\n\
    </cell>\n<code language=julia-1.0>\nsort_numbers('one three five')\n</cell>\n\
    <text>\nExercise: Write a function that takes a string as input and returns a\
    \ string with all the letters sorted from smallest to largest.\n    Valid choices\
    \ are 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o',\
    \ 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'.\n    >>> sort_letters('a\
    \ b c d e f g h i j k l m n o p q r s t u v w x y z')\n    'a b c d e f g h i\
    \ j k l m n o p q r s t u v w x y z'\n    \"\"\"", "    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\nend\n</cell>\n<code\
    \ language=julia-1.0>", "    numbers = numbers.split(\" \")\n    numbers = sort(numbers)\n\
    \    numbers = join(numbers, \" \")\n    return numbers\n</code>\n<|/ a |>\n<|\
    \ c |>\nThanks for your answer! I tried to run your code, but I got an error:\
    \ `Error: No function clause matching in sort/2`\n<|/ c |>\n<| c |>\nI edited\
    \ my answer to include the full code I tested with. Hope it helps!\n<|/ c |>\n\
    <| c |>\nThanks for your answer! I tried to run your code, but I got an error:\
    \ `Error: No function clause matching in sort/2`\n<|/ c |>\n<| c |>\nI edited\
    \ my answer to include the full code I tested with. Hope it helps!\n<|/ c |>\n\
    <| c |>\nThanks for your answer! I tried to run your code, but I got an error:\
    \ `Error: No function clause matching in sort/2`\n<|/ c |>\n<| a dscore=2 |>\n\
    Here's a solution that uses recursion:\n<code>", "    numbers = numbers[2:]\n\
    \    numbers = numbers.split(\" \")\n    numbers = sort(numbers)\n    numbers\
    \ = join(numbers, \" \")\n    return numbers\n</code>\n<|/ a dscore=0 |>\n<| a\
    \ tags=sorting,haskell |>\nI wrote a function that sorts numbers from smallest\
    \ to largest:\n<code>\nimport Data.List", "    numbers = numbers.split(\" \")\n\
    \    numbers.sort!\n    return numbers.join(\" \")\nend\n</code>\n<|/ a tags=julia\
    \ |>\n<| a tags=julia |>\n<code>", "    numbers = numbers.split(\" \")\n    numbers\
    \ = sort(numbers)\n    numbers = join(numbers, \" \")\n    return numbers\nend\n\
    </cell>\n<code language=julia-1.5>", "    numbers = numbers.split(\" \")\n   \
    \ numbers.sort()\n    return \" \".join(numbers)\nend\n</cell>\n<code language=julia-1.5>",
  "    numbers = numbers.split(\" \")\n    numbers.sort()\n    return \" \".join(numbers)\n\
    end\n</cell>\n<code language=julia-1.0>\nsort_numbers(\"three one five\")\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a string and returns a string\
    \ with the first letter of each word capitalized.\n>>> capitalize_first_letter(\"\
    hello world\")\n'Hello World'\n>>> capitalize_first_letter(\"hello world\")\n\
    'Hello World'\n>>> capitalize_first_letter(\"hello world\")\n'Hello World'\n>>>\
    \ capitalize_first_letter(\"hello world\")\n'Hello World'\n>>> capitalize_first_letter(\"\
    hello world\")\n'Hello World'\n>>> capitalize_first_letter(\"hello world\")\n\
    'Hello World'\n>>> capitalize_first_letter(\"hello world\")\n'Hello World'\n>>>\
    \ capitalize_first_letter(\"hello world\")\n'Hello World'\n>>> capitalize_first_letter(\"\
    hello world\")\n'Hello World'\n>>> capitalize_first_letter(\"hello world\")\n\
    'Hello World'\n>>> capitalize_first_letter(\"hello world\")\n'Hello World'\n>>>\
    \ capitalize_first_letter(\"hello world\")\n'Hello World'\n>>> capitalize_first_letter(\"\
    hello world\")\n'Hello World'\n>>> capitalize_first_letter(\"hello world\")\n\
    'Hello World'\n>>> capitalize_first_letter(\"hello world\")\n'Hello World'\n>>>\
    \ capitalize_first_letter(\"hello world\")\n'Hello World'\n>>> capitalize_first_letter(\"\
    hello world\")\n'Hello World'\n>>> capitalize_first_letter(\"hello world\")\n\
    'Hello World'\n>>> capitalize_first_letter(\"hello world\")\n'Hello World'\n>>>\
    \ capitalize_first_letter(\"hello world\")\n'Hello World'\n>>> capitalize_first_letter(\"\
    hello world\")\n'Hello World'\n>>> capitalize_first_letter(\"hello world\")\n\
    'Hello World'\n>>> capitalize_first_letter(\"hello world\")\n'Hello World'\n>>>\
    \ capitalize_first_letter(\"hello world\")\n'Hello World'\n>>> capitalize_first_letter(\"\
    hello world\")\n'Hello World'\n>>> capitalize_first_letter(\"hello world\")\n\
    'Hello World'\n>>> capitalize_first_letter(\"hello world\")\n'Hello World'\n>>>\
    \ capitalize_first_letter(\"hello world\")\n'Hello World'\n>>> capitalize_first_letter(\"\
    hello world\")\n'Hello World'\n>>> capitalize_first_letter(\"hello world\")\n\
    'Hello World'\n", "    numbers = numbers.split(\" \")\n    numbers.sort!\n   \
    \ return numbers.join(\" \")\nend\n</cell>\n<code language=julia-1.5>\nsort_numbers(\"\
    three one five\")\n</cell>\n<text>\nExercise: Write a function that takes a string\
    \ as input and returns the string with all numbers in descending order.\n    Valid\
    \ choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight'\
    \ and 'nine'.\n    >>> sort_numbers(\"three one five\")\n    'five three one'\n\
    \    \"\"\"", "    numbers = numbers.split(\" \")\n    numbers.sort\n    return\
    \ join(numbers, \" \")\nend\n</cell>\n<code language=julia-1.0>\nsort_numbers(\"\
    three one five\")\n</cell>\n<text>\nExercise: Write a function that takes a string\
    \ and returns a string with all the words in lower case\n    separated by spaces.\n\
    \    \n    For example, \"The quick brown fox jumps over the lazy dog\" becomes\
    \ \"the quick brown fox jumps over the\n    lazy dog\"\n    \n    Use split()\
    \ to split a string into an array of words.\n    Use map() to apply a function\
    \ to each element of an array.\n    Use join() to concatenate all the elements\
    \ of the array into a string.\n    \n    You may use split() and map() and join()\
    \ from Base or from Base.\n    \n    You may use split() and map() and join()\
    \ from Base or from Base.\n    \n    You may use split() and map() and join()\
    \ from Base or from Base.\n    \n    You may use split() and map() and join()\
    \ from Base or from Base.\n    \n    You may use split() and map() and join()\
    \ from Base or from Base.\n    \n    You may use split() and map() and join()\
    \ from Base or from Base.\n    \n    You may use split() and map() and join()\
    \ from Base or from Base.\n    \n    You may use split() and map() and join()\
    \ from Base or from Base.\n    \n    You may use split() and map() and join()\
    \ from Base or from Base.\n    \n    You may use split() and map() and join()\
    \ from Base or from Base.\n    \n    You may use split() and map() and join()\
    \ from Base or from Base.\n    \n    You may use split() and map() and join()\
    \ from Base or from Base.\n    \n    You may use split() and map() and join()\
    \ from Base or from Base.\n    \n    You may use split() and map() and join()\
    \ from Base or from Base.\n    \n    You may use split() and map() and join()\
    \ from Base or from Base.\n    \n    You may use split() and map() and join()\
    \ from Base or from Base.\n    \n    You may use split() and map() and join()\
    \ from Base or from Base.\n    \n    You may use split() and map() and join()\
    \ from Base or from Base.\n    \n    You may use split() and map() and join()\
    \ from Base or from Base.\n    \n    You may use split() and map() and join()\
    \ from Base or from Base.\n    \n    You may use split() and map() and join()\
    \ from Base or from Base.\n    \n    You may use split() and map() and join()\
    \ from Base or from Base.", "    numbers = numbers.split(\" \")\n    numbers.sort()\n\
    \    return \" \".join(numbers)\nend\n</cell>\n<code language=julia-1.0>\nsort_numbers(\"\
    one two three\")\n</cell>\n<text>\nExercise 4\nWrite a function that takes a string\
    \ and returns the string with all the words capitalized.\n>>> capitalize_words(\"\
    one two three\")\n'One Two Three'\n>>> capitalize_words(\"one two three four\"\
    )\n'One Two Three Four'\n>>> capitalize_words(\"one two three four five\")\n'One\
    \ Two Three Four Five'\n>>> capitalize_words(\"one two three four five six\")\n\
    'One Two Three Four Five Six'\n>>> capitalize_words(\"one two three four five\
    \ six seven\")\n'One Two Three Four Five Six Seven'\n>>> capitalize_words(\"one\
    \ two three four five six seven eight\")\n'One Two Three Four Five Six Seven Eight'\n\
    >>> capitalize_words(\"one two three four five six seven eight nine\")\n'One Two\
    \ Three Four Five Six Seven Eight Nine'\n>>> capitalize_words(\"one two three\
    \ four five six seven eight nine ten\")\n'One Two Three Four Five Six Seven Eight\
    \ Nine Ten'\n>>> capitalize_words(\"one two three four five six seven eight nine\
    \ ten eleven\")\n'One Two Three Four Five Six Seven Eight Nine Ten Eleven'\n>>>\
    \ capitalize_words(\"one two three four five six seven eight nine ten eleven twelve\"\
    )\n'One Two Three Four Five Six Seven Eight Nine Ten Eleven Twelve'\n>>> capitalize_words(\"\
    one two three four five six seven eight nine ten eleven twelve thirteen\")\n'One\
    \ Two Three Four Five Six Seven Eight Nine Ten Eleven Twelve Thirteen'\n>>> capitalize_words(\"\
    one two three four five six seven eight nine ten eleven twelve thirteen fourteen\"\
    )\n'One Two Three Four Five Six Seven Eight Nine Ten Eleven Twelve ", "    numbers\
    \ = numbers.split(\" \")\n    numbers.sort()\n    return \" \".join(numbers)\n\
    end\n</cell>\n<code language=julia-1.3>\nsort_numbers(\"one two three four five\
    \ six seven eight nine\")\n</cell>\n<text>\nExercise: Write a function that takes\
    \ a string and returns a string with all the words capitalized.\n    >>> capitalize_words(\"\
    one two three four five six seven eight nine\")\n    'One Two Three Four Five\
    \ Six Seven Eight Nine'\n    \"\"\"", "    numbers = numbers[2:]\n    numbers\
    \ = numbers.split(\" \")\n    numbers = numbers[2:]\n    numbers = numbers.sort()\n\
    \    numbers = numbers.reverse()\n    numbers = \" \".join(numbers)\n    return\
    \ numbers\n</code>\n<|/ a tags=sorting,string,julia |>\n<| a dscore=0 |>\n<code>",
  "    numbers = numbers.split(\" \")\n    numbers.sort()\n    return \" \".join(numbers)\n\
    end\n</cell>\n<code language=julia-1.5>\nsort_numbers(\"one two three four\")\n\
    </cell>\n<text>\nExercise: Write a function that takes a string as input and returns\
    \ a string with all the words capitalized.\n    For example, sort_words(\"one\
    \ two three four\") should return \"One Two Three Four\".\n    Use a regular expression\
    \ to capitalize each word in the string.\n    Use a regular expression to capitalize\
    \ each word in the string.\n    Use a regular expression to capitalize each word\
    \ in the string.\n    Use a regular expression to capitalize each word in the\
    \ string.\n    Use a regular expression to capitalize each word in the string.\n\
    \    Use a regular expression to capitalize each word in the string.\n    Use\
    \ a regular expression to capitalize each word in the string.\n    Use a regular\
    \ expression to capitalize each word in the string.\n    Use a regular expression\
    \ to capitalize each word in the string.\n    Use a regular expression to capitalize\
    \ each word in the string.\n    Use a regular expression to capitalize each word\
    \ in the string.\n    Use a regular expression to capitalize each word in the\
    \ string.\n    Use a regular expression to capitalize each word in the string.\n\
    \    Use a regular expression to capitalize each word in the string.\n    Use\
    \ a regular expression to capitalize each word in the string.\n    Use a regular\
    \ expression to capitalize each word in the string.\n    Use a regular expression\
    \ to capitalize each word in the string.\n    Use a regular expression to capitalize\
    \ each word in the string.\n    Use a regular expression to capitalize each word\
    \ in the string.\n    Use a regular expression to capitalize each word in the\
    \ string.\n    Use a regular expression to capitalize each word in the string.\n\
    \    Use a regular expression to capitalize each word in the string.\n    Use\
    \ a regular expression to capitalize each word in the string.\n    Use a regular\
    \ expression to capitalize each word in the string.\n    Use a regular expression\
    \ to capitalize each word in the string.\n    Use a regular expression to capitalize\
    \ each word in the string.\n    Use a regular expression to capitalize each word\
    \ in the string.\n    Use a regular expression to capitalize each word in the\
    \ string.\n    Use a regular expression to capitalize each word in the string.\n\
    \    Use a regular expression to capitalize each word in the string.\n    Use\
    \ a regular expression to capitalize each word in the string.\n    Use a regular\
    \ expression to capitalize each word in the string.\n    Use a regular expression\
    \ to capitalize each word in the string.\n    Use a regular expression to capitalize\
    \ each word in the string.\n    Use a regular expression to capitalize each word\
    \ in the string.\n    Use a regular expression to capitalize each word in the\
    \ string.\n", "    numbers = numbers.split(' ')\n    numbers.sort()\n    return\
    \ ' '.join(numbers)\nend\n</cell>\n<code language=julia-1.5>\nsort_numbers('three\
    \ one five')\n</cell>\n<text>\nExercise: Write a function that takes a string\
    \ and returns the string with all numbers in reverse order. For example, sort_numbers('three\
    \ one five') should return 'five three one'.", "    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\nend\n</cell>\n<code\
    \ language=julia-1.1>", "    numbers = numbers.split(' ')\n    numbers.sort()\n\
    \    return ' '.join(numbers)\n</code>\n<|/ a dscore=0 |>\n<| a tags=sorting,string,haskell\
    \ |>\n<code>\nimport Data.List (sortBy)", "    numbers = numbers.split(\" \")\n\
    \    numbers.sort()\n    return \" \".join(numbers)\nend\n</cell>\n<code language=julia-1.0>\n\
    sort_numbers(\"one two three four five six seven eight nine\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the string with all\
    \ numbers in it sorted from smallest to largest.\nFor example, sort_numbers(\"\
    one two three four five six seven eight nine\") should return \"one two three\
    \ four five six seven eight nine\".", "    numbers = numbers.split(\" \")\n  \
    \  numbers.sort!\n    return numbers.join(\" \")\nend\n</cell>\n<code language=julia-1.5>\n\
    sort_numbers(\"three one five\")\n</cell>\n<text>\nExercise: Write a function\
    \ that takes a string and returns a string with all the words capitalized\n  \
    \  e.g. \"I love Julia\" -> \"I Love Julia\"\n    e.g. \"I love Julia\" -> \"\
    I Love Julia\"\n    e.g. \"I love Julia\" -> \"I Love Julia\"\n    e.g. \"I love\
    \ Julia\" -> \"I Love Julia\"\n    e.g. \"I love Julia\" -> \"I Love Julia\"\n\
    \    e.g. \"I love Julia\" -> \"I Love Julia\"\n    e.g. \"I love Julia\" -> \"\
    I Love Julia\"\n    e.g. \"I love Julia\" -> \"I Love Julia\"\n    e.g. \"I love\
    \ Julia\" -> \"I Love Julia\"\n    e.g. \"I love Julia\" -> \"I Love Julia\"\n\
    \    e.g. \"I love Julia\" -> \"I Love Julia\"\n    e.g. \"I love Julia\" -> \"\
    I Love Julia\"\n    e.g. \"I love Julia\" -> \"I Love Julia\"\n    e.g. \"I love\
    \ Julia\" -> \"I Love Julia\"\n    e.g. \"I love Julia\" -> \"I Love Julia\"\n\
    \    e.g. \"I love Julia\" -> \"I Love Julia\"\n    e.g. \"I love Julia\" -> \"\
    I Love Julia\"\n    e.g. \"I love Julia\" -> \"I Love Julia\"\n    e.g. \"I love\
    \ Julia\" -> \"I Love Julia\"\n    e.g. \"I love Julia\" -> \"I Love Julia\"\n\
    \    e.g. \"I love Julia\" -> \"I Love Julia\"\n    e.g. \"I love Julia\" -> \"\
    I Love Julia\"\n    e.g. \"I love Julia\" -> \"I Love Julia\"\n    e.g. \"I love\
    \ Julia\" -> \"I Love Julia\"\n    e.g. \"I love Julia\" -> \"I Love Julia\"\n\
    \    e.g. \"I love Julia\" -> \"I Love Julia\"\n    e.g. \"I love Julia\" -> ",
  "    numbers = numbers.split(\" \")\n    numbers.sort!\n    return numbers.join(\"\
    \ \")\nend\n</cell>\n<code language=julia-1.4>", "    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    return numbers.join(\" \")\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    \"\"\"\n    Input is a space-delimited string of\
    \ numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two',\
    \ 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the\
    \ string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"", "    numbers = numbers.split('\
    \ ')\n    numbers = sort(numbers)\n    return join(numbers, ' ')\nend\n</code>\n\
    <|/ a tags=julia,sorting,string |>\n<| a |>\nA more general solution that will\
    \ work with any number of numbers in any order:\n<code>", "    numbers = numbers.split(\"\
    \ \")\n    numbers.sort\n    return \" \".join(numbers)\n</code>\n<|/ a |>\n<|\
    \ a |>\n<code>\ndef sort_numbers(numbers):\n    numbers = numbers.split(\" \"\
    )\n    numbers.sort()\n    return \" \".join(numbers)\n</code>\n<|/ a tags=sorting,python\
    \ dscore=0 |>\n<| a tags=sorting,python |>\n<code>\ndef sort_numbers(numbers):\n\
    \    numbers = numbers.split(\" \")\n    numbers.sort()\n    return \" \".join(numbers)\n\
    </code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\ndef sort_numbers(numbers):\n    numbers\
    \ = numbers.split(\" \")\n    numbers.sort()\n    return \" \".join(numbers)\n\
    </code>\n<|/ a tags=sorting,python dscore=0 |>\n<| a dscore=0 |>\n<code>\ndef\
    \ sort_numbers(numbers):\n    numbers = numbers.split(\" \")\n    numbers.sort()\n\
    \    return \" \".join(numbers)\n</code>\n<|/ a tags=sorting,python |>\n<| a tags=sorting,python\
    \ |>\n<code>\ndef sort_numbers(numbers):\n    numbers = numbers.split(\" \")\n\
    \    numbers.sort()\n    return \" \".join(numbers)\n</code>\n<|/ a dscore=0 |>\n\
    <| a tags=sorting,python |>\n<code>\ndef sort_numbers(numbers):\n    numbers =\
    \ numbers.split(\" \")\n    numbers.sort()\n    return \" \".join(numbers)\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=sorting,python |>\n<code>\ndef sort_numbers(numbers):\n\
    \    numbers = numbers.split(\" \")\n    numbers.sort()\n    return \" \".join(numbers)\n\
    </code>\n<|/ a dscore=0 |>\n<| a tags=sorting,python |>\n<code>\ndef sort_numbers(numbers):\n\
    \    numbers = numbers.split(\" \")\n    numbers.sort()\n    return \" \".join(numbers)\n\
    </code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\ndef sort_numbers(numbers):\n\
    \    numbers = numbers.split(\" \")\n    numbers.sort()\n    return \" \".join(numbers)\n\
    </code>\n<|/ a tags=sorting,python |>\n<| a tags=sorting,python |>\n<code>\ndef\
    \ sort_numbers(numbers):\n    numbers = numbers.split(\" \")\n    numbers.sort()\n\
    \    return \" \".join(numbers)\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n\
    <code>\ndef sort_numbers(numbers):\n    numbers = numbers.split(\" \")\n    numbers.sort()\n\
    \    return \" \".join(numbers)\n</code>\n<|/ a tags=sorting,python |>\n<| a tags=sorting,",
  "    numbers = numbers.split(\" \")\n    numbers.sort()\n    return \" \".join(numbers)\n\
    end\n</cell>\n<code language=julia-1.5>", "    numbers = numbers[2:]\n    numbers\
    \ = numbers.split(\" \")\n    numbers.sort()\n    return \" \".join(numbers)\n\
    end\n</cell>\n<code language=julia-1.0>", "    numbers = numbers.split(\" \")\n\
    \    numbers.sort()\n    return \" \".join(numbers)\n</code>\n<|/ a dscore=1 |>\n\
    <| a dscore=0 |>\n<code>", "    numbers = numbers.split(\" \")\n    numbers.sort\n\
    \    return \" \".join(numbers)\nend\n</cell>\n<code language=julia-1.5>", " \
    \   numbers = numbers.split(\" \")\n    numbers.sort()\n    return \" \".join(numbers)\n\
    </code>\n<|/ a tags=sorting,string,haskell |>\n<| c |>\nI like your solution,\
    \ but I wonder why you used `sort` instead of `sortBy`?\n<|/ c |>\n<| c |>\nI\
    \ used `sort` because I wanted to show how to use `sortBy`. I didn't want to confuse\
    \ the OP with `sortBy`.\n<|/ c |>\n<| c |>\nI see. Thanks for your answer.\n<|/\
    \ c |>\n<| a tags=sorting,string,haskell |>\n<code>\nimport Data.List", "    numbers\
    \ = numbers.split(\" \")\n    numbers.sort()\n    return \" \".join(numbers)\n\
    end\n</cell>\n<code language=julia-1.3>", "    numbers = numbers.split(\" \")\n\
    \    numbers.sort()\n    return \" \".join(numbers)\n</code>\n<|/ a tags=sorting,string,haskell\
    \ |>\n<| c |>\nThis doesn't work for me. `sort_numbers` returns `one three five`\
    \ instead of `one three five`.\n<|/ c |>\n<| c |>\nI tested it and it works. I\
    \ used the function you provided in your question. Are you sure you used the function\
    \ I provided? I tested it with `sort_numbers \"three one five\"` and it returned\
    \ `one three five`.\n<|/ c |>\n<| c |>\nYes, I used the function you provided\
    \ in your question. Are you sure you used the function I provided? I tested it\
    \ with `sort_numbers \"three one five\"` and it returned `one three five`.\n<|/\
    \ c |>\n<| c |>\nI used the function you provided in your question. Are you sure\
    \ you used the function I provided? I tested it with `sort_numbers \"three one\
    \ five\"` and it returned `one three five`.\n<|/ c |>\n<| c |>\nI used the function\
    \ you provided in your question. Are you sure you used the function I provided?\
    \ I tested it with `sort_numbers \"three one five\"` and it returned `one three\
    \ five`.\n<|/ c |>\n<| a dscore=1 |>\nI believe this should work:\n<code>\nimport\
    \ Data.List\nimport Data.Ord", "    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n", "    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\nend\n</cell>\n<code\
    \ language=julia-1.0>", "    numbers = numbers.split(\" \")\n    numbers.sort()\n\
    \    return \" \".join(numbers)\nend\n</cell>\n<code language=julia-1.5>\nsort_numbers(\"\
    one two three four five six seven eight nine\")\n</cell>\n<text>\nExercise: Write\
    \ a function that takes a string and returns the string with each word capitalized.\n\
    \    For example, sort_words(\"one two three four five six seven eight nine\"\
    ) should return \"One Two Three Four Five Six Seven Eight Nine\"\n    >>> sort_words(\"\
    one two three four five six seven eight nine\")\n    'One Two Three Four Five\
    \ Six Seven Eight Nine'\n    \"\"\"", "    \"\"\"\n    Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"", "    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\nend\n</cell>\n<code\
    \ language=julia-1.0>\nsort_numbers(\"one two three four five six seven eight\
    \ nine\")\n</cell>\n<text>\nExercise: Write a function that takes a string and\
    \ returns a string with all the words in lower case\n    separated by spaces.\n\
    \    >>> sort_words(\"one two three four five six seven eight nine\")\n    'one\
    \ two three four five six seven eight nine'\n    \"\"\"", "    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\nend\n</cell>\n<code\
    \ language=julia-1.3>\nsort_numbers(\"three one five\")\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a string as input and returns a string with all\
    \ the words capitalized.\n>>> capitalize_words(\"the quick brown fox jumps over\
    \ the lazy dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    the quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"the quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    the quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"the quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    the quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"the quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    the quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"the quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    the quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"the quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    the quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"the quick ", "    numbers = numbers.split('\
    \ ')\n    numbers.sort()\n    return ' '.join(numbers)\n</code>\n<|/ a tags=sorting,string,julia\
    \ |>\n<| c |>\nThanks for your answer! I tried to run your code, but I got this\
    \ error `ERROR: LoadError: UndefVarError: sort_numbers not defined`. Any ideas\
    \ why?\n<|/ c |>\n<| c |>\nI forgot to add `sort_numbers` as a function to the\
    \ `sort` function. I edited my answer to include it.\n<|/ c |>\n<| c |>\nThanks\
    \ for your answer! I tried to run your code, but I got this error `ERROR: LoadError:\
    \ UndefVarError: sort_numbers not defined`. Any ideas why?\n<|/ c |>\n<| c |>\n\
    I forgot to add `sort_numbers` as a function to the `sort` function. I edited\
    \ my answer to include it.\n<|/ c |>\n<| c |>\nThanks for your answer! I tried\
    \ to run your code, but I got this error `ERROR: LoadError: UndefVarError: sort_numbers\
    \ not defined`. Any ideas why?\n<|/ c |>\n<| a tags=sorting,string,julia |>\n\
    I believe that this is what you are looking for:\n<code>\njulia> sort_numbers(\"\
    three one five\")\n\"one three five\"\n</code>\n<|/ a dscore=2 |>\n<| a tags=sorting,string,julia\
    \ |>\n<code>", "    numbers = numbers.split(\" \")\n    numbers.sort!\n    return\
    \ numbers.join(\" \")\nend\n</cell>\n<code language=julia-1.0>\nsort_numbers(\"\
    one two three\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns a string with all the words in the string capitalized.\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The ", "    numbers = numbers.split(\" \")\n    numbers.sort()\n    return \"\
    \ \".join(numbers)\nend\n</cell>\n<code language=julia-1.0>\nsort_numbers(\"one\
    \ two three four five six seven eight nine\")\n</cell>\n<text>\nExercise: Write\
    \ a function that takes a string and returns the string with all numbers in sorted\
    \ order\n    separated by commas\n    >>> sort_numbers(\"one two three four five\
    \ six seven eight nine\")\n    'one, two, three, four, five, six, seven, eight,\
    \ nine'\n    \"\"\"", "    numbers = numbers.split(\" \")\n    numbers.sort!\n\
    \    numbers = join(numbers, \" \")\n    return numbers\nend\n</code>\n<|/ a |>\n\
    <| c |>\nThis doesn't work. `sort!` modifies the original array, so the original\
    \ string will be sorted as well.\n<|/ c |>\n<| c |>\nYes, I noticed that after\
    \ I posted my answer. I've edited my answer to fix it.\n<|/ c |>\n<| a dscore=0\
    \ |>\nI came up with this solution:\n<code>", "    numbers = numbers.split(\"\
    \ \")\n    numbers.sort\n    return \" \".join(numbers)\nend\n</cell>\n<code language=julia-1.0>",
  "    numbers = numbers.split(\" \")\n    numbers.sort()\n    return \" \".join(numbers)\n\
    end\n</cell>\n<code language=julia-1.0>\nsort_numbers(\"three one five\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns a string\
    \ with all the words capitalized.\n>>> capitalize_words(\"The quick brown fox\
    \ jumps over the lazy dog\")\n'The Quick Brown Fox Jumps Over The Lazy Dog'\n\
    >>> capitalize_words(\"The quick brown fox jumps over the lazy dog\")\n'The Quick\
    \ Brown Fox Jumps Over The Lazy Dog'\n>>> capitalize_words(\"The quick brown fox\
    \ jumps over the lazy dog\")\n'The Quick Brown Fox Jumps Over The Lazy Dog'\n\
    >>> capitalize_words(\"The quick brown fox jumps over the lazy dog\")\n'The Quick\
    \ Brown Fox Jumps Over The Lazy Dog'\n>>> capitalize_words(\"The quick brown fox\
    \ jumps over the lazy dog\")\n'The Quick Brown Fox Jumps Over The Lazy Dog'\n\
    >>> capitalize_words(\"The quick brown fox jumps over the lazy dog\")\n'The Quick\
    \ Brown Fox Jumps Over The Lazy Dog'\n>>> capitalize_words(\"The quick brown fox\
    \ jumps over the lazy dog\")\n'The Quick Brown Fox Jumps Over The Lazy Dog'\n\
    >>> capitalize_words(\"The quick brown fox jumps over the lazy dog\")\n'The Quick\
    \ Brown Fox Jumps Over The Lazy Dog'\n>>> capitalize_words(\"The quick brown fox\
    \ jumps over the lazy dog\")\n'The Quick Brown Fox Jumps Over The Lazy Dog'\n\
    >>> capitalize_words(\"The quick brown fox jumps over the lazy dog\")\n'The Quick\
    \ Brown Fox Jumps Over The Lazy Dog'\n>>> capitalize_words(\"The quick brown fox\
    \ jumps over the lazy dog\")\n'The Quick Brown Fox Jumps Over The Lazy Dog'\n\
    >>> capitalize_words(\"The quick brown fox jumps over the lazy dog\")\n'The Quick\
    \ Brown Fox Jumps Over The Lazy "]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
