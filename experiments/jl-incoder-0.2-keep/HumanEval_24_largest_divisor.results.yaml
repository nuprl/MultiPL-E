name: HumanEval_24_largest_divisor
language: julia
results:
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 \n        0\n    else\n        largest_divisor(n-1)\n        if\
    \ n%2==0\n            largest_divisor(n/2)\n        end\n    end\nend\n</cell>\n\
    <code language=julia-1.3>\n@time largest_divisor(15)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the factorial of a given number. \nFor example,\
    \ factorial(5) = 5 \xD7 4 \xD7 3 \xD7 2 \xD7 1\nusing Test\n\n@testset begin\n\
    \ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpch56w3sa.jl:15\nin expression starting at\
    \ /tmp/tmpch56w3sa.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0\n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the number of divisors of n that are\
    \ less than or equal to n.\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0msat1y7.jl:12\nin expression starting at\
    \ /tmp/tmp0msat1y7.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0\n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the number of divisors of n that are\
    \ less than or equal to n.\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpct28hdhb.jl:12\nin expression starting at\
    \ /tmp/tmpct28hdhb.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        return n\n    else if n%2==0 \n        return largest_divisor(n/2)\n\
    \    else \n        return largest_divisor(n/2) + 1\nend\n</cell>\n<code language=julia-1.5>\n\
    largest_divisor(15)\n</cell>\n<text>\nExercise 4\nWrite a function that returns\
    \ the number of divisors of n that are less than or equal to n.\nusing Test\n\n\
    @testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t\
    @test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp55wmbull.jl:8\nin expression starting at /tmp/tmp55wmbull.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 then return 0\n    else if n==1 then return 1\n    else if n%2==0\
    \ then return n\n    else return largest_divisor(n/2)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time largest_divisor(15)\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the largest prime factor of a given number. For example, if the number\
    \ is\n$2^3^5^7^11^13^17^19^23^29^31^37^41^43^47^53^59^61^67^71^73^79^83^89^97^101^103^107^109^113^127^131^137^139^147^151^157^163^167^173^179^181^191^193^197^199^211^223^227^229^233^239^241^251^253^257^263^269^271^277^281^283^293^307^311^313^317^331^337^347^353^359^367^373^379^383^389^397^401^407^411^419^421^431^433^439^443^449^457^461^463^467^479^487^491^497^503^509^521^523^529^531^537^541^547^553^559^563^569^571^577^587^593^599^601^607^613^617^619^631^641^643^647^653^659^661^673^677^683^691^701^709^719^727^733^739^743^751^757^761^769^773^787^797^803^809^811^813^817^819^821^823^827^829^831^833^837^839^843^851^853^857^859^863^877^881^883^887^893\n\
    using Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
    \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpd_yurlgs.jl:6\nin expression starting at /tmp/tmpd_yurlgs.jl:6\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 then return 0\n    if n==1 then return 1\n    if n%2==0 then return\
    \ n\n    else return largest_divisor(n/2)\nend\n</cell>\n<code language=julia-1.4>\n\
    largest_divisor(15)\n</cell>\n<text>\nExercise 2\nWrite a function that computes\
    \ the factorial of a given number. \nFor example, factorial(5) = 5 \xD7 4 \xD7\
    \ 3 \xD7 2 \xD7 1\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmph9i5dl7m.jl:6\nin expression starting at /tmp/tmph9i5dl7m.jl:6\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 then return 0\n    else if n%2==0 then return n\n    else return\
    \ largest_divisor(n/2)\nend\n</cell>\n<code language=julia-1.3>\nlargest_divisor(15)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the number of divisors\
    \ of n that are less than or equal to n.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmphecthav7.jl:6\nin expression starting at /tmp/tmphecthav7.jl:6\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 then return 0\n    else if n==1 then return 1\n    else if n%2==0\
    \ then return n\n    else return largest_divisor(n/2)\nend\n</cell>\n<code language=julia-1.5>\n\
    largest_divisor(15)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the factorial of a given number. For example, factorial(5) = 5 \xD7 4 \xD7 3\
    \ \xD7 2 \xD7 1\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpv05vqr2b.jl:6\nin expression starting at /tmp/tmpv05vqr2b.jl:6\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 then return 0\n    else if n%2==0 then return n\n    else return\
    \ largest_divisor(n/2)\nend\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the smallest number\
    \ that divides n evenly, larger than n\nHint: use largest_divisor(n)\nusing Test\n\
    \n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\
    \t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpeh288pgb.jl:6\nin expression starting at /tmp/tmpeh288pgb.jl:6\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 \n        0\n    else if n==1 \n        1\n    else if n%2==0\
    \ \n        largest_divisor(n/2)\n    else \n        largest_divisor(n/2)+1\n\
    end\n</cell>\n<code language=julia-1.3>\nlargest_divisor(15)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the number of divisors of n that are\
    \ less than or equal to n.\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg9sdywkm.jl:8\nin expression starting at /tmp/tmpg9sdywkm.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0\n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnj3tvwe8.jl:12\nin expression starting at\
    \ /tmp/tmpnj3tvwe8.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        return n\n    else if n%2==0 \n        return largest_divisor(n/2)\n\
    \    else \n        return largest_divisor(n/2)+1\nend\n</cell>\n<code language=julia-1.5>\n\
    largest_divisor(15)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the first n prime numbers. \nHint: Use a for loop and a prime number sieve.\n\
    using Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
    \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdzdl5erz.jl:8\nin expression starting at /tmp/tmpdzdl5erz.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        return 1 \n    else \n        largest_divisor(n-1)\n\
    \        if n%2==0 \n            return n \n        else \n            return\
    \ largest_divisor(n//2)\nend\n</cell>\n<code language=julia-1.4>\n@time largest_divisor(100)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ given number. \nFor example, factorial(5) = 5 * 4 * 3 * 2 * 1 = 120\nusing Test\n\
    \n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\
    \t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz9se6hd3.jl:15\nin expression starting at\
    \ /tmp/tmpz9se6hd3.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        return 1 \n    else \n        return largest_divisor(n-1)\
    \ + 1 \nend \n</cell>\n<code language=julia-1.4>\nlargest_divisor(15)\n</cell>\n\
    <text>\nProblem 3\nWrite a function that returns the number of prime numbers less\
    \ than or equal to a given number.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp12fq0235.jl:11\nin expression starting at\
    \ /tmp/tmp12fq0235.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        return n\n    else if n%2==0 \n        return largest_divisor(n/2)\n\
    \    else \n        return largest_divisor(n/2)+1\nend\n</cell>\n<code language=julia-1.5>\n\
    largest_divisor(15)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of divisors of a given number n. \nFor example, for n = 12, there\
    \ are 3 divisors: 1, 2, and 3.\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmmj3hnq9.jl:8\nin expression starting at /tmp/tmpmmj3hnq9.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        return 1 \n    else if n%2==0 \n        return largest_divisor(n/2)\
    \ \n    else \n        return largest_divisor(n/2) + 1 \nend \n</cell>\n<code\
    \ language=julia-1.4>\n@time largest_divisor(150)\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns the number of divisors of n that are less than or\
    \ equal to n.\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t\
    @test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) ==\
    \ 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzp021xyn.jl:8\nin expression starting at /tmp/tmpzp021xyn.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        return 1 \n    else \n        return largest_divisor(n-1)\
    \ + 1 \nend \n</cell>\n<code language=julia-1.3>\nlargest_divisor(15)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the smallest number that divides\
    \ n evenly, larger than n\nHint: Use a recursive function\nHint: Use a while loop\n\
    Hint: Use a for loop\nHint: Use a while loop\nHint: Use a for loop\nHint: Use\
    \ a while loop\nHint: Use a for loop\nHint: Use a while loop\nHint: Use a for\
    \ loop\nHint: Use a while loop\nHint: Use a for loop\nHint: Use a while loop\n\
    Hint: Use a for loop\nHint: Use a while loop\nHint: Use a for loop\nHint: Use\
    \ a while loop\nHint: Use a for loop\nHint: Use a while loop\nHint: Use a for\
    \ loop\nHint: Use a while loop\nHint: Use a for loop\nHint: Use a while loop\n\
    Hint: Use a for loop\nHint: Use a while loop\nHint: Use a for loop\nHint: Use\
    \ a while loop\nHint: Use a for loop\nHint: Use a while loop\nHint: Use a for\
    \ loop\nHint: Use a while loop\nHint: Use a for loop\nHint: Use a while loop\n\
    Hint: Use a for loop\nHint: Use a while loop\nHint: Use a for loop\nHint: Use\
    \ a while loop\nHint: Use a for loop\nHint: Use a while loop\nHint: Use a for\
    \ loop\nHint: Use a while loop\nHint: Use a for loop\nHint: Use a while loop\n\
    Hint: Use a for loop\nHint: Use a while loop\nHint: Use a for loop\nHint: Use\
    \ a while loop\nHint: Use a for loop\nHint: Use a while loop\nHint: Use a for\
    \ loop\nHint: Use a while loop\nHint: Use a for loop\nHint: Use a while loop\n\
    Hint: Use a for loop\nHint: Use a while loop\nHint: Use a for loop\nHint: Use\
    \ a while loop\nHint: Use a for loop\nHint: Use a while loop\nHint: Use a for\
    \ loop\nHint: Use a while loop\nHint: Use a for loop\nHint: Use a while loop\n\
    Hint: Use a for loop\nHint: Use a while loop\nHint\nusing Test\n\n@testset begin\n\
    \ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_60rj3rz.jl:11\nin expression starting at\
    \ /tmp/tmp_60rj3rz.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        return 1 \n    else \n        largest_divisor(n-1)\n\
    \        largest_divisor(n/2)\n        if n%2==0 \n            return n\n    \
    \    else \n            return largest_divisor(n/2) \nend \n</cell>\n<code language=julia-1.4>\n\
    largest_divisor(15)\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ in a positive integer $n$ and returns the number of divisors of $n$ that are\
    \ greater than or equal to $n$. For example, if the input $n$ is 10, the function\
    \ should return 3.\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7hbwlx4t.jl:16\nin expression starting at\
    \ /tmp/tmp7hbwlx4t.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 then return 0 \n    else if n%2==0 then return n \n    else return\
    \ largest_divisor(n/2)\nend \n</cell>\n<code language=julia-1.0>\nlargest_divisor(15)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ given number. \nThe factorial of a number $n$ is defined as $n!$, where $n$\
    \ is an integer greater than or equal to 1.\nusing Test\n\n@testset begin\n\n\
    candidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp2bhnetq3.jl:6\nin expression starting at /tmp/tmp2bhnetq3.jl:6\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n == 1 \n        1\n    else\n        largest_divisor(n - 1) \n   \
    \ end\nend\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n</cell>\n\
    <text>\nExercise 4\nWrite a function that returns the smallest number that divides\
    \ n evenly, smaller than n\n    >>> smallest_divisor(15)\n    3\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
    \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_xgae8g4.jl:12\nin expression starting at\
    \ /tmp/tmp_xgae8g4.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 then return 0\n    else if n%2==0 then return n\n    else return\
    \ largest_divisor(n/2)\nend\n</cell>\n<code language=julia-1.3>\nlargest_divisor(15)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the number of divisors\
    \ of n that are less than or equal to n.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpwg_3s_g9.jl:6\nin expression starting at /tmp/tmpwg_3s_g9.jl:6\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 \n        0\n    else if n==1 \n        1\n    else if n%2==0\
    \ \n        largest_divisor(n/2)\n    else \n        largest_divisor(n/2)+1\n\
    end\n</cell>\n<code language=julia-1.0>\nlargest_divisor(15)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the number of divisors of a given number\
    \ n. For example, for the number 15, the number of divisors is 3.\nusing Test\n\
    \n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\
    \t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqk6rkxpm.jl:8\nin expression starting at /tmp/tmpqk6rkxpm.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 \n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that returns the first n prime\
    \ numbers. \nHint: You may want to use the sieve of Eratosthenes or the Sieve\
    \ of Atkin\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
    \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0t00vs27.jl:12\nin expression starting at\
    \ /tmp/tmp0t00vs27.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        return n\n    else if n%2==0 \n        return largest_divisor(n/2)\n\
    \    else \n        return largest_divisor(n/2) + 1\nend\n</cell>\n<code language=julia-1.3>\n\
    largest_divisor(15)\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the number of divisors of n that are less than or equal to n.\nusing Test\n\n\
    @testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t\
    @test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb19sr32u.jl:8\nin expression starting at /tmp/tmpb19sr32u.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0\n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the number of divisors of n that are\
    \ smaller than n.\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm7t0e7hf.jl:12\nin expression starting at\
    \ /tmp/tmpm7t0e7hf.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        return 1 \n    else \n        return largest_divisor(n-1)\
    \ + 1 \nend \n</cell>\n<code language=julia-1.4>\nlargest_divisor(15)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the number of divisors of n\
    \ that are less than or equal to n.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6mtd04no.jl:11\nin expression starting at\
    \ /tmp/tmp6mtd04no.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0\n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.3>\n@code_warntype largest_divisor(15)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the smallest number\
    \ that divides n evenly, larger than n\nHint: use the function largest_divisor(n::Int64)::Int64\n\
    using Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
    \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfgqeny97.jl:12\nin expression starting at\
    \ /tmp/tmpfgqeny97.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 then return 0\n    if n%2==0 then return n\n    else return largest_divisor(n/2)\n\
    end\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the factorial of a given number. \n\
    For example, factorial(5) = 5 \xD7 4 \xD7 3 \xD7 2 \xD7 1\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpdyo8e_60.jl:6\nin expression starting at /tmp/tmpdyo8e_60.jl:6\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 then return 1\n    else if n%2==0 then return n//2\n    else return\
    \ largest_divisor(n//2)\nend\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ given number. For example, factorial(5) = 5 \xD7 4 \xD7 3 \xD7 2 \xD7 1 = 3628800\n\
    using Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
    \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmps_5dsw7f.jl:6\nin expression starting at /tmp/tmps_5dsw7f.jl:6\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n == 0 \n        0\n    else if n % 2 == 0 \n        largest_divisor(n\
    \ / 2)\n    else\n        largest_divisor(n / 2) + 1\n    end\nend\n</cell>\n\
    <code language=julia-1.0>\nlargest_divisor(15)\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns the number of divisors of n that are less than or\
    \ equal to n.\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t\
    @test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) ==\
    \ 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsruw9yij.jl:8\nin expression starting at /tmp/tmpsruw9yij.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 \n        return 0 \n    else if n%2==0 \n        return n \n\
    \    else \n        return largest_divisor(n/2) \nend\n</cell>\n<code language=julia-1.5>\n\
    largest_divisor(15)\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the number of divisors of n that are less than or equal to n.\nusing Test\n\n\
    @testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t\
    @test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo56e7d2y.jl:8\nin expression starting at /tmp/tmpo56e7d2y.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        1\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n@code_warntype largest_divisor(15)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of divisors\
    \ of n that are less than or equal to n.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt7jaws78.jl:12\nin expression starting at\
    \ /tmp/tmpt7jaws78.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 \n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2po23tkr.jl:12\nin expression starting at\
    \ /tmp/tmp2po23tkr.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0\n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the smallest number that divides n evenly,\
    \ smaller than n.\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgboacuik.jl:12\nin expression starting at\
    \ /tmp/tmpgboacuik.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n % 2 == 0 \n        then largest_divisor(n / 2)\n        else largest_divisor(3\
    \ * n + 1)\n    end\nend\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the factorial of a\
    \ given number. For example, factorial(5) = 5 \xD7 4 \xD7 3 \xD7 2 \xD7 1\nusing\
    \ Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
    \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"largest_divisor\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0us35fxk.jl:7\nin expression starting at /tmp/tmp0us35fxk.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0\n        0\n    else\n        largest_divisor(n-1)\n        if\
    \ n%2==0\n            largest_divisor(n/2)\n        else\n            largest_divisor(n/2)+1\n\
    \        end\n    end\nend\n</cell>\n<code language=julia-1.5>\n@time largest_divisor(15)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of divisors\
    \ of n that are less than or equal to n.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkid8jym7.jl:17\nin expression starting at\
    \ /tmp/tmpkid8jym7.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0\n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that returns the smallest number\
    \ that divides n evenly, smaller than n.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcoaml8ul.jl:12\nin expression starting at\
    \ /tmp/tmpcoaml8ul.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 then return 0\n    else if n%2==0 then return n\n    else return\
    \ largest_divisor(n/2)\nend\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the smallest number\
    \ that divides n evenly, smaller than n.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpx2kvpy_u.jl:6\nin expression starting at /tmp/tmpx2kvpy_u.jl:6\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0\n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the factorial of a given number. For\
    \ example, factorial(5) = 5 \xD7 4 \xD7 3 \xD7 2 \xD7 1\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprupqu09a.jl:12\nin expression starting at\
    \ /tmp/tmprupqu09a.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 then return 0\n    else if n%2==0 then return n\n    else return\
    \ largest_divisor(n/2)\nend\n</cell>\n<code language=julia-1.0>\nlargest_divisor(15)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the factorial of a\
    \ given number. For example, factorial(5) = 5 * 4 * 3 * 2 * 1 = 120\nusing Test\n\
    \n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\
    \t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpa14f4rwo.jl:6\nin expression starting at /tmp/tmpa14f4rwo.jl:6\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0\n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n@time largest_divisor(15)\n</cell>\n\
    <code language=julia-1.5>\n@time largest_divisor(15)\n</cell>\n<code language=julia-1.5>\n\
    @time largest_divisor(15)\n</cell>\n<code language=julia-1.5>\n@time largest_divisor(15)\n\
    </cell>\n<code language=julia-1.5>\n@time largest_divisor(15)\n</cell>\n<code\
    \ language=julia-1.5>\n@time largest_divisor(15)\n</cell>\n<code language=julia-1.5>\n\
    @time largest_divisor(15)\n</cell>\n<code language=julia-1.5>\n@time largest_divisor(15)\n\
    </cell>\n<code language=julia-1.5>\n@time largest_divisor(15)\n</cell>\n<code\
    \ language=julia-1.5>\n@time largest_divisor(15)\n</cell>\n<code language=julia-1.5>\n\
    @time largest_divisor(15)\n</cell>\n<code language=julia-1.5>\n@time largest_divisor(15)\n\
    </cell>\n<code language=julia-1.5>\n@time largest_divisor(15)\n</cell>\n<code\
    \ language=julia-1.5>\n@time largest_divisor(15)\n</cell>\n<code language=julia-1.5>\n\
    @time largest_divisor(15)\n</cell>\n<code language=julia-1.5>\n@time largest_divisor(15)\n\
    </cell>\n<code language=julia-1.5>\n@time largest_divisor(15)\n</cell>\n<code\
    \ language=julia-1.5>\n@time largest_divisor(15)\n</cell>\n<code language=julia-1.5>\n\
    @time largest_divisor(15)\n</cell>\n<code language=julia-1.5>\n@time largest_divisor(15)\n\
    </cell>\n<code language=julia-1.5>\n@time largest_divisor(15)\n</cell>\n<code\
    \ language=julia-1.5>\n@time largest_divisor(15)\n</cell>\n<code language=julia-1.5>\n\
    @time largest_divisor(15)\n</cell>\n<code language=julia-1.5>\n@time largest_divisor(15)\n\
    </cell>\n<code language=julia-1.5>\n@time largest_divisor(15)\n</cell>\n<code\
    \ language=julia-1.5>\n@time largest_divisor(15)\n</cell>\n<code language=julia-1.5>\n\
    @time largest_divisor(15)\n</cell>\n<code language=\nusing Test\n\n@testset begin\n\
    \ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6wp6jggl.jl:12\nin expression starting at\
    \ /tmp/tmp6wp6jggl.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0\n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the number of divisors of n that are\
    \ less than or equal to n.\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplq2w237t.jl:12\nin expression starting at\
    \ /tmp/tmplq2w237t.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        return 1 \n    else \n        return largest_divisor(n-1)\
    \ + 1 \nend \n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of divisors of n\
    \ that are less than or equal to n.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmx72qb03.jl:11\nin expression starting at\
    \ /tmp/tmpmx72qb03.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        return 1 \n    else \n        largest_divisor(n-1) +\
    \ 1 \n    end\nend\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of divisors\
    \ of n that are less than or equal to n.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxp78en2i.jl:12\nin expression starting at\
    \ /tmp/tmpxp78en2i.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n == 1 \n        1\n    else \n        largest_divisor(n-1) + 1 \n\
    end\n</cell>\n<text>\nExercise 10\nWrite a function that returns the factorial\
    \ of a number. For example, factorial(5) = 5 * 4 * 3 * 2 * 1 = 120\nusing Test\n\
    \n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\
    \t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprivdgnmy.jl:11\nin expression starting at\
    \ /tmp/tmprivdgnmy.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        1\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.3>\n@code_warntype largest_divisor(15)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the number of divisors\
    \ of a given number n. For example, for the number 15, there are 3 divisors: 1,\
    \ 2, and 5.\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t\
    @test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) ==\
    \ 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9qi0ktm7.jl:12\nin expression starting at\
    \ /tmp/tmp9qi0ktm7.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0\n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the number of divisors of n that are\
    \ less than or equal to n.\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqf90dbgl.jl:12\nin expression starting at\
    \ /tmp/tmpqf90dbgl.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 then return 0\n    if n==1 then return 1\n    if n%2==0 then return\
    \ n\n    \n    largest_divisor=n\n    \n    for d in range(3,n+1,2) do \n    \
    \    if n%d==0 then \n            largest_divisor=d\n            break\n    end\n\
    \    \n    return largest_divisor\nend\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of divisors\
    \ of a given number n. \nFor example, for the number 12, there are 3 divisors:\
    \ 1, 2, and 3.\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmptieazd9k.jl:6\nin expression starting at /tmp/tmptieazd9k.jl:6\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        1\n    else \n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.3>\nlargest_divisor(15)\n</cell>\n<text>\n\
    Exercise 4\nWrite a function that returns the number of divisors of a given number\
    \ n. \nFor example, for n = 10, the function should return 3.\nusing Test\n\n\
    @testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t\
    @test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2f8loiun.jl:12\nin expression starting at\
    \ /tmp/tmp2f8loiun.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        return 1 \n    else \n        return largest_divisor(n-1)\
    \ + 1 \nend \n</cell>\n<code language=julia-1.3>\n@time largest_divisor(15)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that computes the factorial of a\
    \ given number. \nThe factorial of a number $n$ is defined as\nusing Test\n\n\
    @testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t\
    @test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr8cc0079.jl:11\nin expression starting at\
    \ /tmp/tmpr8cc0079.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 \n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.3>\nlargest_divisor(15)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the first n prime numbers. \nHint: use\
    \ primes() function from Julia's Base package\nusing Test\n\n@testset begin\n\n\
    candidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptm0t3tz0.jl:12\nin expression starting at\
    \ /tmp/tmptm0t3tz0.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        return n\n    else if n%2==0 \n        return largest_divisor(n/2)\n\
    \    else \n        return largest_divisor(n/2) + 1\nend\n</cell>\n<code language=julia-1.4>\n\
    largest_divisor(15)\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the first n positive integers greater than or equal to n. For example, first_n_positive(10)\
    \ should return [10, 11, 12, 13, 14, 15].\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8dmjqu60.jl:8\nin expression starting at /tmp/tmp8dmjqu60.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n == 0 \n        0\n    else\n        largest_divisor(n - 1) \n   \
    \     if n % 2 == 0\n            largest_divisor(n / 2)\n        else\n      \
    \      largest_divisor(n / 2)\n        end\n    end\nend\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=julia,recursion |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5_ygosga.jl:17\nin expression starting at\
    \ /tmp/tmp5_ygosga.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n % 2 == 0 \n        then largest_divisor(n / 2)\n        else largest_divisor(3\
    \ * n + 1) \n    end\nend\n</cell>\n<code language=julia-1.5>\n@time largest_divisor(150)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the first n prime numbers.\
    \ \nHint: use an iterator to generate prime numbers. \nHint: use an iterator to\
    \ generate prime numbers. \nHint: use an iterator to generate prime numbers. \n\
    Hint: use an iterator to generate prime numbers. \nHint: use an iterator to generate\
    \ prime numbers. \nHint: use an iterator to generate prime numbers. \nHint: use\
    \ an iterator to generate prime numbers. \nHint: use an iterator to generate prime\
    \ numbers. \nHint: use an iterator to generate prime numbers. \nHint: use an iterator\
    \ to generate prime numbers. \nHint: use an iterator to generate prime numbers.\
    \ \nHint: use an iterator to generate prime numbers. \nHint: use an iterator to\
    \ generate prime numbers. \nHint: use an iterator to generate prime numbers. \n\
    Hint: use an iterator to generate prime numbers. \nHint: use an iterator to generate\
    \ prime numbers. \nHint: use an iterator to generate prime numbers. \nHint: use\
    \ an iterator to generate prime numbers. \nHint: use an iterator to generate prime\
    \ numbers. \nHint: use an iterator to generate prime numbers. \nHint: use an iterator\
    \ to generate prime numbers. \nHint: use an iterator to generate prime numbers.\
    \ \nHint: use an iterator to generate prime numbers. \nHint: use an iterator to\
    \ generate prime numbers. \nHint: use an iterator to generate prime numbers. \n\
    Hint: use an iterator to generate prime numbers. \nHint: use an iterator to generate\
    \ prime numbers. \nHint: use an iterator to generate prime numbers. \nHint: use\
    \ an iterator to generate prime numbers. \nHint: use an iterator to generate prime\
    \ numbers. \nHint: use an iterator to generate prime numbers. \nHint: use an iterator\
    \ to generate prime numbers. \nHint: use an iterator to generate prime numbers.\
    \ \nHint: use an iterator to generate prime numbers. \nHint: use an iterator to\
    \ generate prime numbers. \nHint: use an iterator to generate prime numbers. \n\
    Hint: use an iterator to generate prime numbers. \nHint: use an iterator to generate\
    \ prime numbers. \nHint: use an iterator to generate prime numbers. \nHint: use\
    \ an iterator to generate prime numbers. \nHint: use an iterator \nusing Test\n\
    \n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\
    \t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"largest_divisor\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpil6heoji.jl:7\nin expression starting at /tmp/tmpil6heoji.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        1\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n@code_warntype largest_divisor(15)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the largest prime factor\
    \ of a given number. For example, given n = 12, the largest prime factor is 3.\n\
    using Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
    \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp70y57yf4.jl:12\nin expression starting at\
    \ /tmp/tmp70y57yf4.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 \n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.3>\nlargest_divisor(15)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the smallest number that divides n evenly,\
    \ smaller than n.\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptbsg83mb.jl:12\nin expression starting at\
    \ /tmp/tmptbsg83mb.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 \n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that returns the factorial\
    \ of a given number. For example, factorial(5) = 5 x 4 x 3 x 2 x 1 = 120\nusing\
    \ Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
    \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa0w_6oaq.jl:12\nin expression starting at\
    \ /tmp/tmpa0w_6oaq.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        return n\n    else if n%2==0 \n        return largest_divisor(n/2)\n\
    \    else \n        return largest_divisor(n/2) + 1\nend\n</cell>\n<code language=julia-1.5>\n\
    largest_divisor(15)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of divisors of n that are less than or equal to n.\nusing Test\n\n\
    @testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t\
    @test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7wnlrp77.jl:8\nin expression starting at /tmp/tmp7wnlrp77.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n % 2 == 0 \n        then largest_divisor(n / 2)\n        else largest_divisor(3\
    \ * n + 1)\n    end\nend\n</cell>\n<code language=julia-1.5>\n@time largest_divisor(15)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that finds the largest number that\
    \ divides n evenly, smaller than n.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"largest_divisor\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqxdgtpik.jl:7\nin expression starting at /tmp/tmpqxdgtpik.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n % 2 == 0 \n        then largest_divisor(n / 2)\n        else largest_divisor(3\
    \ * n + 1) \n    end\nend\n</cell>\n<code language=julia-1.5>\n@time largest_divisor(15);\
    \ @time largest_divisor(100); @time largest_divisor(1000);\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the smallest number that divides n evenly,\
    \ smaller than n.\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"largest_divisor\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprlpk1zxq.jl:7\nin expression starting at /tmp/tmprlpk1zxq.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        return n\n    else if n%2==0 \n        return largest_divisor(n/2)\n\
    \    else \n        return largest_divisor(n/2)+1\nend\n</cell>\n<code language=julia-1.3>\n\
    largest_divisor(15)\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ an array of numbers and returns the number of even numbers in the array. For\
    \ example, if the array is [3, 7, 9, 10, 12, 15], the function should return 3.\n\
    using Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
    \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8bvgfyes.jl:8\nin expression starting at /tmp/tmp8bvgfyes.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n % 2 == 0\n        then largest_divisor(n / 2)\n        else largest_divisor(3\
    \ * n + 1) \n    end\nend\n</cell>\n<code language=julia-1.4>\nlargest_divisor(15)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of divisors\
    \ of n that are less than or equal to n.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"largest_divisor\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr8mh949m.jl:7\nin expression starting at /tmp/tmpr8mh949m.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        return 1 \n    else if n%2==0 \n        return largest_divisor(n/2)\
    \ \n    else \n        return largest_divisor(n/2) + 1 \nend \n</cell>\n<code\
    \ language=julia-1.3>\n@time largest_divisor(15); @time largest_divisor(150)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the number of divisors\
    \ of n that are less than or equal to n.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk9r8_uwc.jl:8\nin expression starting at /tmp/tmpk9r8_uwc.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 then return 0\n    else if n%2==0 then return n\n    else return\
    \ largest_divisor(n/2)\nend\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n\
    </cell>\n<text>\nProblem 7\nWrite a function that returns the number of prime\
    \ numbers less than or equal to a given number.\nusing Test\n\n@testset begin\n\
    \ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpgpaylwvu.jl:6\nin expression starting at /tmp/tmpgpaylwvu.jl:6\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        1 \n    else \n        largest_divisor(n-1) + 1 \nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4xkm0e5p.jl:11\nin expression starting at\
    \ /tmp/tmp4xkm0e5p.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 \n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the factorial of a given number\nusing\
    \ Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
    \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfj7t730_.jl:12\nin expression starting at\
    \ /tmp/tmpfj7t730_.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        return n\n    else if n%2==0 \n        return largest_divisor(n/2)\n\
    \    else \n        return largest_divisor(n/2) + 1\nend\n</cell>\n<code language=julia-1.4>\n\
    largest_divisor(15)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of divisors of n that are less than or equal to n.\nusing Test\n\n\
    @testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t\
    @test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwme56t2a.jl:8\nin expression starting at /tmp/tmpwme56t2a.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 then return 0\n    else if n%2==0 then return n\n    else return\
    \ largest_divisor(n/2)\nend\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n\
    </cell>\n<text>\nProblem 3\nWrite a function that returns the sum of the numbers\
    \ from 1 to n that are divisible by k.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpmynekyma.jl:6\nin expression starting at /tmp/tmpmynekyma.jl:6\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n == 0\n        0\n    else\n        largest_divisor(n-1) + n // largest_divisor(n-1)\n\
    end\n</cell>\n<code language=julia-1.5>\n@time largest_divisor(100)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of divisors of n\
    \ that are less than or equal to n.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9ximj307.jl:11\nin expression starting at\
    \ /tmp/tmp9ximj307.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n == 0 \n        0\n    else\n        largest_divisor(n / 2) + n\n\
    \    end\nend\n</cell>\n<code language=julia-1.3>\n@code_warntype largest_divisor(15)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the smallest number\
    \ that divides n evenly, larger than n\n    >>> smallest_divisor(15)\n    3\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t\
    @test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) ==\
    \ 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnyx1s5xj.jl:12\nin expression starting at\
    \ /tmp/tmpnyx1s5xj.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 then return 0\n    if n==1 then return 1\n    if n%2==0 then return\
    \ n\n    else return largest_divisor(n/2)\nend\n</cell>\n<code language=julia-1.4>\n\
    largest_divisor(15)\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the number of divisors of n that are less than or equal to n.\nusing Test\n\n\
    @testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t\
    @test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpwp_mn8_6.jl:6\nin expression starting at /tmp/tmpwp_mn8_6.jl:6\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 then return 0\n    if n==1 then return 1\n    \n    largest_divisor=n\n\
    \    \n    for d in divisors(n) do \n        if n%d==0 then \n            if largest_divisor<d\
    \  then \n                largest_divisor=d\n            end\n        end\n  \
    \  end\n    \n    return largest_divisor\nend\n</cell>\n<code language=julia-1.5>\n\
    @time largest_divisor(150)\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ finds the smallest number that divides n evenly, larger than n\n    >>> smallest_divisor(15)\n\
    \    3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmplfrx1jwz.jl:6\nin expression starting at /tmp/tmplfrx1jwz.jl:6\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n % 2 == 0 \n        then largest_divisor(n / 2)\n        else largest_divisor(3\
    \ * n + 1) \nend\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the factorial of a given number.\
    \ For example, factorial(5) = 5 \xD7 4 \xD7 3 \xD7 2 \xD7 1\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"largest_divisor\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuizptau3.jl:7\nin expression starting at /tmp/tmpuizptau3.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        1\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n@time largest_divisor(15)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the number of divisors of n\
    \ that are less than or equal to n.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1r8c8ofa.jl:12\nin expression starting at\
    \ /tmp/tmp1r8c8ofa.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0\n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n@code_warntype largest_divisor(15)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype largest_divisor(15)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype largest_divisor(15)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype largest_divisor(15)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype largest_divisor(15)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ largest_divisor(15)\n</cell>\n<code language=julia-1.5>\n@code_warntype largest_divisor(15)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype largest_divisor(15)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype largest_divisor(15)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype largest_divisor(15)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype largest_divisor(15)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ largest_divisor(15)\n</cell>\n<code language=julia-1.5>\n@code_warntype largest_divisor(15)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype largest_divisor(15)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype largest_divisor(15)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype largest_divisor(15)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype largest_divisor(15)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ largest_divisor(15)\n</cell>\n<code language=julia-1.5>\n@code_warntype largest_divisor(15)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype largest_divisor(15)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype largest_divisor(15)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype largest_divisor(15)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype largest_divisor(15)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ largest_divisor(15)\n</cell>\n<code language=julia-1.5>\n@\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpduc1gsda.jl:12\nin expression starting at\
    \ /tmp/tmpduc1gsda.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        return 1 \n    else \n        return largest_divisor(n-1)\
    \ + 1 \nend \n</cell>\n<code language=julia-1.3>\n@time largest_divisor(15)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the number of divisors\
    \ of a given number. For example, for the number 12, there are 3 divisors: 1,\
    \ 2, and 3.\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t\
    @test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) ==\
    \ 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb8_995uj.jl:11\nin expression starting at\
    \ /tmp/tmpb8_995uj.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        return 1 \n    else \n        largest_divisor(n-1) +\
    \ largest_divisor(n-2) \nend \n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the number of divisors\
    \ of n that are less than or equal to n.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppalwpfm4.jl:11\nin expression starting at\
    \ /tmp/tmppalwpfm4.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n % 2 == 0\n        then largest_divisor(n / 2)\n        else largest_divisor(3\
    \ * n + 1) \n    end\nend\n</cell>\n<code language=julia-1.0>\nlargest_divisor(15)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of divisors\
    \ of n that are less than or equal to n.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"largest_divisor\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps9714t9v.jl:7\nin expression starting at /tmp/tmps9714t9v.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        1\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.3>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi7vqi5_r.jl:12\nin expression starting at\
    \ /tmp/tmpi7vqi5_r.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        1\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n@code_warntype largest_divisor(15)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the factorial of a\
    \ given number. \nThe factorial of a number $n$ is defined as:\nusing Test\n\n\
    @testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t\
    @test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuibj4551.jl:12\nin expression starting at\
    \ /tmp/tmpuibj4551.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n == 1 \n        return 1 \n    else \n        return largest_divisor(n-1)\
    \ + 1 \nend \n</cell>\n<code language=julia-1.5>\n@time largest_divisor(100)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the largest prime factor\
    \ of a given number. For example, for the number 120, the largest prime factor\
    \ is 2. For this exercise, you should use the sieve of Eratosthenes. \nHint: To\
    \ find the prime factors of a number, you can use the sieve of Eratosthenes (https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes).\
    \ \nHint: To find the largest prime factor of a number, you can use the sieve\
    \ of Eratosthenes (https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes). \nHint:\
    \ To find the largest prime factor of a number, you can use the sieve of Eratosthenes\
    \ (https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes). \nHint: To find the largest\
    \ prime factor of a number, you can use the sieve of Eratosthenes (https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes).\
    \ \nHint: To find the largest prime factor of a number, you can use the sieve\
    \ of Eratosthenes (https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes). \nHint:\
    \ To find the largest prime factor of a number, you can use the sieve of Eratosthenes\
    \ (https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes). \nHint: To find the largest\
    \ prime factor of a number, you can use the sieve of Eratosthenes (https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes).\
    \ \nHint: To find the largest prime factor of a number, you can use the sieve\
    \ of Eratosthenes (https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes). \nHint:\
    \ To find the largest prime factor of a number, you can use the sieve of Eratosthenes\
    \ (https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes). \nHint: To find the largest\
    \ prime factor of a number, you can use the sieve of Eratosthenes (https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes).\
    \ \nHint: To find the largest prime factor of a number, you can use the sieve\
    \ of Eratosthenes (https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes). \nHint:\
    \ To find the largest prime factor of a number, you can use the sieve of Eratosthenes\
    \ (https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes). \nHint: To find the largest\
    \ prime factor of a number, you can use the sieve of Eratosthenes (https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes).\
    \ \nHint: To find the largest prime factor of a number, you can use the si\nusing\
    \ Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
    \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmp3aumu7.jl:11\nin expression starting at\
    \ /tmp/tmpmp3aumu7.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 then return 0\n    if n==1 then return 1\n    if n%2==0 then return\
    \ n\n    else return largest_divisor(n/2)\nend\n</cell>\n<code language=julia-1.5>\n\
    largest_divisor(15)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of divisors of n that are less than or equal to n.\nusing Test\n\n\
    @testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t\
    @test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp8gatorjg.jl:6\nin expression starting at /tmp/tmp8gatorjg.jl:6\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n % 2 == 0 \n        then largest_divisor(n / 2)\n        else largest_divisor(3\
    \ * n + 1) \nend\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the largest prime factor of\
    \ a given number. \nFor example, given n = 12, it should return 3\nHint: use an\
    \ if statement to check if n is evenly divisible by any prime factors of n\nusing\
    \ Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
    \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"largest_divisor\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1zjlnjve.jl:7\nin expression starting at /tmp/tmp1zjlnjve.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 \n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the number of divisors of a given number\
    \ n. For example, for the number 15, the number of divisors is 3.\nusing Test\n\
    \n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\
    \t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz_mgb8pn.jl:12\nin expression starting at\
    \ /tmp/tmpz_mgb8pn.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n % 2 == 0 \n        then largest_divisor(n / 2)\n        else largest_divisor(3\
    \ * n + 1) \n    end\nend\n</cell>\n<code language=julia-1.5>\n@time largest_divisor(150)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of divisors\
    \ of n that are less than or equal to n.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"largest_divisor\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuqp89osf.jl:7\nin expression starting at /tmp/tmpuqp89osf.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        return 1 \n    else \n        largest_divisor(n-1) \n\
    \        if n % 2 == 0 \n            largest_divisor(n/2) \n        else \n  \
    \          largest_divisor(n/2) \n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    largest_divisor(15)\n</cell>\n<text>\nExercise 4\nWrite a function that returns\
    \ the number of divisors of n that are less than or equal to n.\nusing Test\n\n\
    @testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t\
    @test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxnv1lj6l.jl:16\nin expression starting at\
    \ /tmp/tmpxnv1lj6l.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        return n\n    else if n%2==0 \n        return largest_divisor(n/2)\n\
    \    else \n        return largest_divisor(n/2) + 1\nend\n</cell>\n<code language=julia-1.5>\n\
    largest_divisor(15)\n</cell>\n<text>\nExercise 2\nWrite a function that finds\
    \ the smallest number that divides n evenly, smaller than n\nHint: use largest_divisor(n)\
    \ function\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
    \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsimmgqrf.jl:8\nin expression starting at /tmp/tmpsimmgqrf.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        return n\n    else if n%2==0 \n        return largest_divisor(n/2)\n\
    \    else \n        return largest_divisor(n/2)+1\nend\n</cell>\n<code language=julia-1.5>\n\
    largest_divisor(15)\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the smallest number that can be divided by all numbers from 1 to n.\nusing Test\n\
    \n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\
    \t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp58efs0xw.jl:8\nin expression starting at /tmp/tmp58efs0xw.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n == 1\n        1\n    else\n        largest_divisor(n / 2)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n@code_warntype largest_divisor(15)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ given number. For example, factorial(5) = 5 \xD7 4 \xD7 3 \xD7 2 \xD7 1\nusing\
    \ Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
    \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxzshf982.jl:12\nin expression starting at\
    \ /tmp/tmpxzshf982.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 \n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.3>\nlargest_divisor(15)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the largest number that divides n evenly,\
    \ smaller than n.\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_a2c1qig.jl:12\nin expression starting at\
    \ /tmp/tmp_a2c1qig.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 then return 0\n    if n==1 then return 1\n    largest_divisor(n/2)\n\
    \    if n%2==0 then return n\n    largest_divisor(n/2+1)\nend\n</cell>\n<code\
    \ language=julia-1.0>\nlargest_divisor(15)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the first n prime numbers. \nHint: use an iterator to\
    \ generate prime numbers\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp0q9c9nw9.jl:6\nin expression starting at /tmp/tmp0q9c9nw9.jl:6\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 then return 0\n    if n==1 then return 1\n    if n%2==0 then return\
    \ n\n    else return largest_divisor(n/2)\nend\n</cell>\n<code language=julia-1.3>\n\
    largest_divisor(15)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of divisors of n that are less than or equal to n.\nusing Test\n\n\
    @testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t\
    @test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp2i6fl8s1.jl:6\nin expression starting at /tmp/tmp2i6fl8s1.jl:6\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        return n\n    else if n%2==0 \n        return largest_divisor(n/2)\n\
    \    else \n        return largest_divisor(n/2)+1\nend\n</cell>\n<code language=julia-1.5>\n\
    largest_divisor(15)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of divisors of n that are less than or equal to n.\nusing Test\n\n\
    @testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t\
    @test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd4pnnqd4.jl:8\nin expression starting at /tmp/tmpd4pnnqd4.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n % 2 == 0 \n        then largest_divisor(n / 2)\n        else largest_divisor(3\
    \ * n + 1)\n    end\nend\n</cell>\n<code language=julia-1.3>\nlargest_divisor(15)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of divisors\
    \ of a given number n. \nFor example, for n = 10, the function should return 3.\n\
    using Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
    \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"largest_divisor\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv55tru1g.jl:7\nin expression starting at /tmp/tmpv55tru1g.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        return n\n    else if n%2==0 \n        return largest_divisor(n/2)\n\
    \    else \n        return largest_divisor(n/2) + 1\nend\n</cell>\n<code language=julia-1.5>\n\
    largest_divisor(15)\n</cell>\n<text>\nExercise 2\nWrite a function that finds\
    \ the smallest number that divides n evenly, smaller than n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpczyr578o.jl:8\nin expression starting at /tmp/tmpczyr578o.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        1\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.3>\nlargest_divisor(15)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the number of divisors of a given number.\
    \ For example, for the number 15, it should return 3.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplehf5mq8.jl:12\nin expression starting at\
    \ /tmp/tmplehf5mq8.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        return n\n    else if n%2==0 \n        return largest_divisor(n/2)\n\
    \    else \n        return largest_divisor(n/2)+1\nend\n</cell>\n<code language=julia-1.5>\n\
    largest_divisor(15)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of divisors of n that are less than or equal to n.\nusing Test\n\n\
    @testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t\
    @test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjw8qwr8y.jl:8\nin expression starting at /tmp/tmpjw8qwr8y.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        1\n    else \n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n@code_warntype largest_divisor(15)\n\
    </cell>\n<text>\nExercise 4\nWrite a function that returns the factorial of a\
    \ given number. \nFor example, factorial(5) = 5 x 4 x 3 x 2 x 1 = 120\nusing Test\n\
    \n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\
    \t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgil7q_sy.jl:12\nin expression starting at\
    \ /tmp/tmpgil7q_sy.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 then return 0\n    else if n%2==0 then return n\n    else return\
    \ largest_divisor(n/2)\nend\n</cell>\n<code language=julia-1.4>\nlargest_divisor(15)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the factorial of a\
    \ given number. \nFor example, factorial(5) = 5 * 4 * 3 * 2 * 1 = 120\nHint: use\
    \ recursion\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t\
    @test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) ==\
    \ 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp46nla8m6.jl:6\nin expression starting at /tmp/tmp46nla8m6.jl:6\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 then return 0\n    else if n%2==0 then return n\n    else return\
    \ largest_divisor(n/2)\nend\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the smallest number\
    \ that divides n evenly, smaller than n.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmprj52eq78.jl:6\nin expression starting at /tmp/tmprj52eq78.jl:6\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        return 1 \n    else \n        return largest_divisor(n-1)\
    \ + 1 \nend \n</cell>\n<code language=julia-1.4>\nlargest_divisor(15)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the factorial of a given number.\
    \ \nHint: use recursion.\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4hp1p1do.jl:11\nin expression starting at\
    \ /tmp/tmp4hp1p1do.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 then return 0\n    else if n%2==0 then return n\n    else return\
    \ largest_divisor(n/2)\nend\n</cell>\n<code language=julia-1.3>\nlargest_divisor(15)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ given number. \nFor a given number n, find the factorial of n. \nFor a given\
    \ number n, find the factorial of n. \nFor a given number n, find the factorial\
    \ of n. \nFor a given number n, find the factorial of n. \nFor a given number\
    \ n, find the factorial of n. \nFor a given number n, find the factorial of n.\
    \ \nFor a given number n, find the factorial of n. \nFor a given number n, find\
    \ the factorial of n. \nFor a given number n, find the factorial of n. \nFor a\
    \ given number n, find the factorial of n. \nFor a given number n, find the factorial\
    \ of n. \nFor a given number n, find the factorial of n. \nFor a given number\
    \ n, find the factorial of n. \nFor a given number n, find the factorial of n.\
    \ \nFor a given number n, find the factorial of n. \nFor a given number n, find\
    \ the factorial of n. \nFor a given number n, find the factorial of n. \nFor a\
    \ given number n, find the factorial of n. \nFor a given number n, find the factorial\
    \ of n. \nFor a given number n, find the factorial of n. \nFor a given number\
    \ n, find the factorial of n. \nFor a given number n, find the factorial of n.\
    \ \nFor a given number n, find the factorial of n. \nFor a given number n, find\
    \ the factorial of n. \nFor a given number n, find the factorial of n. \nFor a\
    \ given number n, find the factorial of n. \nFor a given number n, find the factorial\
    \ of n. \nFor a given number n, find the factorial of n. \nFor a given number\
    \ n, find the factorial of n. \nFor a given number n, find the factorial of n.\
    \ \nFor a given number n, find the factorial of n. \nFor a given number n, find\
    \ the factorial of n. \nFor a given number n, find the factorial of n. \nFor a\
    \ given number n, find the factorial of n. \nFor a given number n, find the factorial\
    \ of n. \nFor a given number n, find the factorial of n. \nFor a given number\
    \ n, find the factorial of n. \nFor a given number n, find the factorial of n.\
    \ \nFor a given number n, find the factorial of n. \nFor a given number n, find\
    \ the factorial of n. \nFor a given number n, \nusing Test\n\n@testset begin\n\
    \ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpv359t_1b.jl:6\nin expression starting at /tmp/tmpv359t_1b.jl:6\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n % 2 == 0 \n        then largest_divisor(n / 2)\n        else largest_divisor(3\
    \ * n + 1) \n    end\nend\n</cell>\n<text>\nExercise 3: Write a function that\
    \ returns the largest number that can be divided by all the numbers from 1 to\
    \ n.\nFor example, largest_divisor(15) should return 5 (the largest number that\
    \ can be divided by all the numbers from 1 to 15).\nusing Test\n\n@testset begin\n\
    \ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"largest_divisor\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplll2ii8p.jl:7\nin expression starting at /tmp/tmplll2ii8p.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0\n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.0>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc34yxbef.jl:12\nin expression starting at\
    \ /tmp/tmpc34yxbef.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 then return 1\n    if n==2 then return 2\n    if n==3 then return\
    \ 3\n    if n==4 then return 4\n    if n==5 then return 5\n    if n==6 then return\
    \ 6\n    if n==7 then return 7\n    if n==8 then return 8\n    if n==9 then return\
    \ 9\n    if n==10 then return 10\n    if n==11 then return 11\n    if n==12 then\
    \ return 12\n    if n==13 then return 13\n    if n==14 then return 14\n    if\
    \ n==15 then return 15\n    if n==16 then return 16\n    if n==17 then return\
    \ 17\n    if n==18 then return 18\n    if n==19 then return 19\n    if n==20 then\
    \ return 20\n    if n==21 then return 21\n    if n==22 then return 22\n    if\
    \ n==23 then return 23\n    if n==24 then return 24\n    if n==25 then return\
    \ 25\n    if n==26 then return 26\n    if n==27 then return 27\n    if n==28 then\
    \ return 28\n    if n==29 then return 29\n    if n==30 then return 30\n    if\
    \ n==31 then return 31\n    if n==32 then return 32\n    if n==33 then return\
    \ 33\n    if n==34 then return 34\n    if n==35 then return 35\n    if n==36 then\
    \ return 36\n    if n==37 then return 37\n    if n==38 then return 38\n    if\
    \ n==39 then return 39\n    if n==40 then return 40\n    if n==41 then return\
    \ 41\n    if n==42 then return 42\n    if n==43 then return 43\n    if n==44 then\
    \ return 44\n    if n==45 then return 45\n    if n==46 then return 46\n    if\
    \ n==47 then return 47\n    if n==48 then return 48\n    if n==49 then return\
    \ 49\n    if n==50 then return 50\n    if n==51 then return 51\n    if n==52 then\
    \ return 52\n    if n==53 then return 53\n    if n==54 then return 54\n    if\
    \ n==55 then return 55\n    if n==56 then return 56\n    if n==57 then return\
    \ 57\n    if n==58 then return 58\n    if n==59 then return 59\n    if n==60 then\
    \ return 60\n    if n==61 then return 61\n    if n==6\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp9qm99b7f.jl:6\nin expression starting at /tmp/tmp9qm99b7f.jl:6\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        1 \n    else \n        largest_divisor(n-1) + 1 \nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the factorial of a\
    \ given number. \nThe factorial of a number $n$ is defined as $n! = n(n-1)(n-2)...(1)$.\
    \ \nFor example, $5! = 5 \\times 4 \\times 3 \\times 2 \\times 1 = 120$. \nWrite\
    \ a recursive function that computes the factorial of a given number. \nThe function\
    \ should take one argument, the number to compute the factorial of. \nThe function\
    \ should return the factorial of the given number. \nFor example, $5! = 5 \\times\
    \ 4 \\times 3 \\times 2 \\times 1 = 120$. \nWrite a function that computes the\
    \ factorial of a given number. \nThe function should take one argument, the number\
    \ to compute the factorial of. \nThe function should return the factorial of the\
    \ given number. \nFor example, $5! = 5 \\times 4 \\times 3 \\times 2 \\times 1\
    \ = 120$. \nWrite a function that computes the factorial of a given number. \n\
    The function should take one argument, the number to compute the factorial of.\
    \ \nThe function should return the factorial of the given number. \nFor example,\
    \ $5! = 5 \\times 4 \\times 3 \\times 2 \\times 1 = 120$. \nWrite a function that\
    \ computes the factorial of a given number. \nThe function should take one argument,\
    \ the number to compute the factorial of. \nThe function should return the factorial\
    \ of the given number. \nFor example, $5! = 5 \\times 4 \\times 3 \\times 2 \\\
    times 1 = 120$. \nWrite a function that computes the factorial of a given number.\
    \ \nThe function should take one argument, the number to compute the factorial\
    \ of. \nThe function should return the factorial of the given number. \nFor example,\
    \ $5! = 5 \\times 4 \\times 3 \\times 2 \\times 1 = 120$. \nWrite a function that\
    \ computes the factorial of a given number. \nThe function should take one argument,\
    \ the number to compute the factorial of. \nThe function should return the factorial\
    \ of the given number. \nFor example, $5! = 5 \\times 4 \\times 3 \\times 2 \\\
    times 1 = 120$. \nWrite a function that computes the factorial of a given number.\
    \ \nThe function should take one argument, the number to compute the factorial\
    \ of. \nThe function should return the factorial of the given number. \nFor example,\
    \ $5! = 5 \\times 4 \\times 3 \\times 2 \\times 1 = 120$. \nWrite a function that\
    \ computes the factorial of a \nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq01y21qv.jl:11\nin expression starting at\
    \ /tmp/tmpq01y21qv.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 \n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that returns the number of\
    \ divisors of a given number. For example, for the number 12, there are two divisors:\
    \ 2 and 3. Your function should return the number of divisors, not print them.\n\
    using Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
    \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxcs3h41z.jl:12\nin expression starting at\
    \ /tmp/tmpxcs3h41z.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n % 2 == 0 \n        then largest_divisor(n / 2)\n        else largest_divisor(3\
    \ * n + 1)\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the largest number that divides n evenly, smaller than n.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"largest_divisor\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqyicgs4a.jl:7\nin expression starting at /tmp/tmpqyicgs4a.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 \n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n@time largest_divisor(15)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the number of divisors of n\
    \ that are less than or equal to n.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4nntaxnc.jl:12\nin expression starting at\
    \ /tmp/tmp4nntaxnc.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 then return 1\n    else if n%2==0 then return n\n    else return\
    \ largest_divisor(n/2)\nend\n</cell>\n<code language=julia-1.4>\nlargest_divisor(15)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of divisors\
    \ of n that are less than or equal to n.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp65781boq.jl:6\nin expression starting at /tmp/tmp65781boq.jl:6\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        1 \n    else \n        largest_divisor(n-1) + 1 \nend\n\
    </cell>\n<code language=julia-1.3>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc4w2xc9e.jl:11\nin expression starting at\
    \ /tmp/tmpc4w2xc9e.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n % 2 == 0 \n        then largest_divisor(n / 2)\n        else largest_divisor(3\
    \ * n + 1)\n    end\nend\n</cell>\n<code language=julia-1.4>\nlargest_divisor(15)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the number of divisors\
    \ of n that are less than or equal to n.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"largest_divisor\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgqy8vjwc.jl:7\nin expression starting at /tmp/tmpgqy8vjwc.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 then return 0\n    else if n%2==0 then return n\n    else return\
    \ largest_divisor(n/2)\nend\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the smallest number\
    \ that divides n evenly, larger than n\n    >>> smallest_divisor(15)\n    3\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t\
    @test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) ==\
    \ 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmppj9f0qjh.jl:6\nin expression starting at /tmp/tmppj9f0qjh.jl:6\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 \n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n@time largest_divisor(15)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the largest number that divides\
    \ n evenly, smaller than n.\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd3mksak0.jl:12\nin expression starting at\
    \ /tmp/tmpd3mksak0.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0\n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n@time largest_divisor(15)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the factorial of a given number\n\
    using Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
    \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb5tiig8r.jl:12\nin expression starting at\
    \ /tmp/tmpb5tiig8r.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n % 2 == 0 \n        then largest_divisor(n / 2)\n        else largest_divisor(3\
    \ * n + 1)\n    end\nend\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the number of divisors\
    \ of a given number n. \nFor example, for the number 15, there are two divisors:\
    \ 5 and 3.\nWrite a function that returns the number of divisors of a given number\
    \ n. \nFor example, for the number 15, there are two divisors: 5 and 3.\nWrite\
    \ a function that returns the number of divisors of a given number n. \nFor example,\
    \ for the number 15, there are two divisors: 5 and 3.\nWrite a function that returns\
    \ the number of divisors of a given number n. \nFor example, for the number 15,\
    \ there are two divisors: 5 and 3.\nWrite a function that returns the number of\
    \ divisors of a given number n. \nFor example, for the number 15, there are two\
    \ divisors: 5 and 3.\nWrite a function that returns the number of divisors of\
    \ a given number n. \nFor example, for the number 15, there are two divisors:\
    \ 5 and 3.\nWrite a function that returns the number of divisors of a given number\
    \ n. \nFor example, for the number 15, there are two divisors: 5 and 3.\nWrite\
    \ a function that returns the number of divisors of a given number n. \nFor example,\
    \ for the number 15, there are two divisors: 5 and 3.\nWrite a function that returns\
    \ the number of divisors of a given number n. \nFor example, for the number 15,\
    \ there are two divisors: 5 and 3.\nWrite a function that returns the number of\
    \ divisors of a given number n. \nFor example, for the number 15, there are two\
    \ divisors: 5 and 3.\nWrite a function that returns the number of divisors of\
    \ a given number n. \nFor example, for the number 15, there are two divisors:\
    \ 5 and 3.\nWrite a function that returns the number of divisors of a given number\
    \ n. \nFor example, for the number 15, there are two divisors: 5 and 3.\nWrite\
    \ a function that returns the number of divisors of a given number n. \nFor example,\
    \ for the number 15, there are two divisors: 5 and 3.\nWrite a function that returns\
    \ the number of divisors of a given number n. \nFor example, for the number 15,\
    \ there are two divisors: 5 and 3.\nWrite a function that returns the number of\
    \ divisors of a given number n. \nFor example, for the number 15, there are two\
    \ divisors: 5 and 3.\nWrite a function that returns the number of divisors of\
    \ a given number n. \nFor example, for the number 15, there are two divisors:\
    \ 5 and 3.\nWrite a function that returns the number of divisors of a given number\
    \ n. \nFor example, for the number 15, there are two divisors: 5 and 3.\nWrite\
    \ a function that returns the number of divisors of a given number n. \nFor example,\
    \ for the number 15, there are two divisors: 5 and 3.\nWrite a function that returns\
    \ the number of divisors of a given number n. \nFor example, for the number 15,\
    \ there are two divisors: 5 and 3.\nWrite a \nusing Test\n\n@testset begin\n\n\
    candidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"largest_divisor\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4kh42ze4.jl:7\nin expression starting at /tmp/tmp4kh42ze4.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 \n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.4>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdsmxjo1z.jl:12\nin expression starting at\
    \ /tmp/tmpdsmxjo1z.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        return n\n    else if n%2==0 \n        return largest_divisor(n/2)\n\
    \    else \n        return largest_divisor(n/2) + 1\nend\n</cell>\n<code language=julia-1.5>\n\
    @time largest_divisor(100)\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the factorial of a given number. \nFor example, factorial(5) = 5 \xD7\
    \ 4 \xD7 3 \xD7 2 \xD7 1\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsh5_nv7s.jl:8\nin expression starting at /tmp/tmpsh5_nv7s.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0\n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of divisors of n that are\
    \ smaller than n.\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnxvuk7xu.jl:12\nin expression starting at\
    \ /tmp/tmpnxvuk7xu.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        return 1 \n    else if n==2 \n        return 2 \n  \
    \  else if n%3==0 \n        return largest_divisor(n/3) \n    else \n        return\
    \ largest_divisor(n/3) \nend \n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the smallest number\
    \ that divides n evenly, smaller than n.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp63qv83d5.jl:8\nin expression starting at /tmp/tmp63qv83d5.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n % 2 == 0 \n        then largest_divisor(n / 2)\n        else largest_divisor(3\
    \ * n + 1) \n    end\nend\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the number of divisors\
    \ of n that are less than or equal to n.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"largest_divisor\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp49e_5z65.jl:7\nin expression starting at /tmp/tmp49e_5z65.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 then return 0\n    else if n%2==0 then return n\n    else return\
    \ largest_divisor(n/2)\nend\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that finds the smallest number that\
    \ divides n evenly, smaller than n\n    >>> smallest_divisor(15)\n    3\n    \"\
    \"\"\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
    \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmprslltcil.jl:6\nin expression starting at /tmp/tmprslltcil.jl:6\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 then return 1\n    else if n%2==0 then return largest_divisor(n/2)\n\
    \    else return largest_divisor(n/2)+1\nend\n</cell>\n<code language=julia-1.5>\n\
    largest_divisor(15)\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the number of divisors of a given number n. \nFor example, for n = 12, there\
    \ are 4 divisors: 1, 2, 3, and 4.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t\
    @test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpubeqp849.jl:6\nin expression starting at /tmp/tmpubeqp849.jl:6\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        return 1 \n    else if n==2 \n        return 2 \n  \
    \  else if n%3==0 \n        return 3 \n    else \n        return largest_divisor(n/3)\
    \ \nend\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the first n prime numbers. \nHint: Use\
    \ a for loop to iterate over all numbers from 2 to n.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc2ifjb1e.jl:8\nin expression starting at /tmp/tmpc2ifjb1e.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 \n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the number of divisors of n that are\
    \ less than or equal to n.\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp33fbcfr1.jl:12\nin expression starting at\
    \ /tmp/tmp33fbcfr1.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        return 1 \n    else if n%2==0 \n        return largest_divisor(n/2)\
    \ \n    else \n        return largest_divisor(n/2) + 1 \nend\n</cell>\n<code language=julia-1.5>\n\
    largest_divisor(15)\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the number of divisors of a given number n. For example, for the number 15,\
    \ there are 3 divisors: 1, 3, and 5.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpeo10ztgb.jl:8\nin expression starting at /tmp/tmpeo10ztgb.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 \n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx_0j37on.jl:12\nin expression starting at\
    \ /tmp/tmpx_0j37on.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0\n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the factorial of a given number. For\
    \ example, factorial(5) = 5 \xD7 4 \xD7 3 \xD7 2 \xD7 1\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplrytwyzy.jl:12\nin expression starting at\
    \ /tmp/tmplrytwyzy.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        return 1 \n    else if n==2 \n        return 2 \n  \
    \  else if n%3==0 \n        return 3 \n    else if n%5==0 \n        return 5 \n\
    \    else \n        return largest_divisor(n/3) \nend\n</cell>\n<code language=julia-1.5>\n\
    largest_divisor(15)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the largest number that divides n evenly, smaller than n.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbuyjoy2i.jl:8\nin expression starting at /tmp/tmpbuyjoy2i.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n == 0 \n        0\n    else\n        largest_divisor(n - 1) \n   \
    \ end\nend\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the smallest number that divides\
    \ n evenly, smaller than n.\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy3x346fo.jl:12\nin expression starting at\
    \ /tmp/tmpy3x346fo.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 then return 0\n    if n%2==0 then return n\n    else return largest_divisor(n/2)\n\
    end\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the largest number that divides n evenly,\
    \ smaller than n.\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp07qq85fq.jl:6\nin expression starting at /tmp/tmp07qq85fq.jl:6\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n % 2 == 0 \n        then largest_divisor(n / 2)\n        else largest_divisor(3\
    \ * n + 1)\n    end\nend\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the number of divisors\
    \ of a given number n. \nFor example, for n = 15, we have:\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"largest_divisor\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpeg0vgp8x.jl:7\nin expression starting at /tmp/tmpeg0vgp8x.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 \n        0\n    else if n%2==0\n        largest_divisor(n/2)\n\
    \    else\n        largest_divisor(n/2)+1\n    end\nend\n</cell>\n<code language=julia-1.4>\n\
    largest_divisor(15)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of divisors of n that are less than or equal to n.\nusing Test\n\n\
    @testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t\
    @test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprmwgj50z.jl:8\nin expression starting at /tmp/tmprmwgj50z.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 then return 0 \n    else if n%2==0 then return n \n    else return\
    \ largest_divisor(n/2) \nend\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the number of divisors\
    \ of n that are less than or equal to n.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp4s4zt2b6.jl:6\nin expression starting at /tmp/tmp4s4zt2b6.jl:6\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        return n\n    else if n%2==0 \n        return largest_divisor(n/2)\n\
    \    else \n        return largest_divisor(n/2) + 1\nend\n</cell>\n<code language=julia-1.0>\n\
    largest_divisor(15)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of divisors of n that are less than or equal to n.\nusing Test\n\n\
    @testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t\
    @test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1blnbbwq.jl:8\nin expression starting at /tmp/tmp1blnbbwq.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 then return 0\n    if n==1 then return 1\n    if n%2==0 then return\
    \ n\n    else return largest_divisor(n/2)\nend\n</cell>\n<code language=julia-1.5>\n\
    largest_divisor(15)\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the smallest number that divides n evenly, smaller than n.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpge6y0d35.jl:6\nin expression starting at /tmp/tmpge6y0d35.jl:6\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 \n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the first n prime numbers. \nHint: use\
    \ primes() function\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp37wm3q7i.jl:12\nin expression starting at\
    \ /tmp/tmp37wm3q7i.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 \n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the first n prime numbers. \nHint: Use\
    \ a while loop to keep checking the condition of the while loop.\nusing Test\n\
    \n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\
    \t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphwabekzd.jl:12\nin expression starting at\
    \ /tmp/tmphwabekzd.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n == 0 \n        0\n    else\n        largest_divisor(n-1) + n // largest_divisor(n-1)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the number of divisors of n\
    \ that are less than or equal to n.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpoh3re5vm.jl:12\nin expression starting at\
    \ /tmp/tmpoh3re5vm.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n % 2 == 0 \n        then largest_divisor(n / 2)\n        else largest_divisor(3\
    \ * n + 1)\n    end\nend\n</cell>\n<code language=julia-1.5>\n@time largest_divisor(15)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of divisors\
    \ of n that are less than or equal to n.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"largest_divisor\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_h24crfi.jl:7\nin expression starting at /tmp/tmp_h24crfi.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 then return 1\n    else if n==2 then return 2\n    else if n%3==0\
    \ then return n\n    else if n%5==0 then return n\n    else return largest_divisor(n/3)\n\
    end\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the number of divisors of a given number.\
    \ For example, for the number 12, there are two divisors: 2 and 3. Your function\
    \ should return the number of divisors, not just their values. For example, for\
    \ the number 12, your function should return 2.\nusing Test\n\n@testset begin\n\
    \ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp2xwy46hm.jl:6\nin expression starting at /tmp/tmp2xwy46hm.jl:6\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 then return 0\n    if n==1 then return 1\n    \n    largest_divisor=n\n\
    \    \n    if n%2==0 then \n        largest_divisor=largest_divisor/2\n      \
    \  \n    if n%3==0 then \n        largest_divisor=largest_divisor/3\n        \n\
    \    if n%5==0 then \n        largest_divisor=largest_divisor/5\n        \n  \
    \  if n%7==0 then \n        largest_divisor=largest_divisor/7\n        \n    if\
    \ n%11==0 then \n        largest_divisor=largest_divisor/11\n        \n    if\
    \ n%13==0 then \n        largest_divisor=largest_divisor/13\n        \n    if\
    \ n%17==0 then \n        largest_divisor=largest_divisor/17\n        \n    if\
    \ n%19==0 then \n        largest_divisor=largest_divisor/19\n        \n    if\
    \ n%23==0 then \n        largest_divisor=largest_divisor/23\n        \n    if\
    \ n%29==0 then \n        largest_divisor=largest_divisor/29\n        \n    if\
    \ n%31==0 then \n        largest_divisor=largest_divisor/31\n        \n    if\
    \ n%37==0 then \n        largest_divisor=largest_divisor/37\n        \n    if\
    \ n%41==0 then \n        largest_divisor=largest_divisor/41\n        \n    if\
    \ n%43==0 then \n        largest_divisor=largest_divisor/43\n        \n    if\
    \ n%47==0 then \n        largest_divisor=largest_divisor/47\n        \n    if\
    \ n%53==0 then \n        largest_divisor=largest_divisor/53\n        \n    if\
    \ n%59==0 then \n        largest_divisor=largest_divisor/59\n        \n    if\
    \ n%61==0 then \n        largest_divisor=largest_divisor/61\n        \n    if\
    \ n%67==0 then \n        largest_divisor=largest_divisor/67\n        \n    if\
    \ n%71==0 then \n        largest_divisor=largest_divisor/71\n        \n    if\
    \ n%73==0 then \n        largest_divisor=largest_divisor/73\n        \n    if\
    \ n%79==0 then \n        largest_divisor=largest_divisor/79\n        \n    if\
    \ n%83==0 then \n        largest_divisor=largest_divisor/83\n        \n    if\
    \ n%89==\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
    \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp570dvfd7.jl:6\nin expression starting at /tmp/tmp570dvfd7.jl:6\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0\n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxv586ypj.jl:12\nin expression starting at\
    \ /tmp/tmpxv586ypj.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 then return 0\n    else if n%2==0 then return n\n    else return\
    \ largest_divisor(n/2)\nend\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ given number. \nFor example, factorial(5) = 5 \xD7 4 \xD7 3 \xD7 2 \xD7 1\n\
    using Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
    \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpe72wca5n.jl:6\nin expression starting at /tmp/tmpe72wca5n.jl:6\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n == 1\n        1\n    else\n        largest_divisor(n / 2) + 1\n \
    \   end\nend\n</cell>\n<code language=julia-1.3>\n@code_warntype largest_divisor(15)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of divisors\
    \ of n that are less than or equal to n.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr0gk9srt.jl:12\nin expression starting at\
    \ /tmp/tmpr0gk9srt.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        1 \n    else \n        largest_divisor(n-1) + 1 \nend\n\
    </cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the number of divisors of n that are less than\
    \ or equal to n.\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjqlfnjjc.jl:11\nin expression starting at\
    \ /tmp/tmpjqlfnjjc.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0\n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4kchby_q.jl:12\nin expression starting at\
    \ /tmp/tmp4kchby_q.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n % 2 == 0 \n        then largest_divisor(n / 2)\n        else largest_divisor(3\
    \ * n + 1) \n    end\nend\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the first n prime numbers.\
    \ \nHint: use the function primes(n) to get all the prime numbers from 2 to n\n\
    using Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
    \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"largest_divisor\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8u8mhlw7.jl:7\nin expression starting at /tmp/tmp8u8mhlw7.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0\n        0\n    else\n        largest_divisor(n-1)\n        if\
    \ n%2==0\n            largest_divisor(n/2)\n        else\n            largest_divisor(n/2)+1\n\
    \        end\n    end\nend\n</cell>\n<code language=julia-1.5>\n@time largest_divisor(150)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of divisors\
    \ of n that are less than or equal to n.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk03mnkru.jl:17\nin expression starting at\
    \ /tmp/tmpk03mnkru.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 then return 1\n    else if n%2==0 then return n\n    else return\
    \ largest_divisor(n/2)\nend\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the smallest number\
    \ that divides n evenly, smaller than n.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp6lacrjlx.jl:6\nin expression starting at /tmp/tmp6lacrjlx.jl:6\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        return 1 \n    else \n        largest_divisor(n-1)\n\
    \        if n%2==0 \n            largest_divisor(n/2)\n        else \n       \
    \     largest_divisor(n/2) \n        end\n    end\nend\n</code>\n<|/ a tags=julia\
    \ |>\n<| a tags=julia |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate =\
    \ largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t\
    @test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvz387zhd.jl:17\nin expression starting at\
    \ /tmp/tmpvz387zhd.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 \n        0\n    else\n        largest_divisor(n-1)\n        if\
    \ n % 2 == 0\n            largest_divisor(n/2)\n        else\n            largest_divisor(n/2)+1\n\
    \        end\n    end\nend\n</code>\n<|/ a tags=julia,recursion |>\n<| a dscore=2\
    \ |>\nI wrote a recursive function which returns the largest number that divides\
    \ n evenly and smaller than n. \n<code>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe17a_j8b.jl:17\nin expression starting at\
    \ /tmp/tmpe17a_j8b.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0\n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.4>\n@time largest_divisor(15)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the largest number that divides\
    \ n evenly, smaller than n.\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7xe17vvg.jl:12\nin expression starting at\
    \ /tmp/tmp7xe17vvg.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        return 1 \n    else \n        largest_divisor(n-1)\n\
    \        if n%2==0 \n            return n\n        else \n            return largest_divisor(n//2)\n\
    end\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the smallest number that divides n evenly,\
    \ smaller than n\n>>> smallest_divisor(15)\n    3\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t\
    @test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf2ax1o03.jl:15\nin expression starting at\
    \ /tmp/tmpf2ax1o03.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        return 1 \n    else \n        return largest_divisor(n-1)\
    \ + 1 \nend \n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of divisors of n\
    \ that are less than or equal to n.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe4ajrym1.jl:11\nin expression starting at\
    \ /tmp/tmpe4ajrym1.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        return 1 \n    else \n        return largest_divisor(n-1)\
    \ + 1 \nend \n</cell>\n<code language=julia-1.5>\n@time largest_divisor(15); @time\
    \ largest_divisor(150)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the smallest number that is evenly divisible by all the numbers from 1 to n.\n\
    using Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
    \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxer53n_m.jl:11\nin expression starting at\
    \ /tmp/tmpxer53n_m.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 \n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpedpd78a2.jl:12\nin expression starting at\
    \ /tmp/tmpedpd78a2.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n == 0 \n        0\n    else\n        largest_divisor(n / 2) + n /\
    \ 2\nend\n</cell>\n<code language=julia-1.5>\n@code_warntype largest_divisor(15)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the factorial of a\
    \ given number. \nFor example, factorial(5) = 5 * 4 * 3 * 2 * 1 = 120\nusing Test\n\
    \n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\
    \t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8r8onwqg.jl:11\nin expression starting at\
    \ /tmp/tmp8r8onwqg.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0\n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that returns the number of\
    \ divisors of n that are less than or equal to n.\nusing Test\n\n@testset begin\n\
    \ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph4i2xbzz.jl:12\nin expression starting at\
    \ /tmp/tmph4i2xbzz.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0\n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.3>\nlargest_divisor(15)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the number of divisors of n that are\
    \ less than or equal to n.\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsb7tzsjb.jl:12\nin expression starting at\
    \ /tmp/tmpsb7tzsjb.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n % 2 == 0 \n        then largest_divisor(n / 2)\n        else largest_divisor(3\
    \ * n + 1)\n    end\nend\n</cell>\n<code language=julia-1.5>\n@time largest_divisor(100)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the number of divisors\
    \ of n that are less than or equal to n.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"largest_divisor\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy4wm5jk0.jl:7\nin expression starting at /tmp/tmpy4wm5jk0.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n % 2 == 0 \n        then largest_divisor(n / 2)\n        else largest_divisor(3\
    \ * n + 1)\n    end\nend\n</cell>\n<code language=julia-1.5>\n@time largest_divisor(150)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of divisors\
    \ of n that are less than or equal to n.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"largest_divisor\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8ckcinll.jl:7\nin expression starting at /tmp/tmp8ckcinll.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 \n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the factorial of a given number. \n\
    For example, factorial(5) = 5 \xD7 4 \xD7 3 \xD7 2 \xD7 1\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb5o4vg_8.jl:12\nin expression starting at\
    \ /tmp/tmpb5o4vg_8.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 then return 1\n    else if n==2 then return 2\n    else if n%3==0\
    \ then return n\n    else return largest_divisor(n/3)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time largest_divisor(100)\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the number of divisors of n that are less than or equal to n.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
    \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp96g0zmr1.jl:6\nin expression starting at /tmp/tmp96g0zmr1.jl:6\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 \n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the smallest number that divides n evenly,\
    \ larger than n\n    >>> smallest_divisor(15)\n    3\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\
    \t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2831mrud.jl:12\nin expression starting at\
    \ /tmp/tmp2831mrud.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 then return 0\n    if n==1 then return 1\n    if n%2==0 then return\
    \ n\n    else return largest_divisor(n/2)\nend\n</cell>\n<code language=julia-1.0>\n\
    largest_divisor(15)\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the sum of the numbers from 1 to n (inclusive).\nusing Test\n\n@testset begin\n\
    \ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpae0tjhz3.jl:6\nin expression starting at /tmp/tmpae0tjhz3.jl:6\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        return 1 \n    else \n        largest_divisor(n-1) \n\
    \        if n % 2 == 0 \n            then largest_divisor(n/2) \n            else\
    \ largest_divisor(n/2) \n        end\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    largest_divisor(15)\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the factorial of a given number. \nFor example, factorial(5) = 5 \xD7 4 \xD7\
    \ 3 \xD7 2 \xD7 1\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"largest_divisor\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2hu9w95l.jl:11\nin expression starting at\
    \ /tmp/tmp2hu9w95l.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        return 1 \n    else \n        largest_divisor(n-1)\n\
    \        if n % 2 == 0 \n            largest_divisor(n/2) \n        else \n  \
    \          largest_divisor(n/2) \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @time largest_divisor(15)\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ finds the smallest number that divides n evenly, smaller than n\nusing Test\n\
    \n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\
    \t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8lsrja4a.jl:16\nin expression starting at\
    \ /tmp/tmp8lsrja4a.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 \n        0\n    else\n        largest_divisor(n-1)\n        if\
    \ n%2==0\n            largest_divisor(n/2)\n        end\n    end\nend\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=julia,recursion |>\n<code>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb7y1zdhf.jl:15\nin expression starting at\
    \ /tmp/tmpb7y1zdhf.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        return 1 \n    else \n        return largest_divisor(n-1)\
    \ + 1 \nend \n</cell>\n<code language=julia-1.5>\n@time largest_divisor(15)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of divisors\
    \ of n that are less than or equal to n.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpktut51h5.jl:11\nin expression starting at\
    \ /tmp/tmpktut51h5.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        return n\n    else if n%2==0 \n        return largest_divisor(n/2)\n\
    \    else \n        return largest_divisor(n/2)+1\nend\n</cell>\n<code language=julia-1.5>\n\
    largest_divisor(15)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of divisors of n that are less than or equal to n.\nusing Test\n\n\
    @testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t\
    @test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkr3uvc5z.jl:8\nin expression starting at /tmp/tmpkr3uvc5z.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        1\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.3>\nlargest_divisor(15)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the smallest number that divides n evenly,\
    \ smaller than n.\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpptrwnats.jl:12\nin expression starting at\
    \ /tmp/tmpptrwnats.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0\n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n@time largest_divisor(100)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the factorial of a given number.\
    \ For example, factorial(5) = 5 * 4 * 3 * 2 * 1 = 120\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl6wfgb5p.jl:12\nin expression starting at\
    \ /tmp/tmpl6wfgb5p.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 then return 0\n    if n%2==0 then return n\n    else return largest_divisor(n/2)\n\
    end\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of divisors of n that are\
    \ less than or equal to n.\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp1n81w07f.jl:6\nin expression starting at /tmp/tmp1n81w07f.jl:6\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 \n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n@code_warntype largest_divisor(15)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the largest number\
    \ that divides n evenly, smaller than n.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprnss2q03.jl:12\nin expression starting at\
    \ /tmp/tmprnss2q03.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0\n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n@time largest_divisor(100)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the factorial of a given number.\
    \ \nFor a given number n, find the factorial of n\n    >>> factorial(5)\n    120\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t\
    @test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) ==\
    \ 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcl8ma016.jl:12\nin expression starting at\
    \ /tmp/tmpcl8ma016.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n % 2 == 0 \n        then return n \n    else \n        largest_divisor(n\
    \ / 2) \nend\n</cell>\n<code language=julia-1.4>\nlargest_divisor(15)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the number of divisors of n\
    \ that are less than or equal to n.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpob55z6qz.jl:7\nin expression starting at /tmp/tmpob55z6qz.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n == 0 \n        0\n    else\n        largest_divisor(n-1) + n // largest_divisor(n-1)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the number of divisors of a\
    \ given number n. \nFor example, for n = 12, there are 4 divisors: 1, 2, 3, and\
    \ 4.\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
    \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzx2vft8o.jl:12\nin expression starting at\
    \ /tmp/tmpzx2vft8o.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        return n\n    else if n%2==0 \n        return largest_divisor(n/2)\n\
    \    else \n        return largest_divisor(n/2)+1\nend\n</cell>\n<code language=julia-1.5>\n\
    largest_divisor(15)\n</cell>\n<text>\nProblem 7\nWrite a function that returns\
    \ the number of prime numbers less than or equal to a given number. \nFor example,\
    \ primes(10) should return 10. \nThe function should take one argument, n, which\
    \ represents the upper limit of the prime numbers to return.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjh98ztf6.jl:8\nin expression starting at /tmp/tmpjh98ztf6.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0\n        0\n    else\n        largest_divisor(n-1)\n        if\
    \ n%2==0\n            largest_divisor(n/2)\n        else\n            largest_divisor(n/2)+1\n\
    \        end\n    end\nend\n</cell>\n<code language=julia-1.0>\n@code_warntype\
    \ largest_divisor(15)\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the number of divisors of n that are less than or equal to n.\nusing Test\n\n\
    @testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t\
    @test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp14ikx_gh.jl:17\nin expression starting at\
    \ /tmp/tmp14ikx_gh.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n == 1 \n        1 \n    else \n        largest_divisor(n-1) + 1 \n\
    end\n</cell>\n<code language=julia-1.4>\nlargest_divisor(15)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the factorial of a given number. For\
    \ example, factorial(5) = 5 \xD7 4 \xD7 3 \xD7 2 \xD7 1\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuopt53jm.jl:11\nin expression starting at\
    \ /tmp/tmpuopt53jm.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n == 1\n        1\n    else\n        largest_divisor(n / 2)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the sum of the squares of the first\
    \ n positive integers. For example, sum_of_squares(10) = 55. Make sure your function\
    \ works with negative numbers as well.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbfnujxf5.jl:12\nin expression starting at\
    \ /tmp/tmpbfnujxf5.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        return n\n    else if n%2==0 \n        return largest_divisor(n/2)\n\
    \    else \n        return largest_divisor(n/2) + 1\nend\n</cell>\n<code language=julia-1.5>\n\
    largest_divisor(15)\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the largest number that can be divided by all the numbers from 1 to n inclusive.\n\
    using Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
    \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1w9g5gny.jl:8\nin expression starting at /tmp/tmp1w9g5gny.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n == 1 \n        return 1 \n    else \n        return largest_divisor(n\
    \ / 2) + 1 \nend \n</cell>\n<code language=julia-1.3>\nlargest_divisor(15)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of divisors of n\
    \ that are less than or equal to n.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz_u1uyci.jl:11\nin expression starting at\
    \ /tmp/tmpz_u1uyci.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 then return 0 \n    else if n==1 then return 1 \n    else if n%2==0\
    \ then return n \n    else return largest_divisor(n/2)\nend\n</cell>\n<code language=julia-1.5>\n\
    largest_divisor(15)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the factorial of a given number. For example, factorial(5) = 5 \xD7 4 \xD7 3\
    \ \xD7 2 \xD7 1\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpwi2hab8n.jl:6\nin expression starting at /tmp/tmpwi2hab8n.jl:6\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 \n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.0>\nlargest_divisor(15)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the factorial of a given number. \n\
    For example, factorial(5) = 5 \xD7 4 \xD7 3 \xD7 2 \xD7 1\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4qeh04sh.jl:12\nin expression starting at\
    \ /tmp/tmp4qeh04sh.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 then return 0\n    if n==1 then return 1\n    \n    largest_divisor(n-1)\n\
    \    \n    if n%2==0 then return n\n    \n    largest_divisor(n/2)\n    \n   \
    \ return n\nend\n</cell>\n<code language=julia-1.3>\nlargest_divisor(15)\n</cell>\n\
    <text>\nProblem 3\nWrite a function that returns the smallest number that can\
    \ be divided by all the numbers from 1 to n.\nusing Test\n\n@testset begin\n\n\
    candidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmptk_kg_ua.jl:6\nin expression starting at /tmp/tmptk_kg_ua.jl:6\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        return 1 \n    else if n%2==0 \n        return largest_divisor(n/2)\
    \ \n    else \n        return largest_divisor(n/2) + 1 \nend \n</cell>\n<code\
    \ language=julia-1.0>\nlargest_divisor(15)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the factorial of a given number. For example, factorial(5)\
    \ = 5 \xD7 4 \xD7 3 \xD7 2 \xD7 1\nusing Test\n\n@testset begin\n\ncandidate =\
    \ largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t\
    @test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp11ibifoo.jl:8\nin expression starting at /tmp/tmp11ibifoo.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        return 1 \n    else \n        largest_divisor(n-1)\n\
    \        if n%2==0 \n            largest_divisor(n/2)\n        else \n       \
    \     largest_divisor(n/2) \n        end\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    largest_divisor(15)\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the number of divisors of n that are less than or equal to n.\nusing Test\n\n\
    @testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t\
    @test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjsjkw3p4.jl:17\nin expression starting at\
    \ /tmp/tmpjsjkw3p4.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n % 2 == 0\n        then largest_divisor(n / 2)\n        else largest_divisor(3\
    \ * n + 1)\n    end\nend\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of divisors\
    \ of n that are less than or equal to n.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"largest_divisor\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpiri_0ho7.jl:7\nin expression starting at /tmp/tmpiri_0ho7.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n % 2 == 0 \n        then return n \n        else return largest_divisor(n\
    \ / 2) \n    end\nend\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the number of divisors\
    \ of n that are less than or equal to n.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmphbh860u7.jl:7\nin expression starting at /tmp/tmphbh860u7.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0\n        0\n    else\n        largest_divisor(n-1)\n        if\
    \ n % 2 == 0\n            largest_divisor(n/2)\n        else\n            largest_divisor(n/2)\
    \ \n        end\n    end\nend\n</cell>\n<code language=julia-1.3>\nlargest_divisor(15)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of divisors\
    \ of a given number n. For example, for the number 12, there are 3 divisors: 1,\
    \ 2, and 3.\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t\
    @test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) ==\
    \ 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxw43e9jz.jl:17\nin expression starting at\
    \ /tmp/tmpxw43e9jz.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0\n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<text>\nExercise 7\nWrite a function that returns the largest number\
    \ that divides n evenly, smaller than n.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj73b2l2c.jl:12\nin expression starting at\
    \ /tmp/tmpj73b2l2c.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 then return 0\n    else if n%2==0 then return n\n    else return\
    \ largest_divisor(n/2)\nend\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the factorial of a\
    \ given number. \nFor example, factorial(5) = 5 \xD7 4 \xD7 3 \xD7 2 \xD7 1\n\
    using Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
    \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp7qqwya6p.jl:6\nin expression starting at /tmp/tmp7qqwya6p.jl:6\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0\n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxbmic7nu.jl:12\nin expression starting at\
    \ /tmp/tmpxbmic7nu.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        return 1 \n    else \n        largest_divisor(n-1)\n\
    \        if n%2==0 \n            largest_divisor(n/2)\n        else \n       \
    \     largest_divisor(n/2)+1\n        end\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    @time largest_divisor(15)\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the factorial of a given number. For example, factorial(5) = 5 * 4 *\
    \ 3 * 2 * 1 = 120\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt6kxzyxz.jl:17\nin expression starting at\
    \ /tmp/tmpt6kxzyxz.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        return 1 \n    else \n        largest_divisor(n-1) +\
    \ largest_divisor(n-2) \nend\n</cell>\n<code language=julia-1.5>\n@time largest_divisor(100)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the number of divisors\
    \ of n that are less than or equal to n.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyzl_du8_.jl:11\nin expression starting at\
    \ /tmp/tmpyzl_du8_.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0\n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<text>\nExercise 5\nWrite a function that returns the factorial\
    \ of a given number. \nFor example, factorial(5) = 5 x 4 x 3 x 2 x 1 = 120\nusing\
    \ Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
    \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgp6ms1fo.jl:12\nin expression starting at\
    \ /tmp/tmpgp6ms1fo.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        return n\n    else if n%2==0 \n        return largest_divisor(n/2)\n\
    \    else \n        return largest_divisor(n/2) + 1\nend\n</cell>\n<code language=julia-1.3>\n\
    largest_divisor(15)\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the number of divisors of n that are less than or equal to n.\nusing Test\n\n\
    @testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t\
    @test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsj32h8ed.jl:8\nin expression starting at /tmp/tmpsj32h8ed.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 \n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.0>\nlargest_divisor(15)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the number of divisors of n that are\
    \ less than or equal to n.\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzmcul0zz.jl:12\nin expression starting at\
    \ /tmp/tmpzmcul0zz.jl:12\n"
  exit_code: 1
  status: SyntaxError
