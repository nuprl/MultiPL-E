name: HumanEval_62_derivative
language: julia
prompt: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x\
  \ + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
  \    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
  \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3,\
  \ 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3,\
  \ 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t@test(candidate([1])\
  \ == Vector{Int64}([]))\nend\n"
completions: ["    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n    end\n    return deriv\nend\n\
    </cell>\n<code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that calculates the derivative of a polynomial given\
    \ its coefficients.", "    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n \
    \   for i in 2:length(xs)\n        deriv[i] = deriv[i-1]*xs[i]\n    end\n    return\
    \ deriv\nend\n</cell>\n<code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that calculates the derivative of\
    \ a polynomial using Newton's method.", "    \n    derivative = zeros(length(xs))\n\
    \    \n    for i = 1:length(xs)\n        derivative[i] = xs[i]\n    end\n    \n\
    \    return derivative\nend\n</cell>\n<code language=julia-1.3>\nderivative([3,\
    \ 1, 2, 4, 5])\n</cell>\n<code language=julia-1.3>\nderivative([1, 2, 3])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes an array of coefficients and returns\
    \ the sum of the squares of the coefficients.", "    deriv = zeros(length(xs))\n\
    \    deriv[1] = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = deriv[i-1]*xs[i]\
    \ - xs[i-1]\n    end\n    return deriv\nend\n</cell>\n<code language=julia-1.5>\n\
    derivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ calculates the derivative of a polynomial given its coefficients.", "    deriv\
    \ = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n     \
    \   deriv[i] = xs[i] * deriv[i-1]\n    end\n    return deriv\nend\n</cell>\n<text>\n\
    Now let's use our derivative function to find the derivative of a polynomial of\
    \ degree 3", "    deriv = zeros(length(xs)) \n    deriv[1] = xs[1]\n    for i\
    \ in 2:length(xs)\n        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n    end\n  \
    \  return deriv\nend\n</cell>\n<code language=julia-1.3>\nderivative([3, 1, 2,\
    \ 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that takes in a vector\
    \ and returns the sum of the squares of the elements in the vector. For example,\
    \ [1, 2, 3] returns $1 + 2 + 3 = 6$.", "    deriv = zeros(Int, length(xs))\n \
    \   for i = 1:length(xs)\n        deriv[i] = xs[i]\n    end\n    return deriv\n\
    end\n</cell>\n<code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n\
    <code language=julia-1.5>\nderivative([1, 2, 3])\n</cell>\n<text>\nExercise 2\n\
    Write a function that calculates the derivative of a polynomial given its coefficients.",
  "    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = xs[i] * deriv[i - 1]\n    end\n    return deriv\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes in a list of numbers and returns\
    \ the sum of the squares of the numbers. \nFor example, sum([1, 2, 3, 4]) should\
    \ return 10. \nWrite a function that takes in a list of numbers and returns the\
    \ sum of the squares of the numbers. \nFor example, sum([1, 2, 3, 4]) should return\
    \ 10. \nWrite a function that takes in a list of numbers and returns the sum of\
    \ the squares of the numbers. \nFor example, sum([1, 2, 3, 4]) should return 10.\
    \ \nWrite a function that takes in a list of numbers and returns the sum of the\
    \ squares of the numbers. \nFor example, sum([1, 2, 3, 4]) should return 10. \n\
    Write a function that takes in a list of numbers and returns the sum of the squares\
    \ of the numbers. \nFor example, sum([1, 2, 3, 4]) should return 10. \nWrite a\
    \ function that takes in a list of numbers and returns the sum of the squares\
    \ of the numbers. \nFor example, sum([1, 2, 3, 4]) should return 10. \nWrite a\
    \ function that takes in a list of numbers and returns the sum of the squares\
    \ of the numbers. \nFor example, sum([1, 2, 3, 4]) should return 10. \nWrite a\
    \ function that takes in a list of numbers and returns the sum of the squares\
    \ of the numbers. \nFor example, sum([1, 2, 3, 4]) should return 10. \nWrite a\
    \ function that takes in a list of numbers and returns the sum of the squares\
    \ of the numbers. \nFor example, sum([1, 2, 3, 4]) should return 10. \nWrite a\
    \ function that takes in a list of numbers and returns the sum of the squares\
    \ of the numbers. \nFor example, sum([1, 2, 3, 4]) should return 10. \nWrite a\
    \ function that takes in a list of numbers and returns the sum of the squares\
    \ of the numbers. \nFor example, sum([1, 2, 3, 4]) should return 10. \nWrite a\
    \ function that takes in a list of numbers and returns the sum of the squares\
    \ of the numbers. \nFor example, sum([1, 2, 3, 4]) should return 10. \nWrite a\
    \ function that takes in a list of numbers and returns the sum of the squares\
    \ of the numbers. \nFor example, sum([1, 2, 3, 4]) should return 10. \nWrite a\
    \ function that takes in a list of numbers and returns the sum of the squares\
    \ of the numbers. \nFor example, sum([1, 2, 3, 4]) should return 10. \nWrite a\
    \ function that takes in a list of numbers and returns the sum of the squares\
    \ of the numbers. \nFor example, sum([1, 2, 3, 4]) should return 10. \nWrite a\
    \ function that takes in a list of numbers and returns the sum of the squares\
    \ of the numbers. \nFor example, sum([1, 2, 3, 4]) should return 10. \nWrite a\
    \ function that takes in a list of numbers and returns the sum of the squares\
    \ of the numbers. \nFor example, sum([1, 2, 3, 4]) should return 10. \nWrite a\
    \ function that takes in a list of numbers and returns the sum of the squares\
    \ of the numbers. \nFor example, sum([1, 2, 3, 4]) should return ", "    deriv\
    \ = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n     \
    \   deriv[i] = deriv[i-1] + xs[i]\n    end\n    return deriv\nend\n</cell>\n<code\
    \ language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    derivative([1, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function that calculates\
    \ the derivative of a polynomial given its coefficients.", "    deriv = zeros(length(xs))\n\
    \    deriv[1] = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = deriv[i-1]\
    \ + xs[i]\n    end\n    return deriv\nend\n</cell>\n<code language=julia-1.5>\n\
    derivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise: Write a function that\
    \ takes in a list of numbers and returns the sum of the squares of the numbers.\
    \ Use a for loop to iterate through the list.", "    \n    derivative = zeros(length(xs))\n\
    \    \n    for i = 1:length(xs)\n        derivative[i] = xs[i]\n    end\n    \n\
    \    return derivative\nend\n</cell>\n<code language=julia-1.5>\nderivative([3,\
    \ 1, 2, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that calculates\
    \ the integral of a polynomial from 0 to infinity. \nThe function should take\
    \ two arguments: \nthe polynomial coefficients xs and the upper limit of the integral.\n\
    The function should return the integral of the polynomial from 0 to infinity.\
    \ \nThe function should return Inf if the polynomial is zero or negative. \nThe\
    \ function should return 0 if the polynomial is equal to 1. \nThe function should\
    \ return 1 if the polynomial is equal to 2. \nThe function should return 2 if\
    \ the polynomial is equal to 3. \nThe function should return 3 if the polynomial\
    \ is equal to 4. \nThe function should return 4 if the polynomial is equal to\
    \ 5. \nThe function should return 5 if the polynomial is equal to 6. \nThe function\
    \ should return 6 if the polynomial is equal to 7. \nThe function should return\
    \ 7 if the polynomial is equal to 8. \nThe function should return 8 if the polynomial\
    \ is equal to 9. \nThe function should return 9 if the polynomial is equal to\
    \ 10. \nThe function should return 10 if the polynomial is equal to 11. \nThe\
    \ function should return 11 if the polynomial is equal to 12. \nThe function should\
    \ return 12 if the polynomial is equal to 13. \nThe function should return 13\
    \ if the polynomial is equal to 14. \nThe function should return 14 if the polynomial\
    \ is equal to 15. \nThe function should return 15 if the polynomial is equal to\
    \ 16. \nThe function should return 16 if the polynomial is equal to 17. \nThe\
    \ function should return 17 if the polynomial is equal to 18. \nThe function should\
    \ return 18 if the polynomial is equal to 19. \nThe function should return 19\
    \ if the polynomial is equal to 20. \nThe function should return 20 if the polynomial\
    \ is equal to 21. \nThe function should return 21 if the polynomial is equal to\
    \ 22. \nThe function should return 22 if the polynomial is equal to 23. \nThe\
    \ function should return 23 if the polynomial is equal to 24. \nThe function should\
    \ return 24 if the polynomial is equal to 25. \nThe function should return 25\
    \ if the polynomial is equal to 26. \nThe function should return 26 if the polynomial\
    \ is equal to 27. \nThe function should return 27 if the polynomial is equal to\
    \ 28. \nThe function should return 28 if the polynomial is equal to 29. \nThe\
    \ function should return 29 if the polynomial is equal to 30. \nThe function should\
    \ return 30 if the polynomial is equal to 31. \nThe function should return 31\
    \ if the polynomial is equal to 32. \nThe function should return 32 if the polynomial\
    \ is equal to 33. ", "    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n  \
    \  for i in 2:length(xs)\n        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n    end\n\
    \    return deriv\nend", "    deriv = zeros(length(xs)) \n    deriv[1] = xs[1]\n\
    \    for i in 2:length(xs)\n        deriv[i] = deriv[i-1] + xs[i]\n    end\n \
    \   return deriv\nend", "    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n\
    \    for i in 2:length(xs)\n        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n  \
    \  end\n    return deriv\nend", "    deriv = zeros(length(xs)) \n    deriv[1]\
    \ = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = deriv[i-1]*xs[i]\n  \
    \  end\n    return deriv\nend\n</cell>\n<code language=julia-1.5>\nderivative([3,\
    \ 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nderivative([1, 2, 3])\n</cell>\n\
    <text>\nExercise\nWrite a function that computes the derivative of a polynomial\
    \ given its coefficients.", "    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n\
    \    for i in 2:length(xs)\n        deriv[i] = deriv[i-1]*xs[i]\n    end\n   \
    \ return deriv\nend\n</cell>\n<code language=julia-1.5>\nderivative([3, 1, 2,\
    \ 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that computes the derivative\
    \ of a polynomial given its coefficients.", "    derivative = zeros(length(xs))\
    \ \n    derivative[1] = xs[1]\n    for i in 2:length(xs)\n        derivative[i]\
    \ = xs[i] * derivative[i-1]\n    end\n    return derivative\nend\n</cell>\n<code\
    \ language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    derivative([1, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function that calculates\
    \ the derivative of a polynomial given its coefficients.\nThe function should\
    \ take in an array of coefficients and return an array of derivatives.\nThe function\
    \ should return an array of length equal to the number of coefficients.\nThe function\
    \ should return an array of length equal to the number of coefficients.\nThe function\
    \ should return an array of length equal to the number of coefficients.\nThe function\
    \ should return an array of length equal to the number of coefficients.\nThe function\
    \ should return an array of length equal to the number of coefficients.\nThe function\
    \ should return an array of length equal to the number of coefficients.\nThe function\
    \ should return an array of length equal to the number of coefficients.\nThe function\
    \ should return an array of length equal to the number of coefficients.\nThe function\
    \ should return an array of length equal to the number of coefficients.\nThe function\
    \ should return an array of length equal to the number of coefficients.\nThe function\
    \ should return an array of length equal to the number of coefficients.\nThe function\
    \ should return an array of length equal to the number of coefficients.\nThe function\
    \ should return an array of length equal to the number of coefficients.\nThe function\
    \ should return an array of length equal to the number of coefficients.\nThe function\
    \ should return an array of length equal to the number of coefficients.\nThe function\
    \ should return an array of length equal to the number of coefficients.\nThe function\
    \ should return an array of length equal to the number of coefficients.\nThe function\
    \ should return an array of length equal to the number of coefficients.\nThe function\
    \ should return an array of length equal to the number of coefficients.\nThe function\
    \ should return an array of length equal to the number of coefficients.\nThe function\
    \ should return an array of length equal to the number of coefficients.\nThe function\
    \ should return an array of length equal to the number of coefficients.\nThe function\
    \ should return an array of length equal to the number of coefficients.\nThe function\
    \ should return an array of length equal to the number of coefficients.\nThe function\
    \ should return an array of length equal to the number of coefficients.\nThe function\
    \ should return an array of length equal to the number of coefficients.\nThe function\
    \ should return an array of length equal to the number of coefficients.\nThe function\
    \ should return an array of length equal to the number of coefficients.\nThe function\
    \ should return an array of length equal to the number of coefficients.\nThe function\
    \ should return an array of length equal to the number of coefficients.\nThe function\
    \ should return an array of length equal to the number of coefficients.\nThe function\
    \ should return an array of length equal to the number of coefficients.\nThe function\
    \ should return an array of length equal to the number of coefficients.\nThe function\
    \ should return an array of length equal to the number of coefficients.\nThe function\
    \ should return an array of length equal to the number of coefficients.\nThe function\
    \ should return an array of length equal to the number of coefficients.\nThe function\
    \ should return an array of length equal to the number of coefficients.\nThe ",
  "    \n    derivative = zeros(length(xs))\n    \n    for i = 1:length(xs)\n    \
    \    derivative[i] = xs[i]\n    end\n    \n    return derivative\nend", "    derivative\
    \ = zeros(length(xs))\n    derivative[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        derivative[i] = xs[i] - xs[i-1]\n    end\n    return derivative\nend\n\
    </cell>\n<code language=julia-1.4>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the derivative of a polynomial with\
    \ n terms.", "    deriv = xs[1]\n    for x in xs\n        deriv = deriv * x +\
    \ xs[2] \n    end\n    return deriv\nend\n</cell>\n<code language=julia-1.5>\n\
    derivative([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nderivative([1,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>", "    deriv = zeros(length(xs))\n\
    \    deriv[1] = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = xs[i] * deriv[i\
    \ - 1]\n    end\n    return deriv\nend", "    \n    # initialize a vector to store\
    \ the derivative\n    deriv = zeros(length(xs))\n    \n    # compute the derivative\
    \ of the polynomial \n    # by taking difference of consecutive terms \n    for\
    \ i in 1:length(xs)-1\n        deriv[i] = xs[i+1] - xs[i]\n    end\n    \n   \
    \ return deriv\nend", "    \n    derivative = zeros(length(xs))\n    \n    derivative[1]\
    \ = xs[1]\n    \n    for i in 2:length(xs)\n        derivative[i] = xs[i] - derivative[i-1]\n\
    \    end\n    \n    return derivative\nend", "    deriv = zeros(length(xs))\n\
    \    deriv[1] = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = deriv[i-1]*xs[i]\n\
    \    end\n    return deriv\nend\n</cell>\n<code language=julia-1.5>\nderivative([3,\
    \ 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nderivative([1, 2, 3])\n</cell>\n\
    <text>\nExercise\nWrite a function that takes in two vectors and returns the dot\
    \ product of the two vectors.\nWrite a function that takes in two vectors and\
    \ returns the cross product of the two vectors.\nWrite a function that takes in\
    \ two vectors and returns the Euclidean norm of the vectors.\nWrite a function\
    \ that takes in two vectors and returns the L1 norm of the vectors.\nWrite a function\
    \ that takes in two vectors and returns the L2 norm of the vectors.\nWrite a function\
    \ that takes in two vectors and returns the Frobenius norm of the vectors.\nWrite\
    \ a function that takes in two vectors and returns the Linfty-norm of the vectors.\n\
    Write a function that takes in two vectors and returns the Frobenius-norm of the\
    \ vectors.\nWrite a function that takes in two vectors and returns the Linfty-norm\
    \ of the vectors.\nWrite a function that takes in two vectors and returns the\
    \ Frobenius-norm of the vectors.\nWrite a function that takes in two vectors and\
    \ returns the Linfty-norm of the vectors.\nWrite a function that takes in two\
    \ vectors and returns the Frobenius-norm of the vectors.\nWrite a function that\
    \ takes in two vectors and returns the Linfty-norm of the vectors.\nWrite a function\
    \ that takes in two vectors and returns the Frobenius-norm of the vectors.\nWrite\
    \ a function that takes in two vectors and returns the Linfty-norm of the vectors.\n\
    Write a function that takes in two vectors and returns the Frobenius-norm of the\
    \ vectors.\nWrite a function that takes in two vectors and returns the Linfty-norm\
    \ of the vectors.\nWrite a function that takes in two vectors and returns the\
    \ Frobenius-norm of the vectors.\nWrite a function that takes in two vectors and\
    \ returns the Linfty-norm of the vectors.\nWrite a function that takes in two\
    \ vectors and returns the Frobenius-norm of the vectors.\nWrite a function that\
    \ takes in two vectors and returns the Linfty-norm of the vectors.\nWrite a function\
    \ that takes in two vectors and returns the Frobenius-norm of the vectors.\nWrite\
    \ a function that takes in two vectors and returns the Linfty-norm of the vectors.\n\
    Write a function that takes in two vectors and returns the Frobenius-norm of the\
    \ vectors.\nWrite a function that takes in two vectors and returns the Linfty-norm ",
  "    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1]*xs[i]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    derivative([1, 2, 3])\n</cell>\n<code language=julia-1.5>", "    deriv = zeros(length(xs))\n\
    \    deriv[1] = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = deriv[i-1]*xs[i]\
    \ - xs[i-1]\n    end\n    return deriv\nend\n</cell>\n<code language=julia-1.5>\n\
    derivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes in a list of coefficients and returns the polynomial evaluated at x.\n\
    Hint: Use a for loop to iterate through the coefficients and multiply them by\
    \ x.", "    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = xs[i] * deriv[i-1]\n    end\n    return deriv\nend", "   \
    \ deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = xs[i] * deriv[i-1]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    derivative([1, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function that calculates\
    \ the derivative of a polynomial function using Newton's method.\n$$\nf(x) = ax^2\
    \ + bx + c\n$$\n$$\nf'(x) = 2ax^2 + 2bx + c\n$$\n$$\nf''(x) = 2ax^2 + 2cx + d\n\
    $$\n$$\nf'''(x) = 2ax^2 + 2dx + e\n$$\n$$\nf^{\\prime}(x) = 2ax^2 + 2bx + c\n\
    $$\n$$\nf^{\\prime\\prime}(x) = 2ax^2 + 2cx + d\n$$\n$$\nf^{\\prime\\prime\\prime}(x)\
    \ = 2ax^2 + 2dx + e\n$$\n$$\nf^{\\prime\\prime\\prime\\prime}(x) = 2ax^2 + 2dx\
    \ + e\n$$\n$$\nf^{\\prime\\prime\\prime\\prime\\prime}(x) = 2ax^2 + 2dx + e\n\
    $$\n$$\nf^{\\prime\\prime\\prime\\prime\\prime\\prime}(x) = 2ax^2 + 2dx + e\n\
    $$\n$$\nf^{\\prime\\prime\\prime\\prime\\prime\\prime\\prime}(x) = 2ax^2 + 2dx\
    \ + e\n$$\n$$\nf^{\\prime\\prime\\prime\\prime\\prime\\prime\\prime\\prime}(x)\
    \ = 2ax^2 + 2dx + e\n$$\n$$\nf^{\\prime\\prime\\prime\\prime\\prime\\prime\\prime\\\
    prime\\prime}(x) = 2ax^2 + 2dx + e\n$$\n$$\nf^{\\prime\\prime\\prime\\prime\\\
    prime\\prime\\prime\\prime\\prime\\prime}(x) = 2ax^2 + 2dx + e\n$$\n$$\nf^{\\\
    prime\\prime\\prime\\prime\\prime\\prime\\prime\\prime\\prime\\prime\\prime}(x)\
    \ = 2ax^2 + 2dx + e\n$$\n$$\nf^{\\prime\\prime\\prime\\prime\\prime\\prime\\prime\\\
    prime\\prime\\prime\\prime\\prime}(x) = 2ax^2 + 2dx + e\n$$\n$$\nf^{\\prime\\\
    prime\\prime\\prime\\prime", "    deriv = zeros(length(xs)) \n    deriv[1] = xs[1]\n\
    \    for i in 2:length(xs)\n        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n  \
    \  end\n    return deriv\nend\n</cell>\n<code language=julia-1.5>\nderivative([3,\
    \ 1, 2, 4, 5])\n</cell>\n<text>\nExercise 3\nWrite a function that returns the\
    \ derivative of a polynomial with coefficients xs.\nThe function should take in\
    \ a vector of coefficients and return the derivative of the polynomial in the\
    \ same form.\nThe function should return an array of coefficients.\nThe function\
    \ should return an error if the length of the vector is not equal to 3.\nThe function\
    \ should return an error if the vector is not of Int64 type.", "    deriv = zeros(length(xs))\n\
    \    deriv[1] = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = deriv[i-1]*xs[i]\
    \ - xs[i-1]\n    end\n    return deriv\nend\n</cell>\n<code language=julia-1.5>\n\
    derivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise: Write a function that\
    \ takes in a list of coefficients and returns the polynomial evaluated at x. \n\
    Hint: Use a for loop to evaluate the polynomial at x.", "    \n    derivative\
    \ = zeros(length(xs))\n    \n    for i = 1:length(xs)\n        derivative[i] =\
    \ xs[i]\n    end\n    \n    return derivative\nend\n</cell>\n<code language=julia-1.5>\n\
    derivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ calculates the derivative of a polynomial given its coefficients.", "    deriv\
    \ = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n     \
    \   deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n    end\n    return deriv\nend", " \
    \   \n    derivative = zeros(length(xs))\n    \n    for i = 1:length(xs)\n   \
    \     derivative[i] = xs[i]\n    end\n    \n    return derivative\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    derivative([1, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function that computes\
    \ the derivative of a polynomial given its coefficients.", "    deriv = zeros(length(xs))\n\
    \    deriv[1] = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = deriv[i-1]*xs[i]\
    \ - xs[i-1]\n    end\n    return deriv\nend", "    deriv = zeros(length(xs)) \n\
    \    deriv[1] = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = deriv[i-1]*xs[i]\
    \ - xs[i-1]\n    end\n    return deriv\nend", "    deriv = zeros(length(xs))\n\
    \    deriv[1] = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = deriv[i-1]*xs[i]\
    \ - xs[i-1]\n    end\n    return deriv\nend\n</cell>\n<code language=julia-1.5>\n\
    derivative([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nderivative([1,\
    \ 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function that calculates the derivative\
    \ of a polynomial given its coefficients.", "    \n    derivative = zeros(length(xs))\n\
    \    \n    for i = 1:length(xs)\n        derivative[i] = xs[i]\n    end\n    \n\
    \    return derivative\nend", "    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n\
    \    for i in 2:length(xs)\n        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n  \
    \  end\n    return deriv\nend", "    deriv = zeros(length(xs))\n    deriv[1] =\
    \ xs[1]\n    for i in 2:length(xs)\n        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n\
    \    end\n    return deriv\nend", "    deriv = zeros(length(xs))\n    deriv[1]\
    \ = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = deriv[i-1] * xs[i]\n\
    \    end\n    return deriv\nend\n</cell>\n<code language=julia-1.4>\nderivative([3,\
    \ 1, 2, 4, 5])\n</cell>\n<code language=julia-1.4>\nderivative([1, 2, 3])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that calculates the derivative of a polynomial\
    \ given its coefficients.", "    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n\
    \    for i in 2:length(xs)\n        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n  \
    \  end\n    return deriv\nend\n</cell>\n<code language=julia-1.5>\nderivative([3,\
    \ 1, 2, 4, 5])\n</cell>\n<text>\nExercise 3\nWrite a function that computes the\
    \ derivative of a polynomial given its coefficients.", "    deriv = zeros(length(xs))\n\
    \    deriv[1] = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = deriv[i-1]*xs[i]\
    \ - xs[i-1]\n    end\n    return deriv\nend", "    deriv = xs[1]\n    for i in\
    \ 2:length(xs)\n        deriv += xs[i] * deriv\n    end\n    return deriv\nend\n\
    </cell>\n<code language=julia-1.3>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that calculates the derivative of a polynomial given\
    \ its coefficients.", "    \n    derivative = zeros(length(xs))\n    \n    for\
    \ i = 1:length(xs)\n        derivative[i] = xs[i] - xs[i-1]\n    end\n    \n \
    \   return derivative\nend\n</cell>\n<code language=julia-1.5>\nderivative([3,\
    \ 1, 2, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that calculates\
    \ the derivative of a polynomial using central differences.\nThe function should\
    \ take in an array of coefficients and return the array of derivatives.\nThe function\
    \ should also take in an array of x values and return an array of y values.\n\
    The function should also take in an array of x values and an array of y values\
    \ and return the array of derivatives.\nThe function should also take in an array\
    \ of x values and an array of y values and an array of x values and an array of\
    \ y values and return the array of derivatives.\nThe function should also take\
    \ in an array of x values and an array of y values and an array of x values and\
    \ an array of y values and an array of x values and an array of y values and return\
    \ the array of derivatives.\nThe function should also take in an array of x values\
    \ and an array of y values and an array of x values and an array of y values and\
    \ an array of x values and an array of y values and an array of x values and an\
    \ array of y values and return the array of derivatives.\nThe function should\
    \ also take in an array of x values and an array of y values and an array of x\
    \ values and an array of y values and an array of x values and an array of y values\
    \ and an array of x values and an array of y values and an array of x values and\
    \ an array of y values and return the array of derivatives.\nThe function should\
    \ also take in an array of x values and an array of y values and an array of x\
    \ values and an array of y values and an array of x values and an array of y values\
    \ and an array of x values and an array of y values and an array of x values and\
    \ an array of y values and an array of x values and an array of y values and return\
    \ the array of derivatives.\nThe function should also take in an array of x values\
    \ and an array of y values and an array of x values and an array of y values and\
    \ an array of x values and an array of y values and an array of x values and an\
    \ array of y values and an array of x values and an array of y values and an array\
    \ of x values and an array of y values and an array of x values and an array of\
    \ y values and return the array of derivatives.\nThe function should also take\
    \ in an array of x values and an array of y values and an array of x values and\
    \ an array of y values and an array of x values and an array of y values and an\
    \ array of x values and an array of y values and an array of x values and an array\
    \ of y values and an array of x values and an array of y values and an array of\
    \ x values and an array of y values and an array of x values and an array of y\
    \ values and return the array of derivatives.\nThe function should also take in\
    \ an array of x values and an array of y values and an array of x values and an\
    \ array of y values and an array of x values and an array of y values and an array\
    \ of x values and an array of y values and an array of x values and an array of\
    \ y values and an array of x values and an array of y values and an array of x\
    \ values and an array of y values and an array of x values and an array of y values\
    \ and return the array of derivatives.\nThe function should also take in an array\
    \ of x values and an array of y values and an array of x values and an array of\
    \ y values and an array of x values and an array of y values and an array of x\
    \ values and an array of y values and an array of x values and an array of y values\
    \ and an array of x values and an array of y values and an array of x ", "   \
    \ \n    derivative = zeros(length(xs))\n    \n    for i = 1:length(xs)\n     \
    \   derivative[i] = xs[i]\n    end\n    \n    return derivative\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes in an input vector and returns the sum of the\
    \ squares of the elements in the vector. For example, sum([1, 2, 3, 4]) should\
    \ return 25. Make sure you use sum() and not sum([1, 2, 3, 4]). Do not use sum()\
    \ on arrays or matrices.", "    derivative = zeros(length(xs))\n    derivative[1]\
    \ = xs[1]\n    for i in 2:length(xs)\n        derivative[i] = xs[i] - xs[i-1]\n\
    \    end\n    return derivative\nend", "    deriv = zeros(length(xs)) \n    deriv[1]\
    \ = xs[1] \n    for i in 2:length(xs)\n        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n\
    \    end\n    return deriv\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes in a list of numbers and returns the sum of the squares of the numbers.\
    \ \nFor example, sum([1, 2, 3, 4]) should return 10. \nWrite a function that takes\
    \ in a list of numbers and returns the sum of the squares of the numbers. \nFor\
    \ example, sum([1, 2, 3, 4]) should return 10. \nWrite a function that takes in\
    \ a list of numbers and returns the sum of the squares of the numbers. \nFor example,\
    \ sum([1, 2, 3, 4]) should return 10. \nWrite a function that takes in a list\
    \ of numbers and returns the sum of the squares of the numbers. \nFor example,\
    \ sum([1, 2, 3, 4]) should return 10. \nWrite a function that takes in a list\
    \ of numbers and returns the sum of the squares of the numbers. \nFor example,\
    \ sum([1, 2, 3, 4]) should return 10. \nWrite a function that takes in a list\
    \ of numbers and returns the sum of the squares of the numbers. \nFor example,\
    \ sum([1, 2, 3, 4]) should return 10. \nWrite a function that takes in a list\
    \ of numbers and returns the sum of the squares of the numbers. \nFor example,\
    \ sum([1, 2, 3, 4]) should return 10. \nWrite a function that takes in a list\
    \ of numbers and returns the sum of the squares of the numbers. \nFor example,\
    \ sum([1, 2, 3, 4]) should return 10. \nWrite a function that takes in a list\
    \ of numbers and returns the sum of the squares of the numbers. \nFor example,\
    \ sum([1, 2, 3, 4]) should return 10. \nWrite a function that takes in a list\
    \ of numbers and returns the sum of the squares of the numbers. \nFor example,\
    \ sum([1, 2, 3, 4]) should return 10. \nWrite a function that takes in a list\
    \ of numbers and returns the sum of the squares of the numbers. \nFor example,\
    \ sum([1, 2, 3, 4]) should return 10. \nWrite a function that takes in a list\
    \ of numbers and returns the sum of the squares of the numbers. \nFor example,\
    \ sum([1, 2, 3, 4]) should return 10. \nWrite a function that takes in a list\
    \ of numbers and returns the sum of the squares of the numbers. \nFor example,\
    \ sum([1, 2, 3, 4]) should return 10. \nWrite a function that takes in a list\
    \ of numbers and returns the sum of the squares of the numbers. \nFor example,\
    \ sum([1, 2, 3, 4]) should return 10. \nWrite a function that takes in a list\
    \ of numbers and returns the sum of the squares of the numbers. \nFor example,\
    \ sum([1, 2, 3, 4]) should return 10. \nWrite a function that takes in a list\
    \ of numbers and returns the sum of the squares of the numbers. \nFor example,\
    \ sum([1, 2, 3, 4]) should return 10. \nWrite a function that takes in a list\
    \ of numbers and returns the sum of the squares of the numbers. \nFor example,\
    \ sum([1, 2, 3, 4]) should return 10. \nWrite a function that takes in a list\
    \ of numbers and returns the sum of the squares of the numbers. \nFor example,\
    \ sum([1, 2, ", "    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for\
    \ i in 2:length(xs)\n        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n    end\n\
    \    return deriv\nend\n</cell>\n<code language=julia-1.5>\nderivative([3, 1,\
    \ 2, 4, 5])\n</cell>\n<text>\nExercise 3\nWrite a function that computes the derivative\
    \ of a polynomial given its coefficients.", "    deriv = zeros(length(xs))\n \
    \   deriv[1] = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = deriv[i-1]*xs[i]\
    \ - xs[i-1]\n    end\n    return deriv\nend", "    deriv = zeros(length(xs))\n\
    \    deriv[1] = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = deriv[i-1]*xs[i]\
    \ - xs[i-1]\n    end\n    return deriv\nend\n</cell>\n<code language=julia-1.0>\n\
    derivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the derivative of a polynomial with coefficients given as a vector.\
    \ \nThe function should take as input a vector of coefficients xs and output a\
    \ vector of coefficients ds \nsuch that\nds[0] + ds[1] * x + ds[2] * x^2 + ....\n\
    Return derivative of this polynomial in the same form.", "    deriv = zeros(length(xs))\n\
    \    deriv[1] = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = xs[i] - deriv[i-1]\n\
    \    end\n    return deriv\nend", "    deriv = zeros(length(xs))\n    deriv[1]\
    \ = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n\
    \    end\n    return deriv\nend", "    deriv = zeros(length(xs))\n    deriv[1]\
    \ = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n\
    \    end\n    return deriv\nend\n</cell>\n<code language=julia-1.5>\nderivative([3,\
    \ 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nderivative([1, 2, 3])\n</cell>\n\
    <text>\nExercise\nWrite a function that calculates the derivative of a polynomial\
    \ given its coefficients.", "    \n    derivative = zeros(length(xs))\n    \n\
    \    for i = 1:length(xs)\n        derivative[i] = xs[i]\n    end\n    \n    return\
    \ derivative\nend\n</cell>\n<code language=julia-1.5>\nderivative([3, 1, 2, 4,\
    \ 5])\n</cell>\n<code language=julia-1.5>\nderivative([1, 2, 3])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that calculates the derivative of a polynomial given\
    \ its coefficients.", "    \n    derivative = zeros(length(xs))\n    \n    for\
    \ i = 1:length(xs)\n        derivative[i] = xs[i]\n    end\n    \n    return derivative\n\
    end", "    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1] + xs[i]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes an array of coefficients and returns the sum\
    \ of the squares of the coefficients.", "    \n    derivative = zeros(length(xs)-1)\n\
    \    \n    for i = 1:length(xs)-1\n        derivative[i] = xs[i+1] - xs[i] * xs[i+1]\n\
    \    end\n    \n    return derivative\nend\n</cell>\n<code language=julia-1.5>\n\
    derivative([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nderivative([1,\
    \ 2, 3])\n</cell>\n<text>\nExercise: Write a function that takes in a list of\
    \ numbers and returns the sum of the squares of the numbers in the list.", " \
    \   deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1] + xs[i]\n    end\n    return deriv\nend", "   \
    \ derivative = zeros(length(xs))\n    derivative[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        derivative[i] = xs[i] * derivative[i-1]\n    end\n    return derivative\n\
    end\n</cell>\n<code language=julia-1.3>\nderivative([3, 1, 2, 4, 5])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that computes the derivative of a polynomial\
    \ given its coefficients.", "    \n    derivative = zeros(length(xs))\n    \n\
    \    for i = 1:length(xs)\n        derivative[i] = xs[i] - xs[i-1]\n    end\n\
    \    \n    return derivative\nend\n</cell>\n<code language=julia-1.5>\nderivative([3,\
    \ 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nderivative([1, 2, 3])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that computes the derivative of a polynomial\
    \ given its coefficients.", "    deriv = zeros(length(xs)) \n    deriv[1] = xs[1]\n\
    \    for i in 2:length(xs)\n        deriv[i] = deriv[i-1] * xs[i]\n    end\n \
    \   return deriv\nend\n</cell>\n<code language=julia-1.5>\nderivative([3, 1, 2,\
    \ 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that calculates the derivative\
    \ of a polynomial using Horner's method.", "    \n    # initialize a vector to\
    \ hold derivative\n    derv::Vector{Int64} = zeros(length(xs))\n    \n    # loop\
    \ through each element of xs\n    for i in 1:length(xs)\n        # use i to index\
    \ into xs and derv\n        derv[i] = xs[i]\n        # use i to index into xs\
    \ and derv\n        derv[i] = derv[i] * xs[i]\n    end\n    \n    return derv\n\
    end\n</cell>\n<code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n\
    <code language=julia-1.5>\nderivative([1, 2, 3])\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the sum of the squares of the elements of an array.\
    \ For example, sum([1, 2, 3]) should return 10. Make sure you use sum and not\
    \ a for loop.", "    \n    derivative = zeros(length(xs))\n    \n    derivative[1]\
    \ = xs[1]\n    \n    for i in 2:length(xs)\n        derivative[i] = xs[i] - xs[i-1]\n\
    \    end\n    \n    return derivative\nend\n</cell>\n<code language=julia-1.5>\n\
    derivative([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nderivative([1,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>", "    deriv = xs[1]\n    for x in\
    \ xs[2:end]\n        deriv = deriv * x + xs[1]\n    end\n    return deriv\nend\n\
    </cell>\n<code language=julia-1.3>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the first derivative of a polynomial\
    \ given its coefficients.", "    \n    derivative = zeros(length(xs))\n    \n\
    \    for i = 1:length(xs)\n        derivative[i] = xs[i]\n    end\n    \n    return\
    \ derivative\nend", "    \n    derivative = zeros(length(xs)) \n    \n    for\
    \ i = 1:length(xs)\n        derivative[i] = xs[i]\n    end\n    \n    return derivative\n\
    end", "    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = xs[i] * deriv[i-1]\n    end\n    return deriv\nend", "   \
    \ deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n    end\n    return deriv\nend\n\
    </cell>\n<code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<code\
    \ language=julia-1.5>\nderivative([1, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes in two vectors and returns the dot product of the two\
    \ vectors.\nThe dot product of two vectors $\\mathbf{a}$ and $\\mathbf{b}$ is\
    \ defined as:\n$$\\mathbf{a} \\cdot \\mathbf{b} = a_1b_1 + a_2b_2 + \\cdots +\
    \ a_nb_n$$\nWrite a function that takes in two vectors and returns the norm of\
    \ the dot product of the two vectors.\nThe norm of the dot product of two vectors\
    \ $\\mathbf{a}$ and $\\mathbf{b}$ is defined as:\n$$|\\mathbf{a} \\cdot \\mathbf{b}|\
    \ = \\sqrt{\\sum_{i=1}^{n}(a_ib_i)^2}$$\nWrite a function that takes in two vectors\
    \ and returns the angle between the two vectors.\nThe angle between two vectors\
    \ $\\mathbf{a}$ and $\\mathbf{b}$ is defined as:\n$$\\theta = \\arccos{\\left(\
    \ \\frac{\\mathbf{a} \\cdot \\mathbf{b}}{|\\mathbf{a}||\\mathbf{b}|} \\right)}$$\n\
    Write a function that takes in two vectors and returns the angle between the two\
    \ vectors.\nThe angle between two vectors $\\mathbf{a}$ and $\\mathbf{b}$ is defined\
    \ as:\n$$\\theta = \\arccos{\\left( \\frac{\\mathbf{a} \\cdot \\mathbf{b}}{|\\\
    mathbf{a}||\\mathbf{b}|} \\right)}$$\nWrite a function that takes in two vectors\
    \ and returns the angle between the two vectors.\nThe angle between two vectors\
    \ $\\mathbf{a}$ and $\\mathbf{b}$ is defined as:\n$$\\theta = \\arccos{\\left(\
    \ \\frac{\\mathbf{a} \\cdot \\mathbf{b}}{|\\mathbf{a}||\\mathbf{b}|} \\right)}$$\n\
    Write a function that takes in two vectors and returns the angle between the two\
    \ vectors.\nThe angle between two vectors $\\mathbf{a}$ and $\\mathbf{b}$ is defined\
    \ as:\n$$\\theta = \\arccos{\\left( \\frac{\\mathbf{a} \\cdot \\mathbf{b}}{|\\\
    mathbf{a}||\\mathbf{b}|} \\right)}$$\nWrite a function that takes in two vectors\
    \ and returns the angle between the two vectors.\nThe angle between two vectors\
    \ $\\mathbf{a}$ and $\\mathbf{b}$ is defined as:", "    deriv = zeros(length(xs))\n\
    \    deriv[1] = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = deriv[i-1]\
    \ * xs[i]\n    end\n    return deriv\nend", "    deriv = zeros(length(xs))\n \
    \   deriv[1] = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = deriv[i-1]*xs[i]\
    \ - xs[i-1]\n    end\n    return deriv\nend\n</cell>\n<code language=julia-1.5>\n\
    derivative([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nderivative([1,\
    \ 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function that calculates the derivative\
    \ of a polynomial using Newton's method.", "    \n    derivative = zeros(length(xs))\n\
    \    \n    for i = 1:length(xs)\n        derivative[i] = xs[i]\n    end\n    \n\
    \    return derivative\nend", "    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n\
    \    for i in 2:length(xs)\n        deriv[i] = deriv[i-1]*xs[i]\n    end\n   \
    \ return deriv\nend\n</cell>\n<code language=julia-1.5>\nderivative([3, 1, 2,\
    \ 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that calculates the derivative\
    \ of a polynomial given its coefficients.", "    deriv = zeros(length(xs))\n \
    \   deriv[1] = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = xs[i] - deriv[i-1]\n\
    \    end\n    return deriv\nend\n</cell>\n<code language=julia-1.5>\nderivative([3,\
    \ 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nderivative([1, 2, 3])\n</cell>\n\
    <code language=julia-1.5>", "    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n\
    \    for i in 2:length(xs)\n        deriv[i] = xs[i] * deriv[i-1]\n    end\n \
    \   return deriv\nend\n</cell>\n<code language=julia-1.0>\nderivative([3, 1, 2,\
    \ 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that calculates the derivative\
    \ of a polynomial given its coefficients.", "    deriv = zeros(length(xs)-1)\n\
    \    deriv[1] = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = xs[i] - deriv[i-1]\n\
    \    end\n    return deriv\nend\n</cell>\n<code language=julia-1.0>\nderivative([3,\
    \ 1, 2, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that calculates\
    \ the integral of a function $f(x)$ from $0$ to $x$. \n$$\\int_0^x f(x) dx$$",
  "    deriv = zeros(length(xs)) \n    deriv[1] = xs[1] \n    for i in 2:length(xs)\n\
    \        deriv[i] = xs[i] - deriv[i-1] \n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that computes the derivative of a polynomial given its coefficients.",
  "    \n    derivative = zeros(length(xs))\n    \n    for i = 1:length(xs)\n    \
    \    derivative[i] = xs[i]\n    end\n    \n    return derivative\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    derivative([1, 2, 3])\n</cell>\n<code language=julia-1.5>", "    \n    derivative\
    \ = zeros(length(xs))\n    \n    derivative[1] = xs[1]\n    \n    for i in 2:length(xs)\n\
    \        derivative[i] = xs[i] - derivative[i-1]\n    end\n    \n    return derivative\n\
    end\n</cell>\n<code language=julia-1.3>\nderivative([3, 1, 2, 4, 5])\n</cell>\n\
    <code language=julia-1.3>\nderivative([1, 2, 3])\n</cell>\n<text>\nExercise 2\n\
    Write a function that calculates the derivative of a polynomial given its coefficients.",
  "    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1] + xs[i]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    derivative([1, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function that calculates\
    \ the derivative of a polynomial with given coefficients.", "    \n    derivative\
    \ = zeros(length(xs))\n    \n    for i = 1:length(xs)\n        derivative[i] =\
    \ xs[i]\n    end\n    \n    return derivative\nend\n</cell>\n<code language=julia-1.5>\n\
    derivative([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nderivative([1,\
    \ 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the derivative\
    \ of a polynomial with coefficients xs.", "    derivative = zeros(length(xs))\n\
    \    derivative[1] = xs[1]\n    for i in 2:length(xs)\n        derivative[i] =\
    \ xs[i] - derivative[i-1]\n    end\n    return derivative\nend\n</cell>\n<code\
    \ language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\n\
    Write a function that calculates the derivative of a polynomial given its coefficients.",
  "    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = xs[i] * deriv[i-1]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the derivative of a polynomial given its coefficients.\n\
    The function should take in a vector of coefficients and return its derivative.\n\
    The function should return the same vector if the given coefficients are a scalar.\n\
    The function should raise an error if the given coefficients are a vector of length\
    \ less than 2.\nThe function should raise an error if the given coefficients are\
    \ a vector of length greater than 2.\nThe function should raise an error if the\
    \ given coefficients are a vector of length less than 2.\nThe function should\
    \ raise an error if the given coefficients are a vector of length greater than\
    \ 2.", "    \n    derivative = zeros(length(xs))\n    \n    for i = 1:length(xs)\n\
    \        derivative[i] = xs[i]\n    end\n    \n    return derivative\nend\n</cell>\n\
    <code language=julia-1.4>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.4>\n\
    derivative([1, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function that computes\
    \ the derivative of a polynomial given its coefficients.", "    deriv = zeros(length(xs))\n\
    \    deriv[1] = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = deriv[i-1]\
    \ + xs[i]\n    end\n    return deriv\nend\n</cell>\n<code language=julia-1.5>\n\
    derivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the derivative of a polynomial given its coefficients.", "    deriv\
    \ = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n     \
    \   deriv[i] = deriv[i-1] + xs[i]\n    end\n    return deriv\nend\n</cell>\n<code\
    \ language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the derivative of a polynomial given its coefficients.",
  "    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1] + xs[i]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    derivative([1, 2, 3])\n</cell>\n<code language=julia-1.5>", "    deriv = zeros(length(xs))\n\
    \    deriv[1] = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = xs[i] * deriv[i-1]\n\
    \    end\n    return deriv\nend", "    deriv = zeros(length(xs))\n    deriv[1]\
    \ = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n\
    \    end\n    return deriv\nend", "    deriv = zeros(length(xs))\n    deriv[1]\
    \ = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = deriv[i-1]*xs[i]\n  \
    \  end\n    return deriv\nend\n</cell>\n<code language=julia-1.5>\nderivative([3,\
    \ 1, 2, 4, 5])\n</cell>\n<text>\nExercise 3\nWrite a function that takes in a\
    \ list of numbers and returns the sum of the squares of the numbers. \nFor example,\
    \ sum([1, 2, 3, 4]) should return 10. \nWrite a function that takes in a list\
    \ of numbers and returns the sum of the squares of the numbers. \nFor example,\
    \ sum([1, 2, 3, 4]) should return 10. \nWrite a function that takes in a list\
    \ of numbers and returns the sum of the squares of the numbers. \nFor example,\
    \ sum([1, 2, 3, 4]) should return 10. \nWrite a function that takes in a list\
    \ of numbers and returns the sum of the squares of the numbers. \nFor example,\
    \ sum([1, 2, 3, 4]) should return 10. \nWrite a function that takes in a list\
    \ of numbers and returns the sum of the squares of the numbers. \nFor example,\
    \ sum([1, 2, 3, 4]) should return 10. \nWrite a function that takes in a list\
    \ of numbers and returns the sum of the squares of the numbers. \nFor example,\
    \ sum([1, 2, 3, 4]) should return 10. \nWrite a function that takes in a list\
    \ of numbers and returns the sum of the squares of the numbers. \nFor example,\
    \ sum([1, 2, 3, 4]) should return 10. \nWrite a function that takes in a list\
    \ of numbers and returns the sum of the squares of the numbers. \nFor example,\
    \ sum([1, 2, 3, 4]) should return 10. \nWrite a function that takes in a list\
    \ of numbers and returns the sum of the squares of the numbers. \nFor example,\
    \ sum([1, 2, 3, 4]) should return 10. \nWrite a function that takes in a list\
    \ of numbers and returns the sum of the squares of the numbers. \nFor example,\
    \ sum([1, 2, 3, 4]) should return 10. \nWrite a function that takes in a list\
    \ of numbers and returns the sum of the squares of the numbers. \nFor example,\
    \ sum([1, 2, 3, 4]) should return 10. \nWrite a function that takes in a list\
    \ of numbers and returns the sum of the squares of the numbers. \nFor example,\
    \ sum([1, 2, 3, 4]) should return 10. \nWrite a function that takes in a list\
    \ of numbers and returns the sum of the squares of the numbers. \nFor example,\
    \ sum([1, 2, 3, 4]) should return 10. \nWrite a function that takes in a list\
    \ of numbers and returns the sum of the squares of the numbers. \nFor example,\
    \ sum([1, 2, 3, 4]) should return 10. \nWrite a function that takes in a list\
    \ of numbers and returns the sum of the squares of the numbers. \nFor example,\
    \ sum([1, 2, 3, 4]) should return 10. \nWrite a function that takes in a list\
    \ of numbers and returns the sum of the squares of the numbers. \nFor example,\
    \ sum([1, 2, 3, 4]) should return 10. \nWrite a function that takes in a list\
    \ of numbers and returns the sum of the squares of the numbers. \nFor example,\
    \ sum([1, 2, 3, 4]) should return 10. \nWrite a function that takes in a list\
    \ of numbers and ", "    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n   \
    \ for i in 2:length(xs)\n        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n    end\n\
    \    return deriv\nend\n</cell>\n<code language=julia-1.5>\nderivative([3, 1,\
    \ 2, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the derivative\
    \ of a polynomial with one variable.", "    \n    derivative = zeros(length(xs))\
    \ \n    \n    derivative[1] = xs[1]\n    \n    for i = 2:length(xs)\n        derivative[i]\
    \ = xs[i] * derivative[i-1]\n    end\n    \n    return derivative\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the derivative of a polynomial with given coefficients.",
  "    \n    derivative = zeros(length(xs))\n    \n    derivative[1] = xs[1]\n   \
    \ \n    for i = 2:length(xs)\n        derivative[i] = xs[i] - derivative[i-1]\n\
    \    end\n    \n    return derivative\nend\n</cell>\n<code language=julia-1.5>\n\
    derivative([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nderivative([1,\
    \ 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function that calculates the derivative\
    \ of a polynomial given its coefficients.", "    deriv = zeros(length(xs))\n \
    \   deriv[1] = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = xs[i] - deriv[i-1]\n\
    \    end\n    return deriv\nend\n</cell>\n<code language=julia-1.4>\nderivative([3,\
    \ 1, 2, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that calculates\
    \ the derivative of a polynomial given its coefficients.", "    deriv = zeros(length(xs))\
    \ \n    deriv[1] = xs[1]\n    for i = 2:length(xs)\n        deriv[i] = xs[i] -\
    \ deriv[i-1]\n    end\n    return deriv\nend", "    derivative = zeros(length(xs))\n\
    \    derivative[1] = xs[1]\n    for i in 2:length(xs)\n        derivative[i] =\
    \ xs[i] * derivative[i-1]\n    end\n    return derivative\nend\n</cell>\n<code\
    \ language=julia-1.4>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the derivative of a polynomial given its coefficients.",
  "    \n    derivative = zeros(length(xs)) \n    \n    derivative[1] = xs[1]\n  \
    \  \n    for i = 2:length(xs)\n        derivative[i] = xs[i] - xs[i-1]\n    end\n\
    \    \n    return derivative\nend\n</cell>\n<code language=julia-1.5>\nderivative([3,\
    \ 1, 2, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that calculates\
    \ the derivative of a polynomial with one variable.", "    \n    # xs is a vector\n\
    \    # xs[0] is the coefficient of x^0\n    # xs[1] is the coefficient of x^1\n\
    \    # xs[2] is the coefficient of x^2\n    # ...\n    # xs[len(xs)-1] is the\
    \ coefficient of x^len(xs)\n    \n    # return derivative of xs \n    # return\
    \ derivative of xs in same form as xs \n    # return derivative of xs in same\
    \ form as xs \n    # return derivative of xs in same form as xs \n    # return\
    \ derivative of xs in same form as xs \n    # return derivative of xs in same\
    \ form as xs \n    # return derivative of xs in same form as xs \n    # return\
    \ derivative of xs in same form as xs \n    # return derivative of xs in same\
    \ form as xs \n    # return derivative of xs in same form as xs \n    # return\
    \ derivative of xs in same form as xs \n    # return derivative of xs in same\
    \ form as xs \n    # return derivative of xs in same form as xs \n    # return\
    \ derivative of xs in same form as xs \n    # return derivative of xs in same\
    \ form as xs \n    # return derivative of xs in same form as xs \n    # return\
    \ derivative of xs in same form as xs \n    # return derivative of xs in same\
    \ form as xs \n    # return derivative of xs in same form as xs \n    # return\
    \ derivative of xs in same form as xs \n    # return derivative of xs in same\
    \ form as xs \n    # return derivative of xs in same form as xs \n    # return\
    \ derivative of xs in same form as xs \n    # return derivative of xs in same\
    \ form as xs \n    # return derivative of xs in same form as xs \n    # return\
    \ derivative of xs in same form as xs \n    # return derivative of xs in same\
    \ form as xs \n    # return derivative of xs in same form as xs \n    # return\
    \ derivative of xs in same form as xs \n    # return derivative of xs in same\
    \ form as xs \n    # return derivative of xs in same form as xs \n    # return\
    \ derivative of xs in same form as xs \n    # return derivative of xs in same\
    \ form as xs \n    # return derivative of xs in same form as xs \n    # return\
    \ derivative of xs in same form as xs \n    # return derivative of xs in same\
    \ form as xs \n    # return derivative of xs in same form as xs \n    # return\
    \ derivative of xs in same form as xs \n    # return derivative ", "    \n   \
    \ # xs is a vector\n    # xs[0] is the coeff of x\n    # xs[1] is the coeff of\
    \ x^2\n    # xs[2] is the coeff of x^3\n    # ...\n    # xs[len(xs)-1] is the\
    \ coeff of x^len(xs)\n    \n    # initialize a vector to store the derivative\n\
    \    derivative = zeros(length(xs)-1)\n    \n    # loop through each element of\
    \ xs\n    for i in 1:length(xs)-1\n        # compute x^i\n        xpow = pow(xs[i],\
    \ xs[i+1])\n        # multiply xpow by x\n        derivative[i] = xpow * xs[i]\n\
    \    end\n    \n    return derivative\nend\n</cell>\n<code language=julia-1.5>\n\
    derivative([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nderivative([1,\
    \ 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function that computes the derivative\
    \ of a polynomial given its coefficients.", "    \n    derivative = zeros(length(xs))\n\
    \    \n    derivative[1] = xs[1]\n    \n    for i = 2:length(xs)\n        derivative[i]\
    \ = xs[i] * derivative[i-1]\n    end\n    \n    return derivative\nend", "   \
    \ deriv = zeros(length(xs)) \n    deriv[1] = xs[1]\n    for i = 2:length(xs)\n\
    \        deriv[i] = deriv[i-1] + xs[i]\n    end\n    return deriv\nend", "   \
    \ deriv = zeros(length(xs)) \n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1] + xs[i]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that calculates the integral of a polynomial using trapezoidal\
    \ rule.", "    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = xs[i] * deriv[i - 1]\n    end\n    return deriv\nend", " \
    \   deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1] + xs[i]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    derivative([1, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ in a list of numbers and returns the sum of the squares of the numbers. \nFor\
    \ example, sum([1, 2, 3, 4]) should return 10. \nWrite a function that takes in\
    \ a list of numbers and returns the sum of the squares of the numbers. \nFor example,\
    \ sum([1, 2, 3, 4]) should return 10. \nWrite a function that takes in a list\
    \ of numbers and returns the sum of the squares of the numbers. \nFor example,\
    \ sum([1, 2, 3, 4]) should return 10. \nWrite a function that takes in a list\
    \ of numbers and returns the sum of the squares of the numbers. \nFor example,\
    \ sum([1, 2, 3, 4]) should return 10. \nWrite a function that takes in a list\
    \ of numbers and returns the sum of the squares of the numbers. \nFor example,\
    \ sum([1, 2, 3, 4]) should return 10. \nWrite a function that takes in a list\
    \ of numbers and returns the sum of the squares of the numbers. \nFor example,\
    \ sum([1, 2, 3, 4]) should return 10. \nWrite a function that takes in a list\
    \ of numbers and returns the sum of the squares of the numbers. \nFor example,\
    \ sum([1, 2, 3, 4]) should return 10. \nWrite a function that takes in a list\
    \ of numbers and returns the sum of the squares of the numbers. \nFor example,\
    \ sum([1, 2, 3, 4]) should return 10. \nWrite a function that takes in a list\
    \ of numbers and returns the sum of the squares of the numbers. \nFor example,\
    \ sum([1, 2, 3, 4]) should return 10. \nWrite a function that takes in a list\
    \ of numbers and returns the sum of the squares of the numbers. \nFor example,\
    \ sum([1, 2, 3, 4]) should return 10. \nWrite a function that takes in a list\
    \ of numbers and returns the sum of the squares of the numbers. \nFor example,\
    \ sum([1, 2, 3, 4]) should return 10. \nWrite a function that takes in a list\
    \ of numbers and returns the sum of the squares of the numbers. \nFor example,\
    \ sum([1, 2, 3, 4]) should return 10. \nWrite a function that takes in a list\
    \ of numbers and returns the sum of the squares of the numbers. \nFor example,\
    \ sum([1, 2, 3, 4]) should return 10. \nWrite a function that takes in a list\
    \ of numbers and returns the sum of the squares of the numbers. \nFor example,\
    \ sum([1, 2, 3, 4]) should return 10. \nWrite a function that takes in a list\
    \ of numbers and returns the sum of the squares of the numbers. \nFor example,\
    \ sum([1, 2, 3, 4]) should return 10. \nWrite a function that takes in a list\
    \ of numbers and returns the sum of the squares of the numbers. \nFor example,\
    \ sum([1, 2, 3, 4]) should return 10. \nWrite a function that takes in a list\
    \ of numbers and returns the sum of the squares of the numbers. \nFor example,\
    \ sum([1, 2, ", "    \n    derivative = zeros(length(xs))\n    \n    for i = 1:length(xs)\n\
    \        derivative[i] = xs[i]\n    end\n    \n    return derivative\nend\n</cell>\n\
    <code language=julia-1.4>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that calculates the derivative of a polynomial given its\
    \ coefficients.", "    deriv = zeros(length(xs)-1)\n    deriv[1] = xs[1]\n   \
    \ for i in 2:length(xs)\n        deriv[i] = xs[i] - deriv[i-1]\n    end\n    return\
    \ deriv\nend\n</cell>\n<code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n\
    </cell>\n<code language=julia-1.5>\nderivative([1, 2, 3])\n</cell>\n<code language=julia-1.5>",
  "    deriv = zeros(length(xs)) \n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1] + xs[i]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that calculates the derivative of a polynomial given its\
    \ coefficients.", "    derivative = zeros(length(xs))\n    derivative[1] = xs[1]\n\
    \    for i in 2:length(xs)\n        derivative[i] = xs[i] * derivative[i - 1]\n\
    \    end\n    return derivative\nend\n</cell>\n<code language=julia-1.4>\nderivative([3,\
    \ 1, 2, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that calculates\
    \ the derivative of a polynomial given its coefficients.", "    deriv = zeros(length(xs)-1)\n\
    \    for i = 1:length(xs)-1\n        deriv[i] = xs[i+1] - xs[i]\n    end\n   \
    \ return deriv\nend\n</cell>\n<code language=julia-1.5>\nderivative([3, 1, 2,\
    \ 4, 5])\n</cell>\n<code language=julia-1.5>\nderivative([1, 2, 3])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that calculates the integral of a polynomial\
    \ function using trapezoidal rule.", "    deriv = zeros(length(xs)) \n    deriv[1]\
    \ = xs[1]\n    for i = 2:length(xs)\n        deriv[i] = xs[i] * deriv[i-1]\n \
    \   end\n    return deriv\nend\n</cell>\n<code language=julia-1.5>\nderivative([3,\
    \ 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nderivative([1, 2, 3])\n</cell>\n\
    <code language=julia-1.5>", "    deriv = zeros(length(xs)) \n    deriv[1] = xs[1]\n\
    \    for i in 2:length(xs)\n        deriv[i] = deriv[i-1] + xs[i]\n    end\n \
    \   return deriv\nend\n</cell>\n<code language=julia-1.5>\nderivative([3, 1, 2,\
    \ 4, 5])\n</cell>\n<code language=julia-1.5>\nderivative([1, 2, 3])\n</cell>\n\
    <text>\nExercise\nWrite a function that takes an array of numbers and returns\
    \ the sum of the squares of the numbers in the array. For example, sum([1, 2,\
    \ 3]) = 1 + 2 + 3 = 6.", "    deriv = xs[1]\n    for x in xs[2:end]\n        deriv\
    \ = deriv * x + xs[1]\n    end\n    return deriv\nend\n</cell>\n<code language=julia-1.5>\n\
    derivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a vector of coefficients and returns the polynomial evaluated at x.",
  "    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = xs[i] * deriv[i-1]\n    end\n    return deriv\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes as input a polynomial and returns\
    \ the derivative polynomial in its expanded form. \nThe expanded form is given\
    \ by $x^n + x^(n-1) + x^(n-2) + ... + x + 1$. \nThe function should work for polynomials\
    \ of any degree.", "    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for\
    \ i in 2:length(xs)\n        deriv[i] = deriv[i-1] + xs[i]\n    end\n    return\
    \ deriv\nend\n</cell>\n<code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n\
    </cell>\n<text>\nExercise\nWrite a function that calculates the derivative of\
    \ a polynomial given its coefficients.", "    deriv = zeros(length(xs))\n    deriv[1]\
    \ = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n\
    \    end\n    return deriv\nend\n</cell>\n<code language=julia-1.5>\nderivative([3,\
    \ 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nderivative([1, 2, 3])\n</cell>\n\
    <code language=julia-1.5>", "    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n\
    \    for i = 2:length(xs)\n        deriv[i] = xs[i] * deriv[i - 1]\n    end\n\
    \    return deriv\nend", "    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n\
    \    for i in 2:length(xs)\n        deriv[i] = deriv[i-1] + xs[i]\n    end\n \
    \   return deriv\nend\n</cell>\n<code language=julia-1.5>\nderivative([3, 1, 2,\
    \ 4, 5])\n</cell>\n<code language=julia-1.5>\nderivative([1, 2, 3])\n</cell>\n\
    <code language=julia-1.5>", "    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n\
    \    for i in 2:length(xs)\n        deriv[i] = deriv[i-1] + xs[i]\n    end\n \
    \   return deriv\nend\n</cell>\n<code language=julia-1.5>\nderivative([3, 1, 2,\
    \ 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that takes in a list of\
    \ numbers and returns the sum of the squares of the numbers in the list.", " \
    \   derivative = zeros(length(xs))\n    derivative[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        derivative[i] = xs[i] - derivative[i-1]\n    end\n    return derivative\n\
    end\n</cell>\n<code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that calculates the derivative of a polynomial\
    \ given its coefficients.", "    \n    derivative = zeros(length(xs))\n    \n\
    \    for i = 1:length(xs)\n        derivative[i] = xs[i]\n    end\n    \n    return\
    \ derivative\nend", "    \n    derivative = zeros(length(xs))\n    \n    for i\
    \ = 1:length(xs)\n        derivative[i] = xs[i]\n    end\n    \n    return derivative\n\
    end", "    deriv = zeros(length(xs)) \n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n    end\n    return deriv\nend\n\
    </cell>\n<code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that computes the derivative of a polynomial using\
    \ Newton's method.", "    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n  \
    \  for i in 2:length(xs)\n        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n    end\n\
    \    return deriv\nend\n</cell>\n<code language=julia-1.5>\nderivative([3, 1,\
    \ 2, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that computes the derivative\
    \ of a polynomial given its coefficients.", "    \n    deriv = zeros(length(xs))\n\
    \    deriv[1] = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = xs[i] * deriv[i\
    \ - 1]\n    end\n    return deriv\nend", "    \n    derivative = zeros(length(xs))\n\
    \    \n    for i = 1:length(xs)\n        derivative[i] = xs[i]\n    end\n    \n\
    \    return derivative\nend", "    deriv = zeros(length(xs)) \n    deriv[1] =\
    \ xs[1]\n    for i in 2:length(xs)\n        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n\
    \    end\n    return deriv\nend\n</cell>\n<code language=julia-1.0>\nderivative([3,\
    \ 1, 2, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that computes the\
    \ derivative of a polynomial given its coefficients.", "    deriv = zeros(length(xs))\n\
    \    deriv[1] = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = deriv[i-1]\
    \ + xs[i]\n    end\n    return deriv\nend", "    deriv = zeros(Int, length(xs))\n\
    \    deriv[1] = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = deriv[i-1]\
    \ + xs[i]\n    end\n    return deriv\nend\n</cell>\n<code language=julia-1.5>\n\
    derivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ computes the derivative of a polynomial given its coefficients.", "    deriv\
    \ = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n     \
    \   deriv[i] = deriv[i-1] + xs[i]\n    end\n    return deriv\nend\n</cell>\n<code\
    \ language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the derivative of a polynomial given its coefficients.",
  "    deriv = zeros(Int, length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1] * xs[i]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the derivative of a polynomial given its coefficients.",
  "    deriv = zeros(length(xs)) \n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1] + xs[i]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-0.6>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-0.6>\n\
    derivative([1, 2, 3])\n</cell>\n<text>\nExercise 3\nWrite a function that calculates\
    \ the integral of a function over a given interval. For example, if the function\
    \ is $f(x) = x^2 + 2x + 1$, then the integral of $f$ over the interval $[-2, 2]$\
    \ is\n$$\\int_{-2}^{2} f(x) dx \\approx 5.$$\nWrite a function that calculates\
    \ the integral of a polynomial over a given interval. For example, if the polynomial\
    \ is $x^2 + 2x + 1$, then the integral of $f$ over the interval $[-2, 2]$ is\n\
    $$\\int_{-2}^{2} x^2 + 2x + 1 dx \\approx 5.$$\nWrite a function that calculates\
    \ the integral of a function over a given interval. For example, if the function\
    \ is $f(x) = x^2 + 2x + 1$, then the integral of $f$ over the interval $[-2, 2]$\
    \ is\n$$\\int_{-2}^{2} f(x) dx \\approx 5.$$\nWrite a function that calculates\
    \ the integral of a polynomial over a given interval. For example, if the polynomial\
    \ is $x^2 + 2x + 1$, then the integral of $f$ over the interval $[-2, 2]$ is\n\
    $$\\int_{-2}^{2} x^2 + 2x + 1 dx \\approx 5.$$", "    deriv = xs[1]\n    for i\
    \ in 2:length(xs)\n        deriv += xs[i] * deriv\n    end\n    return deriv\n\
    end\n</cell>\n<code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n\
    <code language=julia-1.5>\nderivative([1, 2, 3])\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes in a list of numbers and returns the sum of the squares\
    \ of the numbers in the list.", "    deriv = zeros(length(xs))\n    deriv[1] =\
    \ xs[1]\n    for i in 2:length(xs)\n        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n\
    \    end\n    return deriv\nend\n</cell>\n<code language=julia-1.5>\nderivative([3,\
    \ 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nderivative([1, 2, 3])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that calculates the derivative of a polynomial\
    \ given its coefficients.", "    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n\
    \    for i in 2:length(xs)\n        deriv[i] = xs[i] * deriv[i - 1]\n    end\n\
    \    return deriv\nend\n</cell>\n<code language=julia-1.3>\nderivative([3, 1,\
    \ 2, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that calculates the\
    \ derivative of a polynomial using central differences.", "    deriv = zeros(length(xs))\n\
    \    deriv[1] = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = deriv[i-1]\
    \ * xs[i]\n    end\n    return deriv\nend\n</cell>\n<code language=julia-1.5>\n\
    derivative([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nderivative([1,\
    \ 2, 3])\n</cell>\n<text>\nExercise\nWrite a function that calculates the derivative\
    \ of a polynomial given its coefficients.", "    deriv = zeros(length(xs)) \n\
    \    deriv[1] = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = xs[i] - deriv[i-1]\n\
    \    end\n    return deriv\nend\n</cell>\n<code language=julia-1.5>\nderivative([3,\
    \ 1, 2, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that computes the\
    \ derivative of a polynomial given its coefficients.", "    \n    derivative =\
    \ zeros(length(xs))\n    \n    derivative[1] = xs[1]\n    \n    for i = 2:length(xs)\n\
    \        derivative[i] = xs[i] * derivative[i-1]\n    end\n    \n    return derivative\n\
    end", "    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1]*xs[i]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.3>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that computes the derivative of a polynomial using its coefficients.",
  "    deriv = zeros(length(xs)-1)\n    for i = 1:length(xs)-1\n        deriv[i] =\
    \ xs[i+1] - xs[i]\n    end\n    return deriv\nend", "    \n    derivative = zeros(length(xs))\
    \ \n    \n    for i = 1:length(xs)\n        derivative[i] = xs[i]\n    end\n \
    \   \n    return derivative\nend\n</cell>\n<code language=julia-1.5>\nderivative([3,\
    \ 1, 2, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that calculates\
    \ the derivative of a polynomial given its coefficients.", "    deriv = zeros(length(xs))\n\
    \    deriv[1] = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = deriv[i-1]*xs[i]\
    \ - xs[i-1]\n    end\n    return deriv\nend\n</cell>\n<code language=julia-1.5>\n\
    derivative([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nderivative([1,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>", "    deriv = zeros(length(xs))\n\
    \    deriv[1] = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = deriv[i-1]*xs[i]\
    \ - xs[i-1]\n    end\n    return deriv\nend\n</cell>\n<code language=julia-1.5>\n\
    derivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the derivative of a polynomial of degree $n$. \nThe function should\
    \ take in an array of coefficients and return the array of derivatives.\nThe function\
    \ should also take in an array of coefficients and return the array of derivatives\
    \ normalized.\nThe function should also take in an array of coefficients and return\
    \ the array of derivatives normalized.\nThe function should also take in an array\
    \ of coefficients and return the array of derivatives normalized.\nThe function\
    \ should also take in an array of coefficients and return the array of derivatives\
    \ normalized.\nThe function should also take in an array of coefficients and return\
    \ the array of derivatives normalized.\nThe function should also take in an array\
    \ of coefficients and return the array of derivatives normalized.\nThe function\
    \ should also take in an array of coefficients and return the array of derivatives\
    \ normalized.\nThe function should also take in an array of coefficients and return\
    \ the array of derivatives normalized.\nThe function should also take in an array\
    \ of coefficients and return the array of derivatives normalized.\nThe function\
    \ should also take in an array of coefficients and return the array of derivatives\
    \ normalized.\nThe function should also take in an array of coefficients and return\
    \ the array of derivatives normalized.\nThe function should also take in an array\
    \ of coefficients and return the array of derivatives normalized.\nThe function\
    \ should also take in an array of coefficients and return the array of derivatives\
    \ normalized.\nThe function should also take in an array of coefficients and return\
    \ the array of derivatives normalized.\nThe function should also take in an array\
    \ of coefficients and return the array of derivatives normalized.\nThe function\
    \ should also take in an array of coefficients and return the array of derivatives\
    \ normalized.\nThe function should also take in an array of coefficients and return\
    \ the array of derivatives normalized.\nThe function should also take in an array\
    \ of coefficients and return the array of derivatives normalized.\nThe function\
    \ should also take in an array of coefficients and return the array of derivatives\
    \ normalized.\nThe function should also take in an array of coefficients and return\
    \ the array of derivatives normalized.\nThe function should also take in an array\
    \ of coefficients and return the array of derivatives normalized.\nThe function\
    \ should also take in an array of coefficients and return the array of derivatives\
    \ normalized.\nThe function should also take in an array of coefficients and return\
    \ the array of derivatives normalized.\nThe function should also take in an array\
    \ of coefficients and return the array of derivatives normalized.\nThe function\
    \ should also take in an array of coefficients and return the array of derivatives\
    \ normalized.\nThe function should also take in an array of coefficients and return\
    \ the array of derivatives normalized.\nThe function should ", "    deriv = zeros(Int,\
    \ length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n        deriv[i]\
    \ = deriv[i-1] + xs[i]\n    end\n    return deriv\nend\n</cell>\n<code language=julia-1.5>\n\
    derivative([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nderivative([1,\
    \ 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the derivative\
    \ of a polynomial with coefficients xs.\nThe function should take in a vector\
    \ of integers xs and return a vector of integers deriv.\nThe function should return\
    \ the following vector:\nderiv = [1, 4, 12, 20]\nHint: Use a for loop to iterate\
    \ through the vector. \nHint: Use a second for loop to iterate through the vector.\n\
    Hint: Use a third for loop to iterate through the vector.\nHint: Use a fourth\
    \ loop to iterate through the vector.\nHint: Use a fifth loop to iterate through\
    \ the vector.\nHint: Use a sixth loop to iterate through the vector.\nHint: Use\
    \ a seventh loop to iterate through the vector.\nHint: Use a eighth loop to iterate\
    \ through the vector.\nHint: Use a ninth loop to iterate through the vector.\n\
    Hint: Use a tenth loop to iterate through the vector.\nHint: Use a eleventh loop\
    \ to iterate through the vector.\nHint: Use a twelfth loop to iterate through\
    \ the vector.\nHint: Use a thirteenth loop to iterate through the vector.\nHint:\
    \ Use a fourteenth loop to iterate through the vector.\nHint: Use a fifteenth\
    \ loop to iterate through the vector.\nHint: Use a sixteenth loop to iterate through\
    \ the vector.\nHint: Use a seventeenth loop to iterate through the vector.\nHint:\
    \ Use a eighteenth loop to iterate through the vector.\nHint: Use a nineteenth\
    \ loop to iterate through the vector.\nHint: Use a twentieth loop to iterate through\
    \ the vector.\nHint: Use a twenty-first loop to iterate through the vector.\n\
    Hint: Use a twenty-second loop to iterate through the vector.\nHint: Use a twenty-third\
    \ loop to iterate through the vector.\nHint: Use a twenty-fourth loop to iterate\
    \ through the vector.\nHint: Use a twenty-fifth loop to iterate through the vector.\n\
    Hint: Use a twenty-sixth loop to iterate through the vector.\nHint: Use a twenty-seventh\
    \ loop to iterate through the vector.\nHint: Use a twenty-eighth loop to iterate\
    \ through the vector.\nHint: Use a twenty-ninth ", "    deriv = zeros(length(xs))\n\
    \    deriv[1] = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = deriv[i-1]\
    \ + xs[i]\n    end\n    return deriv\nend\n</cell>\n<code language=julia-1.0>\n\
    derivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise: Write a function that\
    \ calculates the derivative of a polynomial given its coefficients.", "    deriv\
    \ = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n     \
    \   deriv[i] = deriv[i-1] * xs[i]\n    end\n    return deriv\nend", "    deriv\
    \ = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i = 2:length(xs)\n      \
    \  deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that calculates the integral of a polynomial using trapezoidal\
    \ rule. \nThe function should take as input a vector of coefficients xs and output\
    \ the integral of the polynomial using trapezoidal rule.", "    derivative = zeros(length(xs))\n\
    \    derivative[1] = xs[1]\n    for i in 2:length(xs)\n        derivative[i] =\
    \ xs[i] - derivative[i-1]\n    end\n    return derivative\nend", "    deriv =\
    \ zeros(length(xs)) \n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n      \
    \  deriv[i] = deriv[i-1] + xs[i]\n    end\n    return deriv\nend\n</cell>\n<code\
    \ language=julia-1.0>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that calculates the derivative of a polynomial given its\
    \ coefficients.", "    \n    derivative = zeros(length(xs))\n    \n    for i =\
    \ 1:length(xs)\n        derivative[i] = xs[i] - xs[i-1]\n    end\n    \n    return\
    \ derivative\nend", "    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n   \
    \ for i in 2:length(xs)\n        deriv[i] = deriv[i-1]*xs[i]\n    end\n    return\
    \ deriv\nend\n</cell>\n<code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the derivative of a\
    \ polynomial with n coefficients.\nThe function should take in an array of Int64\
    \ and return a vector of Int64.", "    deriv = zeros(Int, length(xs))\n    for\
    \ i = 1:length(xs)\n        deriv[i] = xs[i]\n    end\n    return deriv\nend\n\
    </cell>\n<code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes in a list of numbers and returns the sum\
    \ of the squares of the numbers. \nFor example: sum([1, 2, 3]) = 1 + 2 + 3 = 6\n\
    Hint: use the sum function.", "    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n\
    \    for i in 2:length(xs)\n        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n  \
    \  end\n    return deriv\nend\n</cell>\n<code language=julia-1.3>\nderivative([3,\
    \ 1, 2, 4, 5])\n</cell>\n<text>\nExercise: Write a function that calculates the\
    \ derivative of a polynomial given its coefficients.", "    \n    derivative =\
    \ zeros(length(xs))\n    \n    derivative[1] = xs[1]\n    \n    for i in 2:length(xs)\n\
    \        derivative[i] = xs[i] * derivative[i-1]\n    end\n    \n    return derivative\n\
    end\n</cell>\n<code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n\
    <code language=julia-1.5>\nderivative([1, 2, 3])\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes in a polynomial and returns the derivative of the\
    \ polynomial. \nHint: Use a for loop to iterate through the polynomial", "   \
    \ deriv = zeros(length(xs)) \n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = xs[i] - deriv[i-1]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise:\
    \ Write a function that calculates the derivative of a polynomial given its coefficients.",
  "    deriv = xs[1]\n    for x in xs\n        deriv = deriv * x + xs[1]\n    end\n\
    \    return deriv\nend\n</cell>\n<code language=julia-1.5>\nderivative([3, 1,\
    \ 2, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that computes the derivative\
    \ of a polynomial in one variable at a time.", "    deriv = zeros(length(xs))\n\
    \    deriv[1] = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = xs[i]\n \
    \   end\n    return deriv\nend\n</cell>\n<code language=julia-1.5>\nderivative([3,\
    \ 1, 2, 4, 5])\n</cell>\n<text>\nExercise 3\nWrite a function that takes in a\
    \ polynomial and returns the derivative of the polynomial in the same form as\
    \ in Exercise 2.", "    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for\
    \ i in 2:length(xs)\n        deriv[i] = deriv[i-1] + xs[i]\n    end\n    return\
    \ deriv\nend\n</cell>\n<code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n\
    </cell>\n<code language=julia-1.5>\nderivative([1, 2, 3])\n</cell>\n<code language=julia-1.5>",
  "    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i = 2:length(xs)\n\
    \        deriv[i] = xs[i] * deriv[i - 1]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\n\
    Write a function that calculates the derivative of a polynomial given its coefficients.",
  "    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i = 2:length(xs)\n\
    \        deriv[i] = xs[i] * deriv[i - 1]\n    end\n    return deriv\nend", " \
    \   deriv = zeros(length(xs)) \n    deriv[1] = xs[1]\n    deriv[2] = xs[2]\n \
    \   deriv[3] = xs[3]\n    deriv[4] = xs[4]\n    deriv[5] = xs[5]\n    deriv[6]\
    \ = xs[6]\n    deriv[7] = xs[7]\n    deriv[8] = xs[8]\n    deriv[9] = xs[9]\n\
    \    deriv[10] = xs[10]\n    deriv[11] = xs[11]\n    deriv[12] = xs[12]\n    deriv[13]\
    \ = xs[13]\n    deriv[14] = xs[14]\n    deriv[15] = xs[15]\n    deriv[16] = xs[16]\n\
    \    deriv[17] = xs[17]\n    deriv[18] = xs[18]\n    deriv[19] = xs[19]\n    deriv[20]\
    \ = xs[20]\n    deriv[21] = xs[21]\n    deriv[22] = xs[22]\n    deriv[23] = xs[23]\n\
    \    deriv[24] = xs[24]\n    deriv[25] = xs[25]\n    deriv[26] = xs[26]\n    deriv[27]\
    \ = xs[27]\n    deriv[28] = xs[28]\n    deriv[29] = xs[29]\n    deriv[30] = xs[30]\n\
    \    deriv[31] = xs[31]\n    deriv[32] = xs[32]\n    deriv[33] = xs[33]\n    deriv[34]\
    \ = xs[34]\n    deriv[35] = xs[35]\n    deriv[36] = xs[36]\n    deriv[37] = xs[37]\n\
    \    deriv[38] = xs[38]\n    deriv[39] = xs[39]\n    deriv[40] = xs[40]\n    deriv[41]\
    \ = xs[41]\n    deriv[42] = xs[42]\n    deriv[43] = xs[43]\n    deriv[44] = xs[44]\n\
    \    deriv[45] = xs[45]\n    deriv[46] = xs[46]\n    deriv[47] = xs[47]\n    deriv[48]\
    \ = xs[48]\n    deriv[49] = xs[49]\n    deriv[50] = xs[50]\n    deriv[51] = xs[51]\n\
    \    deriv[52] = xs[52]\n    deriv[53] = xs[53]\n    deriv[54] = xs[54]", "  \
    \  deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1]*xs[i]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    derivative([1, 2, 3])\n</cell>\n<text>\nExercise\nWrite a function that calculates\
    \ the derivative of a polynomial given its coefficients.", "    \n    derivative\
    \ = zeros(length(xs))\n    \n    for i = 1:length(xs)\n        derivative[i] =\
    \ xs[i] - xs[i-1]\n    end\n    \n    return derivative\nend\n</cell>\n<code language=julia-1.5>\n\
    derivative([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nderivative([1,\
    \ 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function that calculates the derivative\
    \ of a polynomial given its coefficients.", "    \n    derivative = zeros(length(xs))\n\
    \    \n    derivative[1] = xs[1]\n    \n    for i = 2:length(xs)\n        derivative[i]\
    \ = xs[i] - derivative[i-1]\n    end\n    \n    return derivative\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    derivative([1, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function that calculates\
    \ the derivative of a polynomial given its coefficients.", "    deriv = zeros(length(xs))\n\
    \    deriv[1] = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = deriv[i-1]*xs[i]\
    \ - xs[i-1]\n    end\n    return deriv\nend\n</cell>\n<code language=julia-1.5>\n\
    derivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ calculates the derivative of a polynomial given its coefficients.", "    \n\
    \    derivative = zeros(length(xs))\n    \n    derivative[1] = xs[1]\n    \n \
    \   for i in 2:length(xs)\n        derivative[i] = xs[i] * derivative[i-1]\n \
    \   end\n    \n    return derivative\nend\n</cell>\n<code language=julia-1.5>\n\
    derivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ calculates the integral of a polynomial function using trapezoidal rule. \n\
    The function should take as input a vector of coefficients and a vector of x values.\
    \ \nThe function should return an array of y values corresponding to the x values\
    \ given. \nThe function should return an array of y values corresponding to the\
    \ x values given. \nThe function should return an array of y values corresponding\
    \ to the x values given. \nThe function should return an array of y values corresponding\
    \ to the x values given. \nThe function should return an array of y values corresponding\
    \ to the x values given. \nThe function should return an array of y values corresponding\
    \ to the x values given. \nThe function should return an array of y values corresponding\
    \ to the x values given. \nThe function should return an array of y values corresponding\
    \ to the x values given. \nThe function should return an array of y values corresponding\
    \ to the x values given. \nThe function should return an array of y values corresponding\
    \ to the x values given. \nThe function should return an array of y values corresponding\
    \ to the x values given. \nThe function should return an array of y values corresponding\
    \ to the x values given. \nThe function should return an array of y values corresponding\
    \ to the x values given. \nThe function should return an array of y values corresponding\
    \ to the x values given. \nThe function should return an array of y values corresponding\
    \ to the x values given. \nThe function should return an array of y values corresponding\
    \ to the x values given. \nThe function should return an array of y values corresponding\
    \ to the x values given. \nThe function should return an array of y values corresponding\
    \ to the x values given. \nThe function should return an array of y values corresponding\
    \ to the x values given. \nThe function should return an array of y values corresponding\
    \ to the x values given. \nThe function should return an array of y values corresponding\
    \ to the x values given. \nThe function should return an array of y values corresponding\
    \ to the x values given. \nThe function should return an array of y values corresponding\
    \ to the x values given. \nThe function should return an array of y values corresponding\
    \ to the x values given. \nThe function should return an array of y values corresponding\
    \ to the x values given. \nThe function should return an array of y values corresponding\
    \ to the x values given. \nThe function should return an array of y values corresponding\
    \ to the x values given. \nThe function should return an array of y values corresponding\
    \ to the x values given. \nThe function should return an array of y values corresponding\
    \ to the x values given. \nThe function should return an array of y values corresponding\
    \ to the x values given. \nThe function should return an array of y values corresponding\
    \ to the x values given. \nThe function should return an array of ", "    derivative\
    \ = zeros(length(xs))\n    derivative[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        derivative[i] = xs[i] - derivative[i-1]\n    end\n    return derivative\n\
    end\n</cell>\n<code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n\
    <text>\nExercise 3\nWrite a function that computes the derivative of a polynomial\
    \ given its coefficients.", "    derivative = zeros(length(xs))\n    derivative[1]\
    \ = xs[1]\n    for i in 2:length(xs)\n        derivative[i] = xs[i] - derivative[i-1]\n\
    \    end\n    return derivative\nend\n</cell>\n<text>\nNow let's try it out on\
    \ some examples:", "    \n    derivative = zeros(length(xs))\n    \n    for i\
    \ = 1:length(xs)\n        derivative[i] = xs[i]\n    end\n    \n    return derivative\n\
    end\n</cell>\n<code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that calculates the derivative of a polynomial\
    \ given its coefficients.\nThe function should take in two arguments: the coefficients\
    \ of the polynomial, and the length of the polynomial.\nThe function should return\
    \ the derivative of the polynomial as a vector of coefficients.\nThe function\
    \ should return an error if the length of the polynomial is not even.\nThe function\
    \ should return an error if the length of the polynomial is not equal to the length\
    \ of the coefficients.\nThe function should return an error if the coefficients\
    \ are not integers.\nThe function should return an error if the coefficients are\
    \ not in the range $[0,\\infty)$.\nThe function should return an error if the\
    \ coefficients are all zero.\nThe function should return an error if the coefficients\
    \ are all non-positive.\nThe function should return an error if the coefficients\
    \ are all non-negative.\nThe function should return an error if the coefficients\
    \ are all non-zero.\nThe function should return an error if the coefficients are\
    \ all non-negative.\nThe function should return an error if the coefficients are\
    \ all non-positive.\nThe function should return an error if the coefficients are\
    \ all non-zero.\nThe function should return an error if the coefficients are all\
    \ non-negative.\nThe function should return an error if the coefficients are all\
    \ non-positive.\nThe function should return an error if the coefficients are all\
    \ non-zero.\nThe function should return an error if the coefficients are all non-negative.\n\
    The function should return an error if the coefficients are all non-positive.\n\
    The function should return an error if the coefficients are all non-zero.\nThe\
    \ function should return an error if the coefficients are all non-negative.\n\
    The function should return an error if the coefficients are all non-positive.\n\
    The function should return an error if the coefficients are all non-zero.\nThe\
    \ function should return an error if the coefficients are all non-negative.\n\
    The function should return an error if the coefficients are all non-positive.\n\
    The function should return an error if the coefficients are all non-zero.\nThe\
    \ function should return an error if the coefficients are all non-negative.\n\
    The function should return an error if the coefficients are all non-positive.\n\
    The function should return an error if the coefficients are all non-zero.\nThe\
    \ function should return an error if the coefficients are all non-negative.\n\
    The function should return an error if the coefficients are all non-positive.\n\
    The function should return an error if the coefficients are all non-zero.\nThe\
    \ function should return an error if the coefficients are all non-negative.\n\
    The function should return an error if the coefficients are all non-positive.\n\
    The function should return an error if the coefficients are all non-zero.\nThe\
    \ function ", "    deriv = zeros(length(xs)-1)\n    deriv[1] = xs[1]\n    for\
    \ i in 2:length(xs)\n        deriv[i] = xs[i] - deriv[i-1]\n    end\n    return\
    \ deriv\nend\n</cell>\n<code language=julia-1.0>\nderivative([3, 1, 2, 4, 5])\n\
    </cell>\n<text>\nExercise\nWrite a function that calculates the derivative of\
    \ a polynomial given its coefficients.", "    \n    derivative = zeros(length(xs))\n\
    \    \n    derivative[1] = xs[1]\n    \n    for i in 2:length(xs)\n        derivative[i]\
    \ = xs[i] - derivative[i-1]\n    end\n    \n    return derivative\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that calculates the derivative of a polynomial with given\
    \ coefficients.", "    deriv = zeros(Int, length(xs)-1)\n    deriv[1] = xs[1]\n\
    \    for i in 2:length(xs)\n        deriv[i] = xs[i] - deriv[i-1]\n    end\n \
    \   return deriv\nend\n</cell>\n<code language=julia-1.5>\nderivative([3, 1, 2,\
    \ 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that computes the derivative\
    \ of a polynomial given its coefficients.", "    deriv = zeros(length(xs)) \n\
    \    deriv[1] = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = deriv[i-1]\
    \ + xs[i]\n    end\n    return deriv\nend\n</cell>\n<code language=julia-1.5>\n\
    derivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes in a polynomial and returns the derivative of the polynomial in terms\
    \ of its coefficients. \nHint: Use derivative function you wrote earlier.", " \
    \   \n    derivative = zeros(length(xs)) \n    \n    for i = 1:length(xs)\n  \
    \      derivative[i] = xs[i]\n    end\n    \n    return derivative\nend\n</cell>\n\
    <code language=julia-1.3>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.3>\n\
    derivative([1, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function that calculates\
    \ the derivative of a polynomial given its coefficients.", "    deriv = zeros(length(xs))\
    \ \n    deriv[1] = xs[1]\n    for i = 2:length(xs)\n        deriv[i] = deriv[i-1]\
    \ + xs[i]\n    end\n    return deriv\nend\n</cell>\n<code language=julia-1.3>\n\
    derivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the derivative of a polynomial given its coefficients.", "    \n   \
    \ # Initialize a vector to store the derivative\n    derivative = zeros(length(xs))\n\
    \    \n    # Compute the first derivative\n    derivative[1] = xs[1]\n    \n \
    \   # Compute the second derivative\n    for i = 2:length(xs)\n        derivative[i]\
    \ = derivative[i-1] * xs[i]\n    end\n    \n    return derivative\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that computes the derivative of a polynomial given its coefficients.",
  "    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n    end\n    return deriv\nend\n\
    </cell>\n<code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<code\
    \ language=julia-1.5>\nderivative([1, 2, 3])\n</cell>\n<code language=julia-1.5>",
  "    deriv = xs[1]\n    for x in xs[2:end]\n        deriv = deriv * x + xs[1]\n\
    \    end\n    return deriv\nend\n</cell>\n<code language=julia-1.5>\nderivative([3,\
    \ 1, 2, 4, 5])\n</cell>\n<text>\nExercise 3\nWrite a function that takes an integer\
    \ $n$ and returns the $n$th Fibonacci number.", "    deriv = xs[1]\n    for i\
    \ in 2:length(xs)\n        deriv = deriv * xs[i] + xs[i-1]\n    end\n    return\
    \ deriv\nend\n</cell>\n<code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that calculates the integral of\
    \ a polynomial function from 0 to infinity. \nThe function should take in two\
    \ arguments: the polynomial coefficients and the lower and upper bounds of the\
    \ integral.\nThe function should return the value of the integral as a Float64.\n\
    The function should raise a TypeError if the polynomial coefficients are not a\
    \ Vector{Int64}.\nThe function should raise a TypeError if the lower and upper\
    \ bounds are not Float64s.\nThe function should raise a TypeError if the lower\
    \ and upper bounds are not in the interval [0,1].\nThe function should raise a\
    \ TypeError if the lower and upper bounds are not in the interval [0,1].\nThe\
    \ function should raise a TypeError if the lower and upper bounds are not in the\
    \ interval [0,1].\nThe function should raise a TypeError if the lower and upper\
    \ bounds are not in the interval [0,1].\nThe function should raise a TypeError\
    \ if the lower and upper bounds are not in the interval [0,1].\nThe function should\
    \ raise a TypeError if the lower and upper bounds are not in the interval [0,1].\n\
    The function should raise a TypeError if the lower and upper bounds are not in\
    \ the interval [0,1].\nThe function should raise a TypeError if the lower and\
    \ upper bounds are not in the interval [0,1].\nThe function should raise a TypeError\
    \ if the lower and upper bounds are not in the interval [0,1].\nThe function should\
    \ raise a TypeError if the lower and upper bounds are not in the interval [0,1].\n\
    The function should raise a TypeError if the lower and upper bounds are not in\
    \ the interval [0,1].\nThe function should raise a TypeError if the lower and\
    \ upper bounds are not in the interval [0,1].\nThe function should raise a TypeError\
    \ if the lower and upper bounds are not in the interval [0,1].\nThe function should\
    \ raise a TypeError if the lower and upper bounds are not in the interval [0,1].\n\
    The function should raise a TypeError if the lower and upper bounds are not in\
    \ the interval [0,1].\nThe function should raise a TypeError if the lower and\
    \ upper bounds are not in the interval [0,1].\nThe function should raise a TypeError\
    \ if the lower and upper bounds are not in the interval [0,1].\nThe function should\
    \ raise a TypeError if the lower and upper bounds are not in the interval [0,1].\n\
    The function should raise a TypeError if the lower and upper bounds are not in\
    \ the interval [0,1].\nThe function should raise a TypeError if the lower and\
    \ upper bounds are not in the interval [0,1].\nThe function should raise a TypeError\
    \ if the lower and upper bounds are not in the interval [0,", "    deriv = zeros(length(xs))\n\
    \    deriv[1] = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = deriv[i-1]*xs[i]\
    \ - xs[i-1]\n    end\n    return deriv\nend\n</cell>\n<code language=julia-1.5>\n\
    derivative([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nderivative([1,\
    \ 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function that calculates the derivative\
    \ of a polynomial with coefficients xs. Use a for loop to iterate over the elements\
    \ of the vector xs.\nHint: Remember that you can access elements of a vector using\
    \ square brackets.", "    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n  \
    \  for i in 2:length(xs)\n        deriv[i] = deriv[i-1] + xs[i]\n    end\n   \
    \ return deriv\nend\n</cell>\n<code language=julia-1.5>\nderivative([3, 1, 2,\
    \ 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the derivative\
    \ of a polynomial with one variable.", "    \n    deriv = zeros(length(xs))\n\
    \    deriv[1] = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = deriv[i-1]\
    \ + xs[i]\n    end\n    return deriv\nend\n</cell>\n<code language=julia-1.5>\n\
    derivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the derivative of a polynomial given its coefficients.", "    deriv\
    \ = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n     \
    \   deriv[i] = deriv[i-1] + xs[i]\n    end\n    return deriv\nend", "    deriv\
    \ = zeros(Int, length(xs)-1)\n    for i = 1:length(xs)-1\n        deriv[i] = xs[i+1]\
    \ - xs[i] * xs[i+1]\n    end\n    return deriv\nend\n</cell>\n<code language=julia-1.3>\n\
    derivative([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.3>\nderivative([1,\
    \ 2, 3])\n</cell>\n<code language=julia-1.3>", "    \n    derivative = zeros(length(xs)-1)\n\
    \    \n    for i = 1:length(xs)-1\n        derivative[i] = xs[i+1] - xs[i] * xs[i+1]\n\
    \    end\n    \n    return derivative\nend\n</cell>\n<code language=julia-1.5>\n\
    derivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ calculates the integral of a polynomial using trapezoidal rule. \nThe function\
    \ should take as input a vector of coefficients xs and output the integral of\
    \ the polynomial evaluated at xs.\nThe function should return a single number.",
  "    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n    end\n    return deriv\nend\n\
    </cell>\n<code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that computes the derivative of a polynomial given\
    \ its coefficients.\nThe function should take as input a vector of coefficients\
    \ xs.\nThe function should return the same vector but with the derivative of the\
    \ polynomial computed.\nThe function should return an error if the input vector\
    \ is empty.\nThe function should return an error if the input vector is not of\
    \ length 3.\nThe function should return an error if the input vector is not of\
    \ length 3 or if the first element of the input vector is not 1.\nThe function\
    \ should return an error if the input vector is not of length 3 or if the first\
    \ element of the input vector is not 1 or if the first element of the input vector\
    \ is not 1.\nThe function should return an error if the input vector is not of\
    \ length 3 or if the first element of the input vector is not 1 or if the first\
    \ element of the input vector is not 1.\nThe function should return an error if\
    \ the input vector is not of length 3 or if the first element of the input vector\
    \ is not 1 or if the first element of the input vector is not 1.\nThe function\
    \ should return an error if the input vector is not of length 3 or if the first\
    \ element of the input vector is not 1 or if the first element of the input vector\
    \ is not 1.\nThe function should return an error if the input vector is not of\
    \ length 3 or if the first element of the input vector is not 1 or if the first\
    \ element of the input vector is not 1.\nThe function should return an error if\
    \ the input vector is not of length 3 or if the first element of the input vector\
    \ is not 1 or if the first element of the input vector is not 1.\nThe function\
    \ should return an error if the input vector is not of length 3 or if the first\
    \ element of the input vector is not 1 or if the first element of the input vector\
    \ is not 1.\nThe function should return an error if the input vector is not of\
    \ length 3 or if the first element of the input vector is not 1 or if the first\
    \ element of the input vector is not 1.\nThe function should return an error if\
    \ the input vector is not of length 3 or if the first element of the input vector\
    \ is not 1 or if the first element of the input vector is not 1.\nThe function\
    \ should return an error if the input vector is not of length 3 or if the first\
    \ element of the input vector is not 1 or if the first element of the input vector\
    \ is not 1.\nThe function should return an error if the input vector is not of\
    \ length 3 or if the first element of the input vector is not 1 or if the first\
    \ element of the input vector is not 1.\nThe function should return an error if\
    \ the input vector is not of length 3 or if the first element of the input vector\
    \ is not 1 or if the first element of the input vector is not 1.\nThe function\
    \ should return an error if the input vector is not of length 3 or if the first\
    \ element of the input vector is not 1 or if the first element of the input vector ",
  "    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = xs[i] * deriv[i-1]\n    end\n    return deriv\nend", "   \
    \ deriv = zeros(length(xs)) \n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1] + xs[i]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.3>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that computes the derivative of a polynomial given its coefficients.",
  "    \n    derivative = zeros(length(xs))\n    \n    for i = 1:length(xs)\n    \
    \    derivative[i] = xs[i]\n    end\n    \n    return derivative\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    derivative([1, 2, 3])\n</cell>\n<text>\nExercise 3\nWrite a function that calculates\
    \ the integral of a polynomial function using trapezoidal rule.", "    deriv =\
    \ zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n       \
    \ deriv[i] = xs[i] * deriv[i-1]\n    end\n    return deriv\nend\n</cell>\n<code\
    \ language=julia-1.4>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that calculates the derivative of a polynomial given its\
    \ coefficients.", "    deriv = xs[1]\n    for x in xs\n        deriv = deriv *\
    \ x + xs[1]\n    end\n    return deriv\nend", "    deriv = zeros(length(xs))\n\
    \    deriv[1] = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = deriv[i-1]*xs[i]\
    \ - xs[i-1]\n    end\n    return deriv\nend", "    deriv = zeros(length(xs)) \n\
    \    deriv[1] = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = deriv[i-1]*xs[i]\
    \ - xs[i-1]\n    end\n    return deriv\nend\n</cell>\n<code language=julia-1.5>\n\
    derivative([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nderivative([1,\
    \ 2, 3])\n</cell>\n<text>\nExercise 3\nWrite a function that computes the derivative\
    \ of a polynomial given its coefficients.", "    deriv = zeros(length(xs))\n \
    \   deriv[1] = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = deriv[i-1]\
    \ * xs[i]\n    end\n    return deriv\nend\n</cell>\n<code language=julia-1.5>\n\
    derivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ calculates the derivative of a polynomial using central differences.", "   \
    \ deriv = xs[1]\n    for i in 2:length(xs)\n        deriv = deriv * xs[i] + xs[i-1]\n\
    \    end\n    return deriv\nend\n</cell>\n<code language=julia-1.5>\nderivative([3,\
    \ 1, 2, 4, 5])\n</cell>\n<text>\nExercise 3\nWrite a function that takes in a\
    \ polynomial and returns the derivative of the polynomial in the same form.",
  "    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1]*xs[i]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes in a list of numbers and returns the sum of the\
    \ squares of the numbers in the list.", "    \n    derivative = zeros(length(xs))\n\
    \    \n    for i = 1:length(xs)\n        derivative[i] = xs[i]\n    end\n    \n\
    \    return derivative\nend\n</cell>\n<code language=julia-1.5>\nderivative([3,\
    \ 1, 2, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that computes the\
    \ derivative of a polynomial given its coefficients.", "    deriv = xs[1]\n  \
    \  for i in 2:length(xs)\n        deriv = deriv * xs[i]\n    end\n    return deriv\n\
    end", "    deriv = zeros(Int, length(xs))\n    deriv[1] = xs[1]\n    for i in\
    \ 2:length(xs)\n        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n    end\n    return\
    \ deriv\nend\n</cell>\n<code language=julia-1.0>\nderivative([3, 1, 2, 4, 5])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that calculates the integral of\
    \ a polynomial function using trapezoidal rule.", "    deriv = zeros(length(xs))\n\
    \    deriv[1] = xs[1]\n    for i in 2:length(xs)\n        deriv[i] = deriv[i-1]\
    \ + xs[i]\n    end\n    return deriv\nend\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes in a polynomial and returns the derivative of the polynomial\
    \ in reverse order. For example, if the input was [1, 2, 3, 4], the output should\
    \ be [4, 3, 2, 1].", "    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n  \
    \  for i in 2:length(xs)\n        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n    end\n\
    \    return deriv\nend\n</cell>\n<code language=julia-1.5>\nderivative([3, 1,\
    \ 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nderivative([1, 2, 3])\n</cell>\n\
    <text>\nExercise\nWrite a function that calculates the derivative of a polynomial\
    \ given its coefficients.", "    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n\
    \    for i in 2:length(xs)\n        deriv[i] = xs[i] - deriv[i-1]\n    end\n \
    \   return deriv\nend\n</cell>\n<code language=julia-1.5>\nderivative([3, 1, 2,\
    \ 4, 5])\n</cell>\n<code language=julia-1.5>\nderivative([1, 2, 3])\n</cell>\n\
    <text>\nExercise\nWrite a function that calculates the derivative of a polynomial\
    \ given its coefficients."]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
