name: HumanEval_163_generate_integers
language: julia
results:
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < 0 || b < 0\n        error(\"a and b must be positive\")\n    end\n\
    \    \n    evens = Vector{Int64}()\n    \n    while a <= b\n        push!(evens,\
    \ a)\n        a = a + 2\n    end\n    \n    evens\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes an integer $n$ and returns the number of digits\
    \ in $n$. \nFor example, given $n = 1234$, your function should return 4.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2,\
    \ 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpagpv4yeb.jl:24\nin expression starting at\
    \ /tmp/tmpagpv4yeb.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    generate_integers(a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    \n    even_integers = Vector{Int64}()\n    \n    if a < b\n        generate_integers(b,\
    \ a)\n    else\n        generate_integers(a, b)\n    end\n    \n    if a < b\n\
    \        even_integers = even_integers + [Int64(a)]\n    else\n        even_integers\
    \ = even_integers + [Int64(b)]\n    end\n    \n    return even_integers\nend\n\
    using Test\n\n@testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2,\
    \ 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    \n    generate_integers(a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    \n    if a < b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    \n    evens = Vector{Int64}()\n    \n    if a < b\n        generate_integers(b,\
    \ a)\n    end\n    \n    while a <= b\n        push!(evens, a)\n        \n   \
    \     a = a + 2\n    end\n    \n    evens\nend\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(2, 8)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(8,\
    \ 2)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(10, 14)\n</cell>\n\
    <text>\nExercise: Generate all integers between 1 and 100 (both included) that\
    \ are divisible by 3\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph0aw1b_3.jl:26\nin expression starting at\
    \ /tmp/tmph0aw1b_3.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        generate_integers(b, a)\n    else\n        Vector{Int64}[a,\
    \ b]\n    end\nend\n</cell>\n<code language=julia-1.5>\ngenerate_integers(2, 8)\n\
    </cell>\n<code language=julia-1.5>\ngenerate_integers(8, 2)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(10, 14)\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ generates integers between 1 and a given number n, inclusive.\nusing Test\n\n\
    @testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2, 10) ==\
    \ [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptmfifowd.jl:17\nin expression starting at\
    \ /tmp/tmptmfifowd.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    \n    even_integers = Vector{Int64}()\n    \n    if a < b\n        generate_integers(b,\
    \ a)\n    else\n        generate_integers(a, b)\n    end\n    \n    even_integers\
    \ = even_integers[2:end]\n    \n    return even_integers\nend\n</cell>\n<code\
    \ language=julia-1.5>\ngenerate_integers(2, 8)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(8, 2)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(10,\
    \ 14)\n</cell>\n<text>\nExercise 2\nWrite a function that generates integers between\
    \ 1 and a given number n inclusively.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6jb69hz0.jl:24\nin expression starting at\
    \ /tmp/tmp6jb69hz0.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    \n    evens = Vector{Int64}()\n    \n    if a < b\n        generate_integers(b,\
    \ a)\n    else\n        generate_integers(a, b)\n    end\n    \n    if a < b\n\
    \        evens = evens..(b - a+1)\n    else\n        evens = evens..(a - b+1)\n\
    \    end\n    \n    evens\nend\n</cell>\n<code language=julia-1.5>\ngenerate_integers(2,\
    \ 8)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(8, 2)\n</cell>\n<code\
    \ language=julia-1.5>\ngenerate_integers(10, 14)\n</cell>\n<text>\nExercise: Write\
    \ a function that generates integers within a given range. Test it by generating\
    \ integers between 2 and 10 and then between 10 and 20.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = generate_integers;\n\t@test(candidate(2, 10) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2)\
    \ == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsqor8e9h.jl:28\nin expression starting at\
    \ /tmp/tmpsqor8e9h.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend\n</cell>\n<code language=julia-1.5>\ngenerate_integers(2, 8)\n\
    </cell>\n<code language=julia-1.5>\ngenerate_integers(8, 2)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(10, 14)\n</cell>\n<text>\nProblem 3\nWrite a function that generates\
    \ all the integers between 1 and a given number n, inclusive.\nusing Test\n\n\
    @testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2, 10) ==\
    \ [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp69a9_toe.jl:17\nin expression starting at\
    \ /tmp/tmp69a9_toe.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the sum of all even integers between 1 and a given integer n.\nusing Test\n\n\
    @testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2, 10) ==\
    \ [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnvj7zav7.jl:17\nin expression starting at\
    \ /tmp/tmpnvj7zav7.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend\n</cell>\n<text>\nNow let's generate some random integers between\
    \ 0 and 100 and count how many times each integer appears.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = generate_integers;\n\t@test(candidate(2, 10) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2)\
    \ == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmjahx906.jl:17\nin expression starting at\
    \ /tmp/tmpmjahx906.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend\n</cell>\n<code language=julia-1.5>\ngenerate_integers(2, 8)\n\
    </cell>\n<code language=julia-1.5>\ngenerate_integers(8, 2)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(10, 14)\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ generates all the integers between 1 and 100 (both included) that are divisible\
    \ by 3\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2,\
    \ 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpknr8esdi.jl:17\nin expression starting at\
    \ /tmp/tmpknr8esdi.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    \n    evens = Vector{Int64}()\n    \n    if a < b\n        generate_integers(b,\
    \ a)\n    end\n    \n    if b < a\n        generate_integers(a, b)\n    end\n\
    \    \n    if a < b\n        evens = evens.+[a]\n    end\n    \n    if b < a\n\
    \        evens = evens.+[b]\n    end\n    \n    return evens\nend\n</cell>\n<code\
    \ language=julia-1.5>\ngenerate_integers(2, 8)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(8, 2)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(10,\
    \ 14)\n</cell>\n<text>\nProblem 3\nWrite a function that returns the number of\
    \ integers between 1 and n that have exactly two digits.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = generate_integers;\n\t@test(candidate(2, 10) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2)\
    \ == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl8ni68ye.jl:32\nin expression starting at\
    \ /tmp/tmpl8ni68ye.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < 0 || b < 0\n        error(\"generate_integers: a and b must be\
    \ non-negative\")\n    end\n    \n    if b < a\n        error(\"generate_integers:\
    \ b must be greater than a\")\n    end\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmptge9j_uy.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmptge9j_uy.jl:1\n\
    in expression starting at /tmp/tmptge9j_uy.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    Given a positive\
    \ integer a, return the sum of its digits in ascending order.\nusing Test\n\n\
    @testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2, 10) ==\
    \ [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6opn5jin.jl:17\nin expression starting at\
    \ /tmp/tmp6opn5jin.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < 0 || b < 0 \n        error(\"generate_integers: both arguments\
    \ must be positive\")\n    else if a < b \n        error(\"generate_integers:\
    \ a must be less than b\")\n    else \n        generate_integers(b, a) \n    end\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that returns the number of\
    \ digits in an integer.\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpunrmbr_4.jl:13\nin expression starting at\
    \ /tmp/tmpunrmbr_4.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    generate_integers(a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    \n    if a < b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < 0 || b < 0\n        error(\"a and b must be positive\")\n    end\n\
    \    \n    if a == 0 || b == 0\n        return Vector{Int64}()\n    end\n    \n\
    \    evens = generate_integers(a - 1, b)\n    evens = evens[2:end] + evens[2:end]\n\
    \    evens = evens[2:end] + evens[2:end]\n    evens = evens[2:end] + evens[2:end]\n\
    \    evens = evens[2:end] + evens[2:end]\n    evens = evens[2:end] + evens[2:end]\n\
    \    evens = evens[2:end] + evens[2:end]\n    evens = evens[2:end] + evens[2:end]\n\
    \    evens = evens[2:end] + evens[2:end]\n    evens = evens[2:end] + evens[2:end]\n\
    \    evens = evens[2:end] + evens[2:end]\n    evens = evens[2:end] + evens[2:end]\n\
    \    evens = evens[2:end] + evens[2:end]\n    evens = evens[2:end] + evens[2:end]\n\
    \    evens = evens[2:end] + evens[2:end]\n    evens = evens[2:end] + evens[2:end]\n\
    \    evens = evens[2:end] + evens[2:end]\n    evens = evens[2:end] + evens[2:end]\n\
    \    evens = evens[2:end] + evens[2:end]\n    evens = evens[2:end] + evens[2:end]\n\
    \    evens = evens[2:end] + evens[2:end]\n    evens = evens[2:end] + evens[2:end]\n\
    \    evens = evens[2:end] + evens[2:end]\n    evens = evens[2:end] + evens[2:end]\n\
    \    evens = evens[2:end] + evens[2:end]\n    evens = evens[2:end] + evens[2:end]\n\
    \    evens = evens[2:end] + evens[2:end]\n    evens = evens[2:end] + evens[2:end]\n\
    \    evens = evens[2:end] + evens[2:end]\n    evens = evens[2:end] + evens[2:end]\n\
    \    evens = evens[2:end] + evens[2:end]\n    evens = evens[2:end] + evens[2:end]\n\
    \    evens = evens[2:end] + evens[2:end]\n    evens = evens[2:end] + evens[2:end]\n\
    \    evens = evens[2:end] + evens[2:end]\n    evens = evens[2:end] + evens[2:end]\n\
    \    evens = evens[2:end] + \nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpnbn7f89t.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpnbn7f89t.jl:1\n\
    in expression starting at /tmp/tmpnbn7f89t.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that generates\
    \ all the integers between 1 and $n$, inclusive, where $n$ is given as an argument\
    \ to the function.\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp41nqvt8p.jl:17\nin expression starting at\
    \ /tmp/tmp41nqvt8p.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    \n    evens = Vector{Int64}()\n    \n    if a < b\n        generate_integers(b,\
    \ a)\n    else\n        generate_integers(a, b)\n    end\n    \n    if a < b\n\
    \        evens = evens.+(a-b)\n    end\n    \n    return evens\nend\n</cell>\n\
    <code language=julia-1.5>\ngenerate_integers(2, 8)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(8, 2)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(10,\
    \ 14)\n</cell>\n<text>\nProblem 4\nWrite a function that returns the number of\
    \ digits in an integer.\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpaukm5g04.jl:26\nin expression starting at\
    \ /tmp/tmpaukm5g04.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    generate_integers(a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    \n    even_integers = Vector{Int64}()\n    \n    if a < b\n        generate_integers(b,\
    \ a)\n    else\n        generate_integers(a, b)\n    end\n    \n    for i in a:a:b\n\
    \        if i % 2 == 0\n            even_integers << i\n        end\n    end\n\
    \    \n    return even_integers\nend\n</cell>\n<code language=julia-1.5>\ngenerate_integers(2,\
    \ 8)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(8, 2)\n</cell>\n<code\
    \ language=julia-1.5>\ngenerate_integers(10, 14)\n</cell>\n<text>\nProblem 7\n\
    Write a function that returns the number of integers between a and b inclusive.\n\
    using Test\n\n@testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2,\
    \ 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6kp9vy8l.jl:28\nin expression starting at\
    \ /tmp/tmp6kp9vy8l.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    \n    evens = Vector{Int64}()\n    \n    if a < b\n        generate_integers(b,\
    \ a)\n    else\n        generate_integers(a, b)\n    end\n    \n    if a < b\n\
    \        evens = evens..(b-a)\n    end\n    \n    if a < b\n        evens = evens..(a-b)\n\
    \    end\n    \n    return evens\nend\n</cell>\n<code language=julia-1.5>\ngenerate_integers(2,\
    \ 8)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(8, 2)\n</cell>\n<code\
    \ language=julia-1.5>\ngenerate_integers(10, 14)\n</cell>\n<text>\nProblem 7:\
    \ Generate all integers between 1 and 100 (both included)\nThe first thing you\
    \ might want to do is generate all the integers between 1 and 100 (both included).\n\
    using Test\n\n@testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2,\
    \ 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp810plduy.jl:30\nin expression starting at\
    \ /tmp/tmp810plduy.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if b < a \n        error(\"generate_integers: b < a\")\n    end\n    \n\
    \    evens = Vector{Int64}()\n    \n    while a <= b\n        push!(evens, a)\n\
    \        \n        a += 2\n    end\n    \n    return evens\nend\n</cell>\n<code\
    \ language=julia-1.5>\ngenerate_integers(2, 8)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(8, 2)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(10,\
    \ 14)\n</cell>\n<text>\nExercise 2\nWrite a function that takes in two positive\
    \ integers a and b and returns the sum of all even digits between a and b.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2,\
    \ 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp07lu13g_.jl:25\nin expression starting at\
    \ /tmp/tmp07lu13g_.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < b \n        generate_integers(b, a)\n    else \n        generate_integers(a,\
    \ b)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend\n</cell>\n<code language=julia-1.5>\ngenerate_integers(2, 8)\n\
    </cell>\n<code language=julia-1.5>\ngenerate_integers(8, 2)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(10, 14)\n</cell>\n<text>\nProblem 2\nWrite a function that returns\
    \ the number of digits in an integer.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5_dmt5yo.jl:17\nin expression starting at\
    \ /tmp/tmp5_dmt5yo.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    \n    if b < a \n        error(\"generate_integers: b < a\")\n    end\n\
    \    \n    evens = Vector{Int64}()\n    \n    while a <= b\n        push!(evens,\
    \ a)\n        a += 2\n    end\n    \n    return evens\nend\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(2, 8)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(8,\
    \ 2)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(10, 14)\n</cell>\n\
    <text>\nProblem 3\nWrite a function that takes in two positive integers a and\
    \ b, and returns the sum of all even digits in a and b.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = generate_integers;\n\t@test(candidate(2, 10) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2)\
    \ == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpul3ebbbf.jl:25\nin expression starting at\
    \ /tmp/tmpul3ebbbf.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend\n</cell>\n<code language=julia-1.5>\ngenerate_integers(2, 8)\n\
    </cell>\n<code language=julia-1.5>\ngenerate_integers(8, 2)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(10, 14)\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes in two positive integers a and b, and returns the sum of all the even\
    \ digits in a and b. For example, generate_integers(2, 8) => [2, 4, 6, 8], and\
    \ generate_integers(8, 2) => [2, 4, 6, 8].\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa8nm9mh1.jl:17\nin expression starting at\
    \ /tmp/tmpa8nm9mh1.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    generate_integers(0, b)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    \n    evens = Vector{Int64}()\n    \n    for n in range(a, b) \n     \
    \   if n % 2 == 0 \n            evens.push(n)\n        end\n    end\n    \n  \
    \  return evens\nend\n</cell>\n<code language=julia-1.5>\ngenerate_integers(2,\
    \ 8)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(8, 2)\n</cell>\n<code\
    \ language=julia-1.5>\ngenerate_integers(10, 14)\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes in two positive integers a and b and returns the number\
    \ of integers between a and b that are divisible by 3.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = generate_integers;\n\t@test(candidate(2, 10) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2)\
    \ == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsj09rjw4.jl:22\nin expression starting at\
    \ /tmp/tmpsj09rjw4.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    \n    evens = Vector{Int64}()\n    \n    if a < b\n        generate_integers(b,\
    \ a)\n    elseif b < a\n        generate_integers(a, b)\n    else\n        evens\
    \ = a % b\n        generate_integers(a / b, b)\n    end\n    \n    evens\nend\n\
    </cell>\n<code language=julia-1.5>\ngenerate_integers(2, 8)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(8, 2)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(10,\
    \ 14)\n</cell>\n<text>\nProblem 3\nWrite a function that returns the number of\
    \ integers between 1 and a given integer that have no factors in common. For example,\
    \ given that n = 10, the function should return 3.\nusing Test\n\n@testset begin\n\
    \ncandidate = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t\
    @test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6,\
    \ 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphal7wal2.jl:25\nin expression starting at\
    \ /tmp/tmphal7wal2.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes in\
    \ a list of integers and returns the sum of the even integers in the list.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2,\
    \ 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmmqz7u3k.jl:17\nin expression starting at\
    \ /tmp/tmpmmqz7u3k.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    \n    evens = Vector{Int64}()\n    \n    if b < a \n        error(\"generate_integers:\
    \ b is less than a\")\n    end\n    \n    while a <= b\n        push!(evens, a)\n\
    \        a += 1\n    end\n    \n    return evens\nend\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(2, 8)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(8,\
    \ 2)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(10, 14)\n</cell>\n\
    <text>\nProblem 3\nWrite a function that returns the number of integers between\
    \ 1 and a given integer that do not exceed a given maximum.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = generate_integers;\n\t@test(candidate(2, 10) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2)\
    \ == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpet_sgdox.jl:25\nin expression starting at\
    \ /tmp/tmpet_sgdox.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < 0 || b < 0\n        error(\"Invalid input\")\n    end\n    \n \
    \   evens = Vector{Int64}()\n    \n    while a <= b\n        evens.append(a)\n\
    \        a = a + 2\n    end\n    \n    return evens\nend\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(2, 8)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(8,\
    \ 2)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(10, 14)\n</cell>\n\
    <text>\nProblem 4\nWrite a function that generates all the integers between 1\
    \ and a given number n inclusive.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpde2pmw09.jl:24\nin expression starting at\
    \ /tmp/tmpde2pmw09.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    generate_integers(0, b)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < 0 || b < 0\n        error(\"a and b must be positive\")\n    end\n\
    \    \n    evens = Vector{Int64}()\n    \n    if b == 0\n        return evens\n\
    \    end\n    \n    if a < b\n        a, b = b, a\n    end\n    \n    for i =\
    \ a to b\n        if i % 2 == 0\n            push!(evens, i)\n        end\n  \
    \  end\n    \n    return evens\nend\n</cell>\n<code language=julia-1.5>\ngenerate_integers(2,\
    \ 8)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(8, 2)\n</cell>\n<code\
    \ language=julia-1.5>\ngenerate_integers(10, 14)\n</cell>\n<text>\nExercise 2\n\
    Write a function called generate_primes that takes in two positive integers a\
    \ and b and returns a vector containing all the prime numbers less than or equal\
    \ to b (inclusive).\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmp55uv59xq.jl:25 expected \"\
    end\", got \"b\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp55uv59xq.jl:25\n\
    in expression starting at /tmp/tmp55uv59xq.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    generate_integers(0, b)\n    generate_integers(a, 0)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2, 10) ==\
    \ [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < b\n        generate_integers(b, a)\n    else\n        Vector{Int64}[a,\
    \ b]\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpzxp2tknw.jl:22\n  Test threw exception\n\
    \  Expression: candidate(2, 10) == [2, 4, 6, 8]\n  MethodError: Cannot `convert`\
    \ an object of type Int64 to an object of type Vector{Int64}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Vector{Int64}}, x::Int64,\
    \ i1::Int64)\n     @ Base ./array.jl:903\n   [2] getindex\n     @ ./array.jl:413\
    \ [inlined]\n   [3] generate_integers(a::Int64, b::Int64)\n     @ Main /tmp/tmpzxp2tknw.jl:14\n\
    \   [4] generate_integers(a::Int64, b::Int64)\n     @ Main /tmp/tmpzxp2tknw.jl:12\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpzxp2tknw.jl:22 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpzxp2tknw.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpzxp2tknw.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(10, 2) == [2, 4, 6, 8]\n  MethodError: Cannot `convert` an object\
    \ of type Int64 to an object of type Vector{Int64}\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Ve"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzxp2tknw.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < b \n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if b < a \n        error(\"generate_integers: b < a\")\n    end\n    \n\
    \    evens = Vector{Int64}()\n    \n    while a <= b\n        evens += [a]\n \
    \       a += 1\n    end\n    \n    return evens\nend\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(2, 8)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(8,\
    \ 2)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(10, 14)\n</cell>\n\
    <text>\nProblem 3\nWrite a function that returns the number of integers between\
    \ 1 and n that have the property that each integer is divisible by 3.\nusing Test\n\
    \n@testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2, 10) ==\
    \ [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjsuz6s6e.jl:24\nin expression starting at\
    \ /tmp/tmpjsuz6s6e.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < b \n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2, 10) ==\
    \ [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp5xsbk7cg.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp5xsbk7cg.jl:1\n\
    in expression starting at /tmp/tmp5xsbk7cg.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < 0 || b < 0\n        error(\"a or b must be positive\")\n    end\n\
    \    \n    evens = Vector{Int64}()\n    \n    while a < b\n        evens.append(a)\n\
    \        a += 2\n    end\n    \n    return evens\nend\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(2, 8)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(8,\
    \ 2)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(10, 14)\n</cell>\n\
    <text>\nProblem 7\nWrite a function that returns the number of integers between\
    \ 1 and n that have exactly two digits.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd72v3xti.jl:24\nin expression starting at\
    \ /tmp/tmpd72v3xti.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    generate_integers(a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that generates\
    \ all the integers between two given integers, inclusive.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = generate_integers;\n\t@test(candidate(2, 10) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2)\
    \ == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjjbh7wwi.jl:17\nin expression starting at\
    \ /tmp/tmpjjbh7wwi.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < 0 || b < 0\n        error(\"a or b must be positive\")\n    end\n\
    \    \n    if a == 0 && b == 0\n        return Vector{Int64}()\n    end\n    \n\
    \    evens = Vector{Int64}()\n    \n    if a < b\n        a, b = b, a\n    end\n\
    \    \n    for i = a to b\n        if i % 2 == 0\n            push!(evens, i)\n\
    \        end\n    end\n    \n    return evens\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that generates all the integers between 0 and $n$, inclusive,\
    \ that have $k$ digits. For example, generate_integers(10, 5, 2) should return\
    \ [10, 11, 12, 13, 14, 15].\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmphcnjnhw8.jl:25 expected \"\
    end\", got \"b\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphcnjnhw8.jl:25\n\
    in expression starting at /tmp/tmphcnjnhw8.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if b < a \n        error(\"generate_integers: b is less than a\")\n  \
    \  end\n    \n    evens = Vector{Int64}()\n    \n    while a <= b\n        push!(evens,\
    \ a)\n        a += 2\n    end\n    \n    return evens\nend\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(2, 8)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(8,\
    \ 2)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(10, 14)\n</cell>\n\
    <text>\nExercise\nWrite a function called generate_integers_between_1_and_100\
    \ that takes in two positive integers a and b and returns the even digits between\
    \ a and b, in ascending order.\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprngil5ux.jl:24\nin expression starting at\
    \ /tmp/tmprngil5ux.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    \n    evens = Vector{Int64}()\n    \n    while a < b\n        evens.append(a)\n\
    \        a += 1\n    end\n    \n    return evens\nend\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(2, 8)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(8,\
    \ 2)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(10, 14)\n</cell>\n\
    <text>\nProblem 3\nWrite a function that generates all the integers between 1\
    \ and 100 (both included) that are divisible by 7 and divisible by 11. Do not\
    \ use any loops.\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv0c2gize.jl:21\nin expression starting at\
    \ /tmp/tmpv0c2gize.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    generate_integers(0, b)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    \n    evens = Vector{Int64}()\n    \n    if a < b\n        generate_integers(b\
    \ + 1, a)\n    else\n        generate_integers(a, b - 1)\n    end\n    \n    for\
    \ n in a:(b - 1)\n        if n % 2 == 0\n            push!(evens, n)\n       \
    \ end\n    end\n    \n    return evens\nend\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(2, 8)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(8,\
    \ 2)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(10, 14)\n</cell>\n\
    <text>\nProblem 7\nWrite a function that returns the number of integers within\
    \ a given range\nthat are divisible by another given integer.\nusing Test\n\n\
    @testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2, 10) ==\
    \ [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw1o9dkxb.jl:28\nin expression starting at\
    \ /tmp/tmpw1o9dkxb.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < 0 || b < 0 || a > b || b > a || b - a < 2 \n        error(\"generate_integers:\
    \ invalid input\") \n    else \n        generate_integers_aux(a, b, [], 0)\n \
    \   end\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmporwhzr7t.jl:22\n  Test threw exception\n\
    \  Expression: candidate(2, 10) == [2, 4, 6, 8]\n  generate_integers: invalid\
    \ input\n  Stacktrace:\n   [1] error(s::String)\n     @ Base ./error.jl:33\n \
    \  [2] generate_integers(a::Int64, b::Int64)\n     @ Main /tmp/tmporwhzr7t.jl:12\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmporwhzr7t.jl:22 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmporwhzr7t.jl:21\ntest set:\
    \ Error During Test at /tmp/tmporwhzr7t.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(10, 2) == [2, 4, 6, 8]\n  generate_integers: invalid input\n  Stacktrace:\n\
    \   [1] error(s::String)\n     @ Base ./error.jl:33\n   [2] generate_integers(a::Int64,\
    \ b::Int64)\n     @ Main /tmp/tmporwhzr7t.jl:12\n   [3] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [4] macro expansion\n     @ /tmp/tmporwhzr7t.jl:23 [inlined]\n   [5] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmporwhzr7t.jl:21\ntest set:\
    \ Error During Test at /tmp/tmporwhzr7t.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(132, 2) == [2, 4, 6, 8]\n  generate_integers: invalid input\n  Stacktrace:\n\
    \   [1] error(s::String)\n     @ Base ./error.jl:33\n   [2] generate_integers(a::Int64,\
    \ b::Int64)\n     @ Main /tmp/tmporwhzr7t.jl:12\n   [3] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [4] macro expansion\n     @ /tmp/tmporwhzr7t.jl:24 [inlined]\n   [5] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmporwhzr7t.jl:21\ntest set:\
    \ Error During Test at /tmp/tmporwhzr7t.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(17, 89) "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmporwhzr7t.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if b < a \n        error(\"generate_integers: b must be greater than a\"\
    )\n    end\n    \n    evens = Vector{Int64}()\n    \n    while a <= b\n      \
    \  evens.append(a)\n        a += 2\n    end\n    \n    return evens\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes in two positive integers a and\
    \ b, and returns the number of integers between a and b that are divisible by\
    \ 3.\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2,\
    \ 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpoyclgyo1.jl:24\nin expression starting at\
    \ /tmp/tmpoyclgyo1.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes in\
    \ two positive integers a and b and returns the number of digits in between a\
    \ and b. For example, generate_integers(2, 8) returns 2, generate_integers(8,\
    \ 2) returns 2, and generate_integers(10, 14) returns 0.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = generate_integers;\n\t@test(candidate(2, 10) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2)\
    \ == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprnkkvg3b.jl:17\nin expression starting at\
    \ /tmp/tmprnkkvg3b.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if b < a \n        error(\"generate_integers: b must be greater than a\"\
    )\n    end\n    \n    evens = Vector{Int64}()\n    while a <= b\n        push!(evens,\
    \ a)\n        a += 2\n    end\n    evens\nend\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(2, 8)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(8,\
    \ 2)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(10, 14)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that generates integers between 1 and 100\
    \ (both inclusive) \nand returns the even numbers in ascending order.\nusing Test\n\
    \n@testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2, 10) ==\
    \ [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr1ckoyv9.jl:22\nin expression starting at\
    \ /tmp/tmpr1ckoyv9.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend\n</cell>\n<code language=julia-1.5>\ngenerate_integers(2, 8)\n\
    </cell>\n<code language=julia-1.5>\ngenerate_integers(8, 2)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(10, 14)\n</cell>\n<text>\nExercise\nWrite a function that generates\
    \ integers up to a specified maximum value\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxokl84w1.jl:17\nin expression starting at\
    \ /tmp/tmpxokl84w1.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    generate_integers(0, b)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    \n    even_integers = Vector{Int64}()\n    \n    if a < b\n        generate_integers(b,\
    \ a)\n    else\n        generate_integers(a, b)\n    end\n    \n    for n in 1:(b-a+1)\n\
    \        if n % 2 == 0\n            even_integers = push!(even_integers, n) \n\
    \        end\n    end\n    \n    even_integers\nend\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(2, 8)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(8,\
    \ 2)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(10, 14)\n</cell>\n\
    <text>\nProblem 3\nWrite a function that takes in two positive integers a and\
    \ b, and returns all integers between a and b (inclusive), inclusive.\nusing Test\n\
    \n@testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2, 10) ==\
    \ [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9jkrvgqp.jl:28\nin expression starting at\
    \ /tmp/tmp9jkrvgqp.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < b \n        generate_integers(b, a) \n    else \n        generate_integers(a,\
    \ b)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    \n    if a < b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < b \n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that generates\
    \ all the integers between 1 and a given number $n$, inclusive.\nusing Test\n\n\
    @testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2, 10) ==\
    \ [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe_3v_9w_.jl:17\nin expression starting at\
    \ /tmp/tmpe_3v_9w_.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < b \n        generate_integers(b, a)\n    else\n        Vector{Int64}[a,\
    \ b]\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp6l_749xd.jl:22\n  Test threw exception\n\
    \  Expression: candidate(2, 10) == [2, 4, 6, 8]\n  MethodError: Cannot `convert`\
    \ an object of type Int64 to an object of type Vector{Int64}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Vector{Int64}}, x::Int64,\
    \ i1::Int64)\n     @ Base ./array.jl:903\n   [2] getindex\n     @ ./array.jl:413\
    \ [inlined]\n   [3] generate_integers(a::Int64, b::Int64)\n     @ Main /tmp/tmp6l_749xd.jl:14\n\
    \   [4] generate_integers(a::Int64, b::Int64)\n     @ Main /tmp/tmp6l_749xd.jl:12\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp6l_749xd.jl:22 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp6l_749xd.jl:21\ntest set:\
    \ Error During Test at /tmp/tmp6l_749xd.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(10, 2) == [2, 4, 6, 8]\n  MethodError: Cannot `convert` an object\
    \ of type Int64 to an object of type Vector{Int64}\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Ve"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6l_749xd.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    generate_integers(a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if b < a \n        error(\"generate_integers: b must be greater than a\"\
    )\n    end\n    \n    evens = Vector{Int64}()\n    \n    while a <= b\n      \
    \  evens.append(a)\n        a = a + 2\n    end\n    \n    return evens\nend\n\
    </cell>\n<code language=julia-1.4>\ngenerate_integers(2, 8)\n</cell>\n<code language=julia-1.4>\n\
    generate_integers(8, 2)\n</cell>\n<code language=julia-1.4>\ngenerate_integers(10,\
    \ 14)\n</cell>\n<text>\nExercise: Generate all integers between 1 and 100 (both\
    \ included) that are divisible by 3\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp5xbi0m9.jl:24\nin expression starting at\
    \ /tmp/tmpp5xbi0m9.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if b < a \n        error(\"generate_integers: b must be greater than a\"\
    )\n    end\n    \n    digits = Vector{Int64}()\n    \n    while a <= b\n     \
    \   push!(digits, a)\n        a = a + 2\n    end\n    \n    return digits\nend\n\
    </cell>\n<code language=julia-1.5>\ngenerate_integers(2, 8)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(8, 2)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(10,\
    \ 14)\n</cell>\n<text>\nProblem 7: Generate all integers between 1 and 100 (both\
    \ included) that are divisible by 3\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvtnski17.jl:24\nin expression starting at\
    \ /tmp/tmpvtnski17.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend\n</cell>\n<code language=julia-1.5>\ngenerate_integers(2, 8)\n\
    </cell>\n<code language=julia-1.5>\ngenerate_integers(8, 2)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(10, 14)\n</cell>\n<text>\nExercise\nWrite a function that generates\
    \ integers up to a specified maximum.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2cav0alg.jl:17\nin expression starting at\
    \ /tmp/tmp2cav0alg.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    \n    even_integers = Vector{Int64}()\n    \n    if a < b\n        generate_integers(b,\
    \ a)\n    else\n        generate_integers(a, b)\n    end\n    \n    if a < b\n\
    \        even_integers = even_integers[end-1:end]\n    else\n        even_integers\
    \ = even_integers[end-1:end]\n    end\n    \n    even_integers = even_integers[2:end]\n\
    \    \n    return even_integers\nend\n</cell>\n<code language=julia-1.5>\ngenerate_integers(2,\
    \ 8)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(8, 2)\n</cell>\n<code\
    \ language=julia-1.5>\ngenerate_integers(10, 14)\n</cell>\n<text>\nProblem 2\n\
    Write a function that generates all the prime numbers between two given integers,\
    \ inclusive.\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvv7dg1i5.jl:30\nin expression starting at\
    \ /tmp/tmpvv7dg1i5.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    \n    evens = Vector{Int64}()\n    \n    if a < b\n        generate_integers(b,\
    \ a)\n    else\n        generate_integers(a, b)\n    end\n    \n    evens = evens.+(a:b).filter(x\
    \ -> x % 2 == 0)\n    \n    return evens\nend\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(2, 8)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(8,\
    \ 2)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(10, 14)\n</cell>\n\
    <text>\nExercise\nWrite a function that generates integers between 1 and 100 (both\
    \ inclusive) that are divisible by 7 and divisible by 3.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = generate_integers;\n\t@test(candidate(2, 10) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2)\
    \ == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb6jy6hm_.jl:24\nin expression starting at\
    \ /tmp/tmpb6jy6hm_.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    \n    if a < b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b \n        a, b = b, a\n    end\n    \n    evens = Vector{Int64}()\n\
    \    \n    while a <= b\n        evens.append(a)\n        a += 2\n    end\n  \
    \  \n    return evens\nend\n</cell>\n<code language=julia-1.5>\ngenerate_integers(2,\
    \ 8)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(8, 2)\n</cell>\n<code\
    \ language=julia-1.5>\ngenerate_integers(10, 14)\n</cell>\n<text>\nProblem 3\n\
    Write a function that generates all the integers between 1 and 100 that are divisible\
    \ by 3 or 5.\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpefm94icm.jl:24\nin expression starting at\
    \ /tmp/tmpefm94icm.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    \n    if b < a \n        error(\"generate_integers: b < a\")\n    end\n\
    \    \n    evens = Vector{Int64}()\n    \n    while a <= b\n        push!(evens,\
    \ a)\n        \n        a = a + 2\n    end\n    \n    return evens\nend\n</cell>\n\
    <code language=julia-1.5>\ngenerate_integers(2, 8)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(8, 2)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(10,\
    \ 14)\n</cell>\n<text>\nExercise\nWrite a function that generates integers between\
    \ 1 and 100 (both inclusive), inclusive.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph12qy0d7.jl:26\nin expression starting at\
    \ /tmp/tmph12qy0d7.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    \n    if a < b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\n    \nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    \n    evens = Vector{Int64}()\n\
    \    \n    while a <= b\n        push!(evens, a)\n        a += 2\n    end\n  \
    \  \n    return evens\nend\n</cell>\n<code language=julia-1.5>\ngenerate_integers(2,\
    \ 8)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(8, 2)\n</cell>\n<code\
    \ language=julia-1.5>\ngenerate_integers(10, 14)\n</cell>\n<text>\nExercise: Generate\
    \ a list of all integers between 1 and 100 that are divisible by 3\nusing Test\n\
    \n@testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2, 10) ==\
    \ [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxs9m4mvh.jl:24\nin expression starting at\
    \ /tmp/tmpxs9m4mvh.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend\n</cell>\n<text>\nExercise\nWrite a function that generates\
    \ all the integers between two given integers, inclusive.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = generate_integers;\n\t@test(candidate(2, 10) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2)\
    \ == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8n2d431h.jl:17\nin expression starting at\
    \ /tmp/tmp8n2d431h.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    \n    if a < b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < b\n        generate_integers(b, a)\n    else\n        Vector{Int64}(undef,\
    \ a-b+1)\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that generates\
    \ all the integers between 1 and a given number n, inclusive.\nusing Test\n\n\
    @testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2, 10) ==\
    \ [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4i6evyie.jl:17\nin expression starting at\
    \ /tmp/tmp4i6evyie.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if b < a \n        generate_integers(b, a)\n    else\n        Vector{Int64}(undef,\
    \ a-b+1)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpv5ylfny9.jl:22\n  Test threw exception\n\
    \  Expression: candidate(2, 10) == [2, 4, 6, 8]\n  ArgumentError: invalid Array\
    \ dimensions\n  Stacktrace:\n   [1] Array\n     @ ./boot.jl:457 [inlined]\n  \
    \ [2] generate_integers(a::Int64, b::Int64)\n     @ Main /tmp/tmpv5ylfny9.jl:14\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpv5ylfny9.jl:22 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpv5ylfny9.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpv5ylfny9.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(10, 2) == [2, 4, 6, 8]\n  ArgumentError: invalid Array dimensions\n\
    \  Stacktrace:\n   [1] Array\n     @ ./boot.jl:457 [inlined]\n   [2] generate_integers(a::Int64,\
    \ b::Int64)\n     @ Main /tmp/tmpv5ylfny9.jl:14\n   [3] generate_integers(a::Int64,\
    \ b::Int64)\n     @ Main /tmp/tmpv5ylfny9.jl:12\n   [4] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [5] macro expansion\n     @ /tmp/tmpv5ylfny9.jl:23 [inlined]\n   [6] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpv5ylfny9.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpv5ylfny9.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(132, 2) == [2, 4, 6, 8]\n  ArgumentError: invalid Array dimensions\n\
    \  Stacktrace:\n   [1] Array\n     @ ./boot.jl:457 [inlined]\n   [2] generate_integers(a::Int64,\
    \ b::Int64)\n     @ Main /tmp/tmpv5ylfny9.jl:14\n   [3] generate_integers(a::Int64,\
    \ b::Int64)\n     @ Main /tmp/tmpv5ylfny9.jl:12\n   [4] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [5] macro expansion\n     @ /tmp/tmpv5ylfny9.jl:24 [inlined]\n   [6] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpv5ylfny9.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a\
    \ positive integer $n$ and returns the number of digits in $n$. For example, generate_integers(10,\
    \ 14) => 2.\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\t\
    @test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6,\
    \ 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmckgvvzq.jl:17\nin expression starting at\
    \ /tmp/tmpmckgvvzq.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < 0 || b < 0\n        error(\"a and b must be positive\")\n    end\n\
    \    \n    if a == 0 || b == 0\n        return []\n    end\n    \n    evens =\
    \ generate_integers(a - 1, b - 1)\n    \n    if a > b\n        evens = evens[end]\
    \ + 1\n    end\n    \n    evens\nend\n</cell>\n<code language=julia-1.5>\ngenerate_integers(2,\
    \ 8)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(8, 2)\n</cell>\n<code\
    \ language=julia-1.5>\ngenerate_integers(10, 14)\n</cell>\n<text>\nProblem 3\n\
    Write a function is_palindrome(number::Int64) which returns true if the given\
    \ number is a palindrome and false otherwise.\nusing Test\n\n@testset begin\n\n\
    candidate = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t\
    @test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6,\
    \ 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp018y1vmd.jl:27\nin expression starting at\
    \ /tmp/tmp018y1vmd.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < b \n        generate_integers(b, a) \n    else \n        generate_integers(a,\
    \ b)\n    end\nend\n</cell>\n<code language=julia-1.5>\ngenerate_integers(2, 8)\n\
    </cell>\n<code language=julia-1.5>\ngenerate_integers(8, 2)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(10, 14)\n</cell>\n<text>\nExercise\nWrite a function that generates\
    \ integers between 1 and 100 (both inclusive) that are divisible by 7 and divisible\
    \ by 11. Then, write a function that generates integers between 1 and 100 (both\
    \ inclusive) that are divisible by both 7 and 11. Then, write a function that\
    \ generates integers between 1 and 100 (both inclusive) that are divisible by\
    \ either 7 or 11. Then, write a function that generates integers between 1 and\
    \ 100 (both inclusive) that are divisible by both 7 and 11. Then, write a function\
    \ that generates integers between 1 and 100 (both inclusive) that are divisible\
    \ by either 7 or 11.\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphlyzewjk.jl:17\nin expression starting at\
    \ /tmp/tmphlyzewjk.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < 0 || b < 0 || a > b || b > Int64(Int64(Int64(a) + Int64(b))) \n\
    \        error(\"generate_integers: invalid inputs\")\n    end\n    \n    evens\
    \ = Vector{Int64}()\n    \n    while a <= b\n        push!(evens, a)\n       \
    \ a = a + Int64(Int64(a) + 1)\n    end\n    \n    evens\nend\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(2, 8)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(8,\
    \ 2)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(10, 14)\n</cell>\n\
    <text>\nProblem 7: Generate all integers between 1 and 100 (both included) that\
    \ are divisible by 7 and divisible by 11\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpumwzu35k.jl:24\nin expression starting at\
    \ /tmp/tmpumwzu35k.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if b < a \n        error(\"generate_integers: b < a\")\n    end\n    \n\
    \    evens = Vector{Int64}()\n    \n    while a <= b\n        evens.append(a)\n\
    \        a += 2\n    end\n    \n    evens\nend\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(2, 8)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(8,\
    \ 2)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(10, 14)\n</cell>\n\
    <text>\nExercise: Generate all integers between 1 and 100 that are divisible by\
    \ 3\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2,\
    \ 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxe94yzei.jl:24\nin expression starting at\
    \ /tmp/tmpxe94yzei.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    \n    evens = Vector{Int64}()\n    \n    if a < b\n        generate_integers(b,\
    \ a)\n    else\n        generate_integers(a, b)\n    end\n    \n    if a < b\n\
    \        evens = evens.+(a:b).-(a:b)\n    else\n        evens = evens.+(a:b).-(a:b)\n\
    \    end\n    \n    return evens\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        generate_integers(b, a)\n    else\n        Vector{Int64}((a\
    \ % b) + 1)\n    end\nend\n</cell>\n<code language=julia-1.5>\ngenerate_integers(2,\
    \ 8)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(8, 2)\n</cell>\n<code\
    \ language=julia-1.5>\ngenerate_integers(10, 14)\n</cell>\n<text>\nExercise 2\n\
    Write a function that generates all the integers between 1 and 100 (both included)\
    \ that are divisible by 3\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv9nsf4fu.jl:17\nin expression starting at\
    \ /tmp/tmpv9nsf4fu.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend\n</cell>\n<code language=julia-1.5>\ngenerate_integers(2, 8)\n\
    </cell>\n<code language=julia-1.5>\ngenerate_integers(8, 2)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(10, 14)\n</cell>\n<text>\nExercise: Write a function that generates\
    \ integers up to a number n that are\n    divisible by k. For example, generate_integers(10,\
    \ 3, 2) should return [10, 12, 14].\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmii2shuc.jl:17\nin expression starting at\
    \ /tmp/tmpmii2shuc.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    \n    evens = Vector{Int64}()\n    \n    while a <= b\n        evens.append(a)\n\
    \        a += 2\n    end\n    \n    return evens\nend\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(2, 8)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(8,\
    \ 2)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(10, 14)\n</cell>\n\
    <text>\nExercise\nWrite a function that generates integers up to a specified maximum,\
    \ inclusive.\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7n9f7zak.jl:21\nin expression starting at\
    \ /tmp/tmp7n9f7zak.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    \n    even_integers = Vector{Int64}()\n    \n    i = a\n    while i <=\
    \ b\n        if i%2 == 0\n            even_integers = even_integers + [i]\n  \
    \      end\n        i = i + 1\n    end\n    \n    return even_integers\nend\n\
    </cell>\n<code language=julia-1.5>\ngenerate_integers(2, 8)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(8, 2)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(10,\
    \ 14)\n</cell>\n<text>\nProblem 4\nWrite a function that returns the number of\
    \ digits in an integer.\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkrkbgfcz.jl:24\nin expression starting at\
    \ /tmp/tmpkrkbgfcz.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    \n    if a < b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\n    \nend\n</cell>\n<text>\nProblem 4\nWrite a function that takes\
    \ in two positive integers a and b, and returns the number of digits in each of\
    \ their decimal representations.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv_j0_cu8.jl:19\nin expression starting at\
    \ /tmp/tmpv_j0_cu8.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < 0 || b < 0 \n        error(\"a and b must be positive\")\n    end\n\
    \    \n    evens = Vector{Int64}()\n    \n    if b == 0 \n        return evens\n\
    \    end\n    \n    if a < b \n        a, b = b, a\n    end\n    \n    digits\
    \ = Int64[]\n    \n    while a > 0 \n        push!(digits, a%10)\n        a =\
    \ a/10\n    end\n    \n    while b > 0 \n        push!(digits, b%10)\n       \
    \ b = b/10\n    end\n    \n    push!(evens, digits...)\n    \n    return evens\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that takes an integer $n$ and\
    \ returns the number of digits in $n$. \nFor example, \n$$ n = 12345 $$\n$$ n\
    \ = 12345 $$\n$$ n = 12345 $$\n$$ n = 12345 $$\n$$ n = 12345 $$\n$$ n = 12345\
    \ $$\n$$ n = 12345 $$\n$$ n = 12345 $$\n$$ n = 12345 $$\n$$ n = 12345 $$\n$$ n\
    \ = 12345 $$\n$$ n = 12345 $$\n$$ n = 12345 $$\n$$ n = 12345 $$\n$$ n = 12345\
    \ $$\n$$ n = 12345 $$\n$$ n = 12345 $$\n$$ n = 12345 $$\n$$ n = 12345 $$\n$$ n\
    \ = 12345 $$\n$$ n = 12345 $$\n$$ n = 12345 $$\n$$ n = 12345 $$\n$$ n = 12345\
    \ $$\n$$ n = 12345 $$\n$$ n = 12345 $$\n$$ n = 12345 $$\n$$ n = 12345 $$\n$$ n\
    \ = 12345 $$\n$$ n = 12345 $$\n$$ n = 12345 $$\n$$ n = 12345 $$\n$$ n = 12345\
    \ $$\n$$ n = 12345 $$\n$$ n = 12345 $$\n$$ n = 12345 $$\n$$ n = 12345 $$\n$$ n\
    \ = 12345 $$\n$$ n = 12345 $$\n$$ n = 12345 $$\n$$ n = 12345 $$\n$$ n = 12345\
    \ $$\n$$ n = 12345 $$\n$$ n = 12345 $$\n$$ n = 12345 $$\n$$ n = 12345 $$\n$$ n\
    \ = 12345 $$\n$$ n = 12345 $$\n$$ n = 12345 $$\n$$ n = 12345 $$\n$$\nusing Test\n\
    \n@testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2, 10) ==\
    \ [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu8sub_2u.jl:41\nin expression starting at\
    \ /tmp/tmpu8sub_2u.jl:41\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if b < a \n        generate_integers(b, a)\n    else\n        generate_integers(b,\
    \ a+1)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < 0 || b < 0\n        error(\"a or b must be positive\")\n    end\n\
    \    \n    if a == 0 || b == 0\n        return Vector{Int64}()\n    end\n    \n\
    \    evens = generate_integers(a - 1, b - 1)\n    evens = evens[2:end] + evens[2:end]\n\
    \    \n    evens = evens[a:b]\n    \n    return evens\nend\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(2, 8)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(8,\
    \ 2)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(10, 14)\n</cell>\n\
    <text>\nProblem 3\nWrite a function called generate_primes(a::Int64, b::Int64)\
    \ that takes in two positive integers a and b and returns a vector containing\
    \ the prime numbers between a and b (inclusive).\nusing Test\n\n@testset begin\n\
    \ncandidate = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t\
    @test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6,\
    \ 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp388avibt.jl:26\nin expression starting at\
    \ /tmp/tmp388avibt.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend\n</cell>\n<text>\nProblem 3\nWrite a function that generates\
    \ the integers between 1 and a given number n inclusive.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = generate_integers;\n\t@test(candidate(2, 10) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2)\
    \ == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqzjs1k4q.jl:17\nin expression starting at\
    \ /tmp/tmpqzjs1k4q.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that generates\
    \ the integers between 1 and a given number n, inclusive.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = generate_integers;\n\t@test(candidate(2, 10) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2)\
    \ == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpizbqke61.jl:17\nin expression starting at\
    \ /tmp/tmpizbqke61.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    \n    evens = Vector{Int64}()\n\
    \    \n    while a <= b\n        push!(evens, a)\n        a += 2\n    end\n  \
    \  \n    evens\nend\n</cell>\n<code language=julia-1.5>\ngenerate_integers(2,\
    \ 8)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(8, 2)\n</cell>\n<code\
    \ language=julia-1.5>\ngenerate_integers(10, 14)\n</cell>\n<text>\nExercise\n\
    Write a function that generates integers between 1 and 100 (both inclusive) that\
    \ are divisible by 3 and 5.\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuxzhq6rc.jl:24\nin expression starting at\
    \ /tmp/tmpuxzhq6rc.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if b < a \n        error(\"generate_integers: b must be greater than a\"\
    )\n    end\n    \n    evens = Vector{Int64}()\n    \n    while a <= b\n      \
    \  evens.append(a)\n        a += 1\n    end\n    \n    return evens\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that generates integers within a given range.\
    \ Your function should take two parameters: the first is the minimum value and\
    \ the second is the maximum value. Your function should return a list of integers\
    \ within the given range.\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmift3xkh.jl:24\nin expression starting at\
    \ /tmp/tmpmift3xkh.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < b \n        generate_integers(b, a)\n    else if a == b\n     \
    \   Vector{Int64}[]\n    else\n        Vector{Int64}[a % b + 1]\n    end\nend\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of digits\
    \ in an integer.\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3z6xuy5m.jl:13\nin expression starting at\
    \ /tmp/tmp3z6xuy5m.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    generate_integers(0, b)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    \n    evens = Vector{Int64}()\n\
    \    \n    while a <= b\n        if a % 2 == 0\n            evens.push(a)\n  \
    \      end\n        a = a + 1\n    end\n    \n    return evens\nend\n</cell>\n\
    <code language=julia-1.5>\ngenerate_integers(2, 8)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(8, 2)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(10,\
    \ 14)\n</cell>\n<text>\nProblem 4\nWrite a function that takes in two positive\
    \ integers a and b, and returns the number of integers between a and b that are\
    \ divisible by 3.\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvn7ce558.jl:26\nin expression starting at\
    \ /tmp/tmpvn7ce558.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that generates\
    \ all the integers between two given integers, inclusive.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = generate_integers;\n\t@test(candidate(2, 10) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2)\
    \ == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0or72k3_.jl:17\nin expression starting at\
    \ /tmp/tmp0or72k3_.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    generate_integers(a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    \n    evens = Vector{Int64}()\n    \n    if a < b\n        generate_integers(b,\
    \ a)\n    else\n        generate_integers(a, b)\n    end\n    \n    for n in 1:(b\
    \ - a+1)\n        evens.push(n)\n    end\n    \n    evens\nend\n</cell>\n<code\
    \ language=julia-1.5>\ngenerate_integers(2, 8)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(8, 2)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(10,\
    \ 14)\n</cell>\n<text>\nProblem 3\nWrite a function that returns the number of\
    \ integers between a and b inclusive that satisfy the equation $n^2 + n$ is odd.\n\
    using Test\n\n@testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2,\
    \ 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprqirhszh.jl:26\nin expression starting at\
    \ /tmp/tmprqirhszh.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    \n    evens = Vector{Int64}()\n    \n    for i = a:b\n        if i%2 ==\
    \ 0\n            push!(evens, i)\n        end\n    end\n    \n    return evens\n\
    end\n</cell>\n<code language=julia-1.5>\ngenerate_integers(2, 8)\n</cell>\n<code\
    \ language=julia-1.5>\ngenerate_integers(8, 2)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(10, 14)\n</cell>\n<text>\nProblem 3\nWrite a function that takes\
    \ in a list of integers and returns the number of even numbers within that list.\n\
    using Test\n\n@testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2,\
    \ 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp95l7jljr.jl:22\nin expression starting at\
    \ /tmp/tmp95l7jljr.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    \n    even_integers = Vector{Int64}()\n    \n    while(a <= b)\n     \
    \   even_integers = even_integers + [a]\n        a = a + 2\n    end\n    \n  \
    \  return even_integers\nend\n</cell>\n<code language=julia-1.5>\ngenerate_integers(2,\
    \ 8)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(8, 2)\n</cell>\n<code\
    \ language=julia-1.5>\ngenerate_integers(10, 14)\n</cell>\n<text>\nProblem 3\n\
    Write a function that returns the number of integers between 1 and a given number\
    \ n that have no factors of n.\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbiwd9nvl.jl:21\nin expression starting at\
    \ /tmp/tmpbiwd9nvl.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    \n    evens = Vector{Int64}()\n    \n    while a < b\n        evens.append(a)\n\
    \        a += 1\n    end\n    \n    return evens\nend\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(2, 8)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(8,\
    \ 2)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(10, 14)\n</cell>\n\
    <text>\nExercise\nWrite a function that generates integers between 1 and 100,\
    \ and returns the even digits between 1 and 100.\nusing Test\n\n@testset begin\n\
    \ncandidate = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t\
    @test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6,\
    \ 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2dojqicl.jl:21\nin expression starting at\
    \ /tmp/tmp2dojqicl.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if b < a \n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend\n</cell>\n<code language=julia-1.3>\ngenerate_integers(2, 8)\n\
    </cell>\n<code language=julia-1.3>\ngenerate_integers(8, 2)\n</cell>\n<code language=julia-1.3>\n\
    generate_integers(10, 14)\n</cell>\n<text>\nExercise\nWrite a function that generates\
    \ integers between 1 and 100 (both inclusive) that are divisible by 7 and divisible\
    \ by 3.\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2,\
    \ 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnv887azi.jl:17\nin expression starting at\
    \ /tmp/tmpnv887azi.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < 0 || b < 0\n        error(\"a or b must be positive\")\n    end\n\
    \    if a > b\n        error(\"a must be less than b\")\n    end\n    \n    evens\
    \ = Vector{Int64}()\n    \n    while a <= b\n        if a % 2 == 0\n         \
    \   evens.push(a)\n        end\n        a = a + 1\n    end\n    \n    return evens\n\
    end\n</cell>\n<code language=julia-1.5>\ngenerate_integers(2, 8)\n</cell>\n<code\
    \ language=julia-1.5>\ngenerate_integers(8, 2)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(10, 14)\n</cell>\n<text>\nProblem 4\nWrite a function called\
    \ generate_primes(a::Int64, b::Int64) that generates all the prime numbers between\
    \ a and b (inclusive).\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvokqffj9.jl:29\nin expression starting at\
    \ /tmp/tmpvokqffj9.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2, 10) ==\
    \ [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmptvvch_yp.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmptvvch_yp.jl:1\n\
    in expression starting at /tmp/tmptvvch_yp.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < 0 || b < 0\n        error(\"a and b must be positive\")\n    end\n\
    \    \n    evens = Vector{Int64}()\n    \n    while a <= b\n        if a % 2 ==\
    \ 0\n            evens.push(a)\n        end\n        a += 1\n    end\n    \n \
    \   return evens\nend\n</cell>\n<text>\nExercise 2\nWrite a function that generates\
    \ the integers between a and b inclusive, inclusive, without duplicates.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2,\
    \ 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptz2nawzr.jl:26\nin expression starting at\
    \ /tmp/tmptz2nawzr.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < 0 || b < 0\n        error(\"a and b must be non-negative\")\n \
    \   end\n    \n    if a > b\n        (a, b) = (b, a)\n    end\n    \n    evens\
    \ = Vector{Int64}()\n    \n    while a <= b\n        if a % 2 == 0\n         \
    \   evens.push(a)\n        end\n        a += 1\n    end\n    \n    evens\nend\n\
    </cell>\n<text>\nProblem 3\nWrite a function that returns the number of integers\
    \ between two given integers inclusively.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_an2mjbz.jl:30\nin expression starting at\
    \ /tmp/tmp_an2mjbz.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes in\
    \ two positive integers a and b and returns the number of integers between a and\
    \ b (inclusive) that contain an even digit.\nusing Test\n\n@testset begin\n\n\
    candidate = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t\
    @test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6,\
    \ 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppazd8diw.jl:17\nin expression starting at\
    \ /tmp/tmppazd8diw.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that generates\
    \ all the integers between two given integers, inclusive.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = generate_integers;\n\t@test(candidate(2, 10) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2)\
    \ == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1sb7ccoc.jl:17\nin expression starting at\
    \ /tmp/tmp1sb7ccoc.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the sum of all even integers between two given integers. For example:\nusing\
    \ Test\n\n@testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2,\
    \ 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpotqlu9h6.jl:17\nin expression starting at\
    \ /tmp/tmpotqlu9h6.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    \n    if a < b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\n    \nend\n</cell>\n<text>\nExercise 3\nWrite a function that generates\
    \ all the integers between two given integers, inclusive.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = generate_integers;\n\t@test(candidate(2, 10) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2)\
    \ == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppkt10boj.jl:19\nin expression starting at\
    \ /tmp/tmppkt10boj.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    \n    evens = Vector{Int64}()\n    \n    if a < b\n        generate_integers(b,\
    \ a)\n    else\n        generate_integers(a, b)\n    end\n    \n    if a < b\n\
    \        evens = evens.+(a-b)\n    end\n    \n    return evens\nend\n</cell>\n\
    <code language=julia-1.5>\ngenerate_integers(2, 8)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(8, 2)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(10,\
    \ 14)\n</cell>\n<text>\nProblem 7\nWrite a function that generates all the integers\
    \ between 1 and a given number n that have no duplicates.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = generate_integers;\n\t@test(candidate(2, 10) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2)\
    \ == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9m9hkr7q.jl:26\nin expression starting at\
    \ /tmp/tmp9m9hkr7q.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < 0 || b < 0\n        error(\"a and b must be positive\")\n    end\n\
    \    \n    if b > a\n        error(\"b must be greater than a\")\n    end\n  \
    \  \n    evens = Vector{Int64}()\n    \n    while a <= b\n        evens.append(a)\n\
    \        a = a + 2\n    end\n    \n    return evens\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that generates all the integers between two given integers,\
    \ inclusive.\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbha42q88.jl:28\nin expression starting at\
    \ /tmp/tmpbha42q88.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    \n    evens = Vector{Int64}()\n    \n    if a < b\n        generate_integers(b,\
    \ a)\n    elseif b < a\n        generate_integers(a, b)\n    else\n        evens\
    \ = [a]\n        generate_integers(b+1, a)\n    end\n    \n    return evens\n\
    end\n</cell>\n<code language=julia-1.5>\ngenerate_integers(2, 8)\n</cell>\n<code\
    \ language=julia-1.5>\ngenerate_integers(8, 2)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(10, 14)\n</cell>\n<text>\nProblem 3\nWrite a function called\
    \ count_digits(n) that returns the number of digits in n.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = generate_integers;\n\t@test(candidate(2, 10) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2)\
    \ == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjd3_mvs4.jl:25\nin expression starting at\
    \ /tmp/tmpjd3_mvs4.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes in\
    \ two positive integers a and b and returns the number of digits in each of their\
    \ decimal representations.\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz254aa92.jl:17\nin expression starting at\
    \ /tmp/tmpz254aa92.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    \n    even_integers = Vector{Int64}()\n    \n    for x in a:a:b\n    \
    \    if x % 2 == 0\n            even_integers = even_integers + [x]\n        end\n\
    \    end\n    \n    return even_integers\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes in two positive integers a and b, and returns the sum\
    \ of all even integers between a and b. For example, generate_integers(2, 8) =>\
    \ [2, 4, 6, 8], and generate_integers(8, 2) => [2, 4, 6, 8].\nusing Test\n\n@testset\
    \ begin\n\ncandidate = generate_integers;\n\t@test(candidate(2, 10) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2)\
    \ == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzsbzdola.jl:22\nin expression starting at\
    \ /tmp/tmpzsbzdola.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b \n        a, b = b, a\n    end\n    \n    digits = Vector{Int64}()\n\
    \    \n    while a <= b\n        push!(digits, a)\n        \n        a, b = b,\
    \ (a + b) / 2\n    end\n    \n    digits\nend\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(2, 8)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(8,\
    \ 2)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(10, 14)\n</cell>\n\
    <text>\nProblem 7\nWrite a function that returns the number of integers between\
    \ two given integers, inclusive.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5upepoqs.jl:25\nin expression starting at\
    \ /tmp/tmp5upepoqs.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < 0 || b < 0\n        error(\"generate_integers: a and b must be\
    \ positive\")\n    end\n    if a > b\n        error(\"generate_integers: a must\
    \ be less than b\")\n    end\n    \n    evens = Vector{Int64}()\n    \n    while\
    \ a <= b\n        push!(evens, a)\n        \n        a = a + 2\n    end\n    \n\
    \    return evens\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmplb7c2oi1.jl:33\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplb7c2oi1.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplb7c2oi1.jl:32\ntest set: Error\
    \ During Test at /tmp/tmplb7c2oi1.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(10, 2) == [2, 4, 6, 8]\n  generate_integers: a must be less than b\n\
    \  Stacktrace:\n   [1] error(s::String)\n     @ Base ./error.jl:33\n   [2] generate_integers(a::Int64,\
    \ b::Int64)\n     @ Main /tmp/tmplb7c2oi1.jl:15\n   [3] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [4] macro expansion\n     @ /tmp/tmplb7c2oi1.jl:34 [inlined]\n   [5] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmplb7c2oi1.jl:32\ntest set:\
    \ Error During Test at /tmp/tmplb7c2oi1.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(132, 2) == [2, 4, 6, 8]\n  generate_integers: a must be less than\
    \ b\n  Stacktrace:\n   [1] error(s::String)\n     @ Base ./error.jl:33\n   [2]\
    \ generate_integers(a::Int64, b::Int64)\n     @ Main /tmp/tmplb7c2oi1.jl:15\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmplb7c2oi1.jl:35 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmplb7c2oi1.jl:32\ntest set:\
    \ Test Failed at /tmp/tmplb7c2oi1.jl:36\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [17, 19, 21, 23, 25, 27, 29, 31, 33, 35  \u2026  71, 73, 75, 77,\
    \ 79, 81, 83, 85, 87, 89] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/ce"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplb7c2oi1.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < 0 || b < 0 || a > b || b > a || b - a < 2 \n        error(\"Invalid\
    \ input\")\n    end\n    \n    evens = Vector{Int64}()\n    \n    while a <= b\n\
    \        evens.append(a)\n        a += 2\n    end\n    \n    return evens\nend\n\
    using Test\n\n@testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2,\
    \ 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpc17wweep.jl:29\n  Test threw exception\n\
    \  Expression: candidate(2, 10) == [2, 4, 6, 8]\n  Invalid input\n  Stacktrace:\n\
    \   [1] error(s::String)\n     @ Base ./error.jl:33\n   [2] generate_integers(a::Int64,\
    \ b::Int64)\n     @ Main /tmp/tmpc17wweep.jl:12\n   [3] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [4] macro expansion\n     @ /tmp/tmpc17wweep.jl:29 [inlined]\n   [5] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpc17wweep.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpc17wweep.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(10, 2) == [2, 4, 6, 8]\n  Invalid input\n  Stacktrace:\n   [1] error(s::String)\n\
    \     @ Base ./error.jl:33\n   [2] generate_integers(a::Int64, b::Int64)\n   \
    \  @ Main /tmp/tmpc17wweep.jl:12\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpc17wweep.jl:30 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpc17wweep.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpc17wweep.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(132, 2) == [2, 4, 6, 8]\n  Invalid input\n  Stacktrace:\n   [1] error(s::String)\n\
    \     @ Base ./error.jl:33\n   [2] generate_integers(a::Int64, b::Int64)\n   \
    \  @ Main /tmp/tmpc17wweep.jl:12\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpc17wweep.jl:31 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpc17wweep.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpc17wweep.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(17, 89) == Vector{Int64}([])\n  Invalid input\n  Stacktrace:\n   [1]"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpc17wweep.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    \n    if a > b\n        a, b = b, a\n    end\n    \n    evens = Vector{Int64}()\n\
    \    \n    while a <= b\n        push!(evens, a)\n        \n        a = a + 2\n\
    \    end\n    \n    return evens\nend\n</cell>\n<code language=julia-1.5>\ngenerate_integers(2,\
    \ 8)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(8, 2)\n</cell>\n<code\
    \ language=julia-1.5>\ngenerate_integers(10, 14)\n</cell>\n<text>\nExercise 2\n\
    Write a function that generates all the integers between 1 and 100 (both included)\
    \ that are divisible by 3.\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp145tcua1.jl:26\nin expression starting at\
    \ /tmp/tmp145tcua1.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < b\n        generate_integers(b, a)\n    else\n        Vector{Int64}[a,\
    \ b]\n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that generates\
    \ the integers between 0 and $n$, inclusive, where $n$ is provided as an argument.\n\
    using Test\n\n@testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2,\
    \ 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjinwfoiw.jl:17\nin expression starting at\
    \ /tmp/tmpjinwfoiw.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2, 10) ==\
    \ [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpa1oayl19.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpa1oayl19.jl:1\n\
    in expression starting at /tmp/tmpa1oayl19.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if b < a \n        error(\"generate_integers: b must be greater than a\"\
    )\n    end\n    \n    evens = Vector{Int64}()\n    \n    while a <= b\n      \
    \  push!(evens, a)\n        a += 2\n    end\n    \n    return evens\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a positive integer $n$ and returns\
    \ the number of digits in $n$. For example, given $n = 12$, the function should\
    \ return 3.\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\t\
    @test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6,\
    \ 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0yutpdlo.jl:24\nin expression starting at\
    \ /tmp/tmp0yutpdlo.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    \n    evens = Vector{Int64}()\n    \n    if a < b\n        generate_integers(b,\
    \ a)\n    end\n    \n    while a <= b\n        evens.append(a)\n        a += 1\n\
    \    end\n    \n    evens\nend\n</cell>\n<code language=julia-1.3>\ngenerate_integers(2,\
    \ 8)\n</cell>\n<code language=julia-1.3>\ngenerate_integers(8, 2)\n</cell>\n<code\
    \ language=julia-1.3>\ngenerate_integers(10, 14)\n</cell>\n<text>\nProblem 3\n\
    Write a function that returns the number of integers between two given integers,\
    \ inclusive.\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1d4kbhwp.jl:25\nin expression starting at\
    \ /tmp/tmp1d4kbhwp.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    generate_integers(a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    \n    evens = Vector{Int64}()\n    \n    if a < b\n        generate_integers(b,\
    \ a)\n    else\n        generate_integers(a, b)\n    end\n    \n    evens = evens.+(a:b).filter(x\
    \ -> x % 2 == 0)\n    \n    return evens\nend\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(2, 8)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(8,\
    \ 2)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(10, 14)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that generates all the integers between 1\
    \ and 100 (both included) that are divisible by 7 and are also divisible by 3.\n\
    using Test\n\n@testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2,\
    \ 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwuvr1fnl.jl:24\nin expression starting at\
    \ /tmp/tmpwuvr1fnl.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    \n    evens = Vector{Int64}()\n    \n    if a < b\n        generate_integers(b,\
    \ a)\n    else\n        generate_integers(a, b)\n    end\n    \n    for n in a:(b-1)\n\
    \        push!(evens, n)\n    end\n    \n    return evens\nend\n</cell>\n<code\
    \ language=julia-1.5>\ngenerate_integers(2, 8)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(8, 2)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(10,\
    \ 14)\n</cell>\n<text>\nProblem 3\nWrite a function called generate_primes(n)\
    \ that takes an integer n and returns a vector containing all the prime numbers\
    \ less than or equal to n.\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbsd1tc95.jl:26\nin expression starting at\
    \ /tmp/tmpbsd1tc95.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    generate_integers(a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if b < a \n        generate_integers(b, a)\n    else\n        Vector{Int64}(undef,\
    \ a)\n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that generates\
    \ all the integers between 1 and a given number $n$, inclusive.\nusing Test\n\n\
    @testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2, 10) ==\
    \ [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj2tyk2ag.jl:17\nin expression starting at\
    \ /tmp/tmpj2tyk2ag.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    generate_integers(a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    \n    evens = Vector{Int64}()\n    \n    if a < b\n        generate_integers(b,\
    \ a)\n    else\n        generate_integers(a, b)\n    end\n    \n    for n in a:(b-1)\n\
    \        if n % 2 == 0\n            evens.push(n)\n        end\n    end\n    \n\
    \    return evens\nend\n</cell>\n<code language=julia-1.5>\ngenerate_integers(2,\
    \ 8)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(8, 2)\n</cell>\n<code\
    \ language=julia-1.5>\ngenerate_integers(10, 14)\n</cell>\n<text>\nProblem 7\n\
    Write a function that generates all the prime numbers up to a given number.\n\
    using Test\n\n@testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2,\
    \ 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7wy3g_2c.jl:28\nin expression starting at\
    \ /tmp/tmp7wy3g_2c.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b \n        generate_integers(b, a)\n    else\n        Vector{Int64}(undef,\
    \ (b - a) / 2 + 1)\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes in two positive integers a and b, and returns the sum of all even\
    \ digits in a and b. For example, generate_integers(2, 8) => [2, 4, 6, 8], and\
    \ generate_integers(8, 2) => [2, 4, 6, 8].\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc9ewm9qb.jl:17\nin expression starting at\
    \ /tmp/tmpc9ewm9qb.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if b < a \n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < b\n        generate_integers(b, a)\n    else\n        Vector{Int64}((a\
    \ % b) + 1)\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes in two positive integers a and b, and returns the number of digits in\
    \ each of their decimal representations.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpoap_w65k.jl:17\nin expression starting at\
    \ /tmp/tmpoap_w65k.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if b < a \n        error(\"generate_integers: b < a\")\n    end\n    \n\
    \    evens = Vector{Int64}()\n    \n    while a <= b\n        push!(evens, a)\n\
    \        a += 2\n    end\n    \n    return evens\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = generate_integers;\n\t@test(candidate(2, 10) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2)\
    \ == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmph9fnvk68.jl:29\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmph9fnvk68.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmph9fnvk68.jl:28\ntest set: Error\
    \ During Test at /tmp/tmph9fnvk68.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(10, 2) == [2, 4, 6, 8]\n  generate_integers: b < a\n  Stacktrace:\n\
    \   [1] error(s::String)\n     @ Base ./error.jl:33\n   [2] generate_integers(a::Int64,\
    \ b::Int64)\n     @ Main /tmp/tmph9fnvk68.jl:12\n   [3] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [4] macro expansion\n     @ /tmp/tmph9fnvk68.jl:30 [inlined]\n   [5] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph9fnvk68.jl:28\ntest set:\
    \ Error During Test at /tmp/tmph9fnvk68.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(132, 2) == [2, 4, 6, 8]\n  generate_integers: b < a\n  Stacktrace:\n\
    \   [1] error(s::String)\n     @ Base ./error.jl:33\n   [2] generate_integers(a::Int64,\
    \ b::Int64)\n     @ Main /tmp/tmph9fnvk68.jl:12\n   [3] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [4] macro expansion\n     @ /tmp/tmph9fnvk68.jl:31 [inlined]\n   [5] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmph9fnvk68.jl:28\ntest set:\
    \ Test Failed at /tmp/tmph9fnvk68.jl:32\n  Expression: candidate(17, 89) == Vector{Int64}([])\n\
    \   Evaluated: [17, 19, 21, 23, 25, 27, 29, 31, 33, 35  \u2026  71, 73, 75, 77,\
    \ 79, 81, 83, 85, 87, 89] == Int64[]\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/st"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmph9fnvk68.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the number of integers between a and b (inclusive) that are divisible by c.\n\
    using Test\n\n@testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2,\
    \ 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgv4_k4zy.jl:17\nin expression starting at\
    \ /tmp/tmpgv4_k4zy.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < 0 || b < 0\n        error(\"a or b must be positive\")\n    end\n\
    \    if a == 0 || b == 0\n        return []\n    end\n    \n    digits = Vector{Int64}()\n\
    \    \n    while a > 0 || b > 0\n        if a > 0 && b == 0\n            digits\
    \ = [digits..., a]\n            a -= 1\n        elseif b > 0 && a == 0\n     \
    \       digits = [digits..., b]\n            b -= 1\n        else\n          \
    \  digits = [digits..., a, b]\n            a -= 1\n            b -= 1\n      \
    \  end\n    end\n    \n    return digits\nend\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(2, 8)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(8,\
    \ 2)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(10, 14)\n</cell>\n\
    <text>\nProblem 3\nWrite a function that returns the number of positive integers\
    \ less than or equal to a given integer n.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmta2uwv8.jl:36\nin expression starting at\
    \ /tmp/tmpmta2uwv8.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < 0 || b < 0\n        error(\"generate_integers: a and b must be\
    \ non-negative\")\n    end\n    if a > b\n        error(\"generate_integers: a\
    \ and b must be less than or equal to each other\")\n    end\n    \n    evens\
    \ = Vector{Int64}()\n    \n    while a <= b\n        if a % 2 == 0\n         \
    \   evens.push(a)\n        end\n        a = a + 1\n    end\n    \n    return evens\n\
    end\n</cell>\n<code language=julia-1.5>\ngenerate_integers(2, 8)\n</cell>\n<code\
    \ language=julia-1.5>\ngenerate_integers(8, 2)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(10, 14)\n</cell>\n<text>\nProblem 3\nWrite a function called\
    \ generate_primes(a::Int64, b::Int64) that generates all the prime numbers between\
    \ a and b (inclusive).\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw5jst553.jl:29\nin expression starting at\
    \ /tmp/tmpw5jst553.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < b \n        generate_integers(b, a)\n    else\n        Vector{Int64}((a\
    \ % b) + 1)\n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes in two positive integers a and b and returns True if a is divisible by\
    \ b, and False otherwise. Test it on $a$ and $b$ that are both greater than 0.\n\
    using Test\n\n@testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2,\
    \ 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph6vna_ag.jl:17\nin expression starting at\
    \ /tmp/tmph6vna_ag.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    \n    even_integers = Vector{Int64}()\n    \n    if a < b\n        generate_integers(b,\
    \ a)\n    else\n        generate_integers(a, b)\n    end\n    \n    \n    for\
    \ n in 1:b\n        if n % 2 == 0\n            even_integers = even_integers +\
    \ (n-1)\n        end\n    end\n    \n    return even_integers\nend\n</cell>\n\
    <code language=julia-1.5>\ngenerate_integers(2, 8)\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(8, 2)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(10,\
    \ 14)\n</cell>\n<text>\nProblem 3\nWrite a function that returns the number of\
    \ integers between 1 and a given integer n that have no leading zeros.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2,\
    \ 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnaehnd8l.jl:29\nin expression starting at\
    \ /tmp/tmpnaehnd8l.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if b < a \n        error(\"generate_integers: b < a\")\n    end\n    \n\
    \    evens = Vector{Int64}()\n    \n    while a <= b\n        evens.append(a)\n\
    \        a += 2\n    end\n    \n    return evens\nend\n</cell>\n<code language=julia-1.4>\n\
    generate_integers(2, 8)\n</cell>\n<code language=julia-1.4>\ngenerate_integers(8,\
    \ 2)\n</cell>\n<code language=julia-1.4>\ngenerate_integers(10, 14)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that generates integers up to a specified\
    \ upper bound, inclusive.\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphmncwlak.jl:24\nin expression starting at\
    \ /tmp/tmphmncwlak.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    generate_integers(a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    \n    if a < b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    \n    if a < b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < b \n        generate_integers(b, a)\n    else\n        Vector{Int64}[a,\
    \ b]\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes an\
    \ integer $n$ and returns the number of digits in $n$. For example, generate_integers(10,\
    \ 14) returns 3.\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmf9gf74h.jl:17\nin expression starting at\
    \ /tmp/tmpmf9gf74h.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    \n    if b < a \n        return Vector{Int64}()\n    end\n    \n    evens\
    \ = generate_integers(b, a+1)\n    \n    evens = evens[2:end-1] + evens[2:end]\n\
    \    \n    evens = evens[2:end-1] + evens[2:end]\n    \n    evens = evens[2:end-1]\
    \ + evens[2:end]\n    \n    evens = evens[2:end-1] + evens[2:end]\n    \n    evens\
    \ = evens[2:end-1] + evens[2:end]\n    \n    evens = evens[2:end-1] + evens[2:end]\n\
    \    \n    evens = evens[2:end-1] + evens[2:end]\n    \n    evens = evens[2:end-1]\
    \ + evens[2:end]\n    \n    evens = evens[2:end-1] + evens[2:end]\n    \n    evens\
    \ = evens[2:end-1] + evens[2:end]\n    \n    evens = evens[2:end-1] + evens[2:end]\n\
    \    \n    evens = evens[2:end-1] + evens[2:end]\n    \n    evens = evens[2:end-1]\
    \ + evens[2:end]\n    \n    evens = evens[2:end-1] + evens[2:end]\n    \n    evens\
    \ = evens[2:end-1] + evens[2:end]\n    \n    evens = evens[2:end-1] + evens[2:end]\n\
    \    \n    evens = evens[2:end-1] + evens[2:end]\n    \n    evens = evens[2:end-1]\
    \ + evens[2:end]\n    \n    evens = evens[2:end-1] + evens[2:end]\n    \n    evens\
    \ = evens[2:end-1] + evens[2:end]\n    \n    evens = evens[2:end-1] + evens[2:end]\n\
    \    \n    evens = evens[2:end-1] + evens[2:end]\n    \n    evens = evens[2:end-1]\
    \ + evens[2:end]\n    \n    evens = evens[2:end-1] + evens[2:end]\n    \n    evens\
    \ = evens[2:end-1] + evens[2:end]\n    \n    evens = evens[2:end-1] + evens[2:end]\n\
    \    \n    evens = evens[2:end-1] + evens[2:end]\n    \n    evens = evens[2:end-1]\
    \ + evens[2:end]\n    \n    evens = evens[2:end-1] + evens[2:end]\n    \n    evens\
    \ = evens[2:end-1] + evens[2:end]\n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp3mpa4rl9.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3mpa4rl9.jl:1\n\
    in expression starting at /tmp/tmp3mpa4rl9.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the number of digits in an integer.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5pldukyx.jl:17\nin expression starting at\
    \ /tmp/tmp5pldukyx.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if b < a \n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < b \n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    \n    if a < b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if b < a \n        error(\"generate_integers: b < a\")\n    end\n    \n\
    \    evens = Vector{Int64}()\n    \n    while a <= b\n        push!(evens, a)\n\
    \        a = a + 2\n    end\n    \n    evens\nend\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(2, 8)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(8,\
    \ 2)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(10, 14)\n</cell>\n\
    <text>\nProblem 3\nWrite a function that generates all the integers between 1\
    \ and 100 (both included)\nthat are divisible by 3 and 5.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = generate_integers;\n\t@test(candidate(2, 10) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2)\
    \ == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_6rrw4re.jl:24\nin expression starting at\
    \ /tmp/tmp_6rrw4re.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    generate_integers(a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes in\
    \ two integers a and b, and returns the sum of all the even digits in a and b.\
    \ For example, generate_integers(2, 8) => [2, 4, 6, 8], and generate_integers(8,\
    \ 2) => [2, 4, 6, 8].\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_i6digul.jl:17\nin expression starting at\
    \ /tmp/tmp_i6digul.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    \n    evens = Vector{Int64}()\n    \n    while a <= b\n        evens.append(a)\n\
    \        a += 1\n    end\n    \n    return evens\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that generates all the integers between 1 and a given number\
    \ n that have no duplicates.\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2k1lzp0p.jl:21\nin expression starting at\
    \ /tmp/tmp2k1lzp0p.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < b\n        generate_integers(b, a)\n    else\n        Vector{Int64}[a,\
    \ b]\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp0m3iht7w.jl:22\n  Test threw exception\n\
    \  Expression: candidate(2, 10) == [2, 4, 6, 8]\n  MethodError: Cannot `convert`\
    \ an object of type Int64 to an object of type Vector{Int64}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Vector{Int64}}, x::Int64,\
    \ i1::Int64)\n     @ Base ./array.jl:903\n   [2] getindex\n     @ ./array.jl:413\
    \ [inlined]\n   [3] generate_integers(a::Int64, b::Int64)\n     @ Main /tmp/tmp0m3iht7w.jl:14\n\
    \   [4] generate_integers(a::Int64, b::Int64)\n     @ Main /tmp/tmp0m3iht7w.jl:12\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp0m3iht7w.jl:22 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp0m3iht7w.jl:21\ntest set:\
    \ Error During Test at /tmp/tmp0m3iht7w.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(10, 2) == [2, 4, 6, 8]\n  MethodError: Cannot `convert` an object\
    \ of type Int64 to an object of type Vector{Int64}\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Ve"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0m3iht7w.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < 0 || b < 0\n        error(\"a and b must be non-negative\")\n \
    \   end\n    \n    evens = Vector{Int64}()\n    \n    while a <= b\n        if\
    \ a % 2 == 0\n            evens.push(a)\n        end\n        a += 1\n    end\n\
    \    \n    return evens\nend\n</cell>\n<code language=julia-1.5>\ngenerate_integers(2,\
    \ 8)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(8, 2)\n</cell>\n<code\
    \ language=julia-1.5>\ngenerate_integers(10, 14)\n</cell>\n<text>\nExercise 2\n\
    Write a function called generate_integers_between_1_and_10 that generates integers\
    \ between 1 and 10. Your function should return an array of integers including\
    \ 1 and 10.\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\t\
    @test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6,\
    \ 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxjir36yk.jl:26\nin expression starting at\
    \ /tmp/tmpxjir36yk.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if b < a \n        error(\"generate_integers: b < a\")\n    end\n    \n\
    \    evens = Vector{Int64}()\n    \n    while a <= b\n        push!(evens, a)\n\
    \        a += 2\n    end\n    \n    evens\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function that generates integers up to a specified maximum, inclusive.\n\
    using Test\n\n@testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2,\
    \ 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9tsn00sh.jl:24\nin expression starting at\
    \ /tmp/tmp9tsn00sh.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    generate_integers(0, b)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < 0 || b < 0\n        error(\"generate_integers: a and b must be\
    \ non-negative\")\n    end\n    \n    if a == 0 || b == 0\n        return Vector{Int64}()\n\
    \    end\n    \n    evens = Vector{Int64}()\n    \n    if a < b\n        a, b\
    \ = b, a\n    end\n    \n    while a <= b\n        evens.append(a)\n        a\
    \ += 1\n    end\n    \n    return evens\nend\n</cell>\n<code language=julia-1.5>\n\
    generate_integers(2, 8)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(8,\
    \ 2)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(10, 14)\n</cell>\n\
    <text>\nProblem 4\nWrite a function that generates all the integers between 1\
    \ and a given number N, inclusive.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplr6a1a26.jl:32\nin expression starting at\
    \ /tmp/tmplr6a1a26.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    generate_integers(a, b)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < 0 || b < 0\n        error(\"a or b must be positive\")\n    end\n\
    \    \n    if a > b\n        a, b = b, a\n    end\n    \n    evens = Vector{Int64}()\n\
    \    \n    while a <= b\n        evens.append(a)\n        a = a + 2\n    end\n\
    \    \n    return evens\nend\n</cell>\n<code language=julia-1.5>\ngenerate_integers(2,\
    \ 8)\n</cell>\n<code language=julia-1.5>\ngenerate_integers(8, 2)\n</cell>\n<code\
    \ language=julia-1.5>\ngenerate_integers(10, 14)\n</cell>\n<text>\nExercise 2\n\
    Write a function that generates integers within a given range (inclusive).\nusing\
    \ Test\n\n@testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2,\
    \ 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1z6zdwtb.jl:28\nin expression starting at\
    \ /tmp/tmp1z6zdwtb.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    \n    if a < b\n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if b < a \n        error(\"b must be greater than a\")\n    end\n    \n\
    \    evens = Vector{Int64}()\n    \n    while a <= b\n        evens.append(a)\n\
    \        a += 1\n    end\n    \n    return evens\nend\n</cell>\n<text>\nProblem\
    \ 3\nWrite a function that generates the integers within a given range (inclusive).\n\
    using Test\n\n@testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2,\
    \ 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3wso65l1.jl:24\nin expression starting at\
    \ /tmp/tmp3wso65l1.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < b\n        generate_integers(b, a)\n    else\n        Vector{Int64}[a,\
    \ b]\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpevoudbkw.jl:22\n  Test threw exception\n\
    \  Expression: candidate(2, 10) == [2, 4, 6, 8]\n  MethodError: Cannot `convert`\
    \ an object of type Int64 to an object of type Vector{Int64}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Vector{Int64}}, x::Int64,\
    \ i1::Int64)\n     @ Base ./array.jl:903\n   [2] getindex\n     @ ./array.jl:413\
    \ [inlined]\n   [3] generate_integers(a::Int64, b::Int64)\n     @ Main /tmp/tmpevoudbkw.jl:14\n\
    \   [4] generate_integers(a::Int64, b::Int64)\n     @ Main /tmp/tmpevoudbkw.jl:12\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpevoudbkw.jl:22 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpevoudbkw.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpevoudbkw.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(10, 2) == [2, 4, 6, 8]\n  MethodError: Cannot `convert` an object\
    \ of type Int64 to an object of type Vector{Int64}\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Ve"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpevoudbkw.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a < b \n        generate_integers(b, a)\n    else\n        generate_integers(a,\
    \ b)\n    end\nend\n</cell>\n<code language=julia-1.3>\ngenerate_integers(2, 8)\n\
    </cell>\n<code language=julia-1.3>\ngenerate_integers(8, 2)\n</cell>\n<code language=julia-1.3>\n\
    generate_integers(10, 14)\n</cell>\n<text>\nExercise: Write a function that generates\
    \ all the integers between two given integers, inclusive.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = generate_integers;\n\t@test(candidate(2, 10) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2)\
    \ == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9k1xi9c8.jl:17\nin expression starting at\
    \ /tmp/tmp9k1xi9c8.jl:17\n"
  exit_code: 1
  status: SyntaxError
