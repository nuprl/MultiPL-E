name: HumanEval_97_multiply
language: julia
results:
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        0\n    else\n        (a * b).digits(2)\n    end\n\
    end\n</code>\n<|/ a dscore=1 |>\n<| a tags=julia,arrays |>\nHere's a solution\
    \ that uses only base 10 arithmetic:\n<code>\nusing Test\n\n@testset begin\n\n\
    candidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19,\
    \ 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15)\
    \ == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\
    \t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6vnsvjim.jl:17\nin expression starting at\
    \ /tmp/tmp6vnsvjim.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if a < 0 || b < 0 \n        error(\"Invalid input\")\n    elseif b ==\
    \ 0 \n        return a\n    elseif b == 1 \n        return a * b\n    else\n \
    \       mult_result = multiply(a / 10, b / 10)\n        return mult_result * 10\
    \ + a % 10 * b\n    end\nend\n</cell>\n<code language=julia-1.5>\nmultiply(148,\
    \ 412)\n</cell>\n<code language=julia-1.5>\nmultiply(19, 28)\n</cell>\n<code language=julia-1.5>\n\
    multiply(2020, 1851)\n</cell>\n<code language=julia-1.5>\nmultiply(14,-15)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a string and returns the number\
    \ of characters in it.\nExamples:\n    length(\"hello\") should return 5.\n  \
    \  length(\"hello \") should return 6.\n    length(\"hello  \") should return\
    \ 5.\n    length(\"hello  world\") should return 10.\n    length(\"hello  world\
    \  \") should return 10.\n    length(\"hello  world  hello  world  hello  world\
    \  hello  world  hello  world  hello  world  hello  world  hello  world  hello\
    \  world  hello  world  hello  world  hello  world  hello  world  hello  world\
    \  hello  world  hello  world  hello  world  hello  world  hello  world  hello\
    \  world  hello  world  hello  world  hello  world  hello  world  hello  world\
    \  hello  world  hello  world  hello  world  hello  world  hello  world  hello\
    \  world  hello  world  hello  world  hello  world  hello  world  hello  world\
    \  hello  world  hello  world  hello  world  hello  world  hello  world  hello\
    \  world  hello  world  hello  world  hello  world  hello  world  hello  world\
    \  hello  world  hello  world  hello  world  hello  world  hello  world  hello\
    \  world  hello  world  hello  world  hello  world  hello  world  hello  world\
    \  hello  world  hello  world  hello  world  hello  world  hello  world  hello\
    \  world  hello  world  hello  world  hello  world  hello  world  hello  world\
    \  hello  world  hello  world  hello  world  hello  world  hello  world  hello\
    \  world  hello  world  hello  world  hello  \nusing Test\n\n@testset begin\n\n\
    candidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19,\
    \ 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15)\
    \ == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\
    \t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc3_3zni5.jl:22\nin expression starting at\
    \ /tmp/tmpc3_3zni5.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0\n        return 0\n    \n    digits = floor(log10(abs(b)))\n\
    \    \n    if digits == 0\n        return a * b\n    \n    digits = digits - 1\n\
    \    \n    product = a * b\n    \n    digits = digits - 1\n    \n    while digits\
    \ > 0\n        digits = digits - 1\n        product = product / 10\n    end\n\
    \    \n    return product\nend\n</cell>\n<code language=julia-1.5>\nmultiply(148,\
    \ 412)\n</cell>\n<code language=julia-1.5>\nmultiply(19, 28)\n</cell>\n<code language=julia-1.5>\n\
    multiply(2020, 1851)\n</cell>\n<code language=julia-1.5>\nmultiply(14,-15)\n</cell>\n\
    <text>\nExercise: Write a function that takes two integers and returns the sum\
    \ of the unit digits of their product.\nExamples:\n    sum(148, 412) should return\
    \ 16.\n    sum(19, 28) should return 72.\n    sum(2020, 1851) should return 0.\n\
    \    sum(14,-15) should return 20.\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19,\
    \ 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15)\
    \ == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\
    \t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpivtw1ufn.jl:32\nin expression starting at\
    \ /tmp/tmpivtw1ufn.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0\n        return a\n    else\n        return a*b\n    end\nend\n\
    </cell>\n<code language=julia-1.3>\n\"\"\"Complete the function that takes two\
    \ integers and returns \n    the product of their unit digits.\n    Assume the\
    \ input is always valid.\n    Examples:\n    multiply(148, 412) should return\
    \ 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should\
    \ return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t\
    @test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14,\
    \ -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) ==\
    \ 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo3uc3g8d.jl:17\nin expression starting at\
    \ /tmp/tmpo3uc3g8d.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if a < 0 || b < 0\n        error(\"Invalid input\")\n    elseif b == 0\n\
    \        return a\n    else\n        return a*b\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t\
    @test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14,\
    \ -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) ==\
    \ 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpz4l080gt.jl:24\n  Expression: candidate(148,\
    \ 412) == 16\n   Evaluated: 60976 == 16\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpz4l080gt.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz4l080gt.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpz4l080gt.jl:25\n  Expression: candidate(19, 28) == 72\n  \
    \ Evaluated: 532 == 72\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpz4l080gt.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz4l080gt.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpz4l080gt.jl:26\n  Expression: candidate(2020, 1851) == 0\n\
    \   Evaluated: 3739020 == 0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpz4l080gt.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz4l080gt.jl:23\ntest set: Error\
    \ During Test at /tmp/tmpz4l080gt.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(14, -15) == 20\n  Invalid input\n  Stacktrace:\n   [1] error(s::String)\n\
    \     @ Base ./error.jl:33\n   [2] multiply(a::Int64, b::Int64)\n     @ Main /tmp/tmpz4l080gt.jl:12\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpz4l080gt.jl:27 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpz4l080gt.jl:23\ntest set:\
    \ Test Failed at /tmp/tmpz4l080gt.jl:28\n  Expression: candidate(76, 67) ="
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 5 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpz4l080gt.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if a < 0 || b < 0 \n        error(\"Invalid input\")\n    elseif b ==\
    \ 0 \n        return a\n    elseif b == 1 \n        return a * b\n    else\n \
    \       return a * b * 10 + digits(a) * digits(b)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"Complete the function that takes two integers and\
    \ returns \n    the product of their unit digits.\n    Assume the input is always\
    \ valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19,\
    \ 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\
    \t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphbt_m0g5.jl:21\nin expression starting at\
    \ /tmp/tmphbt_m0g5.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        return 0 \n    else \n        return (a * b) % (10^9\
    \ + 7)\nend\n</cell>\n<code language=julia-1.5>\n@assert multiply(148, 412) ==\
    \ 16\n@assert multiply(19, 28) == 72\n@assert multiply(2020, 1851) == 0\n@assert\
    \ multiply(14,-15) == 20\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ two integers and returns the sum of the unit digits of their product (modulo\
    \ 10^9 + 7).\nExamples:\n    sumUnitDigits(148, 412) should return 16.\n    sumUnitDigits(19,\
    \ 28) should return 72.\n    sumUnitDigits(2020, 1851) should return 0.\n    sumUnitDigits(14,-15)\
    \ should return 20.\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\
    \t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv67_ccf2.jl:16\nin expression starting at\
    \ /tmp/tmpv67_ccf2.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0\n        0\n    else\n        (a * b) % 10\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nmultiply(148, 412)\n</cell>\n<code language=julia-1.5>\n\
    multiply(19, 28)\n</cell>\n<code language=julia-1.5>\nmultiply(2020, 1851)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(14,-15)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes two integers and returns the sum of the unit digits of\
    \ their product \n    (i.e., if the product is 148, it should return 16).\n  \
    \  Use this function to find the sum of unit digits of any two integers whose\
    \ product is less than 1000.\n    For example, multiply(148, 412) should return\
    \ 16.\n    Use this function to find the sum of unit digits of any two integers\
    \ whose product is less than 1000.\n    For example, multiply(19, 28) should return\
    \ 72.\n    Use this function to find the sum of unit digits of any two integers\
    \ whose product is less than 1000.\n    For example, multiply(2020, 1851) should\
    \ return 0.\n    Use this function to find the sum of unit digits of any two integers\
    \ whose product is less than 1000.\n    For example, multiply(14,-15) should return\
    \ 20.\n    Use this function to find the sum of unit digits of any two integers\
    \ whose product is less than 1000.\n    For example, multiply(14,-15) should return\
    \ 20.\n    Use this function to find the sum of unit digits of any two integers\
    \ whose product is less than 1000.\n    For example, multiply(14,-15) should return\
    \ 20.\n    Use this function to find the sum of unit digits of any two integers\
    \ whose product is less than 1000.\n    For example, multiply(14,-15) should return\
    \ 20.\n    Use this function to find the sum of unit digits of any two integers\
    \ whose product is less than 1000.\n    For example, multiply(14,-15) should return\
    \ 20.\n    Use this function to find the sum of unit digits of any two integers\
    \ whose product is less than 1000.\n    For example, multiply(14,-15) should return\
    \ 20.\n    Use this function to find the sum of unit digits of any two integers\
    \ whose product is less than 1000.\n    For example, multiply(14,-15) should return\
    \ 20.\n    Use this function to find the sum of unit digits of any two integers\
    \ whose product is less than 1000.\n    For example, multiply(14,-15) should return\
    \ 20.\n    Use this function to find the sum of unit digits of any two integers\
    \ whose product is less than 1000.\n    For example, multiply(14,-15) should return\
    \ 20.\n    Use this function to find the sum of unit digits of any two integers\
    \ whose product is less than 1000.\n    For example, multiply(14,-15) should return\
    \ 20.\n    Use this \nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t\
    @test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6361_8ey.jl:17\nin expression starting at\
    \ /tmp/tmp6361_8ey.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        0\n    else\n        (a * b) % 10\n    end\nend\n\
    </code>\n<|/ a tags=julia,function |>\n<| a tags=julia,function |>\n<code>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm1guakne.jl:17\nin expression starting at\
    \ /tmp/tmpm1guakne.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0\n        return 0\n    \n    digits = zeros(Int64, 10)\n   \
    \ \n    digits[1] = a%10\n    digits[2] = (a/10)%10\n    digits[3] = (a/100)%10\n\
    \    digits[4] = (a/1000)%10\n    digits[5] = (a/10000)%10\n    digits[6] = (a/100000)%10\n\
    \    digits[7] = (a/1000000)%10\n    digits[8] = (a/10000000)%10\n    digits[9]\
    \ = (a/100000000)%10\n    \n    product = digits[1]*digits[2]*digits[3]*digits[4]*digits[5]*digits[6]*digits[7]*digits[8]*digits[9]\n\
    \    \n    return product\nend\n</cell>\n<code language=julia-1.5>\nmultiply(148,\
    \ 412)\n</cell>\n<code language=julia-1.5>\nmultiply(19, 28)\n</cell>\n<code language=julia-1.5>\n\
    multiply(2020, 1851)\n</cell>\n<code language=julia-1.5>\nmultiply(14,-15)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes two integers and returns the sum\
    \ of the unit digits. \nAssume the input is always valid.\nExamples:\nsum(148,\
    \ 412) should return 16.\nsum(19, 28) should return 72.\nsum(2020, 1851) should\
    \ return 0.\nsum(14,-15) should return 20.\nHint: You can use the function sum.\n\
    using Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9h8fvo49.jl:30\nin expression starting at\
    \ /tmp/tmp9h8fvo49.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        0\n    else\n        (a * 10 + b) mod 10\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n# Test the function \nmultiply(148, 412)\n\
    </cell>\n<code language=julia-1.5>\n# Test the function \nmultiply(19, 28)\n</cell>\n\
    <code language=julia-1.5>\n# Test the function \nmultiply(2020, 1851)\n</cell>\n\
    <code language=julia-1.5>\n# Test the function \nmultiply(14,-15)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes two integers and returns the sum of the\
    \ \n    unit digits of their product (14 and 412 should return 16).\n    Use a\
    \ while loop to keep looping until the product is 0.\n    Use a for loop to loop\
    \ over the product until it is 0.\n    Use a while loop to keep looping until\
    \ the product is 0.\n    Use a for loop to loop over the product until it is 0.\n\
    \    Use a while loop to keep looping until the product is 0.\n    Use a for loop\
    \ to loop over the product until it is 0.\n    Use a while loop to keep looping\
    \ until the product is 0.\n    Use a for loop to loop over the product until it\
    \ is 0.\n    Use a while loop to keep looping until the product is 0.\n    Use\
    \ a for loop to loop over the product until it is 0.\n    Use a while loop to\
    \ keep looping until the product is 0.\n    Use a for loop to loop over the product\
    \ until it is 0.\n    Use a while loop to keep looping until the product is 0.\n\
    \    Use a for loop to loop over the product until it is 0.\n    Use a while loop\
    \ to keep looping until the product is 0.\n    Use a for loop to loop over the\
    \ product until it is 0.\n    Use a while loop to keep looping until the product\
    \ is 0.\n    Use a for loop to loop over the product until it is 0.\n    Use a\
    \ while loop to keep looping until the product is 0.\n    Use a for loop to loop\
    \ over the product until it is 0.\n    Use a while loop to keep looping until\
    \ the product is 0.\n    Use a for loop to loop over the product until it is 0.\n\
    \    Use a while loop to keep looping until the product is 0.\n    Use a for loop\
    \ to loop over the product until it is 0.\n    Use a while loop to keep looping\
    \ until the product is 0.\n    Use a for loop to loop over the product until it\
    \ is 0.\n    Use a while loop to keep looping until the product is 0.\n    Use\
    \ a for loop\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmpd4zdn_w7.jl:11 expected \"\
    end\", got \"mod\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpd4zdn_w7.jl:14\n\
    in expression starting at /tmp/tmpd4zdn_w7.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        return 0 \n    else \n        return (a * 10 * b)\
    \ \nend\n</cell>\n<code language=julia-1.5>\nmultiply(148, 412)\n</cell>\n<code\
    \ language=julia-1.5>\nmultiply(19, 28)\n</cell>\n<code language=julia-1.5>\n\
    multiply(2020, 1851)\n</cell>\n<code language=julia-1.5>\nmultiply(14,-15)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes an array of integers and returns\
    \ the sum of the squares of the unit digits.\nusing Test\n\n@testset begin\n\n\
    candidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19,\
    \ 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15)\
    \ == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\
    \t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3b4hmeoi.jl:16\nin expression starting at\
    \ /tmp/tmp3b4hmeoi.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if a < 0 || b < 0 \n        error(\"Invalid input\") \n    else if a ==\
    \ 0 || b == 0 \n        return 0 \n    else \n        return (a * b) % 10 \nend\n\
    </cell>\n<code language=julia-1.0>\n# Test the function \nmultiply(148, 412)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes two integers and returns\
    \ the sum of the \n    unit digits of their product (without using multiplication).\n\
    \    Examples:\n    sum(148, 412) should return 16.\n    sum(19, 28) should return\
    \ 72.\n    sum(2020, 1851) should return 0.\n    sum(14,-15) should return 20.\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_5ud_gcz.jl:13\nin expression starting at\
    \ /tmp/tmp_5ud_gcz.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        return 0 \n    else \n        return (a * b) mod 10\n\
    end\n</cell>\n<code language=julia-1.5>\nmultiply(148, 412)\n</cell>\n<code language=julia-1.5>\n\
    multiply(19, 28)\n</cell>\n<code language=julia-1.5>\nmultiply(2020, 1851)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(14,-15)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes two integers and returns the sum of the unit digits of\
    \ their product \n    (i.e. the sum of the digits of their product of their unit\
    \ digits).\n    For example, multiply(148, 412) should return 16.\n    multiply(19,\
    \ 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    multiply(-14, -15) should return -20.\n    multiply(-14,\
    \ -15) should return -20.\n    multiply(-14, -15) should return -20.\n    multiply(-14,\
    \ -15) should return -20.\n    multiply(-14, -15) should return -20.\n    multiply(-14,\
    \ -15) should return -20.\n    multiply(-14, -15) should return -20.\n    multiply(-14,\
    \ -15) should return -20.\n    multiply(-14, -15) should return -20.\n    multiply(-14,\
    \ -15) should return -20.\n    multiply(-14, -15) should return -20.\n    multiply(-14,\
    \ -15) should return -20.\n    multiply(-14, -15) should return -20.\n    multiply(-14,\
    \ -15) should return -20.\n    multiply(-14, -15) should return -20.\n    multiply(-14,\
    \ -15) should return -20.\n    multiply(-14, -15) should return -20.\n    multiply(-14,\
    \ -15) should return -20.\n    multiply(-14, -15) should return -20.\n    multiply(-14,\
    \ -15) should return -20.\n    multiply(-14, -15) should return -20.\n    multiply(-14,\
    \ -15) should return -20.\n    multiply(-14, -15) should return -20.\n    multiply(-14,\
    \ -15) should return -20.\n    multiply(-14, -15) should return -20.\n    multiply(-14,\
    \ -15) should return -20.\n    multiply(-14, -15) should return -20.\n    multiply(-14,\
    \ -15) should return -20.\n    multiply(-14, -15) should return -20.\n    multiply(-14,\
    \ -15) should return -20.\n    multiply(-14, -15) should return -20.\n    multiply(-14,\
    \ -15) should return -\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\
    \t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmp3l85w7qx.jl:11 expected \"\
    end\", got \"mod\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3l85w7qx.jl:14\n\
    in expression starting at /tmp/tmp3l85w7qx.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if a < 0 || b < 0 \n        error(\"Invalid input\")\n    elseif b ==\
    \ 0 \n        return a\n    elseif b == 1 \n        return a\n    elseif b > a\
    \ \n        return multiply(b, a - b) \n    else\n        return multiply(b, a\
    \ - b) * 10 + a \n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"Complete\
    \ the function that takes two integers and returns \n    the product of their\
    \ unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148,\
    \ 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn906wimh.jl:23\nin expression starting at\
    \ /tmp/tmpn906wimh.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        0\n    else\n        (a * b % 10) * 10\n    end\n\
    end\n</cell>\n<code language=julia-1.0>\n\"\"\"Complete the function that takes\
    \ two integers and returns \n    the product of their unit digits.\n    Assume\
    \ the input is always valid.\n    Examples:\n    multiply(148, 412) should return\
    \ 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should\
    \ return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t\
    @test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14,\
    \ -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) ==\
    \ 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9su3mync.jl:17\nin expression starting at\
    \ /tmp/tmp9su3mync.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0\n        0\n    else\n        (a * 10 + b) mod 10\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nmultiply(148, 412)\n</cell>\n<code language=julia-1.5>\n\
    multiply(19, 28)\n</cell>\n<code language=julia-1.5>\nmultiply(2020, 1851)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(14,-15)\n</cell>\n<text>\nExercise: Write\
    \ a function that takes in two integers and returns the sum of the unit digits\
    \ of their product (modulo 10). For example, multiply(148, 412) should return\
    \ 16.\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmpjvhayg8t.jl:11 expected \"\
    end\", got \"mod\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjvhayg8t.jl:14\n\
    in expression starting at /tmp/tmpjvhayg8t.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        0\n    elseif b < 0 \n        multiply(a, -b)\n  \
    \  elseif b > 0 \n        multiply(a, b)\n    elseif b == 0 \n        a\n    elseif\
    \ b == 1 \n        a\n    elseif b == 2 \n        a * 2\n    elseif b == 3 \n\
    \        a * 3\n    elseif b == 4 \n        a * 4\n    elseif b == 5 \n      \
    \  a * 5\n    elseif b == 6 \n        a * 6\n    elseif b == 7 \n        a * 7\n\
    \    elseif b == 8 \n        a * 8\n    elseif b == 9 \n        a * 9\n    elseif\
    \ b == 10 \n        a * 10\n    elseif b == 11 \n        a * 11\n    elseif b\
    \ == 12 \n        a * 12\n    elseif b == 13 \n        a * 13\n    elseif b ==\
    \ 14 \n        a * 14\n    elseif b == 15 \n        a * 15\n    elseif b == 16\
    \ \n        a * 16\n    elseif b == 17 \n        a * 17\n    elseif b == 18 \n\
    \        a * 18\n    elseif b == 19 \n        a * 19\n    elseif b == 20 \n  \
    \      a * 20\n    elseif b == 21 \n        a * 21\n    elseif b == 22 \n    \
    \    a * 22\n    elseif b == 23 \n        a * 23\n    elseif b == 24 \n      \
    \  a * 24\n    elseif b == 25 \n        a * 25\n    elseif b == 26 \n        a\
    \ * 26\n    elseif b == 27 \n        a * 27\n    elseif b == 28 \n        a *\
    \ 28\n    elseif b == 29 \n        a * 29\n    elseif b == 30 \n        a * 30\n\
    \    elseif b == 31 \n        a * 31\n    elseif b == 32 \n        a * 32\n  \
    \  elseif b == 33 \n        a * 33\n    elseif b == 34 \n        a * 34\n    elseif\
    \ b == 35 \n        a * 35\n    elseif b == 36 \n        a * 36\n    elseif b\
    \ == 37 \n        a * 37\n    elseif b == 38 \n        a * 38\n    elseif b ==\
    \ 39 \n        a * 39\n    elseif b == 40 \n        a * 40\n    elseif b == 41\
    \ \n        a * 41\n    elseif b == 42 \n        a * 42\n    elseif b == 43 \n\
    \        a * 43\n    elseif b == 44 \n        a * 44\n    elseif b == 45 \n  \
    \      a * 45\n    elseif b == 46 \n        a * 46\n    elseif b == 47 \n    \
    \    a * 47\n    elseif b == 48 \n        a * 48\n\nusing Test\n\n@testset begin\n\
    \ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19,\
    \ 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15)\
    \ == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\
    \t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0nnz_p4e.jl:1\nin expression starting at /tmp/tmp0nnz_p4e.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        0\n    elseif b < 0 \n        multiply(-a, -b)\n \
    \   elseif b > 0 \n        multiply(a, b - digits(a))\n    elseif b == 0 \n  \
    \      a\n    elseif b == 1 \n        digits(a) * digits(a)\n    elseif b == 2\
    \ \n        digits(a) * digits(b) + digits(a) * digits(b - 1)\n    elseif b ==\
    \ 3 \n        digits(a) * digits(b) + digits(a) * digits(b - 1) + digits(a) *\
    \ digits(b - 2)\n    elseif b == 4 \n        digits(a) * digits(b) + digits(a)\
    \ * digits(b - 1) + digits(a) * digits(b - 2) + digits(a) * digits(b - 3)\n  \
    \  elseif b == 5 \n        digits(a) * digits(b) + digits(a) * digits(b - 1) +\
    \ digits(a) * digits(b - 2) + digits(a) * digits(b - 3) + digits(a) * digits(b\
    \ - 4)\n    elseif b == 6 \n        digits(a) * digits(b) + digits(a) * digits(b\
    \ - 1) + digits(a) * digits(b - 2) + digits(a) * digits(b - 3) + digits(a) * digits(b\
    \ - 4) + digits(a) * digits(b - 5)\n    elseif b == 7 \n        digits(a) * digits(b)\
    \ + digits(a) * digits(b - 1) + digits(a) * digits(b - 2) + digits(a) * digits(b\
    \ - 3) + digits(a) * digits(b - 4) + digits(a) * digits(b - 5) + digits(a) * digits(b\
    \ - 6)\n    elseif b == 8 \n        digits(a) * digits(b) + digits(a) * digits(b\
    \ - 1) + digits(a) * digits(b - 2) + digits(a) * digits(b - 3) + digits(a) * digits(b\
    \ - 4) + digits(a) * digits(b - 5) + digits(a) * digits(b - 6) + digits(a) * digits(b\
    \ - 7)\n    elseif b == 9\n        digits(a) * digits(b) + digits(a) * digits(b\
    \ - 1) + digits(a) * digits(b - 2) + digits(a) * digits(b - 3) + digits(a) * digits(b\
    \ - 4) + digits(a) * digits(b - 5) + digits(a) * digits(b - 6) + digits(a) * digits(b\
    \ - 7) + digits(a) * digits(b - 8)\n    else\nusing Test\n\n@testset begin\n\n\
    candidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19,\
    \ 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15)\
    \ == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\
    \t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmps3d7_03m.jl:35\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmps3d7_03m.jl:1\n\
    in expression starting at /tmp/tmps3d7_03m.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        return 0 \n    else \n        return (a * b) mod 10\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert multiply(148, 412) == 16\n@assert\
    \ multiply(19, 28) == 72\n@assert multiply(2020, 1851) == 0 \n@assert multiply(14,-15)\
    \ == 20\n</cell>\n<text>\nExercise 3\nWrite a function that takes a positive integer\
    \ $n$ and returns the number of digits in $n$. \nExamples:\n    digits(148) should\
    \ return 3.\n    digits(19) should return 2.\n    digits(2020) should return 4.\n\
    \    digits(-14) should return 0.\n    digits(0) should return 0.\n    digits(-10)\
    \ should return 0.\n    digits(-10) should return 0.\n    digits(-10) should return\
    \ 0.\n    digits(-10) should return 0.\n    digits(-10) should return 0.\n   \
    \ digits(-10) should return 0.\n    digits(-10) should return 0.\n    digits(-10)\
    \ should return 0.\n    digits(-10) should return 0.\n    digits(-10) should return\
    \ 0.\n    digits(-10) should return 0.\n    digits(-10) should return 0.\n   \
    \ digits(-10) should return 0.\n    digits(-10) should return 0.\n    digits(-10)\
    \ should return 0.\n    digits(-10) should return 0.\n    digits(-10) should return\
    \ 0.\n    digits(-10) should return 0.\n    digits(-10) should return 0.\n   \
    \ digits(-10) should return 0.\n    digits(-10) should return 0.\n    digits(-10)\
    \ should return 0.\n    digits(-10) should return 0.\n    digits(-10) should return\
    \ 0.\n    digits(-10) should return 0.\n    digits(-10) should return 0.\n   \
    \ digits(-10) should return 0.\n    digits(-10) should return 0.\n    digits(-10)\
    \ should return 0.\n    digits(-10) should return 0.\n    digits(-10) should return\
    \ 0.\n    digits(-10) should return 0.\n    digits(-10) should return 0.\n   \
    \ digits(-10) should return 0.\n    digits(-10) should return 0.\n    digits(-10)\
    \ should return 0.\n    digits(-10) should return 0.\n    digits(-10) should return\
    \ 0.\n    digits(-10) should return 0.\n    digits(-10) should return 0.\n   \
    \ digits(-10) should return 0.\n    digits(-10\nusing Test\n\n@testset begin\n\
    \ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19,\
    \ 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15)\
    \ == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\
    \t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmphy9zsfgn.jl:11 expected \"\
    end\", got \"mod\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphy9zsfgn.jl:14\n\
    in expression starting at /tmp/tmphy9zsfgn.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        0\n    else\n        (a * 10 + b) mod 10\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nmultiply(148, 412)\n</cell>\n<code language=julia-1.5>\n\
    multiply(19, 28)\n</cell>\n<code language=julia-1.5>\nmultiply(2020, 1851)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(14,-15)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the sum of the digits of its input. \nExamples:\nsum(12345)\
    \ should return 10.\nsum(12) should return 3.\nsum(0) should return 0.\nsum(-1)\
    \ should return -1.\nsum(987) should return 9.\nsum(9) should return 0.\nsum(1000)\
    \ should return 10.\nsum(100) should return 0.\nsum(999) should return 9.\nsum(999)\
    \ should return 9.\nsum(9999) should return 9.\nsum(9999) should return 9.\nsum(9999)\
    \ should return 9.\nsum(9999) should return 9.\nsum(9999) should return 9.\nsum(9999)\
    \ should return 9.\nsum(9999) should return 9.\nsum(9999) should return 9.\nsum(9999)\
    \ should return 9.\nsum(9999) should return 9.\nsum(9999) should return 9.\nsum(9999)\
    \ should return 9.\nsum(9999) should return 9.\nsum(9999) should return 9.\nsum(9999)\
    \ should return 9.\nsum(9999) should return 9.\nsum(9999) should return 9.\nsum(9999)\
    \ should return 9.\nsum(9999) should return 9.\nsum(9999) should return 9.\nsum(9999)\
    \ should return 9.\nsum(9999) should return 9.\nsum(9999) should return 9.\nsum(9999)\
    \ should return 9.\nsum(9999) should return 9.\nsum(9999) should return 9.\nsum(9999)\
    \ should return 9.\nsum(9999) should return 9.\nsum(9999) should return 9.\nsum(9999)\
    \ should return 9.\nsum(9999) should return 9.\nsum(9999) should return 9.\nsum(9999)\
    \ should return 9.\nsum(9999) should return 9.\nsum(9999) should return 9.\nsum(9999)\
    \ should return 9.\nsum(9999) should return 9.\nsum(9999) should return 9.\nsum(9999)\
    \ should return 9.\nsum(9999) should return 9.\nsum(9999) should return 9.\nsum(9999)\
    \ should return 9.\nsum(9999) should return 9.\nsum(9999) should return 9.\nsum(9999)\
    \ should return 9.\nsum(9999) should return 9.\nsum(9999) should return 9.\nsum(9999)\
    \ should return \nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmprrxqhynh.jl:11 expected \"\
    end\", got \"mod\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmprrxqhynh.jl:14\n\
    in expression starting at /tmp/tmprrxqhynh.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if a < 0 || b < 0\n        error(\"Invalid input\")\n    elseif b == 0\n\
    \        return a\n    else\n        return a*b\n    end\nend\n\"\"\"\n    \n\
    \    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n\
    \    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n\
    \    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n\
    \    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n\
    \    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n\
    \    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n\
    \    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n\
    \    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n\
    \    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n\
    \    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n\
    \    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n\
    \    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n\
    \    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n\
    \    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n\
    \    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n\
    \    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n\
    \    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n\
    \    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n\
    \    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n\
    \    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n\nusing Test\n\
    \n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\
    \t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14,\
    \ -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) ==\
    \ 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzfwvr0ns.jl:258\nin expression starting at\
    \ /tmp/tmpzfwvr0ns.jl:258\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        return 0 \n    else \n        return (a * b) % (10^9\
    \ + 7)\nend\n</cell>\n<code language=julia-1.5>\n@assert multiply(148, 412) ==\
    \ 16\n@assert multiply(19, 28) == 72\n@assert multiply(2020, 1851) == 0 \n@assert\
    \ multiply(14,-15) == 20\n</cell>\n<text>\nProblem 3\nWrite a function that returns\
    \ the sum of the digits of its input. \nExamples:\nsum(1234) should return 12.\n\
    sum(12) should return 3.\nsum(0) should return 0.\nsum(9) should return 1.\nsum(100)\
    \ should return 10.\nsum(987) should return 91.\nsum(9876) should return 92.\n\
    sum(987654321) should return 9876.\nsum(9876543210) should return 9876.\nsum(98765432100)\
    \ should return 9876.\nsum(987654321098) should return 9876.\nsum(9876543210981)\
    \ should return 9876.\nsum(98765432109812) should return 9876.\nsum(987654321098123)\
    \ should return 9876.\nsum(9876543210981234) should return 9876.\nsum(98765432109812345)\
    \ should return 9876.\nsum(987654321098123456) should return 9876.\nsum(9876543210981234567)\
    \ should return 9876.\nsum(98765432109812345678) should return 9876.\nsum(987654321098123456789)\
    \ should return 9876.\nsum(9876543210981234567890) should return 9876.\nsum(98765432109812345678901)\
    \ should return 9876.\nsum(987654321098123456789012) should return 9876.\nsum(9876543210981234567890123)\
    \ should return 9876.\nsum(98765432109812345678901234) should return 9876.\nsum(987654321098123456789012345)\
    \ should return 9876.\nsum(9876543210981234567890123456) should return 9876.\n\
    sum(98765432109812345678901234567) should return 9876.\nsum(987654321098123456789012345678)\
    \ should return 9876.\nsum(9876543210981234567890123456789) should return 9876.\n\
    sum(98765432109812345678901234567890) should return 9876.\nsum(987654321098123456789012345678901)\
    \ should return 9876.\n\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\
    \t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwpkt8trj.jl:16\nin expression starting at\
    \ /tmp/tmpwpkt8trj.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if a < 0 || b < 0 \n        error(\"Invalid input\")\n    else if a ==\
    \ 0 || b == 0 \n        return 0 \n    else \n        return (a * b) mod 10\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"Complete the function that takes\
    \ two integers and returns \n    the product of their unit digits.\n    Assume\
    \ the input is always valid.\n    Examples:\n    multiply(148, 412) should return\
    \ 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should\
    \ return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t\
    @test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14,\
    \ -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) ==\
    \ 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi552hv_b.jl:13\nin expression starting at\
    \ /tmp/tmpi552hv_b.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0\n        0\n    else\n        (a * 10 + b) mod 10\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nmultiply(148, 412)\n</cell>\n<code language=julia-1.5>\n\
    multiply(19, 28)\n</cell>\n<code language=julia-1.5>\nmultiply(2020, 1851)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(14,-15)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes an integer and returns the sum of the unit digits of that\
    \ integer.\nExamples:\nsum(148) should return 8.\nsum(19) should return 9.\nsum(2020)\
    \ should return 0.\nsum(14) should return 14.\nsum(0) should return 0.\nsum(-1)\
    \ should return -1.\nsum(123456789) should return 123456789.\nsum(1234567890)\
    \ should return 1234567890.\nsum(12345678901) should return 12345678901.\nsum(123456789012)\
    \ should return 123456789012.\nsum(1234567890123) should return 1234567890123.\n\
    sum(12345678901234) should return 12345678901234.\nsum(123456789012345) should\
    \ return 123456789012345.\nsum(1234567890123456) should return 1234567890123456.\n\
    sum(12345678901234567) should return 12345678901234567.\nsum(123456789012345678)\
    \ should return 123456789012345678.\nsum(1234567890123456789) should return 1234567890123456789.\n\
    sum(12345678901234567890) should return 12345678901234567890.\nsum(123456789012345678901)\
    \ should return 123456789012345678901.\nsum(1234567890123456789012) should return\
    \ 1234567890123456789012.\nsum(12345678901234567890123) should return 12345678901234567890123.\n\
    sum(123456789012345678901234) should return 123456789012345678901234.\nsum(1234567890123456789012345)\
    \ should return 1234567890123456789012345.\nsum(12345678901234567890123456) should\
    \ return 12345678901234567890123456.\nsum(123456789012345678901234567) should\
    \ return 123456789012345678901234567.\nsum(1234567890123456789012345678) should\
    \ return 1234567890123456789012345678.\nsum(12345678901234567890123456789) should\
    \ return 12345678901234567890123456789.\nsum(123456789012345678901234567890) should\
    \ return 123456789012345678901234567890.\nsum(1234567890123456789012345678901)\
    \ should return 1234567890123456789012345678901.\nsum(12345678901234567890123456789012)\
    \ should return 12345678901234567890123456789012.\nsum(123456789012345678901234567890123)\
    \ should return 123456789012345678901234567890123.\nsum(1234567890123456789012345678901234)\
    \ should return 1234567890123456789012345678901234.\nsum(12345678901234567890123456789012345)\
    \ should return 12345678901234567890123456789012345.\nsum(123456789012345678901234567890123456)\
    \ should return 123456789012345678901234567890123456.\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19,\
    \ 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15)\
    \ == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\
    \t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmp00rsuyfi.jl:11 expected \"\
    end\", got \"mod\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp00rsuyfi.jl:14\n\
    in expression starting at /tmp/tmp00rsuyfi.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0\n        return a\n    else\n        return multiply(a % 10,\
    \ (b / 10) * 10) + a / 10\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    multiply(148, 412)\n</cell>\n<code language=julia-1.3>\nmultiply(19, 28)\n</cell>\n\
    <code language=julia-1.3>\nmultiply(2020, 1851)\n</cell>\n<code language=julia-1.3>\n\
    multiply(14,-15)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ sum of two integers. Assume that the input is an integer and that both numbers\
    \ are positive.\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj2rfz4p1.jl:17\nin expression starting at\
    \ /tmp/tmpj2rfz4p1.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0\n        0\n    else\n        (a*b).digits(2)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) ==\
    \ 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\
    \t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0,\
    \ 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4oanmqpt.jl:17\nin expression starting at\
    \ /tmp/tmp4oanmqpt.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0\n        0\n    else\n        (a*b).digits(2)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"Complete the function that takes two\
    \ integers and returns \n    the product of their unit digits.\n    Assume the\
    \ input is always valid.\n    Examples:\n    multiply(148, 412) should return\
    \ 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should\
    \ return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t\
    @test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14,\
    \ -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) ==\
    \ 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp13z6obqj.jl:17\nin expression starting at\
    \ /tmp/tmp13z6obqj.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if a < 0 || b < 0\n        error(\"Invalid input\")\n    elseif b == 0\n\
    \        return a\n    else\n        return a*b\n    end\nend\n\"\"\"\n    \n\"\
    \"\"\n    \n    \n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\
    \"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\
    \"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\
    \"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\
    \n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\
    \"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\
    \"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\
    \"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\
    \n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\
    \"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\
    \"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\
    \"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\
    \n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\
    \"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\
    \"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\
    \"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\
    \n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\
    \"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\
    \"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\
    \"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\
    \n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\
    \"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\
    \"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\
    \"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\
    \n\"\"\"\n\"\"\"\n\"\"\"\n\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\
    \t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: cannot document the following expression:\n\n\"\"\n\n\
    Stacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmp3b2opv9_.jl:24\nin expression starting at /tmp/tmp3b2opv9_.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if a < 0 || b < 0\n        return -1\n    \n    if a == 0 || b == 0\n\
    \        return 0\n    \n    if a > b\n        a, b = b, a\n    \n    mul = 1\n\
    \    \n    while a != 0\n        mul *= 10\n        a -= 1\n    \n    while b\
    \ != 0\n        mul *= 10\n        b -= 1\n    \n    return mul\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\
    \t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14,\
    \ -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) ==\
    \ 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"while\" at /tmp/tmp21gjgxzb.jl:22\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp21gjgxzb.jl:1\n\
    in expression starting at /tmp/tmp21gjgxzb.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        0\n    else\n        (a * 10 + b) mod 10\n    end\n\
    end\n</code>\n<|/ a tags=julia |>\n<| c |>\nThis doesn't work if `a` is negative\
    \ and `b` is positive.\n<|/ c |>\n<| c |>\nI fixed the issue. Thanks for pointing\
    \ it out.\n<|/ c |>\n<| a tags=julia |>\nHere's a solution that doesn't use any\
    \ loops:\n<code>\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmp038a1jd_.jl:11 expected \"\
    end\", got \"mod\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp038a1jd_.jl:14\n\
    in expression starting at /tmp/tmp038a1jd_.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        0\n    else\n        (a*b).digits(2)\n    end\nend\n\
    </cell>\n<code language=julia-1.0>\n\"\"\"Complete the function that takes two\
    \ integers and returns \n    the product of their unit digits.\n    Assume the\
    \ input is always valid.\n    Examples:\n    multiply(148, 412) should return\
    \ 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should\
    \ return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t\
    @test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14,\
    \ -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) ==\
    \ 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzc8u2bc4.jl:17\nin expression starting at\
    \ /tmp/tmpzc8u2bc4.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        return 0 \n    else \n        return (a * b) % (10^9\
    \ + 7)\n    end\nend\n</cell>\n<code language=julia-1.5>\n@assert multiply(148,\
    \ 412) == 16\n@assert multiply(19, 28) == 72\n@assert multiply(2020, 1851) ==\
    \ 0\n@assert multiply(14,-15) == 20\n</cell>\n<text>\nProblem 4\nWrite a function\
    \ that takes two integers and returns the sum of the \n    unit digits of their\
    \ product (without using multiplication).\n    Examples:\n    productSum(148,\
    \ 412) should return 16.\n    productSum(19, 28) should return 72.\n    productSum(2020,\
    \ 1851) should return 0.\n    productSum(14,-15) should return 20.\n    \"\"\"\
    \nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4bpdra7e.jl:17\nin expression starting at\
    \ /tmp/tmp4bpdra7e.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0\n        0\n    else\n        (a * b) % 10\n    end\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes two integers and returns the sum\
    \ of their unit digits.\nAssume the input is always valid.\nExamples:\nsum(148,\
    \ 412) should return 16.\nsum(19, 28) should return 72.\nsum(2020, 1851) should\
    \ return 0.\nsum(14,-15) should return 20.\nHint: You can use the function sum.\n\
    using Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1qjtj13u.jl:17\nin expression starting at\
    \ /tmp/tmp1qjtj13u.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        return 0 \n    else \n        return (a * b) % (10^9\
    \ + 7)\nend\n</cell>\n<code language=julia-1.5>\n# Test your function\n@assert\
    \ multiply(148, 412) == 16\n@assert multiply(19, 28) == 72\n@assert multiply(2020,\
    \ 1851) == 0 \n@assert multiply(14,-15) == 20\n</cell>\n<text>\nProblem 3\nUsing\
    \ your multiply function, complete the function called digit_product, which should\
    \ take two integers and return their sum of the product of their unit digits.\
    \ For example, digit_product(19,28) should return 32, as digit_product(19,28)\
    \ is the product of 19 and 28 (both with unit digits).\nusing Test\n\n@testset\
    \ begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19,\
    \ 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15)\
    \ == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\
    \t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj0wo1vsi.jl:16\nin expression starting at\
    \ /tmp/tmpj0wo1vsi.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        return 0 \n    else \n        return (a * b % 10)\
    \ * (10 * b / 10)\n    end\nend\n</cell>\n<code language=julia-1.5>\n# Test your\
    \ function\n@assert multiply(148, 412) == 16\n@assert multiply(19, 28) == 72\n\
    @assert multiply(2020, 1851) == 0 \n@assert multiply(14,-15) == 20\n</cell>\n\
    <text>\nProblem 3\nUsing your multiply function, write a function called count_digits(n)\
    \ that takes in a\npositive integer and returns how many digits in that number.\n\
    using Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpiwyit108.jl:17\nin expression starting at\
    \ /tmp/tmpiwyit108.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        return 0 \n    else \n        return (a * b) / b\n\
    end\n</cell>\n<code language=julia-1.0>\n@assert multiply(148, 412) == 16\n@assert\
    \ multiply(19, 28) == 72\n@assert multiply(2020, 1851) == 0\n@assert multiply(14,-15)\
    \ == 20\n</cell>\n<text>\nExercise 3\nWrite a function that takes two integers\
    \ and returns the sum of the unit digits of their product \n    (i.e. the sum\
    \ of the digits of their product times the unit digits).\n    For example, multiply(148,\
    \ 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcjdrv7x8.jl:16\nin expression starting at\
    \ /tmp/tmpcjdrv7x8.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        0\n    elseif b < 0 \n        multiply(-a, -b)\n \
    \   elseif b > 0 \n        multiply(a, b / 10)\n    elseif b == -2 \n        multiply(a,\
    \ 10)\n    elseif b == -3 \n        multiply(a, 100)\n    elseif b == -4 \n  \
    \      multiply(a, 1000)\n    elseif b == -5 \n        multiply(a, 10000)\n  \
    \  elseif b == -6 \n        multiply(a, 100000)\n    elseif b == -7 \n       \
    \ multiply(a, 1000000)\n    elseif b == -8 \n        multiply(a, 10000000)\n \
    \   elseif b == -9 \n        multiply(a, 100000000)\n    elseif b == -10 \n  \
    \      multiply(a, 1000000000)\n    elseif b == -11 \n        multiply(a, 10000000000)\n\
    \    elseif b == -12 \n        multiply(a, 100000000000)\n    elseif b == -13\
    \ \n        multiply(a, 1000000000000)\n    elseif b == -14 \n        multiply(a,\
    \ 10000000000000)\n    elseif b == -15 \n        multiply(a, 100000000000000)\n\
    \    elseif b == -16 \n        multiply(a, 1000000000000000)\n    elseif b ==\
    \ -17 \n        multiply(a, 10000000000000000)\n    elseif b == -18 \n       \
    \ multiply(a, 100000000000000000)\n    elseif b == -19 \n        multiply(a, 1000000000000000000)\n\
    \    elseif b == -20 \n        multiply(a, 10000000000000000000)\n    elseif b\
    \ == -21 \n        multiply(a, 1000000000000000000)\n    elseif b == -22 \n  \
    \      multiply(a, 10000000000000000000)\n    elseif b == -23 \n        multiply(a,\
    \ 100000000000000000000)\n    elseif b == -24 \n        multiply(a, 1000000000000000000000)\n\
    \    elseif b == -25 \n        multiply(a, 10000000000000000000000)\n    elseif\
    \ b == -26 \n        multiply(a, 100000000000000000000000)\n    elseif b == -27\
    \ \n        multiply(a, 1000000000000000000000000)\n    elseif b == -28 \n   \
    \     multiply(a, 10000000000000000000000000)\n    elseif b == -29 \n        multiply(a,\
    \ 100000000000000000000000000)\n    elseif b == -30 \n        multiply(a, 1000000000000000000000000000)\n\
    \    elseif b == -31 \n        multiply(a, 10000000000000000000000000000)\n  \
    \  elseif b == -32 \n        multiply(a, 100000000000000000000000000000)\n   \
    \ elseif b == -33 \n        multiply(a, 1000000000000000000000000000000)\n   \
    \ elseif b == -34 \n        multiply(a, 10000000000000000000000000000000)\n  \
    \  elseif b == -35 \n\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\
    \t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4tm9c817.jl:1\nin expression starting at /tmp/tmp4tm9c817.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0\n        return a\n    else\n        return multiply(a % 10,\
    \ (b / 10) * 10) + a / 10\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    multiply(148, 412)\n</cell>\n<code language=julia-1.5>\nmultiply(19, 28)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(2020, 1851)\n</cell>\n<code language=julia-1.5>\n\
    multiply(14,-15)\n</cell>\n<text>\nExercise 3\nWrite a function that returns the\
    \ sum of its unit digits.\nExamples:\nsum(148, 412) should return 16.\nsum(19,\
    \ 28) should return 72.\nsum(2020, 1851) should return 0.\nsum(14,-15) should\
    \ return 20.\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpln151438.jl:17\nin expression starting at\
    \ /tmp/tmpln151438.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if a < 0 || b < 0 \n        error(\"Invalid input\")\n    else if a ==\
    \ 0 || b == 0 \n        0\n    else \n        digits(a) * digits(b) \n    end\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that takes two integers and\
    \ returns the sum of the unit digits of their product (e.g., multiply(148, 412)\
    \ should return 16).\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t\
    @test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbcnfxp5n.jl:13\nin expression starting at\
    \ /tmp/tmpbcnfxp5n.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0\n        return a\n    \n    if a < 0\n        return multiply(-a,\
    \ b)\n    \n    if b < 0\n        return multiply(a, -b)\n    \n    if a < b\n\
    \        return multiply(a, b)\n    \n    return multiply(a, b) % 10\nend\n</cell>\n\
    <code language=julia-1.5>\nmultiply(148, 412)\n</cell>\n<code language=julia-1.5>\n\
    multiply(19, 28)\n</cell>\n<code language=julia-1.5>\nmultiply(2020, 1851)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(14,-15)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string and returns the number of characters in the string.\n\
    Examples:\n    count(\"hello\") should return 5.\n    count(\"a\") should return\
    \ 1.\n    count(\"ab\") should return 2.\n    count(\"abc\") should return 3.\n\
    \    count(\"abcde\") should return 5.\n    count(\"abcdef\") should return 6.\n\
    \    count(\"abcdefg\") should return 7.\n    count(\"abcdefgh\") should return\
    \ 8.\n    count(\"abcdefghi\") should return 9.\n    count(\"abcdefghij\") should\
    \ return 10.\n    count(\"abcdefghijk\") should return 11.\n    count(\"abcdefghijkl\"\
    ) should return 12.\n    count(\"abcdefghijklm\") should return 13.\n    count(\"\
    abcdefghijklmn\") should return 14.\n    count(\"abcdefghijklmn\") should return\
    \ 14.\n    count(\"abcdefghijklmn\") should return 14.\n    count(\"abcdefghijklmn\"\
    ) should return 14.\n    count(\"abcdefghijklmn\") should return 14.\n    count(\"\
    abcdefghijklmn\") should return 14.\n    count(\"abcdefghijklmn\") should return\
    \ 14.\n    count(\"abcdefghijklmn\") should return 14.\n    count(\"abcdefghijklmn\"\
    ) should return 14.\n    count(\"abcdefghijklmn\") should return 14.\n    count(\"\
    abcdefghijklmn\") should return 14.\n    count(\"abcdefghijklmn\") should return\
    \ 14.\n    count(\"abcdefghijklmn\") should return 14.\n    count(\"abcdefghijklmn\"\
    ) should return 14.\n    count(\"abcdefghijklmn\") should return 14.\n    count(\"\
    abcdefghijklmn\") should return 14.\n    count(\"abcdefghijklmn\") should return\
    \ 14.\n    count(\"abcdefghijklmn\") should return 14.\n    count(\"abcdef\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpurg4b5jh.jl:25\nin expression starting at\
    \ /tmp/tmpurg4b5jh.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if a < 0 || b < 0\n        error(\"Invalid input\")\n    elseif b == 0\n\
    \        return a\n    else\n        return a*b\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"Complete the function that takes two integers and\
    \ returns \n    the product of their unit digits.\n    Assume the input is always\
    \ valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19,\
    \ 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\
    \t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjcxk9zib.jl:19\nin expression starting at\
    \ /tmp/tmpjcxk9zib.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0\n        return 0\n    \n    digits = zeros(Int64, 10)\n   \
    \ \n    digits[1] = a%10\n    digits[2] = (a/10)%10\n    digits[3] = (a/100)%10\n\
    \    digits[4] = (a/1000)%10\n    digits[5] = (a/10000)%10\n    digits[6] = (a/100000)%10\n\
    \    digits[7] = (a/1000000)%10\n    digits[8] = (a/10000000)%10\n    digits[9]\
    \ = (a/100000000)%10\n    \n    product = digits[1]*digits[2]*digits[3]*digits[4]*digits[5]*digits[6]*digits[7]*digits[8]*digits[9]\n\
    \    \n    return product\nend\n</cell>\n<code language=julia-1.5>\nmultiply(148,\
    \ 412)\n</cell>\n<code language=julia-1.5>\nmultiply(19, 28)\n</cell>\n<code language=julia-1.5>\n\
    multiply(2020, 1851)\n</cell>\n<code language=julia-1.5>\nmultiply(14,-15)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(148, 412)\n</cell>\n<code language=julia-1.5>\n\
    multiply(19, 28)\n</cell>\n<code language=julia-1.5>\nmultiply(2020, 1851)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(14,-15)\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppritr1i2.jl:30\nin expression starting at\
    \ /tmp/tmppritr1i2.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0\n        0\n    elseif b < 0\n        multiply(-a, -b)\n   \
    \ else\n        (a * b) mod 10\n    end\nend\n</code>\n<|/ a dscore=1 |>\n<| c\
    \ |>\nThank you for your answer! I understand that my code is not the most efficient\
    \ but I'm just trying to understand how it works. I understand that my code is\
    \ not the most efficient but I'm just trying to understand how it works. I understand\
    \ that my code is not the most efficient but I'm just trying to understand how\
    \ it works. I understand that my code is not the most efficient but I'm just trying\
    \ to understand how it works. I understand that my code is not the most efficient\
    \ but I'm just trying to understand how it works. I understand that my code is\
    \ not the most efficient but I'm just trying to understand how it works. I understand\
    \ that my code is not the most efficient but I'm just trying to understand how\
    \ it works. I understand that my code is not the most efficient but I'm just trying\
    \ to understand how it works. I understand that my code is not the most efficient\
    \ but I'm just trying to understand how it works. I understand that my code is\
    \ not the most efficient but I'm just trying to understand how it works. I understand\
    \ that my code is not the most efficient but I'm just trying to understand how\
    \ it works. I understand that my code is not the most efficient but I'm just trying\
    \ to understand how it works. I understand that my code is not the most efficient\
    \ but I'm just trying to understand how it works. I understand that my code is\
    \ not the most efficient but I'm just trying to understand how it works. I understand\
    \ that my code is not the most efficient but I'm just trying to understand how\
    \ it works. I understand that my code is not the most efficient but I'm just trying\
    \ to understand how it works. I understand that my code is not the most efficient\
    \ but I'm just trying to understand how it works. I understand that my code is\
    \ not the most efficient but I'm just trying to understand how it works. I understand\
    \ that my code is not the most efficient but I'm just trying to understand how\
    \ it works. I understand that my code is not the most efficient but I'm just trying\
    \ to understand how it works. I understand that my code is not the most efficient\
    \ but I'm just trying to understand how it works. I understand that my code is\
    \ not the most efficient but I'm just trying to understand how it works. I understand\
    \ that my code is not the most efficient but I'm just trying to understand how\
    \ it works. I understand that my code is not the most efficient but I'm just trying\
    \ to understand how it works. I understand that my code is not the most efficient\
    \ but I'm just trying to understand how it works. I understand that my code is\
    \ not the most efficient \nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\
    \t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmpmk4s__41.jl:13 expected \"\
    end\", got \"mod\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmk4s__41.jl:16\n\
    in expression starting at /tmp/tmpmk4s__41.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        0\n    else\n        (a * 10 + b) mod 10\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nmultiply(148, 412)\n</cell>\n<code language=julia-1.5>\n\
    multiply(19, 28)\n</cell>\n<code language=julia-1.5>\nmultiply(2020, 1851)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(14,-15)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the sum of the digits of its input. \nAssume that the\
    \ input is always valid.\nExamples:\nsum(148) should return 8.\nsum(19) should\
    \ return 9.\nsum(2020) should return 0.\nsum(14) should return 14.\nsum(15) should\
    \ return 15.\nsum(0) should return 0.\nsum(-1) should return 0.\nsum(123456789)\
    \ should return 9876.\nsum(1234567890) should return 9876.\nsum(12345678901) should\
    \ return 9876.\nsum(123456789012) should return 9876.\nsum(1234567890123) should\
    \ return 9876.\nsum(12345678901234) should return 9876.\nsum(123456789012345)\
    \ should return 9876.\nsum(1234567890123456) should return 9876.\nsum(12345678901234567)\
    \ should return 9876.\nsum(123456789012345678) should return 9876.\nsum(1234567890123456790)\
    \ should return 9876.\nsum(1234567890123456791) should return 9876.\nsum(1234567890123456792)\
    \ should return 9876.\nsum(1234567890123456793) should return 9876.\nsum(1234567890123456794)\
    \ should return 9876.\nsum(1234567890123456795) should return 9876.\nsum(1234567890123456796)\
    \ should return 9876.\nsum(1234567890123456797) should return 9876.\nsum(1234567890123456798)\
    \ should return 9876.\nsum(1234567890123456799) should return 9876.\nsum(1234567890123456000)\
    \ should return 9876.\nsum(1234567890123456001) should return 9876.\nsum(1234567890123456002)\
    \ should return 9876.\nsum(1234567890123456003) should return 9876.\nsum(1234567890123456004)\
    \ should return 9876.\nsum(1234567890123456005) should return 9876.\nsum(1234567890123456006)\
    \ should return 9876.\nsum(1234567890123456007) should return 9876.\nsum(1234567890123456008)\
    \ should return 9876.\nsum(1234567890123456009) \nusing Test\n\n@testset begin\n\
    \ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19,\
    \ 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15)\
    \ == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\
    \t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmp85z6kx5h.jl:11 expected \"\
    end\", got \"mod\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp85z6kx5h.jl:14\n\
    in expression starting at /tmp/tmp85z6kx5h.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        return 0 \n    else \n        return (a * b % 10)\
    \ * 10 + a % 10\n    end\nend\n</cell>\n<code language=julia-1.5>\n# Test your\
    \ function with some examples:\n@assert multiply(148, 412) == 16\n@assert multiply(19,\
    \ 28) == 72\n@assert multiply(2020, 1851) == 0\n@assert multiply(14, -15) == 20\n\
    </cell>\n<text>\nProblem 3\nUsing your multiply function, write a function called\
    \ digit_product that computes the product of its \ndigit products.\nusing Test\n\
    \n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\
    \t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14,\
    \ -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) ==\
    \ 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9u8zr2zp.jl:17\nin expression starting at\
    \ /tmp/tmp9u8zr2zp.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0\n        return a\n    else\n        return a*b\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n# Test the function\nmultiply(148, 412)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the sum of the digits\
    \ of an integer.\nExamples:\nsum(148) should return 8.\nsum(19) should return\
    \ 9.\nsum(2020) should return 20.\nsum(0) should return 0.\nsum(-1) should return\
    \ -1.\nsum(123456789) should return 9876.\nsum(987654321) should return 9876.\n\
    sum(98765432100) should return 9876.\nsum(987654321000) should return 9876.\n\
    sum(98765432100000000) should return 9876.\nsum(987654321000000000000) should\
    \ return 9876.\nsum(98765432100000000000000) should return 9876.\nsum(987654321000000000000000000)\
    \ should return 9876.\nsum(9876543210000000000000000000000) should return 9876.\n\
    sum(987654321000000000000000000000000) should return 9876.\nsum(98765432100000000000000000000000000)\
    \ should return 9876.\nsum(987654321000000000000000000000000000000) should return\
    \ 9876.\nsum(98765432100000000000000000000000000000000) should return 9876.\n\
    sum(987654321000000000000000000000000000000000) should return 9876.\nsum(9876543210000000000000000000000000000000000)\
    \ should return 9876.\nsum(98765432100000000000000000000000000000000000000) should\
    \ return 9876.\nsum(9876543210000000000000000000000000000000000000000) should\
    \ return 9876.\nsum(98765432100000000000000000000000000000000000000000) should\
    \ return 9876.\nsum(987654321000000000000000000000000000000000000000000) should\
    \ return 9876.\nsum(9876543210000000000000000000000000000000000000000000000) should\
    \ return 9876.\nsum(987654321000000000000000000000000000000000000000000000000)\
    \ should return 9876.\nsum(9876543210000000000000000000000000000000000000000000000000)\
    \ should return 9876.\nsum(98765432100000000000000000000000000000000000000000000000000)\
    \ should return 9876.\nsum(987654321000000000000000000000000000000000000000000000000000000)\
    \ should return 9876.\nsum(98765432100000000000000000000000000000000000000000000000000000000)\
    \ should return 9876.\nsum(987654321000000000000000000000000000000000000000000000000000000000)\
    \ should return 9876.\nsum(987654321000000000000000000\nusing Test\n\n@testset\
    \ begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19,\
    \ 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15)\
    \ == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\
    \t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvd_uj4wo.jl:17\nin expression starting at\
    \ /tmp/tmpvd_uj4wo.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if a < 0 || b < 0 \n        error(\"Invalid input\")\n    elseif b ==\
    \ 0 \n        error(\"Invalid input\")\n    elseif b == 1 \n        return a\n\
    \    else\n        return a*b\n    end\nend\n\"\"\"\n    \n    \n\"\"\"\n    \n\
    \    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n  \
    \  \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n\
    \    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\
    \n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\
    \"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\
    \"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\
    \"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n   \
    \ \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n\
    \    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n  \
    \  \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n\
    \    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\
    \n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\
    \"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\
    \"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\
    \"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n   \
    \ \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n\
    \    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n  \
    \  \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n\
    \    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\
    \n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19,\
    \ 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15)\
    \ == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\
    \t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmplz77otfg.jl:261\n  Expression: candidate(148,\
    \ 412) == 16\n   Evaluated: 60976 == 16\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplz77otfg.jl:261 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplz77otfg.jl:260\ntest set: Test\
    \ Failed at /tmp/tmplz77otfg.jl:262\n  Expression: candidate(19, 28) == 72\n \
    \  Evaluated: 532 == 72\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplz77otfg.jl:262 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplz77otfg.jl:260\ntest set: Test\
    \ Failed at /tmp/tmplz77otfg.jl:263\n  Expression: candidate(2020, 1851) == 0\n\
    \   Evaluated: 3739020 == 0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplz77otfg.jl:263 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplz77otfg.jl:260\ntest set: Error\
    \ During Test at /tmp/tmplz77otfg.jl:264\n  Test threw exception\n  Expression:\
    \ candidate(14, -15) == 20\n  Invalid input\n  Stacktrace:\n   [1] error(s::String)\n\
    \     @ Base ./error.jl:33\n   [2] multiply(a::Int64, b::Int64)\n     @ Main /tmp/tmplz77otfg.jl:12\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmplz77otfg.jl:264 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmplz77otfg.jl:260\ntest set:\
    \ Test Failed at /tmp/tmplz77otfg.jl:265\n  Expression: candid"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplz77otfg.jl:258\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0\n        0\n    else\n        (a * b).digits\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"Complete the function that takes two\
    \ integers and returns \n    the product of their unit digits.\n    Assume the\
    \ input is always valid.\n    Examples:\n    multiply(148, 412) should return\
    \ 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should\
    \ return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t\
    @test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14,\
    \ -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) ==\
    \ 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd5watc0y.jl:17\nin expression starting at\
    \ /tmp/tmpd5watc0y.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if a < 0 || b < 0 \n        error(\"Invalid input\")\n    else if a ==\
    \ 0 || b == 0\n        error(\"Invalid input\")\n    else\n        return (a *\
    \ b) / digit_sum(a)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n\
    \    digit_sum(a::Int64)::Int64\n    Sum the unit digits of a number.\n    Assumes\
    \ input is valid.\n    Examples:\n    digit_sum(148) should return 4.\n    digit_sum(19)\
    \ should return 7.\n    digit_sum(2020) should return 0.\n    digit_sum(14) should\
    \ return 20.\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\
    \t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxbsqyaxk.jl:13\nin expression starting at\
    \ /tmp/tmpxbsqyaxk.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        return 0 \n    else \n        return (a*b) % (10^9\
    \ + 7)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpixeiwyjq.jl:17\nin expression starting at\
    \ /tmp/tmpixeiwyjq.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0\n        return a\n    else\n        return a*b\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"Complete the function that takes two\
    \ integers and returns \n    the product of their unit digits.\n    Assume the\
    \ input is always valid.\n    Examples:\n    multiply(148, 412) should return\
    \ 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should\
    \ return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t\
    @test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14,\
    \ -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) ==\
    \ 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptp4_v0zu.jl:17\nin expression starting at\
    \ /tmp/tmptp4_v0zu.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if a < 0 || b < 0 \n        error(\"Invalid input\")\n    else if a ==\
    \ 0 || b == 0\n        error(\"Invalid input\")\n    else\n        return a *\
    \ b\n    end\nend\n\"\"\"\n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n\
    \    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n\
    \    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n\
    \    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n\
    \    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n\
    \    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n\
    \    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n\
    \    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n\
    \    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n\
    \    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n\
    \    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n\
    \    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n\
    \    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n\
    \    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n\
    \    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n\
    \    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n\
    \    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n\
    \    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n\
    \    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n\
    \    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n\
    \nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpazmsawuo.jl:13\nin expression starting at\
    \ /tmp/tmpazmsawuo.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        return 0 \n    else \n        return a * b \nend\n\
    </cell>\n<code language=julia-1.0>\n# Test your function here\n@assert multiply(148,\
    \ 412) == 16\n@assert multiply(19, 28) == 72\n@assert multiply(2020, 1851) ==\
    \ 0 \n@assert multiply(14,-15) == 20\n</cell>\n<text>\n4.5 Write a Julia function\
    \ named is_palindrome that returns true if the given number is a palindrome, false\
    \ otherwise. For example, 5321 is a palindrome. Assume that the given number is\
    \ a valid integer.\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t\
    @test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5f_dnpjp.jl:16\nin expression starting at\
    \ /tmp/tmp5f_dnpjp.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        return 0 \n    else \n        return (a*b)/b \nend\n\
    </cell>\n<code language=julia-1.5>\n# Test your function\n@assert multiply(148,\
    \ 412) == 16\n@assert multiply(19, 28) == 72\n@assert multiply(2020, 1851) ==\
    \ 0.0\n@assert multiply(14,-15) == 20\n</cell>\n<text>\n4.3 Unit Tests\nWe have\
    \ written a lot of code with unit tests. Unit tests help you find and fix bugs\
    \ in your code. Let's review some of them:\nusing Test\n\n@testset begin\n\ncandidate\
    \ = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) ==\
    \ 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\
    \t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0,\
    \ 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0gkqtb2e.jl:16\nin expression starting at\
    \ /tmp/tmp0gkqtb2e.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if a < 0 || b < 0 \n        error(\"Invalid input\")\n    elseif b ==\
    \ 0 \n        return 0 \n    elseif b == 1 \n        return a \n    elseif b >\
    \ a \n        error(\"Invalid input\")\n    elseif b == a \n        return a \n\
    \    else\n        return a * b\n    end\nend\n\"\"\"\n    \n\"\"\"\n    \n\"\"\
    \"\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn285u7o1.jl:29\nin expression starting at\
    \ /tmp/tmpn285u7o1.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        0\n    else\n        (a * b) % 10\n    end\nend\n\
    </code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't work. `multiply(148, 412)` returns\
    \ `16`, but `multiply(19, 28)` returns `72`.\n<|/ c |>\n<| c |>\nThanks for pointing\
    \ that out. I fixed the code. Now it works.\n<|/ c |>\n<| a |>\n<code>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcjrmcvtg.jl:17\nin expression starting at\
    \ /tmp/tmpcjrmcvtg.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        0\n    else\n        (a * 10 + b) mod 10\nend\n</cell>\n\
    <code language=julia-1.0>\nmultiply(148, 412)\n</cell>\n<code language=julia-1.0>\n\
    multiply(19, 28)\n</cell>\n<code language=julia-1.0>\nmultiply(2020, 1851)\n</cell>\n\
    <code language=julia-1.0>\nmultiply(14,-15)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the sum of two integers. \nAssume that the input is\
    \ always valid.\nExamples:\nsum(148, 412) should return 16.\nsum(19, 28) should\
    \ return 72.\nsum(2020, 1851) should return 0.\nsum(14,-15) should return 20.\n\
    Hint: You can use the + operator to sum the two integers. \nYou can use the mod\
    \ operator to return the remainder after division.\nusing Test\n\n@testset begin\n\
    \ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19,\
    \ 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15)\
    \ == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\
    \t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmps6bcb5ow.jl:11 expected \"\
    end\", got \"mod\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmps6bcb5ow.jl:14\n\
    in expression starting at /tmp/tmps6bcb5ow.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if a < 0 || b < 0 \n        error(\"Invalid input\")\n    else if a ==\
    \ 0 || b == 0\n        error(\"Invalid input\")\n    else\n        return a *\
    \ b\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"Complete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should\
    \ return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851)\
    \ should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd8eticcs.jl:13\nin expression starting at\
    \ /tmp/tmpd8eticcs.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if a < 0 || b < 0 \n        error(\"Invalid input\")\n    else if a ==\
    \ 0 || b == 0\n        error(\"Invalid input\")\n    else\n        return a*b\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw_9krz0w.jl:13\nin expression starting at\
    \ /tmp/tmpw_9krz0w.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0\n        0\n    else\n        (a * b) % 10\n    end\nend\n</code>\n\
    <|/ a tags=julia,function |>\n<| c |>\nThank you for your answer! I appreciate\
    \ it!\n<|/ c |>\n<| a dscore=0 |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) ==\
    \ 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\
    \t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0,\
    \ 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp74ww0you.jl:17\nin expression starting at\
    \ /tmp/tmp74ww0you.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0\n        0\n    elseif b < 0\n        multiply(-a, -b)\n   \
    \ else\n        (a * b) % 10\n    end\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\n\
    This doesn't work. Try multiplying `19` and `28` for example. `multiply(19, 28)`\
    \ returns `72` but `multiply(19, 28)` should return `0`.\n<|/ c |>\n<| c |>\n\
    I see what you mean. I've updated my answer to reflect that.\n<|/ c |>\n<| a |>\n\
    The simplest way is to use divmod and then multiply by 10:\n<code>\nusing Test\n\
    \n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\
    \t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14,\
    \ -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) ==\
    \ 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4z54j973.jl:19\nin expression starting at\
    \ /tmp/tmp4z54j973.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        0\n    else\n        (a * 10 * b + digits(a) * digits(b))\
    \ % 10\n    end\nend\n</cell>\n<code language=julia-1.0>\nmultiply(148, 412)\n\
    </cell>\n<code language=julia-1.0>\nmultiply(19, 28)\n</cell>\n<code language=julia-1.0>\n\
    multiply(2020, 1851)\n</cell>\n<code language=julia-1.0>\nmultiply(14,-15)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes two integers and returns the sum\
    \ of the unit digits of their product (modulo 10).\nExamples:\n    sum(148, 412)\
    \ should return 16.\n    sum(19, 28) should return 72.\n    sum(2020, 1851) should\
    \ return 0.\n    sum(14,-15) should return 20.\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19,\
    \ 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15)\
    \ == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\
    \t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps5fy_z83.jl:17\nin expression starting at\
    \ /tmp/tmps5fy_z83.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0\n        return 0\n    \n    digits = zeros(Int64, 10)\n   \
    \ digits[1] = a\n    digits[2] = b\n    \n    product = 1\n    for i in 1..9\n\
    \        product = product * digits[i]\n    end\n    return product\nend\n</cell>\n\
    <code language=julia-1.5>\nmultiply(148, 412)\n</cell>\n<code language=julia-1.5>\n\
    multiply(19, 28)\n</cell>\n<code language=julia-1.5>\nmultiply(2020, 1851)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(14,-15)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string and returns the number of characters in the string.\n\
    Examples:\n    count(\"hello\") should return 5.\n    count(\"hello!\") should\
    \ return 4.\n    count(\"hello\") should return 0.\n    count(\"hello!\") should\
    \ return 0.\n    count(\"hello\") should return 0.\n    count(\"hello!\") should\
    \ return 0.\n    count(\"hello\") should return 0.\n    count(\"hello!\") should\
    \ return 0.\n    count(\"hello\") should return 0.\n    count(\"hello!\") should\
    \ return 0.\n    count(\"hello\") should return 0.\n    count(\"hello!\") should\
    \ return 0.\n    count(\"hello\") should return 0.\n    count(\"hello!\") should\
    \ return 0.\n    count(\"hello\") should return 0.\n    count(\"hello!\") should\
    \ return 0.\n    count(\"hello\") should return 0.\n    count(\"hello!\") should\
    \ return 0.\n    count(\"hello\") should return 0.\n    count(\"hello!\") should\
    \ return 0.\n    count(\"hello\") should return 0.\n    count(\"hello!\") should\
    \ return 0.\n    count(\"hello\") should return 0.\n    count(\"hello!\") should\
    \ return 0.\n    count(\"hello\") should return 0.\n    count(\"hello!\") should\
    \ return 0.\n    count(\"hello\") should return 0.\n    count(\"hello!\") should\
    \ return 0.\n    count(\"hello\") should return 0.\n    count(\"hello!\") should\
    \ return 0.\n    count(\"hello\") should return 0.\n    count(\"hello!\") should\
    \ return 0.\n    count(\"hello\") should return 0.\n    count(\"hello!\") should\
    \ return 0.\n    count(\"hello\") should return 0.\n    count(\"hello!\") should\
    \ return 0.\n    count(\"hello\") should return 0.\n    count(\"hello!\") should\
    \ return 0.\n    count(\"hello\") should return 0.\n    count(\"hello\nusing Test\n\
    \n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\
    \t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14,\
    \ -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) ==\
    \ 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpddpcou_b.jl:24\nin expression starting at\
    \ /tmp/tmpddpcou_b.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0\n        0\n    else\n        (a * b).digits(2)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"Complete the function that takes two\
    \ integers and returns \n    the product of their unit digits.\n    Assume the\
    \ input is always valid.\n    Examples:\n    multiply(148, 412) should return\
    \ 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should\
    \ return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t\
    @test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14,\
    \ -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) ==\
    \ 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbwtd6oax.jl:17\nin expression starting at\
    \ /tmp/tmpbwtd6oax.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if a < 0 || b < 0 \n        error(\"Invalid input\")\n    else if a ==\
    \ 0 || b == 0 \n        return 0 \n    else \n        return (a * b) mod 10\n\
    \    end\nend\n</cell>\n<code language=julia-1.0>\n\"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgf6arsm3.jl:13\nin expression starting at\
    \ /tmp/tmpgf6arsm3.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        return 0 \n    else \n        return (a * b) % (10^9\
    \ + 7)\nend\n</cell>\n<code language=julia-1.5>\nmultiply(148, 412)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(19, 28)\n</cell>\n<code language=julia-1.5>\n\
    multiply(2020, 1851)\n</cell>\n<code language=julia-1.5>\nmultiply(14,-15)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes an array of integers and returns\
    \ the sum of the squares of the unit digits.\nExamples:\n    sum_squares([148,\
    \ 412, 19, 28]) should return 52.\n    sum_squares([2020, 1851, 14,-15]) should\
    \ return 52.\n    sum_squares([148, 412, 19, 28]) should return 52.\n    sum_squares([148,\
    \ 412, 19, 28]) should return 52.\n    sum_squares([148, 412, 19, 28]) should\
    \ return 52.\n    sum_squares([148, 412, 19, 28]) should return 52.\n    sum_squares([148,\
    \ 412, 19, 28]) should return 52.\n    sum_squares([148, 412, 19, 28]) should\
    \ return 52.\n    sum_squares([148, 412, 19, 28]) should return 52.\n    sum_squares([148,\
    \ 412, 19, 28]) should return 52.\n    sum_squares([148, 412, 19, 28]) should\
    \ return 52.\n    sum_squares([148, 412, 19, 28]) should return 52.\n    sum_squares([148,\
    \ 412, 19, 28]) should return 52.\n    sum_squares([148, 412, 19, 28]) should\
    \ return 52.\n    sum_squares([148, 412, 19, 28]) should return 52.\n    sum_squares([148,\
    \ 412, 19, 28]) should return 52.\n    sum_squares([148, 412, 19, 28]) should\
    \ return 52.\n    sum_squares([148, 412, 19, 28]) should return 52.\n    sum_squares([148,\
    \ 412, 19, 28]) should return 52.\n    sum_squares([148, 412, 19, 28]) should\
    \ return 52.\n    sum_squares([148, 412, 19, 28]) should return 52.\n    sum_squares([148,\
    \ 412, 19, 28]) should return 52.\n    sum_squares([148, 412, 19, 28]) should\
    \ return 52.\n    sum_squares([148, 412, 19, 28]) should return 52.\n    sum_squares([148,\
    \ 412, 19, 28]) should return 52.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) ==\
    \ 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\
    \t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0,\
    \ 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_ayvqdoh.jl:16\nin expression starting at\
    \ /tmp/tmp_ayvqdoh.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        0\n    elseif b < 0 \n        multiply(a, -b)\n  \
    \  elseif b > 0 \n        multiply(a, b / 10)\n    else\n        multiply(a, b\
    \ / 10)\n    end\nend\n</cell>\n<code language=julia-1.5>\nmultiply(148, 412)\n\
    </cell>\n<code language=julia-1.5>\nmultiply(19, 28)\n</cell>\n<code language=julia-1.5>\n\
    multiply(2020, 1851)\n</cell>\n<code language=julia-1.5>\nmultiply(14,-15)\n</cell>\n\
    <text>\nExercise: Write a function that takes a single string and returns the\
    \ number of characters in the string.\n    Use this function to solve the problem\
    \ below.\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2n2umphg.jl:21\nin expression starting at\
    \ /tmp/tmp2n2umphg.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        return 0 \n    else \n        return (a * b) % 10\n\
    end\n</cell>\n<code language=julia-1.5>\nmultiply(148, 412)\n</cell>\n<code language=julia-1.5>\n\
    multiply(19, 28)\n</cell>\n<code language=julia-1.5>\nmultiply(2020, 1851)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(14,-15)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string and returns the number of characters in the string.\
    \ \nExamples:\n    length(\"hello\") should return 5.\n    length(\"helloworld\"\
    ) should return 10.\n    length(\"helloworld!\") should return 17.\n    length(\"\
    helloworld!\") should return 17.\n    length(\"helloworld!\") should return 17.\n\
    \    length(\"helloworld!\") should return 17.\n    length(\"helloworld!\") should\
    \ return 17.\n    length(\"helloworld!\") should return 17.\n    length(\"helloworld!\"\
    ) should return 17.\n    length(\"helloworld!\") should return 17.\n    length(\"\
    helloworld!\") should return 17.\n    length(\"helloworld!\") should return 17.\n\
    \    length(\"helloworld!\") should return 17.\n    length(\"helloworld!\") should\
    \ return 17.\n    length(\"helloworld!\") should return 17.\n    length(\"helloworld!\"\
    ) should return 17.\n    length(\"helloworld!\") should return 17.\n    length(\"\
    helloworld!\") should return 17.\n    length(\"helloworld!\") should return 17.\n\
    \    length(\"helloworld!\") should return 17.\n    length(\"helloworld!\") should\
    \ return 17.\n    length(\"helloworld!\") should return 17.\n    length(\"helloworld!\"\
    ) should return 17.\n    length(\"helloworld!\") should return 17.\n    length(\"\
    helloworld!\") should return 17.\n    length(\"helloworld!\") should return 17.\n\
    \    length(\"helloworld!\") should return 17.\n    length(\"helloworld!\") should\
    \ return 17.\n    length(\"helloworld!\") should return 17.\n    length(\"helloworld!\"\
    ) should return 17.\n    length(\"helloworld!\") should return 17.\n    length(\"\
    helloworld!\") should return 17.\n    length(\"helloworld!\") should return 17.\n\
    \    length(\"helloworld!\") should return 17.\n    length(\"helloworld!\") should\
    \ return 17.\n    length(\"helloworld!\") should return 17.\n    length(\"helloworld!\"\
    ) should return 17.\n    length(\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) ==\
    \ 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\
    \t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0,\
    \ 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj0u8qx1a.jl:16\nin expression starting at\
    \ /tmp/tmpj0u8qx1a.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if a < 0 || b < 0 \n        error(\"Invalid input\") \n    else \n   \
    \     return (a * b) % 10\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\
    \"\"Complete the function that takes two integers and returns \n    the product\
    \ of their unit digits.\n    Assume the input is always valid.\n    Examples:\n\
    \    multiply(148, 412) should return 16.\n    multiply(19, 28) should return\
    \ 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should\
    \ return 20.\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\
    \t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqt31a9zj.jl:17\nin expression starting at\
    \ /tmp/tmpqt31a9zj.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if a < 0 || b < 0\n        error(\"Invalid input\")\n    else\n      \
    \  return (a * b) % 10\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\
    \"Complete the function that takes two integers and returns \n    the product\
    \ of their unit digits.\n    Assume the input is always valid.\n    Examples:\n\
    \    multiply(148, 412) should return 16.\n    multiply(19, 28) should return\
    \ 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should\
    \ return 20.\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\
    \t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnitlwc0u.jl:17\nin expression starting at\
    \ /tmp/tmpnitlwc0u.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if a < 0 || b < 0 \n        error(\"Invalid input\") \n    else if a ==\
    \ 0 || b == 0\n        error(\"Invalid input\") \n    else \n        return a*b\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpisrj9gdb.jl:13\nin expression starting at\
    \ /tmp/tmpisrj9gdb.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if a < 0 || b < 0\n        error(\"Invalid input\")\n    elseif b == 0\n\
    \        return a\n    else\n        return a*b\n    end\nend\n\"\"\"\n    \n\
    \    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n\
    \    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n\
    \    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n\
    \    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n\
    \    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n\
    \    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n\
    \    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n\
    \    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n\
    \    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n\
    \    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n\
    \    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n\
    \    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n\
    \    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n\
    \    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n\
    \    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n\
    \    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n\
    \    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n\
    \    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n\
    \    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n\
    \    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n\nusing Test\n\
    \n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\
    \t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14,\
    \ -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) ==\
    \ 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2js6kvti.jl:258\nin expression starting at\
    \ /tmp/tmp2js6kvti.jl:258\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if a < 0 || b < 0\n        error(\"Invalid input\")\n    elseif b == 0\n\
    \        return a\n    elseif b == 1\n        return a * b\n    else\n       \
    \ return a * b / 10\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes an array of integers and returns the sum of the \n    unit digits\
    \ of all the numbers in the array.\n    For example, if the input array is [148,\
    \ 412, 19, 28, 2020, 1851] then \n    the output should be 16.\n    \n    Do not\
    \ use the reduce function.\n    \n    Do not use the sum function.\n    \n   \
    \ Do not use the map function.\n    \n    Do not use the sum function.\n    \n\
    \    Do not use the reduce function.\n    \n    Do not use the sum function.\n\
    \    \n    Do not use the map function.\n    \n    Do not use the sum function.\n\
    \    \n    Do not use the reduce function.\n    \n    Do not use the sum function.\n\
    \    \n    Do not use the map function.\n    \n    Do not use the sum function.\n\
    \    \n    Do not use the reduce function.\n    \n    Do not use the sum function.\n\
    \    \n    Do not use the map function.\n    \n    Do not use the sum function.\n\
    \    \n    Do not use the reduce function.\n    \n    Do not use the sum function.\n\
    \    \n    Do not use the map function.\n    \n    Do not use the sum function.\n\
    \    \n    Do not use the reduce function.\n    \n    Do not use the sum function.\n\
    \    \n    Do not use the map function.\n    \n    Do not use the sum function.\n\
    \    \n    Do not use the reduce function.\n    \n    Do not use the sum function.\n\
    \    \n    Do not use the map function.\n    \n    Do not use the sum function.\n\
    \    \n    Do not use the reduce function.\n    \n    Do not use the sum function.\n\
    \    \n    Do not use the map function.\n    \n    Do not use the sum function.\n\
    \    \n    Do not use the reduce function.\n    \n    Do not use the sum function.\n\
    \    \n    Do not use the map function.\n    \n    Do not use the sum function.\n\
    \    \n    Do not use the reduce function.\n    \n    Do not use the sum function.\n\
    \    \n    Do not use the map function.\n    \n    Do not use the sum function.\n\
    \    \n    Do not use the reduce function.\n    \n    Do not use the sum function.\n\
    \    \n    Do not use the map function.\n    \n    Do not use the sum function.\n\
    \    \n    Do not use the reduce function.\n    \n    Do not use the sum function.\n\
    \    \n    Do not use the map function.\n    \n    Do not use the sum function.\n\
    \    \n    Do not use the reduce function.\n    \n    Do not use the sum function.\n\
    \    \n    Do not use the map function.\n    \n    Do not use the sum function.\n\
    using Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3lzpmm7v.jl:21\nin expression starting at\
    \ /tmp/tmp3lzpmm7v.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0\n        return a\n    else\n        return a*b\n    end\nend\n\
    </cell>\n<code language=julia-1.4>\n@assert multiply(148, 412) == 16\n@assert\
    \ multiply(19, 28) == 72\n@assert multiply(2020, 1851) == 0 \n@assert multiply(14,-15)\
    \ == 20\n</cell>\n<text>\nExercise 2\nWrite a function that takes two integers\
    \ and returns the sum of their unit digits.\nAssume the input is always valid.\n\
    Examples:\nsum(148, 412) should return 16.\nsum(19, 28) should return 72.\nsum(2020,\
    \ 1851) should return 0.\nsum(14,-15) should return 20.\nsum(1,0) should return\
    \ 0.\nsum(0,1) should return 1.\nsum(1,-1) should return -1.\nsum(1,-2) should\
    \ return -2.\nsum(1,-25) should return -25.\nsum(1,-250) should return -250.\n\
    sum(1,-2501) should return -2501.\nsum(1,-2501) should return -2501.\nsum(1,-2501)\
    \ should return -2501.\nsum(1,-2501) should return -2501.\nsum(1,-2501) should\
    \ return -2501.\nsum(1,-2501) should return -2501.\nsum(1,-2501) should return\
    \ -2501.\nsum(1,-2501) should return -2501.\nsum(1,-2501) should return -2501.\n\
    sum(1,-2501) should return -2501.\nsum(1,-2501) should return -2501.\nsum(1,-2501)\
    \ should return -2501.\nsum(1,-2501) should return -2501.\nsum(1,-2501) should\
    \ return -2501.\nsum(1,-2501) should return -2501.\nsum(1,-2501) should return\
    \ -2501.\nsum(1,-2501) should return -2501.\nsum(1,-2501) should return -2501.\n\
    sum(1,-2501) should return -2501.\nsum(1,-2501) should return -2501.\nsum(1,-2501)\
    \ should return -2501.\nsum(1,-2501) should return -2501.\nsum(1,-2501) should\
    \ return -2501.\nsum(1,-2501) should return -2501.\nsum(1,-2501) should return\
    \ -2501.\nsum(1,-2501) should return -2501.\nsum(1,-2501) should return -2501.\n\
    sum(1,-2501) should return -250\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\
    \t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4hhqiuxq.jl:17\nin expression starting at\
    \ /tmp/tmp4hhqiuxq.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if a < 0 || b < 0\n        error(\"Invalid input\")\n    elseif b == 0\n\
    \        return a\n    else\n        return a*b\n    end\nend\n\"\"\"\n    \n\"\
    \"\"\n    \n    \n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\
    \"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\
    \"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\
    \"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\
    \n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\
    \"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\
    \"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\
    \"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\
    \n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\
    \"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\
    \"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\
    \"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\
    \n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\
    \"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\
    \"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\
    \"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\
    \n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\
    \"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\
    \"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\
    \"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\
    \n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\
    \"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\
    \"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\
    \"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\
    \n\"\"\"\n\"\"\"\n\"\"\"\n\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\
    \t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: cannot document the following expression:\n\n\"\"\n\n\
    Stacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpf20wkuom.jl:24\nin expression starting at /tmp/tmpf20wkuom.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        return 0 \n    else \n        return (a * b) % (10^9\
    \ + 7)\nend\n</cell>\n<code language=julia-1.5>\n@assert multiply(148, 412) ==\
    \ 16\n@assert multiply(19, 28) == 72\n@assert multiply(2020, 1851) == 0\n@assert\
    \ multiply(14,-15) == 20\n</cell>\n<text>\nProblem 3\nWrite a function that returns\
    \ the sum of the digits of its input. \n    For example, sum(\"1234\") should\
    \ return 6. \n    Use a while loop to solve this problem.\n    \n    Examples:\n\
    \    sum(\"1234\") should return 6.\n    sum(\"123\") should return 3.\n    sum(\"\
    1\") should return 1.\n    sum(\"0\") should return 0.\n    sum(\"-1\") should\
    \ return -1.\n    sum(\"-10\") should return -10.\n    sum(\"100\") should return\
    \ 10.\n    sum(\"101\") should return 11.\n    sum(\"1001\") should return 21.\n\
    \    sum(\"10001\") should return 42.\n    sum(\"1001001\") should return 420.\n\
    \    sum(\"100100101\") should return 4200.\n    sum(\"1001001001\") should return\
    \ 42000.\n    sum(\"100100100101\") should return 42000.\n    sum(\"1001001001001\"\
    ) should return 42000.\n    sum(\"100100100100101\") should return 42000.\n  \
    \  sum(\"1001001001001001\") should return 42000.\n    sum(\"100100100100100101\"\
    ) should return 42000.\n    sum(\"1001001001001001001\") should return 42000.\n\
    \    sum(\"100100100100100100101\") should return 42000.\n    sum(\"1001001001001001001001\"\
    ) should return 42000.\n    sum(\"100100100100100100100101\") should return 42000.\n\
    \    sum(\"1001001001001001001001001\") should return 42000.\n    sum(\"100100100100100100100100101\"\
    ) should return 42000.\n    sum(\"1001001001001001001001001001\") should return\
    \ 42000.\n    sum(\"100100100100100100100100100101\") should return 42000.\n \
    \   sum(\"1001001001001001001001001001001\") should return 42000.\n    sum(\"\
    100100100100100100100100100100101\") should return 42000.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19,\
    \ 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15)\
    \ == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\
    \t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfq_x2ykv.jl:16\nin expression starting at\
    \ /tmp/tmpfq_x2ykv.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if a < 0 || b < 0 \n        error(\"Invalid input\") \n    else if a ==\
    \ 0 || b == 0 \n        0 \n    else \n        digits(a) * digits(b) \nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\
    \t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph_q4cb47.jl:13\nin expression starting at\
    \ /tmp/tmph_q4cb47.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        return 0 \n    else \n        return (a * 10 + b)\
    \ \n    end\nend\n</cell>\n<code language=julia-1.0>\nmultiply(148, 412)\n</cell>\n\
    <code language=julia-1.0>\nmultiply(19, 28)\n</cell>\n<code language=julia-1.0>\n\
    multiply(2020, 1851)\n</cell>\n<code language=julia-1.0>\nmultiply(14,-15)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes two integers and returns the sum\
    \ of the \n    unit digits of their product (that is, the product of their unit\
    \ \n    digits).\n    For example: multiply(148, 412) should return 16.\n    multiply(19,\
    \ 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    multiply(-14, -15) should return -20.\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprqgz42jv.jl:17\nin expression starting at\
    \ /tmp/tmprqgz42jv.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if a < 0 || b < 0\n        error(\"Invalid input\")\n    elseif b == 0\n\
    \        return a\n    else\n        return a*b\n    end\nend\n\"\"\"\n    \n\"\
    \"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n   \
    \ \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\
    \"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n   \
    \ \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\
    \"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n   \
    \ \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\
    \"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n   \
    \ \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\
    \"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n   \
    \ \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\
    \"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n   \
    \ \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\
    \"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n   \
    \ \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\
    \"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n   \
    \ \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\
    \"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n   \
    \ \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\
    \"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n   \
    \ \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\
    \"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n   \
    \ \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\nusing Test\n\n@testset begin\n\
    \ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19,\
    \ 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15)\
    \ == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\
    \t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpaohntcv3.jl:257\nin expression starting at\
    \ /tmp/tmpaohntcv3.jl:257\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0\n        0\n    else\n        (a * 10 + b) mod 10\n    end\n\
    end\n</cell>\n<code language=julia-1.3>\n@assert multiply(148, 412) == 16\n@assert\
    \ multiply(19, 28) == 72\n@assert multiply(2020, 1851) == 0\n@assert multiply(14,-15)\
    \ == 20\n</cell>\n<text>\nExercise 3\nWrite a function that takes two integers\
    \ and returns the sum of the \n    unit digits of their product (that is, the\
    \ product of their unit \n    digits).\n    For example, multiply(148, 412) should\
    \ return 16.\n    For example, multiply(19, 28) should return 72.\n    For example,\
    \ multiply(2020, 1851) should return 0.\n    For example, multiply(14,-15) should\
    \ return 20.\n    For example, multiply(-14, -15) should return -20.\n    For\
    \ example, multiply(-14, -40) should return -40.\n    For example, multiply(-14,\
    \ -40) should return -40.\n    For example, multiply(-14, -40) should return -40.\n\
    \    For example, multiply(-14, -40) should return -40.\n    For example, multiply(-14,\
    \ -40) should return -40.\n    For example, multiply(-14, -40) should return -40.\n\
    \    For example, multiply(-14, -40) should return -40.\n    For example, multiply(-14,\
    \ -40) should return -40.\n    For example, multiply(-14, -40) should return -40.\n\
    \    For example, multiply(-14, -40) should return -40.\n    For example, multiply(-14,\
    \ -40) should return -40.\n    For example, multiply(-14, -40) should return -40.\n\
    \    For example, multiply(-14, -40) should return -40.\n    For example, multiply(-14,\
    \ -40) should return -40.\n    For example, multiply(-14, -40) should return -40.\n\
    \    For example, multiply(-14, -40) should return -40.\n    For example, multiply(-14,\
    \ -40) should return -40.\n    For example, multiply(-14, -40) should return -40.\n\
    \    For example, multiply(-14, -40) should return -40.\n    For example, multiply(-14,\
    \ -40) should return -40.\n    For example, multiply(-14, -40) should return -40.\n\
    \    For example, multiply(-14, -40) should return -40.\n    For example, multiply(-14,\
    \ -40) should return -40.\n    For example, multiply(-14, -40) should return -40.\n\
    \    For example, multiply(-14, -40) should return -40.\n    For example, multiply(-14,\
    \ -40) should return -40.\n    For example, multiply(-14, -40) should return -40.\n\
    using Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmpf7xrbl50.jl:11 expected \"\
    end\", got \"mod\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpf7xrbl50.jl:14\n\
    in expression starting at /tmp/tmpf7xrbl50.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        return 0 \n    else \n        return (a * b) % (10^9\
    \ + 7)\nend\n</cell>\n<code language=julia-1.5>\nmultiply(148, 412)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(19, 28)\n</cell>\n<code language=julia-1.5>\n\
    multiply(2020, 1851)\n</cell>\n<code language=julia-1.5>\nmultiply(14,-15)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector of integers and returns\
    \ the sum of the squares of the unit digits. \nFor example, \n    sum([1, 2, 3,\
    \ 4]) should return 25.\n    sum([1, 2, -3, 4]) should return 4.\n    sum([1,\
    \ 2, -3, 4], 2) should return -15.\n    sum([1, 2, -3, 4], 3) should return -14.\n\
    \    sum([1, 2, -3, 4], 4) should return 0.\n    sum([1, 2, -3, 4], 5) should\
    \ return 0.\n    sum([1, 2, -3, 4], 6) should return 0.\n    sum([1, 2, -3, 4],\
    \ 7) should return 0.\n    sum([1, 2, -3, 4], 8) should return 0.\n    sum([1,\
    \ 2, -3, 4], 9) should return 0.\n    sum([1, 2, -3, 4], 10) should return 0.\n\
    \    sum([1, 2, -3, 4], 11) should return 0.\n    sum([1, 2, -3, 4], 12) should\
    \ return 0.\n    sum([1, 2, -3, 4], 13) should return 0.\n    sum([1, 2, -3, 4],\
    \ 14) should return 0.\n    sum([1, 2, -3, 4], 15) should return 0.\n    sum([1,\
    \ 2, -3, 4], 16) should return 0.\n    sum([1, 2, -3, 4], 17) should return 0.\n\
    \    sum([1, 2, -3, 4], 18) should return 0.\n    sum([1, 2, -3, 4], 19) should\
    \ return 0.\n    sum([1, 2, -3, 4], 20) should return 0.\n    sum([1, 2, -3, 4],\
    \ 21) should return 0.\n    sum([1, 2, -3, 4], 22) should return 0.\n    sum([1,\
    \ 2, -3, 4], 23) should return 0.\n    sum([1, 2, -3, 4], 24) should return 0.\n\
    \    sum([1, 2, -3, 4], 25) should return 0.\n    sum([1, 2, -3, 4], 26) should\
    \ return 0.\n    sum([1, 2, -3, 4], 27) should return 0.\n    sum([1, 2, -3, 4],\
    \ 28) should return 0.\n    sum([1, 2, -3, 4], 29) should return 0.\n    sum([1,\
    \ 2, -3, 4], 30) should return 0.\n    sum([1, 2, -3, 4], 31) should return 0.\n\
    \    sum([1, 2, -3, 4], 32) should return 0.\n    sum([1, 2, -3, 4], 33) should\
    \ return 0.\n    sum([\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\
    \t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5cmqc4uc.jl:16\nin expression starting at\
    \ /tmp/tmp5cmqc4uc.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0\n        0\n    else\n        (a * b) % 10\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n# Test your function\n@assert multiply(148, 412) ==\
    \ 16\n@assert multiply(19, 28) == 72\n@assert multiply(2020, 1851) == 0 \n@assert\
    \ multiply(14,-15) == 20\n</cell>\n<text>\nProblem 3\nUsing your multiply function,\
    \ write a function called digits that takes in an \n    integer and returns the\
    \ number of digits in that integer.\n    Examples:\n    digits(12) should return\
    \ 2.\n    digits(14) should return 3.\n    digits(99) should return 4.\n    digits(10101)\
    \ should return 5.\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\
    \t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcw_a2o1a.jl:17\nin expression starting at\
    \ /tmp/tmpcw_a2o1a.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        0\n    else\n        (a*b).digits\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"Complete the function that takes two\
    \ integers and returns \n    the product of their unit digits.\n    Assume the\
    \ input is always valid.\n    Examples:\n    multiply(148, 412) should return\
    \ 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should\
    \ return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t\
    @test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14,\
    \ -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) ==\
    \ 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5ht4aygm.jl:17\nin expression starting at\
    \ /tmp/tmp5ht4aygm.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0\n        0\n    else\n        (a * b) mod 10\n    end\nend\n\
    </cell>\n<code language=julia-1.3>\n\"\"\"Complete the function that takes two\
    \ integers and returns \n    the product of their unit digits.\n    Assume the\
    \ input is always valid.\n    Examples:\n    multiply(148, 412) should return\
    \ 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should\
    \ return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t\
    @test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14,\
    \ -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) ==\
    \ 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmpbwrwyy1q.jl:11 expected \"\
    end\", got \"mod\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpbwrwyy1q.jl:14\n\
    in expression starting at /tmp/tmpbwrwyy1q.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        0\n    else\n        (a * b) mod 10\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nmultiply(148, 412)\n</cell>\n<code language=julia-1.5>\n\
    multiply(19, 28)\n</cell>\n<code language=julia-1.5>\nmultiply(2020, 1851)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(14,-15)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes an integer and returns the sum of the digits of that integer.\n\
    Examples:\nsum(12) should return 3.\nsum(123) should return 6.\nsum(1234) should\
    \ return 10.\nsum(12345) should return 15.\nsum(123456) should return 20.\nsum(1234567)\
    \ should return 30.\nsum(12345678) should return 40.\nsum(123456789) should return\
    \ 50.\nsum(1234567890) should return 60.\nsum(12345678901) should return 70.\n\
    sum(123456789012) should return 80.\nsum(1234567890123) should return 90.\nsum(12345678901234)\
    \ should return 100.\nsum(123456789012345) should return 110.\nsum(1234567890123456)\
    \ should return 120.\nsum(12345678901234567) should return 130.\nsum(123456789012345678)\
    \ should return 140.\nsum(1234567890123456789) should return 150.\nsum(12345678901234567890)\
    \ should return 160.\nsum(123456789012345678901) should return 170.\nsum(1234567890123456789012)\
    \ should return 180.\nsum(12345678901234567890123) should return 190.\nsum(123456789012345678901234)\
    \ should return 200.\nsum(1234567890123456789012345) should return 210.\nsum(12345678901234567890123456)\
    \ should return 220.\nsum(123456789012345678901234567) should return 230.\nsum(1234567890123456789012345678)\
    \ should return 240.\nsum(12345678901234567890123456789) should return 250.\n\
    sum(123456789012345678901234567890) should return 260.\nsum(1234567890123456789012345678901)\
    \ should return 270.\nsum(12345678901234567890123456789012) should return 280.\n\
    sum(123456789012345678901234567890123) should return 290.\nsum(1234567890123456789012345678901234)\
    \ should return 300.\nsum(12345678901234567890123456789012345) should return 310.\n\
    sum(123456789012345678901234567890123456) should return 320.\nsum(1234567890123456789012345678901234567)\
    \ should return 330.\nsum(12345678901234567890123456789012345678) should return\
    \ 340.\nsum(123456789012345678901234567890123456789) should return 350.\nsum(1234567890123456789012345678901234567890)\
    \ should return 360.\nsum(12345678901234567890123456789012345678901) should return\
    \ 37\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmpm0uyul4k.jl:11 expected \"\
    end\", got \"mod\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpm0uyul4k.jl:14\n\
    in expression starting at /tmp/tmpm0uyul4k.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        0\n    else\n        (a * b) % 10\n    end\nend\n\
    </code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nusing Test\n\n@testset begin\n\
    \ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19,\
    \ 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15)\
    \ == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\
    \t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpylw1lh3b.jl:17\nin expression starting at\
    \ /tmp/tmpylw1lh3b.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0\n        0\n    elseif b < 0\n        multiply(-a, -b)\n   \
    \ else\n        (a * b).digits\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"Complete the function that takes two integers and returns \n    the product\
    \ of their unit digits.\n    Assume the input is always valid.\n    Examples:\n\
    \    multiply(148, 412) should return 16.\n    multiply(19, 28) should return\
    \ 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should\
    \ return 20.\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\
    \t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpeq2oxa0c.jl:19\nin expression starting at\
    \ /tmp/tmpeq2oxa0c.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if a < 0 || b < 0\n        error(\"Invalid input\")\n    elseif b == 0\n\
    \        return a\n    else\n        return a*b\n    end\nend\n</cell>\n<code\
    \ language=julia-1.0>\n\"\"\"Complete the function that takes two integers and\
    \ returns \n    the product of their unit digits.\n    Assume the input is always\
    \ valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19,\
    \ 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\
    \t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpclr2mzzq.jl:19\nin expression starting at\
    \ /tmp/tmpclr2mzzq.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if a < 0 || b < 0 \n        error(\"Invalid input\")\n    elseif b ==\
    \ 0 \n        return a\n    elseif b == 1 \n        return a * b\n    elseif b\
    \ > a \n        return multiply(b, a % b)\n    else\n        return multiply(a\
    \ % b, b)\n    end\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis does not provide\
    \ an answer to the question. To critique or request clarification from an author,\
    \ leave a comment below their post. - [From Review](/review/low-quality-posts/26899439)\n\
    <|/ c |>\n<| c |>\nI believe it does answer the question. He asked how to implement\
    \ the function `multiply` which returns the product of their unit digits. He also\
    \ asked how to implement the function `isUnitDigit` which checks if a number is\
    \ a unit digit. He also asked how to implement the function `isUnitDigit` which\
    \ checks if a number is a unit digit. He also asked how to implement the function\
    \ `isUnitDigit` which checks if a number is a unit digit. He also asked how to\
    \ implement the function `isUnitDigit` which checks if a number is a unit digit.\
    \ He also asked how to implement the function `isUnitDigit` which checks if a\
    \ number is a unit digit. He also asked how to implement the function `isUnitDigit`\
    \ which checks if a number is a unit digit. He also asked how to implement the\
    \ function `isUnitDigit` which checks if a number is a unit digit.\n<|/ c |>\n\
    <| c |>\nThis does not provide an answer to the question. To critique or request\
    \ clarification from an author, leave a comment below their post. - [From Review](/review/low-quality-posts/26899439)\n\
    <|/ c |>\n<| c |>\nI believe it does answer the question. He asked how to implement\
    \ the function `multiply` which returns the product of their unit digits. He also\
    \ asked how to implement the function `isUnitDigit` which checks if a number is\
    \ a unit digit. He also asked how to implement the function `isUnitDigit` which\
    \ checks if a number is a unit digit. He also asked how to implement the function\
    \ `isUnitDigit` which checks if a number is a unit digit. He also asked how to\
    \ implement the function `isUnitDigit` which checks if a number is a unit digit.\
    \ He also as\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwr96bw_p.jl:23\nin expression starting at\
    \ /tmp/tmpwr96bw_p.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0\n        0\n    else\n        (a*b).digits(2)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"Complete the function that takes two\
    \ integers and returns \n    the product of their unit digits.\n    Assume the\
    \ input is always valid.\n    Examples:\n    multiply(148, 412) should return\
    \ 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should\
    \ return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t\
    @test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14,\
    \ -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) ==\
    \ 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4fy_duns.jl:17\nin expression starting at\
    \ /tmp/tmp4fy_duns.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        return 0 \n    else \n        return a * b / b \n\
    end\n</cell>\n<code language=julia-1.5>\nmultiply(148, 412)\n</cell>\n<code language=julia-1.5>\n\
    multiply(19, 28)\n</cell>\n<code language=julia-1.5>\nmultiply(2020, 1851)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(14,-15)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes two integers and returns the sum of the unit digits of\
    \ their product \n    For example: multiply(148, 412) should return 16.\n    multiply(19,\
    \ 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    multiply(-14, -15) should return -20.\n    multiply(-14,\
    \ -15) should return -20.\n    multiply(-14, -15) should return -20.\n    multiply(-14,\
    \ -15) should return -20.\n    multiply(-14, -15) should return -20.\n    multiply(-14,\
    \ -15) should return -20.\n    multiply(-14, -15) should return -20.\n    multiply(-14,\
    \ -15) should return -20.\n    multiply(-14, -15) should return -20.\n    multiply(-14,\
    \ -15) should return -20.\n    multiply(-14, -15) should return -20.\n    multiply(-14,\
    \ -15) should return -20.\n    multiply(-14, -15) should return -20.\n    multiply(-14,\
    \ -15) should return -20.\n    multiply(-14, -15) should return -20.\n    multiply(-14,\
    \ -15) should return -20.\n    multiply(-14, -15) should return -20.\n    multiply(-14,\
    \ -15) should return -20.\n    multiply(-14, -15) should return -20.\n    multiply(-14,\
    \ -15) should return -20.\n    multiply(-14, -15) should return -20.\n    multiply(-14,\
    \ -15) should return -20.\n    multiply(-14, -15) should return -20.\n    multiply(-14,\
    \ -15) should return -20.\n    multiply(-14, -15) should return -20.\n    multiply(-14,\
    \ -15) should return -20.\n    multiply(-14, -15) should return -20.\n    multiply(-14,\
    \ -15) should return -20.\n    multiply(-14, -15) should return -20.\n    multiply(-14,\
    \ -15) should return -20.\n    multiply(-14, -15) should return -20.\n    multiply(-14,\
    \ -15) should return -20.\n    multiply(-14, -15) should return -20.\n    multiply(\n\
    using Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp37pkr_km.jl:16\nin expression starting at\
    \ /tmp/tmp37pkr_km.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        0\n    elseif b < 0 \n        multiply(a, -b)\n  \
    \  elseif b > 0 \n        multiply(a, b / 10)\n    elseif b < 0 \n        multiply(a,\
    \ -b / 10)\n    elseif b > 0 \n        multiply(a, b / 10)\n    elseif b < 0 \n\
    \        multiply(a, -b / 10)\n    elseif b > 0 \n        multiply(a, b / 10)\n\
    \    elseif b < 0 \n        multiply(a, -b / 10)\n    elseif b > 0 \n        multiply(a,\
    \ b / 10)\n    elseif b < 0 \n        multiply(a, -b / 10)\n    elseif b > 0 \n\
    \        multiply(a, b / 10)\n    elseif b < 0 \n        multiply(a, -b / 10)\n\
    \    elseif b > 0 \n        multiply(a, b / 10)\n    elseif b < 0 \n        multiply(a,\
    \ -b / 10)\n    elseif b > 0 \n        multiply(a, b / 10)\n    elseif b < 0 \n\
    \        multiply(a, -b / 10)\n    elseif b > 0 \n        multiply(a, b / 10)\n\
    \    elseif b < 0 \n        multiply(a, -b / 10)\n    elseif b > 0 \n        multiply(a,\
    \ b / 10)\n    elseif b < 0 \n        multiply(a, -b / 10)\n    elseif b > 0 \n\
    \        multiply(a, b / 10)\n    elseif b < 0 \n        multiply(a, -b / 10)\n\
    \    elseif b > 0 \n        multiply(a, b / 10)\n    elseif b < 0 \n        multiply(a,\
    \ -b / 10)\n    elseif b > 0 \n        multiply(a, b / 10)\n    elseif b < 0 \n\
    \        multiply(a, -b / 10)\n    elseif b > 0 \n        multiply(a, b / 10)\n\
    \    elseif b < 0 \n        multiply(a, -b / 10)\n    elseif b > 0 \n        multiply(a,\
    \ b / 10)\n    elseif b < 0 \n        multiply(a, -b / 10)\n    elseif b > 0 \n\
    \        multiply(a, b / 10)\n    elseif b < 0 \n        multiply(a, -b / 10)\n\
    \    elseif b > 0 \n        multiply(a, b / 10)\n    elseif b < 0 \n        multiply(a,\
    \ -b / 10)\n    elseif b > 0 \n        multiply(a, b / 10)\n    elseif b < 0 \n\
    \        multiply(a, -b / 10)\n    elseif b > 0 \n        multiply(a, b / 10)\n\
    \    elseif b < 0 \n        multiply(a, -b / 10)\n    elseif b > 0 \n        multiply(a,\
    \ b / 10)\n    elseif b < 0 \n        multiply(a, -b / \nusing Test\n\n@testset\
    \ begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19,\
    \ 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15)\
    \ == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\
    \t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpew_5_efj.jl:93\nin expression starting at\
    \ /tmp/tmpew_5_efj.jl:93\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        0\n    elseif b < 0 \n        multiply(a, -b)\n  \
    \  elseif b > 0 \n        multiply(a, b / 10)\n    else\n        multiply(a, b\
    \ / 10)\n    end\nend\n</cell>\n<code language=julia-1.5>\nmultiply(148, 412)\n\
    </cell>\n<code language=julia-1.5>\nmultiply(19, 28)\n</cell>\n<code language=julia-1.5>\n\
    multiply(2020, 1851)\n</cell>\n<code language=julia-1.5>\nmultiply(14,-15)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes two integers and returns the sum\
    \ of the unit digits of their product \n    (i.e. the sum of the digits of their\
    \ product times 10). \n    For example, multiply(148, 412) should return 16.\n\
    \    Use a while loop to keep adding digits of their product until their product\
    \ is greater than \n    or equal to 10.\n    Use a while loop to keep adding digits\
    \ of their product until their product is less than \n    or equal to 0.\n   \
    \ Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should\
    \ return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\
    \t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxh7yenfl.jl:21\nin expression starting at\
    \ /tmp/tmpxh7yenfl.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        0\n    else\n        (a*b).digits[1]\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpfzjbmq06.jl:22\n  Test threw exception\n\
    \  Expression: candidate(148, 412) == 16\n  type Int64 has no field digits\n \
    \ Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] multiply(a::Int64,\
    \ b::Int64)\n     @ Main /tmp/tmpfzjbmq06.jl:14\n   [3] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [4] macro expansion\n     @ /tmp/tmpfzjbmq06.jl:22 [inlined]\n   [5] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpfzjbmq06.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpfzjbmq06.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(19, 28) == 72\n  type Int64 has no field digits\n  Stacktrace:\n \
    \  [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] multiply(a::Int64, b::Int64)\n\
    \     @ Main /tmp/tmpfzjbmq06.jl:14\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpfzjbmq06.jl:23 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpfzjbmq06.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpfzjbmq06.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(2020, 1851) == 0\n  type Int64 has no field digits\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] multiply(a::Int64,\
    \ b::Int64)\n     @ Main /tmp/tmpfzjbmq06.jl:14\n   [3] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [4] macro expansion\n     @ /tmp/tmpfzjbmq06.jl:24 [inlined]\n   [5] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpfzjbmq06.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpfzjbmq06.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(14, -15) == 20\n  type Int64 has no field digits\n  Stacktrace:\n\
    \   [1"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfzjbmq06.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if a < 0 || b < 0\n        error(\"Invalid input\")\n    else if a ==\
    \ 0 || b == 0\n        return 0\n    else\n        return (a * b) mod 10\n   \
    \ end\nend\n\"\"\"\n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n\"\"\"\
    \n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\
    \"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n\
    \    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\
    \"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n \
    \   \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\
    \"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n \
    \   \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\
    \"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n \
    \   \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\
    \"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n \
    \   \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\
    \"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n \
    \   \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\
    \"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n \
    \   \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\
    \"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n \
    \   \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\
    \"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n \
    \   \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\
    \"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n \
    \   \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19,\
    \ 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15)\
    \ == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\
    \t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq1wap09f.jl:13\nin expression starting at\
    \ /tmp/tmpq1wap09f.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        0\n    else\n        (a * b) / b\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert multiply(148, 412) == 16\n@assert multiply(19,\
    \ 28) == 72\n@assert multiply(2020, 1851) == 0 \n@assert multiply(14,-15) == 20\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the sum of the digits\
    \ of its input. \nExamples:\nsum(\"123\") should return 6.\nsum(\"12\") should\
    \ return 3.\nsum(\"1\") should return 1.\nsum(\"0\") should return 0.\nsum(\"\"\
    ) should return 0.\nsum(\" \") should return 0.\nsum(\" 1\") should return 1.\n\
    sum(\" 1 \") should return 2.\nsum(\" 1 2\") should return 3.\nsum(\" 1 2 \")\
    \ should return 4.\nsum(\" 1 2 3\") should return 5.\nsum(\" 1 2 3 4\") should\
    \ return 6.\nsum(\" 1 2 3 4 5\") should return 7.\nsum(\" 1 2 3 4 5 6\") should\
    \ return 8.\nsum(\" 1 2 3 4 5 6 7\") should return 9.\nsum(\" 1 2 3 4 5 6 7 8\"\
    ) should return 10.\nsum(\" 1 2 3 4 5 6 7 8 9\") should return 11.\nsum(\" 1 2\
    \ 3 4 5 6 7 8 9 0\") should return 12.\nsum(\" 1 2 3 4 5 6 7 8 9 0 1\") should\
    \ return 13.\nsum(\" 1 2 3 4 5 6 7 8 9 0 1 2\") should return 14.\nsum(\" 1 2\
    \ 3 4 5 6 7 8 9 0 1 2 3\") should return 15.\nsum(\" 1 2 3 4 5 6 7 8 9 0 1 2 3\
    \ 4\") should return 16.\nsum(\" 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\") should return\
    \ 17.\nsum(\" 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6\") should return 18.\nsum(\" 1 2\
    \ 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7\") should return 19.\nsum(\" 1 2 3 4 5 6 7 8 9\
    \ 0 1 2 3 4 5 6 7 8\") should return 20.\nsum(\" 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\
    \ 6 7 8 9\") should return 21.\nsum(\" 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0\"\
    ) should return 22.\nsum(\" 1 2 3 4 5 6 7 8 9 \nusing Test\n\n@testset begin\n\
    \ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19,\
    \ 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15)\
    \ == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\
    \t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6hpakbz1.jl:17\nin expression starting at\
    \ /tmp/tmp6hpakbz1.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0\n        return a\n    \n    digits = divrem(a, b) \n    \n\
    \    if digits[1] == 0\n        return digits[2]\n    \n    digits[1] = digits[1]\
    \ - 1\n    \n    return multiply(digits[1], digits[2]) * digits[1] + digits[2]\n\
    end\n</cell>\n<code language=julia-1.5>\nmultiply(148, 412)\n</cell>\n<code language=julia-1.5>\n\
    multiply(19, 28)\n</cell>\n<code language=julia-1.5>\nmultiply(2020, 1851)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(14,-15)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes in two integers and returns the sum of the \nunit digits\
    \ of their product (without using any built-in functions).\nExamples:\n    productSum(148,\
    \ 412) should return 16.\n    productSum(19, 28) should return 72.\n    productSum(2020,\
    \ 1851) should return 0.\n    productSum(14,-15) should return 20.\n    \"\"\"\
    \nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1jpq1i6d.jl:23\nin expression starting at\
    \ /tmp/tmp1jpq1i6d.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if a < 0 || b < 0\n        error(\"Invalid input\")\n    else if a ==\
    \ 0 || b == 0\n        0\n    else\n        digits(a) * digits(b)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"Complete the function that takes two\
    \ integers and returns \n    the product of their unit digits.\n    Assume the\
    \ input is always valid.\n    Examples:\n    multiply(148, 412) should return\
    \ 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should\
    \ return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t\
    @test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14,\
    \ -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) ==\
    \ 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsefgjz7p.jl:13\nin expression starting at\
    \ /tmp/tmpsefgjz7p.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        0\n    else\n        (a*b)/10\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"Complete the function that takes two integers\
    \ and returns \n    the product of their unit digits.\n    Assume the input is\
    \ always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n   \
    \ multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n\
    \    multiply(14,-15) should return 20.\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19,\
    \ 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15)\
    \ == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\
    \t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2adev_rg.jl:17\nin expression starting at\
    \ /tmp/tmp2adev_rg.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        0\n    else\n        (a * 10 + b) mod 10\n    end\n\
    end\n</code>\n<|/ a tags=julia,integer-division |>\n<| c |>\nThis doesn't work\
    \ if `b` is negative.\n<|/ c |>\n<| c |>\nI believe it does. `b` is an `Int64`,\
    \ so `b * 10` will always be positive.\n<|/ c |>\n<| c |>\nNo, `b` is an `Int64`,\
    \ so `b * 10` will always be positive.\n<|/ c |>\n<| c |>\nAh, I see. Thanks for\
    \ pointing that out. I've edited my answer to fix it.\n<|/ c |>\n<| a dscore=3\
    \ |>\nThe simplest solution is to use divrem, which does exactly what you want:\n\
    <code>\njulia> divrem(148, 412)\n16\nusing Test\n\n@testset begin\n\ncandidate\
    \ = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) ==\
    \ 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\
    \t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0,\
    \ 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmpmazlckpo.jl:11 expected \"\
    end\", got \"mod\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmazlckpo.jl:14\n\
    in expression starting at /tmp/tmpmazlckpo.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if a < 0 || b < 0 \n        error(\"The inputs must be positive\")\n \
    \   else if a == 0 || b == 0\n        error(\"The inputs must be positive\")\n\
    \    else if a == 0 || b == 0\n        error(\"The inputs must be positive\")\n\
    \    else if a == 0 || b == 0\n        error(\"The inputs must be positive\")\n\
    \    else if a == 0 || b == 0\n        error(\"The inputs must be positive\")\n\
    \    else if a == 0 || b == 0\n        error(\"The inputs must be positive\")\n\
    \    else if a == 0 || b == 0\n        error(\"The inputs must be positive\")\n\
    \    else if a == 0 || b == 0\n        error(\"The inputs must be positive\")\n\
    \    else if a == 0 || b == 0\n        error(\"The inputs must be positive\")\n\
    \    else if a == 0 || b == 0\n        error(\"The inputs must be positive\")\n\
    \    else if a == 0 || b == 0\n        error(\"The inputs must be positive\")\n\
    \    else if a == 0 || b == 0\n        error(\"The inputs must be positive\")\n\
    \    else if a == 0 || b == 0\n        error(\"The inputs must be positive\")\n\
    \    else if a == 0 || b == 0\n        error(\"The inputs must be positive\")\n\
    \    else if a == 0 || b == 0\n        error(\"The inputs must be positive\")\n\
    \    else if a == 0 || b == 0\n        error(\"The inputs must be positive\")\n\
    \    else if a == 0 || b == 0\n        error(\"The inputs must be positive\")\n\
    \    else if a == 0 || b == 0\n        error(\"The inputs must be positive\")\n\
    \    else if a == 0 || b == 0\n        error(\"The inputs must be positive\")\n\
    \    else if a == 0 || b == 0\n        error(\"The inputs must be positive\")\n\
    \    else if a == 0 || b == 0\n        error(\"The inputs must be positive\")\n\
    \    else if a == 0 || b == 0\n        error(\"The inputs must be positive\")\n\
    \    else if a == 0 || b == 0\n        error(\"The inputs must be positive\")\n\
    \    else if a == 0 || b == 0\n        error(\"The inputs must be positive\")\n\
    \    else if a == 0 || b == 0\n        error(\"The inputs must be positive\")\n\
    \    else if a == 0 || b == 0\n        error(\"The inputs must be positive\")\n\
    \    else if a == 0 || b == 0\n        error(\"The inputs must be positive\")\n\
    \    else if a == 0 || b == 0\n        error(\"The inputs must be positive\")\n\
    \    else if a == 0 || b == 0\n        error(\"The inputs must be positive\")\n\
    \    else if a == 0 || b == 0\n        error(\"The inputs must be positive\")\n\
    \    else if a == 0 || b == 0\n        error(\"The inputs must be positive\")\n\
    \    else if a == 0 || b == 0\n        error(\"The inputs must be positive\")\n\
    \nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzq_w_gl7.jl:13\nin expression starting at\
    \ /tmp/tmpzq_w_gl7.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        return 0 \n    else \n        return (a * b) % (10^9\
    \ + 7)\nend\n</cell>\n<code language=julia-1.5>\n@assert multiply(148, 412) ==\
    \ 16\n@assert multiply(19, 28) == 72\n@assert multiply(2020, 1851) == 0\n@assert\
    \ multiply(14,-15) == 20\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ two integers and returns the sum of the unit digits of their product \n    (i.e.,\
    \ if the product is $10^9 + 7$, then the sum is $10^9 + 7$).\n    For example,\
    \ multiply(148, 412) should return 16.\n    For example, multiply(19, 28) should\
    \ return 72.\n    For example, multiply(2020, 1851) should return 0.\n    For\
    \ example, multiply(14,-15) should return 20.\n    For example, multiply(-14,\
    \ -15) should return -20.\n    For example, multiply(-14, -85) should return -85.\n\
    \    For example, multiply(-14, -85) should return -85.\n    For example, multiply(-14,\
    \ -85) should return -85.\n    For example, multiply(-14, -85) should return -85.\n\
    \    For example, multiply(-14, -85) should return -85.\n    For example, multiply(-14,\
    \ -85) should return -85.\n    For example, multiply(-14, -85) should return -85.\n\
    \    For example, multiply(-14, -85) should return -85.\n    For example, multiply(-14,\
    \ -85) should return -85.\n    For example, multiply(-14, -85) should return -85.\n\
    \    For example, multiply(-14, -85) should return -85.\n    For example, multiply(-14,\
    \ -85) should return -85.\n    For example, multiply(-14, -85) should return -85.\n\
    \    For example, multiply(-14, -85) should return -85.\n    For example, multiply(-14,\
    \ -85) should return -85.\n    For example, multiply(-14, -85) should return -85.\n\
    \    For example, multiply(-14, -85) should return -85.\n    For example, multiply(-14,\
    \ -85) should return -85.\n    For example, multiply(-14, -85) should return -85.\n\
    \    For example, multiply(-14, -85) should return -85.\n    For example, multiply(-14,\
    \ -85) should return -85.\n    For example, multiply(-14, -85) should return -85.\n\
    \    For example, multiply(-14, -85) should return -85.\n    For example, multiply(-14,\
    \ -85) should return -85.\n\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\
    \t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjrrwa5xb.jl:16\nin expression starting at\
    \ /tmp/tmpjrrwa5xb.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0\n        0\n    else\n        (a*b).digits(2)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"Complete the function that takes two\
    \ integers and returns \n    the product of their unit digits.\n    Assume the\
    \ input is always valid.\n    Examples:\n    multiply(148, 412) should return\
    \ 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should\
    \ return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t\
    @test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14,\
    \ -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) ==\
    \ 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9zd7mepd.jl:17\nin expression starting at\
    \ /tmp/tmp9zd7mepd.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        0\n    else\n        (a * b) % 10\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert multiply(148, 412) == 16\n@assert\
    \ multiply(19, 28) == 72\n@assert multiply(2020, 1851) == 0\n@assert multiply(14,-15)\
    \ == 20\n</cell>\n<text>\nExercise 2\nWrite a function that takes two integers\
    \ and returns the sum of the \n    unit digits of their product (without using\
    \ multiplication).\n    For example:\n    sum(148, 412) should return 16.\n  \
    \  sum(19, 28) should return 72.\n    sum(2020, 1851) should return 0.\n    sum(14,-15)\
    \ should return 20.\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\
    \t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphpasm38_.jl:17\nin expression starting at\
    \ /tmp/tmphpasm38_.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if a < 0 || b < 0\n        error(\"Invalid input\")\n    elseif b == 0\n\
    \        return a\n    else\n        return a*b\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"Complete the function that takes two integers and\
    \ returns \n    the product of their unit digits.\n    Assume the input is always\
    \ valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19,\
    \ 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\
    \t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc37ii7py.jl:19\nin expression starting at\
    \ /tmp/tmpc37ii7py.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        0\n    elseif b < 0 \n        multiply(a, -b)\n  \
    \  else\n        (a * b) % 10\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"Complete the function that takes two integers and returns \n    the product\
    \ of their unit digits.\n    Assume the input is always valid.\n    Examples:\n\
    \    multiply(148, 412) should return 16.\n    multiply(19, 28) should return\
    \ 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should\
    \ return 20.\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\
    \t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpojtp8bh3.jl:19\nin expression starting at\
    \ /tmp/tmpojtp8bh3.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        0\n    elseif b < 0 \n        multiply(a, -b)\n  \
    \  elseif b > 0 \n        multiply(a, b)\n    elseif b == 0 \n        a\n    else\n\
    \        multiply(a, b / 10)\n    end\nend\n</code>\n<|/ a dscore=0 |>\n<| a tags=julia\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprp6w124u.jl:23\nin expression starting at\
    \ /tmp/tmprp6w124u.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if a < 0 || b < 0 \n        error(\"Invalid input\")\n    else if a ==\
    \ 0 || b == 0\n        0\n    else\n        (a * b).digits(2)\n    end\nend\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes two integers and returns\
    \ the sum of their unit digits.\nAssume the input is always valid.\nExamples:\n\
    sum(148, 412) should return 16.\nsum(19, 28) should return 72.\nsum(2020, 1851)\
    \ should return 0.\nsum(14,-15) should return 20.\nsum(0,0) should return 0.\n\
    sum(1,1) should return 1.\nsum(1,-1) should return 0.\nsum(1,-2) should return\
    \ 0.\nsum(1,-3) should return 0.\nsum(1,-4) should return 0.\nsum(1,-5) should\
    \ return 0.\nsum(1,-6) should return 0.\nsum(1,-7) should return 0.\nsum(1,-8)\
    \ should return 0.\nsum(1,-9) should return 0.\nsum(1,-10) should return 0.\n\
    sum(1,-11) should return 0.\nsum(1,-12) should return 0.\nsum(1,-13) should return\
    \ 0.\nsum(1,-14) should return 0.\nsum(1,-15) should return 0.\nsum(1,-16) should\
    \ return 0.\nsum(1,-17) should return 0.\nsum(1,-18) should return 0.\nsum(1,-19)\
    \ should return 0.\nsum(1,-20) should return 0.\nsum(1,-21) should return 0.\n\
    sum(1,-22) should return 0.\nsum(1,-23) should return 0.\nsum(1,-24) should return\
    \ 0.\nsum(1,-25) should return 0.\nsum(1,-26) should return 0.\nsum(1,-27) should\
    \ return 0.\nsum(1,-28) should return 0.\nsum(1,-29) should return 0.\nsum(1,-30)\
    \ should return 0.\nsum(1,-31) should return 0.\nsum(1,-32) should return 0.\n\
    sum(1,-33) should return 0.\nsum(1,-34) should return 0.\nsum(1,-35) should return\
    \ 0.\nsum(1,-36) should return 0.\nsum(1,-37) should return 0.\nsum(1,-38) should\
    \ return 0.\nsum(1,-39) should return 0.\nsum(1,-40) should return 0.\nsum(1,-41)\
    \ should return 0.\nsum(1,-42) should return 0.\nsum(1,-43) should return 0.\n\
    sum(1,-44) should return 0.\nsum(1,-45) should return 0.\nsum(1,-46) should return\
    \ 0.\nsum(1,\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp36eh_2h4.jl:13\nin expression starting at\
    \ /tmp/tmp36eh_2h4.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0\n        return a\n    else\n        return a*b\n    end\nend\n\
    \"\"\"\n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n\"\"\"\n   \
    \ \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n\
    \    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\
    \n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\
    \"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\
    \"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\
    \"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n   \
    \ \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n\
    \    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n  \
    \  \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n\
    \    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\
    \n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\
    \"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\
    \"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\
    \"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n   \
    \ \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n\
    \    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n  \
    \  \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n\
    \    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\
    \n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\
    \"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\
    \"\"\n    \n    \n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\
    \t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6xq7mile.jl:264\nin expression starting at\
    \ /tmp/tmp6xq7mile.jl:264\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if a < 0 || b < 0 \n        error(\"Invalid input\")\n    else if a ==\
    \ 0 || b == 0\n        0\n    else\n        (a * b) % 10\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"Complete the function that takes two integers\
    \ and returns \n    the product of their unit digits.\n    Assume the input is\
    \ always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n   \
    \ multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n\
    \    multiply(14,-15) should return 20.\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19,\
    \ 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15)\
    \ == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\
    \t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprzdvz4tf.jl:13\nin expression starting at\
    \ /tmp/tmprzdvz4tf.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        0\n    else\n        (a * 10 + b) mod 10\n    end\n\
    end\n</code>\n<|/ a |>\n<| c |>\nThis doesn't work for negative numbers. Try multiplying\
    \ `-14` and `-412`.\n<|/ c |>\n<| c |>\nI agree with you. My answer was meant\
    \ to be a general solution for any two integers. I edited my answer to include\
    \ a solution for negative numbers.\n<|/ c |>\n<| a tags=julia,algorithm |>\nThe\
    \ simplest solution is to use divrem:\n<code>\njulia> divrem(-140, -412)\n(20,\
    \ -15)\n</code>\n<|/ a dscore=3 |>\n<| a |>\nHere's a solution that doesn't use\
    \ divrem and doesn't require any packages:\n<code>\nusing Test\n\n@testset begin\n\
    \ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19,\
    \ 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15)\
    \ == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\
    \t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmpv7yw6x9k.jl:11 expected \"\
    end\", got \"mod\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpv7yw6x9k.jl:14\n\
    in expression starting at /tmp/tmpv7yw6x9k.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        return 0 \n    else \n        return (a * b) % (10^9\
    \ + 7)\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"Complete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should\
    \ return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851)\
    \ should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0t3wzc4j.jl:16\nin expression starting at\
    \ /tmp/tmp0t3wzc4j.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0\n        0\n    else\n        (a * b) % 10\n    end\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes two integers and returns the sum\
    \ of the \n    unit digits of their product (modulo 10).\n    Examples:\n    multiply(148,\
    \ 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3um2o98a.jl:17\nin expression starting at\
    \ /tmp/tmp3um2o98a.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0\n        return 0\n    if a < 0\n        return multiply(abs(a),\
    \ abs(b))\n    if b < 0\n        return multiply(abs(a), abs(b))\n    if a > b\n\
    \        return multiply(abs(a), abs(b))\n    if a < b\n        return multiply(a,\
    \ abs(b))\n    return a * b\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ multiply(148, 412) == 16\n@assert multiply(19, 28) == 72\n@assert multiply(2020,\
    \ 1851) == 0\n@assert multiply(14,-15) == 20\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes two integers and returns the sum of the unit digits of\
    \ their product (as described above).\nExamples:\n    sum(148, 412) should return\
    \ 16.\n    sum(19, 28) should return 72.\n    sum(2020, 1851) should return 0.\n\
    \    sum(14,-15) should return 20.\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19,\
    \ 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15)\
    \ == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\
    \t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfs_53wlh.jl:23\nin expression starting at\
    \ /tmp/tmpfs_53wlh.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0\n        0\n    elseif b < 0\n        multiply(-a, -b)\n   \
    \ else\n        (a * b) mod 10\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    multiply(148, 412)\n</cell>\n<code language=julia-1.5>\nmultiply(19, 28)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(2020, 1851)\n</cell>\n<code language=julia-1.5>\n\
    multiply(14,-15)\n</cell>\n<text>\nExercise 2\nWrite a function that takes two\
    \ integers and returns the sum of the \n    unit digits of their product (modulo\
    \ 10). \n    For example, multiply(148, 412) should return 16.\n    Use a while\
    \ loop to solve this problem.\n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\
    \t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmpwb0qaw1h.jl:13 expected \"\
    end\", got \"mod\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwb0qaw1h.jl:16\n\
    in expression starting at /tmp/tmpwb0qaw1h.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        return 0 \n    else \n        return (a * b) % (10^9\
    \ + 7)\nend\n</cell>\n<code language=julia-1.5>\n@assert multiply(148, 412) ==\
    \ 16\n@assert multiply(19, 28) == 72\n@assert multiply(2020, 1851) == 0\n@assert\
    \ multiply(14,-15) == 20\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ two integers and returns their sum.\nExamples:\nsum(148, 412) should return\
    \ 164.\nsum(19, 28) should return 72.\nsum(2020, 1851) should return 0.\nsum(14,-15)\
    \ should return 20.\nHint: use the + operator to add the two numbers.\nusing Test\n\
    \n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\
    \t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14,\
    \ -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) ==\
    \ 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2ubg7ua0.jl:16\nin expression starting at\
    \ /tmp/tmp2ubg7ua0.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0\n        return 0\n    else\n        return (a*b)/b\n    end\n\
    end\n</cell>\n<text>\nExercise 7\nWrite a function that takes two integers and\
    \ returns the sum of the \n    unit digits of their product (assuming the input\
    \ is valid).\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19,\
    \ 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\
    \t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqk1lr46_.jl:17\nin expression starting at\
    \ /tmp/tmpqk1lr46_.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        return 0 \n    else \n        return (a * b) % (10^9\
    \ + 7)\nend\n</cell>\n<code language=julia-1.5>\n@assert multiply(148, 412) ==\
    \ 16\n@assert multiply(19, 28) == 72\n@assert multiply(2020, 1851) == 0 \n@assert\
    \ multiply(14,-15) == 20\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of digits in an integer. \nExamples:\n    digits(148) should return\
    \ 3.\n    digits(19) should return 2.\n    digits(2020) should return 4.\n   \
    \ digits(-27) should return 1.\n    digits(0) should return 0.\n    digits(123456789)\
    \ should return 10.\n    digits(-123456789) should return 10.\n    digits(1234567890)\
    \ should return 10.\n    digits(-1234567890) should return 10.\n    digits(12345678901)\
    \ should return 10.\n    digits(-12345678901) should return 10.\n    digits(123456789012)\
    \ should return 10.\n    digits(-123456789012) should return 10.\n    digits(1234567890123)\
    \ should return 10.\n    digits(-1234567890123) should return 10.\n    digits(12345678901234)\
    \ should return 10.\n    digits(-12345678901234) should return 10.\n    digits(123456789012345)\
    \ should return 10.\n    digits(-123456789012345) should return 10.\n    digits(1234567890123456)\
    \ should return 10.\n    digits(-1234567890123456) should return 10.\n    digits(1234567890123456789)\
    \ should return 10.\n    digits(-1234567890123456789) should return 10.\n    digits(12345678901234567890)\
    \ should return 10.\n    digits(-12345678901234567890) should return 10.\n   \
    \ digits(123456789012345678901) should return 10.\n    digits(-123456789012345678901)\
    \ should return 10.\n    digits(1234567890123456789012) should return 10.\n  \
    \  digits(-1234567890123456789012) should return 10.\n    digits(12345678901234567890123)\
    \ should return 10.\n    digits(-12345678901234567890123) should return 10.\n\
    \    digits(123456789012345678901234) should return 10.\n    digits(-123456789012345678901234)\
    \ should return 10.\n    digits(1234567890123456789012345) should return 10.\n\
    \    digits(-1234567890123456789012345) should return 10.\n    digits(12345678901234567890123456)\
    \ should return 10.\n    digits(-12345678901234567890123456) should \nusing Test\n\
    \n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\
    \t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14,\
    \ -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) ==\
    \ 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp79gzddrs.jl:16\nin expression starting at\
    \ /tmp/tmp79gzddrs.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        return 0 \n    else \n        return a * b / b \n\
    end \n</cell>\n<code language=julia-1.5>\n\"\"\"Complete the function that takes\
    \ two integers and returns \n    the product of their unit digits.\n    Assume\
    \ the input is always valid.\n    Examples:\n    multiply(148, 412) should return\
    \ 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should\
    \ return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t\
    @test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14,\
    \ -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) ==\
    \ 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkb05li03.jl:16\nin expression starting at\
    \ /tmp/tmpkb05li03.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0\n        0\n    else\n        (a * b) % 10\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"Complete the function that takes two integers\
    \ and returns \n    the product of their unit digits.\n    Assume the input is\
    \ always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n   \
    \ multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n\
    \    multiply(14,-15) should return 20.\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19,\
    \ 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15)\
    \ == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\
    \t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv7eftefs.jl:17\nin expression starting at\
    \ /tmp/tmpv7eftefs.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        return 0 \n    else \n        return (a * b) mod 10\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"Complete the function that takes\
    \ two integers and returns \n    the product of their unit digits.\n    Assume\
    \ the input is always valid.\n    Examples:\n    multiply(148, 412) should return\
    \ 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should\
    \ return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t\
    @test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14,\
    \ -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) ==\
    \ 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmpswshdsxj.jl:11 expected \"\
    end\", got \"mod\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpswshdsxj.jl:14\n\
    in expression starting at /tmp/tmpswshdsxj.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        return 0 \n    else \n        return (a * b) % (10^9\
    \ + 7)\n    end\nend\n</cell>\n<code language=julia-1.5>\n@assert multiply(148,\
    \ 412) == 16\n@assert multiply(19, 28) == 72\n@assert multiply(2020, 1851) ==\
    \ 0\n@assert multiply(14,-15) == 20\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a vector of integers and returns the sum of the squares of the unit\
    \ digits. \nThe function should work for vectors of any length.\nExamples:\n \
    \   sumsq(148, 412, 19, 28) should return 16 + 72 + 0 + 20 = 86.\n    sumsq(148,\
    \ 412, 2020, 1851) should return 16 + 72 + 0 + 20 = 86.\n    sumsq(148, 412) should\
    \ return 16.\n    sumsq(19, 28) should return 72.\n    sumsq(2020, 1851) should\
    \ return 0.\n    sumsq(14,-15) should return 20.\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19,\
    \ 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15)\
    \ == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\
    \t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxv13whwn.jl:17\nin expression starting at\
    \ /tmp/tmpxv13whwn.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if a < 0 || b < 0 \n        error(\"The inputs must be non-negative\"\
    )\n    elseif b == 0 \n        error(\"The second input must be non-zero\")\n\
    \    elseif b == 1 \n        return a\n    else\n        return a*b\n    end\n\
    end\n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n\
    \    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n  \
    \  \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n\
    \    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\
    \n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\
    \"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\
    \"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\
    \"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n   \
    \ \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n\
    \    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n  \
    \  \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n\
    \    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\
    \n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\
    \"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\
    \"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\
    \"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n   \
    \ \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n\
    \    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n  \
    \  \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n\
    \    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvh4b90fg.jl:249\nin expression starting at\
    \ /tmp/tmpvh4b90fg.jl:249\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        0\n    else\n        (a * 10 + b) mod 10\n    end\n\
    end\n</code>\n<|/ a tags=julia,function |>\n<| c |>\nThis doesn't work. `multiply(148,\
    \ 412)` returns `16`, not `16*10 + 41 = 168`.\n<|/ c |>\n<| c |>\nI fixed the\
    \ answer, thanks for pointing that out. Now it works.\n<|/ c |>\n<| c |>\nI fixed\
    \ the answer, thanks for pointing that out. Now it works.\n<|/ c |>\n<| a tags=julia,function\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmp66kak9tf.jl:11 expected \"\
    end\", got \"mod\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp66kak9tf.jl:14\n\
    in expression starting at /tmp/tmp66kak9tf.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        0\n    else\n        (a * 10 + b) mod 10\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n# Test your function here\n@assert multiply(148,\
    \ 412) == 16\n@assert multiply(19, 28) == 72\n@assert multiply(2020, 1851) ==\
    \ 0 \n@assert multiply(14,-15) == 20\n</cell>\n<text>\n4.2 Exercise: Implement\
    \ the function count_digits(n) that returns the number of digits in n. For example,\
    \ count_digits(12) should return 3. You may assume that n is always positive.\n\
    using Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmp4mpnlnsp.jl:11 expected \"\
    end\", got \"mod\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4mpnlnsp.jl:14\n\
    in expression starting at /tmp/tmp4mpnlnsp.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        return 0 \n    else \n        return (a * b) / b\n\
    end\n</cell>\n<code language=julia-1.5>\n# Test your function\n@assert multiply(148,\
    \ 412) == 16\n@assert multiply(19, 28) == 72\n@assert multiply(2020, 1851) ==\
    \ 0 \n@assert multiply(14,-15) == 20\n</cell>\n<text>\nProblem 4\nWrite a function\
    \ that returns the sum of the squares of the digits in its input argument.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbubvvvyu.jl:16\nin expression starting at\
    \ /tmp/tmpbubvvvyu.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0\n        return a\n    else\n        return a*b\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"Complete the function that takes two\
    \ integers and returns \n    the product of their unit digits.\n    Assume the\
    \ input is always valid.\n    Examples:\n    multiply(148, 412) should return\
    \ 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should\
    \ return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t\
    @test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14,\
    \ -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) ==\
    \ 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3s0elir9.jl:17\nin expression starting at\
    \ /tmp/tmp3s0elir9.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if a < 0 || b < 0 \n        error(\"Invalid input\")\n    else if a ==\
    \ 0 || b == 0\n        0\n    else\n        (a * b) % 10\n    end\nend\n</cell>\n\
    <code language=julia-1.0>\n\"\"\"Complete the function that takes two integers\
    \ and returns \n    the product of their unit digits.\n    Assume the input is\
    \ always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n   \
    \ multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n\
    \    multiply(14,-15) should return 20.\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19,\
    \ 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15)\
    \ == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\
    \t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpua6pzmnq.jl:13\nin expression starting at\
    \ /tmp/tmpua6pzmnq.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if a < 0 || b < 0\n        error(\"Invalid input\")\n    elseif b == 0\n\
    \        0\n    else\n        (a * b) % 10\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"Complete the function that takes two integers and returns \n    the product\
    \ of their unit digits.\n    Assume the input is always valid.\n    Examples:\n\
    \    multiply(148, 412) should return 16.\n    multiply(19, 28) should return\
    \ 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should\
    \ return 20.\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\
    \t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp88714aki.jl:19\nin expression starting at\
    \ /tmp/tmp88714aki.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if a < 0 || b < 0\n        error(\"Invalid input\")\n    elseif b == 0\n\
    \        return a\n    else\n        return a*b\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"Complete the function that takes two integers and\
    \ returns \n    the product of their unit digits.\n    Assume the input is always\
    \ valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19,\
    \ 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\
    \t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph7vow47v.jl:19\nin expression starting at\
    \ /tmp/tmph7vow47v.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if a < 0 || b < 0 \n        error(\"Invalid input\")\n    else if a ==\
    \ 0 || b == 0\n        error(\"Invalid input\")\n    else\n        return a *\
    \ b\n    end\nend\n</cell>\n<code language=julia-1.5>\n# Test the function with\
    \ some examples\n@assert multiply(148, 412) == 16\n@assert multiply(19, 28) ==\
    \ 72\n@assert multiply(2020, 1851) == 0 \n@assert multiply(14,-15) == 20\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes two integers and returns the sum\
    \ of the unit digits of their product (as described above).\nExamples:\n    sum(148,\
    \ 412) should return 16.\n    sum(19, 28) should return 72.\n    sum(2020, 1851)\
    \ should return 0.\n    sum(14,-15) should return 20.\nHint: You can use the function\
    \ multiply defined above to compute the product of two integers.\nusing Test\n\
    \n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\
    \t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14,\
    \ -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) ==\
    \ 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw5ob172b.jl:13\nin expression starting at\
    \ /tmp/tmpw5ob172b.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0\n        return a\n    else\n        return a*b\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpc9qxhet7.jl:22\n  Expression: candidate(148,\
    \ 412) == 16\n   Evaluated: 60976 == 16\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpc9qxhet7.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc9qxhet7.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpc9qxhet7.jl:23\n  Expression: candidate(19, 28) == 72\n  \
    \ Evaluated: 532 == 72\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpc9qxhet7.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc9qxhet7.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpc9qxhet7.jl:24\n  Expression: candidate(2020, 1851) == 0\n\
    \   Evaluated: 3739020 == 0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpc9qxhet7.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc9qxhet7.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpc9qxhet7.jl:25\n  Expression: candidate(14, -15) == 20\n \
    \  Evaluated: -210 == 20\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpc9qxhet7.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc9qxhet7.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpc9qxhet7.jl:26\n  Expression: candidate(76, 67) == 42\n  \
    \ Evaluated: 5092 == 42\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] mac"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpc9qxhet7.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if a < 0 || b < 0 \n        error(\"Invalid input\")\n    else if a ==\
    \ 0 || b == 0\n        error(\"Invalid input\")\n    else\n        return (a *\
    \ b) % 10\n    end\nend\n</cell>\n<code language=julia-1.5>\nmultiply(148, 412)\n\
    </cell>\n<code language=julia-1.5>\nmultiply(19, 28)\n</cell>\n<code language=julia-1.5>\n\
    multiply(2020, 1851)\n</cell>\n<code language=julia-1.5>\nmultiply(14,-15)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes two integers and returns the sum\
    \ of the unit digits of their product (modulo 10).\nExamples:\n    sum(148, 412)\
    \ should return 16.\n    sum(19, 28) should return 72.\n    sum(2020, 1851) should\
    \ return 0.\n    sum(14,-15) should return 20.\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19,\
    \ 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15)\
    \ == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\
    \t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmib69wxo.jl:13\nin expression starting at\
    \ /tmp/tmpmib69wxo.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if a < 0 || b < 0\n        return -1\n    else\n        return (a * b)\
    \ % 10\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu6ace8do.jl:17\nin expression starting at\
    \ /tmp/tmpu6ace8do.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0\n        0\n    else\n        (a * b) % 10\n    end\nend\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nI appreciate your efforts, but this doesn't really\
    \ answer the question. OP asked how to implement the function `multiply` without\
    \ using any built-in functions. Your answer uses `*`, but OP specifically asked\
    \ not to use `*`.\n<|/ c |>\n<| c |>\nI appreciate your efforts, but this doesn't\
    \ really answer the question. OP asked how to implement the function `multiply`\
    \ without using any built-in functions. Your answer uses `*`, but OP specifically\
    \ asked not to use `*`.\n<|/ c |>\n<| c |>\nI appreciate your efforts, but this\
    \ doesn't really answer the question. OP asked how to implement the function `multiply`\
    \ without using any built-in functions. Your answer uses `*`, but OP specifically\
    \ asked not to use `*`.\n<|/ c |>\n<| c |>\nI appreciate your efforts, but this\
    \ doesn't really answer the question. OP asked how to implement the function `multiply`\
    \ without using any built-in functions. Your answer uses `*`, but OP specifically\
    \ asked not to use `*`.\n<|/ c |>\n<| c |>\nI appreciate your efforts, but this\
    \ doesn't really answer the question. OP asked how to implement the function `multiply`\
    \ without using any built-in functions. Your answer uses `*`, but OP specifically\
    \ asked not to use `*`.\n<|/ c |>\n<| a tags=julia,function |>\nThe answer by\
    \ is correct, but I thought I'd add some explanation as to why it works.\nThe\
    \ function multiply is defined as a function of two arguments. Julia will automatically\
    \ convert any integer to a floating point number when multiplying two numbers.\
    \ So the function multiply is actually defined as multiply((a, b) -> a * b).\n\
    The function multiply is defined as a function of two arguments. Julia will automatically\
    \ convert any integer to a floating point number when multiplying two numbers.\
    \ So the function multiply is actually defined as multiply((a, b) -> a * b).\n\
    The function multiply is defined as a function of two arguments. Julia will automatically\
    \ convert any integer to a floating point number when multiplying two numbers.\
    \ So the function multiply is actually defined as multiply((a, b) -> a * b).\n\
    The function multiply is defined as a function of two arguments. Julia will automatically\
    \ convert any \nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9nmnfbhv.jl:17\nin expression starting at\
    \ /tmp/tmp9nmnfbhv.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0\n        0\n    else\n        (a * b).digits\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"Complete the function that takes two\
    \ integers and returns \n    the product of their unit digits.\n    Assume the\
    \ input is always valid.\n    Examples:\n    multiply(148, 412) should return\
    \ 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should\
    \ return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t\
    @test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14,\
    \ -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) ==\
    \ 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpft_evo4a.jl:17\nin expression starting at\
    \ /tmp/tmpft_evo4a.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if a < 0 || b < 0 \n        error(\"Invalid input\")\n    elseif b ==\
    \ 0 \n        return a\n    elseif b == 1 \n        return a\n    else\n     \
    \   return a*b\n    end\nend\n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n\"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpbuhv8mmf.jl:25\nin expression starting at /tmp/tmpbuhv8mmf.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        0\n    else\n        (a*b).digits(2)\n    end\nend\n\
    </code>\n<|/ a tags=julia,digits,multiplication |>\n<| c |>\nThis doesn't work\
    \ for negative numbers, e.g. `multiply(-14, -15)` returns `-20` instead of `20`.\n\
    <|/ c |>\n<| a tags=julia,digits,multiplication |>\nI came up with a solution\
    \ that is more efficient than converting to a string and back.\n<code>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8mseqeoc.jl:17\nin expression starting at\
    \ /tmp/tmp8mseqeoc.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        return 0 \n    else \n        return (a*b)/b\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"Complete the function that takes two\
    \ integers and returns \n    the product of their unit digits.\n    Assume the\
    \ input is always valid.\n    Examples:\n    multiply(148, 412) should return\
    \ 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should\
    \ return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t\
    @test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14,\
    \ -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) ==\
    \ 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppj641tzi.jl:16\nin expression starting at\
    \ /tmp/tmppj641tzi.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if a < 0 || b < 0\n        error(\"Invalid input\")\n    elseif b == 0\n\
    \        0\n    elseif a == 0\n        0\n    else\n        (a * b).digits[end].product\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphivsp7ae.jl:21\nin expression starting at\
    \ /tmp/tmphivsp7ae.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0\n        return a\n    else\n        return multiply(a/10, b%10)*10\
    \ + a%10\n    end\nend\n</cell>\n<code language=julia-1.5>\nmultiply(148, 412)\n\
    </cell>\n<code language=julia-1.5>\nmultiply(19, 28)\n</cell>\n<code language=julia-1.5>\n\
    multiply(2020, 1851)\n</cell>\n<code language=julia-1.5>\nmultiply(14,-15)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes two integers and returns the sum\
    \ of the unit digits of their product \n    For example: multiply(148, 412) should\
    \ return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851)\
    \ should return 0.\n    multiply(14,-15) should return 20.\n    multiply(-14,\
    \ -15) should return -20.\n    multiply(-14, -15) should return -20.\n    multiply(-14,\
    \ -15) should return -20.\n    multiply(-14, -15) should return -20.\n    multiply(-14,\
    \ -15) should return -20.\n    multiply(-14, -15) should return -20.\n    multiply(-14,\
    \ -15) should return -20.\n    multiply(-14, -15) should return -20.\n    multiply(-14,\
    \ -15) should return -20.\n    multiply(-14, -15) should return -20.\n    multiply(-14,\
    \ -15) should return -20.\n    multiply(-14, -15) should return -20.\n    multiply(-14,\
    \ -15) should return -20.\n    multiply(-14, -15) should return -20.\n    multiply(-14,\
    \ -15) should return -20.\n    multiply(-14, -15) should return -20.\n    multiply(-14,\
    \ -15) should return -20.\n    multiply(-14, -15) should return -20.\n    multiply(-14,\
    \ -15) should return -20.\n    multiply(-14, -15) should return -20.\n    multiply(-14,\
    \ -15) should return -20.\n    multiply(-14, -15) should return -20.\n    multiply(-14,\
    \ -15) should return -20.\n    multiply(-14, -15) should return -20.\n    multiply(-14,\
    \ -15) should return -20.\n    multiply(-14, -15) should return -20.\n    multiply(-14,\
    \ -15) should return -20.\n    multiply(-14, -15) should return -20.\n    multiply(-14,\
    \ -15) should return -20.\n    multiply(-14, -15) should return -20.\n    multiply(-14,\
    \ -15) should return -20.\n    multiply(-14, -15) should return -20.\n    multiply(-14,\
    \ -15\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpngakfner.jl:17\nin expression starting at\
    \ /tmp/tmpngakfner.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        return 0 \n    else \n        return (a * b) mod 10\n\
    end\n</cell>\n<code language=julia-1.0>\n# Test the function \nmultiply(148, 412)\n\
    </cell>\n<code language=julia-1.0>\n# Test the function \nmultiply(19, 28)\n</cell>\n\
    <code language=julia-1.0>\n# Test the function \nmultiply(2020, 1851)\n</cell>\n\
    <code language=julia-1.0>\n# Test the function \nmultiply(14,-15)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the number of characters\
    \ in the string.\nExamples:\n    count(\"hello\") should return 5.\n    count(\"\
    hello \") should return 6.\n    count(\"hello  \") should return 7.\n    count(\"\
    hello  world\") should return 11.\n    count(\"hello  world  \") should return\
    \ 11.\n    count(\"hello  world  hello  world  hello  world  hello  world  hello\
    \  world  hello  world  hello  world  hello  world  hello  world  hello  world\
    \  hello  world  hello  world  hello  world  hello  world  hello  world  hello\
    \  world  hello  world  hello  world  hello  world  hello  world  hello  world\
    \  hello  world  hello  world  hello  world  hello  world  hello  world  hello\
    \  world  hello  world  hello  world  hello  world  hello  world  hello  world\
    \  hello  world  hello  world  hello  world  hello  world  hello  world  hello\
    \  world  hello  world  hello  world  hello  world  hello  world  hello  world\
    \  hello  world  hello  world  hello  world  hello  world  hello  world  hello\
    \  world  hello  world  hello  world  hello  world  hello  world  hello  world\
    \  hello  world  hello  world  hello  world  hello  world  hello  world  hello\
    \  world  hello  world  hello  world  hello  world  hello  world  hello  world\
    \  hello  world  hello  world  hello  world  hello  world  hello  world  hello\
    \  world  hello  world  hello  world  hello  world  hello  world  hello  world\
    \  hello  world  hello  world  hello  world  hello  world  hello  world  hello\
    \  world  hello  world  \nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\
    \t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmpv04llv70.jl:11 expected \"\
    end\", got \"mod\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpv04llv70.jl:14\n\
    in expression starting at /tmp/tmpv04llv70.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0\n        0\n    else\n        (a*b).digits()\n    end\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes two integers and returns\
    \ the sum of the \n    unit digits of their product (without using the + operator).\n\
    \    For example:\n    multiply(148, 412) should return 16.\n    multiply(19,\
    \ 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\
    \t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8pgp4s9a.jl:17\nin expression starting at\
    \ /tmp/tmp8pgp4s9a.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        0\n    else\n        (a * 10 + b) mod 10\nend\n</code>\n\
    <|/ a tags=julia |>\n<| c |>\nThis doesn't work. `multiply(148, 412)` returns\
    \ `16`, not `1600`.\n<|/ c |>\n<| c |>\nOops, I didn't notice that. Fixed now.\n\
    <|/ c |>\n<| a tags=julia |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) ==\
    \ 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\
    \t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0,\
    \ 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmp7ioje3ks.jl:11 expected \"\
    end\", got \"mod\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7ioje3ks.jl:14\n\
    in expression starting at /tmp/tmp7ioje3ks.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if a < 0 || b < 0\n        error(\"Invalid input\")\n    elseif b == 0\n\
    \        return a\n    else\n        return a*b\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"Complete the function that takes two integers and\
    \ returns \n    the product of their unit digits.\n    Assume the input is always\
    \ valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19,\
    \ 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\
    \t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0v4_2kdf.jl:19\nin expression starting at\
    \ /tmp/tmp0v4_2kdf.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0\n        0\n    elseif b < 0\n        multiply(-a, -b)\n   \
    \ else\n        (a * b) % 10\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"Complete the function that takes two integers and returns \n    the product\
    \ of their unit digits.\n    Assume the input is always valid.\n    Examples:\n\
    \    multiply(148, 412) should return 16.\n    multiply(19, 28) should return\
    \ 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should\
    \ return 20.\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\
    \t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpoz6szqqe.jl:19\nin expression starting at\
    \ /tmp/tmpoz6szqqe.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0\n        return a\n    else\n        return a*b\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"Complete the function that takes two\
    \ integers and returns \n    the product of their unit digits.\n    Assume the\
    \ input is always valid.\n    Examples:\n    multiply(148, 412) should return\
    \ 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should\
    \ return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t\
    @test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14,\
    \ -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) ==\
    \ 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpej7wl3rs.jl:17\nin expression starting at\
    \ /tmp/tmpej7wl3rs.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        0\n    elseif b < 0 \n        multiply(-a, -b)\n \
    \   elseif b > 0 \n        multiply(a, -b)\n    elseif b == 0 \n        a\n  \
    \  else\n        multiply(a, -b)\n    end\nend\n</code>\n<|/ a dscore=0 |>\n<|\
    \ c |>\nThis doesn't work. Try multiplying `148, 412` with your function.\n<|/\
    \ c |>\n<| c |>\nIt works, I tested it before posting it. I just edited the answer\
    \ to include a test case.\n<|/ c |>\n<| c |>\nIt doesn't work. Try multiplying\
    \ `148, 412` with your function.\n<|/ c |>\n<| c |>\nIt works, I tested it before\
    \ posting it. I just edited the answer to include a test case.\n<|/ c |>\n<| c\
    \ |>\nIt doesn't work. Try multiplying `148, 412` with your function.\n<|/ c |>\n\
    <| a tags=math,julia,algorithm |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) ==\
    \ 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\
    \t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0,\
    \ 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbka38bjt.jl:23\nin expression starting at\
    \ /tmp/tmpbka38bjt.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0\n        return 0\n    \n    if a < 0\n        return -multiply(-a,\
    \ b)\n    \n    if b < 0\n        return -multiply(a, b-abs(b))\n    \n    if\
    \ b == 0\n        return a\n    \n    if a < b\n        return multiply(a, abs(b))\
    \ * (abs(b) - abs(a))\n    \n    return multiply(a, b / abs(b)) * (b / abs(b)\
    \ - abs(b) / abs(a))\nend\n</cell>\n<code language=julia-1.5>\nmultiply(148, 412)\n\
    </cell>\n<code language=julia-1.5>\nmultiply(19, 28)\n</cell>\n<code language=julia-1.5>\n\
    multiply(2020, 1851)\n</cell>\n<code language=julia-1.5>\nmultiply(14,-15)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the sum of the digits of an\
    \ integer.\nExamples:\nsum(123) should return 6.\nsum(12) should return 3.\nsum(0)\
    \ should return 0.\nsum(-1) should return -1.\nsum(123456789) should return 62.\n\
    sum(1234567890) should return 62.\nsum(12345678901) should return 62.\nsum(123456789012)\
    \ should return 62.\nsum(1234567890123) should return 62.\nsum(12345678901234)\
    \ should return 62.\nsum(123456789012345) should return 62.\nsum(1234567890123456)\
    \ should return 62.\nsum(12345678901234567) should return 62.\nsum(123456789012345678)\
    \ should return 62.\nsum(1234567890123456790) should return 62.\nsum(1234567890123456791)\
    \ should return 62.\nsum(1234567890123456792) should return 62.\nsum(1234567890123456793)\
    \ should return 62.\nsum(1234567890123456794) should return 62.\nsum(1234567890123456795)\
    \ should return 62.\nsum(1234567890123456796) should return 62.\nsum(1234567890123456797)\
    \ should return 62.\nsum(1234567890123456798) should return 62.\nsum(1234567890123456799)\
    \ should return 62.\nsum(1234567890123456000) should return 62.\nsum(1234567890123456001)\
    \ should return 62.\nsum(1234567890123456002) should return 62.\nsum(1234567890123456003)\
    \ should return 62.\nsum(1234567890123456004) should return 62.\nsum(1234567890123456005)\
    \ should return 62.\nsum(1234567890123456006) should return 62.\nsum(1234567890123456007)\
    \ should return 62.\nsum(1234567890123456008) should return 62.\nsum(\nusing Test\n\
    \n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\
    \t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14,\
    \ -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) ==\
    \ 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb57m6m2p.jl:28\nin expression starting at\
    \ /tmp/tmpb57m6m2p.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        0\n    else\n        (a * 10 + b) mod 10\n    end\n\
    end\n</code>\n<|/ a |>\n<| c |>\nThis doesn't work. `multiply(148, 412) should\
    \ return 16.` returns `16` instead of `16`.\n<|/ c |>\n<| c |>\nIt works, I tested\
    \ it before posting it. The function returns `16` when `a` and `b` are both `148`.\n\
    <|/ c |>\n<| c |>\nIt doesn't work for `multiply(19, 28) should return 72.` returns\
    \ `72` instead of `72`.\n<|/ c |>\n<| c |>\nIt doesn't work for `multiply(2020,\
    \ 1851) should return 0.` returns `0` instead of `0`.\n<|/ c |>\n<| c |>\nIt doesn't\
    \ work for `multiply(14,-15) should return 20.` returns `20` instead of `20`.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) ==\
    \ 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\
    \t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0,\
    \ 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmpkn331i57.jl:11 expected \"\
    end\", got \"mod\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpkn331i57.jl:14\n\
    in expression starting at /tmp/tmpkn331i57.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0\n        0\n    else\n        if a < 0\n            multiply(-a,\
    \ -b)\n        else\n            multiply(a, -b)\n    end\nend\n</code>\n<|/ a\
    \ dscore=0 |>\n<| c |>\nThe question was about how to implement the function `multiply`,\
    \ not how to implement the function `product`.\n<|/ c |>\n<| c |>\nI didn't realize\
    \ that multiplying negative numbers was a problem. My bad.\n<|/ c |>\n<| c |>\n\
    I edited my answer to include a solution for negative numbers. I hope this helps.\n\
    <|/ c |>\n<| c |>\nThank you so much! I really appreciate it!\n<|/ c |>\n<| c\
    \ |>\nI edited my answer to include a solution for negative numbers. I hope this\
    \ helps.\n<|/ c |>\n<| a tags=julia,function,if-statement |>\n<code>\nusing Test\n\
    \n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\
    \t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14,\
    \ -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) ==\
    \ 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpytvphun5.jl:20\nin expression starting at\
    \ /tmp/tmpytvphun5.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0\n        0\n    else\n        (a * 10 + b) mod 10\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nmultiply(148, 412)\n</cell>\n<code language=julia-1.5>\n\
    multiply(19, 28)\n</cell>\n<code language=julia-1.5>\nmultiply(2020, 1851)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(14,-15)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes two integers and returns the sum of the \n    unit digits\
    \ of their product (modulo 10).\n    For example, multiply(148, 412) should return\
    \ 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should\
    \ return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t\
    @test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14,\
    \ -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) ==\
    \ 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmpc6w1fi3z.jl:11 expected \"\
    end\", got \"mod\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpc6w1fi3z.jl:14\n\
    in expression starting at /tmp/tmpc6w1fi3z.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if a < 0 || b < 0\n        error(\"Invalid input\")\n    elseif b == 0\n\
    \        return a\n    else\n        return a * b\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"Complete the function that takes two integers and\
    \ returns \n    the product of their unit digits.\n    Assume the input is always\
    \ valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19,\
    \ 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\
    \t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpychd_ldn.jl:19\nin expression starting at\
    \ /tmp/tmpychd_ldn.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if a < 0 || b < 0\n        error(\"Invalid input\")\n    elseif b == 0\n\
    \        return a\n    else\n        return a*b\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\n# Test your function with the cases below\n@assert multiply(148,\
    \ 412) == 16\n@assert multiply(19, 28) == 72\n@assert multiply(2020, 1851) ==\
    \ 0 \n@assert multiply(14, -15) == 20\n</cell>\n<text>\nProblem 3\nUsing your\
    \ multiply function, complete the function so that it returns the sum of the product\
    \ of its unit digits. This is called the unit digit sum.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19,\
    \ 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15)\
    \ == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\
    \t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplk9p8qmr.jl:19\nin expression starting at\
    \ /tmp/tmplk9p8qmr.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        0\n    else\n        (a * 10 + b) mod 10\n    end\n\
    end\n</code>\n<|/ a tags=julia |>\n<| a tags=julia |>\nI wrote a package for this:\
    \ Units.jl\n<code>\nusing Units\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\
    \t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmpy862bm8n.jl:11 expected \"\
    end\", got \"mod\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpy862bm8n.jl:14\n\
    in expression starting at /tmp/tmpy862bm8n.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if a < 0 || b < 0 \n        error(\"Invalid input\")\n    else if a ==\
    \ 0 || b == 0 \n        return 0 \n    else \n        return (a * b) % 10\nend\n\
    </cell>\n<code language=julia-1.5>\n# Test the function \nmultiply(148, 412)\n\
    </cell>\n<text>\nProblem 3\nWrite a function that takes two integers and returns\
    \ their sum.\nExamples:\n    sum(148, 412) should return 164.\n    sum(19, 28)\
    \ should return 72.\n    sum(2020, 1851) should return 0.\n    sum(14,-15) should\
    \ return 20.\n    sum(1,2) should return 3.\n    sum(1,0) should return 0.\n \
    \   sum(0,1) should return 1.\n    sum(0,0) should return 0.\n    sum(1,-1) should\
    \ return -1.\n    sum(1,-2) should return -2.\n    sum(1,-3) should return -3.\n\
    \    sum(1,-4) should return -4.\n    sum(1,-5) should return -5.\n    sum(1,-6)\
    \ should return -6.\n    sum(1,-7) should return -7.\n    sum(1,-8) should return\
    \ -8.\n    sum(1,-9) should return -9.\n    sum(1,-10) should return -10.\n  \
    \  sum(1,-11) should return -11.\n    sum(1,-12) should return -12.\n    sum(1,-13)\
    \ should return -13.\n    sum(1,-14) should return -14.\n    sum(1,-15) should\
    \ return -15.\n    sum(1,-16) should return -16.\n    sum(1,-17) should return\
    \ -17.\n    sum(1,-18) should return -18.\n    sum(1,-19) should return -19.\n\
    \    sum(1,-20) should return -20.\n    sum(1,-21) should return -21.\n    sum(1,-22)\
    \ should return -22.\n    sum(1,-23) should return -23.\n    sum(1,-24) should\
    \ return -24.\n    sum(1,-25) should return -25.\n    sum(1,-26) should return\
    \ -26.\n    sum(1,-27) should return -27.\n    sum(1,-28) should return -28.\n\
    \    sum(1,-29) should return -29.\n    sum(1,-30) should return -30.\n    sum(1,-31)\
    \ should return -31.\n    sum(1,-32) should return -32.\n    sum(1,-33) should\
    \ return -33.\n    sum(1,-34) should return -34.\n    sum(1,-35) should return\
    \ -35.\n    sum(1,\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t\
    @test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp158zzviz.jl:13\nin expression starting at\
    \ /tmp/tmp158zzviz.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0\n        return a\n    else\n        return a*b\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n# Test the function \nmultiply(148, 412)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes in two integers and returns\
    \ the sum of the unit digits. \nAssume the input is always valid.\nExamples:\n\
    sum(148, 412) should return 16.\nsum(19, 28) should return 72.\nsum(2020, 1851)\
    \ should return 0.\nsum(14,-15) should return 20.\nsum(1,-1) should return 0.\n\
    sum(0,0) should return 0.\nsum(1,1) should return 1.\nsum(1,2) should return 3.\n\
    sum(1,3) should return 6.\nsum(1,4) should return 9.\nsum(1,5) should return 12.\n\
    sum(1,6) should return 15.\nsum(1,7) should return 18.\nsum(1,8) should return\
    \ 21.\nsum(1,9) should return 24.\nsum(1,10) should return 27.\nsum(1,11) should\
    \ return 30.\nsum(1,12) should return 33.\nsum(1,13) should return 36.\nsum(1,14)\
    \ should return 39.\nsum(1,15) should return 42.\nsum(1,16) should return 45.\n\
    sum(1,17) should return 48.\nsum(1,18) should return 51.\nsum(1,19) should return\
    \ 54.\nsum(1,20) should return 57.\nsum(1,21) should return 60.\nsum(1,22) should\
    \ return 63.\nsum(1,23) should return 66.\nsum(1,24) should return 69.\nsum(1,25)\
    \ should return 72.\nsum(1,26) should return 75.\nsum(1,27) should return 78.\n\
    sum(1,28) should return 81.\nsum(1,29) should return 84.\nsum(1,30) should return\
    \ 87.\nsum(1,31) should return 90.\nsum(1,32) should return 93.\nsum(1,33) should\
    \ return 96.\nsum(1,34) should return 99.\nsum(1,35) should return 102.\nsum(1,36)\
    \ should return 105.\nsum(1,37) should return 108.\nsum(1,38) should return 111.\n\
    sum(1,39) should return 114.\nsum(1,40) should return 117.\nsum(1,41) should return\
    \ 120.\nsum(1,42) should return 123.\nsum(1,43) should return 126.\nsum(1,44)\
    \ should return 129.\nsum(1,45) should return 132.\nsum(1,46) should return 135.\n\
    sum(1,47\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxnmhuqb7.jl:17\nin expression starting at\
    \ /tmp/tmpxnmhuqb7.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        0\n    elseif b < 0 \n        multiply(-a, -b)\n \
    \   else\n        (a * b) % 10\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"Complete the function that takes two integers and returns \n    the product\
    \ of their unit digits.\n    Assume the input is always valid.\n    Examples:\n\
    \    multiply(148, 412) should return 16.\n    multiply(19, 28) should return\
    \ 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should\
    \ return 20.\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\
    \t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo2_pvv17.jl:19\nin expression starting at\
    \ /tmp/tmpo2_pvv17.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if a < 0 || b < 0\n        error(\"Invalid input\")\n    elseif b == 0\n\
    \        return a\n    else\n        return a*b\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\n# Test your function here\n@assert multiply(148, 412) ==\
    \ 16\n@assert multiply(19, 28) == 72\n@assert multiply(2020, 1851) == 0\n@assert\
    \ multiply(14, -15) == 20\n</cell>\n<text>\n4.5 Write a Julia function named is_palindrome\
    \ that takes one integer as input and returns true if the integer is a palindrome\
    \ and false otherwise.\nExamples:\nis_palindrome(121) should return true.\nis_palindrome(14)\
    \ should return false.\nis_palindrome(99) should return false.\nHint: You can\
    \ use the reverse function.\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\
    \t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc95tysr2.jl:19\nin expression starting at\
    \ /tmp/tmpc95tysr2.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        0\n    elseif b < 0 \n        multiply(a, -b)\n  \
    \  elseif b > 0 \n        multiply(a, b)\n    elseif b == 0 \n        a\n    else\n\
    \        multiply(a, b / 10)\n    end\nend\n</code>\n<|/ a tags=math,julia |>\n\
    <| a tags=math,julia |>\nI wrote a package for this: UnitDigits.jl\n<code>\nusing\
    \ UnitDigits\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphawoggqv.jl:23\nin expression starting at\
    \ /tmp/tmphawoggqv.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if a < 0 || b < 0\n        error(\"Invalid input\")\n    elseif b == 0\n\
    \        error(\"Invalid input\")\n    elseif b == 1\n        return a\n    else\n\
    \        return a * multiply(a/10, b%10)\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    \"\"\"Complete the function that takes two integers and returns \n    the product\
    \ of their unit digits.\n    Assume the input is always valid.\n    Examples:\n\
    \    multiply(148, 412) should return 16.\n    multiply(19, 28) should return\
    \ 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should\
    \ return 20.\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\
    \t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1waejq_c.jl:21\nin expression starting at\
    \ /tmp/tmp1waejq_c.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0\n        0\n    else\n        (a * b) % 10\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nmultiply(148, 412)\n</cell>\n<code language=julia-1.5>\n\
    multiply(19, 28)\n</cell>\n<code language=julia-1.5>\nmultiply(2020, 1851)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(14,-15)\n</cell>\n<text>\nExercise\nWrite\
    \ a function that takes two integers and returns the sum of their unit digits.\n\
    Assume the input is always valid.\nExamples:\nsum(148, 412) should return 16.\n\
    sum(19, 28) should return 72.\nsum(2020, 1851) should return 0.\nsum(14,-15) should\
    \ return 20.\nHint: use modulo 10 to get the remainder of the division.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkg60sjw8.jl:17\nin expression starting at\
    \ /tmp/tmpkg60sjw8.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if a < 0 || b < 0\n        error(\"Invalid input\")\n    elseif b == 0\n\
    \        error(\"Invalid input\")\n    elseif b == 1\n        return a\n    else\n\
    \        return a*b\n    end\nend\n\"\"\"\n    \n    \n\"\"\"\n    \n    \n  \
    \  \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n\
    \    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n\
    \    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n\
    \    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n\
    \    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n\
    \    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n\
    \    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n\
    \    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n\
    \    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n\
    \    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n\
    \    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n\
    \    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n\
    \    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n\
    \    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n\
    \    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n\
    \    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n\
    \    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n\
    \    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n\
    \    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n\
    \    \nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj4a1w1_g.jl:252\nin expression starting at\
    \ /tmp/tmpj4a1w1_g.jl:252\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        return 0 \n    else \n        return (a * b) / b \n\
    end\n\"\"\"Complete the function that takes two integers and returns \n    the\
    \ product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n\
    \    multiply(148, 412) should return 16.\n    multiply(19, 28) should return\
    \ 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should\
    \ return 20.\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\
    \t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppq7wsuq8.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppq7wsuq8.jl:1\n\
    in expression starting at /tmp/tmppq7wsuq8.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if a < 0 || b < 0\n        error(\"Invalid input\")\n    else\n      \
    \  return (a * b).digits(2)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) ==\
    \ 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\
    \t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0,\
    \ 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpkspi2mg2.jl:22\n  Test threw exception\n\
    \  Expression: candidate(148, 412) == 16\n  type Int64 has no field digits\n \
    \ Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] multiply(a::Int64,\
    \ b::Int64)\n     @ Main /tmp/tmpkspi2mg2.jl:14\n   [3] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [4] macro expansion\n     @ /tmp/tmpkspi2mg2.jl:22 [inlined]\n   [5] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpkspi2mg2.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpkspi2mg2.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(19, 28) == 72\n  type Int64 has no field digits\n  Stacktrace:\n \
    \  [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] multiply(a::Int64, b::Int64)\n\
    \     @ Main /tmp/tmpkspi2mg2.jl:14\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpkspi2mg2.jl:23 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpkspi2mg2.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpkspi2mg2.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(2020, 1851) == 0\n  type Int64 has no field digits\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] multiply(a::Int64,\
    \ b::Int64)\n     @ Main /tmp/tmpkspi2mg2.jl:14\n   [3] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [4] macro expansion\n     @ /tmp/tmpkspi2mg2.jl:24 [inlined]\n   [5] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpkspi2mg2.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpkspi2mg2.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(14, -15) == 20\n  Invalid input\n  Stacktrace:\n   [1] error(s::String"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkspi2mg2.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        0\n    elseif b < 0 \n        multiply(-a, -b)\n \
    \   elseif b > 0 \n        multiply(a, -b)\n    else\n        multiply(a, b)\n\
    \    end\nend\n</cell>\n<code language=julia-1.0>\n\"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi5ktf1f3.jl:21\nin expression starting at\
    \ /tmp/tmpi5ktf1f3.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if a < 0 || b < 0 \n        error(\"Invalid input\") \n    else if a ==\
    \ 0 || b == 0 \n        0 \n    else \n        digits(a) * digits(b) \nend\n</cell>\n\
    <code language=julia-1.0>\n\"\"\"Complete the function that takes two integers\
    \ and returns \n    the product of their unit digits.\n    Assume the input is\
    \ always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n   \
    \ multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n\
    \    multiply(14,-15) should return 20.\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19,\
    \ 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15)\
    \ == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\
    \t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5mngeqzc.jl:13\nin expression starting at\
    \ /tmp/tmp5mngeqzc.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        return 0 \n    else \n        return (a * b) % (10^9\
    \ + 7)\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"Complete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should\
    \ return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851)\
    \ should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpebsp7gnk.jl:16\nin expression starting at\
    \ /tmp/tmpebsp7gnk.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        0\n    else\n        (a * b) mod 10\n    end\nend\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work. Try it with `multiply(148,\
    \ 412)`.\n<|/ c |>\n<| c |>\nI tested it and it works. I used Julia 0.6.2\n<|/\
    \ c |>\n<| c |>\nI tested it and it works. I used Julia 0.6.2\n<|/ c |>\n<| c\
    \ |>\nI tested it and it works. I used Julia 0.6.2\n<|/ c |>\n<| c |>\nI tested\
    \ it and it works. I used Julia 0.6.2\n<|/ c |>\n<| a dscore=0 |>\n<code>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmp0fy4_m8l.jl:11 expected \"\
    end\", got \"mod\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0fy4_m8l.jl:14\n\
    in expression starting at /tmp/tmp0fy4_m8l.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        return 0 \n    else \n        return (a * b) % (10^9\
    \ + 7)\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"Complete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should\
    \ return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851)\
    \ should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprbb0nx3g.jl:16\nin expression starting at\
    \ /tmp/tmprbb0nx3g.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if a < 0 || b < 0 \n        error(\"Invalid input\")\n    else if a ==\
    \ 0 || b == 0\n        0\n    else\n        (a * b) % 10\n    end\nend\n</code>\n\
    <|/ a tags=julia |>\n<| c |>\nThe `if` statement is redundant and can be replaced\
    \ with `if a == 0 || b == 0`.\n<|/ c |>\n<| c |>\nThanks, I didn't know that.\
    \ Edited the answer.\n<|/ c |>\n<| c |>\nThanks for the answer. I am still trying\
    \ to understand how this works. I understand that `a * b` will give me the product\
    \ of the two numbers. But how does this work? I understand that `a * b` will give\
    \ me the product of the two numbers. But how does this work? I understand that\
    \ `a * b` will give me the product of the two numbers. But how does this work?\
    \ I understand that `a * b` will give me the product of the two numbers. But how\
    \ does this work? I understand that `a * b` will give me the product of the two\
    \ numbers. But how does this work? I understand that `a * b` will give me the\
    \ product of the two numbers. But how does this work? I understand that `a * b`\
    \ will give me the product of the two numbers. But how does this work? I understand\
    \ that `a * b` will give me the product of the two numbers. But how does this\
    \ work? I understand that `a * b` will give me the product of the two numbers.\
    \ But how does this work? I understand that `a * b` will give me the product of\
    \ the two numbers. But how does this work? I understand that `a * b` will give\
    \ me the product of the two numbers. But how does this work? I understand that\
    \ `a * b` will give me the product of the two numbers. But how does this work?\
    \ I understand that `a * b` will give me the product of the two numbers. But how\
    \ does this work? I understand that `a * b` will give me the product of the two\
    \ numbers. But how does this work? I understand that `a * b` will give me the\
    \ product of the two numbers. But how does this work? I understand that `a * b`\
    \ will give me the product of the two numbers. But how does this work? I understand\
    \ that `a * b` will give me the product of the two numbers. But how does this\
    \ work? I understand that `a * b` will give me the product of the two numbers.\
    \ But how does this work? \nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\
    \t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0t0pldfe.jl:13\nin expression starting at\
    \ /tmp/tmp0t0pldfe.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if a < 0 || b < 0 \n        error(\"Invalid input\") \n    else \n   \
    \     return a*b\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"Complete\
    \ the function that takes two integers and returns \n    the product of their\
    \ unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148,\
    \ 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpufj3w1tq.jl:17\nin expression starting at\
    \ /tmp/tmpufj3w1tq.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0\n        return a\n    else\n        return multiply(a/10, b*10)\
    \ + a%10\n    end\nend\n</cell>\n<code language=julia-1.5>\nmultiply(148, 412)\n\
    </cell>\n<code language=julia-1.5>\nmultiply(19, 28)\n</cell>\n<code language=julia-1.5>\n\
    multiply(2020, 1851)\n</cell>\n<code language=julia-1.5>\nmultiply(14,-15)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes two integers and returns the sum\
    \ of the unit digits of their product (without using multiplication).\nExamples:\n\
    \    sum(148, 412) should return 16.\n    sum(19, 28) should return 72.\n    sum(2020,\
    \ 1851) should return 0.\n    sum(14,-15) should return 20.\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbg55_19r.jl:17\nin expression starting at\
    \ /tmp/tmpbg55_19r.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        0\n    else\n        (a * b) % 10\n    end\nend\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes two integers and returns\
    \ the sum of the \n    unit digits of their product (assuming the input is valid).\n\
    \    Examples:\n    add(148, 412) should return 16.\n    add(19, 28) should return\
    \ 72.\n    add(2020, 1851) should return 0.\n    add(14,-15) should return 20.\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgovj1udx.jl:17\nin expression starting at\
    \ /tmp/tmpgovj1udx.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        return 0 \n    else \n        return (a*b)/b\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert multiply(148, 412) == 16\n@assert\
    \ multiply(19, 28) == 72\n@assert multiply(2020, 1851) == 0\n@assert multiply(14,-15)\
    \ == 20\n</cell>\n<text>\nExercise 2\nWrite a function that returns the sum of\
    \ the digits of its input. \nAssume that the input is always valid.\nExamples:\n\
    sum(148) should return 4.\nsum(19) should return 7.\nsum(2020) should return 0.\n\
    sum(14) should return 5.\nsum(0) should return 0.\nsum(-1) should return -1.\n\
    sum(123456789) should return 45.\nsum(1234567890) should return 450.\nsum(12345678901)\
    \ should return 4510.\nsum(123456789012) should return 45101.\nsum(1234567890123)\
    \ should return 451012.\nsum(12345678901234) should return 4510123.\nsum(123456789012345)\
    \ should return 45101234.\nsum(1234567890123456) should return 451012345.\nsum(12345678901234567)\
    \ should return 45101234567.\nsum(123456789012345678) should return 451012345678.\n\
    sum(1234567890123456789) should return 4510123456790123.\nsum(12345678901234567891)\
    \ should return 45101234567901234.\nsum(123456789012345678912) should return 451012345679012345.\n\
    sum(1234567890123456789123) should return 45101234567901234567.\nsum(12345678901234567891234)\
    \ should return 451012345679012345678.\nsum(123456789012345678912345) should return\
    \ 4510123456790123456790123.\nsum(1234567890123456789123456) should return 45101234567901234567901234.\n\
    sum(12345678901234567891234567) should return 451012345679012345679012345.\nsum(123456789012345678912345678)\
    \ should return 45101234567901234567901234567.\nsum(1234567890123456789123456789)\
    \ should return 451012345679012345679012345678.\nsum(12345678901234567891234567890)\
    \ should return 4510123456790123456790123456790123.\nsum(123456789012345678912345678901)\
    \ should return 45101234567901234567901234567901234.\nsum(1234567890123456789123456789012)\
    \ should return 451012345679012345679012345679012345.\nsum(12345678901234567891234567890123)\
    \ should return 45101234567901234567901234567901234567.\nsum(123456789012345678912345678901234)\
    \ should return 4510\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t\
    @test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpizajjznv.jl:16\nin expression starting at\
    \ /tmp/tmpizajjznv.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0\n        return a\n    \n    digits = divrem(a, b) \n    \n\
    \    if digits[1] == 0\n        return digits[2]\n    \n    return multiply(digits[2],\
    \ digits[1])\nend\n</cell>\n<code language=julia-1.5>\nmultiply(148, 412)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(19, 28)\n</cell>\n<code language=julia-1.5>\n\
    multiply(2020, 1851)\n</cell>\n<code language=julia-1.5>\nmultiply(14,-15)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes two integers and returns the sum\
    \ of the unit digits of their product.\nExamples:\n    sum(148, 412) should return\
    \ 16.\n    sum(19, 28) should return 72.\n    sum(2020, 1851) should return 0.\n\
    \    sum(14,-15) should return 20.\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19,\
    \ 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15)\
    \ == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\
    \t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmfek7ihv.jl:21\nin expression starting at\
    \ /tmp/tmpmfek7ihv.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0\n        0\n    else\n        (a*b)/10\n    end\nend\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nusing Test\n\n@testset begin\n\n\
    candidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19,\
    \ 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15)\
    \ == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\
    \t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpht0pqdqb.jl:17\nin expression starting at\
    \ /tmp/tmpht0pqdqb.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if a < 0 || b < 0 \n        error(\"Invalid input\")\n    elseif b ==\
    \ 0 \n        return a\n    elseif b == 1 \n        return a\n    elseif b > a\
    \ \n        error(\"Invalid input\")\n    else\n        return a*b\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"Complete the function that takes\
    \ two integers and returns \n    the product of their unit digits.\n    Assume\
    \ the input is always valid.\n    Examples:\n    multiply(148, 412) should return\
    \ 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should\
    \ return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t\
    @test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14,\
    \ -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) ==\
    \ 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzh5xbg1s.jl:23\nin expression starting at\
    \ /tmp/tmpzh5xbg1s.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if a < 0 || b < 0 \n        error(\"Invalid input\")\n    else if a ==\
    \ 0 || b == 0\n        0\n    else\n        (a * b) % 10\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"Complete the function that takes two integers\
    \ and returns \n    the product of their unit digits.\n    Assume the input is\
    \ always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n   \
    \ multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n\
    \    multiply(14,-15) should return 20.\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19,\
    \ 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15)\
    \ == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\
    \t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe5nkvv_9.jl:13\nin expression starting at\
    \ /tmp/tmpe5nkvv_9.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        0\n    else\n        (a * b) % 10\n    end\nend\n\
    </code>\n<|/ a tags=julia |>\n<| a tags=julia |>\n<code>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19,\
    \ 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15)\
    \ == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\
    \t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxrgl930p.jl:17\nin expression starting at\
    \ /tmp/tmpxrgl930p.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if a < 0 || b < 0 \n        error(\"Invalid input\")\n    else if a ==\
    \ 0 || b == 0\n        0\n    else\n        digits = a % 10 + b % 10\n       \
    \ product = digits*10\n        return product\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"Complete the function that takes two integers and returns \n    the product\
    \ of their unit digits.\n    Assume the input is always valid.\n    Examples:\n\
    \    multiply(148, 412) should return 16.\n    multiply(19, 28) should return\
    \ 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should\
    \ return 20.\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\
    \t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplrwc1wai.jl:13\nin expression starting at\
    \ /tmp/tmplrwc1wai.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if a < 0 || b < 0 \n        error(\"Invalid input\")\n    else if a ==\
    \ 0 || b == 0\n        error(\"Invalid input\")\n    else\n        return a*b\n\
    \    end\nend\n</cell>\n<code language=julia-1.0>\n\"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7u36win7.jl:13\nin expression starting at\
    \ /tmp/tmp7u36win7.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        return 0 \n    else \n        return (a * b) % (10^9\
    \ + 7)\n    end\nend\n</cell>\n<code language=julia-1.0>\n@assert multiply(148,\
    \ 412) == 16\n@assert multiply(19, 28) == 72\n@assert multiply(2020, 1851) ==\
    \ 0\n@assert multiply(14,-15) == 20\n</cell>\n<text>\nProblem 3\nWrite a function\
    \ that takes two integers and returns the sum of the \n    unit digits of their\
    \ product (without using multiplication).\n    Examples:\n    sum(148, 412) should\
    \ return 16.\n    sum(19, 28) should return 72.\n    sum(2020, 1851) should return\
    \ 0.\n    sum(14,-15) should return 20.\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19,\
    \ 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15)\
    \ == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\
    \t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphv5pe9f3.jl:17\nin expression starting at\
    \ /tmp/tmphv5pe9f3.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        return 0 \n    else \n        return (a * b) / b \n\
    end\n</cell>\n<code language=julia-1.5>\n@assert multiply(148, 412) == 16\n@assert\
    \ multiply(19, 28) == 72\n@assert multiply(2020, 1851) == 0 \n@assert multiply(14,-15)\
    \ == 20\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and\
    \ returns the number of characters in the string.\nExamples:\n    count(\"hello\"\
    ) should return 5.\n    count(\"h\") should return 2.\n    count(\"hallo\") should\
    \ return 5.\n    count(\"halloo\") should return 0.\n    count(\"halloooo\") should\
    \ return 0.\n    count(\"halloooo\") should return 0.\n    count(\"halloooo\"\
    ) should return 0.\n    count(\"halloooo\") should return 0.\n    count(\"halloooo\"\
    ) should return 0.\n    count(\"halloooo\") should return 0.\n    count(\"halloooo\"\
    ) should return 0.\n    count(\"halloooo\") should return 0.\n    count(\"halloooo\"\
    ) should return 0.\n    count(\"halloooo\") should return 0.\n    count(\"halloooo\"\
    ) should return 0.\n    count(\"halloooo\") should return 0.\n    count(\"halloooo\"\
    ) should return 0.\n    count(\"halloooo\") should return 0.\n    count(\"halloooo\"\
    ) should return 0.\n    count(\"halloooo\") should return 0.\n    count(\"halloooo\"\
    ) should return 0.\n    count(\"halloooo\") should return 0.\n    count(\"halloooo\"\
    ) should return 0.\n    count(\"halloooo\") should return 0.\n    count(\"halloooo\"\
    ) should return 0.\n    count(\"halloooo\") should return 0.\n    count(\"halloooo\"\
    ) should return 0.\n    count(\"halloooo\") should return 0.\n    count(\"halloooo\"\
    ) should return 0.\n    count(\"halloooo\") should return 0.\n    count(\"halloooo\"\
    ) should return 0.\n    count(\"halloooo\") should return 0.\n    count(\"halloooo\"\
    ) should return 0.\n    count(\"halloooo\") should return 0.\n    count(\"halloooo\"\
    ) should return 0.\n    count(\"halloooo\") should return 0.\n    count\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp21vxmirg.jl:16\nin expression starting at\
    \ /tmp/tmp21vxmirg.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        0\n    else\n        (a*b).digits\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) ==\
    \ 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\
    \t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0,\
    \ 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkx6c6qfp.jl:17\nin expression starting at\
    \ /tmp/tmpkx6c6qfp.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if a < 0 || b < 0 \n        error(\"Invalid input\")\n    else if a ==\
    \ 0 || b == 0\n        error(\"Invalid input\")\n    else\n        return a*b\n\
    \    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string\
    \ and returns the number of characters in the string.\nExamples:\n    length(\"\
    hello\") should return 5.\n    length(\"hello \") should return 6.\n    length(\"\
    h\") should return 1.\n    length(\"hi there\") should return 7.\n    length(\"\
    hi there \") should return 8.\n    length(\"hi there!\") should return 9.\n  \
    \  length(\"hi there! \") should return 10.\n    length(\"hi there! hi\") should\
    \ return 11.\n    length(\"hi there! hi \") should return 12.\n    length(\"hi\
    \ there! hi hi\") should return 13.\n    length(\"hi there! hi hi \") should return\
    \ 14.\n    length(\"hi there! hi hi hi\") should return 15.\n    length(\"hi there!\
    \ hi hi hi \") should return 16.\n    length(\"hi there! hi hi hi hi\") should\
    \ return 17.\n    length(\"hi there! hi hi hi hi \") should return 18.\n    length(\"\
    hi there! hi hi hi hi hi\") should return 19.\n    length(\"hi there! hi hi hi\
    \ hi hi \") should return 20.\n    length(\"hi there! hi hi hi hi hi hi\") should\
    \ return 21.\n    length(\"hi there! hi hi hi hi hi hi \") should return 22.\n\
    \    length(\"hi there! hi hi hi hi hi hi hi \") should return 23.\n    length(\"\
    hi there! hi hi hi hi hi hi hi hi\") should return 24.\n    length(\"hi there!\
    \ hi hi hi hi hi hi hi hi \") should return 25.\n    length(\"hi there! hi hi\
    \ hi hi hi hi hi hi hi\") should return 26.\n    length(\"hi there! hi hi hi hi\
    \ hi hi hi hi hi hi\") should return 27.\n    length(\"hi there! hi hi h\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppe1jomsf.jl:13\nin expression starting at\
    \ /tmp/tmppe1jomsf.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0\n        return a\n    else\n        return multiply(a/10, b%10)\n\
    \    end\nend\n</cell>\n<code language=julia-1.0>\n\"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3wefbu37.jl:17\nin expression starting at\
    \ /tmp/tmp3wefbu37.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        return 0 \n    else \n        return (a * b) % (10^9\
    \ + 7)\nend\n</cell>\n<code language=julia-1.3>\n# Test the function \nmultiply(148,\
    \ 412)\n</cell>\n<code language=julia-1.3>\n# Test the function \nmultiply(19,\
    \ 28)\n</cell>\n<code language=julia-1.3>\n# Test the function \nmultiply(2020,\
    \ 1851)\n</cell>\n<code language=julia-1.3>\n# Test the function \nmultiply(14,-15)\n\
    </cell>\n<text>\nProblem 3\nWrite a function that takes two integers and returns\
    \ the sum of the \n    unit digits of their product (without using multiplication).\n\
    \    Examples:\n    sum(148, 412) should return 16.\n    sum(19, 28) should return\
    \ 72.\n    sum(2020, 1851) should return 0.\n    sum(14,-15) should return 20.\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd5whv3_y.jl:16\nin expression starting at\
    \ /tmp/tmpd5whv3_y.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        return 0 \n    else \n        return (a * b) % (10^9\
    \ + 7)\n    end\nend\n\"\"\"\n    \n\"\"\"\n    \n    \n\"\"\"\n\"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmp233wc5pu.jl:22\nin expression starting at /tmp/tmp233wc5pu.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        return 0 \n    else \n        return (a*b) \n    end\n\
    end\n</cell>\n<code language=julia-1.0>\n\"\"\"Complete the function that takes\
    \ two integers and returns \n    the product of their unit digits.\n    Assume\
    \ the input is always valid.\n    Examples:\n    multiply(148, 412) should return\
    \ 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should\
    \ return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t\
    @test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14,\
    \ -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) ==\
    \ 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppt37hwfm.jl:17\nin expression starting at\
    \ /tmp/tmppt37hwfm.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        0\n    else\n        (a*b).digits\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"Complete the function that takes two\
    \ integers and returns \n    the product of their unit digits.\n    Assume the\
    \ input is always valid.\n    Examples:\n    multiply(148, 412) should return\
    \ 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should\
    \ return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t\
    @test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14,\
    \ -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) ==\
    \ 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_30wfs07.jl:17\nin expression starting at\
    \ /tmp/tmp_30wfs07.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if a < 0 || b < 0 \n        error(\"Invalid input\") \n    else \n   \
    \     return a*b\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"Complete\
    \ the function that takes two integers and returns \n    the product of their\
    \ unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148,\
    \ 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcb0zk_kf.jl:17\nin expression starting at\
    \ /tmp/tmpcb0zk_kf.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0\n        return 0\n    \n    unitDigits = divMod(a::Int64, b::Int64)\n\
    \    unitDigits.1 == 0\n    unitDigits.2 == 0\n    \n    unitDigits.1 * unitDigits.2\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"Complete the function that takes\
    \ two integers and returns \n    the product of their unit digits.\n    Assume\
    \ the input is always valid.\n    Examples:\n    multiply(148, 412) should return\
    \ 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should\
    \ return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t\
    @test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14,\
    \ -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) ==\
    \ 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"0.1\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpq5gwc89r.jl:15\nin expression starting at /tmp/tmpq5gwc89r.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0\n        0\n    else\n        if a < 0\n            multiply(-a,\
    \ -b)\n        else\n            multiply(a, -b)\n    end\nend\n</code>\n<|/ a\
    \ tags=julia |>\n<| c |>\nThis doesn't work if you try it with `multiply(148,\
    \ 412)`\n<|/ c |>\n<| c |>\nI tested it and it works. I added the function to\
    \ the answer.\n<|/ c |>\n<| c |>\nI tested it and it works. I added the function\
    \ to the answer.\n<|/ c |>\n<| c |>\nI tested it and it works. I added the function\
    \ to the answer.\n<|/ c |>\n<| c |>\nI tested it and it works. I added the function\
    \ to the answer.\n<|/ c |>\n<| a dscore=1 |>\nI believe that your problem is that\
    \ you do not have a base case in your recursive function.  You do not have a base\
    \ case because you do not know what to return if b == 0.  \nThe base case is when\
    \ b == 0.  You do not have a base case because you do not know what to return\
    \ if b == 0.  \nThe base case is when b == 0.  You do not have a base case because\
    \ you do not know what to return if b == 0.  \nThe base case is when b == 0. \
    \ You do not have a base case because you do not know what to return if b == 0.\
    \  \nThe base case is when b == 0.  You do not have a base case because you do\
    \ not know what to return if b == 0.  \nThe base case is when b == 0.  You do\
    \ not have a base case because you do not know what to return if b == 0.  \nThe\
    \ base case is when b == 0.  You do not have a base case because you do not know\
    \ what to return if b == 0.  \nThe base case is when b == 0.  You do not have\
    \ a base case because you do not know what to return if b == 0.  \nThe base case\
    \ is when b == 0.  You do not have a base case because you do not know what to\
    \ return if b == 0.  \nThe base case is when b == 0.  You do not have a base case\
    \ because you do not know what to return if b == 0.  \nThe base case is when b\
    \ == 0.  You do not have a base case because you do not know what to return if\
    \ b == 0.  \nThe base case is when b == 0.  You do not have a base case because\
    \ you do not know what to return if b == 0.  \nThe base case is when b == 0. \
    \ You do not have a base case \nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\
    \t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdndgk641.jl:20\nin expression starting at\
    \ /tmp/tmpdndgk641.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0\n        0\n    elseif b < 0\n        multiply(-a, -b)\n   \
    \ else\n        (a * b) % 10\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    multiply(148, 412)\n</cell>\n<code language=julia-1.5>\nmultiply(19, 28)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(2020, 1851)\n</cell>\n<code language=julia-1.5>\n\
    multiply(14,-15)\n</cell>\n<text>\nExercise 2\nWrite a function that takes two\
    \ integers and returns the sum of the \n    unit digits of their product (modulo\
    \ 10). \n    For example, multiply(148, 412) should return 16.\n    Use a while\
    \ loop to solve this problem.\n    Examples:\n    multiply(148, 412) should return\
    \ 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should\
    \ return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t\
    @test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14,\
    \ -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) ==\
    \ 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplwubpnbd.jl:19\nin expression starting at\
    \ /tmp/tmplwubpnbd.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if a < 0 || b < 0\n        error(\"Invalid input\")\n    elseif b == 0\n\
    \        return a\n    else\n        return a * b\n    end\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes two integers and returns the sum of the\
    \ \n    unit digits of their product (without using multiplication).\n    For\
    \ example:\n    add(148, 412) should return 16.\n    add(19, 28) should return\
    \ 72.\n    add(2020, 1851) should return 0.\n    add(14,-15) should return 20.\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwpkheed5.jl:19\nin expression starting at\
    \ /tmp/tmpwpkheed5.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        0\n    else\n        (a * b) % 10\n    end\nend\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes two integers and returns\
    \ the sum of the unit digits of their product \n    For example: multiply(148,\
    \ 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \n    Your\
    \ function should return an Int64\n    \"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19,\
    \ 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15)\
    \ == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\
    \t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg_zouq4b.jl:17\nin expression starting at\
    \ /tmp/tmpg_zouq4b.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        0\n    elseif b < 0 \n        multiply(a, -b)\n  \
    \  elseif b > 0 \n        multiply(a, b)\n    else\n        digits(a) * digits(b)\n\
    \    end\nend\n</code>\n<|/ a tags=julia,algorithm |>\n<| c |>\nThis doesn't work.\
    \ `multiply(148, 412)` returns `16`, but `multiply(19, 28)` returns `72`.\n<|/\
    \ c |>\n<| c |>\nAh, I see what you mean. I'll fix it.\n<|/ c |>\n<| c |>\nI fixed\
    \ it now. Thanks for catching that.\n<|/ c |>\n<| c |>\nThanks for your answer!\
    \ I tested it and it works. However, I still don't understand why my code doesn't\
    \ work. Could you please explain to me why my code doesn't work?\n<|/ c |>\n<|\
    \ c |>\nI added an explanation to the answer.\n<|/ c |>\n<| a tags=julia,algorithm\
    \ |>\nHere's a Julia solution that uses no loops:\n<code>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19,\
    \ 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15)\
    \ == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\
    \t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprf6_n41i.jl:21\nin expression starting at\
    \ /tmp/tmprf6_n41i.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        return 0 \n    else \n        return (a * b) / b \n\
    end\n</cell>\n<code language=julia-1.5>\n@assert multiply(148, 412) == 16\n@assert\
    \ multiply(19, 28) == 72\n@assert multiply(2020, 1851) == 0\n@assert multiply(14,-15)\
    \ == 20\n</cell>\n<text>\nExercise 3\nWrite a function that takes two integers\
    \ and returns the sum of the \n    unit digits of their product (that is, the\
    \ product of the unit digits \n    of the two numbers). Assume the input is always\
    \ valid.\n    Examples:\n    productSum(148, 412) should return 16.\n    productSum(19,\
    \ 28) should return 72.\n    productSum(2020, 1851) should return 0.\n    productSum(14,-15)\
    \ should return 20.\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = multiply;\n\
    \t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020,\
    \ 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) ==\
    \ 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf584tghs.jl:16\nin expression starting at\
    \ /tmp/tmpf584tghs.jl:16\n"
  exit_code: 1
  status: SyntaxError
