name: HumanEval_121_solution
language: julia
prompt: "\"\"\"Given a non-empty list of integers, return the sum of all of the odd\
  \ elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8,\
  \ 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24,\
  \ 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n"
tests: "using Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5,\
  \ 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
  \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4,\
  \ 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13,\
  \ 2, 9]) == 3)\nend\n"
completions: ["    sum = 0\n    for i in lst\n        if i%2 == 1\n            sum\
    \ += i\n        end\n    end\n    return sum\nend", "    evens = filter(x -> x\
    \ % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0, lst)\n    return sum(filter(x\
    \ -> x % 2 == 1, odds))\nend\n</cell>\n<text>\nExercise 4\nWrite a function that\
    \ takes a vector of integers and returns the sum of the squares of the even elements.\
    \ \n    \n    \n    Examples\n    solution([5, 8, 7, 1]) ==> 25\n    solution([3,\
    \ 3, 3, 3, 3]) ==> 27\n    solution([30, 13, 24, 321]) ==> 141\n    \"\"\"", " \
    \   evens = filter(x -> x % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0, lst)\n\
    \    \n    sum(filter(x -> x % 2 == 1, odds))\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert solution([5, 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n\
    @assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\nPart III. Vectorized\
    \ Solutions", "    evens = filter(x -> x % 2 == 0, lst)\n    odds = filter(x ->\
    \ x % 2 != 0, lst)\n    sum(evens) + sum(odds)\nend\n</cell>\n<text>\nProblem\
    \ 7\nWrite a function that takes a list of numbers and returns the product of\
    \ the numbers in the list. Do not use the reduce function.", "    \n    sum =\
    \ 0\n    for x in lst\n        if x % 2 == 1\n            sum += x\n        end\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ solution([5, 8, 7, 1])\n</cell>\n<code language=julia-1.5>\n@code_warntype solution([3,\
    \ 3, 3, 3, 3])\n</cell>\n<code language=julia-1.5>\n@code_warntype solution([30,\
    \ 13, 24, 321])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ product of all even elements in a given list.", "    \n    evens = filter(x\
    \ -> x % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0, lst)\n    \n    sum(filter(x\
    \ -> x % 2 == 1, odds))\nend\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ solution([5, 8, 7, 1])\n</cell>\n<code language=julia-1.5>\n@code_warntype solution([3,\
    \ 3, 3, 3, 3])\n</cell>\n<code language=julia-1.5>\n@code_warntype solution([30,\
    \ 13, 24, 321])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ of numbers and returns the number of elements that are odd.", "    evens = lst[findall(x\
    \ -> x % 2 == 0, lst)]\n    odds = lst[findall(x -> x % 2 != 0, lst)]\n    return\
    \ sum(filter(x -> x % 2 == 1, odds)) + sum(filter(x -> x % 2 != 1, evens))\nend\n\
    </cell>\n<code language=julia-1.3>\n@time solution([5, 8, 7, 1])\n</cell>\n<code\
    \ language=julia-1.3>\n@time solution([3, 3, 3, 3, 3])\n</cell>\n<code language=julia-1.3>\n\
    @time solution([30, 13, 24, 321])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the number of elements in a list that satisfy a predicate.", " \
    \   evens = filter(x -> x % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0, lst)\n\
    \    sum(filter(x -> x % 2 == 1, odds))\nend\n</cell>\n<text>\nProblem 7\nWrite\
    \ a function that returns the number of elements in a list that satisfy a predicate\
    \ (predicate(element) == true).", "    evens = filter(x -> x % 2 == 0, lst)\n\
    \    odds = filter(x -> x % 2 != 0, lst)\n    \n    return sum(filter(x -> x %\
    \ 2 == 1, odds)) + sum(filter(x -> x % 2 == 0, evens))\nend\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype solution([5, 8, 7, 1])\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ solution([3, 3, 3, 3, 3])\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ solution([30, 13, 24, 321])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes in a list of integers and returns the sum of the even elements that are\
    \ in odd positions.", "    evens = lst[findall(x -> x % 2 == 0, lst)]\n    odds\
    \ = lst[findall(x -> x % 2 != 0, lst)]\n    return sum(evens) + sum(odds)\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert solution([5, 8, 7, 1]) == 12\n@assert\
    \ solution([3, 3, 3, 3, 3]) == 9\n@assert solution([30, 13, 24, 321]) == 0\n</cell>\n\
    <text>\nPart 2\nThe second puzzle involves finding the largest palindrome made\
    \ from the product of two 3-digit numbers.", "    \n    sum = 0\n    for x in\
    \ lst\n        if x % 2 == 1\n            sum += x\n        end\n    end\n   \
    \ return sum\nend\n</cell>\n<code language=julia-1.5>\n@assert solution([5, 8,\
    \ 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n@assert solution([30,\
    \ 13, 24, 321]) == 0\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the product of the even elements of a given list. For example, given [5, 8,\
    \ 7, 1], return 50.", "    \n    sum = 0\n    for i in lst\n        if i%2 ==\
    \ 1\n            sum += i\n        end\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert solution([5, 8, 7, 1]) == 12\n@assert solution([3,\
    \ 3, 3, 3, 3]) == 9\n@assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\n\
    Part III. Recursion\nA recursive function is a function that calls itself. In\
    \ Julia, a recursive function is defined using the function keyword. For example,\
    \ consider the following recursive function:", "    sum = 0\n    for i in lst\n\
    \        if i%2 == 1\n            sum += i\n        end\n    end\n    return sum\n\
    end\n</cell>\n<code language=julia-1.4>\n@code_warntype solution([5, 8, 7, 1])\n\
    </cell>\n<code language=julia-1.4>\n@code_warntype solution([3, 3, 3, 3, 3])\n\
    </cell>\n<code language=julia-1.4>\n@code_warntype solution([30, 13, 24, 321])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the product of all\
    \ the even elements in a list.", "    evens = lst[findall(x -> x % 2 == 0, lst)]\n\
    \    odd = lst[findall(x -> x % 2 != 0, lst)]\n    return sum(filter(x -> x in\
    \ odd, evens))\nend\n</cell>\n<code language=julia-1.5>\n@assert solution([5,\
    \ 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n@assert solution([30,\
    \ 13, 24, 321]) == 0\n</cell>\n<text>\nPart II: Recursion\nA recursive function\
    \ can be defined recursively, which means it calls itself. A recursive function\
    \ can have two types of inputs:", "    even = filter(x -> x % 2 == 0, lst)\n \
    \   odd = filter(x -> x % 2 != 0, lst)\n    \n    return sum(filter(x -> x % 2\
    \ == 1, odd))\nend\n</cell>\n<code language=julia-1.5>\n@assert solution([5, 8,\
    \ 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n@assert solution([30,\
    \ 13, 24, 321]) == 0\n</cell>\n<text>\nPart III. Filtering by index\nGiven a vector\
    \ x, return a vector y where each element of y is x[i] + y[i+1] + y[i+2] + y[i+3]\
    \ + y[i+4] + y[i+5] + y[i+6] + y[i+7] + y[i+8] + y[i+9] + y[i+10] + y[i+11] +\
    \ y[i+12] + y[i+13] + y[i+14] + y[i+15] + y[i+16] + y[i+17] + y[i+18] + y[i+19]\
    \ + y[i+20] + y[i+21] + y[i+22] + y[i+23] + y[i+24] + y[i+25] + y[i+26] + y[i+27]\
    \ + y[i+28] + y[i+29] + y[i+30] + y[i+31] + y[i+32] + y[i+33] + y[i+34] + y[i+35]\
    \ + y[i+36] + y[i+37] + y[i+38] + y[i+39] + y[i+40] + y[i+41] + y[i+42] + y[i+43]\
    \ + y[i+44] + y[i+45] + y[i+46] + y[i+47] + y[i+48] + y[i+49] + y[i+50] + y[i+51]\
    \ + y[i+52] + y[i+53] + y[i+54] + y[i+55] + y[i+56] + y[i+57] + y[i+58] + y[i+59]\
    \ + y[i+60] + y[i+61] + y[i+62] + y[i+63] + y[i+64] + y[i+65] + y[i+66] + y[i+67]\
    \ + y[i+68] + y[i+69] + y[i+70] + y[i+71] + y[i+72] + y[i+73] + y[i+74] + y[i+75]\
    \ + y[i+76] + y[i+77] + y[i+78] + y[i+79] + y[i+80] + y[i+81] + y[i+82] + y[i+83]\
    \ + y[i+84] + y[i+85] + y[i+86] + y[i+87] + y[i+88] + y[i+89] + y[i+90] + y[i+91]\
    \ + y[i+92] + y[i+93] + y[i+94] + ", "    evens = filter(x -> x % 2 == 0, lst)\n\
    \    odds = filter(x -> x % 2 != 0, lst)\n    return sum(filter(x -> x % 2 ==\
    \ 1, odds)) + sum(filter(x -> x % 2 == 0, evens))\nend\n</cell>\n<text>\nProblem\
    \ 7\nWrite a function that returns the number of elements in a list that satisfy\
    \ a given condition. For example, given [5, 7, 7, 8, 8, 10], return 3.", "   \
    \ sum = 0\n    for i in lst\n        if i%2 == 1\n            sum += i\n     \
    \   end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n@time\
    \ solution(lst)\n</cell>\n<text>\nProblem 7\nWrite a function that returns the\
    \ number of elements in a list that are not equal to some specified value.", " \
    \   even = filter(x -> x % 2 == 0, lst)\n    odd = filter(x -> x % 2 != 0, lst)\n\
    \    return sum(filter(x -> x % 2 == 1, odd))\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert solution([5, 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n\
    @assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\nPart III. Recursion\n\
    A recursive function is a function that calls itself. This can be very useful\
    \ in many situations. For example, consider the Fibonacci sequence defined as:",
  "    evens = filter(x -> x % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0, lst)\n\
    \    return sum(filter(x -> x in odds, evens))\nend\n</cell>\n<text>\nProblem\
    \ 3\nWrite a function that returns the product of all the even numbers in a list.",
  "    \n    evens = filter(x -> x % 2 == 0, lst)\n    odds = filter(x -> x % 2 !=\
    \ 0, lst)\n    \n    return sum(x -> x % 2 == 1, odds) + sum(x -> x % 2 != 1,\
    \ evens)\nend\n</cell>\n<code language=julia-1.5>\n@time solution([5, 8, 7, 1]);\n\
    </cell>\n<code language=julia-1.5>\n@time solution([3, 3, 3, 3, 3]);\n</cell>\n\
    <code language=julia-1.5>\n@time solution([30, 13, 24, 321]);\n</cell>\n<text>\n\
    Part 2: Recursion\nA recursive function has two parts: base case and recursive\
    \ case. Base case is when the function does not need to do any work. Recursive\
    \ case is when the function needs to do some work and needs to call itself.",
  "    even = filter(x -> x % 2 == 0, lst)\n    odd = filter(x -> x % 2 != 0, lst)\n\
    \    \n    return sum(filter(x -> x % 2 == 1, odd))\nend\n</cell>\n<code language=julia-1.0>\n\
    @assert solution([5, 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n\
    @assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\nPart II: More on maps\
    \ and filters \nmaps and filters are extremely useful functions in Julia. Let's\
    \ see how they work. First, let's see how map works:", "    evens = filter(x ->\
    \ x % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0, lst)\n    \n    sum(filter(x\
    \ -> x % 2 == 1, odds))\nend\n</cell>\n<code language=julia-1.5>\n@assert solution([5,\
    \ 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n@assert solution([30,\
    \ 13, 24, 321]) == 0\n</cell>\n<text>\nPart III. Filtering by index", "    evens\
    \ = filter(x -> x % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0, lst)\n  \
    \  \n    return sum(filter(x -> x % 2 == 1, odds))\nend\n</cell>\n<code language=julia-1.4>\n\
    @time solution([5, 8, 7, 1])\n</cell>\n<code language=julia-1.4>\n@time solution([3,\
    \ 3, 3, 3, 3])\n</cell>\n<code language=julia-1.4>\n@time solution([30, 13, 24,\
    \ 321])\n</cell>\n<text>\nExercise: Write a function that takes a vector and returns\
    \ the number of elements that are greater than the mean of the vector.", "   \
    \ evens = filter(x -> x % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0, lst)\n\
    \    \n    return sum(filter(x -> x % 2 == 1, odds))\nend\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype solution([5, 8, 7, 1])\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ solution([3, 3, 3, 3, 3])\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ solution([30, 13, 24, 321])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the product of all the even elements in a given list.", "    evens =\
    \ filter(x -> x % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0, lst)\n    return\
    \ sum(filter(x -> x % 2 == 1, odds))\nend\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the product of the even elements of a list.", "    sum\
    \ = 0\n    for i in lst\n        if i%2 == 1\n            sum += i\n        end\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ solution([5, 8, 7, 1])\n</cell>\n<code language=julia-1.5>\n@code_warntype solution([3,\
    \ 3, 3, 3, 3])\n</cell>\n<code language=julia-1.5>\n@code_warntype solution([30,\
    \ 13, 24, 321])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ number of times the number 3 appears in the list [3, 3, 3, 3, 3]. \nWrite a\
    \ function that returns the number of times the number 3 appears in the list [3,\
    \ 3, 3, 3, 3, 3]. \nWrite a function that returns the number of times the number\
    \ 3 appears in the list [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, ", "    evens = filter(x -> x % 2 == 0, lst)\n    odds = filter(x\
    \ -> x % 2 != 0, lst)\n    return sum(filter(x -> x in odds, evens))\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert solution([5, 8, 7, 1]) == 12\n@assert solution([3,\
    \ 3, 3, 3, 3]) == 9\n@assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\n\
    Part III. Sum even numbers in an array", "    \n    sum = 0\n    for i in lst\n\
    \        if i%2 == 1\n            sum += i\n        end\n    end\n    return sum\n\
    end", "    evens = filter(x -> x % 2 == 0, lst)\n    odds = filter(x -> x % 2\
    \ != 0, lst)\n    \n    sum(filter(x -> x % 2 == 1, odds))\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype solution([5, 8, 7, 1])\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype solution([3, 3, 3, 3, 3])\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype solution([30, 13, 24, 321])\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the product of all of the odd elements that are in even\
    \ positions.", "    evens = lst[findall(x -> x % 2 == 0, lst)]\n    odds = lst[findall(x\
    \ -> x % 2 != 0, lst)]\n    return sum(filter(x -> x % 2 == 1, odds)) + sum(filter(x\
    \ -> x % 2 == 0, evens))\nend\n</cell>\n<code language=julia-1.5>\n@time solution([5,\
    \ 8, 7, 1])\n</cell>\n<code language=julia-1.5>\n@time solution([3, 3, 3, 3, 3])\n\
    </cell>\n<code language=julia-1.5>\n@time solution([30, 13, 24, 321])\n</cell>\n\
    <text>\nExercise: Write a function that returns the sum of the even elements in\
    \ a given list.", "    \n    sum = 0\n    for i in lst\n        if i%2 == 1\n\
    \            sum += i\n        end\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype solution([5, 8, 7, 1])\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype solution([3, 3, 3, 3, 3])\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype solution([30, 13, 24, 321])\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a vector of integers and returns the number of times each\
    \ integer appears in the vector. ", "    evens = lst[findall(x -> x % 2 == 0,\
    \ lst)]\n    odds = lst[findall(x -> x % 2 != 0, lst)]\n    return sum(filter(x\
    \ -> x % 2 == 1, odds)) + sum(filter(x -> x % 2 != 1, evens))\nend\n</cell>\n\
    <code language=julia-1.0>\n@assert solution([5, 8, 7, 1]) == 12\n@assert solution([3,\
    \ 3, 3, 3, 3]) == 9\n@assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\n\
    Part III. Finding the first and last element of a list\nGiven a non-empty list\
    \ of integers, return the index of the first and last element in the list that\
    \ contain some specific value.", "    even = lst[findall(x -> x % 2 == 0, lst)]\n\
    \    odd = lst[findall(x -> x % 2 != 0, lst)]\n    return sum(filter(x -> x %\
    \ 2 == 1, even)) + sum(filter(x -> x % 2 != 1, odd))\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert solution([5, 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n\
    @assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\nProblem 7: Write a\
    \ function that returns the number of times a given element appears in a given\
    \ list.", "    evens = lst[findall(x -> x % 2 == 0, lst)]\n    odd = sum(x ->\
    \ x % 2 != 0, lst)\n    return odd - evens\nend", "    evens = filter(x -> x %\
    \ 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0, lst)\n    return sum(x -> x\
    \ in odds, evens)\nend\n</cell>\n<code language=julia-1.5>\n@assert solution([5,\
    \ 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n@assert solution([30,\
    \ 13, 24, 321]) == 0\n</cell>\n<text>\nPart 2: Recursion\nA recursive function\
    \ is a function that calls itself. This can be done in Julia by using the function\
    \ keyword.", "    evens = lst[findall(x -> x % 2 == 0, lst)]\n    odds = lst[findall(x\
    \ -> x % 2 != 0, lst)]\n    sum(evens) + sum(odds)\nend\n</cell>\n<code language=julia-1.3>\n\
    @time solution([5, 8, 7, 1])\n</cell>\n<code language=julia-1.3>\n@time solution([3,\
    \ 3, 3, 3, 3])\n</cell>\n<code language=julia-1.3>\n@time solution([30, 13, 24,\
    \ 321])\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector of\
    \ integers and returns the number of elements that are odd.", "    evens = filter(x\
    \ -> x % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0, lst)\n    sum(filter(x\
    \ -> x % 2 == 1, odds))\nend\n</cell>\n<code language=julia-1.0>\n@assert solution([5,\
    \ 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n@assert solution([30,\
    \ 13, 24, 321]) == 0\n</cell>\n<text>\nProblem 7\nWrite a function that returns\
    \ the number of times a given element appears in a given list.", "    evens =\
    \ filter(x -> x % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0, lst)\n    return\
    \ sum(filter(x -> x % 2 == 1, odds))\nend\n</cell>\n<code language=julia-1.5>\n\
    @time solution([5, 8, 7, 1])\n</cell>\n<code language=julia-1.5>\n@time solution([3,\
    \ 3, 3, 3, 3])\n</cell>\n<code language=julia-1.5>\n@time solution([30, 13, 24,\
    \ 321])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a list of integers\
    \ and returns the number of elements in the list that are less than or equal to\
    \ zero.", "    evens = lst[findall(x -> x % 2 == 0, lst)]\n    sum(evens)\nend\n\
    </cell>\n<text>\nExercise 4\nWrite a function that returns the product of all\
    \ the even elements in a list.", "    evens = filter(x -> x % 2 == 0, lst)\n \
    \   odds = filter(x -> x % 2 != 0, lst)\n    sum(filter(x -> x % 2 == 1, odds))\n\
    end\n</cell>\n<text>\nProblem 7: Sum of all odd numbers\nWrite a function that\
    \ returns the sum of all of the odd numbers in a given list.", "    \n    sum\
    \ = 0\n    for x in lst\n        if x % 2 == 1\n            sum += x\n       \
    \ end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n@time\
    \ solution([5, 8, 7, 1])\n</cell>\n<code language=julia-1.5>\n@time solution([3,\
    \ 3, 3, 3, 3])\n</cell>\n<code language=julia-1.5>\n@time solution([30, 13, 24,\
    \ 321])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the sum of\
    \ the squares of the numbers in a given list.", "    evens = filter(x -> x % 2\
    \ == 0, lst)\n    odds = filter(x -> x % 2 != 0, lst)\n    return sum(filter(x\
    \ -> x % 2 == 1, odds))\nend\n</cell>\n<code language=julia-1.5>\n@time solution([5,\
    \ 8, 7, 1])\n</cell>\n<code language=julia-1.5>\n@time solution([3, 3, 3, 3, 3])\n\
    </cell>\n<code language=julia-1.5>\n@time solution([30, 13, 24, 321])\n</cell>\n\
    <text>\nExercise\nWrite a function that takes in a list of integers and returns\
    \ the number of elements in the list that are greater than the average of the\
    \ list.", "    evens = filter(x -> x % 2 == 0, lst)\n    odds = filter(x -> x\
    \ % 2 != 0, lst)\n    sum(filter(x -> x % 2 == 1, odds))\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@time solution([5, 8, 7, 1])\n</cell>\n<code language=julia-1.5>\n\
    @time solution([3, 3, 3, 3, 3])\n</cell>\n<code language=julia-1.5>\n@time solution([30,\
    \ 13, 24, 321])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ sum of the first n numbers in a vector. \nFor example, if the vector is [5,\
    \ 8, 7, 1], the sum of the first 3 numbers is 8.", "    evens = filter(x -> x\
    \ % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0, lst)\n    sum(filter(x ->\
    \ x % 2 == 1, odds))\nend\n</cell>\n<text>\nExercise 4\nWrite a function that\
    \ returns the product of the even elements of a list.", "    evens = lst[findall(x\
    \ -> x % 2 == 0, lst)]\n    odds = lst[findall(x -> x % 2 != 0, lst)]\n    sum(evens)\
    \ + sum(odds)\nend\n</cell>\n<code language=julia-1.5>\n@code_warntype solution([5,\
    \ 8, 7, 1])\n</cell>\n<code language=julia-1.5>\n@code_warntype solution([3, 3,\
    \ 3, 3, 3])\n</cell>\n<code language=julia-1.5>\n@code_warntype solution([30,\
    \ 13, 24, 321])\n</cell>\n<text>\nExercise 2\nWrite a function that takes in a\
    \ list of integers and returns the number of elements that are odd.", "    evens\
    \ = filter(x -> x % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0, lst)\n  \
    \  \n    return sum(filter(x -> x % 2 == 1, odds)) + sum(evens)\nend\n</cell>\n\
    <code language=julia-1.4>\n@assert solution([5, 8, 7, 1]) == 12\n@assert solution([3,\
    \ 3, 3, 3, 3]) == 9\n@assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes in a list of integers and returns the\
    \ number of even and odd numbers in the list. ", "    evens = filter(x -> x %\
    \ 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0, lst)\n    \n    return sum(filter(x\
    \ -> x % 2 == 1, odds))\nend\n</cell>\n<code language=julia-1.5>\n@time solution([5,\
    \ 8, 7, 1])\n</cell>\n<code language=julia-1.5>\n@time solution([3, 3, 3, 3, 3])\n\
    </cell>\n<code language=julia-1.5>\n@time solution([30, 13, 24, 321])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of elements in a\
    \ list that satisfy a given condition. For example, a list [5, 8, 7, 1] contains\
    \ 3 elements that satisfy the condition that they are both odd.", "    evens =\
    \ filter(x -> x % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0, lst)\n    sum(filter(x\
    \ -> x % 2 == 1, odds))\nend\n</cell>\n<text>\nProblem 7\nWrite a function that\
    \ returns the product of the numbers in a given list.", "    evens = filter(x\
    \ -> x % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0, lst)\n    sum(filter(x\
    \ -> x % 2 == 1, odds))\nend\n</cell>\n<code language=julia-1.5>\n@assert solution([5,\
    \ 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n@assert solution([30,\
    \ 13, 24, 321]) == 0\n</cell>\n<text>\nPart II: Recursion\nNow let's try solving\
    \ this problem using recursion.", "    even = filter(x -> x % 2 == 0, lst)\n \
    \   odd = filter(x -> x % 2 != 0, lst)\n    \n    return sum(filter(x -> x % 2\
    \ == 1, odd))\nend\n</cell>\n<code language=julia-1.5>\n@assert solution([5, 8,\
    \ 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n@assert solution([30,\
    \ 13, 24, 321]) == 0\n</cell>\n<text>\nPart III. Recursion\nA recursive function\
    \ is a function that calls itself. A recursive function can be defined recursively,\
    \ or iteratively.", "    evens = lst[findall(x -> x % 2 == 0, lst)]\n    odds\
    \ = lst[findall(x -> x % 2 != 0, lst)]\n    return sum(x -> x % 2 == 1, evens)\
    \ + sum(x -> x % 2 != 1, odds)\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ solution([5, 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n@assert\
    \ solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\nProblem 7\nWrite a function\
    \ that returns the number of times the number '5' appears in the list [5, 6, 7,\
    \ 8, 9].", "    sum = 0\n    for i in lst\n        if i%2 == 1\n            sum\
    \ += i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert solution([5, 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n\
    @assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\nProblem 7: Write a\
    \ function that returns the product of all of the odd elements in a given list.",
  "    evens = filter(x -> x % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0, lst)\n\
    \    sum(filter(x -> x % 2 == 1, odds))\nend\n</cell>\n<text>\nProblem 7\nWrite\
    \ a function that returns the number of times a given value appears in a given\
    \ list.", "    evens = lst[findall(x -> x % 2 == 1, lst)]\n    odds = lst[findall(x\
    \ -> x % 2 != 1, lst)]\n    return sum(filter(x -> x % 2 == 1, odds)) + sum(filter(x\
    \ -> x % 2 != 1, evens))\nend\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ solution([5, 8, 7, 1])\n</cell>\n<code language=julia-1.5>\n@code_warntype solution([3,\
    \ 3, 3, 3, 3])\n</cell>\n<code language=julia-1.5>\n@code_warntype solution([30,\
    \ 13, 24, 321])\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector\
    \ of integers and returns the number of elements that are less than or equal to\
    \ each of the elements in the vector.", "    evens = filter(x -> x % 2 == 0, lst)\n\
    \    odds = filter(x -> x % 2 != 0, lst)\n    sum(filter(x -> x % 2 == 1, odds))\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert solution([5, 8, 7, 1]) == 12\n\
    @assert solution([3, 3, 3, 3, 3]) == 9\n@assert solution([30, 13, 24, 321]) ==\
    \ 0\n</cell>\n<text>\nPart II: Functional Programming\nFunctional programming\
    \ is where you write programs that manipulate collections of data without explicitly\
    \ looping over them. Julia makes this easy by providing you with a high-level\
    \ interface that allows you to express computations in terms of higher-order functions.",
  "    evens = filter(x -> x % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0, lst)\n\
    \    return sum(filter(x -> x % 2 == 1, odds)) + sum(filter(x -> x % 2 == 0, evens))\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert solution([5, 8, 7, 1]) == 12\n\
    @assert solution([3, 3, 3, 3, 3]) == 9\n@assert solution([30, 13, 24, 321]) ==\
    \ 0\n</cell>\n<text>\nPart 3: Recursion\nA recursive function can be defined recursively.\
    \ A recursive function calls itself. A recursive function can have one or more\
    \ base cases. A base case is a case that does not require recursion.", "    sum\
    \ = 0\n    for i in lst\n        if i%2 == 1\n            sum += i\n        end\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n@assert solution([5,\
    \ 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n@assert solution([30,\
    \ 13, 24, 321]) == 0\n</cell>\n<text>\nProblem 7: Sum even numbers in a vector",
  "    evens = filter(x -> x % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0, lst)\n\
    \    \n    return sum(filter(x -> x % 2 == 1, odds))\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert solution([5, 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n\
    @assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\nProblem 7\nWrite a\
    \ function that returns a list of all numbers from 1 to n that are divisible by\
    \ k.", "    evens = filter(x -> x % 2 == 0, lst)\n    odds = filter(x -> x % 2\
    \ != 0, lst)\n    \n    return sum(x -> x % 2 == 0, odds) + sum(x -> x % 2 !=\
    \ 0, evens)\nend\n</cell>\n<code language=julia-1.5>\n@time solution([5, 8, 7,\
    \ 1])\n</cell>\n<code language=julia-1.5>\n@time solution([3, 3, 3, 3, 3])\n</cell>\n\
    <code language=julia-1.5>\n@time solution([30, 13, 24, 321])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a list of integers and returns the sum\
    \ of the even elements that are in odd positions.", "    evens = filter(x -> x\
    \ % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0, lst)\n    \n    return sum(x\
    \ -> x in odds, evens)\nend\n</cell>\n<code language=julia-1.5>\n@assert solution([5,\
    \ 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n@assert solution([30,\
    \ 13, 24, 321]) == 0\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a vector of strings and returns a vector of strings where each string is the\
    \ concatenation of all the strings in the original vector, except the string \"\
    and\" which concatenates all the strings in the original vector except the string\
    \ \"and\" again. For example, [\"hello\", \"and\", \"goodbye\"] would become [\"\
    hellogoodbye\"].", "    evens = filter(x -> x % 2 == 0, lst)\n    odds = filter(x\
    \ -> x % 2 != 0, lst)\n    return sum(filter(x -> x % 2 == 1, odds)) + sum(filter(x\
    \ -> x % 2 == 0, evens))\nend\n</cell>\n<code language=julia-1.5>\n@time solution([5,\
    \ 8, 7, 1]);\n@time solution([3, 3, 3, 3, 3]);\n@time solution([30, 13, 24, 321]);\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector of integers\
    \ and returns the sum of the squares of the odd elements that are in even positions.",
  "    sum = 0\n    for x in lst\n        if x % 2 == 1\n            sum += x\n  \
    \      end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert solution([5, 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n\
    @assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\nProblem 8\nWrite a\
    \ function that returns a list of all numbers from 1 to n that are divisible by\
    \ 3.", "    even = filter(x -> x % 2 == 0, lst)\n    odd = filter(x -> x % 2 !=\
    \ 0, lst)\n    return sum(filter(x -> x % 2 == 1, odd))\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert solution([5, 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n\
    @assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that returns the product of all of the even elements in a given list.",
  "    sum = 0\n    for i in lst\n        if i%2 == 1\n            sum += i\n    \
    \    end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ solution([5, 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n@assert\
    \ solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\nProblem 8\nWrite a function\
    \ that returns the sum of the numbers in the list except the first and last elements.",
  "    evens = filter(x -> x % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0, lst)\n\
    \    return sum(filter(x -> x % 2 == 1, odds))\nend\n</cell>\n<code language=julia-1.5>\n\
    @time solution([5, 8, 7, 1])\n</cell>\n<code language=julia-1.5>\n@time solution([3,\
    \ 3, 3, 3, 3])\n</cell>\n<code language=julia-1.5>\n@time solution([30, 13, 24,\
    \ 321])\n</cell>\n<text>\nExercise: Write a function that takes a vector of integers\
    \ and returns the number of unique elements in the vector. \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    evens = filter(x\
    \ -> x % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0, lst)\n    return sum(odds[2:end-1])\
    \ + sum(evens[2:end-1])\nend\n</cell>\n<code language=julia-1.5>\n@time solution([5,\
    \ 8, 7, 1])\n</cell>\n<code language=julia-1.5>\n@time solution([3, 3, 3, 3, 3])\n\
    </cell>\n<code language=julia-1.5>\n@time solution([30, 13, 24, 321])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector of integers and returns\
    \ the sum of the squares of the even elements that are in odd positions.", " \
    \   even = filter(x -> x % 2 == 0, lst)\n    odd = filter(x -> x % 2 != 0, lst)\n\
    \    return sum(filter(x -> x % 2 == 1, odd))\nend\n</cell>\n<code language=julia-1.4>\n\
    @time solution([5, 8, 7, 1])\n</cell>\n<code language=julia-1.4>\n@time solution([3,\
    \ 3, 3, 3, 3])\n</cell>\n<code language=julia-1.4>\n@time solution([30, 13, 24,\
    \ 321])\n</cell>\n<text>\nExercise 3\nWrite a function that returns the number\
    \ of times a given value appears in a given list. For example, given [5, 8, 7,\
    \ 1, 3, 3], return 2 since 3 appears twice.", "    evens = lst[findall(x -> x\
    \ % 2 == 0, lst)]\n    odd = lst[findall(x -> x % 2 != 0, lst)]\n    return sum(odd.-evens)\n\
    end\n</cell>\n<code language=julia-1.5>\n@time solution([5, 8, 7, 1])\n</cell>\n\
    <code language=julia-1.5>\n@time solution([3, 3, 3, 3, 3])\n</cell>\n<code language=julia-1.5>\n\
    @time solution([30, 13, 24, 321])\n</cell>\n<text>\nPart 2\nGiven a non-empty\
    \ list of integers, return a new list containing all the contiguous sublists of\
    \ length 3 or greater that add up to a specific target.", "    \n    sum = 0\n\
    \    for i in lst\n        if i%2 == 1\n            sum += i\n        end\n  \
    \  end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ solution([5, 8, 7, 1])\n</cell>\n<code language=julia-1.5>\n@code_warntype solution([3,\
    \ 3, 3, 3, 3])\n</cell>\n<code language=julia-1.5>\n@code_warntype solution([30,\
    \ 13, 24, 321])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ sum of the even elements in a given list.", "    evens = lst[findall(x -> x\
    \ % 2 == 0, lst)]\n    odds = lst[findall(x -> x % 2 != 0, lst)]\n    sum(filter(x\
    \ -> x % 2 == 1, odds))\nend\n</cell>\n<text>\nProblem 7\nWrite a function that\
    \ returns the number of times a given element appears in a given list.", "   \
    \ evens = filter(x -> x % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0, lst)\n\
    \    return sum(filter(x -> x % 2 == 1, odds))\nend\n</cell>\n<text>\nSolution\
    \ 2\nThe second solution is much more concise and efficient.", "    evens = lst[findall(x\
    \ -> x % 2 == 0, lst)]\n    odds = lst[findall(x -> x % 2 != 0, lst)]\n    return\
    \ sum(x -> x % 2 == 0, evens) + sum(x -> x % 2 != 0, odds)\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype solution([5, 8, 7, 1])\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype solution([3, 3, 3, 3, 3])\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype solution([30, 13, 24, 321])\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the product of all the even elements in a given list.",
  "    sum = 0\n    for x in lst\n        if x % 2 == 1\n            sum += x\n  \
    \      end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert solution([5, 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n\
    @assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that returns the number of times a given value appears in a given list.",
  "    evens = lst[findall(x -> x % 2 == 0, lst)]\n    odd = sum(lst[findall(x ->\
    \ x % 2 != 0, lst)])\n    return odd + sum(evens)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time solution([5, 8, 7, 1])\n</cell>\n<code language=julia-1.5>\n@time solution([3,\
    \ 3, 3, 3, 3])\n</cell>\n<code language=julia-1.5>\n@time solution([30, 13, 24,\
    \ 321])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the sum of\
    \ the squares of the numbers in a given list.", "    evens = filter(x -> x % 2\
    \ == 0, lst)\n    odds = filter(x -> x % 2 != 0, lst)\n    sum(filter(x -> x %\
    \ 2 == 1, odds))\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a list of numbers and returns the number of even and odd numbers in the list.",
  "    even = lst[findall(x -> x % 2 == 0, lst)]\n    odd = lst[findall(x -> x % 2\
    \ != 0, lst)]\n    return sum(filter(x -> x % 2 == 1, odd))\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype solution([5, 8, 7, 1])\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype solution([3, 3, 3, 3, 3])\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype solution([30, 13, 24, 321])\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns the number of elements in a list that satisfy a given\
    \ condition. For example, suppose that you are given a list of numbers and you\
    \ want to count the number of positive integers in that list. Write a function\
    \ that takes in a list as an argument and returns the number of positive integers\
    \ in that list.", "    sum = 0\n    for x in lst\n        if x % 2 == 1\n    \
    \        sum += x\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype solution([5, 8, 7, 1])\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ solution([3, 3, 3, 3, 3])\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ solution([30, 13, 24, 321])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the product of all even numbers in a given list.", "    sum = 0\n  \
    \  for i in lst\n        if i%2 == 1\n            sum += i\n        end\n    end\n\
    \    return sum\nend", "    even = filter(x -> x % 2 == 0, lst)\n    odd = filter(x\
    \ -> x % 2 != 0, lst)\n    return sum(filter(x -> x % 2 == 1, odd))\nend\n</cell>\n\
    <code language=julia-1.5>\n@time solution([5, 8, 7, 1])\n</cell>\n<code language=julia-1.5>\n\
    @time solution([3, 3, 3, 3, 3])\n</cell>\n<code language=julia-1.5>\n@time solution([30,\
    \ 13, 24, 321])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ and returns the number of elements that are less than or equal to each element\
    \ in the vector. For example, solution([5, 8, 7, 1]) should return 3.", "    sum\
    \ = 0\n    for i in lst\n        if i%2 == 1\n            sum += i\n        end\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.3>\n@code_warntype\
    \ solution([5, 8, 7, 1])\n</cell>\n<code language=julia-1.3>\n@code_warntype solution([3,\
    \ 3, 3, 3, 3])\n</cell>\n<code language=julia-1.3>\n@code_warntype solution([30,\
    \ 13, 24, 321])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ of integers and returns the sum of the squares of the even elements in the vector.",
  "    \n    sum = 0\n    for x in lst\n        if x % 2 == 1\n            sum +=\
    \ x\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert solution([5, 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n\
    @assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\nProblem 7", "    \n\
    \    sum = 0\n    for i in lst\n        if i%2 == 1\n            sum += i\n  \
    \      end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert solution([5, 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n\
    @assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that takes a list of integers and returns the product of all of the\
    \ even elements that are in odd positions.", "    evens = filter(x -> x % 2 ==\
    \ 0, lst)\n    odds = filter(x -> x % 2 != 0, lst)\n    \n    sum(evens) + sum(odds)\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert solution([5, 8, 7, 1]) == 12\n\
    @assert solution([3, 3, 3, 3, 3]) == 9\n@assert solution([30, 13, 24, 321]) ==\
    \ 0\n</cell>\n<text>\nPart II: Recursion\nRecursion is a powerful tool that can\
    \ help us solve problems more efficiently than iterative approaches. In this section,\
    \ we will explore the basics of recursion.", "    evens = filter(x -> x % 2 ==\
    \ 0, lst)\n    odds = filter(x -> x % 2 != 0, lst)\n    \n    sum(evens) + sum(odds)\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that takes a list of numbers\
    \ and returns the number of elements in the list that are less than or equal to\
    \ 5", "    \n    sum = 0\n    for x in lst\n        if x % 2 == 1\n          \
    \  sum += x\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert solution([5, 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n\
    @assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\nPart II: Recursion\n\
    Now that we have seen the basics of recursion, let's see how we can use it to\
    \ solve problems more efficiently.", "    evens = filter(x -> x % 2 == 0, lst)\n\
    \    odds = filter(x -> x % 2 != 0, lst)\n    return sum(filter(x -> x % 2 ==\
    \ 1, odds))\nend\n</cell>\n<code language=julia-1.5>\n@time solution([5, 8, 7,\
    \ 1])\n</cell>\n<code language=julia-1.5>\n@time solution([3, 3, 3, 3, 3])\n</cell>\n\
    <code language=julia-1.5>\n@time solution([30, 13, 24, 321])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a list of numbers and returns the number\
    \ of positive and negative numbers in the list. ", "    evens = filter(x -> x\
    \ % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0, lst)\n    \n    sum(filter(x\
    \ -> x % 2 == 1, odds))\nend\n</cell>\n<text>\nExercise 4\nWrite a function that\
    \ takes a list of numbers and returns the product of the even numbers in the list.",
  "    evens = filter(x -> x % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0, lst)\n\
    \    return sum(filter(x -> x % 2 == 1, odds))\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert solution([5, 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n\
    @assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\nPart III. Sum square\
    \ difference\nGiven a non-empty list of integers, return a list of squared differences\
    \ between the consecutive elements.", "    sum = 0\n    for i in lst\n       \
    \ if i%2 == 1\n            sum += i\n        end\n    end\n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>\n@time solution(lst)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a vector and returns the number of unique elements\
    \ in the vector. \n    \n    \n    Examples\n    solution([5, 8, 7, 1]) ==> 3\n\
    \    solution([3, 3, 3, 3, 3]) ==> 4\n    solution([30, 13, 24, 321]) ==> 4\n\
    \    \"\"\"", "    even = filter(x -> x % 2 == 0, lst)\n    odd = filter(x ->\
    \ x % 2 != 0, lst)\n    \n    sum(filter(x -> x in odd, even))\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert solution([5, 8, 7, 1]) == 12\n@assert solution([3,\
    \ 3, 3, 3, 3]) == 9\n@assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\n\
    Part 2\nWrite a function that returns the product of the even elements in a list. ",
  "    evens = filter(x -> x % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0, lst)\n\
    \    sum(filter(x -> x % 2 == 1, odds))\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert solution([5, 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n\
    @assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that returns a list of all integers between two given integers, inclusive.",
  "    evens = filter(x -> x % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0, lst)\n\
    \    \n    sum(evens) + sum(odds)\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ solution([5, 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n@assert\
    \ solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\nPart II: Recursion\nA recursive\
    \ function is a function that calls itself. This can be done in Julia by defining\
    \ a function with the keyword recursive and calling it with the function name\
    \ as its argument. For example:", "    evens = lst[findall(x -> x % 2 == 0, lst)]\n\
    \    odds = lst[findall(x -> x % 2 != 0, lst)]\n    return sum(x -> x % 2 == 0,\
    \ evens) + sum(x -> x % 2 != 0, odds)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time solution(lst);\n</cell>\n<text>\nPart 2\nWrite a function that takes a vector\
    \ of integers and returns the number of elements that are less than the average\
    \ of the numbers in the vector.", "    evens = filter(x -> x % 2 == 0, lst)\n\
    \    odds = filter(x -> x % 2 != 0, lst)\n    return sum(filter(x -> x % 2 ==\
    \ 1, odds))\nend\n</cell>\n<code language=julia-1.5>\n@time solution(lst);\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the product of the even elements\
    \ in a given list.", "    sum = 0\n    for x in lst\n        if x % 2 == 1\n \
    \           sum += x\n        end\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.3>\n@code_warntype solution([5, 8, 7, 1])\n</cell>\n<code language=julia-1.3>\n\
    @code_warntype solution([3, 3, 3, 3, 3])\n</cell>\n<code language=julia-1.3>\n\
    @code_warntype solution([30, 13, 24, 321])\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the product of all even elements in a given list.",
  "    \n    sum = 0\n    for x in lst\n        if x % 2 == 1\n            sum +=\
    \ x\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype solution([5, 8, 7, 1])\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ solution([3, 3, 3, 3, 3])\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ solution([30, 13, 24, 321])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes in a list of integers and returns the sum of all of the odd elements that\
    \ are in even positions.", "    sum = 0\n    for x in lst\n        if x % 2 ==\
    \ 1\n            sum += x\n        end\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert solution([5, 8, 7, 1]) == 12\n@assert solution([3,\
    \ 3, 3, 3, 3]) == 9\n@assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\n\
    Problem 7", "    evens = lst[findall(x -> x % 2 == 0, lst)]\n    odds = lst[findall(x\
    \ -> x % 2 != 0, lst)]\n    return sum(filter(x -> x % 2 == 1, odds)) + sum(filter(x\
    \ -> x % 2 != 1, evens))\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a vector of integers and returns a vector of integers containing the first\
    \ n prime numbers. \nThe first n prime numbers are 2, 3, 5, 7, 11, and 13.\nThe\
    \ function should return [2, 3, 5, 7, 11, 13]. \nThe function should return nothing\
    \ if the vector is empty.\nThe function should return nothing if the vector has\
    \ less than n elements.\nThe function should return nothing if the vector has\
    \ more than n elements.", "    sum = 0\n    for x in lst\n        if x % 2 ==\
    \ 1\n            sum += x\n        end\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\n@time solution([5, 8, 7, 1])\n</cell>\n<code language=julia-1.5>\n\
    @time solution([3, 3, 3, 3, 3])\n</cell>\n<code language=julia-1.5>\n@time solution([30,\
    \ 13, 24, 321])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ of integers and returns the number of elements that are odd.", "    evens =\
    \ lst[findall(x -> x % 2 == 0, lst)]\n    odd = sum(lst[findall(x -> x % 2 !=\
    \ 0, lst)])\n    return odd + sum(evens)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time solution([5, 8, 7, 1])\n</cell>\n<code language=julia-1.5>\n@time solution([3,\
    \ 3, 3, 3, 3])\n</cell>\n<code language=julia-1.5>\n@time solution([30, 13, 24,\
    \ 321])\n</cell>\n<text>\nExercise 3\nWrite a function that returns the product\
    \ of the even elements of a given list of integers.", "    sum = 0\n    for x\
    \ in lst\n        if x % 2 == 1\n            sum += x\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.5>\n@time solution(vec(1:10000));\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the product of the\
    \ even elements in a given list.", "    evens = lst[findall(x -> x % 2 == 0, lst)]\n\
    \    odds = lst[findall(x -> x % 2 != 0, lst)]\n    \n    return sum(filter(x\
    \ -> x % 2 == 1, odds)) + sum(filter(x -> x % 2 != 1, evens))\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert solution([5, 8, 7, 1]) == 12\n@assert solution([3,\
    \ 3, 3, 3, 3]) == 9\n@assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\n\
    Part III. Sum all the even numbers in a list", "    \n    sum = 0\n    for i in\
    \ lst\n        if i%2 == 1\n            sum += i\n        end\n    end\n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.5>\n@assert solution([5, 8, 7, 1])\
    \ == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n@assert solution([30, 13, 24,\
    \ 321]) == 0\n</cell>\n<text>\nProblem 7\nWrite a function that returns the number\
    \ of times the value 1 appears in the list [1, 2, 3, 1].", "    \n    evens =\
    \ filter(x -> x % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0, lst)\n    \n\
    \    return sum(filter(x -> x % 2 == 1, odds))\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert solution([5, 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n\
    @assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\nPart III. Filtering\
    \ Functions\nNow that we have seen how filter() works, let's see how we can use\
    \ it to solve a problem that involves filtering.", "    \n    even = filter(x\
    \ -> x % 2 == 0, lst)\n    odd = filter(x -> x % 2 != 0, lst)\n    \n    sum(even)\
    \ + sum(odd)\nend\n</cell>\n<code language=julia-1.5>\n@assert solution([5, 8,\
    \ 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n@assert solution([30,\
    \ 13, 24, 321]) == 0\n</cell>\n<text>\nPart II: Recursion\nA recursive function\
    \ can be defined recursively. A recursive function calls itself repeatedly until\
    \ it reaches a base case. Base cases are the simplest cases, such as when the\
    \ function calls itself with only one argument, or when the function calls itself\
    \ with a single argument and no other arguments.", "    evens = filter(x -> x\
    \ % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0, lst)\n    sum(filter(x ->\
    \ x in odds, evens))\nend\n</cell>\n<text>\nProblem 7\nWrite a function that returns\
    \ the product of all the numbers in a given list.", "    evens = lst[findall(x\
    \ -> x % 2 == 0, lst)]\n    odds = lst[findall(x -> x % 2 != 0, lst)]\n    \n\
    \    sum(evens) + sum(odds)\nend\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ solution([5, 8, 7, 1])\n</cell>\n<code language=julia-1.5>\n@code_warntype solution([3,\
    \ 3, 3, 3, 3])\n</cell>\n<code language=julia-1.5>\n@code_warntype solution([30,\
    \ 13, 24, 321])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ of integers and returns the number of elements that are divisible by 3 in the\
    \ vector.", "    evens = lst[findall(x -> x % 2 == 0, lst)]\n    odd = lst[findall(x\
    \ -> x % 2 != 0, lst)]\n    return sum(filter(x -> x % 2 == 1, odd))\nend\n</cell>\n\
    <code language=julia-1.0>\n@time solution([5, 8, 7, 1])\n</cell>\n<code language=julia-1.0>\n\
    @time solution([3, 3, 3, 3, 3])\n</cell>\n<code language=julia-1.0>\n@time solution([30,\
    \ 13, 24, 321])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ product of all the even elements in a given list.", "    sum = 0\n    for i\
    \ in lst\n        if i%2 == 1\n            sum += i\n        end\n    end\n  \
    \  return sum\nend\n</cell>\n<code language=julia-1.5>\n@code_warntype solution([5,\
    \ 8, 7, 1])\n</cell>\n<code language=julia-1.5>\n@code_warntype solution([3, 3,\
    \ 3, 3, 3])\n</cell>\n<code language=julia-1.5>\n@code_warntype solution([30,\
    \ 13, 24, 321])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ product of all the even elements in a given list.", "    evens = filter(x ->\
    \ x % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0, lst)\n    \n    return\
    \ sum(filter(x -> x % 2 == 1, odds))\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert solution([5, 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n\
    @assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\nProblem 7\nWrite a\
    \ function that returns the number of times a given element appears in a given\
    \ list.", "    sum = 0\n    for i in lst\n        if i%2 == 1\n            sum\
    \ += i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    @time solution([5, 8, 7, 1])\n</cell>\n<code language=julia-1.5>\n@time solution([3,\
    \ 3, 3, 3, 3])\n</cell>\n<code language=julia-1.5>\n@time solution([30, 13, 24,\
    \ 321])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the product\
    \ of all of the odd elements that are in even positions.", "    sum = 0\n    for\
    \ i in lst\n        if i%2 == 1\n            sum += i\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.5>\n@code_warntype solution([5,\
    \ 8, 7, 1])\n</cell>\n<code language=julia-1.5>\n@code_warntype solution([3, 3,\
    \ 3, 3, 3])\n</cell>\n<code language=julia-1.5>\n@code_warntype solution([30,\
    \ 13, 24, 321])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ of integers and returns the number of elements that are less than the average\
    \ of the vector.", "    evens = filter(x -> x % 2 == 0, lst)\n    odds = filter(x\
    \ -> x % 2 != 0, lst)\n    \n    return sum(filter(x -> x % 2 == 1, odds))\nend\n\
    </cell>\n<code language=julia-1.4>\n@time solution([5, 8, 7, 1])\n</cell>\n<code\
    \ language=julia-1.4>\n@time solution([3, 3, 3, 3, 3])\n</cell>\n<code language=julia-1.4>\n\
    @time solution([30, 13, 24, 321])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes in a list of integers and returns the number of even and odd numbers\
    \ in the list.", "    evens = filter(x -> x % 2 == 0, lst)\n    odds = filter(x\
    \ -> x % 2 != 0, lst)\n    sum(filter(x -> x % 2 == 1, odds))\nend\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype solution([5, 8, 7, 1])\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype solution([3, 3, 3, 3, 3])\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype solution([30, 13, 24, 321])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the number of elements in a list that\
    \ satisfy a condition. For example, if the list is [5, 8, 7, 1, 3, 9], return\
    \ 3.", "    \n    sum = 0\n    for i in lst\n        if i%2 == 1\n           \
    \ sum += i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype solution([5, 8, 7, 1])\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ solution([3, 3, 3, 3, 3])\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ solution([30, 13, 24, 321])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector. \n    \n    For example, solution([5, 8, 7, 1]) should return\
    \ 5 + 8 + 7 + 1 = 26. \n    \n    Use @code_warntype to check your function before\
    \ submission. \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "  \
    \  even = filter(x -> x % 2 == 0, lst)\n    odd = filter(x -> x % 2 != 0, lst)\n\
    \    sum(filter(x -> x % 2 == 1, odd))\nend\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a vector and returns the number of elements that are less\
    \ than or equal to 0.", "    evens = filter(x -> x % 2 == 0, lst)\n    odds =\
    \ filter(x -> x % 2 != 0, lst)\n    sum(filter(x -> x % 2 == 1, odds))\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert solution([5, 8, 7, 1]) == 12\n@assert\
    \ solution([3, 3, 3, 3, 3]) == 9\n@assert solution([30, 13, 24, 321]) == 0\n</cell>\n\
    <text>\nProblem 7", "    \n    sum = 0\n    for x in lst\n        if x%2 == 1\n\
    \            sum += x\n        end\n    end\n    return sum\nend", "    evens\
    \ = filter(x -> x % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0, lst)\n  \
    \  return sum(x -> x % 2 == 1, odds) + sum(x -> x % 2 != 1, evens)\nend\n</cell>\n\
    <code language=julia-1.5>\n@time solution([5, 8, 7, 1])\n@time solution([3, 3,\
    \ 3, 3, 3])\n@time solution([30, 13, 24, 321])\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the first element of a list that satisfies a given\
    \ condition. For example, given [5, 8, 7, 1], the function should return 8. \n\
    Write a function that returns the first element of a list that satisfies a given\
    \ condition. For example, given [5, 8, 7, 1], the function should return 8. \n\
    Write a function that returns the first element of a list that satisfies a given\
    \ condition. For example, given [5, 8, 7, 1], the function should return 8. \n\
    Write a function that returns the first element of a list that satisfies a given\
    \ condition. For example, given [5, 8, 7, 1], the function should return 8. \n\
    Write a function that returns the first element of a list that satisfies a given\
    \ condition. For example, given [5, 8, 7, 1], the function should return 8. \n\
    Write a function that returns the first element of a list that satisfies a given\
    \ condition. For example, given [5, 8, 7, 1], the function should return 8. \n\
    Write a function that returns the first element of a list that satisfies a given\
    \ condition. For example, given [5, 8, 7, 1], the function should return 8. \n\
    Write a function that returns the first element of a list that satisfies a given\
    \ condition. For example, given [5, 8, 7, 1], the function should return 8. \n\
    Write a function that returns the first element of a list that satisfies a given\
    \ condition. For example, given [5, 8, 7, 1], the function should return 8. \n\
    Write a function that returns the first element of a list that satisfies a given\
    \ condition. For example, given [5, 8, 7, 1], the function should return 8. \n\
    Write a function that returns the first element of a list that satisfies a given\
    \ condition. For example, given [5, 8, 7, 1], the function should return 8. \n\
    Write a function that returns the first element of a list that satisfies a given\
    \ condition. For example, given [5, 8, 7, 1], the function should return 8. \n\
    Write a function that returns the first element of a list that satisfies a given\
    \ condition. For example, given [5, 8, 7, 1], the function should return 8. \n\
    Write a function that returns the first element of a list that satisfies a given\
    \ condition. For example, given [5, 8, 7, 1], the function should return 8. \n\
    Write a function that returns the first element of a list that ", "    evens =\
    \ filter(x -> x % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0, lst)\n    return\
    \ sum(filter(x -> x % 2 == 1, odds))\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert solution([5, 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n\
    @assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\nProblem 7\nWrite a\
    \ function that returns a list of all numbers between 1 and a given number that\
    \ have no duplicates.", "    evens = filter(x -> x % 2 == 0, lst)\n    odds =\
    \ filter(x -> x % 2 != 0, lst)\n    return sum(filter(x -> x % 2 == 1, odds))\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert solution([5, 8, 7, 1]) == 12\n\
    @assert solution([3, 3, 3, 3, 3]) == 9\n@assert solution([30, 13, 24, 321]) ==\
    \ 0\n</cell>\n<text>\nPart II: Recursion\nA recursive function is a function that\
    \ calls itself. A recursive function can have two types of recursive calls:",
  "    evens = filter(x -> x % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0, lst)\n\
    \    \n    evens_sum = sum(evens)\n    odds_sum = sum(odds)\n    \n    return\
    \ evens_sum + odds_sum\nend\n</cell>\n<code language=julia-1.5>\n@assert solution([5,\
    \ 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n@assert solution([30,\
    \ 13, 24, 321]) == 0\n</cell>\n<text>\nProblem 7", "    evens = filter(x -> x\
    \ % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0, lst)\n    return sum(filter(x\
    \ -> x % 2 == 1, odds))\nend\n</cell>\n<code language=julia-1.5>\n@assert solution([5,\
    \ 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n@assert solution([30,\
    \ 13, 24, 321]) == 0\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the product of all of the odd elements in a given list.", "    \n    sum = 0\n\
    \    for i in lst\n        if i%2 == 1\n            sum += i\n        end\n  \
    \  end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ solution([5, 8, 7, 1])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of times each element appears in the list.", "    evens = filter(x\
    \ -> x % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0, lst)\n    \n    sum(filter(x\
    \ -> x % 2 == 1, odds))\nend\n</cell>\n<code language=julia-1.5>\n@time solution([5,\
    \ 8, 7, 1])\n</cell>\n<code language=julia-1.5>\n@time solution([3, 3, 3, 3, 3])\n\
    </cell>\n<code language=julia-1.5>\n@time solution([30, 13, 24, 321])\n</cell>\n\
    <text>\nExercise: Write a function that takes a vector of numbers and returns\
    \ the sum of the squares of the even numbers in that vector. For example, solution([5,\
    \ 8, 7, 1]) should return 5 + 8 + 7 = 17.", "    sum = 0\n    for i in lst\n \
    \       if i%2 == 1\n            sum += i\n        end\n    end\n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert solution([5, 8, 7, 1]) == 12\n\
    @assert solution([3, 3, 3, 3, 3]) == 9\n@assert solution([30, 13, 24, 321]) ==\
    \ 0\n</cell>\n<text>\nPart II: Recursion\nA recursive function is a function that\
    \ calls itself. This can be useful in many situations. Here is an example of a\
    \ recursive fibonacci function:", "    \n    sum = 0\n    for i in lst\n     \
    \   if i%2 == 1\n            sum += i\n        end\n    end\n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\n@code_warntype solution([5, 8, 7, 1])\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype solution([3, 3, 3, 3, 3])\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype solution([30, 13, 24, 321])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the product of all\
    \ the even elements in a given list.", "    sum = 0\n    for i in lst\n      \
    \  if i%2 == 1\n            sum += i\n        end\n    end\n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert solution([5, 8, 7, 1]) == 12\n@assert\
    \ solution([3, 3, 3, 3, 3]) == 9\n@assert solution([30, 13, 24, 321]) == 0\n</cell>\n\
    <text>\nProblem 7: Find the sum of all the odd numbers from 1 to 100\nThe sum\
    \ of all the odd numbers from 1 to 100 is 143. Find the sum of all the odd numbers\
    \ from 1 to 100.", "    evens = filter(x -> x % 2 == 0, lst)\n    odds = filter(x\
    \ -> x % 2 != 0, lst)\n    \n    return sum(filter(x -> x % 2 == 1, odds)) + sum(filter(x\
    \ -> x % 2 == 0, evens))\nend\n</cell>\n<code language=julia-1.5>\n@time solution([5,\
    \ 8, 7, 1])\n</cell>\n<code language=julia-1.5>\n@time solution([3, 3, 3, 3, 3])\n\
    </cell>\n<code language=julia-1.5>\n@time solution([30, 13, 24, 321])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of times a given\
    \ value appears in a given list. For example, given [5, 8, 7, 1, 3, 3], return\
    \ 2 since 3 appears twice.", "    evens = filter(x -> x % 2 == 0, lst)\n    odds\
    \ = filter(x -> x % 2 != 0, lst)\n    \n    return sum(filter(x -> x % 2 == 1,\
    \ odds))\nend\n</cell>\n<code language=julia-1.5>\n@time solution([5, 8, 7, 1])\n\
    </cell>\n<code language=julia-1.5>\n@time solution([3, 3, 3, 3, 3])\n</cell>\n\
    <code language=julia-1.5>\n@time solution([30, 13, 24, 321])\n</cell>\n<text>\n\
    Exercise: Write a function that takes a vector of integers and returns the sum\
    \ of the odd elements that are in even positions.", "    evens = filter(x -> x\
    \ % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0, lst)\n    \n    sum(filter(x\
    \ -> x in odds, evens))\nend\n</cell>\n<code language=julia-1.5>\n@time solution([5,\
    \ 8, 7, 1])\n</cell>\n<code language=julia-1.5>\n@time solution([3, 3, 3, 3, 3])\n\
    </cell>\n<code language=julia-1.5>\n@time solution([30, 13, 24, 321])\n</cell>\n\
    <text>\nPart 3: Finding all subsets of a set\nIn this section, we will use Julia's\
    \ powerful set library to find all subsets of a given set. We'll start by defining\
    \ a function that will generate all subsets of a given set.", "    evens = filter(x\
    \ -> x % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0, lst)\n    return sum(filter(x\
    \ -> x % 2 == 1, odds)) + sum(filter(x -> x % 2 == 0, evens))\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert solution([5, 8, 7, 1]) == 12\n@assert solution([3,\
    \ 3, 3, 3, 3]) == 9\n@assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\n\
    Problem 7\nWrite a function that returns the number of times a given substring\
    \ appears in a given string.", "    evens = filter(x -> x % 2 == 0, lst)\n   \
    \ odds = filter(x -> x % 2 != 0, lst)\n    sum(filter(x -> x % 2 == 1, odds))\n\
    end\n</cell>\n<text>\nProblem 7\nWrite a function that takes a list of integers\
    \ and returns the product of the even elements that are in odd positions.", " \
    \   evens = lst[findall(x -> x % 2 == 0, lst)]\n    odd = sum(lst[findall(x ->\
    \ x % 2 != 0, lst)])\n    return odd + evens\nend\n</cell>\n<code language=julia-1.5>\n\
    @time solution(vec(1:100000));\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the number of times a given value appears in a given vector.",
  "    evens = lst[findall(x -> x % 2 == 0, lst)]\n    odd = sum(lst[findall(x ->\
    \ x % 2 != 0, lst)])\n    return odd + sum(evens)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time solution(lst)\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a vector of integers and returns the sum of the squares of the even elements\
    \ in the vector.", "    \n    sum = 0\n    for i in lst\n        if i%2 == 1\n\
    \            sum += i\n        end\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype solution([5, 8, 7, 1])\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype solution([3, 3, 3, 3, 3])\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype solution([30, 13, 24, 321])\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes in a vector of integers and returns the number of elements\
    \ that are odd.", "    sum = 0\n    for i in lst\n        if i%2 == 1\n      \
    \      sum += i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert solution([5, 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n\
    @assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\nProblem 7\nWrite a\
    \ function that returns the product of all of the odd elements that are in even\
    \ positions.", "    even = filter(x -> x % 2 == 0, lst)\n    odd = filter(x ->\
    \ x % 2 != 0, lst)\n    sum(filter(x -> x % 2 == 1, odd))\nend\n</cell>\n<text>\n\
    Exercise 4\nWrite a function that takes a list as an argument and returns the\
    \ number of elements in the list that are less than or equal to 10.", "    sum\
    \ = 0\n    for i in lst\n        if i%2 == 1\n            sum += i\n        end\n\
    \    end\n    return sum\nend", "    evens = lst[findall(x -> x % 2 == 1, lst)]\n\
    \    odds = lst[findall(x -> x % 2 != 1, lst)]\n    return sum(evens) + sum(odds)\n\
    end\n</cell>\n<text>\nProblem 7\nWrite a function that returns the number of times\
    \ a given element appears in a given list.", "    evens = filter(x -> x % 2 ==\
    \ 0, lst)\n    odds = filter(x -> x % 2 != 0, lst)\n    return sum(filter(x ->\
    \ x % 2 == 1, odds))\nend\n</cell>\n<code language=julia-1.5>\n@assert solution([5,\
    \ 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n@assert solution([30,\
    \ 13, 24, 321]) == 0\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a list of integers and returns the number of elements in the list that are less\
    \ than the average of the list.", "    evens = filter(x -> x % 2 == 0, lst)\n\
    \    odds = filter(x -> x % 2 != 0, lst)\n    return sum(filter(x -> x % 2 ==\
    \ 1, odds))\nend\n</cell>\n<code language=julia-1.5>\n@assert solution([5, 8,\
    \ 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n@assert solution([30,\
    \ 13, 24, 321]) == 0\n</cell>\n<text>\nProblem 7", "    evens = filter(x -> x\
    \ % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0, lst)\n    \n    sum(filter(x\
    \ -> x % 2 == 1, odds))\nend\n</cell>\n<text>\nProblem 7\nWrite a function that\
    \ takes a vector of integers and returns the sum of the squares of the even elements\
    \ in the vector.", "    sum = 0\n    for i in lst\n        if i%2 == 1\n     \
    \       sum += i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert solution([5, 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n\
    @assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\nProblem 7\nWrite a\
    \ function that returns the number of times the value 1 appears in the list [1,\
    \ 2, 3, 1].", "    even = lst[findall(x -> x % 2 == 0, lst)]\n    odd = lst[findall(x\
    \ -> x % 2 != 0, lst)]\n    \n    return sum(filter(x -> x % 2 == 1, odd))\nend\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector of integers\
    \ and returns the number of elements that are greater than the element at position\
    \ n in the vector.", "    evens = filter(x -> x % 2 == 0, lst)\n    odds = filter(x\
    \ -> x % 2 != 0, lst)\n    \n    return sum(filter(x -> x % 2 == 1, odds))\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert solution([5, 8, 7, 1]) == 12\n@assert\
    \ solution([3, 3, 3, 3, 3]) == 9\n@assert solution([30, 13, 24, 321]) == 0\n</cell>\n\
    <text>\nPart III. Sum all odd numbers in a list\nWrite a function that returns\
    \ the sum of all odd numbers in a list.", "    even = filter(x -> x % 2 == 0,\
    \ lst)\n    odd = filter(x -> x % 2 != 0, lst)\n    sum(filter(x -> x % 2 == 1,\
    \ odd))\nend\n</cell>\n<code language=julia-1.5>\n@assert solution([5, 8, 7, 1])\
    \ == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n@assert solution([30, 13, 24,\
    \ 321]) == 0\n</cell>\n<text>\nPart II: More on maps and filters \nmap: Apply\
    \ a function to every element of a collection\nfilter: Apply a function to every\
    \ element of a collection\nreduce: Apply a function to every element of a collection\
    \ and return a single value\nfoldl: Apply a function to every element of a collection\
    \ and return a single value\nfoldr: Apply a function to every element of a collection\
    \ and return a single value", "    evens = lst[findall(x -> x % 2 == 0, lst)]\n\
    \    odd = sum(filter(x -> x % 2 != 0, lst))\n    return odd + evens\nend\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype solution([5, 8, 7, 1])\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype solution([3, 3, 3, 3, 3])\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype solution([30, 13, 24, 321])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a vector of integers and returns the sum\
    \ of the squares of the even elements of the vector.", "    evens = filter(x ->\
    \ x % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0, lst)\n    sum(filter(x\
    \ -> x in odds, evens))\nend\n</cell>\n<code language=julia-1.5>\n@assert solution([5,\
    \ 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n@assert solution([30,\
    \ 13, 24, 321]) == 0\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the product of all even elements in a given list.", "    even = filter(x ->\
    \ x % 2 == 0, lst)\n    odd = filter(x -> x % 2 != 0, lst)\n    \n    return sum(filter(x\
    \ -> x % 2 == 1, odd))\nend\n</cell>\n<code language=julia-1.5>\n@time solution([5,\
    \ 8, 7, 1])\n</cell>\n<code language=julia-1.5>\n@time solution([3, 3, 3, 3, 3])\n\
    </cell>\n<code language=julia-1.5>\n@time solution([30, 13, 24, 321])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the product of all even numbers\
    \ in a given list.", "    sum = 0\n    for i in lst\n        if i%2 == 1\n   \
    \         sum += i\n        end\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype solution([5, 8, 7, 1])\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype solution([3, 3, 3, 3, 3])\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype solution([30, 13, 24, 321])\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the sum of the numbers in the list that are divisible\
    \ by 7. \n    \n    For example, sum([7, 14, 21, 32]) should return 21.", "  \
    \  \n    sum = 0\n    for i in lst\n        if i%2 == 1\n            sum += i\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    @time solution([5, 8, 7, 1])\n</cell>\n<code language=julia-1.5>\n@time solution([3,\
    \ 3, 3, 3, 3])\n</cell>\n<code language=julia-1.5>\n@time solution([30, 13, 24,\
    \ 321])\n</cell>\n<text>\nExercise 3\nWrite a function that returns the product\
    \ of all even elements in a given list.", "    evens = filter(x -> x % 2 == 0,\
    \ lst)\n    odds = filter(x -> x % 2 != 0, lst)\n    \n    return sum(filter(x\
    \ -> x % 2 == 1, odds)) + sum(filter(x -> x % 2 == 0, evens))\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert solution([5, 8, 7, 1]) == 12\n@assert solution([3,\
    \ 3, 3, 3, 3]) == 9\n@assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\n\
    Part III. Recursion\nA recursive function is a function that calls itself. A recursive\
    \ function is one that calls itself. This means that a recursive function can\
    \ call itself to solve a problem that has been solved before.", "    evens = lst[findall(x\
    \ -> x % 2 == 0, lst)]\n    odds = lst[findall(x -> x % 2 != 0, lst)]\n    return\
    \ sum(filter(x -> x % 2 == 1, odds)) + sum(filter(x -> x % 2 != 1, evens))\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert solution([5, 8, 7, 1]) == 12\n@assert\
    \ solution([3, 3, 3, 3, 3]) == 9\n@assert solution([30, 13, 24, 321]) == 0\n</cell>\n\
    <text>\nPart 2\nWrite a function that takes a list of numbers and returns the\
    \ product of all of the numbers in the list. Do not use the reduce function.",
  "    \n    sum = 0\n    for i in lst\n        if i%2 == 1\n            sum += i\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype solution([5, 8, 7, 1])\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ solution([3, 3, 3, 3, 3])\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ solution([30, 13, 24, 321])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the product of all the even elements that are in odd positions.", " \
    \   evens = filter(x -> x % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0, lst)\n\
    \    return sum(filter(x -> x % 2 == 1, odds))\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert solution([5, 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n\
    @assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that returns the number of times a given value appears in a given list.",
  "    \n    sum = 0\n    for i in lst\n        if i%2 == 1\n            sum += i\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert solution([5, 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n\
    @assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\nPart III. Sum all the\
    \ even numbers in a list", "    evens = lst[findall(x -> x % 2 == 0, lst)]\n \
    \   odd = lst[findall(x -> x % 2 != 0, lst)]\n    sum(filter(x -> x in evens,\
    \ odd))\nend\n</cell>\n<text>\nProblem 7\nWrite a function that takes a list of\
    \ numbers and returns the number of even and odd numbers combined. ", "    evens\
    \ = filter(x -> x % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0, lst)\n  \
    \  \n    return sum(filter(x -> x % 2 == 1, odds))\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert solution([5, 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n\
    @assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\nProblem 7\nWrite a\
    \ function that returns the number of times a given element appears in a given\
    \ list.", "    evens = filter(x -> x % 2 == 0, lst)\n    odds = filter(x -> x\
    \ % 2 != 0, lst)\n    sum(evens) + sum(odds)\nend\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype solution([5, 8, 7, 1])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the product of all even numbers in a given list.", "    evens =\
    \ filter(x -> x % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0, lst)\n    return\
    \ sum(filter(x -> x % 2 == 1, odds))\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert solution([5, 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n\
    @assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\nPart II: Recursion\n\
    A recursive function is a function that calls itself. This can be done in Julia\
    \ by using the function keyword.", "    \n    sum = 0\n    for x in lst\n    \
    \    if x % 2 == 1\n            sum += x\n        end\n    end\n    return sum\n\
    end\n</cell>\n<code language=julia-1.3>\n@time solution([5, 8, 7, 1])\n</cell>\n\
    <code language=julia-1.3>\n@time solution([3, 3, 3, 3, 3])\n</cell>\n<code language=julia-1.3>\n\
    @time solution([30, 13, 24, 321])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the product of the even elements in a given list.", "    \n   \
    \ sum = 0\n    for i in lst\n        if i%2 == 1\n            sum += i\n     \
    \   end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ solution([5, 8, 7, 1])\n</cell>\n<code language=julia-1.5>\n@code_warntype solution([3,\
    \ 3, 3, 3, 3])\n</cell>\n<code language=julia-1.5>\n@code_warntype solution([30,\
    \ 13, 24, 321])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ product of all of the even elements that are in odd positions.", "    evens\
    \ = filter(x -> x % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0, lst)\n  \
    \  return sum(filter(x -> x % 2 == 1, odds)) + sum(filter(x -> x % 2 == 0, evens))\n\
    end\n</cell>\n<text>\nProblem 8\nWrite a function that returns the number of times\
    \ a given substring appears in a given string.", "    even = lst[findall(x ->\
    \ x % 2 == 0, lst)]\n    odd = lst[findall(x -> x % 2 != 0, lst)]\n    \n    return\
    \ sum(filter(x -> x % 2 != 0, odd))\nend\n</cell>\n<code language=julia-1.5>\n\
    @time solution([5, 8, 7, 1])\n</cell>\n<code language=julia-1.5>\n@time solution([3,\
    \ 3, 3, 3, 3])\n</cell>\n<code language=julia-1.5>\n@time solution([30, 13, 24,\
    \ 321])\n</cell>\n<text>\nExercise 3\nWrite a function that returns the sum of\
    \ the squares of the numbers in a given list.", "    evens = lst[findall(x ->\
    \ x % 2 == 0, lst)]\n    odds = lst[findall(x -> x % 2 != 0, lst)]\n    return\
    \ sum(filter(x -> x % 2 == 1, odds)) + sum(filter(x -> x % 2 == 0, evens))\nend\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype solution([5, 8, 7, 1])\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype solution([3, 3, 3, 3, 3])\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype solution([30, 13, 24, 321])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the product of the even elements\
    \ in a given list.", "    evens = filter(x -> x % 2 == 0, lst)\n    odds = filter(x\
    \ -> x % 2 != 0, lst)\n    \n    return sum(filter(x -> x % 2 == 1, odds))\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert solution([5, 8, 7, 1]) == 12\n@assert\
    \ solution([3, 3, 3, 3, 3]) == 9\n@assert solution([30, 13, 24, 321]) == 0\n</cell>\n\
    <text>\nPart III. Sum all even numbers in a list\nGiven a non-empty list of integers,\
    \ return a new list containing all of the even numbers from the original list.\
    \ \n    ", "    even = filter(x -> x % 2 == 0, lst)\n    odd = filter(x -> x %\
    \ 2 != 0, lst)\n    sum(even) + sum(odd)\nend\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the product of all even numbers in a given list.", " \
    \   evens = filter(x -> x % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0, lst)\n\
    \    return sum(filter(x -> x % 2 == 1, odds))\nend\n</cell>\n<code language=julia-1.5>\n\
    @time solution([5, 8, 7, 1])\n</cell>\n<code language=julia-1.5>\n@time solution([3,\
    \ 3, 3, 3, 3])\n</cell>\n<code language=julia-1.5>\n@time solution([30, 13, 24,\
    \ 321])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the product\
    \ of all even numbers in a given list.", "    evens = filter(x -> x % 2 == 0,\
    \ lst)\n    odds = filter(x -> x % 2 != 0, lst)\n    sum(filter(x -> x % 2 ==\
    \ 1, odds))\nend\n</cell>\n<text>\nProblem 9\nWrite a function that returns a\
    \ list of all numbers between 1 and n that have two digits.", "    \n    sum =\
    \ 0\n    for x in lst\n        if x % 2 == 1\n            sum += x\n        end\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.0>\n@assert solution([5,\
    \ 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n@assert solution([30,\
    \ 13, 24, 321]) == 0\n</cell>\n<text>\nPart II: Recursion\nA recursive function\
    \ is a function that calls itself. A recursive function can have two types of\
    \ recursive calls: base cases and recursive cases. Base cases occur when the function\
    \ calls itself, whereas recursive cases occur when the function calls itself.\
    \ A recursive function can have as many base cases as it wants, but it can only\
    \ have one recursive case. Recursive functions can have as many recursive cases\
    \ as it wants, but it can only have one base case. Recursive functions can have\
    \ as many base cases as it wants, but it can only have one recursive case. Recursive\
    \ functions can have as many base cases as it wants, but it can only have one\
    \ recursive case. Recursive functions can have as many base cases as it wants,\
    \ but it can only have one recursive case. Recursive functions can have as many\
    \ base cases as it wants, but it can only have one recursive case. Recursive functions\
    \ can have as many base cases as it wants, but it can only have one recursive\
    \ case. Recursive functions can have as many base cases as it wants, but it can\
    \ only have one recursive case. Recursive functions can have as many base cases\
    \ as it wants, but it can only have one recursive case. Recursive functions can\
    \ have as many base cases as it wants, but it can only have one recursive case.\
    \ Recursive functions can have as many base cases as it wants, but it can only\
    \ have one recursive case. Recursive functions can have as many base cases as\
    \ it wants, but it can only have one recursive case. Recursive functions can have\
    \ as many base cases as it wants, but it can only have one recursive case. Recursive\
    \ functions can have as many base cases as it wants, but it can only have one\
    \ recursive case. Recursive functions can have as many base cases as it wants,\
    \ but it can only have one recursive case. Recursive functions can have as many\
    \ base cases as it wants, but it can only have one recursive case. Recursive functions\
    \ can have as many base cases as it wants, but it can only have one recursive\
    \ case. Recursive functions can have as many base cases as it wants, but it can\
    \ only have one recursive case. Recursive functions can have as many base ", " \
    \   evens = filter(x -> x % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0, lst)\n\
    \    \n    return sum(filter(x -> x % 2 == 1, odds)) + sum(filter(x -> x % 2 ==\
    \ 0, evens))\nend\n</cell>\n<code language=julia-1.5>\n@time solution([5, 8, 7,\
    \ 1])\n</cell>\n<code language=julia-1.5>\n@time solution([3, 3, 3, 3, 3])\n</cell>\n\
    <code language=julia-1.5>\n@time solution([30, 13, 24, 321])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a vector of integers and returns the number\
    \ of times a value appears consecutively in the vector. For example, if the input\
    \ vector is [5, 8, 7, 1, 3, 3], your function should return 3 because there are\
    \ 3 consecutive 1's in the vector.", "    evens = filter(x -> x % 2 == 0, lst)\n\
    \    odds = filter(x -> x % 2 != 0, lst)\n    return sum(filter(x -> x % 2 ==\
    \ 1, odds)) + sum(evens)\nend\n</cell>\n<code language=julia-1.0>\n@time solution([5,\
    \ 8, 7, 1])\n</cell>\n<code language=julia-1.0>\n@time solution([3, 3, 3, 3, 3])\n\
    </cell>\n<code language=julia-1.0>\n@time solution([30, 13, 24, 321])\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a vector of integers and returns\
    \ the number of elements that are odd.", "    evens = filter(x -> x % 2 == 0,\
    \ lst)\n    odds = filter(x -> x % 2 != 0, lst)\n    sum(filter(x -> x % 2 ==\
    \ 1, odds))\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes a list\
    \ of numbers and returns the product of the even elements that are in odd positions.",
  "    even = filter(x -> x % 2 == 0, lst)\n    odd = filter(x -> x % 2 != 0, lst)\n\
    \    return sum(filter(x -> x % 2 == 1, odd))\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert solution([5, 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n\
    @assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\nPart III: Refactoring\
    \ your code\nNow that you have learned how to write and use functions, let's refactor\
    \ our code to use functions. We'll start by defining a function called evens that\
    \ takes a vector and returns the even elements of that vector:", "    evens =\
    \ filter(x -> x % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0, lst)\n    return\
    \ sum(filter(x -> x % 2 == 1, odds))\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert solution([5, 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n\
    @assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\nPart III. Sum square\
    \ difference\nGiven a non-empty list of integers, return a list of squared differences\
    \ between the consecutive elements.", "    \n    sum = 0\n    for i in lst\n \
    \       if i%2 == 1\n            sum += i\n        end\n    end\n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\n@time solution([5, 8, 7, 1])\n</cell>\n\
    <code language=julia-1.5>\n@time solution([3, 3, 3, 3, 3])\n</cell>\n<code language=julia-1.5>\n\
    @time solution([30, 13, 24, 321])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the product of all of the odd elements that are in even positions.",
  "    evens = filter(x -> x % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0, lst)\n\
    \    \n    return sum(filter(x -> x % 2 == 1, odds))\nend\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype solution([5, 8, 7, 1])\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ solution([3, 3, 3, 3, 3])\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ solution([30, 13, 24, 321])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the product of all even numbers in a given list. For example, given\
    \ [5, 8, 7, 1], the function should return 120.", "    evens = filter(x -> x %\
    \ 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0, lst)\n    return sum(filter(x\
    \ -> x % 2 == 1, odds)) + sum(filter(x -> x % 2 == 0, evens))\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert solution([5, 8, 7, 1]) == 12\n@assert solution([3,\
    \ 3, 3, 3, 3]) == 9\n@assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\n\
    Part II: Recursion\nA recursive function is a function that calls itself. This\
    \ can be done in Julia by using the function keyword followed by the name of the\
    \ function. For example, if we want to find the factorial of a number, we could\
    \ write our function as follows:", "    sum = 0\n    for x in lst\n        if\
    \ x % 2 == 1\n            sum += x\n        end\n    end\n    return sum\nend",
  "    evens = lst[findall(x -> x % 2 == 0, lst)]\n    odds = lst[findall(x -> x %\
    \ 2 != 0, lst)]\n    return sum(evens) + sum(odds)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time solution([5, 8, 7, 1])\n</cell>\n<code language=julia-1.5>\n@time solution([3,\
    \ 3, 3, 3, 3])\n</cell>\n<code language=julia-1.5>\n@time solution([30, 13, 24,\
    \ 321])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the product\
    \ of all elements in a given list. For example, product([1, 2, 3]) should return\
    \ 6. Make sure your function works with vectors of different lengths.", "    evens\
    \ = filter(x -> x % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0, lst)\n  \
    \  return sum(filter(x -> x % 2 == 1, odds))\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert solution([5, 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n\
    @assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\nPart III. Filtering\
    \ by index", "    evens = filter(x -> x % 2 == 0, lst)\n    odds = filter(x ->\
    \ x % 2 != 0, lst)\n    return sum(filter(x -> x % 2 == 1, odds))\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert solution([5, 8, 7, 1]) == 12\n@assert solution([3,\
    \ 3, 3, 3, 3]) == 9\n@assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the product of all even elements in\
    \ a given list. \n    \n    Examples\n    solution([5, 8, 7, 1]) ==> 120\n   \
    \ solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==> 24321\n\
    \    \"\"\"", "    even = filter(x -> x % 2 == 0, lst)\n    odd = filter(x ->\
    \ x % 2 != 0, lst)\n    sum(filter(x -> x % 2 == 1, odd))\nend\n</cell>\n<code\
    \ language=julia-1.0>\n@assert solution([5, 8, 7, 1]) == 12\n@assert solution([3,\
    \ 3, 3, 3, 3]) == 9\n@assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\n\
    Part III. Sum all the even numbers in a list", "    evens = filter(x -> x % 2\
    \ == 0, lst)\n    odds = filter(x -> x % 2 != 0, lst)\n    return sum(filter(x\
    \ -> x % 2 == 1, odds))\nend\n</cell>\n<code language=julia-1.5>\n@assert solution([5,\
    \ 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n@assert solution([30,\
    \ 13, 24, 321]) == 0\n</cell>\n<text>\nProblem 7\nWrite a function that returns\
    \ a list of all numbers from 1 to n that are divisible by k.", "    evens = filter(x\
    \ -> x % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0, lst)\n    \n    return\
    \ sum(filter(x -> x % 2 == 1, odds))\nend\n</cell>\n<code language=julia-1.5>\n\
    @time solution(lst)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of times a given value appears in a given list.", "    \n    sum\
    \ = 0\n    for i in lst\n        if i%2 == 1\n            sum += i\n        end\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n@assert solution([5,\
    \ 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n@assert solution([30,\
    \ 13, 24, 321]) == 0\n</cell>\n<text>\nProblem 7: Given a non-empty list of integers,\
    \ return a new list containing all the odd elements of the original list followed\
    \ by all the even elements. You may modify the original list.", "    evens = lst[findall(x\
    \ -> x % 2 == 0, lst)]\n    odds = lst[findall(x -> x % 2 != 0, lst)]\n    return\
    \ sum(filter(x -> x % 2 == 1, odds)) + sum(filter(x -> x % 2 != 1, evens))\nend\n\
    </cell>\n<text>\nProblem 7\nWrite a function that takes a vector of integers and\
    \ returns the number of elements that are less than or equal to each of the elements\
    \ in the vector.", "    evens = lst[findall(x -> x % 2 == 1, lst)]\n    odds =\
    \ lst[findall(x -> x % 2 != 1, lst)]\n    \n    sum(evens) + sum(odds)\nend\n\
    </cell>\n<code language=julia-1.5>\n@time solution(lst)\n</cell>\n<text>\nPart\
    \ 3: Recursion\nRecursion is a powerful tool for solving problems that involve\
    \ repeating a process over and over again. For example, let's say that we want\
    \ to find the factorial of a number. One way to do this would be to write a function\
    \ that calls itself to find the factorial of the number and then returns the result.\
    \ For example:", "    evens = filter(x -> x % 2 == 0, lst)\n    odds = filter(x\
    \ -> x % 2 != 0, lst)\n    return sum(filter(x -> x % 2 == 1, odds))\nend\n</cell>\n\
    <code language=julia-1.5>\n@time solution([5, 8, 7, 1])\n</cell>\n<code language=julia-1.5>\n\
    @time solution([3, 3, 3, 3, 3])\n</cell>\n<code language=julia-1.5>\n@time solution([30,\
    \ 13, 24, 321])\n</cell>\n<text>\nProblem 7", "    evens = filter(x -> x % 2 ==\
    \ 0, lst)\n    odds = filter(x -> x % 2 != 0, lst)\n    \n    return sum(filter(x\
    \ -> x % 2 == 1, odds)) + sum(filter(x -> x % 2 == 0, evens))\nend\n</cell>\n\
    <code language=julia-1.5>\n@time solution([5, 8, 7, 1])\n</cell>\n<code language=julia-1.5>\n\
    @time solution([3, 3, 3, 3, 3])\n</cell>\n<code language=julia-1.5>\n@time solution([30,\
    \ 13, 24, 321])\n</cell>\n<text>\nExercise 2\nWrite a function that takes in a\
    \ list of integers and returns the sum of all of the even elements that are in\
    \ odd positions.", "    evens = filter(x -> x % 2 == 0, lst)\n    odds = filter(x\
    \ -> x % 2 != 0, lst)\n    return sum(filter(x -> x % 2 == 1, odds))\nend\n</cell>\n\
    <code language=julia-1.5>\n@time solution([5, 8, 7, 1])\n</cell>\n<code language=julia-1.5>\n\
    @time solution([3, 3, 3, 3, 3])\n</cell>\n<code language=julia-1.5>\n@time solution([30,\
    \ 13, 24, 321])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ product of the even elements in a list. \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    sum = 0\n    for\
    \ x in lst\n        if x % 2 == 1\n            sum += x\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.4>\n@code_warntype solution([5,\
    \ 8, 7, 1])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the product\
    \ of all even elements in a given list.", "    evens = filter(x -> x % 2 == 0,\
    \ lst)\n    odds = filter(x -> x % 2 != 0, lst)\n    \n    return sum(filter(x\
    \ -> x % 2 == 1, odds)) + sum(filter(x -> x % 2 == 0, evens))\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert solution([5, 8, 7, 1]) == 12\n@assert solution([3,\
    \ 3, 3, 3, 3]) == 9\n@assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\n\
    Part II: Recursion\nA recursive function is a function that calls itself. A recursive\
    \ function can have one or more base cases. A base case is where a recursive function\
    \ can stop calling itself and return a value.", "    sum = 0\n    for i in lst\n\
    \        if i%2 == 1\n            sum += i\n        end\n    end\n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert solution([5, 8, 7, 1]) == 12\n\
    @assert solution([3, 3, 3, 3, 3]) == 9\n@assert solution([30, 13, 24, 321]) ==\
    \ 0\n</cell>\n<text>\nProblem 7\nWrite a function that returns the number of times\
    \ you can divide n by each number from 1 to n.", "    sum = 0\n    for i in lst\n\
    \        if i%2 == 1\n            sum += i\n        end\n    end\n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert solution([5, 8, 7, 1]) == 12\n\
    @assert solution([3, 3, 3, 3, 3]) == 9\n@assert solution([30, 13, 24, 321]) ==\
    \ 0\n</cell>\n<text>\nExercise 3\nWrite a function that returns the product of\
    \ the even elements in a list. For example, given [5, 8, 7, 1], the product is\
    \ 5*7*1 = 155.", "    evens = lst[findall(x -> x % 2 == 0, lst)]\n    odds = lst[findall(x\
    \ -> x % 2 != 0, lst)]\n    return sum(filter(x -> x % 2 == 1, odds)) + sum(filter(x\
    \ -> x % 2 == 0, evens))\nend\n</cell>\n<code language=julia-1.5>\n@time solution(lst)\n\
    </cell>\n<text>\nPart 2\nWrite a function that takes a vector of integers and\
    \ returns a vector of integers containing the first n prime numbers.", "    evens\
    \ = filter(x -> x % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0, lst)\n  \
    \  sum(evens) + sum(odds)\nend\n</cell>\n<text>\nProblem 7\nWrite a function that\
    \ returns the number of times a given element appears in a given list.", "   \
    \ sum = 0\n    for i in lst\n        if i%2 == 1\n            sum += i\n     \
    \   end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ solution([5, 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n@assert\
    \ solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\nPart II: Recursion\nNow that\
    \ we've seen how recursion works, let's see how it can be used in Julia. Let's\
    \ start with a simple function that adds two numbers:", "    \n    sum = 0\n \
    \   for x in lst\n        if x % 2 == 1\n            sum += x\n        end\n \
    \   end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n@assert solution([5,\
    \ 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n@assert solution([30,\
    \ 13, 24, 321]) == 0\n</cell>\n<text>\nPart II: Recursion\nA recursive function\
    \ is a function that calls itself. A recursive function is one that calls itself\
    \ repeatedly until it reaches a base case. Base cases are the base cases of the\
    \ recursion."]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
