name: HumanEval_82_prime_length
language: julia
results:
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_numbers = Set{Int}()\n    \n    for i in 2..sqrt(Int,string)\n\
    \        if prime_numbers.contains(i)\n            prime_numbers.remove(i)\n \
    \       else\n            prime_numbers.add(i)\n        end\n    end\n    \n \
    \   return prime_numbers.contains(string)\nend\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"Hello\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"abcdcba\"\
    )\n</cell>\n<code language=julia-1.5>\nprime_length(\"kittens\")\n</cell>\n<code\
    \ language=julia-1.5>\nprime_length(\"orange\")\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a string and returns True if the string has all letters\
    \ capitalized and False otherwise\nExamples\ncapitalize_letters(\"Hello\") ==\
    \ True\ncapitalize_letters(\"HELLO\") == False\ncapitalize_letters(\"HELLO WORLD\"\
    ) == False\ncapitalize_letters(\"HELLO WORLD HELLO WORLD\") == True\ncapitalize_letters(\"\
    HELLO WORLD HELLO WORLD HELLO WORLD\") == False\ncapitalize_letters(\"HELLO WORLD\
    \ HELLO WORLD HELLO WORLD HELLO WORLD\") == False\ncapitalize_letters(\"HELLO\
    \ WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD\
    \ HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO\
    \ WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD\
    \ HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO\
    \ WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD\
    \ HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO\
    \ WORLD HELLO WORLD \nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\
    \t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\
    \t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\
    \t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t\
    @test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") ==\
    \ true)\n\t@test(candidate(\"gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\"\
    ) == false)\n\t@test(candidate(\"Madam\") == true)\n\t@test(candidate(\"M\") ==\
    \ false)\n\t@test(candidate(\"0\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp65427i25.jl:23\nin expression starting at\
    \ /tmp/tmp65427i25.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_numbers = prime_numbers()\n    \n    for i in string:\n  \
    \      if i in prime_numbers:\n            return False\n    return True\nend\n\
    </cell>\n<code language=julia-1.5>\nprime_length(\"Hello\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"abcdcba\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"\
    kittens\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"orange\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns True if the\
    \ string is a palindrome or False otherwise\nExamples\npalindrome(\"racecar\"\
    ) == True\npalindrome(\"racecars\") == False\npalindrome(\"A man, a plan, a canal:\
    \ Panama\") == True\npalindrome(\"A man, a plan, a canal: Panama\") == False\n\
    palindrome(\"A man, a plan, a canal: Panama\") == False\npalindrome(\"A man, a\
    \ plan, a canal: Panama\") == False\npalindrome(\"A man, a plan, a canal: Panama\"\
    ) == False\npalindrome(\"A man, a plan, a canal: Panama\") == False\npalindrome(\"\
    A man, a plan, a canal: Panama\") == False\npalindrome(\"A man, a plan, a canal:\
    \ Panama\") == False\npalindrome(\"A man, a plan, a canal: Panama\") == False\n\
    palindrome(\"A man, a plan, a canal: Panama\") == False\npalindrome(\"A man, a\
    \ plan, a canal: Panama\") == False\npalindrome(\"A man, a plan, a canal: Panama\"\
    ) == False\npalindrome(\"A man, a plan, a canal: Panama\") == False\npalindrome(\"\
    A man, a plan, a canal: Panama\") == False\npalindrome(\"A man, a plan, a canal:\
    \ Panama\") == False\npalindrome(\"A man, a plan, a canal: Panama\") == False\n\
    palindrome(\"A man, a plan, a canal: Panama\") == False\npalindrome(\"A man, a\
    \ plan, a canal: Panama\") == False\npalindrome(\"A man, a plan, a canal: Panama\"\
    ) == False\n\nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"\
    Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"\
    kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"\
    wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjn0xckcu.jl:14\nin expression starting at\
    \ /tmp/tmpjn0xckcu.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_numbers = primes()\n    \n    for i in string:\n        if\
    \ i not in prime_numbers:\n            return False\n    return True\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nThis doesn't work. `prime_length('kittens') == True`\
    \ returns `True` but `prime_length('orange') == False` returns `False`.\n<|/ c\
    \ |>\n<| c |>\nThanks for pointing that out. I've edited my answer to fix it.\n\
    <|/ c |>\n<| a tags=primes,haskell,functional-programming |>\n<code>\nprimes ::\
    \ [Integer]\nprimes = 2 : filter isPrime [3..]\n</code>\n<|/ a dscore=1 |>\n<|\
    \ c |>\nThis doesn't work. `primes [2,3] == [2,3]` but `primes [2,3] == [2,3]`\
    \ returns `True` but `primes [2,3] == [2,3]` returns `False`.\n<|/ c |>\n<| c\
    \ |>\n: I fixed the typo.\n<|/ c |>\n<| a dscore=1 |>\n<code>\nprimes :: [Integer]\n\
    primes = 2 : filter isPrime [3..]\n</code>\n<|/ a tags=primes,haskell,functional-programming\
    \ |>\n<| c |>\nThis doesn't work. `primes [2,3] == [2,3]` but `primes [2,3] ==\
    \ [2,3]` returns `True` but `primes [2,3] == [2,3]` returns `False`.\n<|/ c |>\n\
    <| c |>\n: I fixed the typo.\n<|/ c |>\n<| a tags=primes,haskell,functional-programming\
    \ |>\n<code>\nprimes :: [Integer]\nprimes = 2 : filter isPrime [3..]\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nThis doesn't work. `primes [2,3] == [2,3]` but `primes\
    \ [2,3] == [2,3]` returns `True` but `primes [2,3] == [2,3]` returns `False`.\n\
    <|/ c |>\n<| c |>\n: I fixed the typo.\n<|/ c |>\n<| a tags=primes,haskell,functional-programming\
    \ |>\n<code>\nprimes :: [Integer]\nprimes = 2 : filter isPrime [3..]\n</code>\n\
    <|/ a dscore=1 \nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\t\
    @test(candidate(\"Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\
    \t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\
    \t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t\
    @test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") ==\
    \ true)\n\t@test(candidate(\"gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\"\
    ) == false)\n\t@test(candidate(\"Madam\") == true)\n\t@test(candidate(\"M\") ==\
    \ false)\n\t@test(candidate(\"0\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4vk9q82m.jl:14\nin expression starting at\
    \ /tmp/tmp4vk9q82m.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    prime_length::Bool = False \n    \n    for i in string:\n        if i\
    \ == 'a' or i == 'e' or i == 'i' or i == 'o' or i == 'u':\n            prime_length::Bool\
    \ = True \n            break\n    \n    return prime_length\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nPlease don't post only code as an answer, but also provide an explanation\
    \ of what your code does and how it solves the problem of the question. Answers\
    \ with an explanation are usually more helpful and of better quality, and are\
    \ more likely to attract upvotes.\n<|/ c |>\n<| c |>\nI agree with you, however\
    \ I do not have enough reputation to comment on the question. Hence I posted an\
    \ answer instead.\n<|/ c |>\n<| c |>\nI agree with you, however I do not have\
    \ enough reputation to comment on the question. Hence I posted an answer instead.\n\
    <|/ c |>\n<| a tags=python,primes |>\n<code>\ndef prime_number(n):\n    prime_numbers\
    \ = []\n    for i in range(2, n):\n        if n%i == 0:\n            prime_numbers.append(i)\n\
    \    return prime_numbers\n</code>\n<|/ a dscore=0 |>\n<| c |>\nPlease don't post\
    \ only code as an answer, but also provide an explanation of what your code does\
    \ and how it solves the problem of the question. Answers with an explanation are\
    \ usually more helpful and of better quality, and are more likely to attract upvotes.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\ndef prime_number(n):\n    prime_numbers =\
    \ []\n    for i in range(2, n):\n        if n%i == 0:\n            prime_numbers.append(i)\n\
    \    return prime_numbers\n</code>\n<|/ a tags=python,primes |>\n<| c |>\nPlease\
    \ don't post only code as an answer, but also provide an explanation of what your\
    \ code does and how it solves the problem of the question. Answers with an explanation\
    \ are usually more helpful and of better quality, and are more likely to attract\
    \ upvotes.\n<|/ c |>\n<| a dscore=0 |>\n<code>\ndef prime_number(n):\n    prime_numbers\
    \ = []\n    for i in range(2, n):\n        if n%i == 0:\n            prime_numbers.append(i)\n\
    \    return prime_numbers\n</code>\n<|/ a tags=python,primes |>\n<| c |>\nPlease\
    \ don't post only code as an answer, but also provide an explanation of what your\
    \ code does and how it solve\nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\
    \t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\
    \t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\
    \t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t\
    @test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") ==\
    \ true)\n\t@test(candidate(\"gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\"\
    ) == false)\n\t@test(candidate(\"Madam\") == true)\n\t@test(candidate(\"M\") ==\
    \ false)\n\t@test(candidate(\"0\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph_9ala3y.jl:13\nin expression starting at\
    \ /tmp/tmph_9ala3y.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_numbers = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n\
    \    \n    for number in prime_numbers\n        if number % string == 0\n    \
    \        return false\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"Hello\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"abcdcba\"\
    )\n</cell>\n<code language=julia-1.5>\nprime_length(\"kittens\")\n</cell>\n<code\
    \ language=julia-1.5>\nprime_length(\"orange\")\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a string and returns True if the string has all letters\
    \ capitalized and False otherwise\nExamples\ncapitalize_letters(\"Hello\") ==\
    \ True\ncapitalize_letters(\"HELLO\") == False\ncapitalize_letters(\"kittens\"\
    ) == True\ncapitalize_letters(\"orange\") == False\ncapitalize_letters(\"Orange\"\
    ) == False\ncapitalize_letters(\"Oranges\") == False\ncapitalize_letters(\"Oranges\"\
    ) == False\ncapitalize_letters(\"Oranges\") == False\ncapitalize_letters(\"Oranges\"\
    ) == False\ncapitalize_letters(\"Oranges\") == False\ncapitalize_letters(\"Oranges\"\
    ) == False\ncapitalize_letters(\"Oranges\") == False\ncapitalize_letters(\"Oranges\"\
    ) == False\ncapitalize_letters(\"Oranges\") == False\ncapitalize_letters(\"Oranges\"\
    ) == False\ncapitalize_letters(\"Oranges\") == False\ncapitalize_letters(\"Oranges\"\
    ) == False\ncapitalize_letters(\"Oranges\") == False\ncapitalize_letters(\"Oranges\"\
    ) == False\ncapitalize_letters(\"Oranges\") == False\ncapitalize_letters(\"Oranges\"\
    ) == False\ncapitalize_letters(\"Oranges\") == False\ncapitalize_letters(\"Oranges\"\
    ) == False\ncapitalize_letters(\"Oranges\") == False\ncapitalize_letters(\"Oranges\"\
    ) == False\ncapitalize_letters(\"Oranges\") == False\ncapitalize_letters(\"Oranges\"\
    ) == False\ncapitalize_letters(\"Oranges\") == False\ncapitalize_letters(\"Oranges\"\
    ) == False\ncapitalize_letters(\"Oranges\") == False\ncapitalize_letters(\"Oranges\"\
    ) == False\ncapitalize_letters(\"Oranges\") == False\ncapitalize_letters(\"Oranges\"\
    ) == False\ncapitalize_letters(\"Oranges\") == False\ncapitalize_letters(\"Oranges\"\
    ) == \nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"\
    Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"\
    kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"\
    wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpty9cxwzq.jl:18\nin expression starting at\
    \ /tmp/tmpty9cxwzq.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_numbers = primes(string)\n    \n    if prime_numbers == []\n\
    \        true\n    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"Hello\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"abcdcba\"\
    )\n</cell>\n<code language=julia-1.5>\nprime_length(\"kittens\")\n</cell>\n<code\
    \ language=julia-1.5>\nprime_length(\"orange\")\n</cell>\n<text>\nWrite a function\
    \ that takes a string and returns True if all the characters in the string are\
    \ letters or False otherwise\nExamples\nall_letters('Hello') == True\nall_letters('abcdcba')\
    \ == True\nall_letters('kittens') == False\nall_letters('orange') == False\nall_letters('')\
    \ == False\nall_letters(' ') == False\nall_letters(' ') == False\nall_letters('\
    \ ') == False\nall_letters(' ') == False\nall_letters(' ') == False\nall_letters('\
    \ ') == False\nall_letters(' ') == False\nall_letters(' ') == False\nall_letters('\
    \ ') == False\nall_letters(' ') == False\nall_letters(' ') == False\nall_letters('\
    \ ') == False\nall_letters(' ') == False\nall_letters(' ') == False\nall_letters('\
    \ ') == False\nall_letters(' ') == False\nall_letters(' ') == False\nall_letters('\
    \ ') == False\nall_letters(' ') == False\nall_letters(' ') == False\nall_letters('\
    \ ') == False\nall_letters(' ') == False\nall_letters(' ') == False\nall_letters('\
    \ ') == False\nall_letters(' ') == False\nall_letters(' ') == False\nall_letters('\
    \ ') == False\nall_letters(' ') == False\nall_letters(' ') == False\nall_letters('\
    \ ') == False\nall_letters(' ') == False\nall_letters(' ') == False\nall_letters('\
    \ ') == False\nall_letters(' ') == False\nall_letters(' ') == False\nall_letters('\
    \ ') == False\nall_letters(' ') == False\nall_letters(' ') == False\nall_letters('\
    \ ') == False\nall_letters(' ') == False\nall_letters(' ') == False\nall_letters('\
    \ ') == False\nall_letters(' ') == False\nall_letters(' ') == False\nall_letters('\
    \ ') == False\nall_letters(' ') == False\nall_letters(' ') == False\nall_letters('\
    \ ') == False\nall_letters(' ') == False\nall_letters('\nusing Test\n\n@testset\
    \ begin\n\ncandidate = prime_length;\n\t@test(candidate(\"Hello\") == true)\n\t\
    @test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"kittens\") == true)\n\
    \t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"wow\") == true)\n\
    \t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\") == true)\n\
    \t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"\
    HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"gogo\"\
    ) == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgub9y6we.jl:19\nin expression starting at\
    \ /tmp/tmpgub9y6we.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_numbers = Set([2,3,5,7,11,13,17,19])\n    \n    for char in\
    \ string:\n        if char in prime_numbers:\n            return False\n    return\
    \ True\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string and\
    \ returns True if the string is a palindrome or False otherwise\nExamples\npalindrome('kittens')\
    \ == True\npalindrome('kitten') == False\npalindrome('racecar') == True\npalindrome('racecars')\
    \ == False\nHint: Reverse the string and compare it to the original string\nusing\
    \ Test\n\n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"Hello\"\
    ) == true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"kittens\"\
    ) == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"wow\"\
    ) == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1itli72y.jl:14\nin expression starting at\
    \ /tmp/tmp1itli72y.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    prime_length::Bool = false \n    for x in string:\n        if prime_length::Bool\
    \ = false \n            for y in string:\n                if x == y:\n       \
    \             prime_length::Bool = false \n                    break\n       \
    \         if x % y == 0 \n                    prime_length::Bool = false \n  \
    \                  break\n                if y % x == 0 \n                   \
    \ prime_length::Bool = false \n                    break\n                if y\
    \ % x == 1 \n                    prime_length::Bool = true \n                \
    \    break\n    return prime_length::Bool\n</code>\n<|/ a dscore=0 |>\n<| a tags=primes,haskell,string\
    \ |>\n<code>\nprimes :: [Int]\nprimes = 2 : filter isPrime [3..]\nusing Test\n\
    \n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"Hello\") ==\
    \ true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"kittens\"\
    ) == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"wow\"\
    ) == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk79td0tl.jl:12\nin expression starting at\
    \ /tmp/tmpk79td0tl.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_length::Bool = \n        if string == \"\"\n            true\n\
    \        else\n            if string.length % 2 == 0\n                false\n\
    \            else\n                if string.length % 3 == 0\n               \
    \     true\n                else\n                    prime_length(string[2:end])\n\
    \            end\n        end\n    \n    return prime_length\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype prime_length(\"Hello\")\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype prime_length(\"abcdcba\")\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype prime_length(\"kittens\")\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype prime_length(\"orange\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns True if the string\
    \ is a palindrome or False otherwise\nExamples\npalindrome(\"abba\") == True\n\
    palindrome(\"abbaab\") == True\npalindrome(\"abbaaba\") == False\npalindrome(\"\
    abba\") == False\npalindrome(\"abbaab\") == False\npalindrome(\"abbaaba\") ==\
    \ False\npalindrome(\"abba\") == False\npalindrome(\"abbaab\") == False\npalindrome(\"\
    abbaaba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abbaab\") ==\
    \ False\npalindrome(\"abbaaba\") == False\npalindrome(\"abba\") == False\npalindrome(\"\
    abbaab\") == False\npalindrome(\"abbaaba\") == False\npalindrome(\"abba\") ==\
    \ False\npalindrome(\"abbaab\") == False\npalindrome(\"abbaaba\") == False\npalindrome(\"\
    abba\") == False\npalindrome(\"abbaab\") == False\npalindrome(\"abbaaba\") ==\
    \ False\npalindrome(\"abba\") == False\npalindrome(\"abbaab\") == False\npalindrome(\"\
    abbaaba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abbaab\") ==\
    \ False\npalindrome(\"abbaaba\") == False\npalindrome(\"abba\") == False\npalindrome(\"\
    abbaab\") == False\npalindrome(\"abbaaba\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prime_length;\n\t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"\
    abcdcba\") == true)\n\t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"\
    orange\") == false)\n\t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"\
    world\") == true)\n\t@test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"\
    Wow\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"HI\")\
    \ == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"gogo\") ==\
    \ false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4qyvlcho.jl:27\nin expression starting at\
    \ /tmp/tmp4qyvlcho.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_length::Bool = false \n    \n    if string == \"\"\n     \
    \   return prime_length \n    \n    length::Int = string.length \n    \n    for\
    \ i in 2..length\n        if string.charAt(i) == string.charAt(i-1)\n        \
    \    prime_length = false \n            return prime_length \n        end \n \
    \   end \n    return prime_length \nend \n</cell>\n<code language=julia-1.4>\n\
    prime_length(\"Hello\")\n</cell>\n<code language=julia-1.4>\nprime_length(\"abcdcba\"\
    )\n</cell>\n<code language=julia-1.4>\nprime_length(\"kittens\")\n</cell>\n<code\
    \ language=julia-1.4>\nprime_length(\"orange\")\n</cell>\n<text>\nWrite a function\
    \ that takes a string and returns True if the string is a palindrome or False\
    \ otherwise\nExamples\npalindrome(\"racecar\") == True\npalindrome(\"racecars\"\
    ) == False\npalindrome(\"A man, a plan, a canal: Panama!\") == True\npalindrome(\"\
    A man, a plan, a canal: Panama!\") == False\npalindrome(\"A man, a plan, a canal:\
    \ Panama!\") == False\npalindrome(\"A man, a plan, a canal: Panama!\") == False\n\
    palindrome(\"A man, a plan, a canal: Panama!\") == False\npalindrome(\"A man,\
    \ a plan, a canal: Panama!\") == False\npalindrome(\"A man, a plan, a canal: Panama!\"\
    ) == False\npalindrome(\"A man, a plan, a canal: Panama!\") == False\npalindrome(\"\
    A man, a plan, a canal: Panama!\") == False\npalindrome(\"A man, a plan, a canal:\
    \ Panama!\") == False\npalindrome(\"A man, a plan, a canal: Panama!\") == False\n\
    palindrome(\"A man, a plan, a canal: Panama!\") == False\npalindrome(\"A man,\
    \ a plan, a canal: Panama!\") == False\npalindrome(\"A man, a plan, a canal: Panama!\"\
    ) == False\npalindrome(\"A man, a plan, a canal: Panama!\") == False\npalindrome(\"\
    A man, a plan, a canal: Panama!\") == False\n\nusing Test\n\n@testset begin\n\n\
    candidate = prime_length;\n\t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"\
    abcdcba\") == true)\n\t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"\
    orange\") == false)\n\t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"\
    world\") == true)\n\t@test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"\
    Wow\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"HI\")\
    \ == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"gogo\") ==\
    \ false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7o29g0ei.jl:26\nin expression starting at\
    \ /tmp/tmp7o29g0ei.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_number::Bool = true \n    \n    for character in string:\n\
    \        if character == ' ':\n            continue\n        if character == '\\\
    n':\n            continue\n        if character == '\\t':\n            continue\n\
    \        if character == '\\r':\n            continue\n        if character ==\
    \ '\\f':\n            continue\n        if character == '\\v':\n            continue\n\
    \        if character == '\\0':\n            continue\n        if character ==\
    \ '\\'':\n            continue\n        if character == '\\\\':\n            continue\n\
    \        if character == '(':\n            continue\n        if character == ')':\n\
    \            continue\n        if character == '[':\n            continue\n  \
    \      if character == ']':\n            continue\n        if character == '{':\n\
    \            continue\n        if character == '}':\n            continue\n  \
    \      if character == '<':\n            continue\n        if character == '>':\n\
    \            continue\n        if character == '|':\n            continue\n  \
    \      if character == '&':\n            continue\n        if character == '%':\n\
    \            continue\n        if character == '+':\n            continue\n  \
    \      if character == '-':\n            continue\n        if character == '*':\n\
    \            continue\n        if character == '/':\n            continue\n  \
    \      if character == '^':\n            continue\n        if character == '=':\n\
    \            continue\n        if character == '!':\n            continue\n  \
    \      if character == '?':\n            continue\n        if character == '<':\n\
    \            continue\n        if character == '>':\n            continue\n  \
    \      if character == '|':\n            continue\n        if character == '&':\n\
    \            continue\n        if character == '%':\n            continue\n  \
    \      if character == '+':\n            continue\n        if character == '-':\n\
    \            continue\n        if character == '*':\n            continue\n  \
    \      if character == '/':\n            continue\n        if character == '^':\n\
    \            continue\n        if character == '=':\n            continue\n  \
    \      if character == '!':\n            continue\n        if character == '?':\n\
    \            continue\n        if character == '<':\n            continue\n  \
    \      if character == '>':\n            continue\n        if character == '|':\n\
    \            continue\n        if character == '&':\n            continue\n  \
    \      if character == '%':\n            continue\n        if character == '+':\n\
    \            continue\n        if character == '-':\n            continue\n  \
    \      if character == '*':\n            continue\n        if character == '/':\n\
    \            continue\n        if character == '^':\n            continue\n  \
    \      if character == '=':\n            continue\n        if character == '!':\n\
    \            continue\n        if character == '?':\n            continue\n  \
    \      if character == '<':\n            continue\n        if character == '>':\n\
    \            continue\n        if character == '|':\n            continue\n  \
    \      if character == '&':\n            continue\n        if character == '%':\n\
    \            continue\n        if character == '+':\n            continue\n  \
    \      if character == '-':\n            continue\n        if character == '*':\n\
    \nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"\
    Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"\
    kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"\
    wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpspajpjpf.jl:14\nin expression starting at\
    \ /tmp/tmpspajpjpf.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_length::Bool = False \n    \n    if string == \"\"\n     \
    \   prime_length::Bool = True \n    else \n        \n        prime_length::Bool\
    \ = False \n        \n        for i in string\n            \n            if string[i]\
    \ % 2 == 0\n                prime_length::Bool = True \n            else\n   \
    \             prime_length::Bool = False \n                \n        end\n   \
    \     \n    end\n    \n    return prime_length\nend\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"Hello\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"abcdcba\"\
    )\n</cell>\n<code language=julia-1.5>\nprime_length(\"kittens\")\n</cell>\n<code\
    \ language=julia-1.5>\nprime_length(\"orange\")\n</cell>\n<text>\nWrite a function\
    \ that takes a string and returns True if the string\n    contains only letters\
    \ or False otherwise\n    Examples\n    letters_only('Hello') == True\n    letters_only('abcdcba')\
    \ == False\n    letters_only('kittens') == False\n    letters_only('orange') ==\
    \ False\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\
    \t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\
    \t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\
    \t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t\
    @test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") ==\
    \ true)\n\t@test(candidate(\"gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\"\
    ) == false)\n\t@test(candidate(\"Madam\") == true)\n\t@test(candidate(\"M\") ==\
    \ false)\n\t@test(candidate(\"0\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpihpjrjf1.jl:32\nin expression starting at\
    \ /tmp/tmpihpjrjf1.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_numbers = prime_numbers()\n    \n    for i in string:\n  \
    \      if i in prime_numbers:\n            return False\n    return True\n</cell>\n\
    <cell>\nprime_length('Hello') == True\nprime_length('abcdcba') == True\nprime_length('kittens')\
    \ == True\nprime_length('orange') == False\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string and returns True if the string is a palindrome\
    \ or False otherwise\nExamples\npalindrome('racecar') == True\npalindrome('racecars')\
    \ == True\npalindrome('racecar') == False\npalindrome('racecars') == False\npalindrome('racecars')\
    \ == False\npalindrome('racecars') == False\npalindrome('racecars') == False\n\
    palindrome('racecars') == False\npalindrome('racecars') == False\npalindrome('racecars')\
    \ == False\npalindrome('racecars') == False\npalindrome('racecars') == False\n\
    palindrome('racecars') == False\npalindrome('racecars') == False\npalindrome('racecars')\
    \ == False\npalindrome('racecars') == False\npalindrome('racecars') == False\n\
    palindrome('racecars') == False\npalindrome('racecars') == False\npalindrome('racecars')\
    \ == False\npalindrome('racecars') == False\npalindrome('racecars') == False\n\
    palindrome('racecars') == False\npalindrome('racecars') == False\npalindrome('racecars')\
    \ == False\npalindrome('racecars') == False\npalindrome('racecars') == False\n\
    palindrome('racecars') == False\npalindrome('racecars') == False\npalindrome('racecars')\
    \ == False\npalindrome('racecars') == False\npalindrome('racecars') == False\n\
    palindrome('racecars') == False\npalindrome('racecars') == False\npalindrome('racecars')\
    \ == False\npalindrome('racecars') == False\npalindrome('racecars') == False\n\
    palindrome('race\nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\t\
    @test(candidate(\"Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\
    \t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\
    \t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t\
    @test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") ==\
    \ true)\n\t@test(candidate(\"gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\"\
    ) == false)\n\t@test(candidate(\"Madam\") == true)\n\t@test(candidate(\"M\") ==\
    \ false)\n\t@test(candidate(\"0\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1mc4t7ce.jl:14\nin expression starting at\
    \ /tmp/tmp1mc4t7ce.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_numbers::Set{Int} = (2..math.floor(sqrt(string)))\n    for\
    \ i in prime_numbers\n        if string % i == 0\n            return false\n \
    \   return true\nend\n</cell>\n<code language=julia-1.4>\nprime_length(\"Hello\"\
    )\n</cell>\n<code language=julia-1.4>\nprime_length(\"abcdcba\")\n</cell>\n<code\
    \ language=julia-1.4>\nprime_length(\"kittens\")\n</cell>\n<code language=julia-1.4>\n\
    prime_length(\"orange\")\n</cell>\n<text>\nExercise\nWrite a function that takes\
    \ a string and returns True if the string is a palindrome or False otherwise\n\
    Examples\npalindrome(\"abba\") == True\npalindrome(\"abba\") == False\npalindrome(\"\
    abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\n\
    palindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abba\"\
    ) == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"\
    abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\n\
    palindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abba\"\
    ) == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"\
    abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\n\
    palindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abba\"\
    ) == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"\
    abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\n\
    palindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abba\"\
    ) == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"\
    abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\n\
    palindrome\nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"\
    Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"\
    kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"\
    wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_hf0ipfc.jl:17\nin expression starting at\
    \ /tmp/tmp_hf0ipfc.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_numbers = prime_numbers()\n    \n    for i in string:\n  \
    \      if i in prime_numbers:\n            return False\n    return True\n   \
    \ \n\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is an even number or False otherwise\n    Examples\n    even_length('Hello')\
    \ == True\n    even_length('abcdcba') == True\n    even_length('kittens') == True\n\
    \    even_length('orange') == False\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = prime_length;\n\t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"\
    abcdcba\") == true)\n\t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"\
    orange\") == false)\n\t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"\
    world\") == true)\n\t@test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"\
    Wow\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"HI\")\
    \ == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"gogo\") ==\
    \ false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9xvzrtet.jl:14\nin expression starting at\
    \ /tmp/tmp9xvzrtet.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_length::Bool = False \n    \n    for i in string:\n      \
    \  if i == '0' or i == '1' or i == '2' or i == '3' or i == '4' or i == '5' or\
    \ i == '6' or i == '7' or i == '8' or i == '9':\n            prime_length::Bool\
    \ = True \n            break\n    \n    return prime_length\n</code>\n<|/ a tags=julia\
    \ |>\n<| a dscore=0 |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\
    \t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\
    \t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\
    \t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t\
    @test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") ==\
    \ true)\n\t@test(candidate(\"gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\"\
    ) == false)\n\t@test(candidate(\"Madam\") == true)\n\t@test(candidate(\"M\") ==\
    \ false)\n\t@test(candidate(\"0\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpadddfopj.jl:14\nin expression starting at\
    \ /tmp/tmpadddfopj.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_numbers = prime_numbers(string)\n    \n    if prime_numbers\
    \ == []\n        true\n    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert prime_length(\"Hello\") == true\n@assert prime_length(\"abcdcba\") ==\
    \ true\n@assert prime_length(\"kittens\") == true\n@assert prime_length(\"orange\"\
    ) == false\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string\
    \ and returns True if the string contains only letters (a-z), False otherwise\n\
    Examples\nletter_only_string('Hello') == True\nletter_only_string('abcdcba') ==\
    \ False\nletter_only_string('kittens') == False\nletter_only_string('orange')\
    \ == False\nletter_only_string('') == False\nletter_only_string(' ') == False\n\
    letter_only_string(' ') == False\nletter_only_string(' ') == False\nletter_only_string('\
    \ ') == False\nletter_only_string(' ') == False\nletter_only_string(' ') == False\n\
    letter_only_string(' ') == False\nletter_only_string(' ') == False\nletter_only_string('\
    \ ') == False\nletter_only_string(' ') == False\nletter_only_string(' ') == False\n\
    letter_only_string(' ') == False\nletter_only_string(' ') == False\nletter_only_string('\
    \ ') == False\nletter_only_string(' ') == False\nletter_only_string(' ') == False\n\
    letter_only_string(' ') == False\nletter_only_string(' ') == False\nletter_only_string('\
    \ ') == False\nletter_only_string(' ') == False\nletter_only_string(' ') == False\n\
    letter_only_string(' ') == False\nletter_only_string(' ') == False\nletter_only_string('\
    \ ') == False\nletter_only_string(' ') == False\nletter_only_string(' ') == False\n\
    letter_only_string(' ') == False\nletter_only_string(' ') == False\nletter_only_string('\
    \ ') == False\nletter_only_string(' ') == False\nletter_only_string(' ') == False\n\
    letter_only_string(' ') == False\nletter_only_string(' ') == False\nletter_only_string('\
    \ ') == False\nletter_only_string(' ') == False\nletter_only_string(' ') == False\n\
    letter_only_string(' ') == False\nletter_only_string(' ') == False\nletter_only_string('\
    \ ') == False\nletter_only_string(' ') == False\nletter_only_string(' ') == False\n\
    letter_only_string(' ') == False\nletter_only_string(' ') == False\nletter_only_string('\
    \ ') == False\nletter_only_string(' ') == False\nletter_only_string(' ') == False\n\
    letter_only_string(' ') == False\nletter_only_string(' ') == False\nletter_only_string('\
    \ ') == False\nletter_only_string(' ') == False\nletter_only_string(' ') == \n\
    using Test\n\n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"\
    Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"\
    kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"\
    wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa4tq3hla.jl:19\nin expression starting at\
    \ /tmp/tmpa4tq3hla.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_numbers = prime_numbers()\n    \n    for i in string:\n  \
    \      if i in prime_numbers:\n            return False\n    return True\n</code>\n\
    <|/ a tags=python,primes |>\n<| a dscore=0 |>\n<code>\ndef prime_number(n):\n\
    \    \n    prime_numbers = [2]\n    \n    for i in range(3, n + 1, 2):\n     \
    \   if i in prime_numbers:\n            continue\n        else:\n            prime_numbers.append(i)\n\
    \    \n    return prime_numbers\n</code>\n<|/ a tags=python,primes |>\n<| c |>\n\
    While this code may answer the question, providing additional context regarding\
    \ why and/or how this code answers the question improves its long-term value.\n\
    <|/ c |>\n<| a tags=python,primes |>\n<code>\ndef prime_number(n):\n    \n   \
    \ prime_numbers = [2]\n    \n    for i in range(3, n + 1, 2):\n        if i in\
    \ prime_numbers:\n            continue\n        else:\n            prime_numbers.append(i)\n\
    \    \n    return prime_numbers\n</code>\n<|/ a dscore=0 |>\n<| c |>\nWhile this\
    \ code may answer the question, providing additional context regarding why and/or\
    \ how this code answers the question improves its long-term value.\n<|/ c |>\n\
    <| a dscore=0 |>\n<code>\ndef prime_number(n):\n    \n    prime_numbers = [2]\n\
    \    \n    for i in range(3, n + 1, 2):\n        if i in prime_numbers:\n    \
    \        continue\n        else:\n            prime_numbers.append(i)\n    \n\
    \    return prime_numbers\n</code>\n<|/ a tags=python,primes |>\n<| c |>\nWhile\
    \ this code may answer the question, providing additional context regarding why\
    \ and/or how this code answers the question improves its long-term value.\n<|/\
    \ c |>\n<| a |>\n<code>\ndef prime_number(n):\n    \n    prime_numbers = [2]\n\
    \    \n    for i in range(3, n + 1, 2):\n        if i in prime_numbers:\n    \
    \        continue\n        else:\n            prime_numbers.append(i)\n    \n\
    \    return prime_numbers\n</code>\n<|/ a dscore=0 tags=python,primes |>\n<| a\
    \ dscore=0 |>\n<code>\ndef prime_number(n):\n    \n    prime_numbers = [2]\n \
    \   \n    for i in range(3, n + 1, 2):\n        if i in prime_numbers:\n     \
    \       continue\n        else:\n            prime_numbers.append(i)\n    \n \
    \   return prime_numbers\n</code>\n<|/ a tags=python,primes |>\n<| a tags=python,primes\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"\
    Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"\
    kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"\
    wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5fxbryin.jl:14\nin expression starting at\
    \ /tmp/tmp5fxbryin.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_numbers = prime_numbers()\n    \n    prime_numbers_set = Set(prime_numbers)\n\
    \    \n    prime_numbers_set.add(0)\n    \n    prime_numbers_set.add(1)\n    \n\
    \    prime_numbers_set.add(2)\n    \n    prime_numbers_set.add(3)\n    \n    prime_numbers_set.add(4)\n\
    \    \n    prime_numbers_set.add(5)\n    \n    prime_numbers_set.add(6)\n    \n\
    \    prime_numbers_set.add(7)\n    \n    prime_numbers_set.add(8)\n    \n    prime_numbers_set.add(9)\n\
    \    \n    prime_numbers_set.add(10)\n    \n    prime_numbers_set.add(11)\n  \
    \  \n    prime_numbers_set.add(12)\n    \n    prime_numbers_set.add(13)\n    \n\
    \    prime_numbers_set.add(14)\n    \n    prime_numbers_set.add(15)\n    \n  \
    \  prime_numbers_set.add(16)\n    \n    prime_numbers_set.add(17)\n    \n    prime_numbers_set.add(18)\n\
    \    \n    prime_numbers_set.add(19)\n    \n    prime_numbers_set.add(20)\n  \
    \  \n    prime_numbers_set.add(21)\n    \n    prime_numbers_set.add(22)\n    \n\
    \    prime_numbers_set.add(23)\n    \n    prime_numbers_set.add(24)\n    \n  \
    \  prime_numbers_set.add(25)\n    \n    prime_numbers_set.add(26)\n    \n    prime_numbers_set.add(27)\n\
    \    \n    prime_numbers_set.add(28)\n    \n    prime_numbers_set.add(29)\n  \
    \  \n    prime_numbers_set.add(30)\n    \n    prime_numbers_set.add(31)\n    \n\
    \    prime_numbers_set.add(32)\n    \n    prime_numbers_set.add(33)\n    \n  \
    \  prime_numbers_set.add(34)\n    \n    prime_numbers_set.add(35)\n    \n    prime_numbers_set.add(36)\n\
    \    \n    prime_numbers_set.add(37)\n    \n    prime_numbers_set.add(38)\n  \
    \  \n    prime_numbers_set.add(39)\n    \n    prime_numbers_set.add(40)\n    \n\
    \    prime_numbers_set.add(41)\n    \n    prime_numbers_set.add(\nusing Test\n\
    \n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"Hello\") ==\
    \ true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"kittens\"\
    ) == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"wow\"\
    ) == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppggz2z0y.jl:102\nin expression starting at\
    \ /tmp/tmppggz2z0y.jl:102\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_length::Bool = false \n    \n    for i in string\n       \
    \ if prime_length::Bool == true\n            break\n        else\n           \
    \ if string::String == i::String\n                prime_length::Bool = true\n\
    \            else\n                if string::String == i::String\n          \
    \          prime_length::Bool = false\n                else\n                \
    \    if string::String == i::String\n                        prime_length::Bool\
    \ = true\n                    else\n                        if string::String\
    \ == i::String\n                            prime_length::Bool = false\n     \
    \                   else\n                            if string::String == i::String\n\
    \                                prime_length::Bool = true\n                 \
    \           else\n                                if string::String == i::String\n\
    \                                    prime_length::Bool = false\n            \
    \                    else\n                                    if string::String\
    \ == i::String\n                                        prime_length::Bool = true\n\
    \                                    else\n                                  \
    \      if string::String == i::String\n                                      \
    \      prime_length::Bool = false\n                                        else\n\
    \                                            if string::String == i::String\n\
    \                                                prime_length::Bool = true\n \
    \                                           else\n                           \
    \                     if string::String == i::String\n                       \
    \                             prime_length::Bool = false\n                   \
    \                             else\n                                         \
    \           if string::String == i::String\n                                 \
    \                       prime_length::Bool = true\n                          \
    \                          else\n                                            \
    \            if string::String == i::String\n                                \
    \                            prime_length::Bool = false\n                    \
    \                                    else\n                                  \
    \                          if string::String == i::String\n                  \
    \                                              prime_length::Bool = true\n   \
    \                                                         else\n             \
    \                                                   if string::String == i::String\n\
    \                                                                    prime_length::Bool\
    \ = false\n                                                                else\n\
    \                                                                    if string::String\
    \ == i::String\n                                                             \
    \           prime_length::Bool = true\n                                      \
    \                              else\n                                        \
    \                                if string::String == i::String\n            \
    \                                                                prime_length::Bool\
    \ = false\n                                                                  \
    \      else\n                                                                \
    \            if string::String == i::String\n                                \
    \                                                prime_length::Bool = true\n \
    \                                                                           else\n\
    \                                                                            \
    \    if string::String == i::String\n                                        \
    \                                            prime_length::Bool = false\n    \
    \                                                                            else\n\
    \                                                                            \
    \        if string::String == i::String\n                                    \
    \                                                    prime_length::Bool = true\n\
    \                                                                            \
    \        else\n                                                              \
    \                          if string::String == i::String\n                  \
    \                                                                          prime_length::Bool\
    \ = false\n                                                                  \
    \                      else\n                                                \
    \                                            if string::String == i::String\n\
    \                                                                            \
    \                    prime_length::Bool = true\n                             \
    \                                                               else\n       \
    \                                                                            \
    \             if string::String == i::String\n                               \
    \                                                                     prime_length::Bool\
    \ = false\n                                                                  \
    \                              else\n                                        \
    \                                                            if string::String\
    \ == i\nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"\
    Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"\
    kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"\
    wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd4yrqqwx.jl:1\nin expression starting at /tmp/tmpd4yrqqwx.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_numbers = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n\
    \    \n    for i in string:\n        if i in prime_numbers:\n            return\
    \ False\n    return True\n</cell>\n<cell>\nprime_length('Hello') == True\nprime_length('abcdcba')\
    \ == True\nprime_length('kittens') == True\nprime_length('orange') == False\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a string and returns\
    \ True if the string contains any uppercase letters or False otherwise\nExamples\n\
    has_uppercase_letters('Hello') == True\nhas_uppercase_letters('HELLO') == True\n\
    has_uppercase_letters('HELLOWORLD') == True\nhas_uppercase_letters('HELLOWORLD')\
    \ == False\nhas_uppercase_letters('HELLOWORLD') == False\nhas_uppercase_letters('HELLOWORLD')\
    \ == False\nhas_uppercase_letters('HELLOWORLD') == False\nhas_uppercase_letters('HELLOWORLD')\
    \ == False\nhas_uppercase_letters('HELLOWORLD') == False\nhas_uppercase_letters('HELLOWORLD')\
    \ == False\nhas_uppercase_letters('HELLOWORLD') == False\nhas_uppercase_letters('HELLOWORLD')\
    \ == False\nhas_uppercase_letters('HELLOWORLD') == False\nhas_uppercase_letters('HELLOWORLD')\
    \ == False\nhas_uppercase_letters('HELLOWORLD') == False\nhas_uppercase_letters('HELLOWORLD')\
    \ == False\nhas_uppercase_letters('HELLOWORLD') == False\nhas_uppercase_letters('HELLOWORLD')\
    \ == False\nhas_uppercase_letters('HELLOWORLD') == False\nhas_uppercase_letters('HELLOWORLD')\
    \ == False\nhas_uppercase_letters('HELLOWORLD') == False\nhas_uppercase_letters('HELLOWORLD')\
    \ == False\nhas_uppercase_letters('HELLOWORLD') == False\nhas_uppercase_letters('HELLOWORLD')\
    \ == False\nhas_uppercase_letters('HELLOWORLD') == False\nhas_uppercase_letters('HELLOWORLD')\
    \ == False\nhas_uppercase_letters('HELLOWORLD') == False\nhas_uppercase_letters('HELLOWORLD')\
    \ == False\nhas_uppercase_letters('HELLOWORLD') == False\nhas_uppercase_letters('HELLOWORLD')\
    \ == False\nhas_uppercase_letters('HELLOWORLD') == False\nhas_uppercase_letters('HELLOWORLD')\
    \ == \nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"\
    Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"\
    kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"\
    wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpubf8gzd1.jl:14\nin expression starting at\
    \ /tmp/tmpubf8gzd1.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_length = 0\n    \n    for i in string:\n        if i == 'a'\
    \ or i == 'e' or i == 'i' or i == 'o' or i == 'u':\n            continue\n   \
    \     \n        prime_length += 1\n        \n        if prime_length == len(string):\n\
    \            return True\n        \n    return False\n</cell>\n<cell>\nprime_length('Hello')\n\
    </cell>\n<cell>\nprime_length('abcdcba')\n</cell>\n<cell>\nprime_length('kittens')\n\
    </cell>\n<cell>\nprime_length('orange')\n</cell>\n<text>\nWrite a function that\
    \ takes a string and returns True if the string is a palindrome or False otherwise\n\
    Examples\npalindrome('racecar') == True\npalindrome('racecars') == True\npalindrome('racecar')\
    \ == False\npalindrome('racecars') == False\npalindrome('') == False\npalindrome('\
    \ ') == False\npalindrome('racecar') == False\npalindrome('racecars') == False\n\
    palindrome('racecar') == False\npalindrome('racecars') == False\npalindrome('racecars')\
    \ == False\npalindrome('racecars') == False\npalindrome('racecars') == False\n\
    palindrome('racecars') == False\npalindrome('racecars') == False\npalindrome('racecars')\
    \ == False\npalindrome('racecars') == False\npalindrome('racecars') == False\n\
    palindrome('racecars') == False\npalindrome('racecars') == False\npalindrome('racecars')\
    \ == False\npalindrome('racecars') == False\npalindrome('racecars') == False\n\
    palindrome('racecars') == False\npalindrome('racecars') == False\npalindrome('racecars')\
    \ == False\npalindrome('racecars') == False\npalindrome('racecars') == False\n\
    palindrome('racecars') == False\npalindrome('racecars') == False\npalindrome('racecars')\
    \ == False\npalindrome('racecars') == False\npalindrome('racecars') == False\n\
    palindrome('racecars') == \nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\
    \t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\
    \t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\
    \t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t\
    @test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") ==\
    \ true)\n\t@test(candidate(\"gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\"\
    ) == false)\n\t@test(candidate(\"Madam\") == true)\n\t@test(candidate(\"M\") ==\
    \ false)\n\t@test(candidate(\"0\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvdfpcld_.jl:14\nin expression starting at\
    \ /tmp/tmpvdfpcld_.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_numbers = primes(string)\n    \n    for i in prime_numbers\n\
    \        if string.count(i) == string.count(i) + 1 \n            return false\n\
    \    return true\nend\n</cell>\n<code language=julia-1.5>\nprime_length(\"Hello\"\
    )\n</cell>\n<code language=julia-1.5>\nprime_length(\"abcdcba\")\n</cell>\n<code\
    \ language=julia-1.5>\nprime_length(\"kittens\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"orange\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns True if the string is a palindrome or False otherwise\n\
    Examples\npalindrome(\"abba\") == True\npalindrome(\"abbaab\") == True\npalindrome(\"\
    abbaaba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abbaab\") ==\
    \ False\npalindrome(\"abbaaba\") == False\npalindrome(\"abbaabba\") == True\n\
    palindrome(\"abbaabbaab\") == False\npalindrome(\"abbaabba\") == False\npalindrome(\"\
    abbaabbaab\") == False\npalindrome(\"abbaabbaaba\") == False\npalindrome(\"abbaabbaabba\"\
    ) == True\npalindrome(\"abbaabbaabbaab\") == False\npalindrome(\"abbaabbaabba\"\
    ) == False\npalindrome(\"abbaabbaabbaab\") == False\npalindrome(\"abbaabbaabbaaba\"\
    ) == False\npalindrome(\"abbaabbaabbaabba\") == True\npalindrome(\"abbaabbaabbaabbaab\"\
    ) == False\npalindrome(\"abbaabbaabbaabba\") == False\npalindrome(\"abbaabbaabbaabbaab\"\
    ) == False\npalindrome(\"abbaabbaabbaabbaaba\") == False\npalindrome(\"abbaabbaabbaabbaabba\"\
    ) == True\npalindrome(\"abbaabbaabbaabbaabbaab\") == False\npalindrome(\"abbaabbaabbaabbaabba\"\
    ) == False\npalindrome(\"abbaabbaabbaabbaabbaab\") == False\npalindrome(\"abbaabbaabbaabba\n\
    using Test\n\n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"\
    Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"\
    kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"\
    wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpncy3frjt.jl:18\nin expression starting at\
    \ /tmp/tmpncy3frjt.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_numbers = prime_numbers()\n    \n    for i in string:\n  \
    \      if i in prime_numbers:\n            return True\n    return False\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a string and returns True if the\
    \ string is a palindrome or False otherwise\nExamples\npalindrome('racecar') ==\
    \ True\npalindrome('racecars') == False\npalindrome('racecar') == False\npalindrome('racecars')\
    \ == True\npalindrome('racecar') == False\npalindrome('racecars') == True\npalindrome('racecar')\
    \ == False\npalindrome('racecars') == True\npalindrome('racecar') == False\npalindrome('racecars')\
    \ == True\npalindrome('racecar') == False\npalindrome('racecars') == True\npalindrome('racecar')\
    \ == False\npalindrome('racecars') == True\npalindrome('racecar') == False\npalindrome('racecars')\
    \ == True\npalindrome('racecar') == False\npalindrome('racecars') == True\npalindrome('racecar')\
    \ == False\npalindrome('racecars') == True\npalindrome('racecar') == False\npalindrome('racecars')\
    \ == True\npalindrome('racecar') == False\npalindrome('racecars') == True\npalindrome('racecar')\
    \ == False\npalindrome('racecars') == True\npalindrome('racecar') == False\npalindrome('racecars')\
    \ == True\npalindrome('racecar') == False\npalindrome('racecars') == True\npalindrome('racecar')\
    \ == False\npalindrome('racecars') == True\npalindrome('racecar') == False\npalindrome('racecars')\
    \ == True\npalindrome('racecar') == False\npalindrome('racecars') == True\npalindrome('racecar')\
    \ == False\npalindrome('racecars') == True\npalindrome('racecar') == False\npalindrome('racecars')\
    \ == True\npalindrome('racecar') == False\npalindrome('racecars') == True\npalindrome('racecar')\
    \ == False\npalindrome\nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\
    \t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\
    \t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\
    \t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t\
    @test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") ==\
    \ true)\n\t@test(candidate(\"gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\"\
    ) == false)\n\t@test(candidate(\"Madam\") == true)\n\t@test(candidate(\"M\") ==\
    \ false)\n\t@test(candidate(\"0\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe1sghlqz.jl:14\nin expression starting at\
    \ /tmp/tmpe1sghlqz.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_numbers::Set{Int} = (2..math.floor(sqrt(string)))\n    \n\
    \    for i in prime_numbers\n        if string % i == 0\n            return false\n\
    \    return true\nend\n</cell>\n<code language=julia-1.5>\nprime_length(\"Hello\"\
    )\n</cell>\n<code language=julia-1.5>\nprime_length(\"abcdcba\")\n</cell>\n<code\
    \ language=julia-1.5>\nprime_length(\"kittens\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"orange\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns True if the string contains any uppercase letters or False\
    \ otherwise\nExamples\nhas_uppercase_letters(\"Hello\") == True\nhas_uppercase_letters(\"\
    HELLO\") == False\nhas_uppercase_letters(\"kittens\") == True\nhas_uppercase_letters(\"\
    orange\") == False\nhas_uppercase_letters(\"Orange\") == False\nhas_uppercase_letters(\"\
    OrangE\") == False\nhas_uppercase_letters(\"OrangEs\") == False\nhas_uppercase_letters(\"\
    OrangES\") == False\nhas_uppercase_letters(\"OrangES\") == False\nhas_uppercase_letters(\"\
    OrangES\") == False\nhas_uppercase_letters(\"OrangES\") == False\nhas_uppercase_letters(\"\
    OrangES\") == False\nhas_uppercase_letters(\"OrangES\") == False\nhas_uppercase_letters(\"\
    OrangES\") == False\nhas_uppercase_letters(\"OrangES\") == False\nhas_uppercase_letters(\"\
    OrangES\") == False\nhas_uppercase_letters(\"OrangES\") == False\nhas_uppercase_letters(\"\
    OrangES\") == False\nhas_uppercase_letters(\"OrangES\") == False\nhas_uppercase_letters(\"\
    OrangES\") == False\nhas_uppercase_letters(\"OrangES\") == False\nhas_uppercase_letters(\"\
    OrangES\") == False\nhas_uppercase_letters(\"OrangES\") == False\nhas_uppercase_letters(\"\
    OrangES\") == False\nhas_uppercase_letters(\"OrangES\") == False\nhas_uppercase_letters(\"\
    OrangES\") == False\nhas_uppercase_letters(\"OrangES\") == False\nhas_uppercase_letters(\"\
    OrangES\") == False\nhas_uppercase_letters(\"OrangES\") == False\nhas_uppercase_letters(\"\
    OrangES\") == False\nhas_uppercase_letters(\"OrangES\") == False\nhas_uppercase_letters(\"\
    OrangES\nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"\
    Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"\
    kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"\
    wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp51iia8g6.jl:18\nin expression starting at\
    \ /tmp/tmp51iia8g6.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    if string == \"\"\n        return true\n    \n    prime_number::Int64\
    \ = 1\n    \n    for character in string\n        if character == character\n\
    \            prime_number += 1\n        \n        if prime_number > string.length\n\
    \            return false\n        \n        prime_number += 1\n        \n   \
    \ return true\nend\n</cell>\n<code language=julia-1.5>\nprime_length(\"Hello\"\
    )\n</cell>\n<code language=julia-1.5>\nprime_length(\"abcdcba\")\n</cell>\n<code\
    \ language=julia-1.5>\nprime_length(\"kittens\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"orange\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns True if all characters are uppercase or False otherwise\n\
    Examples\nupper_case(\"Hello\") == True\nupper_case(\"HELLO\") == True\nupper_case(\"\
    HELLOWORLD\") == False\nupper_case(\"HELLOWORLD\") == False\nupper_case(\"HELLOWORLD\"\
    ) == False\nupper_case(\"HELLOWORLD\") == False\nupper_case(\"HELLOWORLD\") ==\
    \ False\nupper_case(\"HELLOWORLD\") == False\nupper_case(\"HELLOWORLD\") == False\n\
    upper_case(\"HELLOWORLD\") == False\nupper_case(\"HELLOWORLD\") == False\nupper_case(\"\
    HELLOWORLD\") == False\nupper_case(\"HELLOWORLD\") == False\nupper_case(\"HELLOWORLD\"\
    ) == False\nupper_case(\"HELLOWORLD\") == False\nupper_case(\"HELLOWORLD\") ==\
    \ False\nupper_case(\"HELLOWORLD\") == False\nupper_case(\"HELLOWORLD\") == False\n\
    upper_case(\"HELLOWORLD\") == False\nupper_case(\"HELLOWORLD\") == False\nupper_case(\"\
    HELLOWORLD\") == False\nupper_case(\"HELLOWORLD\") == False\nupper_case(\"HELLOWORLD\"\
    ) == False\nupper_case(\"HELLOWORLD\") == False\nupper_case(\"HELLOWORLD\") ==\
    \ False\nupper_case(\"HELLOWORLD\") == False\nupper_case(\"HELLOWORLD\") == False\n\
    upper_case(\"HELLOWORLD\") == False\nupper_case(\"HELLOWORLD\") == False\nupper_case(\"\
    HELLOWORLD\") == False\nupper_case(\"HELLOWORLD\") == False\nupper_case(\"HELLOWORLD\"\
    ) == False\nupper_case(\"HELLOWORLD\") == False\nupper_case(\"HELLOWORLD\") ==\
    \ False\nupper_case(\"HELLOWORLD\") == False\nupper_\nusing Test\n\n@testset begin\n\
    \ncandidate = prime_length;\n\t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"\
    abcdcba\") == true)\n\t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"\
    orange\") == false)\n\t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"\
    world\") == true)\n\t@test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"\
    Wow\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"HI\")\
    \ == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"gogo\") ==\
    \ false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8ei7t1if.jl:27\nin expression starting at\
    \ /tmp/tmp8ei7t1if.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_length::Bool = false \n    \n    if string == \"\"\n     \
    \   return prime_length\n    \n    length::Int = string.length\n    \n    if length\
    \ == 1\n        return prime_length\n    \n    if length == 2\n        return\
    \ true\n    \n    if length == 3\n        return true\n    \n    if length ==\
    \ 5\n        return true\n    \n    if length == 7\n        return true\n    \n\
    \    if length == 11\n        return true\n    \n    if length == 12\n       \
    \ return true\n    \n    if length == 13\n        return true\n    \n    if length\
    \ == 17\n        return true\n    \n    if length == 19\n        return true\n\
    \    \n    if length == 21 or length == 23\n        return true\n    \n    if\
    \ length == 25\n        return true\n    \n    if length == 27\n        return\
    \ true\n    \n    if length == 29\n        return true\n    \n    if length ==\
    \ 31 or length == 33\n        return true\n    \n    if length == 35\n       \
    \ return true\n    \n    if length == 37\n        return true\n    \n    if length\
    \ == 39\n        return true\n    \n    if length == 41 or length == 43\n    \
    \    return true\n    \n    if length == 45\n        return true\n    \n    if\
    \ length == 47\n        return true\n    \n    if length == 49\n        return\
    \ true\n    \n    if length == 51 or length == 53\n        return true\n    \n\
    \    if length == 55\n        return true\n    \n    if length == 57\n       \
    \ return true\n    \n    if length == 59\n        return true\n    \n    if length\
    \ == 61 or length == 63\n        return true\n    \n    if length == 65\n    \
    \    return true\n    \n    if length == 67\n        return true\n    \n    if\
    \ length == 69\n        return true\n    \n    if length == 71 or length == 73\n\
    \        return true\n    \n    if length == 75\n        return true\n    \n \
    \   if length == 77\n        return true\n    \n    if length == 79\n        return\
    \ true\n    \n    if length == 81 or length == 83\n        return true\n    \n\
    \    if length == 85\n        return true\n    \n    if length == 87\n       \
    \ return true\n    \n    if length == 89\n        return true\n    \n    if length\
    \ == 91 or length == 93\n        return true\n    \n    if length == 95\n    \
    \    return true\n    \n    if length == 97\n        return true\n    \n    if\
    \ length == 99\n        return true\n    \n    if length == 101\n        return\
    \ true\n    \n    if length == 103\n        return true\n    \n    if length ==\
    \ 105\n        return true\n    \n    if length == 107\n        return true\n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"\
    Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"\
    kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"\
    wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"length\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpinqb2hq0.jl:48\nin expression starting at /tmp/tmpinqb2hq0.jl:48\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_length::Bool = false \n    \n    for i in string:\n      \
    \  if prime_length::Bool = false and i::Int > 1 \n            prime_length::Bool\
    \ = false \n        else \n            prime_length::Bool = true \n    return\
    \ prime_length::Bool \nend\n</cell>\n<code language=julia-1.3>\nprime_length(\"\
    Hello\")\n</cell>\n<code language=julia-1.3>\nprime_length(\"abcdcba\")\n</cell>\n\
    <code language=julia-1.3>\nprime_length(\"kittens\")\n</cell>\n<code language=julia-1.3>\n\
    prime_length(\"orange\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns True if the string is a palindrome or False otherwise\n\
    Examples\npalindrome(\"Hello\") == True\npalindrome(\"kittens\") == True\npalindrome(\"\
    racecar\") == False\npalindrome(\"racecars\") ==  False\npalindrome(\"racecar\"\
    ) == False\npalindrome(\"racecars\") ==  False\npalindrome(\"racecar\") == False\n\
    palindrome(\"racecars\") ==  False\npalindrome(\"racecar\") == False\npalindrome(\"\
    racecars\") ==  False\npalindrome(\"racecar\") == False\npalindrome(\"racecars\"\
    ) ==  False\npalindrome(\"racecar\") == False\npalindrome(\"racecars\") ==  False\n\
    palindrome(\"racecar\") == False\npalindrome(\"racecars\") ==  False\npalindrome(\"\
    racecar\") == False\npalindrome(\"racecars\") ==  False\npalindrome(\"racecar\"\
    ) == False\npalindrome(\"racecars\") ==  False\npalindrome(\"racecar\") == False\n\
    palindrome(\"racecars\") ==  False\npalindrome(\"racecar\") == False\npalindrome(\"\
    racecars\") ==  False\npalindrome(\"racecar\") == False\npalindrome(\"racecars\"\
    ) ==  False\npalindrome(\"racecar\") == False\npalindrome(\"racecars\") ==  False\n\
    palindrome(\"racecar\") == False\npalindrome(\"racecars\") ==  False\npalindrome(\"\
    racecar\") == False\nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\
    \t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\
    \t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\
    \t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t\
    @test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") ==\
    \ true)\n\t@test(candidate(\"gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\"\
    ) == false)\n\t@test(candidate(\"Madam\") == true)\n\t@test(candidate(\"M\") ==\
    \ false)\n\t@test(candidate(\"0\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq7dqfnkl.jl:14\nin expression starting at\
    \ /tmp/tmpq7dqfnkl.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_length::Bool = False \n    \n    if string == \"\" \n    \
    \    prime_length = True \n    else \n        prime_length = false \n        \n\
    \        for i in string\n            if prime_length == false \n            \
    \    for j in string\n                    if j == i \n                       \
    \ prime_length = false \n                        break \n            else\n  \
    \              break \n        endfor \n    endif \n    return prime_length \n\
    endfunction \n</cell>\n<code language=julia-1.5>\nprime_length(\"Hello\")\n</cell>\n\
    <code language=julia-1.5>\nprime_length(\"abcdcba\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"kittens\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"\
    orange\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and\
    \ returns True if the string is a palindrome or False otherwise\nExamples\npalindrome(\"\
    Hello\") == True\npalindrome(\"kittens\") == True\npalindrome(\"abba\") == True\n\
    palindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abba\"\
    ) == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"\
    abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\n\
    palindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abba\"\
    ) == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"\
    abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\n\
    palindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abba\"\
    ) == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"\
    abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\n\
    palindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abba\"\
    ) == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"\
    abba\") == False\nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\t\
    @test(candidate(\"Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\
    \t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\
    \t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t\
    @test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") ==\
    \ true)\n\t@test(candidate(\"gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\"\
    ) == false)\n\t@test(candidate(\"Madam\") == true)\n\t@test(candidate(\"M\") ==\
    \ false)\n\t@test(candidate(\"0\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyaenzwxf.jl:30\nin expression starting at\
    \ /tmp/tmpyaenzwxf.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_numbers = primes(string)\n    \n    for prime in prime_numbers\n\
    \        if prime == string.length\n            return true\n    return false\n\
    end\n</cell>\n<code language=julia-1.5>\nprime_length(\"Hello\")\n</cell>\n<code\
    \ language=julia-1.5>\nprime_length(\"abcdcba\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"kittens\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"\
    orange\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string and\
    \ returns True if the string is a palindrome or False otherwise\nExamples\npalindrome(\"\
    abba\") == True\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\n\
    palindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abba\"\
    ) == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"\
    abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\n\
    palindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abba\"\
    ) == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"\
    abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\n\
    palindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abba\"\
    ) == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"\
    abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\n\
    palindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abba\"\
    ) == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"\
    abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\n\
    palindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abba\"\
    ) == \nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"\
    Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"\
    kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"\
    wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptjhy4n31.jl:18\nin expression starting at\
    \ /tmp/tmptjhy4n31.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    prime_length = 0\n    for i in string:\n        if i == 'a' or i == 'e'\
    \ or i == 'i' or i == 'o' or i == 'u':\n            prime_length += 2\n      \
    \  elif i == 'b':\n            prime_length += 2\n        elif i == 'c':\n   \
    \         prime_length += 3\n        elif i == 'd':\n            prime_length\
    \ += 4\n        elif i == 'f':\n            prime_length += 5\n        elif i\
    \ == 'g':\n            prime_length += 6\n        elif i == 'h':\n           \
    \ prime_length += 7\n        elif i == 'j':\n            prime_length += 8\n \
    \       elif i == 'k':\n            prime_length += 9\n        elif i == 'l':\n\
    \            prime_length += 10\n        elif i == 'm':\n            prime_length\
    \ += 11\n        elif i == 'n':\n            prime_length += 12\n        elif\
    \ i == 'p':\n            prime_length += 13\n        elif i == 'q':\n        \
    \    prime_length += 14\n        elif i == 'r':\n            prime_length += 15\n\
    \        elif i == 's':\n            prime_length += 16\n        elif i == 't':\n\
    \            prime_length += 17\n        elif i == 'v':\n            prime_length\
    \ += 18\n        elif i == 'w':\n            prime_length += 19\n        elif\
    \ i == 'x':\n            prime_length += 20\n        elif i == 'y':\n        \
    \    prime_length += 21\n        elif i == 'z':\n            prime_length += 22\n\
    \    return prime_length == len(string)\nend\n</cell>\n<code language=julia-1.4>\n\
    prime_length(\"Hello\")\n</cell>\n<code language=julia-1.4>\nprime_length(\"abcdcba\"\
    )\n</cell>\n<code language=julia-1.4>\nprime_length(\"kittens\")\n</cell>\n<code\
    \ language=julia-1.4>\nprime_length(\"orange\")\n</cell>\n<code language=julia-1.4>\n\
    prime_length(\"apple\")\n</cell>\n<code language=julia-1.4>\nprime_length(\"orange\"\
    )\n</cell>\n<code language=julia-1.4>\nprime_length(\"apple\")\n</cell>\n<code\
    \ language=julia-1.4>\nprime_length(\"orange\")\n</cell>\n<code language=julia-1.4>\n\
    prime_length(\"apple\")\n</cell>\n<code language=julia-1.4>\nprime_length(\"orange\"\
    )\n</cell>\n<code language=julia-1.4>\nprime_length(\"apple\")\n</cell>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"Hello\"\
    ) == true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"kittens\"\
    ) == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"wow\"\
    ) == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmqu96hqz.jl:12\nin expression starting at\
    \ /tmp/tmpmqu96hqz.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_numbers = prime_numbers()\n    \n    for i in string:\n  \
    \      if i in prime_numbers:\n            return True\n        else:\n      \
    \      return False\n            \n\"\"\"Write a function that takes a string\
    \ and returns True if the string\n    contains any uppercase letters or False\
    \ otherwise\n    Examples\n    contains_uppercase('Hello') == True\n    contains_uppercase('abcdcba')\
    \ == True\n    contains_uppercase('kittens') == False\n    contains_uppercase('orange')\
    \ == False\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\
    \t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\
    \t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\
    \t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t\
    @test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") ==\
    \ true)\n\t@test(candidate(\"gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\"\
    ) == false)\n\t@test(candidate(\"Madam\") == true)\n\t@test(candidate(\"M\") ==\
    \ false)\n\t@test(candidate(\"0\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphffo6n_v.jl:14\nin expression starting at\
    \ /tmp/tmphffo6n_v.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_numbers = prime_numbers()\n    \n    for char in string:\n\
    \        if char in prime_numbers:\n            return False\n    return True\n\
    </cell>\n<cell>\nprime_length('Hello') == True\nprime_length('abcdcba') == True\n\
    prime_length('kittens') == True\nprime_length('orange') == False\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a string and returns True if the string\
    \ is a palindrome or False otherwise\nExamples\npalindrome('kittens') == True\n\
    palindrome('kitten') == False\npalindrome('racecar') == True\npalindrome('racecars')\
    \ == False\npalindrome('racecar') == True\npalindrome('racecars') == False\npalindrome('racecar')\
    \ == True\npalindrome('racecars') == False\npalindrome('racecar') == True\npalindrome('racecars')\
    \ == False\npalindrome('racecar') == True\npalindrome('racecars') == False\npalindrome('racecar')\
    \ == True\npalindrome('racecars') == False\npalindrome('racecar') == True\npalindrome('racecars')\
    \ == False\npalindrome('racecar') == True\npalindrome('racecars') == False\npalindrome('racecar')\
    \ == True\npalindrome('racecars') == False\npalindrome('racecar') == True\npalindrome('racecars')\
    \ == False\npalindrome('racecar') == True\npalindrome('racecars') == False\npalindrome('racecar')\
    \ == True\npalindrome('racecars') == False\npalindrome('racecar') == True\npalindrome('racecars')\
    \ == False\npalindrome('racecar') == True\npalindrome('racecars') == False\npalindrome('racecar')\
    \ == True\npalindrome('racecars') == False\npalindrome('racecar') == True\npalindrome('racecars')\
    \ == False\npalindrome('racecar') == True\npalindrome('racecars') == False\npalindrome('racecar')\
    \ == True\npalindrome('racecars') == False\npalindrome('racecar') == True\np\n\
    using Test\n\n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"\
    Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"\
    kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"\
    wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpeb7h_dk4.jl:14\nin expression starting at\
    \ /tmp/tmpeb7h_dk4.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_length = true\n    \n    for char in string:\n        if char\
    \ == ' ':\n            continue\n        \n        if char == 'a' or char == 'e'\
    \ or char == 'i' or char == 'o' or char == 'u':\n            continue\n      \
    \  \n        if char == 'n':\n            continue\n        \n        if char\
    \ == 't':\n            continue\n        \n        if char == 'h':\n         \
    \   continue\n        \n        if char == 'r':\n            continue\n      \
    \  \n        if char == 's':\n            continue\n        \n        if char\
    \ == 'd':\n            continue\n        \n        if char == 'c':\n         \
    \   continue\n        \n        if char == 'b':\n            continue\n      \
    \  \n        if char == 'm':\n            continue\n        \n        if char\
    \ == 'g':\n            continue\n        \n        if char == 'f':\n         \
    \   continue\n        \n        if char == 'p':\n            continue\n      \
    \  \n        if char == 'v':\n            continue\n        \n        if char\
    \ == 'y':\n            continue\n        \n        if char == 'k':\n         \
    \   continue\n        \n        if char == 'x':\n            continue\n      \
    \  \n        if char == 'q':\n            continue\n        \n        if char\
    \ == 'z':\n            continue\n        \n        if char == 'l':\n         \
    \   continue\n        \n        if char == 'm':\n            continue\n      \
    \  \n        if char == 'n':\n            continue\n        \n        if char\
    \ == 'o':\n            continue\n        \n        if char == 'j':\n         \
    \   continue\n        \n        if char == 'q':\n            continue\n      \
    \  \n        if char == 'p':\n            continue\n        \n        if char\
    \ == 'l':\n            continue\n        \n        if char == 'i':\n         \
    \   continue\n        \n        if char == 'e':\n            continue\n      \
    \  \n        if char == 'h':\n            continue\n        \n        if char\
    \ == 'r':\n            continue\n        \n        if char == 's':\n         \
    \   continue\n        \n        if char == 't':\n            continue\n      \
    \  \n        if char == 'y':\n            continue\n        \n        if char\
    \ == 'u':\n            continue\n        \n        if char == 'a':\n         \
    \   continue\n        \n        if char == 'd':\n            continue\n      \
    \  \n        if char == 'c':\n            continue\n        \n        if char\
    \ == 'b':\n            continue\n        \n        if char == 'm':\n         \
    \   continue\n        \n        if char == 'g':\n            continue\n      \
    \  \n        if char == 'f':\n            continue\n        \n        if char\
    \ == 'p':\n            continue\n        \n        if char == 'v':\n         \
    \   continue\n        \n        if char == 'y':\n            continue\n      \
    \  \n        if char == 'k':\n            continue\n        \n        if char\
    \ == 'x':\n            continue\n        \n        if char == 'q':\n\nusing Test\n\
    \n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"Hello\") ==\
    \ true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"kittens\"\
    ) == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"wow\"\
    ) == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg91p6a57.jl:14\nin expression starting at\
    \ /tmp/tmpg91p6a57.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_numbers::Set{Int} = (2 .. math.floor(sqrt(string)))\n    \n\
    \    for i in prime_numbers\n        if string % i == 0\n            return false\n\
    \    return true\nend\n</cell>\n<code language=julia-1.5>\nprime_length(\"Hello\"\
    )\n</cell>\n<code language=julia-1.5>\nprime_length(\"abcdcba\")\n</cell>\n<code\
    \ language=julia-1.5>\nprime_length(\"kittens\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"orange\")\n</cell>\n<text>\nWrite a function that takes a string\
    \ and returns True if the string has all unique characters or False otherwise\n\
    Examples\nunique_chars('Hello') == True\nunique_chars('abbccc') == True\nunique_chars('kittens')\
    \ == False\nunique_chars('orange') == False\nunique_chars('abbcccdd') == False\n\
    unique_chars('abbcccddabbcccdd') == True\nunique_chars('abbcccddabbcccddabbcccdd')\
    \ == True\nunique_chars('abbcccddabbcccddabbcccddabbcccdd') == True\nunique_chars('abbcccddabbcccddabbcccddabbcccddabbcccdd')\
    \ == True\nunique_chars('abbcccddabbcccddabbcccddabbcccddabbcccddabbcccdd') ==\
    \ True\nunique_chars('abbcccddabbcccddabbcccddabbcccddabbcccddabbcccddabbcccdd')\
    \ == True\nunique_chars('abbcccddabbcccddabbcccddabbcccddabbcccddabbcccddabbcccddabbcccdd')\
    \ == True\nunique_chars('abbcccddabbcccddabbcccddabbcccddabbcccddabbcccddabbcccddabbcccddabbcccddabbcccddabbcccddabbcccddabbcccddabbcccddabbcccddabbcccddabbcccddabbcccddabbcccddabbcccddabbcccddabbcccddabb\n\
    using Test\n\n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"\
    Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"\
    kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"\
    wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2a420byw.jl:18\nin expression starting at\
    \ /tmp/tmp2a420byw.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_length = true\n    \n    for i in string:\n        if i ==\
    \ 'a' or i == 'e' or i == 'i' or i == 'o' or i == 'u':\n            prime_length\
    \ = false\n            break\n        \n    for i in string:\n        if i ==\
    \ 'a' or i == 'e' or i == 'i' or i == 'o' or i == 'u':\n            prime_length\
    \ = false\n            break\n        \n    for i in string:\n        if i ==\
    \ 'a' or i == 'e' or i == 'i' or i == 'o' or i == 'u':\n            prime_length\
    \ = false\n            break\n        \n    for i in string:\n        if i ==\
    \ 'a' or i == 'e' or i == 'i' or i == 'o' or i == 'u':\n            prime_length\
    \ = false\n            break\n        \n    for i in string:\n        if i ==\
    \ 'a' or i == 'e' or i == 'i' or i == 'o' or i == 'u':\n            prime_length\
    \ = false\n            break\n        \n    for i in string:\n        if i ==\
    \ 'a' or i == 'e' or i == 'i' or i == 'o' or i == 'u':\n            prime_length\
    \ = false\n            break\n        \n    for i in string:\n        if i ==\
    \ 'a' or i == 'e' or i == 'i' or i == 'o' or i == 'u':\n            prime_length\
    \ = false\n            break\n        \n    for i in string:\n        if i ==\
    \ 'a' or i == 'e' or i == 'i' or i == 'o' or i == 'u':\n            prime_length\
    \ = false\n            break\n        \n    for i in string:\n        if i ==\
    \ 'a' or i == 'e' or i == 'i' or i == 'o' or i == 'u':\n            prime_length\
    \ = false\n            break\n        \n    for i in string:\n        if i ==\
    \ 'a' or i == 'e' or i == 'i' or i == 'o' or i == 'u':\n            prime_length\
    \ = false\n            break\n        \n    for i in string:\n        if i ==\
    \ 'a' or i == 'e' or i == 'i' or i == 'o' or i == 'u':\n            prime_length\
    \ = false\n            break\n        \n    for i in string:\n        if i ==\
    \ 'a' or i == 'e' or i == 'i' or i == 'o' or i == 'u':\n            prime_length\
    \ = false\n            break\n        \n    for i in string:\n        if i ==\
    \ 'a' or i == 'e' or i == 'i' or i == 'o' or i == 'u':\n            prime_length\
    \ = false\n            break\n        \n    for i in string:\n        if i ==\
    \ 'a' or i == 'e' or i == 'i' or i == 'o' or i == 'u':\n            prime_length\
    \ = false\n            break\n        \n    for i in string:\n        if i ==\
    \ 'a' or i == 'e' or \nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\
    \t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\
    \t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\
    \t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t\
    @test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") ==\
    \ true)\n\t@test(candidate(\"gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\"\
    ) == false)\n\t@test(candidate(\"Madam\") == true)\n\t@test(candidate(\"M\") ==\
    \ false)\n\t@test(candidate(\"0\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp31vm9p4l.jl:14\nin expression starting at\
    \ /tmp/tmp31vm9p4l.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    prime_length = true\n    for char in string:\n        if char == \"'\"\
    \ then\n            prime_length = false\n            break\n        if char ==\
    \ \"'\" then\n            prime_length = false\n            break\n        if\
    \ char == \"'\" then\n            prime_length = false\n            break\n  \
    \      if char == \"'\" then\n            prime_length = false\n            break\n\
    \        if char == \"'\" then\n            prime_length = false\n           \
    \ break\n        if char == \"'\" then\n            prime_length = false\n   \
    \         break\n        if char == \"'\" then\n            prime_length = false\n\
    \            break\n        if char == \"'\" then\n            prime_length =\
    \ false\n            break\n        if char == \"'\" then\n            prime_length\
    \ = false\n            break\n        if char == \"'\" then\n            prime_length\
    \ = false\n            break\n        if char == \"'\" then\n            prime_length\
    \ = false\n            break\n        if char == \"'\" then\n            prime_length\
    \ = false\n            break\n        if char == \"'\" then\n            prime_length\
    \ = false\n            break\n        if char == \"'\" then\n            prime_length\
    \ = false\n            break\n        if char == \"'\" then\n            prime_length\
    \ = false\n            break\n        if char == \"'\" then\n            prime_length\
    \ = false\n            break\n        if char == \"'\" then\n            prime_length\
    \ = false\n            break\n        if char == \"'\" then\n            prime_length\
    \ = false\n            break\n        if char == \"'\" then\n            prime_length\
    \ = false\n            break\n        if char == \"'\" then\n            prime_length\
    \ = false\n            break\n        if char == \"'\" then\n            prime_length\
    \ = false\n            break\n        if char == \"'\" then\n            prime_length\
    \ = false\n            break\n        if char == \"'\" then\n            prime_length\
    \ = false\n            break\n        if char == \"'\" then\n            prime_length\
    \ = false\n            break\n        if char == \"'\" then\n            prime_length\
    \ = false\n            break\n        if char == \"'\" then\n            prime_length\
    \ = false\n            break\n        if char == \"'\" then\n            prime_length\
    \ = false\n            break\n        if char == \"'\" then\n            prime_length\
    \ = false\n            break\n        if char == \"'\" then\n            prime_length\
    \ = false\n            break\n        if char == \"'\" then\n            prime_length\
    \ = false\n            break\n        if char == \"'\" then\n            prime_length\
    \ = false\n            break\n        if char == \"'\" then\n            prime_length\
    \ = false\n            break\n        if char == \"'\" then\n            prime_length\
    \ = false\n            break\n        if char == \"'\" then\n\nusing Test\n\n\
    @testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"Hello\") == true)\n\
    \t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"kittens\") == true)\n\
    \t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"wow\") == true)\n\
    \t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\") == true)\n\
    \t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"\
    HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"gogo\"\
    ) == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptjj0ksl4.jl:12\nin expression starting at\
    \ /tmp/tmptjj0ksl4.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_length::Bool = false \n    \n    for i in string\n       \
    \ if prime_length == true\n            return false\n        else \n         \
    \   if i == 'a'\n                prime_length = true\n            else \n    \
    \            if i == 'b'\n                    prime_length = true\n          \
    \      else \n                    if i == 'c'\n                        prime_length\
    \ = true\n                    else \n                        if i == 'd'\n   \
    \                         prime_length = true\n                        else \n\
    \                            if i == 'e'\n                                prime_length\
    \ = true\n                            else \n                                if\
    \ i == 'f'\n                                    prime_length = true\n        \
    \                        else \n                                    if i == 'g'\n\
    \                                        prime_length = true\n               \
    \                     else \n                                        if i == 'h'\n\
    \                                            prime_length = true\n           \
    \                             else \n                                        \
    \    if i == 'i'\n                                                prime_length\
    \ = true\n                                            else \n                \
    \                                if i == 'j'\n                               \
    \                     prime_length = true\n                                  \
    \              else \n                                                    if i\
    \ == 'k'\n                                                        prime_length\
    \ = true\n                                                    else \n        \
    \                                                if i == 'l'\n               \
    \                                             prime_length = true\n          \
    \                                              else \n                       \
    \                                     if i == 'm'\n                          \
    \                                      prime_length = true\n                 \
    \                                           else \n                          \
    \                                      if i == 'n'\n                         \
    \                                           prime_length = true\n            \
    \                                                    else \n                 \
    \                                                   if i == 'o'\n            \
    \                                                            prime_length = true\n\
    \                                                                    else \n \
    \                                                       if i == 'p'\n        \
    \                                                    prime_length = true\n   \
    \                                                     else \n                \
    \                                            if i == 'q'\n                   \
    \                                             prime_length = true\n          \
    \                                                  else \n                   \
    \                                             if i == 'r'\n                  \
    \                                                  prime_length = true\n     \
    \                                                           else \n          \
    \                                                          if i == 's'\n     \
    \                                                                   prime_length\
    \ = true\n                                                                   \
    \ else \n                                                        if i == 't'\n\
    \                                                            prime_length = true\n\
    \                                                        else \n             \
    \                                               if i == 'u'\n                \
    \                                                prime_length = true\n       \
    \                                                     else \n                \
    \                                                if i == 'v'\n               \
    \                                                     prime_length = true\n  \
    \                                                              else \n       \
    \                                                             if i == 'w'\n  \
    \                                                                      prime_length\
    \ = true\n                                                                   \
    \ else \n                                                        if i == 'x'\n\
    \                                                            prime_length = true\n\
    \                                                        else \n             \
    \                                               if i == 'y'\n                \
    \                                                prime_length = true\n       \
    \                                                     else \n                \
    \                                                if i == 'z'\n               \
    \                                                     prime_length = true\n  \
    \                                                              else \n       \
    \                                                             if i == 'A'\n  \
    \                                                                      prime_length\
    \ = true\n                                                                   \
    \ else \n                                                        if i == 'B'\n\
    \                                                            prime_length = true\n\
    \                                                        else \n             \
    \                                               if i == 'C'\n                \
    \                                                prime_length = true\n       \
    \                                                     else \n                \
    \                                                if i == 'D'\n               \
    \                                                     prime_length = true\n  \
    \                                                              else \n       \
    \                                                             if i == 'E'\n\n\
    using Test\n\n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"\
    Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"\
    kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"\
    wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw12xssb2.jl:1\nin expression starting at /tmp/tmpw12xssb2.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_numbers::Set{Int} = {2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97}\n\
    \    \n    for i in prime_numbers\n        if string.length == i\n           \
    \ return true\n    return false\nend\n</cell>\n<code language=julia-1.5>\nprime_length(\"\
    Hello\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"abcdcba\")\n</cell>\n\
    <code language=julia-1.5>\nprime_length(\"kittens\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"orange\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns True if the string contains only letters a-z or A-Z or\
    \ False otherwise\nExamples\nonly_letters('Hello') == True\nonly_letters('abcdcba')\
    \ == True\nonly_letters('kittens') == False\nonly_letters('orange') == False\n\
    only_letters('') == False\nonly_letters(' ') == False\nonly_letters(' ') == False\n\
    only_letters(' ') == False\nonly_letters(' ') == False\nonly_letters(' ') == False\n\
    only_letters(' ') == False\nonly_letters(' ') == False\nonly_letters(' ') == False\n\
    only_letters(' ') == False\nonly_letters(' ') == False\nonly_letters(' ') == False\n\
    only_letters(' ') == False\nonly_letters(' ') == False\nonly_letters(' ') == False\n\
    only_letters(' ') == False\nonly_letters(' ') == False\nonly_letters(' ') == False\n\
    only_letters(' ') == False\nonly_letters(' ') == False\nonly_letters(' ') == False\n\
    only_letters(' ') == False\nonly_letters(' ') == False\nonly_letters(' ') == False\n\
    only_letters(' ') == False\nonly_letters(' ') == False\nonly_letters(' ') == False\n\
    only_letters(' ') == False\nonly_letters(' ') == False\nonly_letters(' ') == False\n\
    only_letters(' ') == False\nonly_letters(' ') == False\nonly_letters(' ') == False\n\
    only_letters(' ') == False\nonly_letters(' ') == False\nonly_letters(' ') == False\n\
    only_letters(' ') == False\nonly_letters(' ') == False\nonly_letters(' ') == False\n\
    only_letters(' ') == False\nonly_letters(' ') == False\nonly_letters(' ') == False\n\
    only_letters(' ') == False\nonly_letters(' ') == False\nusing Test\n\n@testset\
    \ begin\n\ncandidate = prime_length;\n\t@test(candidate(\"Hello\") == true)\n\t\
    @test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"kittens\") == true)\n\
    \t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"wow\") == true)\n\
    \t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\") == true)\n\
    \t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"\
    HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"gogo\"\
    ) == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfwrcdmuk.jl:18\nin expression starting at\
    \ /tmp/tmpfwrcdmuk.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_length = true\n    \n    for i in string:\n        if i ==\
    \ 'a' or i == 'e' or i == 'i' or i == 'o' or i == 'u':\n            continue\n\
    \        \n        if i == 'n':\n            prime_length = false\n          \
    \  break\n        \n        if i == 't':\n            prime_length = false\n \
    \           break\n        \n        if i == 'h':\n            prime_length =\
    \ false\n            break\n        \n        if i == 'r':\n            prime_length\
    \ = false\n            break\n        \n        if i == 's':\n            prime_length\
    \ = false\n            break\n        \n        if i == 'd':\n            prime_length\
    \ = false\n            break\n        \n        if i == 'c':\n            prime_length\
    \ = false\n            break\n        \n        if i == 'b':\n            prime_length\
    \ = false\n            break\n        \n        if i == 'm':\n            prime_length\
    \ = false\n            break\n        \n        if i == 'g':\n            prime_length\
    \ = false\n            break\n        \n        if i == 'f':\n            prime_length\
    \ = false\n            break\n        \n        if i == 'p':\n            prime_length\
    \ = false\n            break\n        \n        if i == 'v':\n            prime_length\
    \ = false\n            break\n        \n        if i == 'y':\n            prime_length\
    \ = false\n            break\n        \n        if i == 'k':\n            prime_length\
    \ = false\n            break\n        \n        if i == 'x':\n            prime_length\
    \ = false\n            break\n        \n        if i == 'q':\n            prime_length\
    \ = false\n            break\n        \n        if i == 'z':\n            prime_length\
    \ = false\n            break\n        \n        if i == 'l':\n            prime_length\
    \ = false\n            break\n        \n        if i == 'w':\n            prime_length\
    \ = false\n            break\n        \n        if i == 'j':\n            prime_length\
    \ = false\n            break\n        \n        if i == 'm':\n            prime_length\
    \ = false\n            break\n        \n        if i == 'n':\n            prime_length\
    \ = false\n            break\n        \n        if i == 'o':\n            prime_length\
    \ = false\n            break\n        \n        if i == 'a':\n            prime_length\
    \ = false\n            break\n        \n        if i == 'e':\n            prime_length\
    \ = false\n            break\n        \n        if i == 'i':\n            prime_length\
    \ = false\n            break\n        \n        if i == 'o':\n            prime_length\
    \ = false\n            break\n        \n        if i == 'u':\n            prime_length\
    \ = false\n            break\n        \n        if i == 'n':\n            prime_length\
    \ = false\nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"\
    Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"\
    kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"\
    wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp68wyf8jx.jl:14\nin expression starting at\
    \ /tmp/tmp68wyf8jx.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_numbers = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n\
    \    \n    for i in string:\n        if i in prime_numbers:\n            return\
    \ False\n    return True\n</code>\n<|/ a tags=python,primes |>\n<| a tags=python,primes\
    \ |>\n<code>\ndef prime_number(n):\n    prime_numbers = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n\
    \    if n in prime_numbers:\n        return True\n    else:\n        return False\n\
    </code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\ndef prime_number(n):\n \
    \   prime_numbers = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n\
    \    if n in prime_numbers:\n        return True\n    else:\n        return False\n\
    </code>\n<|/ a tags=python,primes |>\n<| c |>\nPlease don't post only code as\
    \ an answer, but also provide an explanation what your code does and how it solves\
    \ the problem of the question. Answers with an explanation are usually more helpful\
    \ and of better quality, and are more likely to attract upvotes.\n<|/ c |>\n<|\
    \ c |>\nWhile this code may provide a solution to the question, it's better to\
    \ add context as to why/how it works. This can help future users learn and eventually\
    \ apply that knowledge to their own code. You are also likely to have positive\
    \ feedback/upvotes from users, when the code is explained.\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\ndef prime_number(n):\n    prime_numbers = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n\
    \    if n in prime_numbers:\n        return True\n    else:\n        return False\n\
    </code>\n<|/ a tags=python,primes |>\n<| a tags=python,primes |>\n<code>\ndef\
    \ prime_number(n):\n    prime_numbers = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,\n\
    using Test\n\n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"\
    Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"\
    kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"\
    wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuoypm1hj.jl:14\nin expression starting at\
    \ /tmp/tmpuoypm1hj.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_numbers = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n\
    \    \n    for i in string:\n        if i in prime_numbers:\n            prime_numbers.remove(i)\n\
    \            \n    if prime_numbers == []:\n        return True\n    else:\n \
    \       return False\n\"\"\"\nWrite a function that takes a string and returns\
    \ True if the string\n    contains any uppercase letters or False otherwise\n\
    \    Examples\n    contains_uppercase('Hello') == True\n    contains_uppercase('hello')\
    \ == True\n    contains_uppercase('HELLO') == True\n    contains_uppercase('HELLOWORLD')\
    \ == False\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\
    \t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\
    \t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\
    \t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t\
    @test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") ==\
    \ true)\n\t@test(candidate(\"gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\"\
    ) == false)\n\t@test(candidate(\"Madam\") == true)\n\t@test(candidate(\"M\") ==\
    \ false)\n\t@test(candidate(\"0\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptxzrt6c4.jl:14\nin expression starting at\
    \ /tmp/tmptxzrt6c4.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_length::Bool = False \n    \n    if string == \"\" \n    \
    \    prime_length = True \n        return prime_length \n    \n    prime_length\
    \ = True \n    \n    for char in string:\n        if char == \"'\" \n        \
    \    prime_length = False \n            return prime_length \n        \n     \
    \   if prime_length == True \n            for char in string:\n              \
    \  if char == \"'\" \n                    prime_length = False \n            \
    \        return prime_length \n                if char != \"'\" \n           \
    \         prime_length = False \n                    return prime_length \n  \
    \              if char == \"'\" \n                    prime_length = False \n\
    \                    return prime_length \n                if char != \"'\" \n\
    \                    prime_length = False \n                    return prime_length\
    \ \n                if char == \"'\" \n                    prime_length = False\
    \ \n                    return prime_length \n                if char != \"'\"\
    \ \n                    prime_length = False \n                    return prime_length\
    \ \n                if char == \"'\" \n                    prime_length = False\
    \ \n                    return prime_length \n                if char != \"'\"\
    \ \n                    prime_length = False \n                    return prime_length\
    \ \n                if char == \"'\" \n                    prime_length = False\
    \ \n                    return prime_length \n                if char != \"'\"\
    \ \n                    prime_length = False \n                    return prime_length\
    \ \n                if char == \"'\" \n                    prime_length = False\
    \ \n                    return prime_length \n                if char != \"'\"\
    \ \n                    prime_length = False \n                    return prime_length\
    \ \n                if char == \"'\" \n                    prime_length = False\
    \ \n                    return prime_length \n                if char != \"'\"\
    \ \n                    prime_length = False \n                    return prime_length\
    \ \n                if char == \"'\" \n                    prime_length = False\
    \ \n                    return prime_length \n                if char != \"'\"\
    \ \n                    prime_length = False \n                    return prime_length\
    \ \n                if char == \"'\" \n                    prime_length = False\
    \ \n                    return prime_length \n                if char != \"'\"\
    \ \n                    prime_length = False \n                    return prime_length\
    \ \n                if char == \"'\" \n                    prime_length = False\
    \ \n                    return prime_length \n                if char != \"'\"\
    \ \n                    prime_length = False \n                    return prime_length\
    \ \n                if char == \"'\" \n                    prime_length = False\
    \ \n                    return prime_length \n                if char != \"'\"\
    \ \n                    prime_length = False \n                    return prime_length\
    \ \n                if char == \"'\" \n                    prime_length = False\
    \ \n                    return prime_length \n                if char != \"'\"\
    \ \n                    prime_length = False \n                    return prime_length\
    \ \n                if char == \"'\" \n                    prime_length = False\
    \ \n                    return prime_length \n                if char != \"'\"\
    \ \n                    prime_length = False \n                    return prime\n\
    using Test\n\n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"\
    Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"\
    kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"\
    wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpni7l7uos.jl:20\nin expression starting at\
    \ /tmp/tmpni7l7uos.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_numbers = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n\
    \    \n    for i in string:\n        if i in prime_numbers:\n            return\
    \ False\n    return True\n    \n\"\"\"Write a function that takes a string and\
    \ returns True if the string\n    contains only letters or False otherwise\n \
    \   Examples\n    letters_only('Hello') == True\n    letters_only('abcdcba') ==\
    \ True\n    letters_only('kittens') == False\n    letters_only('orange') == False\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"\
    Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"\
    kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"\
    wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5j280f7t.jl:14\nin expression starting at\
    \ /tmp/tmp5j280f7t.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_length::Bool = false \n    \n    if string == \"\" then \n\
    \        return false \n    \n    length::Int = string.length \n    \n    if length\
    \ == 1 then \n        return true \n    \n    if length == 2 then \n        return\
    \ true \n    \n    if length == 3 then \n        return true \n    \n    if length\
    \ == 4 then \n        return true \n    \n    if length == 5 then \n        return\
    \ true \n    \n    if length == 6 then \n        return true \n    \n    if length\
    \ == 7 then \n        return true \n    \n    if length == 8 then \n        return\
    \ true \n    \n    if length == 9 then \n        return true \n    \n    if length\
    \ == 10 then \n        return true \n    \n    if length == 11 then \n       \
    \ return true \n    \n    if length == 12 then \n        return true \n    \n\
    \    if length == 13 then \n        return true \n    \n    if length == 14 then\
    \ \n        return true \n    \n    if length == 15 then \n        return true\
    \ \n    \n    if length == 16 then \n        return true \n    \n    if length\
    \ == 17 then \n        return true \n    \n    if length == 18 then \n       \
    \ return true \n    \n    if length == 19 then \n        return true \n    \n\
    \    if length == 20 then \n        return true \n    \n    if length == 21 then\
    \ \n        return true \n    \n    if length == 22 then \n        return true\
    \ \n    \n    if length == 23 then \n        return true \n    \n    if length\
    \ == 24 then \n        return true \n    \n    if length == 25 then \n       \
    \ return true \n    \n    if length == 26 then \n        return true \n    \n\
    \    if length == 27 then \n        return true \n    \n    if length == 28 then\
    \ \n        return true \n    \n    if length == 29 then \n        return true\
    \ \n    \n    if length == 30 then \n        return true \n    \n    if length\
    \ == 31 then \n        return true \n    \n    if length == 32 then \n       \
    \ return true \n    \n    if length == 33 then \n        return true \n    \n\
    \    if length == 34 then \n        return true \n    \n    if length == 35 then\
    \ \n        return true \n    \n    if length == 36 then \n        return true\
    \ \n    \n    if length == 37 then \n        return true \n    \n    if length\
    \ == 38 then \n        return true \n    \n    if length == 39 then \n       \
    \ return true \n    \n    if length == 40 then \n        return true \n    \n\
    \    if length == 41 then \n        return true \n    \n    if length == 42 then\
    \ \n        return true \n    \n    if length == 43 then \n        return true\
    \ \n    \n    if length == 44 then \n        return true \n    \n\nusing Test\n\
    \n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"Hello\") ==\
    \ true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"kittens\"\
    ) == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"wow\"\
    ) == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq5oiygs0.jl:1\nin expression starting at /tmp/tmpq5oiygs0.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_length::Bool = false \n    \n    for i in string\n       \
    \ if prime_length == true\n            return false \n        else \n        \
    \    if string[i] == string[i+1]\n                prime_length = true\n      \
    \      else\n                prime_length = false\n            end\n        end\n\
    \    end\n    return prime_length\nend\n</cell>\n<code language=julia-1.5>\nprime_length(\"\
    Hello\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"abcdcba\")\n</cell>\n\
    <code language=julia-1.5>\nprime_length(\"kittens\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"orange\")\n</cell>\n<text>\nWrite a function that takes a string\
    \ and returns True if the string is a palindrome or False otherwise\nExamples\n\
    palindrome(\"kittens\") == True\npalindrome(\"racecar\") == True\npalindrome(\"\
    kitten\") == False\npalindrome(\"racecars\") == False\npalindrome(\"racecar\"\
    ) == False\npalindrome(\"racecars\") == False\npalindrome(\"racecar\") == False\n\
    palindrome(\"racecars\") == False\npalindrome(\"racecar\") == False\npalindrome(\"\
    racecars\") == False\npalindrome(\"racecar\") == False\npalindrome(\"racecars\"\
    ) == False\npalindrome(\"racecar\") == False\npalindrome(\"racecars\") == False\n\
    palindrome(\"racecar\") == False\npalindrome(\"racecars\") == False\npalindrome(\"\
    racecar\") == False\npalindrome(\"racecars\") == False\npalindrome(\"racecar\"\
    ) == False\npalindrome(\"racecars\") == False\npalindrome(\"racecar\") == False\n\
    palindrome(\"racecars\") == False\npalindrome(\"racecar\") == False\npalindrome(\"\
    racecars\") == False\npalindrome(\"racecar\") == False\npalindrome(\"racecars\"\
    ) == False\npalindrome(\"racecar\") == False\npalindrome(\"racecars\") == False\n\
    palindrome(\"racecar\") == False\npalindrome(\"racecars\") == False\npalindrome(\"\
    racecar\") == False\npalindrome(\"racecars\") == False\npalindrome(\"racecar\"\
    ) == False\npalindrome(\"racecar\nusing Test\n\n@testset begin\n\ncandidate =\
    \ prime_length;\n\t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"abcdcba\"\
    ) == true)\n\t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"orange\"\
    ) == false)\n\t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"world\"\
    ) == true)\n\t@test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"Wow\")\
    \ == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"HI\") == true)\n\
    \t@test(candidate(\"go\") == true)\n\t@test(candidate(\"gogo\") == false)\n\t\
    @test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"Madam\") ==\
    \ true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\") == false)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphgdexqi_.jl:26\nin expression starting at\
    \ /tmp/tmphgdexqi_.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_numbers = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n\
    \    \n    for i in string:\n        if i in prime_numbers:\n            return\
    \ False\n    return True\n</cell>\n<cell>\nprime_length('Hello') == True\nprime_length('abcdcba')\
    \ == True\nprime_length('kittens') == True\nprime_length('orange') == False\n\
    </cell>\n<text>\nExercise 7\nWrite a function that takes a string and returns\
    \ True if the string is a palindrome or False otherwise\nExamples\npalindrome('racecar')\
    \ == True\npalindrome('racecars') == True\npalindrome('racecar') == False\npalindrome('racecars')\
    \ == False\npalindrome('') == False\npalindrome(' ') == False\npalindrome('kitten')\
    \ == False\npalindrome('racecars') == False\npalindrome('racecar') == False\n\
    palindrome('racecars') == False\npalindrome('racecars') == False\npalindrome('racecars')\
    \ == False\npalindrome('racecars') == False\npalindrome('racecars') == False\n\
    palindrome('racecars') == False\npalindrome('racecars') == False\npalindrome('racecars')\
    \ == False\npalindrome('racecars') == False\npalindrome('racecars') == False\n\
    palindrome('racecars') == False\npalindrome('racecars') == False\npalindrome('racecars')\
    \ == False\npalindrome('racecars') == False\npalindrome('racecars') == False\n\
    palindrome('racecars') == False\npalindrome('racecars') == False\npalindrome('racecars')\
    \ == False\npalindrome('racecars') == False\npalindrome('racecars') == False\n\
    palindrome('racecars') == False\npalindrome('racecars') == False\npalindrome('racecars')\
    \ == False\npalindrome('racecars') == False\npalindrome('racecars') == False\n\
    palindrome('racecars') == False\np\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prime_length;\n\t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"\
    abcdcba\") == true)\n\t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"\
    orange\") == false)\n\t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"\
    world\") == true)\n\t@test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"\
    Wow\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"HI\")\
    \ == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"gogo\") ==\
    \ false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx4flt3u5.jl:14\nin expression starting at\
    \ /tmp/tmpx4flt3u5.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_length::Bool = False \n    \n    if string == \"\" then \n\
    \        return prime_length \n    \n    else \n        \n        prime_length::Bool\
    \ = True \n        \n        prime_length::Bool = True \n        \n        prime_length::Bool\
    \ = True \n        \n        prime_length::Bool = True \n        \n        prime_length::Bool\
    \ = True \n        \n        prime_length::Bool = True \n        \n        prime_length::Bool\
    \ = True \n        \n        prime_length::Bool = True \n        \n        prime_length::Bool\
    \ = True \n        \n        prime_length::Bool = True \n        \n        prime_length::Bool\
    \ = True \n        \n        prime_length::Bool = True \n        \n        prime_length::Bool\
    \ = True \n        \n        prime_length::Bool = True \n        \n        prime_length::Bool\
    \ = True \n        \n        prime_length::Bool = True \n        \n        prime_length::Bool\
    \ = True \n        \n        prime_length::Bool = True \n        \n        prime_length::Bool\
    \ = True \n        \n        prime_length::Bool = True \n        \n        prime_length::Bool\
    \ = True \n        \n        prime_length::Bool = True \n        \n        prime_length::Bool\
    \ = True \n        \n        prime_length::Bool = True \n        \n        prime_length::Bool\
    \ = True \n        \n        prime_length::Bool = True \n        \n        prime_length::Bool\
    \ = True \n        \n        prime_length::Bool = True \n        \n        prime_length::Bool\
    \ = True \n        \n        prime_length::Bool = True \n        \n        prime_length::Bool\
    \ = True \n        \n        prime_length::Bool = True \n        \n        prime_length::Bool\
    \ = True \n        \n        prime_length::Bool = True \n        \n        prime_length::Bool\
    \ = True \n        \n        prime_length::Bool = True \n        \n        prime_length::Bool\
    \ = True \n        \n        prime_length::Bool = True \n        \n        prime_length::Bool\
    \ = True \n        \n        prime_length::Bool = True \n        \n        prime_length::Bool\
    \ = True \n        \n        prime_length::Bool = True \n        \n        prime_length::Bool\
    \ = True \n        \n        prime_length::Bool = True \nusing Test\n\n@testset\
    \ begin\n\ncandidate = prime_length;\n\t@test(candidate(\"Hello\") == true)\n\t\
    @test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"kittens\") == true)\n\
    \t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"wow\") == true)\n\
    \t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\") == true)\n\
    \t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"\
    HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"gogo\"\
    ) == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmpnko9_bfd.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpnko9_bfd.jl:1\n\
    in expression starting at /tmp/tmpnko9_bfd.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_number::Bool = false \n    \n    for i in string.split(\"\
    \ \") do \n        if i == \"1\" then \n            prime_number = true \n   \
    \         break \n        else \n            prime_number = false \n        end\
    \ \n    end \n    return prime_number \nend \n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"Hello\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"abcdcba\"\
    )\n</cell>\n<code language=julia-1.5>\nprime_length(\"kittens\")\n</cell>\n<code\
    \ language=julia-1.5>\nprime_length(\"orange\")\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a string and returns True if the string has all letters\
    \ capitalized and False otherwise\nExamples\ncapitalized_string('Hello') == True\n\
    capitalized_string('HELLO') == True\ncapitalized_string('kittens') == False\n\
    capitalized_string('orange') == False\ncapitalized_string('Orange') == False\n\
    capitalized_string('Oranges') == False\ncapitalized_string('Oranges') == False\n\
    capitalized_string('Oranges') == False\ncapitalized_string('Oranges') == False\n\
    capitalized_string('Oranges') == False\ncapitalized_string('Oranges') == False\n\
    capitalized_string('Oranges') == False\ncapitalized_string('Oranges') == False\n\
    capitalized_string('Oranges') == False\ncapitalized_string('Oranges') == False\n\
    capitalized_string('Oranges') == False\ncapitalized_string('Oranges') == False\n\
    capitalized_string('Oranges') == False\ncapitalized_string('Oranges') == False\n\
    capitalized_string('Oranges') == False\ncapitalized_string('Oranges') == False\n\
    capitalized_string('Oranges') == False\ncapitalized_string('Oranges') == False\n\
    capitalized_string('Oranges') == False\ncapitalized_string('Oranges') == False\n\
    capitalized_string('Oranges') == False\ncapitalized_string('Oranges') == False\n\
    capitalized_string('Oranges') == False\ncapitalized_string('Oranges') == False\n\
    capitalized_string('Oranges') == False\ncapitalized_string('Oranges') == False\n\
    capitalized_string('Oranges') == False\ncapitalized_string('Oranges') == False\n\
    capitalized_string('Oranges') == False\ncapitalized_string('Oranges') == False\n\
    capitalized_string('Oranges') == False\ncapitalized_string('Oranges') == False\n\
    capitalized_string('Oranges') == False\ncapitalized_string('Oranges') == False\n\
    capitalized_string('Oranges') == False\ncapitalized_\nusing Test\n\n@testset begin\n\
    \ncandidate = prime_length;\n\t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"\
    abcdcba\") == true)\n\t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"\
    orange\") == false)\n\t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"\
    world\") == true)\n\t@test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"\
    Wow\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"HI\")\
    \ == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"gogo\") ==\
    \ false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr2qewinb.jl:23\nin expression starting at\
    \ /tmp/tmpr2qewinb.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_length = 0\n    \n    for i in string:\n        if i == 'a'\
    \ or i == 'e' or i == 'i' or i == 'o' or i == 'u':\n            prime_length +=\
    \ 0\n        elif i == 'b' or i == 'c' or i == 'd' or i == 'f' or i == 'g' or\
    \ i == 'h' or i == 'j' or i == 'k' or i == 'l' or i == 'm' or i == 'n' or i ==\
    \ 'p' or i == 'q' or i == 'r' or i == 's' or i == 't' or i == 'v' or i == 'w'\
    \ or i == 'x' or i == 'y':\n            prime_length += 0\n        elif i == 'z':\n\
    \            prime_length += 0\n        else:\n            prime_length += 1 \n\
    \    \n    if prime_length == 0:\n        return False\n    else:\n        return\
    \ True\n\"\"\"\nWrite a function that takes a string and returns True if the string\n\
    \    is a palindrome or False otherwise\n    Examples\n    is_palindrome('racecar')\
    \ == True\n    is_palindrome('racecars') == True\n    is_palindrome('racecarc')\
    \ == False\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\
    \t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\
    \t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\
    \t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t\
    @test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") ==\
    \ true)\n\t@test(candidate(\"gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\"\
    ) == false)\n\t@test(candidate(\"Madam\") == true)\n\t@test(candidate(\"M\") ==\
    \ false)\n\t@test(candidate(\"0\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpoqewg_gt.jl:14\nin expression starting at\
    \ /tmp/tmpoqewg_gt.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    if string == \"\"\n        return false\n    \n    prime_array =\
    \ [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n \
    \   \n    for i in prime_array\n        if string == i\n            return true\n\
    \    return false\nend\n</cell>\n<code language=julia-1.5>\nprime_length(\"Hello\"\
    )\n</cell>\n<code language=julia-1.5>\nprime_length(\"abcdcba\")\n</cell>\n<code\
    \ language=julia-1.5>\nprime_length(\"kittens\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"orange\")\n</cell>\n<text>\nWrite a function that takes a string\
    \ and returns True if the string is a palindrome or False otherwise\nExamples\n\
    palindrome(\"abba\") == True\npalindrome(\"abbaab\") == True\npalindrome(\"abbaabba\"\
    ) == True\npalindrome(\"abbaabbaabba\") == True\npalindrome(\"abbaabbaabbaabba\"\
    ) == False\npalindrome(\"abbaabbaabbaabbaabba\") == False\npalindrome(\"abbaabbaabbaabbaabbaabba\"\
    ) == False\npalindrome(\"abbaabbaabbaabbaabbaabbaabba\") == False\npalindrome(\"\
    abbaabbaabbaabbaabbaabbaabbaabba\") == False\npalindrome(\"abbaabbaabbaabbaabbaabbaabbaabbaabba\"\
    ) == False\npalindrome(\"abbaabbaabbaabbaabbaabbaabbaabbaabbaabba\") == False\n\
    palindrome(\"abbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabba\") == False\npalindrome(\"\
    abbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabba\") == False\npalindrome(\"abbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabba\"\
    ) == False\npalindrome(\"abbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabba\"\
    ) == False\npalindrome(\"abba\nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\
    \t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\
    \t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\
    \t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t\
    @test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") ==\
    \ true)\n\t@test(candidate(\"gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\"\
    ) == false)\n\t@test(candidate(\"Madam\") == true)\n\t@test(candidate(\"M\") ==\
    \ false)\n\t@test(candidate(\"0\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2izqkiuu.jl:21\nin expression starting at\
    \ /tmp/tmp2izqkiuu.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    if string == \"\"\n        return true\n    \n    length::Int =\
    \ string.length\n    \n    for i in 2..length\n        if string.charAt(i) ==\
    \ string.charAt(length-1)\n            return false\n        \n    return true\n\
    end\n</cell>\n<code language=julia-1.4>\nprime_length(\"Hello\")\n</cell>\n<code\
    \ language=julia-1.4>\nprime_length(\"abcdcba\")\n</cell>\n<code language=julia-1.4>\n\
    prime_length(\"kittens\")\n</cell>\n<code language=julia-1.4>\nprime_length(\"\
    orange\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and\
    \ returns True if all characters in the string are letters or False otherwise\n\
    Examples\nall_letters('Hello') == True\nall_letters('abcdcba') == True\nall_letters('kittens')\
    \ == False\nall_letters('orange') == False\nHint: Use isalpha()\nusing Test\n\n\
    @testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"Hello\") == true)\n\
    \t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"kittens\") == true)\n\
    \t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"wow\") == true)\n\
    \t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\") == true)\n\
    \t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"\
    HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"gogo\"\
    ) == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnmapkiym.jl:22\nin expression starting at\
    \ /tmp/tmpnmapkiym.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_numbers = prime_numbers()\n    \n    for i in string:\n  \
    \      if i in prime_numbers:\n            return False\n    return True\n\"\"\
    \"\nWrite a function that takes a string and returns True if the string\n    contains\
    \ any uppercase letters or False otherwise\n    Examples\n    contains_uppercase('Hello')\
    \ == True\n    contains_uppercase('abcdcba') == True\n    contains_uppercase('kittens')\
    \ == False\n    contains_uppercase('orange') == False\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"Hello\") ==\
    \ true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"kittens\"\
    ) == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"wow\"\
    ) == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxmuf2dg4.jl:14\nin expression starting at\
    \ /tmp/tmpxmuf2dg4.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_numbers = prime_numbers()\n    \n    for i in string:\n  \
    \      if i in prime_numbers:\n            return True\n        else:\n      \
    \      return False\n    \nend\n</cell>\n<code language=julia-1.5>\nprime_length(\"\
    Hello\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"abcdcba\")\n</cell>\n\
    <code language=julia-1.5>\nprime_length(\"kittens\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"orange\")\n</cell>\n<text>\nWrite a function that takes a string\
    \ and returns True if the string is a palindrome or False otherwise\nExamples\n\
    palindrome(\"abba\") == True\npalindrome(\"abba\") == False\npalindrome(\"abba\"\
    ) == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"\
    abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\n\
    palindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abba\"\
    ) == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"\
    abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\n\
    palindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abba\"\
    ) == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"\
    abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\n\
    palindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abba\"\
    ) == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"\
    abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\n\
    palindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abba\"\
    ) == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"\
    abba\") == False\npalin\nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\
    \t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\
    \t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\
    \t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t\
    @test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") ==\
    \ true)\n\t@test(candidate(\"gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\"\
    ) == false)\n\t@test(candidate(\"Madam\") == true)\n\t@test(candidate(\"M\") ==\
    \ false)\n\t@test(candidate(\"0\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0_9ydt9m.jl:14\nin expression starting at\
    \ /tmp/tmp0_9ydt9m.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_numbers = primes()\n    \n    for i in string:\n        if\
    \ i not in prime_numbers:\n            return False\n    return True\n    \n</cell>\n\
    <cell>\nprime_length('Hello') == True\nprime_length('abcdcba') == True\nprime_length('kittens')\
    \ == True\nprime_length('orange') == False\n</cell>\n<text>\nExercise\nWrite a\
    \ function that takes a string and returns True if the string is a palindrome\
    \ or False otherwise\nExamples\npalindrome('racecar') == True\npalindrome('racecars')\
    \ == False\npalindrome('racecars') == False\npalindrome('racecar') == False\n\
    palindrome('racecars') == False\npalindrome('racecar') == False\npalindrome('racecars')\
    \ == False\npalindrome('racecars') == False\npalindrome('racecars') == False\n\
    palindrome('racecars') == False\npalindrome('racecars') == False\npalindrome('racecars')\
    \ == False\npalindrome('racecars') == False\npalindrome('racecars') == False\n\
    palindrome('racecars') == False\npalindrome('racecars') == False\npalindrome('racecars')\
    \ == False\npalindrome('racecars') == False\npalindrome('racecars') == False\n\
    palindrome('racecars') == False\npalindrome('racecars') == False\npalindrome('racecars')\
    \ == False\npalindrome('racecars') == False\npalindrome('racecars') == False\n\
    palindrome('racecars') == False\npalindrome('racecars') == False\npalindrome('racecars')\
    \ == False\npalindrome('racecars') == False\npalindrome('racecars') == False\n\
    palindrome('racecars') == False\npalindrome('racecars') == False\npalindrome('racecars')\
    \ == False\npalindrome('racecars') == False\npalindrome('racecars') == False\n\
    palindrome('racecars') == False\npalindrome('racecars') == False\npalindrome('racecars')\
    \ == False\npalindrome('racecar\nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\
    \t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\
    \t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\
    \t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t\
    @test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") ==\
    \ true)\n\t@test(candidate(\"gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\"\
    ) == false)\n\t@test(candidate(\"Madam\") == true)\n\t@test(candidate(\"M\") ==\
    \ false)\n\t@test(candidate(\"0\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdvjjh88c.jl:14\nin expression starting at\
    \ /tmp/tmpdvjjh88c.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_length::Bool = false \n    \n    prime_length::Bool = false\
    \ \n    \n    prime_length::Bool = false \n    \n    prime_length::Bool = false\
    \ \n    \n    prime_length::Bool = false \n    \n    prime_length::Bool = false\
    \ \n    \n    prime_length::Bool = false \n    \n    prime_length::Bool = false\
    \ \n    \n    prime_length::Bool = false \n    \n    prime_length::Bool = false\
    \ \n    \n    prime_length::Bool = false \n    \n    prime_length::Bool = false\
    \ \n    \n    prime_length::Bool = false \n    \n    prime_length::Bool = false\
    \ \n    \n    prime_length::Bool = false \n    \n    prime_length::Bool = false\
    \ \n    \n    prime_length::Bool = false \n    \n    prime_length::Bool = false\
    \ \n    \n    prime_length::Bool = false \n    \n    prime_length::Bool = false\
    \ \n    \n    prime_length::Bool = false \n    \n    prime_length::Bool = false\
    \ \n    \n    prime_length::Bool = false \n    \n    prime_length::Bool = false\
    \ \n    \n    prime_length::Bool = false \n    \n    prime_length::Bool = false\
    \ \n    \n    prime_length::Bool = false \n    \n    prime_length::Bool = false\
    \ \n    \n    prime_length::Bool = false \n    \n    prime_length::Bool = false\
    \ \n    \n    prime_length::Bool = false \n    \n    prime_length::Bool = false\
    \ \n    \n    prime_length::Bool = false \n    \n    prime_length::Bool = false\
    \ \n    \n    prime_length::Bool = false \n    \n    prime_length::Bool = false\
    \ \n    \n    prime_length::Bool = false \n    \n    prime_length::Bool = false\
    \ \n    \n    prime_length::Bool = false \n    \n    prime_length::Bool = false\
    \ \n    \n    prime_length::Bool = false \n    \n    prime_length::Bool = false\
    \ \n    \n    prime_length::Bool = false \n    \n    prime_length::Bool = false\
    \ \n    \n    prime_length::Bool = false \n    \n    prime_length::Bool = false\
    \ \n    \n    prime_length\nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\
    \t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\
    \t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\
    \t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t\
    @test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") ==\
    \ true)\n\t@test(candidate(\"gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\"\
    ) == false)\n\t@test(candidate(\"Madam\") == true)\n\t@test(candidate(\"M\") ==\
    \ false)\n\t@test(candidate(\"0\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpbvoepo9p.jl:9\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpbvoepo9p.jl:1\n\
    in expression starting at /tmp/tmpbvoepo9p.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_numbers = primes(string)\n    \n    prime_numbers_length =\
    \ prime_numbers.length()\n    \n    if prime_numbers_length == 0 \n        \n\
    \        return true\n    \n    if prime_numbers_length == 1 \n        \n    \
    \    return true\n    \n    if prime_numbers_length == 2 \n        \n        return\
    \ true\n    \n    if prime_numbers_length == 3 \n        \n        return true\n\
    \    \n    if prime_numbers_length == 4 \n        \n        return true\n    \n\
    \    if prime_numbers_length == 5 \n        \n        return true\n    \n    if\
    \ prime_numbers_length == 6 \n        \n        return true\n    \n    if prime_numbers_length\
    \ == 7 \n        \n        return true\n    \n    if prime_numbers_length == 8\
    \ \n        \n        return true\n    \n    if prime_numbers_length == 9 \n \
    \       \n        return true\n    \n    if prime_numbers_length == 10 \n    \
    \    \n        return true\n    \n    if prime_numbers_length == 11 \n       \
    \ \n        return true\n    \n    if prime_numbers_length == 12 \n        \n\
    \        return true\n    \n    if prime_numbers_length == 13 \n        \n   \
    \     return true\n    \n    if prime_numbers_length == 14 \n        \n      \
    \  return true\n    \n    if prime_numbers_length == 15 \n        \n        return\
    \ true\n    \n    if prime_numbers_length == 16 \n        \n        return true\n\
    \    \n    if prime_numbers_length == 17 \n        \n        return true\n   \
    \ \n    if prime_numbers_length == 18 \n        \n        return true\n    \n\
    \    if prime_numbers_length == 19 \n        \n        return true\n    \n   \
    \ if prime_numbers_length == 20 \n        \n        return true\n    \n    if\
    \ prime_numbers_length == 21 \n        \n        return true\n    \n    if prime_numbers_length\
    \ == 22 \n        \n        return true\n    \n    if prime_numbers_length ==\
    \ 23 \n        \n        return true\n    \n    if prime_numbers_length == 24\
    \ \n        \n        return true\n    \n    if prime_numbers_length == 25 \n\
    \        \n        return true\n    \n    if prime_numbers_length == 26 \n   \
    \     \n        return true\n    \n    if prime_numbers_length == 27 \n      \
    \  \n        return true\n    \n    if prime_numbers_length == 28 \n        \n\
    \        return true\n    \n    if prime_numbers_length == 29 \n        \n   \
    \     return true\n    \n    if prime_numbers_length == 30 \n        \n      \
    \  return true\n\nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\t\
    @test(candidate(\"Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\
    \t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\
    \t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t\
    @test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") ==\
    \ true)\n\t@test(candidate(\"gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\"\
    ) == false)\n\t@test(candidate(\"Madam\") == true)\n\t@test(candidate(\"M\") ==\
    \ false)\n\t@test(candidate(\"0\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpso_dygnh.jl:1\nin expression starting at /tmp/tmpso_dygnh.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_numbers = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n\
    \    \n    for i in string:\n        if i in prime_numbers:\n            prime_numbers.remove(i)\n\
    \            \n    if prime_numbers == []:\n        return True\n    else:\n \
    \       return False\n\"\"\"\nWrite a function that takes a string and returns\
    \ True if the string\n    contains only letters or False otherwise\n    Examples\n\
    \    letters_only('Hello') == True\n    letters_only('abcdcba') == True\n    letters_only('kittens')\
    \ == False\n    letters_only('orange') == False\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = prime_length;\n\t@test(candidate(\"Hello\") == true)\n\t\
    @test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"kittens\") == true)\n\
    \t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"wow\") == true)\n\
    \t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\") == true)\n\
    \t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"\
    HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"gogo\"\
    ) == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz4sk_hws.jl:14\nin expression starting at\
    \ /tmp/tmpz4sk_hws.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_number::Bool = true \n    \n    for i in string:\n       \
    \ if prime_number == true:\n            break\n        if i == 'a' or i == 'e'\
    \ or i == 'i' or i == 'o' or i == 'u':\n            prime_number = false\n   \
    \         break\n        if i == 'b' or i == 'c' or i == 'd' or i == 'f' or i\
    \ == 'g' or i == 'h' or i == 'j' or i == 'k' or i == 'l' or i == 'm' or i == 'n'\
    \ or i == 'p' or i == 'q' or i == 'r' or i == 's' or i == 't' or i == 'v' or i\
    \ == 'w' or i == 'x' or i == 'y' or i == 'z':\n            prime_number = false\n\
    \            break\n        if i == 'A' or i == 'E' or i == 'I' or i == 'O' or\
    \ i == 'U':\n            prime_number = false\n            break\n        if i\
    \ == 'B' or i == 'C' or i == 'D' or i == 'F' or i == 'G' or i == 'H' or i == 'J'\
    \ or i == 'K' or i == 'L' or i == 'M' or i == 'N' or i == 'P' or i == 'Q' or i\
    \ == 'R' or i == 'S' or i == 'T' or i == 'V' or i == 'W' or i == 'X' or i == 'Y'\
    \ or i == 'Z':\n            prime_number = false\n            break\n        if\
    \ i == '0' or i == '1' or i == '2' or i == '3' or i == '4' or i == '5' or i ==\
    \ '6' or i == '7' or i == '8' or i == '9':\n            prime_number = false\n\
    \            break\n        if i == '!' or i == '@' or i == '#' or i == '$' or\
    \ i == '%' or i == '^' or i == '&' or i == '*' or i == '(' or i == ')' or i ==\
    \ '_' or i == '+' or i == '=' or i == '[' or i == ']' or i == '{' or i == '}'\
    \ or i == '\\\\' or i == '|' or i == '<' or i == '>' or i == '?' or i == '/' or\
    \ i == '~':\n            prime_number = false\n            break\n        if i\
    \ == 'a' or i == 'e' or i == 'i' or i == 'o' or i == 'u':\n            prime_number\
    \ = false\n            break\n        if i == 'b' or i == 'c' or i == 'd' or i\
    \ == 'f' or i == 'g' or i == 'h' or i == 'j' or i == 'k' or i == 'l' or i == 'm'\
    \ or i == 'n' or i == 'p' or i == 'q' or i == '\nusing Test\n\n@testset begin\n\
    \ncandidate = prime_length;\n\t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"\
    abcdcba\") == true)\n\t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"\
    orange\") == false)\n\t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"\
    world\") == true)\n\t@test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"\
    Wow\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"HI\")\
    \ == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"gogo\") ==\
    \ false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx88jq9kw.jl:14\nin expression starting at\
    \ /tmp/tmpx88jq9kw.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_numbers = prime_numbers()\n    \n    for char in string:\n\
    \        if char in prime_numbers:\n            return False\n    return True\n\
    </cell>\n<cell>\nprime_length('Hello') == True\nprime_length('abcdcba') == True\n\
    prime_length('kittens') == True\nprime_length('orange') == False\n</cell>\n<text>\n\
    Exercise 5\nWrite a function that takes a string and returns True if the string\
    \ is a palindrome or False otherwise\nExamples\npalindrome('racecar') == True\n\
    palindrome('racecars') == True\npalindrome('racecar') == False\npalindrome('racecars')\
    \ == False\npalindrome('racecar') == False\npalindrome('racecars') == False\n\
    palindrome('racecars') == False\npalindrome('racecars') == False\npalindrome('racecars')\
    \ == False\npalindrome('racecars') == False\npalindrome('racecars') == False\n\
    palindrome('racecars') == False\npalindrome('racecars') == False\npalindrome('racecars')\
    \ == False\npalindrome('racecars') == False\npalindrome('racecars') == False\n\
    palindrome('racecars') == False\npalindrome('racecars') == False\npalindrome('racecars')\
    \ == False\npalindrome('racecars') == False\npalindrome('racecars') == False\n\
    palindrome('racecars') == False\npalindrome('racecars') == False\npalindrome('racecars')\
    \ == False\npalindrome('racecars') == False\npalindrome('racecars') == False\n\
    palindrome('racecars') == False\npalindrome('racecars') == False\npalindrome('racecars')\
    \ == False\npalindrome('racecars') == False\npalindrome('racecars') == False\n\
    palindrome('racecars') == False\npalindrome('racecars') == False\npalindrome('racecars')\
    \ == False\npalindrome('racecars') == False\npalindrome('racecars') == False\n\
    palindrome('racecars') == False\npalindrome('race\nusing Test\n\n@testset begin\n\
    \ncandidate = prime_length;\n\t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"\
    abcdcba\") == true)\n\t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"\
    orange\") == false)\n\t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"\
    world\") == true)\n\t@test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"\
    Wow\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"HI\")\
    \ == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"gogo\") ==\
    \ false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptdn6s58r.jl:14\nin expression starting at\
    \ /tmp/tmptdn6s58r.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_numbers = primes(string)\n    \n    prime_numbers_len = len(prime_numbers)\n\
    \    \n    if prime_numbers_len > 1:\n        \n        for number in prime_numbers:\n\
    \            \n            if number > prime_numbers_len:\n                \n\
    \                return False\n            \n            else:\n             \
    \   \n                return True\n                \n    else:\n        \n   \
    \     return True\n        \n        \n\"\"\"Write a function that takes a string\
    \ and returns True if the string\n    contains only letters or False otherwise\n\
    \    Examples\n    letters_only('Hello') == True\n    letters_only('abcdcba')\
    \ == True\n    letters_only('kittens') == False\n    letters_only('orange') ==\
    \ False\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\
    \t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\
    \t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\
    \t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t\
    @test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") ==\
    \ true)\n\t@test(candidate(\"gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\"\
    ) == false)\n\t@test(candidate(\"Madam\") == true)\n\t@test(candidate(\"M\") ==\
    \ false)\n\t@test(candidate(\"0\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpeyvnq8a7.jl:16\nin expression starting at\
    \ /tmp/tmpeyvnq8a7.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_length::Bool = \n        true\n        \n    if string ==\
    \ \"\"\n        prime_length\n    else\n        if string.length % 2 == 0\n  \
    \          prime_length\n        else\n            prime_length\n        end\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nprime_length(\"Hello\")\n</cell>\n\
    <code language=julia-1.5>\nprime_length(\"abcdcba\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"kittens\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"\
    orange\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and\
    \ returns True if the string is a palindrome or False otherwise\nExamples\npalindrome(\"\
    abba\") == True\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\n\
    palindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abba\"\
    ) == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"\
    abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\n\
    palindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abba\"\
    ) == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"\
    abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\n\
    palindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abba\"\
    ) == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"\
    abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\n\
    palindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abba\"\
    ) == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"\
    abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\n\
    palindrome(\"abba\") == False\n\nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\
    \t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\
    \t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\
    \t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t\
    @test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") ==\
    \ true)\n\t@test(candidate(\"gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\"\
    ) == false)\n\t@test(candidate(\"Madam\") == true)\n\t@test(candidate(\"M\") ==\
    \ false)\n\t@test(candidate(\"0\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsg1w6y2m.jl:24\nin expression starting at\
    \ /tmp/tmpsg1w6y2m.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_length::Bool = false \n    \n    if string == \"\"\n     \
    \   prime_length = true\n    else\n        if string.length == 0 \n          \
    \  prime_length = true\n        else\n            if string.length == 1 \n   \
    \             prime_length = true\n            else\n                if string.length\
    \ == 2 \n                    prime_length = true\n                else\n     \
    \               if string.length == 3 \n                        prime_length =\
    \ true\n                    else\n                        if string.length ==\
    \ 4 \n                            prime_length = true\n                      \
    \  else\n                            if string.length == 5 \n                \
    \                prime_length = true\n                            else\n     \
    \                           if string.length == 6 \n                         \
    \           prime_length = true\n                                else\n      \
    \                              if string.length == 7 \n                      \
    \                  prime_length = true\n                                    else\n\
    \                                        if string.length == 8 \n            \
    \                                prime_length = true\n                       \
    \                 else\n                            if string.length == 9 \n \
    \                               prime_length = true\n                        \
    \    else\n                                if string.length == 10 \n         \
    \                           prime_length = true\n                            \
    \    else\n                                    if string.length == 11 \n     \
    \                                   prime_length = true\n                    \
    \                else\n                                        if string.length\
    \ == 12 \n                                            prime_length = true\n  \
    \                                      else\n                                \
    \            if string.length == 13 \n                                       \
    \         prime_length = true\n                                            else\n\
    \                                                if string.length == 14 \n   \
    \                                                 prime_length = true\n      \
    \                                          else\n                            \
    \                        if string.length == 15 \n                           \
    \                             prime_length = true\n                          \
    \                          else\n                                            \
    \            if string.length == 16 \n                                       \
    \                     prime_length = true\n                                  \
    \                      else\n                                                \
    \            if string.length == 17 \n                                       \
    \                         prime_length = true\n                              \
    \                              else\n                                        \
    \                        if string.length == 18 \n                           \
    \                                         prime_length = true\n              \
    \                                                  else\n                    \
    \                                                if string.length == 19 \n   \
    \                                                                     prime_length\
    \ = true\n                                                                   \
    \ else\n                                                        if string.length\
    \ == 20 \n                                                            prime_length\
    \ = true\n                                                        else\n     \
    \                                                       if string.length == 21\
    \ \n                                                                prime_length\
    \ = true\n                                                            else\n \
    \                                                               if string.length\
    \ == 22 \n                                                                   \
    \ prime_length = true\n                                                      \
    \          else\n                                                            \
    \        if string.length == 23 \n                                           \
    \                             prime_length = true\n                          \
    \                                          else\n                            \
    \                            if string.length == 24 \n                       \
    \                                     prime_length = true\n                  \
    \                                      else\n                                \
    \                            if string.length == 25 \n                       \
    \                                         prime_length = true\n              \
    \                                              else\n                        \
    \                                        if string.length == 26 \n           \
    \                                                         prime_length = true\n\
    \                                                                else\n      \
    \                                                              if string.length\
    \ == 27 \n                                                                   \
    \     prime_length = true\n                                                  \
    \                  else\n                                                    \
    \    if string.length == 28 \n                                               \
    \             prime_length = true\n                                          \
    \              else\n                                                        \
    \    if string.length == 29 \n                                               \
    \                 prime_length = true\n                                      \
    \                      else\n                                                \
    \                if string.length == 30 \n                                   \
    \                                 prime_length = true\nusing Test\n\n@testset\
    \ begin\n\ncandidate = prime_length;\n\t@test(candidate(\"Hello\") == true)\n\t\
    @test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"kittens\") == true)\n\
    \t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"wow\") == true)\n\
    \t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\") == true)\n\
    \t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"\
    HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"gogo\"\
    ) == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0erzhya_.jl:1\nin expression starting at /tmp/tmp0erzhya_.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_length::Bool = false\n    \n    if string == \"\"\n      \
    \  return prime_length\n    \n    string::String = string.lower()\n    \n    for\
    \ char in string\n        if char == \"a\"\n            prime_length = true\n\
    \            break\n        \n        if char == \"b\"\n            prime_length\
    \ = true\n            break\n        \n        if char == \"c\"\n            prime_length\
    \ = true\n            break\n        \n        if char == \"d\"\n            prime_length\
    \ = true\n            break\n        \n        if char == \"e\"\n            prime_length\
    \ = true\n            break\n        \n        if char == \"f\"\n            prime_length\
    \ = true\n            break\n        \n        if char == \"g\"\n            prime_length\
    \ = true\n            break\n        \n        if char == \"h\"\n            prime_length\
    \ = true\n            break\n        \n        if char == \"i\"\n            prime_length\
    \ = true\n            break\n        \n        if char == \"j\"\n            prime_length\
    \ = true\n            break\n        \n        if char == \"k\"\n            prime_length\
    \ = true\n            break\n        \n        if char == \"l\"\n            prime_length\
    \ = true\n            break\n        \n        if char == \"m\"\n            prime_length\
    \ = true\n            break\n        \n        if char == \"n\"\n            prime_length\
    \ = true\n            break\n        \n        if char == \"o\"\n            prime_length\
    \ = true\n            break\n        \n        if char == \"p\"\n            prime_length\
    \ = true\n            break\n        \n        if char == \"q\"\n            prime_length\
    \ = true\n            break\n        \n        if char == \"r\"\n            prime_length\
    \ = true\n            break\n        \n        if char == \"s\"\n            prime_length\
    \ = true\n            break\n        \n        if char == \"t\"\n            prime_length\
    \ = true\n            break\n        \n        if char == \"u\"\n            prime_length\
    \ = true\n            break\n        \n        if char == \"v\"\n            prime_length\
    \ = true\n            break\n        \n        if char == \"w\"\n            prime_length\
    \ = true\n            break\n        \n        if char == \"x\"\n            prime_length\
    \ = true\n            break\n        \n        if char == \"y\"\n            prime_length\
    \ = true\n            break\n        \n        if char == \"z\"\n            prime_length\
    \ = true\n            break\n        \n        if char == \"0\"\n            prime_length\
    \ = true\n            break\n        \n        if char == \"1\"\n            prime_length\
    \ = true\n            break\n        \n        if char == \"2\"\n            prime_length\
    \ = true\n            break\n        \n        if char == \"3\"\n            prime_length\
    \ = true\n            break\n        \n        if char == \"4\"\n            prime_length\
    \ = \nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"\
    Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"\
    kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"\
    wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpszo4m4e6.jl:1\nin expression starting at /tmp/tmpszo4m4e6.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_length = true\n    \n    for i in string:\n        if i ==\
    \ 'a' or i == 'e' or i == 'i' or i == 'o' or i == 'u':\n            continue\n\
    \        if i == 'h':\n            continue\n        if i == 'l':\n          \
    \  continue\n        if i == 'o':\n            continue\n        if i == 'n':\n\
    \            continue\n        if i == 't':\n            continue\n        if\
    \ i == 'r':\n            continue\n        if i == 's':\n            continue\n\
    \        if i == 'u':\n            continue\n        if i == 'v':\n          \
    \  continue\n        if i == 'w':\n            continue\n        if i == 'x':\n\
    \            continue\n        if i == 'y':\n            continue\n        if\
    \ i == 'z':\n            continue\n        if i == 'A':\n            continue\n\
    \        if i == 'B':\n            continue\n        if i == 'C':\n          \
    \  continue\n        if i == 'D':\n            continue\n        if i == 'E':\n\
    \            continue\n        if i == 'F':\n            continue\n        if\
    \ i == 'G':\n            continue\n        if i == 'H':\n            continue\n\
    \        if i == 'I':\n            continue\n        if i == 'J':\n          \
    \  continue\n        if i == 'K':\n            continue\n        if i == 'L':\n\
    \            continue\n        if i == 'M':\n            continue\n        if\
    \ i == 'N':\n            continue\n        if i == 'O':\n            continue\n\
    \        if i == 'P':\n            continue\n        if i == 'Q':\n          \
    \  continue\n        if i == 'R':\n            continue\n        if i == 'S':\n\
    \            continue\n        if i == 'T':\n            continue\n        if\
    \ i == 'U':\n            continue\n        if i == 'V':\n            continue\n\
    \        if i == 'W':\n            continue\n        if i == 'X':\n          \
    \  continue\n        if i == 'Y':\n            continue\n        if i == 'Z':\n\
    \            continue\n        if i == '0':\n            continue\n        if\
    \ i == '1':\n            continue\n        if i == '2':\n            continue\n\
    \        if i == '3':\n            continue\n        if i == '4':\n          \
    \  continue\n        if i == '5':\n            continue\n        if i == '6':\n\
    \            continue\n        if i == '7':\n            continue\n        if\
    \ i == '8':\n            continue\n        if i == '9':\n            continue\n\
    \        if i == '.':\n            continue\n        if i == '-':\n          \
    \  continue\n        if i == '_':\n            continue\n        if i == '/':\n\
    \            continue\n        if i == '+':\n            continue\n        if\
    \ i == '=':\n            continue\n        if i == '<':\n            continue\n\
    \        if i == '>':\n            continue\n        if i == '?':\n          \
    \  continue\n        if i == '@':\n            continue\n        if i == '[':\n\
    \nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"\
    Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"\
    kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"\
    wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqs1x56d2.jl:14\nin expression starting at\
    \ /tmp/tmpqs1x56d2.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    prime_length::Bool = \n        true\n        for char in string\n    \
    \        if char == ' '\n                prime_length::Bool = false\n        \
    \    else\n                if char == 'a'\n                    prime_length::Bool\
    \ = prime_length::Bool or prime_length::Bool\n                else\n         \
    \           if char == 'b'\n                        prime_length::Bool = prime_length::Bool\
    \ or prime_length::Bool\n                    else\n                        if\
    \ char == 'c'\n                            prime_length::Bool = prime_length::Bool\
    \ or prime_length::Bool\n                        else\n                      \
    \      if char == 'd'\n                                prime_length::Bool = prime_length::Bool\
    \ or prime_length::Bool\n                            else\n                  \
    \              if char == 'e'\n                                    prime_length::Bool\
    \ = prime_length::Bool or prime_length::Bool\n                               \
    \ else\n                                    if char == 'f'\n                 \
    \                       prime_length::Bool = prime_length::Bool or prime_length::Bool\n\
    \                                    else\n                                  \
    \      if char == 'g'\n                                            prime_length::Bool\
    \ = prime_length::Bool or prime_length::Bool\n                               \
    \         else\n                                            if char == 'h'\n \
    \                                               prime_length::Bool = prime_length::Bool\
    \ or prime_length::Bool\n                                            else\n  \
    \                                              if char == 'i'\n              \
    \                                      prime_length::Bool = prime_length::Bool\
    \ or prime_length::Bool\n                                                else\n\
    \                                                    if char == 'j'\n        \
    \                                                prime_length::Bool = prime_length::Bool\
    \ or prime_length::Bool\n                                                    else\n\
    \                                                        if char == 'k'\n    \
    \                                                        prime_length::Bool =\
    \ prime_length::Bool or prime_length::Bool\n                                 \
    \                       else\n                                               \
    \             if char == 'l'\n                                               \
    \                 prime_length::Bool = prime_length::Bool or prime_length::Bool\n\
    \                                                            else\n          \
    \                                                      if char == 'm'\n      \
    \                                                              prime_length::Bool\
    \ = prime_length::Bool or prime_length::Bool\n                               \
    \                                 else\n                                     \
    \                               if char == 'n'\n                             \
    \                                           prime_length::Bool = prime_length::Bool\
    \ or prime_length::Bool\n                                                    \
    \                else\n                                                      \
    \                  if char == 'o'\n                                          \
    \                                  prime_length::Bool = prime_length::Bool or\
    \ prime_length::Bool\n                                                       \
    \                 else\n                                                     \
    \                       if char == 'p'\n                                     \
    \                                           prime_length::Bool = prime_length::Bool\
    \ or prime_length::Bool\n                                                    \
    \                        else\n                                              \
    \                                  if char == 'q'\n                          \
    \                                                          prime_length::Bool\
    \ = prime_length::Bool or prime\nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\
    \t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\
    \t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\
    \t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t\
    @test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") ==\
    \ true)\n\t@test(candidate(\"gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\"\
    ) == false)\n\t@test(candidate(\"Madam\") == true)\n\t@test(candidate(\"M\") ==\
    \ false)\n\t@test(candidate(\"0\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"or\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpy2n9n58g.jl:17\nin expression starting at /tmp/tmpy2n9n58g.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_numbers = Set([2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97])\n\
    \    \n    prime_numbers_set = Set(prime_numbers)\n    \n    prime_numbers_set.add(1)\n\
    \    \n    prime_numbers_set.add(2)\n    \n    prime_numbers_set.add(3)\n    \n\
    \    prime_numbers_set.add(5)\n    \n    prime_numbers_set.add(7)\n    \n    prime_numbers_set.add(11)\n\
    \    \n    prime_numbers_set.add(13)\n    \n    prime_numbers_set.add(17)\n  \
    \  \n    prime_numbers_set.add(19)\n    \n    prime_numbers_set.add(23)\n    \n\
    \    prime_numbers_set.add(29)\n    \n    prime_numbers_set.add(31)\n    \n  \
    \  prime_numbers_set.add(37)\n    \n    prime_numbers_set.add(41)\n    \n    prime_numbers_set.add(43)\n\
    \    \n    prime_numbers_set.add(47)\n    \n    prime_numbers_set.add(53)\n  \
    \  \n    prime_numbers_set.add(59)\n    \n    prime_numbers_set.add(61)\n    \n\
    \    prime_numbers_set.add(67)\n    \n    prime_numbers_set.add(71)\n    \n  \
    \  prime_numbers_set.add(73)\n    \n    prime_numbers_set.add(79)\n    \n    prime_numbers_set.add(83)\n\
    \    \n    prime_numbers_set.add(89)\n    \n    prime_numbers_set.add(97)\n  \
    \  \n    prime_numbers_set.add(101)\n    \n    prime_numbers_set.add(103)\n  \
    \  \n    prime_numbers_set.add(107)\n    \n    prime_numbers_set.add(109)\n  \
    \  \n    prime_numbers_set.add(111)\n    \n    prime_numbers_set.add(113)\n  \
    \  \n    prime_numbers_set.add(117)\n    \n    prime_numbers_set.add(127)\n  \
    \  \n    prime_numbers_set.add(131)\n    \n    prime_numbers_set.add(137)\n  \
    \  \n    prime_numbers_set.add(139)\n    \n    prime_numbers_set.add(149)\n  \
    \  \n    prime\nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\t\
    @test(candidate(\"Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\
    \t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\
    \t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t\
    @test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") ==\
    \ true)\n\t@test(candidate(\"gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\"\
    ) == false)\n\t@test(candidate(\"Madam\") == true)\n\t@test(candidate(\"M\") ==\
    \ false)\n\t@test(candidate(\"0\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpac4oe4d2.jl:9\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpac4oe4d2.jl:1\n\
    in expression starting at /tmp/tmpac4oe4d2.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_numbers = prime_numbers()\n    \n    for i in string:\n  \
    \      if i in prime_numbers:\n            return False\n    return True\n</code>\n\
    <|/ a tags=primes,haskell,string |>\n<| c |>\nThanks for your answer! I understand\
    \ that your solution is more efficient than mine, but I still don't understand\
    \ why my code doesn't work. Could you please explain why my code doesn't work?\n\
    <|/ c |>\n<| c |>\nI added some explanation to my answer\n<|/ c |>\n<| c |>\n\
    Thanks for your explanation! I still don't understand why my code doesn't work.\
    \ Could you please explain why my code doesn't work?\n<|/ c |>\n<| c |>\nI added\
    \ some explanation to my answer\n<|/ c |>\n<| a dscore=0 |>\nI wrote a function\
    \ that checks if a number is prime or not:\n<code>\nisPrime :: Int -> Bool\nisPrime\
    \ n = n `mod` 2 == 0 && n `mod` n == 0\n</code>\nI wrote a function that checks\
    \ if a string is prime or not:\n<code>\nisPrimeString :: String -> Bool\nisPrimeString\
    \ str = isPrime $ length str\n</code>\nI wrote a function that checks if a string\
    \ is prime or not:\n<code>\nisPrimeString :: String -> Bool\nisPrimeString str\
    \ = isPrime $ length str\n</code>\nI wrote a function that checks if a string\
    \ is prime or not:\n<code>\nisPrimeString :: String -> Bool\nisPrimeString str\
    \ = isPrime $ length str\n</code>\nI wrote a function that checks if a string\
    \ is prime or not:\n<code>\nisPrimeString :: String -> Bool\nisPrimeString str\
    \ = isPrime $ length str\n</code>\nI wrote a function that checks if a string\
    \ is prime or not:\n<code>\nisPrimeString :: String -> Bool\nisPrimeString str\
    \ = isPrime $ length str\n</code>\nI wrote a function that checks if a string\
    \ is prime or not:\n<code>\nisPrimeString :: String -> Bool\nisPrimeString str\
    \ = isPrime $ length str\n</code>\nI wrote a function that checks if a string\
    \ is prime or not:\n<code>\nisPrimeString :: String -> Bool\nisPrimeString str\
    \ = isPrime $ length str\n</code>\nI wrote a function that checks if a string\
    \ is prime or not:\n<code>\nisPrimeString :: String -> Bool\nisPrimeString str\
    \ = isPrime $ length str\n</code>\nI wrote a \nusing Test\n\n@testset begin\n\n\
    candidate = prime_length;\n\t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"\
    abcdcba\") == true)\n\t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"\
    orange\") == false)\n\t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"\
    world\") == true)\n\t@test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"\
    Wow\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"HI\")\
    \ == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"gogo\") ==\
    \ false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn2nidyup.jl:14\nin expression starting at\
    \ /tmp/tmpn2nidyup.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_length::Bool = False \n    \n    if string == \"\"\n     \
    \   return prime_length\n    \n    prime_length::Bool = True \n    \n    for char\
    \ in string\n        if char == \"a\"\n            prime_length::Bool = False\
    \ \n        else if char == \"b\"\n            prime_length::Bool = False \n \
    \       else if char == \"c\"\n            prime_length::Bool = False \n     \
    \   else if char == \"d\"\n            prime_length::Bool = False \n        else\
    \ if char == \"e\"\n            prime_length::Bool = False \n        else if char\
    \ == \"f\"\n            prime_length::Bool = False \n        else if char == \"\
    g\"\n            prime_length::Bool = False \n        else if char == \"h\"\n\
    \            prime_length::Bool = False \n        else if char == \"i\"\n    \
    \        prime_length::Bool = False \n        else if char == \"j\"\n        \
    \    prime_length::Bool = False \n        else if char == \"k\"\n            prime_length::Bool\
    \ = False \n        else if char == \"l\"\n            prime_length::Bool = False\
    \ \n        else if char == \"m\"\n            prime_length::Bool = False \n \
    \       else if char == \"n\"\n            prime_length::Bool = False \n     \
    \   else if char == \"o\"\n            prime_length::Bool = False \n        else\
    \ if char == \"p\"\n            prime_length::Bool = False \n        else if char\
    \ == \"q\"\n            prime_length::Bool = False \n        else if char == \"\
    r\"\n            prime_length::Bool = False \n        else if char == \"s\"\n\
    \            prime_length::Bool = False \n        else if char == \"t\"\n    \
    \        prime_length::Bool = False \n        else if char == \"u\"\n        \
    \    prime_length::Bool = False \n        else if char == \"v\"\n            prime_length::Bool\
    \ = False \n        else if char == \"w\"\n            prime_length::Bool = False\
    \ \n        else if char == \"x\"\n            prime_length::Bool = False \n \
    \       else if char == \"y\"\n            prime_length::Bool = False \n     \
    \   else if char == \"z\"\n            prime_length::Bool = False \n        else\
    \ if char == \"A\"\n            prime_length::Bool = False \n        else if char\
    \ == \"B\"\n            prime_length::Bool = False \n        else if char == \"\
    C\"\n            prime_length::Bool = False \n        else if char == \"D\"\n\
    \            prime_length::Bool = False \n        else if char == \"\nusing Test\n\
    \n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"Hello\") ==\
    \ true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"kittens\"\
    ) == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"wow\"\
    ) == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpevjbszfe.jl:21\nin expression starting at\
    \ /tmp/tmpevjbszfe.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_length = true\n    \n    for i in string:\n        if i ==\
    \ 'a' or i == 'e' or i == 'i' or i == 'o' or i == 'u':\n            prime_length\
    \ = false\n            break\n        \n    for i in string:\n        if i ==\
    \ 'a' or i == 'e' or i == 'i' or i == 'o' or i == 'u':\n            prime_length\
    \ = false\n            break\n        \n    for i in string:\n        if i ==\
    \ 'a' or i == 'e' or i == 'i' or i == 'o' or i == 'u':\n            prime_length\
    \ = false\n            break\n        \n    for i in string:\n        if i ==\
    \ 'a' or i == 'e' or i == 'i' or i == 'o' or i == 'u':\n            prime_length\
    \ = false\n            break\n        \n    for i in string:\n        if i ==\
    \ 'a' or i == 'e' or i == 'i' or i == 'o' or i == 'u':\n            prime_length\
    \ = false\n            break\n        \n    for i in string:\n        if i ==\
    \ 'a' or i == 'e' or i == 'i' or i == 'o' or i == 'u':\n            prime_length\
    \ = false\n            break\n        \n    for i in string:\n        if i ==\
    \ 'a' or i == 'e' or i == 'i' or i == 'o' or i == 'u':\n            prime_length\
    \ = false\n            break\n        \n    for i in string:\n        if i ==\
    \ 'a' or i == 'e' or i == 'i' or i == 'o' or i == 'u':\n            prime_length\
    \ = false\n            break\n        \n    for i in string:\n        if i ==\
    \ 'a' or i == 'e' or i == 'i' or i == 'o' or i == 'u':\n            prime_length\
    \ = false\n            break\n        \n    for i in string:\n        if i ==\
    \ 'a' or i == 'e' or i == 'i' or i == 'o' or i == 'u':\n            prime_length\
    \ = false\n            break\n        \n    for i in string:\n        if i ==\
    \ 'a' or i == 'e' or i == 'i' or i == 'o' or i == 'u':\n            prime_length\
    \ = false\n            break\n        \n    for i in string:\n        if i ==\
    \ 'a' or i == 'e' or i == 'i' or i == 'o' or i == 'u':\n            prime_length\
    \ = false\n            break\n        \n    for i in string:\n        if i ==\
    \ 'a' or i == 'e' or i == 'i' or i == 'o' or i == 'u':\n            prime_length\
    \ = false\n            break\n        \n    for i in string:\n        if i ==\
    \ 'a' or i == 'e' or i == 'i' or i == 'o' or i == 'u':\n            prime_length\
    \ = false\n            break\n        \n    for i in string:\n        if i ==\
    \ 'a' or i == 'e' or \nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\
    \t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\
    \t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\
    \t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t\
    @test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") ==\
    \ true)\n\t@test(candidate(\"gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\"\
    ) == false)\n\t@test(candidate(\"Madam\") == true)\n\t@test(candidate(\"M\") ==\
    \ false)\n\t@test(candidate(\"0\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpch5c3r1k.jl:14\nin expression starting at\
    \ /tmp/tmpch5c3r1k.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_numbers = Set([2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97])\n\
    \    \n    for character in string:\n        if character in prime_numbers:\n\
    \            return False\n    return True\n\"\"\"\nWrite a function that takes\
    \ a string and returns True if the string contains\nany character from another\
    \ string and False otherwise\nExamples\nstring_contains('kittens', 't') == True\n\
    string_contains('kittens', 'e') == True\nstring_contains('kittens', 's') == False\n\
    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"\
    Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"\
    kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"\
    wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnhsfgvye.jl:14\nin expression starting at\
    \ /tmp/tmpnhsfgvye.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_numbers = primes(string.length)\n    \n    for prime in prime_numbers\n\
    \        if string == prime\n            return true\n    return false\nend\n\
    </cell>\n<code language=julia-1.0>\nprime_length(\"Hello\")\n</cell>\n<code language=julia-1.0>\n\
    prime_length(\"abcdcba\")\n</cell>\n<code language=julia-1.0>\nprime_length(\"\
    kittens\")\n</cell>\n<code language=julia-1.0>\nprime_length(\"orange\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns True if the\
    \ string is a palindrome or False otherwise\nExamples\npalindrome(\"racecar\"\
    ) == True\npalindrome(\"racecars\") == True\npalindrome(\"racecarc\") == False\n\
    palindrome(\"racecarc\") == False\npalindrome(\"racecarc\") == False\npalindrome(\"\
    racecarc\") == False\npalindrome(\"racecarc\") == False\npalindrome(\"racecarc\"\
    ) == False\npalindrome(\"racecarc\") == False\npalindrome(\"racecarc\") == False\n\
    palindrome(\"racecarc\") == False\npalindrome(\"racecarc\") == False\npalindrome(\"\
    racecarc\") == False\npalindrome(\"racecarc\") == False\npalindrome(\"racecarc\"\
    ) == False\npalindrome(\"racecarc\") == False\npalindrome(\"racecarc\") == False\n\
    palindrome(\"racecarc\") == False\npalindrome(\"racecarc\") == False\npalindrome(\"\
    racecarc\") == False\npalindrome(\"racecarc\") == False\npalindrome(\"racecarc\"\
    ) == False\npalindrome(\"racecarc\") == False\npalindrome(\"racecarc\") == False\n\
    palindrome(\"racecarc\") == False\npalindrome(\"racecarc\") == False\npalindrome(\"\
    racecarc\") == False\npalindrome(\"racecarc\") == False\npalindrome(\"racecarc\"\
    ) == False\npalindrome(\"racecarc\") == False\npalindrome(\"racecarc\") == False\n\
    palindrome(\"racecarc\") == False\npalindrome(\"racecarc\") == False\npalindrome(\"\
    racecarc\") == False\npalindro\nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\
    \t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\
    \t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\
    \t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t\
    @test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") ==\
    \ true)\n\t@test(candidate(\"gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\"\
    ) == false)\n\t@test(candidate(\"Madam\") == true)\n\t@test(candidate(\"M\") ==\
    \ false)\n\t@test(candidate(\"0\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwalvwbn4.jl:18\nin expression starting at\
    \ /tmp/tmpwalvwbn4.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_numbers = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n\
    \    \n    for i in string:\n        if i in prime_numbers:\n            prime_numbers.remove(i)\n\
    \            \n    if prime_numbers == []:\n        return True\n    else:\n \
    \       return False\n\"\"\"\nWrite a function that takes a string and returns\
    \ True if the string\n    contains only letters or False otherwise\n    Examples\n\
    \    letters_only('Hello') == True\n    letters_only('abcdcba') == True\n    letters_only('kittens')\
    \ == False\n    letters_only('orange') == False\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = prime_length;\n\t@test(candidate(\"Hello\") == true)\n\t\
    @test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"kittens\") == true)\n\
    \t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"wow\") == true)\n\
    \t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\") == true)\n\
    \t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"\
    HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"gogo\"\
    ) == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz__6go70.jl:14\nin expression starting at\
    \ /tmp/tmpz__6go70.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    prime_length::Bool = false \n    for character in string \n        if\
    \ character == 0 \n            prime_length = false \n        else \n        \
    \    prime_length = true \n            break \n    return prime_length \n</code>\n\
    <|/ a tags=haskell,primes |>\n<| c |>\n`prime_length::Bool = false \n    for character\
    \ in string \n        if character == 0 \n            prime_length = false \n\
    \        else \n            prime_length = true \n            break \n    return\
    \ prime_length` can be written `prime_length string = any (==0) [1..length string]`\n\
    <|/ c |>\n<| c |>\n`prime_length::Bool = any (==0) [1..length string]` can be\
    \ written `prime_length string = any (==0) [1..length string]`\n<|/ c |>\n<| a\
    \ dscore=0 |>\n<code>\nprimes :: [Integer]\nprimes = sieve [2..]\n  where sieve\
    \ (p:xs)\n          | p > 1000 = error \"too big\"\n          | otherwise = sieve\
    \ [x | x <- xs, x `mod` p /= 0]\n</code>\n<|/ a tags=haskell,primes |>\n<| c |>\n\
    This is not an answer to the question. `sieve [2..]` will give the wrong result\
    \ for large numbers. `sieve [2..]` will give the wrong result for large numbers.\
    \ `sieve [2..]` will give the wrong result for large numbers. `sieve [2..]` will\
    \ give the wrong result for large numbers. `sieve [2..]` will give the wrong result\
    \ for large numbers. `sieve [2..]` will give the wrong result for large numbers.\
    \ `sieve [2..]` will give the wrong result for large numbers. `sieve [2..]` will\
    \ give the wrong result for large numbers. `sieve [2..]` will give the wrong result\
    \ for large numbers. `sieve [2..]` will give the wrong result for large numbers.\
    \ `sieve [2..]` will give the wrong result for large numbers. `sieve [2..]` will\
    \ give the wrong result for large numbers. `sieve [2..]` will give the wrong result\
    \ for large numbers. `sieve [2..]` will give the wrong result for large numbers.\
    \ `sieve [2..]` will give the wrong result for large numbers. `sieve [2..]` will\
    \ \nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"\
    Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"\
    kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"\
    wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzme1dqil.jl:18\nin expression starting at\
    \ /tmp/tmpzme1dqil.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_number::Bool = True \n    \n    for char in string:\n    \
    \    if char == '\\n':\n            prime_number = False\n            break\n\
    \        if char == '\\n':\n            prime_number = False\n            break\n\
    \        if char == '\\n':\n            prime_number = False\n            break\n\
    \        if char == '\\n':\n            prime_number = False\n            break\n\
    \        if char == '\\n':\n            prime_number = False\n            break\n\
    \        if char == '\\n':\n            prime_number = False\n            break\n\
    \        if char == '\\n':\n            prime_number = False\n            break\n\
    \        if char == '\\n':\n            prime_number = False\n            break\n\
    \        if char == '\\n':\n            prime_number = False\n            break\n\
    \        if char == '\\n':\n            prime_number = False\n            break\n\
    \        if char == '\\n':\n            prime_number = False\n            break\n\
    \        if char == '\\n':\n            prime_number = False\n            break\n\
    \        if char == '\\n':\n            prime_number = False\n            break\n\
    \        if char == '\\n':\n            prime_number = False\n            break\n\
    \        if char == '\\n':\n            prime_number = False\n            break\n\
    \        if char == '\\n':\n            prime_number = False\n            break\n\
    \        if char == '\\n':\n            prime_number = False\n            break\n\
    \        if char == '\\n':\n            prime_number = False\n            break\n\
    \        if char == '\\n':\n            prime_number = False\n            break\n\
    \        if char == '\\n':\n            prime_number = False\n            break\n\
    \        if char == '\\n':\n            prime_number = False\n            break\n\
    \        if char == '\\n':\n            prime_number = False\n            break\n\
    \        if char == '\\n':\n            prime_number = False\n            break\n\
    \        if char == '\\n':\n            prime_number = False\n            break\n\
    \        if char == '\\n':\n            prime_number = False\n            break\n\
    \        if char == '\\n':\n            prime_number = False\n            break\n\
    \        if char == '\\n':\n            prime_number = False\n            break\n\
    \        if char == '\\n':\n            prime_number = False\n            break\n\
    \        if char == '\\n':\n            prime_number = False\n            break\n\
    \        if char == '\\n':\n            prime_number = False\n            break\n\
    \        if char == '\\n':\n            prime_number = False\n            break\n\
    \        if char == '\\n':\n            prime_number = False\n            break\n\
    \        if char == '\\n':\n            prime_number = False\n            break\n\
    \        if char == '\\n':\n            prime_number = False\n            break\n\
    \        if char == '\\n':\n            prime_number = False\n            break\n\
    \        if char == '\\n':\nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\
    \t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\
    \t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\
    \t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t\
    @test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") ==\
    \ true)\n\t@test(candidate(\"gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\"\
    ) == false)\n\t@test(candidate(\"Madam\") == true)\n\t@test(candidate(\"M\") ==\
    \ false)\n\t@test(candidate(\"0\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmytioxup.jl:14\nin expression starting at\
    \ /tmp/tmpmytioxup.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_numbers = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n\
    \    \n    for i in string:\n        if i in prime_numbers:\n            return\
    \ False\n    return True\n\"\"\"\nWrite a function that takes a string and returns\
    \ True if the string\n    contains only letters or False otherwise\n    Examples\n\
    \    letters_only('Hello') == True\n    letters_only('abcdcba') == True\n    letters_only('kittens')\
    \ == False\n    letters_only('orange') == False\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = prime_length;\n\t@test(candidate(\"Hello\") == true)\n\t\
    @test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"kittens\") == true)\n\
    \t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"wow\") == true)\n\
    \t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\") == true)\n\
    \t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"\
    HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"gogo\"\
    ) == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvd8_p57x.jl:14\nin expression starting at\
    \ /tmp/tmpvd8_p57x.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    prime_length = 0\n    for char in string:\n        if char == ' ':\n \
    \           continue\n        if char == '\\n':\n            continue\n      \
    \  if char == '\\t':\n            continue\n        if char == '\\r':\n      \
    \      continue\n        if char == '\\f':\n            continue\n        if char\
    \ == '\\v':\n            continue\n        if char == '\\b':\n            continue\n\
    \        if char == '\\a':\n            continue\n        if char == '\\e':\n\
    \            continue\n        if char == '\\o':\n            continue\n     \
    \   if char == '\\v':\n            continue\n        if char == '\\c':\n     \
    \       continue\n        if char == '\\a':\n            continue\n        if\
    \ char == '\\e':\n            continue\n        if char == '\\o':\n          \
    \  continue\n        if char == '\\v':\n            continue\n        if char\
    \ == '\\c':\n            continue\n        if char == '\\a':\n            continue\n\
    \        if char == '\\e':\n            continue\n        if char == '\\o':\n\
    \            continue\n        if char == '\\v':\n            continue\n     \
    \   if char == '\\c':\n            continue\n        if char == '\\a':\n     \
    \       continue\n        if char == '\\e':\n            continue\n        if\
    \ char == '\\o':\n            continue\n        if char == '\\v':\n          \
    \  continue\n        if char == '\\c':\n            continue\n        if char\
    \ == '\\a':\n            continue\n        if char == '\\e':\n            continue\n\
    \        if char == '\\o':\n            continue\n        if char == '\\v':\n\
    \            continue\n        if char == '\\c':\n            continue\n     \
    \   if char == '\\a':\n            continue\n        if char == '\\e':\n     \
    \       continue\n        if char == '\\o':\n            continue\n        if\
    \ char == '\\v':\n            continue\n        if char == '\\c':\n          \
    \  continue\n        if char == '\\a':\n            continue\n        if char\
    \ == '\\e':\n            continue\n        if char == '\\o':\n            continue\n\
    \        if char == '\\v':\n            continue\n        if char == '\\c':\n\
    \            continue\n        if char == '\\a':\n            continue\n     \
    \   if char == '\\e':\n            continue\n        if char == '\\o':\n     \
    \       continue\n        if char == '\\v':\n            continue\n        if\
    \ char == '\\c':\n            continue\n        if char == '\\a':\n          \
    \  continue\n        if char == '\\e':\n            continue\n        if char\
    \ == '\\o':\n            continue\n        if char == '\\v':\n            continue\n\
    \        if char == '\\c':\n            continue\n        if char == '\\a':\n\
    \            continue\n        if char == '\\e':\n            continue\n     \
    \   if char == '\\o':\n            continue\n        if char == '\\v':\n     \
    \       continue\n        if char == '\\\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prime_length;\n\t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"\
    abcdcba\") == true)\n\t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"\
    orange\") == false)\n\t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"\
    world\") == true)\n\t@test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"\
    Wow\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"HI\")\
    \ == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"gogo\") ==\
    \ false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv_gsbg0s.jl:12\nin expression starting at\
    \ /tmp/tmpv_gsbg0s.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_length = 0\n    \n    for i in string:\n        if prime_length\
    \ == 0:\n            if i == '0':\n                prime_length = 1\n        \
    \    else:\n                prime_length = 0\n        else:\n            if i\
    \ == '0':\n                prime_length = 0\n            else:\n             \
    \   prime_length = 1\n                \n    if prime_length == 0:\n        return\
    \ True\n    else:\n        return False\n\"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = prime_length;\n\t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"\
    abcdcba\") == true)\n\t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"\
    orange\") == false)\n\t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"\
    world\") == true)\n\t@test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"\
    Wow\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"HI\")\
    \ == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"gogo\") ==\
    \ false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn7wcd6zd.jl:14\nin expression starting at\
    \ /tmp/tmpn7wcd6zd.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_number::Bool = False \n    \n    for i in string:\n      \
    \  if i == 'a' or i == 'e' or i == 'i' or i == 'o' or i == 'u':\n            prime_number\
    \ = True\n            break\n    \n    return prime_number\n\"\"\"\nWrite a function\
    \ that takes a string and returns True if the string\n    contains a palindrome\
    \ or False otherwise\n    Examples\n    palindrome('racecar') == True\n    palindrome('racecars')\
    \ == True\n    palindrome('racecarc') == False\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = prime_length;\n\t@test(candidate(\"Hello\") == true)\n\t\
    @test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"kittens\") == true)\n\
    \t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"wow\") == true)\n\
    \t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\") == true)\n\
    \t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"\
    HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"gogo\"\
    ) == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd7i2i85p.jl:14\nin expression starting at\
    \ /tmp/tmpd7i2i85p.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_number = 2\n    \n    for i in string:\n        if prime_number\
    \ % i == 0:\n            return False\n        prime_number += 1\n    return True\n\
    </cell>\n<cell>\nprime_length('Hello')\n</cell>\n<cell>\nprime_length('abcdcba')\n\
    </cell>\n<cell>\nprime_length('kittens')\n</cell>\n<cell>\nprime_length('orange')\n\
    </cell>\n<text>\nWrite a function that takes a string and returns True if the\
    \ string contains only letters a-z or A-Z or False otherwise\nExamples\nonly_letters('Hello')\
    \ == True\nonly_letters('abcdcba') == True\nonly_letters('kittens') == False\n\
    only_letters('orange') == False\nonly_letters('') == False\nonly_letters(' ')\
    \ == False\nonly_letters(' ') == False\nonly_letters(' ') == False\nonly_letters('\
    \ ') == False\nonly_letters(' ') == False\nonly_letters(' ') == False\nonly_letters('\
    \ ') == False\nonly_letters(' ') == False\nonly_letters(' ') == False\nonly_letters('\
    \ ') == False\nonly_letters(' ') == False\nonly_letters(' ') == False\nonly_letters('\
    \ ') == False\nonly_letters(' ') == False\nonly_letters(' ') == False\nonly_letters('\
    \ ') == False\nonly_letters(' ') == False\nonly_letters(' ') == False\nonly_letters('\
    \ ') == False\nonly_letters(' ') == False\nonly_letters(' ') == False\nonly_letters('\
    \ ') == False\nonly_letters(' ') == False\nonly_letters(' ') == False\nonly_letters('\
    \ ') == False\nonly_letters(' ') == False\nonly_letters(' ') == False\nonly_letters('\
    \ ') == False\nonly_letters(' ') == False\nonly_letters(' ') == False\nonly_letters('\
    \ ') == False\nonly_letters(' ') == False\nonly_letters(' ') == False\nonly_letters('\
    \ ') == False\nonly_letters(' ') == False\nonly_letters(' ') == False\nonly_letters('\
    \ ') == False\nonly_letters(' ') == False\nonly_letters(' ') == False\nonly_letters('\
    \ ') == False\nonly_letters(' ') == False\nonly_letters(' ') == False\nonly_letters('\
    \ ') == False\nonly_letters(' ') == False\nonly_letters(' ') == False\nonly_letters('\
    \ ') == False\nonly_letters(' ') == False\nonly_letters(' ') == False\nonly_letters('\
    \ ') == False\nonly_letters(' ') == False\nonly_letters(' '\nusing Test\n\n@testset\
    \ begin\n\ncandidate = prime_length;\n\t@test(candidate(\"Hello\") == true)\n\t\
    @test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"kittens\") == true)\n\
    \t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"wow\") == true)\n\
    \t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\") == true)\n\
    \t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"\
    HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"gogo\"\
    ) == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9gg3bevp.jl:14\nin expression starting at\
    \ /tmp/tmp9gg3bevp.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_numbers = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n\
    \    \n    for i in prime_numbers\n        if string.count(i) == string.count('0')\n\
    \            return False\n    \n    return True\n    \n\"\"\"Write a function\
    \ that takes a string and returns True if the string\n    contains any uppercase\
    \ letters or False otherwise\n    Examples\n    contains_uppercase('Hello') ==\
    \ True\n    contains_uppercase('abcdcba') == True\n    contains_uppercase('kittens')\
    \ == True\n    contains_uppercase('orange') == False\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"Hello\") ==\
    \ true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"kittens\"\
    ) == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"wow\"\
    ) == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo0ur4hcu.jl:1\nin expression starting at /tmp/tmpo0ur4hcu.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_numbers = prime_numbers()\n    \n    for i in string\n   \
    \     if i in prime_numbers\n            return false\n    return true\nend\n\
    </cell>\n<code language=julia-1.0>\nprime_length(\"Hello\")\n</cell>\n<code language=julia-1.0>\n\
    prime_length(\"abcdcba\")\n</cell>\n<code language=julia-1.0>\nprime_length(\"\
    kittens\")\n</cell>\n<code language=julia-1.0>\nprime_length(\"orange\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns True if the\
    \ string is a palindrome or False otherwise\nExamples\npalindrome(\"abba\") ==\
    \ True\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"\
    abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\n\
    palindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abba\"\
    ) == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"\
    abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\n\
    palindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abba\"\
    ) == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"\
    abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\n\
    palindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abba\"\
    ) == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"\
    abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\n\
    palindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abba\"\
    ) == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"\
    abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\n\
    p\nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"\
    Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"\
    kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"\
    wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjnmj2ccr.jl:18\nin expression starting at\
    \ /tmp/tmpjnmj2ccr.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_length = true\n    \n    for i in string:\n        if i ==\
    \ 'a' or i == 'e' or i == 'i' or i == 'o' or i == 'u':\n            prime_length\
    \ = false\n            break\n    \n    return prime_length\n\"\"\"\nWrite a function\
    \ that takes a string and returns True if the string\n    contains only letters\
    \ or False otherwise\n    Examples\n    letters_only('Hello') == True\n    letters_only('abcdcba')\
    \ == True\n    letters_only('kittens') == False\n    letters_only('orange') ==\
    \ False\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\
    \t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\
    \t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\
    \t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t\
    @test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") ==\
    \ true)\n\t@test(candidate(\"gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\"\
    ) == false)\n\t@test(candidate(\"Madam\") == true)\n\t@test(candidate(\"M\") ==\
    \ false)\n\t@test(candidate(\"0\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptbo17t9r.jl:14\nin expression starting at\
    \ /tmp/tmptbo17t9r.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_length::Bool = false \n    \n    if string == \"\"\n     \
    \   return prime_length\n    \n    length::Int = string.length\n    \n    for\
    \ i in 2..length\n        if string.charAt(i) == string.charAt(length-1)\n   \
    \         prime_length = true\n            break\n        else\n            prime_length\
    \ = false\n    end\n    \n    return prime_length\nend\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"Hello\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"abcdcba\"\
    )\n</cell>\n<code language=julia-1.5>\nprime_length(\"kittens\")\n</cell>\n<code\
    \ language=julia-1.5>\nprime_length(\"orange\")\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a string and returns True if the string is a palindrome\
    \ or False otherwise\nExamples\npalindrome(\"abba\") == True\npalindrome(\"abba\"\
    ) == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"\
    abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\n\
    palindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abba\"\
    ) == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"\
    abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\n\
    palindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abba\"\
    ) == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"\
    abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\n\
    palindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abba\"\
    ) == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"\
    abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\n\
    palindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"\n\
    using Test\n\n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"\
    Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"\
    kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"\
    wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb2ibz34y.jl:28\nin expression starting at\
    \ /tmp/tmpb2ibz34y.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_length::Bool = False \n    \n    if string == \"\"\n     \
    \   return prime_length\n    \n    prime_length::Bool = True \n    \n    for char\
    \ in string\n        if char == \"a\"\n            prime_length::Bool = False\
    \ \n        \n        if char == \"b\"\n            prime_length::Bool = False\
    \ \n        \n        if char == \"c\"\n            prime_length::Bool = False\
    \ \n        \n        if char == \"d\"\n            prime_length::Bool = False\
    \ \n        \n        if char == \"e\"\n            prime_length::Bool = False\
    \ \n        \n        if char == \"f\"\n            prime_length::Bool = False\
    \ \n        \n        if char == \"g\"\n            prime_length::Bool = False\
    \ \n        \n        if char == \"h\"\n            prime_length::Bool = False\
    \ \n        \n        if char == \"i\"\n            prime_length::Bool = False\
    \ \n        \n        if char == \"j\"\n            prime_length::Bool = False\
    \ \n        \n        if char == \"k\"\n            prime_length::Bool = False\
    \ \n        \n        if char == \"l\"\n            prime_length::Bool = False\
    \ \n        \n        if char == \"m\"\n            prime_length::Bool = False\
    \ \n        \n        if char == \"n\"\n            prime_length::Bool = False\
    \ \n        \n        if char == \"o\"\n            prime_length::Bool = False\
    \ \n        \n        if char == \"p\"\n            prime_length::Bool = False\
    \ \n        \n        if char == \"q\"\n            prime_length::Bool = False\
    \ \n        \n        if char == \"r\"\n            prime_length::Bool = False\
    \ \n        \n        if char == \"s\"\n            prime_length::Bool = False\
    \ \n        \n        if char == \"t\"\n            prime_length::Bool = False\
    \ \n        \n        if char == \"u\"\n            prime_length::Bool = False\
    \ \n        \n        if char == \"v\"\n            prime_length::Bool = False\
    \ \n        \n        if char == \"w\"\n            prime_length::Bool = False\
    \ \n        \n        if char == \"x\"\n            prime_length::Bool = False\
    \ \n        \n        if char == \"y\"\n            prime_length::Bool = False\
    \ \n        \n        if char == \"z\"\n            prime_length::Bool = False\
    \ \n        \n        if char == \"A\"\n            prime_length::Bool = False\
    \ \n        \n        if char == \"B\"\n            prime_length::Bool = False\
    \ \n        \n        if char == \"C\"\n            \nusing Test\n\n@testset begin\n\
    \ncandidate = prime_length;\n\t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"\
    abcdcba\") == true)\n\t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"\
    orange\") == false)\n\t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"\
    world\") == true)\n\t@test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"\
    Wow\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"HI\")\
    \ == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"gogo\") ==\
    \ false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx96_963s.jl:1\nin expression starting at /tmp/tmpx96_963s.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    if string == \"\"\n        return true\n    \n    prime_numbers\
    \ = prime_numbers()\n    \n    for i in string\n        if prime_numbers.contains(i)\n\
    \            return false\n    \n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"Hello\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"abcdcba\"\
    )\n</cell>\n<code language=julia-1.5>\nprime_length(\"kittens\")\n</cell>\n<code\
    \ language=julia-1.5>\nprime_length(\"orange\")\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a string and returns True if the string contains any\
    \ character from that set\nExamples\nhas_any_char('Hello') == True\nhas_any_char('abcdcba')\
    \ == True\nhas_any_char('kittens') == True\nhas_any_char('orange') == False\n\
    has_any_char('') == False\nhas_any_char('a') == True\nhas_any_char('ab') == True\n\
    has_any_char('abc') == True\nhas_any_char('abd') == False\nhas_any_char('abdc')\
    \ == False\nhas_any_char('abdce') == False\nhas_any_char('abdce') == False\nhas_any_char('abdce')\
    \ == False\nhas_any_char('abdce') == False\nhas_any_char('abdce') == False\nhas_any_char('abdce')\
    \ == False\nhas_any_char('abdce') == False\nhas_any_char('abdce') == False\nhas_any_char('abdce')\
    \ == False\nhas_any_char('abdce') == False\nhas_any_char('abdce') == False\nhas_any_char('abdce')\
    \ == False\nhas_any_char('abdce') == False\nhas_any_char('abdce') == False\nhas_any_char('abdce')\
    \ == False\nhas_any_char('abdce') == False\nhas_any_char('abdce') == False\nhas_any_char('abdce')\
    \ == False\nhas_any_char('abdce') == False\nhas_any_char('abdce') == False\nhas_any_char('abdce')\
    \ == False\nhas_any_char('abdce') == False\nhas_any_char('abdce') == False\nhas_any_char('abdce')\
    \ == False\nhas_any_char('abdce') == False\nhas_any_char('abdce') == False\nhas_any_char('abdce')\
    \ == False\nhas_any_char('abdce') == False\nhas_any_char('ab\nusing Test\n\n@testset\
    \ begin\n\ncandidate = prime_length;\n\t@test(candidate(\"Hello\") == true)\n\t\
    @test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"kittens\") == true)\n\
    \t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"wow\") == true)\n\
    \t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\") == true)\n\
    \t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"\
    HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"gogo\"\
    ) == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps8erihm_.jl:22\nin expression starting at\
    \ /tmp/tmps8erihm_.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_numbers = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n\
    \    \n    for i in string:\n        if i in prime_numbers:\n            prime_numbers.remove(i)\n\
    \            \n    if prime_numbers == []:\n        return True\n    else:\n \
    \       return False\n    \n\"\"\"Write a function that takes a string and returns\
    \ True if the string\n    contains any uppercase letters or False otherwise\n\
    \    Examples\n    contains_uppercase('Hello') == True\n    contains_uppercase('abcdcba')\
    \ == True\n    contains_uppercase('kittens') == False\n    contains_uppercase('orange')\
    \ == False\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\
    \t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\
    \t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\
    \t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t\
    @test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") ==\
    \ true)\n\t@test(candidate(\"gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\"\
    ) == false)\n\t@test(candidate(\"Madam\") == true)\n\t@test(candidate(\"M\") ==\
    \ false)\n\t@test(candidate(\"0\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp61xqbly6.jl:14\nin expression starting at\
    \ /tmp/tmp61xqbly6.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_numbers::Set{Int} = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31,\
    \ 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n    \n    for i in\
    \ string\n        if prime_numbers.contains(i)\n            prime_numbers.remove(i)\n\
    \        else\n            return false\n    end\n    return true\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns True if the\
    \ string contains only letters a-z or A-Z or False otherwise\nExamples\nonly_letters('Hello')\
    \ == True\nonly_letters('abcdcba') == True\nonly_letters('kittens') == False\n\
    only_letters('orange') == False\nonly_letters('') == False\nonly_letters(' ')\
    \ == False\nonly_letters(' ') == False\nonly_letters(' ') == False\nonly_letters('\
    \ ') == False\nonly_letters(' ') == False\nonly_letters(' ') == False\nonly_letters('\
    \ ') == False\nonly_letters(' ') == False\nonly_letters(' ') == False\nonly_letters('\
    \ ') == False\nonly_letters(' ') == False\nonly_letters(' ') == False\nonly_letters('\
    \ ') == False\nonly_letters(' ') == False\nonly_letters(' ') == False\nonly_letters('\
    \ ') == False\nonly_letters(' ') == False\nonly_letters(' ') == False\nonly_letters('\
    \ ') == False\nonly_letters(' ') == False\nonly_letters(' ') == False\nonly_letters('\
    \ ') == False\nonly_letters(' ') == False\nonly_letters(' ') == False\nonly_letters('\
    \ ') == False\nonly_letters(' ') == False\nonly_letters(' ') == False\nonly_letters('\
    \ ') == False\nonly_letters(' ') == False\nonly_letters(' ') == False\nonly_letters('\
    \ ') == False\nonly_letters(' ') == False\nonly_letters(' ') == False\nonly_letters('\
    \ ') == False\nonly_letters(' ') == False\nonly_letters(' ') == False\nonly_letters('\
    \ ') == False\nonly_letters(' ') == False\nonly_letters(' ') == False\nonly_letters('\
    \ ') == False\nonly_letters(' ') == False\nonly_letters(' ') == False\nonly_letters('\
    \ ') == False\nonly_letters(' ') == False\nonly_letters(' ') == False\nonly_letters('\
    \ ') == False\nonly_letters(' ') == False\nonly_letters(' ') == False\nonly_letters('\
    \ ') == False\nonly_letters(' ') == False\nonly_letters(' ') == False\nonly_letters('\
    \ ') == False\nonly_letters('\nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\
    \t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\
    \t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\
    \t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t\
    @test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") ==\
    \ true)\n\t@test(candidate(\"gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\"\
    ) == false)\n\t@test(candidate(\"Madam\") == true)\n\t@test(candidate(\"M\") ==\
    \ false)\n\t@test(candidate(\"0\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyfmou52v.jl:21\nin expression starting at\
    \ /tmp/tmpyfmou52v.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_numbers = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n\
    \    \n    for number in prime_numbers\n        if number % 2 == 0\n         \
    \   prime_numbers[number]\n            prime_numbers[number+1]\n            prime_numbers[number+2]\n\
    \            prime_numbers[number+3]\n            prime_numbers[number+4]\n  \
    \          prime_numbers[number+5]\n            prime_numbers[number+6]\n    \
    \        prime_numbers[number+7]\n            prime_numbers[number+8]\n      \
    \      prime_numbers[number+9]\n            prime_numbers[number+10]\n       \
    \     prime_numbers[number+11]\n            prime_numbers[number+12]\n       \
    \     prime_numbers[number+13]\n            prime_numbers[number+14]\n       \
    \     prime_numbers[number+15]\n            prime_numbers[number+16]\n       \
    \     prime_numbers[number+17]\n            prime_numbers[number+18]\n       \
    \     prime_numbers[number+19]\n            prime_numbers[number+20]\n       \
    \     prime_numbers[number+21]\n            prime_numbers[number+22]\n       \
    \     prime_numbers[number+23]\n            prime_numbers[number+24]\n       \
    \     prime_numbers[number+25]\n            prime_numbers[number+26]\n       \
    \     prime_numbers[number+27]\n            prime_numbers[number+28]\n       \
    \     prime_numbers[number+29]\n            prime_numbers[number+30]\n       \
    \     prime_numbers[number+31]\n            prime_numbers[number+32]\n       \
    \     prime_numbers[number+33]\n            prime_numbers[number+34]\n       \
    \     prime_numbers[number+35]\n            prime_numbers[number+36]\n       \
    \     prime_numbers[number+37]\n            prime_numbers[number+38]\n       \
    \     prime_numbers[number+39]\n            prime_numbers[number+40]\n       \
    \     prime_numbers[number+41]\n            prime_numbers[number+42]\n       \
    \     prime_numbers[number+43]\n            prime_numbers[number+44]\n       \
    \     prime_numbers[number+45]\n            prime_number\nusing Test\n\n@testset\
    \ begin\n\ncandidate = prime_length;\n\t@test(candidate(\"Hello\") == true)\n\t\
    @test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"kittens\") == true)\n\
    \t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"wow\") == true)\n\
    \t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\") == true)\n\
    \t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"\
    HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"gogo\"\
    ) == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvhmu77xs.jl:1\nin expression starting at /tmp/tmpvhmu77xs.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_numbers = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n\
    \    \n    for i in string:\n        if i in prime_numbers:\n            return\
    \ False\n    return True\n    \n\"\"\"Write a function that takes a string and\
    \ returns True if the string\n    contains only letters or False otherwise\n \
    \   Examples\n    letters_only('Hello') == True\n    letters_only('abcdcba') ==\
    \ True\n    letters_only('kittens') == False\n    letters_only('orange') == False\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"\
    Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"\
    kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"\
    wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa5vu0mqs.jl:14\nin expression starting at\
    \ /tmp/tmpa5vu0mqs.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_length::Bool = false \n    \n    for i in string:\n      \
    \  if prime_length::Bool == false and i::Int > 2:\n            prime_length::Bool\
    \ = false \n            break\n        if i::Int == 2:\n            prime_length::Bool\
    \ = true \n            break\n        if i::Int % 2 == 0 and prime_length::Bool\
    \ == false:\n            prime_length::Bool = true \n            break\n    return\
    \ prime_length::Bool\nend\n</cell>\n<code language=julia-1.5>\nprime_length(\"\
    Hello\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"abcdcba\")\n</cell>\n\
    <code language=julia-1.5>\nprime_length(\"kittens\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"orange\")\n</cell>\n<text>\nWrite a function that takes a string\
    \ and returns True if the string contains only letters a-z or A-Z or False otherwise\n\
    Examples\nonly_letters('Hello') == True\nonly_letters('abcdcba') == True\nonly_letters('kittens')\
    \ == False\nonly_letters('orange') == False\nonly_letters('') == False\nonly_letters('\
    \ ') == False\nonly_letters(' ') == False\nonly_letters(' ') == False\nonly_letters('\
    \ ') == False\nonly_letters(' ') == False\nonly_letters(' ') == False\nonly_letters('\
    \ ') == False\nonly_letters(' ') == False\nonly_letters(' ') == False\nonly_letters('\
    \ ') == False\nonly_letters(' ') == False\nonly_letters(' ') == False\nonly_letters('\
    \ ') == False\nonly_letters(' ') == False\nonly_letters(' ') == False\nonly_letters('\
    \ ') == False\nonly_letters(' ') == False\nonly_letters(' ') == False\nonly_letters('\
    \ ') == False\nonly_letters(' ') == False\nonly_letters(' ') == False\nonly_letters('\
    \ ') == False\nonly_letters(' ') == False\nonly_letters(' ') == False\nonly_letters('\
    \ ') == False\nonly_letters(' ') == False\nonly_letters(' ') == False\nonly_letters('\
    \ ') == False\nonly_letters(' ') == False\nonly_letters(' ') == False\nonly_letters('\
    \ ') == False\nonly_letters(' ') == False\nonly_letters(' ') == False\nonly_letters('\
    \ ') == False\nonly_letters(' ') == False\nonly_letters(' ') == False\nonly_letters('\
    \ ') == False\nonly_letters(' ') == False\nonly_letters(' ') == False\nonly_letters('\
    \ ') == False\n\nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\t\
    @test(candidate(\"Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\
    \t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\
    \t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t\
    @test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") ==\
    \ true)\n\t@test(candidate(\"gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\"\
    ) == false)\n\t@test(candidate(\"Madam\") == true)\n\t@test(candidate(\"M\") ==\
    \ false)\n\t@test(candidate(\"0\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplcmztckg.jl:14\nin expression starting at\
    \ /tmp/tmplcmztckg.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_length = 0\n    \n    for i in string:\n        if i == 'a'\
    \ or i == 'e' or i == 'i' or i == 'o' or i == 'u':\n            prime_length +=\
    \ 2\n        elif i == 'b' or i == 'c' or i == 'd' or i == 'f' or i == 'g' or\
    \ i == 'h':\n            prime_length += 3\n        elif i == 'j' or i == 'k'\
    \ or i == 'l' or i == 'm' or i == 'n' or i == 'p':\n            prime_length +=\
    \ 5\n        elif i == 'q' or i == 'r' or i == 's' or i == 't' or i == 'v' or\
    \ i == 'w':\n            prime_length += 7\n        elif i == 'x' or i == 'y'\
    \ or i == 'z':\n            prime_length += 11\n        else:\n            return\
    \ False\n            \n    if prime_length == len(string):\n        return True\n\
    \    else:\n        return False\nend\n</cell>\n<code language=julia-1.5>\nprime_length(\"\
    Hello\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"abcdcba\")\n</cell>\n\
    <code language=julia-1.5>\nprime_length(\"kittens\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"orange\")\n</cell>\n<text>\nWrite a function that takes a string\
    \ and returns True if the string is a palindrome or False otherwise\nExamples\n\
    palindrome(\"kittens\") == True\npalindrome(\"racecar\") == True\npalindrome(\"\
    hello\") == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\n\
    palindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abba\"\
    ) == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"\
    abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\n\
    palindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abba\"\
    ) == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"\
    abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\n\
    palindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalin\nusing Test\n\
    \n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"Hello\") ==\
    \ true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"kittens\"\
    ) == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"wow\"\
    ) == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj1zs1j74.jl:14\nin expression starting at\
    \ /tmp/tmpj1zs1j74.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_numbers = prime_numbers()\n    \n    for char in string:\n\
    \        if char in prime_numbers:\n            return False\n    return True\n\
    </code>\n<|/ a tags=primes,haskell,string |>\n<| c |>\nThis solution will take\
    \ O(n^2) time instead of O(n).\n<|/ c |>\n<| c |>\nYes, I agree. However I believe\
    \ that it is still better than O(n^2) time complexity.\n<|/ c |>\n<| c |>\nThe\
    \ complexity is still O(n^2) because you still have to check every character in\
    \ the string. Also, your solution doesn't work for strings with repeated characters.\n\
    <|/ c |>\n<| c |>\nYes, you are right. I missed that part. Thanks for pointing\
    \ it out.\n<|/ c |>\n<| a tags=primes,haskell,string |>\nI believe that this is\
    \ what you are looking for:\n<code>\nprimes :: [Int]\nprimes = 2 : filter isPrime\
    \ [3..]\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis solution will take O(n^2) time\
    \ instead of O(n).\n<|/ c |>\n<| c |>\nYes, I agree. However I believe that it\
    \ is still better than O(n^2) time complexity.\n<|/ c |>\n<| c |>\nThe complexity\
    \ is still O(n^2) because you still have to check every character in the string.\
    \ Also, your solution doesn't work for strings with repeated characters.\n<|/\
    \ c |>\n<| c |>\nYes, you are right. I missed that part. Thanks for pointing it\
    \ out.\n<|/ c |>\n<| a tags=primes,haskell,string |>\n<code>\nprimes :: [Int]\n\
    primes = 2 : filter isPrime [3..]\n</code>\nThis solution will take O(n^2) time\
    \ instead of O(n).\n<|/ a dscore=1 |>\n<| c |>\nThis solution will take O(n^2)\
    \ time instead of O(n).\n<|/ c |>\n<| a dscore=1 |>\n<code>\nprimes :: [Int]\n\
    primes = 2 : filter isPrime [3..]\n</code>\nThis solution will take O(n^2) time\
    \ instead of O(n).\n<|/ a tags=primes,haskell,string |>\n<| c |>\nThis solution\
    \ will take O(n^2) time instead of O(n).\n<|/ c |>\n<| a tags=primes,haskell,string\
    \ |>\n\nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"\
    Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"\
    kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"\
    wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn6ke42a9.jl:14\nin expression starting at\
    \ /tmp/tmpn6ke42a9.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_length = true\n    \n    for i in string:\n        if i ==\
    \ 'a' or i == 'e' or i == 'i' or i == 'o' or i == 'u':\n            prime_length\
    \ = false\n            break\n        \n    for i in string:\n        if i ==\
    \ 'a' or i == 'e' or i == 'i' or i == 'o' or i == 'u':\n            prime_length\
    \ = false\n            break\n        \n    for i in string:\n        if i ==\
    \ 'a' or i == 'e' or i == 'i' or i == 'o' or i == 'u':\n            prime_length\
    \ = false\n            break\n        \n    for i in string:\n        if i ==\
    \ 'a' or i == 'e' or i == 'i' or i == 'o' or i == 'u':\n            prime_length\
    \ = false\n            break\n        \n    for i in string:\n        if i ==\
    \ 'a' or i == 'e' or i == 'i' or i == 'o' or i == 'u':\n            prime_length\
    \ = false\n            break\n        \n    for i in string:\n        if i ==\
    \ 'a' or i == 'e' or i == 'i' or i == 'o' or i == 'u':\n            prime_length\
    \ = false\n            break\n        \n    for i in string:\n        if i ==\
    \ 'a' or i == 'e' or i == 'i' or i == 'o' or i == 'u':\n            prime_length\
    \ = false\n            break\n        \n    for i in string:\n        if i ==\
    \ 'a' or i == 'e' or i == 'i' or i == 'o' or i == 'u':\n            prime_length\
    \ = false\n            break\n        \n    for i in string:\n        if i ==\
    \ 'a' or i == 'e' or i == 'i' or i == 'o' or i == 'u':\n            prime_length\
    \ = false\n            break\n        \n    for i in string:\n        if i ==\
    \ 'a' or i == 'e' or i == 'i' or i == 'o' or i == 'u':\n            prime_length\
    \ = false\n            break\n        \n    for i in string:\n        if i ==\
    \ 'a' or i == 'e' or i == 'i' or i == 'o' or i == 'u':\n            prime_length\
    \ = false\n            break\n        \n    for i in string:\n        if i ==\
    \ 'a' or i == 'e' or i == 'i' or i == 'o' or i == 'u':\n            prime_length\
    \ = false\n            break\n        \n    for i in string:\n        if i ==\
    \ 'a' or i == 'e' or i == 'i' or i == 'o' or i == 'u':\n            prime_length\
    \ = false\n            break\n        \n    for i in string:\n        if i ==\
    \ 'a' or i == 'e' or i == 'i' or i == 'o' or i == 'u':\n            prime_length\
    \ = false\n            break\n        \n    for i in string:\n        if i ==\
    \ 'a' or i == 'e' or \nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\
    \t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\
    \t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\
    \t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t\
    @test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") ==\
    \ true)\n\t@test(candidate(\"gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\"\
    ) == false)\n\t@test(candidate(\"Madam\") == true)\n\t@test(candidate(\"M\") ==\
    \ false)\n\t@test(candidate(\"0\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmporakhqgz.jl:14\nin expression starting at\
    \ /tmp/tmporakhqgz.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_numbers = primes(string)\n    \n    if prime_numbers == []\n\
    \        true\n    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"Hello\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"abcdcba\"\
    )\n</cell>\n<code language=julia-1.5>\nprime_length(\"kittens\")\n</cell>\n<code\
    \ language=julia-1.5>\nprime_length(\"orange\")\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a string and returns True if the string is a palindrome\
    \ or False otherwise\nExamples\npalindrome(\"abba\") == True\npalindrome(\"abba\"\
    ) == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"\
    abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\n\
    palindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abba\"\
    ) == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"\
    abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\n\
    palindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abba\"\
    ) == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"\
    abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\n\
    palindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abba\"\
    ) == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"\
    abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\n\
    palindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abba\"\
    ) == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"\
    abba\") == False\npalindrome(\"abba\") == False\n\nusing Test\n\n@testset begin\n\
    \ncandidate = prime_length;\n\t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"\
    abcdcba\") == true)\n\t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"\
    orange\") == false)\n\t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"\
    world\") == true)\n\t@test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"\
    Wow\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"HI\")\
    \ == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"gogo\") ==\
    \ false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6vt_hzk9.jl:19\nin expression starting at\
    \ /tmp/tmp6vt_hzk9.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    prime_length = 0\n    for i in string:\n        if i == 'a' or i == 'e'\
    \ or i == 'i' or i == 'o' or i == 'u':\n            prime_length += 0\n      \
    \  elif i == 'b' or i == 'c' or i == 'd' or i == 'f' or i == 'g' or i == 'h' or\
    \ i == 'j' or i == 'k' or i == 'l' or i == 'm' or i == 'n' or i == 'p' or i ==\
    \ 'q' or i == 'r' or i == 's' or i == 't' or i == 'v' or i == 'w' or i == 'x'\
    \ or i == 'y' or i == 'z':\n            prime_length += 0\n        else:\n   \
    \         prime_length += 1 \n    if prime_length == 0:\n        return True\n\
    \    else:\n        return False\n\"\"\"\nWrite a function that takes a string\
    \ and returns True if the string\n    contains only letters a-z or A-Z or False\
    \ otherwise\n    Examples\n    only_letters('Hello') == True\n    only_letters('abcdcba')\
    \ == True\n    only_letters('kittens') == False\n    only_letters('orange') ==\
    \ False\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\
    \t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\
    \t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\
    \t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t\
    @test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") ==\
    \ true)\n\t@test(candidate(\"gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\"\
    ) == false)\n\t@test(candidate(\"Madam\") == true)\n\t@test(candidate(\"M\") ==\
    \ false)\n\t@test(candidate(\"0\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp57apey_2.jl:12\nin expression starting at\
    \ /tmp/tmp57apey_2.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_numbers = primes()\n    \n    for i in string:\n        if\
    \ i in prime_numbers:\n            return False\n    return True\n</cell>\n<cell>\n\
    prime_length('Hello') == True\nprime_length('abcdcba') == True\nprime_length('kittens')\
    \ == True\nprime_length('orange') == False\n</cell>\n<text>\nExercise: Write a\
    \ function that takes a string and returns True if the string is a palindrome\
    \ or False otherwise\nExamples\npalindrome('racecar') == True\npalindrome('racecars')\
    \ == True\npalindrome('racecar') == False\npalindrome('racecars') == False\npalindrome('racecars')\
    \ == False\npalindrome('racecars') == False\npalindrome('racecars') == False\n\
    palindrome('racecars') == False\npalindrome('racecars') == False\npalindrome('racecars')\
    \ == False\npalindrome('racecars') == False\npalindrome('racecars') == False\n\
    palindrome('racecars') == False\npalindrome('racecars') == False\npalindrome('racecars')\
    \ == False\npalindrome('racecars') == False\npalindrome('racecars') == False\n\
    palindrome('racecars') == False\npalindrome('racecars') == False\npalindrome('racecars')\
    \ == False\npalindrome('racecars') == False\npalindrome('racecars') == False\n\
    palindrome('racecars') == False\npalindrome('racecars') == False\npalindrome('racecars')\
    \ == False\npalindrome('racecars') == False\npalindrome('racecars') == False\n\
    palindrome('racecars') == False\npalindrome('racecars') == False\npalindrome('racecars')\
    \ == False\npalindrome('racecars') == False\npalindrome('racecars') == False\n\
    palindrome('racecars') == False\npalindrome('racecars') == False\npalindrome('racecars')\
    \ == False\npalindrome('racecars') == False\npalindrome('racecars') == False\n\
    palindrome('racecars') == \nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\
    \t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\
    \t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\
    \t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t\
    @test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") ==\
    \ true)\n\t@test(candidate(\"gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\"\
    ) == false)\n\t@test(candidate(\"Madam\") == true)\n\t@test(candidate(\"M\") ==\
    \ false)\n\t@test(candidate(\"0\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa1g3z_bo.jl:14\nin expression starting at\
    \ /tmp/tmpa1g3z_bo.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    prime_length = 0\n    for i in string:\n        if prime_length == 0:\n\
    \            prime_length = 1\n        elif prime_length == 1:\n            prime_length\
    \ = 2\n        elif prime_length == 2:\n            if i == 'h':\n           \
    \     prime_length = 3\n            elif i == 'e':\n                prime_length\
    \ = 3\n            elif i == 'l':\n                prime_length = 3\n        \
    \    elif i == 'l':\n                prime_length = 3\n            elif i == 'o':\n\
    \                prime_length = 3\n            elif i == 'n':\n              \
    \  prime_length = 3\n            elif i == 't':\n                prime_length\
    \ = 3\n            elif i == 's':\n                prime_length = 3\n        \
    \    elif i == 'i':\n                prime_length = 3\n            elif i == 'n':\n\
    \                prime_length = 3\n            elif i == 'g':\n              \
    \  prime_length = 3\n            elif i == 'e':\n                prime_length\
    \ = 3\n            elif i == 'r':\n                prime_length = 3\n        \
    \    elif i == 't':\n                prime_length = 3\n            elif i == 'n':\n\
    \                prime_length = 3\n            elif i == 't':\n              \
    \  prime_length = 3\n            elif i == 'h':\n                prime_length\
    \ = 3\n            elif i == 'l':\n                prime_length = 3\n        \
    \    elif i == 'o':\n                prime_length = 3\n            elif i == 'n':\n\
    \                prime_length = 3\n            elif i == 't':\n              \
    \  prime_length = 3\n            elif i == 's':\n                prime_length\
    \ = 3\n            elif i == 'i':\n                prime_length = 3\n        \
    \    elif i == 'n':\n                prime_length = 3\n            elif i == 'g':\n\
    \                prime_length = 3\n            elif i == 'e':\n              \
    \  prime_length = 3\n            elif i == 'r':\n                prime_length\
    \ = 3\n            elif i == 't':\n                prime_length = 3\n        \
    \    elif i == 'n':\n                prime_length = 3\n            elif i == 't':\n\
    \                prime_length = 3\n            elif i == 'h':\n              \
    \  prime_length = 3\n            elif i == 'l':\n                prime_length\
    \ = 3\n            elif i == 'o':\n                prime_length = 3\n        \
    \    elif i == 'n':\n                prime_length = 3\n            elif i == 't':\n\
    \                prime_length = 3\n            elif i == 's':\n              \
    \  prime_length = 3\n            elif i == 'i':\n                prime_length\
    \ = 3\n            elif i == 'n':\n                prime_length = 3\n        \
    \    elif i == 'g':\n                prime_length = 3\n            elif i == 'e':\n\
    \                prime\nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\
    \t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\
    \t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\
    \t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t\
    @test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") ==\
    \ true)\n\t@test(candidate(\"gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\"\
    ) == false)\n\t@test(candidate(\"Madam\") == true)\n\t@test(candidate(\"M\") ==\
    \ false)\n\t@test(candidate(\"0\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6veknyib.jl:12\nin expression starting at\
    \ /tmp/tmp6veknyib.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_length = true\n    \n    for char in string:\n        if char\
    \ == \"'\":\n            prime_length = false\n            break\n        if char\
    \ == \"'\" == true:\n            prime_length = true\n            break\n    \
    \    if char == \"'\" == false:\n            prime_length = false\n          \
    \  break\n        if char == \"'\" == true == false:\n            prime_length\
    \ = false\n            break\n        if char == \"'\" == true == false == false:\n\
    \            prime_length = false\n            break\n        if char == \"'\"\
    \ == true == false == false == false:\n            prime_length = false\n    \
    \        break\n        if char == \"'\" == true == false == false == false ==\
    \ false:\n            prime_length = false\n            break\n        if char\
    \ == \"'\" == true == false == false == false == false == false:\n           \
    \ prime_length = false\n            break\n        if char == \"'\" == true ==\
    \ false == false == false == false == false == false:\n            prime_length\
    \ = false\n            break\n        if char == \"'\" == true == false == false\
    \ == false == false == false == false == false:\n            prime_length = false\n\
    \            break\n        if char == \"'\" == true == false == false == false\
    \ == false == false == false == false == false:\n            prime_length = false\n\
    \            break\n        if char == \"'\" == true == false == false == false\
    \ == false == false == false == false == false == false:\n            prime_length\
    \ = false\n            break\n        if char == \"'\" == true == false == false\
    \ == false == false == false == false == false == false == false == false:\n \
    \           prime_length = false\n            break\n        if char == \"'\"\
    \ == true == false == false == false == false == false == false == false == false\
    \ == false == false:\n            prime_length = false\n            break\n  \
    \      if char == \"'\" == true == false == false == false == false == false ==\
    \ false == false == false == false == false == false:\n            prime_length\
    \ = false\n            break\n        if char == \"'\" == true == false == false\
    \ == false == false == false == false == false == false == false == false == false:\n\
    \            prime_length = false\n            break\n        if char == \"'\"\
    \ == true == false == false == false == false == false == false == false == false\
    \ == false == false == false:\n            prime_length = false\n            break\n\
    \        if char == \"'\" == true == false == false == false == false == \nusing\
    \ Test\n\n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"Hello\"\
    ) == true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"kittens\"\
    ) == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"wow\"\
    ) == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5m3gyiyl.jl:14\nin expression starting at\
    \ /tmp/tmp5m3gyiyl.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    prime_length::Bool = \n        true\n        for n in string:\n      \
    \      if n % 2 == 0 or n % 3 == 0 then \n                prime_length::Bool =\
    \ false\n            end\n        end\n    return prime_length\nend\n</cell>\n\
    <code language=julia-1.5>\nprime_length(\"Hello\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"abcdcba\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"\
    kittens\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"orange\")\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a string and returns True if the\
    \ string contains only letters a-z or A-Z or False otherwise\nExamples\nonly_letters(\"\
    Hello\") == True\nonly_letters(\"abcdcba\") == False\nonly_letters(\"kittens\"\
    ) == False\nonly_letters(\"orange\") == False\nonly_letters(\"123\") == False\n\
    only_letters(\"a123\") == False\nonly_letters(\"123a\") == False\nonly_letters(\"\
    a123a\") == True\nonly_letters(\"a123b\") == False\nonly_letters(\"a123c\") ==\
    \ False\nonly_letters(\"a123d\") == False\nonly_letters(\"a123e\") == False\n\
    only_letters(\"a123f\") == False\nonly_letters(\"a123g\") == False\nonly_letters(\"\
    a123h\") == False\nonly_letters(\"a123i\") == False\nonly_letters(\"a123j\") ==\
    \ False\nonly_letters(\"a123k\") == False\nonly_letters(\"a123l\") == False\n\
    only_letters(\"a123m\") == False\nonly_letters(\"a123n\") == False\nonly_letters(\"\
    a123o\") == False\nonly_letters(\"a123p\") == False\nonly_letters(\"a123q\") ==\
    \ False\nonly_letters(\"a123r\") == False\nonly_letters(\"a123s\") == False\n\
    only_letters(\"a123t\") == False\nonly_letters(\"a123u\") == False\nonly_letters(\"\
    a123v\") == False\nonly_letters(\"a123w\") == False\nonly_letters(\"a123x\") ==\
    \ False\nonly_letters(\"a123y\") == False\nonly_letters(\"a123z\") == False\n\
    only_letters(\"a123A\") == False\nonly_letters(\"a123B\") == False\nonly_letters(\"\
    a123C\") == False\nonly_letters(\"a123D\") == False\nonly_letters(\"a123E\") ==\
    \ False\nonly_letters(\"a123F\") == False\nonly_letters(\"a123G\") == False\n\
    only_letters(\"a123H\") == False\nonly_letters(\"a123\nusing Test\n\n@testset\
    \ begin\n\ncandidate = prime_length;\n\t@test(candidate(\"Hello\") == true)\n\t\
    @test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"kittens\") == true)\n\
    \t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"wow\") == true)\n\
    \t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\") == true)\n\
    \t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"\
    HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"gogo\"\
    ) == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4du90u2f.jl:13\nin expression starting at\
    \ /tmp/tmp4du90u2f.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    prime_length = 0\n    for i in string:\n        if i == 'a' or i == 'e'\
    \ or i == 'i' or i == 'o' or i == 'u':\n            prime_length += 1\n      \
    \  else:\n            prime_length = 0\n            break\n    return prime_length\
    \ == 1\n</code>\n<|/ a tags=python,primes |>\n<| a tags=python,primes |>\n<code>\n\
    def prime_number(n):\n    prime_numbers = []\n    for i in range(2, n):\n    \
    \    if n % i == 0:\n            prime_numbers.append(i)\n    return prime_numbers\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nPlease don't post only code as an answer,\
    \ but also provide an explanation of what your code does and how it solves the\
    \ problem of the question. Answers with an explanation are usually more helpful\
    \ and of better quality, and are more likely to attract upvotes.\n<|/ c |>\n<|\
    \ c |>\nPlease don't post only code as an answer. Explain what your code does\
    \ and how it solves the problem of the question.\n<|/ c |>\n<| a tags=python,primes\
    \ |>\n<code>\ndef prime_number(n):\n    prime_numbers = []\n    for i in range(2,\
    \ n):\n        if n % i == 0:\n            prime_numbers.append(i)\n    return\
    \ prime_numbers\n</code>\n<|/ a dscore=0 |>\n<| c |>\nPlease don't post only code\
    \ as an answer, but also provide an explanation of what your code does and how\
    \ it solves the problem of the question. Answers with an explanation are usually\
    \ more helpful and of better quality, and are more likely to attract upvotes.\n\
    <|/ c |>\n<| a tags=python,primes |>\n<code>\ndef prime_number(n):\n    prime_numbers\
    \ = []\n    for i in range(2, n):\n        if n % i == 0:\n            prime_numbers.append(i)\n\
    \    return prime_numbers\n</code>\n<|/ a dscore=0 |>\n<| c |>\nPlease don't post\
    \ only code as an answer, but also provide an explanation of what your code does\
    \ and how it solves the problem of the question. Answers with an explanation are\
    \ usually more helpful and of better quality, and are more likely to attract upvotes.\n\
    <|/ c |>\n<| a tags=python,primes |>\n<code>\ndef prime_number(n):\n    prime_numbers\
    \ = []\n    for i in range(2, n):\n        if n % i == 0:\n            prime_numbers.append(i)\n\
    \    return prime_numbers\n</code>\n<|/ a dscore=0 |>\n<| c |>\nPlease don't post\
    \ only code as an answer, but also provide \nusing Test\n\n@testset begin\n\n\
    candidate = prime_length;\n\t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"\
    abcdcba\") == true)\n\t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"\
    orange\") == false)\n\t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"\
    world\") == true)\n\t@test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"\
    Wow\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"HI\")\
    \ == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"gogo\") ==\
    \ false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqems6e_4.jl:12\nin expression starting at\
    \ /tmp/tmpqems6e_4.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_numbers = Set([2,3,5,7,11,13,17,19])\n    \n    for i in string:\n\
    \        if i in prime_numbers:\n            return False\n    return True\n</cell>\n\
    <cell>\nprime_length('Hello') == True\nprime_length('abcdcba') == True\nprime_length('kittens')\
    \ == True\nprime_length('orange') == False\n</cell>\n<text>\nExercise\nWrite a\
    \ function that takes a string and returns True if the string is a palindrome\
    \ or False otherwise\nExamples\npalindrome('racecar') == True\npalindrome('racecars')\
    \ == True\npalindrome('racecar') == False\npalindrome('racecars') == False\npalindrome('racecars')\
    \ == False\npalindrome('racecars') == False\npalindrome('racecars') == False\n\
    palindrome('racecars') == False\npalindrome('racecars') == False\npalindrome('racecars')\
    \ == False\npalindrome('racecars') == False\npalindrome('racecars') == False\n\
    palindrome('racecars') == False\npalindrome('racecars') == False\npalindrome('racecars')\
    \ == False\npalindrome('racecars') == False\npalindrome('racecars') == False\n\
    palindrome('racecars') == False\npalindrome('racecars') == False\npalindrome('racecars')\
    \ == False\npalindrome('racecars') == False\npalindrome('racecars') == False\n\
    palindrome('racecars') == False\npalindrome('racecars') == False\npalindrome('racecars')\
    \ == False\npalindrome('racecars') == False\npalindrome('racecars') == False\n\
    palindrome('racecars') == False\npalindrome('racecars') == False\npalindrome('racecars')\
    \ == False\npalindrome('racecars') == False\npalindrome('racecars') == False\n\
    palindrome('racecars') == False\npalindrome('racecars') == False\npalindrome('racecars')\
    \ == False\npalindrome('racecars') == False\npalindrome('racecars') == False\n\
    \nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"\
    Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"\
    kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"\
    wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcs31f53k.jl:14\nin expression starting at\
    \ /tmp/tmpcs31f53k.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_length = 0\n    \n    for char in string:\n        if char\
    \ == ' ':\n            continue\n        if char == '\\n':\n            continue\n\
    \        if char == '\\t':\n            continue\n        if char == '\\r':\n\
    \            continue\n        if char == '\\v':\n            continue\n     \
    \   if char == '\\f':\n            continue\n        if char == '\\a':\n     \
    \       continue\n        if char == '\\e':\n            continue\n        if\
    \ char == '\\%':\n            continue\n        if char == '\\*':\n          \
    \  continue\n        if char == '\\(' or char == '\\)':\n            continue\n\
    \        if char == '\\[' or char == '\\]':\n            continue\n        if\
    \ char == '\\{'  or char == '\\}':\n            continue\n        if char == '\\\
    <' or char == '\\>':\n            continue\n        if char == '\\^':\n      \
    \      continue\n        if char == '\\~':\n            continue\n        if char\
    \ == '\\=':\n            continue\n        if char == '\\!':\n            continue\n\
    \        if char == '\\?':\n            continue\n        if char == '\\:':\n\
    \            continue\n        if char == '\\;':\n            continue\n     \
    \   if char == '\\<' or char == '\\>':\n            continue\n        if char\
    \ == '\\<' or char == '\\>':\n            continue\n        if char == '\\<' or\
    \ char == '\\>':\n            continue\n        if char == '\\<' or char == '\\\
    >':\n            continue\n        if char == '\\<' or char == '\\>':\n      \
    \      continue\n        if char == '\\<' or char == '\\>':\n            continue\n\
    \        if char == '\\<' or char == '\\>':\n            continue\n        if\
    \ char == '\\<' or char == '\\>':\n            continue\n        if char == '\\\
    <' or char == '\\>':\n            continue\n        if char == '\\<' or char ==\
    \ '\\>':\n            continue\n        if char == '\\<' or char == '\\>':\n \
    \           continue\n        if char == '\\<' or char == '\\>':\n           \
    \ continue\n        if char == '\\<' or char == '\\>':\n            continue\n\
    \        if char == '\\<' or char == '\\>':\n            continue\n        if\
    \ char == '\\<' or char == '\\>':\n            continue\n        if char == '\\\
    <' or char == '\\>':\n            continue\n        if char == '\\<' or char ==\
    \ '\\>':\n            continue\n        if char == '\\<' or char == '\\>':\n \
    \           continue\n        if char == '\\<' or char == '\\>':\n           \
    \ continue\n        if char == '\\<' or char == '\\>':\n            continue\n\
    \        if char == '\\<' or char == '\\>':\n            continue\nusing Test\n\
    \n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"Hello\") ==\
    \ true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"kittens\"\
    ) == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"wow\"\
    ) == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa1a188zo.jl:14\nin expression starting at\
    \ /tmp/tmpa1a188zo.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_length = 0\n    \n    for char in string:\n        if char\
    \ == \"'\":\n            return False\n        if char == \"n\":\n           \
    \ return False\n        if char == \"p\":\n            return False\n        if\
    \ char == \"t\":\n            return False\n        if char == \"s\":\n      \
    \      return False\n        if char == \"h\":\n            return False\n   \
    \     if char == \"o\":\n            return False\n        if char == \"r\":\n\
    \            return False\n        if char == \"d\":\n            return False\n\
    \        if char == \"c\":\n            return False\n        if char == \"b\"\
    :\n            return False\n        if char == \"a\":\n            return False\n\
    \        if char == \"m\":\n            return False\n        if char == \"e\"\
    :\n            return False\n        if char == \"g\":\n            return False\n\
    \        if char == \"i\":\n            return False\n        if char == \"l\"\
    :\n            return False\n        if char == \"n\":\n            return False\n\
    \        if char == \"g\":\n            return False\n        if char == \"e\"\
    :\n            return False\n        if char == \"r\":\n            return False\n\
    \        if char == \"a\":\n            return False\n        if char == \"y\"\
    :\n            return False\n        if char == \"u\":\n            return False\n\
    \        if char == \"i\":\n            return False\n        if char == \"o\"\
    :\n            return False\n        if char == \"n\":\n            return False\n\
    \        if char == \"t\":\n            return False\n        if char == \"s\"\
    :\n            return False\n        if char == \"h\":\n            return False\n\
    \        if char == \"r\":\n            return False\n        if char == \"d\"\
    :\n            return False\n        if char == \"c\":\n            return False\n\
    \        if char == \"b\":\n            return False\n        if char == \"a\"\
    :\n            return False\n        if char == \"m\":\n            return False\n\
    \        if char == \"e\":\n            return False\n        if char == \"g\"\
    :\n            return False\n        if char == \"i\":\n            return False\n\
    \        if char == \"l\":\n            return False\n        if char == \"n\"\
    :\n            return False\n        if char == \"g\":\n            return False\n\
    \        if char == \"e\":\n            return False\n        if char == \"r\"\
    :\n            return False\n        if char == \"a\":\n            return False\n\
    \        if char == \"y\":\n            return False\n        if char == \"u\"\
    :\n            return False\n        if char == \"i\":\n            return False\n\
    \        if char == \"o\":\n            return False\n        if char == \"n\"\
    :\n            return False\n        if char == \"t\":\n            return False\n\
    \        if char == \"s\":\n            return False\n        if char == \"h\"\
    :\n            return False\n        if char == \"r\":\n            return False\n\
    \        if char == \"d\":\n            return False\n        if char == \"c\"\
    :\n            return False\n        if char == \"b\":\n            return False\n\
    \        if char == \"a\":\n            return False\n        if char == \"m\"\
    :\n            return False\n        if char == \"e\":\n            return False\n\
    \        if char == \"g\":\n            return False\n        if char == \"i\"\
    :\n            return False\n        if char == \"l\":\n            return False\n\
    \        if char == \"n\":\n            return False\n        if char\nusing Test\n\
    \n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"Hello\") ==\
    \ true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"kittens\"\
    ) == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"wow\"\
    ) == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpahyr7hi2.jl:14\nin expression starting at\
    \ /tmp/tmpahyr7hi2.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_numbers = primes(string)\n    \n    if prime_numbers == []\n\
    \        true\n    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    prime_length(\"Hello\")\n</cell>\n<code language=julia-1.3>\nprime_length(\"abcdcba\"\
    )\n</cell>\n<code language=julia-1.3>\nprime_length(\"kittens\")\n</cell>\n<code\
    \ language=julia-1.3>\nprime_length(\"orange\")\n</cell>\n<text>\nExercise\nWrite\
    \ a function that takes a string and returns True if the string is a palindrome\
    \ or False otherwise\nExamples\npalindrome(\"racecar\") == True\npalindrome(\"\
    racecars\") == False\npalindrome(\"racecarc\") == True\npalindrome(\"racecarce\"\
    ) == False\npalindrome(\"racecarc\") == False\npalindrome(\"racecarce\") == False\n\
    palindrome(\"racecarce\") == False\npalindrome(\"racecarce\") == False\npalindrome(\"\
    racecarce\") == False\npalindrome(\"racecarce\") == False\npalindrome(\"racecarce\"\
    ) == False\npalindrome(\"racecarce\") == False\npalindrome(\"racecarce\") == False\n\
    palindrome(\"racecarce\") == False\npalindrome(\"racecarce\") == False\npalindrome(\"\
    racecarce\") == False\npalindrome(\"racecarce\") == False\npalindrome(\"racecarce\"\
    ) == False\npalindrome(\"racecarce\") == False\npalindrome(\"racecarce\") == False\n\
    palindrome(\"racecarce\") == False\npalindrome(\"racecarce\") == False\npalindrome(\"\
    racecarce\") == False\npalindrome(\"racecarce\") == False\npalindrome(\"racecarce\"\
    ) == False\npalindrome(\"racecarce\") == False\npalindrome(\"racecarce\") == False\n\
    palindrome(\"racecarce\") == False\npalindrome(\"racecarce\") == False\npalindrome(\"\
    racecarce\") == False\npalindrome(\"racecarce\") == False\npalindrome(\"racecarce\"\
    ) == False\npalindrome(\"racecarce\") == False\npalindrome(\"racecarce\") == False\n\
    palindrome(\"racecarce\nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\
    \t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\
    \t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\
    \t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t\
    @test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") ==\
    \ true)\n\t@test(candidate(\"gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\"\
    ) == false)\n\t@test(candidate(\"Madam\") == true)\n\t@test(candidate(\"M\") ==\
    \ false)\n\t@test(candidate(\"0\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbig_2kx0.jl:19\nin expression starting at\
    \ /tmp/tmpbig_2kx0.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_numbers = Set([2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97])\n\
    \    \n    for character in string:\n        if character in prime_numbers:\n\
    \            return False\n    return True\n</cell>\n<cell>\nprime_length('Hello')\
    \ == True\nprime_length('abcdcba') == True\nprime_length('kittens') == True\n\
    prime_length('orange') == False\n</cell>\n<text>\nExercise 7\nWrite a function\
    \ that takes a string and returns True if the string contains any uppercase letters\
    \ or False otherwise\nExamples\nhas_uppercase_letters('Hello') == True\nhas_uppercase_letters('HELLO')\
    \ == True\nhas_uppercase_letters('HELLOWORLD') == False\nhas_uppercase_letters('HELLOWORLD')\
    \ == False\nhas_uppercase_letters('HELLOWORLD') == False\nhas_uppercase_letters('HELLOWORLD')\
    \ == False\nhas_uppercase_letters('HELLOWORLD') == False\nhas_uppercase_letters('HELLOWORLD')\
    \ == False\nhas_uppercase_letters('HELLOWORLD') == False\nhas_uppercase_letters('HELLOWORLD')\
    \ == False\nhas_uppercase_letters('HELLOWORLD') == False\nhas_uppercase_letters('HELLOWORLD')\
    \ == False\nhas_uppercase_letters('HELLOWORLD') == False\nhas_uppercase_letters('HELLOWORLD')\
    \ == False\nhas_uppercase_letters('HELLOWORLD') == False\nhas_uppercase_letters('HELLOWORLD')\
    \ == False\nhas_uppercase_letters('HELLOWORLD') == False\nhas_uppercase_letters('HELLOWORLD')\
    \ == False\nhas_uppercase_letters('HELLOWORLD') == False\nhas_uppercase_letters('HELLOWORLD')\
    \ == False\nhas_uppercase_letters('HELLOWORLD') == False\nhas_uppercase_letters('HELLOWORLD')\
    \ == False\nhas_uppercase_letters('HELLOWORLD') == False\nhas_uppercase_letters('HELLOWORLD')\
    \ == False\nhas_uppercase_letters('HELLOWORLD') == False\nhas_uppercase_letters('HELLOWORLD')\
    \ == False\nhas_uppercase_letters('HELLOWORLD') == False\nhas_uppercase_letters('HELLOWORLD')\
    \ == False\nhas_uppercase_letters('HELLOWORLD') == False\nhas_uppercase_letters('HELLOWORLD')\
    \ == False\nhas_uppercase_letters('HELLOWORLD') == False\nhas_uppercase_letters('\n\
    using Test\n\n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"\
    Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"\
    kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"\
    wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqmesvr3a.jl:14\nin expression starting at\
    \ /tmp/tmpqmesvr3a.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_numbers = prime_numbers(string)\n    \n    if prime_numbers\
    \ == []\n        \n        return false\n    \n    else \n        \n        return\
    \ true\n    \nend\n</cell>\n<code language=julia-1.5>\nprime_length(\"Hello\"\
    )\n</cell>\n<code language=julia-1.5>\nprime_length(\"abcdcba\")\n</cell>\n<code\
    \ language=julia-1.5>\nprime_length(\"kittens\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"orange\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a string and returns True if the string has all letters capitalized\nExamples\n\
    capitalize_letters(\"Hello\") == True\ncapitalize_letters(\"HELLO\") == False\n\
    capitalize_letters(\"kittens\") == False\ncapitalize_letters(\"orange\") == False\n\
    Hint: Use isupper() function\nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\
    \t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\
    \t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\
    \t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t\
    @test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") ==\
    \ true)\n\t@test(candidate(\"gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\"\
    ) == false)\n\t@test(candidate(\"Madam\") == true)\n\t@test(candidate(\"M\") ==\
    \ false)\n\t@test(candidate(\"0\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc9h3vy6s.jl:22\nin expression starting at\
    \ /tmp/tmpc9h3vy6s.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_length = true\n    \n    for i in string:\n        if i ==\
    \ 'a' or i == 'e' or i == 'i' or i == 'o' or i == 'u':\n            prime_length\
    \ = false\n            break\n        \n    if prime_length == true:\n       \
    \ for i in string:\n            if i == 'a' or i == 'e' or i == 'i' or i == 'o'\
    \ or i == 'u':\n                prime_length = false\n                break\n\
    \        \n    if prime_length == true:\n        for i in string:\n          \
    \  if i == 'a' or i == 'e' or i == 'i' or i == 'o' or i == 'u':\n            \
    \    prime_length = false\n                break\n        \n    if prime_length\
    \ == true:\n        for i in string:\n            if i == 'a' or i == 'e' or i\
    \ == 'i' or i == 'o' or i == 'u':\n                prime_length = false\n    \
    \            break\n        \n    if prime_length == true:\n        for i in string:\n\
    \            if i == 'a' or i == 'e' or i == 'i' or i == 'o' or i == 'u':\n  \
    \              prime_length = false\n                break\n        \n    if prime_length\
    \ == true:\n        for i in string:\n            if i == 'a' or i == 'e' or i\
    \ == 'i' or i == 'o' or i == 'u':\n                prime_length = false\n    \
    \            break\n        \n    if prime_length == true:\n        for i in string:\n\
    \            if i == 'a' or i == 'e' or i == 'i' or i == 'o' or i == 'u':\n  \
    \              prime_length = false\n                break\n        \n    if prime_length\
    \ == true:\n        for i in string:\n            if i == 'a' or i == 'e' or i\
    \ == 'i' or i == 'o' or i == 'u':\n                prime_length = false\n    \
    \            break\n        \n    if prime_length == true:\n        for i in string:\n\
    \            if i == 'a' or i == 'e' or i == 'i' or i == 'o' or i == 'u':\n  \
    \              prime_length = false\n                break\n        \n    if prime_length\
    \ == true:\n        for i in string:\n            if i == 'a' or i == 'e' or i\
    \ == 'i' or i == 'o' or i == 'u':\n                prime_length = false\n    \
    \            break\n        \n    if prime_length == true:\n        for i in string:\n\
    \            if i == 'a' or i == 'e' or i == 'i' or i == 'o' or i == 'u':\n  \
    \              prime_length = false\n                break\n        \n    if prime_length\
    \ == true:\n        for i in string:\n            if i == 'a' or i == 'e' or i\
    \ == 'i' or i == 'o' or i == 'u':\n                prime_length = \nusing Test\n\
    \n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"Hello\") ==\
    \ true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"kittens\"\
    ) == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"wow\"\
    ) == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5filin_y.jl:14\nin expression starting at\
    \ /tmp/tmp5filin_y.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_numbers = prime_numbers()\n    \n    for i in string\n   \
    \     if prime_numbers.contains(i)\n            return false\n    return true\n\
    end\n</cell>\n<code language=julia-1.0>\nprime_length(\"Hello\")\n</cell>\n<code\
    \ language=julia-1.0>\nprime_length(\"abcdcba\")\n</cell>\n<code language=julia-1.0>\n\
    prime_length(\"kittens\")\n</cell>\n<code language=julia-1.0>\nprime_length(\"\
    orange\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and\
    \ returns True if the string contains any character that is a vowel (a, e, i,\
    \ o, u) or False otherwise\nExamples\nvowel_contains(\"Hello\") == True\nvowel_contains(\"\
    abcdcba\") == True\nvowel_contains(\"kittens\") == True\nvowel_contains(\"orange\"\
    ) == False\nvowel_contains(\"banana\") == False\nvowel_contains(\"apple\") ==\
    \ False\nvowel_contains(\"abracadabra\") == False\nvowel_contains(\"abracadabra\"\
    ) == False\nvowel_contains(\"abracadabra\") == False\nvowel_contains(\"abracadabra\"\
    ) == False\nvowel_contains(\"abracadabra\") == False\nvowel_contains(\"abracadabra\"\
    ) == False\nvowel_contains(\"abracadabra\") == False\nvowel_contains(\"abracadabra\"\
    ) == False\nvowel_contains(\"abracadabra\") == False\nvowel_contains(\"abracadabra\"\
    ) == False\nvowel_contains(\"abracadabra\") == False\nvowel_contains(\"abracadabra\"\
    ) == False\nvowel_contains(\"abracadabra\") == False\nvowel_contains(\"abracadabra\"\
    ) == False\nvowel_contains(\"abracadabra\") == False\nvowel_contains(\"abracadabra\"\
    ) == False\nvowel_contains(\"abracadabra\") == False\nvowel_contains(\"abracadabra\"\
    ) == False\nvowel_contains(\"abracadabra\") == False\nvowel_contains(\"abracadabra\"\
    ) == False\nvowel_contains(\"abracadabra\") == False\nvowel_contains(\"abracadabra\"\
    ) == False\nvowel_contains(\"abracadabra\") == False\nvowel_contains(\"abracadabra\"\
    ) == False\nvowel_contains(\"abracadabra\") == False\nvowel_contains(\"abracadabra\"\
    ) == False\nvowel_contains(\"abracadab\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prime_length;\n\t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"\
    abcdcba\") == true)\n\t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"\
    orange\") == false)\n\t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"\
    world\") == true)\n\t@test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"\
    Wow\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"HI\")\
    \ == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"gogo\") ==\
    \ false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppj8cc4oc.jl:18\nin expression starting at\
    \ /tmp/tmppj8cc4oc.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_numbers = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n\
    \    \n    for i in string:\n        if i in prime_numbers:\n            return\
    \ False\n    return True\n\"\"\"\nWrite a function that takes a string and returns\
    \ True if the string\n    contains only letters or False otherwise\n    Examples\n\
    \    letters_only('Hello') == True\n    letters_only('abcdcba') == True\n    letters_only('kittens')\
    \ == False\n    letters_only('orange') == False\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = prime_length;\n\t@test(candidate(\"Hello\") == true)\n\t\
    @test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"kittens\") == true)\n\
    \t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"wow\") == true)\n\
    \t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\") == true)\n\
    \t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"\
    HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"gogo\"\
    ) == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbedef2zy.jl:14\nin expression starting at\
    \ /tmp/tmpbedef2zy.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    if string == \"\"\n        return true\n    \n    prime_numbers\
    \ = [2,3]\n    \n    for i in string\n        \n        if prime_numbers.contains(i)\n\
    \            prime_numbers.append(i)\n            \n        else\n           \
    \ prime_numbers = [2]\n            \n    end\n    \n    for i in prime_numbers\n\
    \        \n        if string.contains(i)\n            return false\n    end\n\
    \    \n    return true\nend\n</cell>\n<code language=julia-1.5>\nprime_length(\"\
    Hello\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"abcdcba\")\n</cell>\n\
    <code language=julia-1.5>\nprime_length(\"kittens\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"orange\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns True if the string contains only letters a-z or A-Z or\
    \ False otherwise\nExamples\nonly_letters('Hello') == True\nonly_letters('abcdcba')\
    \ == False\nonly_letters('kittens') == False\nonly_letters('orange') == False\n\
    only_letters('') == False\nonly_letters(' ') == False\nonly_letters(' ') == False\n\
    only_letters(' ') == False\nonly_letters(' ') == False\nonly_letters(' ') == False\n\
    only_letters(' ') == False\nonly_letters(' ') == False\nonly_letters(' ') == False\n\
    only_letters(' ') == False\nonly_letters(' ') == False\nonly_letters(' ') == False\n\
    only_letters(' ') == False\nonly_letters(' ') == False\nonly_letters(' ') == False\n\
    only_letters(' ') == False\nonly_letters(' ') == False\nonly_letters(' ') == False\n\
    only_letters(' ') == False\nonly_letters(' ') == False\nonly_letters(' ') == False\n\
    only_letters(' ') == False\nonly_letters(' ') == False\nonly_letters(' ') == False\n\
    only_letters(' ') == False\nonly_letters(' ') == False\nonly_letters(' ') == False\n\
    only_letters(' ') == False\nonly_letters(' ') == False\nonly_letters(' ') == False\n\
    only_letters(' ') == False\nonly_letters(' ') == False\nonly_letters(' ') == False\n\
    only_letters(' ') == False\nonly_letters(' ') == False\nonly_letters(' ') == False\n\
    only_letters(' ') == False\nonly_letters(' ') == False\nonly_letters(' ') == False\n\
    only_letters(' ') == False\nonly_letters(' ') == False\nonly_letters(' ') == False\n\
    only_letters('\nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\t\
    @test(candidate(\"Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\
    \t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\
    \t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t\
    @test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") ==\
    \ true)\n\t@test(candidate(\"gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\"\
    ) == false)\n\t@test(candidate(\"Madam\") == true)\n\t@test(candidate(\"M\") ==\
    \ false)\n\t@test(candidate(\"0\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0h4ov_vz.jl:34\nin expression starting at\
    \ /tmp/tmp0h4ov_vz.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_numbers = prime_numbers()\n    \n    for i in string\n   \
    \     if prime_numbers.contains(i)\n            return false\n    return true\n\
    end\n</cell>\n<code language=julia-1.0>\nprime_length(\"Hello\")\n</cell>\n<code\
    \ language=julia-1.0>\nprime_length(\"abcdcba\")\n</cell>\n<code language=julia-1.0>\n\
    prime_length(\"kittens\")\n</cell>\n<code language=julia-1.0>\nprime_length(\"\
    orange\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and\
    \ returns True if the string contains any uppercase letter\nor False otherwise\n\
    Examples\nhas_uppercase(\"Hello\") == True\nhas_uppercase(\"abcdcba\") == False\n\
    has_uppercase(\"kittens\") == False\nhas_uppercase(\"orange\") == False\nNotes\n\
    The function should use regular expressions\nThe function should use string methods\n\
    The function should use string methods\nThe function should use string methods\n\
    The function should use string methods\nThe function should use string methods\n\
    The function should use string methods\nThe function should use string methods\n\
    The function should use string methods\nThe function should use string methods\n\
    The function should use string methods\nThe function should use string methods\n\
    The function should use string methods\nThe function should use string methods\n\
    The function should use string methods\nThe function should use string methods\n\
    The function should use string methods\nThe function should use string methods\n\
    The function should use string methods\nThe function should use string methods\n\
    The function should use string methods\nThe function should use string methods\n\
    The function should use string methods\nThe function should use string methods\n\
    The function should use string methods\nThe function should use string methods\n\
    The function should use string methods\nThe function should use string methods\n\
    The function should use string methods\nThe function should use string methods\n\
    The function should use string methods\nThe function should use string methods\n\
    The function should use string methods\nThe function should use string methods\n\
    The function should use string methods\nThe function should use string methods\n\
    The function should use string methods\nThe function should use string methods\n\
    The function should use string methods\nThe function should use string methods\n\
    The function should use string methods\nThe function should use string methods\n\
    The function should use string methods\nThe function should use string methods\n\
    The function should use string methods\nThe function should use string methods\n\
    The function should use string methods\nThe function should use string methods\n\
    The function should use string methods\nThe function \nusing Test\n\n@testset\
    \ begin\n\ncandidate = prime_length;\n\t@test(candidate(\"Hello\") == true)\n\t\
    @test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"kittens\") == true)\n\
    \t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"wow\") == true)\n\
    \t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\") == true)\n\
    \t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"\
    HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"gogo\"\
    ) == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa67gmzxg.jl:18\nin expression starting at\
    \ /tmp/tmpa67gmzxg.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_numbers = primes(string)\n    \n    if prime_numbers == []\n\
    \        true\n    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"Hello\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"abcdcba\"\
    )\n</cell>\n<code language=julia-1.5>\nprime_length(\"kittens\")\n</cell>\n<code\
    \ language=julia-1.5>\nprime_length(\"orange\")\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a string and returns True if the string is a palindrome\
    \ or False otherwise\nExamples\npalindrome(\"racecar\") == True\npalindrome(\"\
    racecars\") == False\npalindrome(\"A man, a plan, a canal: Panama\") == True\n\
    palindrome(\"A man, a plan, a canal: Panama\") == False\npalindrome(\"A man, a\
    \ plan, a canal: Panama\") == False\npalindrome(\"A man, a plan, a canal: Panama\"\
    ) == False\npalindrome(\"A man, a plan, a canal: Panama\") == False\npalindrome(\"\
    A man, a plan, a canal: Panama\") == False\npalindrome(\"A man, a plan, a canal:\
    \ Panama\") == False\npalindrome(\"A man, a plan, a canal: Panama\") == False\n\
    palindrome(\"A man, a plan, a canal: Panama\") == False\npalindrome(\"A man, a\
    \ plan, a canal: Panama\") == False\npalindrome(\"A man, a plan, a canal: Panama\"\
    ) == False\npalindrome(\"A man, a plan, a canal: Panama\") == False\npalindrome(\"\
    A man, a plan, a canal: Panama\") == False\npalindrome(\"A man, a plan, a canal:\
    \ Panama\") == False\npalindrome(\"A man, a plan, a canal: Panama\") == False\n\
    palindrome(\"A man, a plan, a canal: Panama\") == False\npalindrome(\"A man, a\
    \ plan, a canal: Panama\") == False\npalindrome(\"A man, a plan, a canal: Panama\"\
    ) == False\npalindrome(\"A man, a plan, a canal: Panama\") == \nusing Test\n\n\
    @testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"Hello\") == true)\n\
    \t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"kittens\") == true)\n\
    \t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"wow\") == true)\n\
    \t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\") == true)\n\
    \t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"\
    HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"gogo\"\
    ) == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyxbl2bya.jl:19\nin expression starting at\
    \ /tmp/tmpyxbl2bya.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_numbers = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n\
    \    \n    for i in prime_numbers\n        if string == i\n            return\
    \ true\n    return false\nend\n</cell>\n<code language=julia-1.4>\nprime_length(\"\
    Hello\")\n</cell>\n<code language=julia-1.4>\nprime_length(\"abcdcba\")\n</cell>\n\
    <code language=julia-1.4>\nprime_length(\"kittens\")\n</cell>\n<code language=julia-1.4>\n\
    prime_length(\"orange\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns True if the string contains only letters a-z or A-Z or\
    \ False otherwise\nExamples\nletter_only_alphabet('Hello') == True\nletter_only_alphabet('abcdcba')\
    \ == True\nletter_only_alphabet('kittens') == False\nletter_only_alphabet('orange')\
    \ == False\nletter_only_alphabet('') == False\nletter_only_alphabet(123) == False\n\
    letter_only_alphabet(true) == False\nletter_only_alphabet([1,2,3]) == False\n\
    letter_only_alphabet([1,2,3]) == False\nletter_only_alphabet([1,2,3]) == False\n\
    letter_only_alphabet([1,2,3]) == False\nletter_only_alphabet([1,2,3]) == False\n\
    letter_only_alphabet([1,2,3]) == False\nletter_only_alphabet([1,2,3]) == False\n\
    letter_only_alphabet([1,2,3]) == False\nletter_only_alphabet([1,2,3]) == False\n\
    letter_only_alphabet([1,2,3]) == False\nletter_only_alphabet([1,2,3]) == False\n\
    letter_only_alphabet([1,2,3]) == False\nletter_only_alphabet([1,2,3]) == False\n\
    letter_only_alphabet([1,2,3]) == False\nletter_only_alphabet([1,2,3]) == False\n\
    letter_only_alphabet([1,2,3]) == False\nletter_only_alphabet([1,2,3]) == False\n\
    letter_only_alphabet([1,2,3]) == False\nletter_only_alphabet([1,2,3]) == False\n\
    letter_only_alphabet([1,2,3]) == False\nletter_only_alphabet([1,2,3]) == False\n\
    letter_only_alphabet([1,2,3]) == False\nletter_only_alphabet([1,2,3]) == False\n\
    letter_only_alphabet([1,2,3]) == False\nletter_only_alphabet([1,2,3]) == False\n\
    letter_only_alphabet([1,2,3]) == False\nletter_only_alphabet([1,2,3]) == False\n\
    letter_only_alphabet([1,2,3]) == False\nletter_only_alphabet([1,2,3]) == False\n\
    letter_only_alphabet([1,2,3]) == False\nletter_only_alphabet([1,2,3]) == False\n\
    letter_only_alphabet([1,2,3]\nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\
    \t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\
    \t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\
    \t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t\
    @test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") ==\
    \ true)\n\t@test(candidate(\"gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\"\
    ) == false)\n\t@test(candidate(\"Madam\") == true)\n\t@test(candidate(\"M\") ==\
    \ false)\n\t@test(candidate(\"0\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph2zh0ji7.jl:18\nin expression starting at\
    \ /tmp/tmph2zh0ji7.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_numbers = prime_numbers()\n    \n    prime_numbers_set = Set(prime_numbers)\n\
    \    \n    prime_numbers_set.add(0)\n    \n    prime_numbers_set.add(1)\n    \n\
    \    prime_numbers_set.add(2)\n    \n    prime_numbers_set.add(3)\n    \n    prime_numbers_set.add(5)\n\
    \    \n    prime_numbers_set.add(7)\n    \n    prime_numbers_set.add(11)\n   \
    \ \n    prime_numbers_set.add(13)\n    \n    prime_numbers_set.add(17)\n    \n\
    \    prime_numbers_set.add(19)\n    \n    prime_numbers_set.add(23)\n    \n  \
    \  prime_numbers_set.add(29)\n    \n    prime_numbers_set.add(31)\n    \n    prime_numbers_set.add(37)\n\
    \    \n    prime_numbers_set.add(41)\n    \n    prime_numbers_set.add(43)\n  \
    \  \n    prime_numbers_set.add(47)\n    \n    prime_numbers_set.add(53)\n    \n\
    \    prime_numbers_set.add(59)\n    \n    prime_numbers_set.add(61)\n    \n  \
    \  prime_numbers_set.add(67)\n    \n    prime_numbers_set.add(71)\n    \n    prime_numbers_set.add(73)\n\
    \    \n    prime_numbers_set.add(79)\n    \n    prime_numbers_set.add(83)\n  \
    \  \n    prime_numbers_set.add(89)\n    \n    prime_numbers_set.add(97)\n    \n\
    \    prime_numbers_set.add(101)\n    \n    prime_numbers_set.add(103)\n    \n\
    \    prime_numbers_set.add(107)\n    \n    prime_numbers_set.add(109)\n    \n\
    \    prime_numbers_set.add(111)\n    \n    prime_numbers_set.add(127)\n    \n\
    \    prime_numbers_set.add(131)\n    \n    prime_numbers_set.add(137)\n    \n\
    \    prime_numbers_set.add(139)\n    \n    prime_numbers_set.add(149)\n    \n\
    \    prime_numbers_set.add(151)\n    \n    prime_numbers_set.add(157)\n    \n\
    \    prime_numbers_set.add(163)\n    \n    prime_numbers_set.add(167)\n    \n\
    \    prime_\nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"\
    Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"\
    kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"\
    wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp2eqnrqx7.jl:9\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2eqnrqx7.jl:1\n\
    in expression starting at /tmp/tmp2eqnrqx7.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_length = true\n    \n    for i in string:\n        if i ==\
    \ 'a' or i == 'e' or i == 'i' or i == 'o' or i == 'u':\n            prime_length\
    \ = false\n            break\n        \n    if prime_length == true:\n       \
    \ for i in string:\n            if i == 'a' or i == 'e' or i == 'i' or i == 'o'\
    \ or i == 'u':\n                prime_length = false\n                break\n\
    \                \n    return prime_length\n</cell>\n<cell>\nprime_length('Hello')\
    \ == True\nprime_length('abcdcba') == True\nprime_length('kittens') == True\n\
    prime_length('orange') == False\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a string and returns True if the string contains only letters a-z\
    \ or A-Z or False otherwise\nExamples\nonly_letters('Hello') == True\nonly_letters('abcdcba')\
    \ == True\nonly_letters('kittens') == False\nonly_letters('orange') == False\n\
    only_letters('') == False\nonly_letters(' ') == False\nonly_letters(' ') == False\n\
    only_letters(' ') == False\nonly_letters(' ') == False\nonly_letters(' ') == False\n\
    only_letters(' ') == False\nonly_letters(' ') == False\nonly_letters(' ') == False\n\
    only_letters(' ') == False\nonly_letters(' ') == False\nonly_letters(' ') == False\n\
    only_letters(' ') == False\nonly_letters(' ') == False\nonly_letters(' ') == False\n\
    only_letters(' ') == False\nonly_letters(' ') == False\nonly_letters(' ') == False\n\
    only_letters(' ') == False\nonly_letters(' ') == False\nonly_letters(' ') == False\n\
    only_letters(' ') == False\nonly_letters(' ') == False\nonly_letters(' ') == False\n\
    only_letters(' ') == False\nonly_letters(' ') == False\nonly_letters(' ') == False\n\
    only_letters(' ') == False\nonly_letters(' ') == False\nonly_letters(' ') == False\n\
    only_letters(' ') == False\nonly_letters(' ') == False\nonly_letters(' ') == False\n\
    only_letters(' ') == False\nonly_letters(' ') == False\nonly_letters(' ') == False\n\
    only_letters(' ') == False\nonly_letters(' ') == False\nonly_letters(' ') == False\n\
    only_letters(' ') == False\nonly_letters(' ') == False\nonly_letters(' ') == False\n\
    only_letters(' ') == False\nonly_letters(' ') == False\nonly_letters(' ') == \n\
    using Test\n\n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"\
    Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"\
    kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"\
    wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp71zcoxm2.jl:14\nin expression starting at\
    \ /tmp/tmp71zcoxm2.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_numbers = primes(string)\n    \n    for prime in prime_numbers\n\
    \        if prime > string.length\n            false\n        else \n        \
    \    true\n    end\nend\n</cell>\n<code language=julia-1.5>\nprime_length(\"Hello\"\
    )\n</cell>\n<code language=julia-1.5>\nprime_length(\"abcdcba\")\n</cell>\n<code\
    \ language=julia-1.5>\nprime_length(\"kittens\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"orange\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns True if the string is a palindrome or False otherwise\n\
    Examples\npalindrome(\"racecar\") == True\npalindrome(\"racecars\") == False\n\
    palindrome(\"racecarc\") == False\npalindrome(\"racecarc\") == False\npalindrome(\"\
    racecarc\") == False\npalindrome(\"racecarc\") == False\npalindrome(\"racecarc\"\
    ) == False\npalindrome(\"racecarc\") == False\npalindrome(\"racecarc\") == False\n\
    palindrome(\"racecarc\") == False\npalindrome(\"racecarc\") == False\npalindrome(\"\
    racecarc\") == False\npalindrome(\"racecarc\") == False\npalindrome(\"racecarc\"\
    ) == False\npalindrome(\"racecarc\") == False\npalindrome(\"racecarc\") == False\n\
    palindrome(\"racecarc\") == False\npalindrome(\"racecarc\") == False\npalindrome(\"\
    racecarc\") == False\npalindrome(\"racecarc\") == False\npalindrome(\"racecarc\"\
    ) == False\npalindrome(\"racecarc\") == False\npalindrome(\"racecarc\") == False\n\
    palindrome(\"racecarc\") == False\npalindrome(\"racecarc\") == False\npalindrome(\"\
    racecarc\") == False\npalindrome(\"racecarc\") == False\npalindrome(\"racecarc\"\
    ) == False\npalindrome(\"racecarc\") == False\npalindrome(\"racecarc\") == False\n\
    palindrome(\"racecarc\") == False\npalindrome(\"racecarc\") == False\npalindrome(\"\
    racecarc\") == False\npalindrome(\"racecarc\") == False\np\nusing Test\n\n@testset\
    \ begin\n\ncandidate = prime_length;\n\t@test(candidate(\"Hello\") == true)\n\t\
    @test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"kittens\") == true)\n\
    \t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"wow\") == true)\n\
    \t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\") == true)\n\
    \t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"\
    HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"gogo\"\
    ) == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_jvm2wxx.jl:20\nin expression starting at\
    \ /tmp/tmp_jvm2wxx.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    if string == \"\"\n        true\n    else\n        if string.length\
    \ % 2 == 0\n            false\n        else\n            if string.length % 3\
    \ == 0\n                true\n            else\n                if string.length\
    \ % 5 == 0\n                    true\n                else\n                 \
    \   if string.length % 7 == 0\n                        true\n                \
    \    else\n                        false\n</code>\n<|/ a tags=string,haskell,primes\
    \ |>\n<| c |>\nI believe that `if string.length % 2 == 0` should be `if string.length\
    \ % 2 == 1`\n<|/ c |>\n<| c |>\n`if string.length % 2 == 1` would also work, but\
    \ `if string.length % 2 == 0` would be more efficient.\n<|/ c |>\n<| c |>\nI believe\
    \ that `if string.length % 2 == 0` should be `if string.length % 2 == 1`\n<|/\
    \ c |>\n<| c |>\n`if string.length % 2 == 1` would also work, but `if string.length\
    \ % 2 == 0` would be more efficient.\n<|/ c |>\n<| c |>\n`if string.length % 2\
    \ == 1` would also work, but `if string.length % 2 == 0` would be more efficient.\n\
    <|/ c |>\n<| a dscore=2 |>\nThe first thing that comes to mind is to check each\
    \ character in the string and see if it is divisible by any number between 2 and\
    \ its length. \n<code>\nisPrime :: String -> Bool\nisPrime s = all (\\c -> c `mod`\
    \ length s == 0) [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n\
    </code>\n<|/ a tags=string,haskell,primes |>\n<| c |>\nThis would work but is\
    \ inefficient. `all (\\c -> c `mod` length s == 0) [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]`\
    \ can be written as `all (\\c -> c `mod` length s == 0) [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]`\n\
    <|/ c |>\n<| c |>\nYes, I know, but I wanted to show that it is possible to do\
    \ it without hav\nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\t\
    @test(candidate(\"Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\
    \t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\
    \t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t\
    @test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") ==\
    \ true)\n\t@test(candidate(\"gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\"\
    ) == false)\n\t@test(candidate(\"Madam\") == true)\n\t@test(candidate(\"M\") ==\
    \ false)\n\t@test(candidate(\"0\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpza6_ais8.jl:27\nin expression starting at\
    \ /tmp/tmpza6_ais8.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_length::Bool = false \n    \n    if string == \"\" \n    \
    \    prime_length = true \n    else \n        prime_length = false \n        \n\
    \        for i in string\n            if string[i] == 0 \n                prime_length\
    \ = false \n                break \n            else \n                prime_length\
    \ = true \n                break \n    return prime_length \nend \n</cell>\n<code\
    \ language=julia-1.5>\nprime_length(\"Hello\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"abcdcba\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"\
    kittens\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"orange\")\n</cell>\n\
    <text>\nWrite a function that takes a string and returns True if the string contains\
    \ only letters a-z or A-Z or False otherwise\nExamples\nonly_letters('Hello')\
    \ == True\nonly_letters('abcdcba') == True\nonly_letters('kittens') == False\n\
    only_letters('orange') == False\nonly_letters('') == False\nonly_letters(' ')\
    \ == False\nonly_letters(' ') == False\nonly_letters(' ') == False\nonly_letters('\
    \ ') == False\nonly_letters(' ') == False\nonly_letters(' ') == False\nonly_letters('\
    \ ') == False\nonly_letters(' ') == False\nonly_letters(' ') == False\nonly_letters('\
    \ ') == False\nonly_letters(' ') == False\nonly_letters(' ') == False\nonly_letters('\
    \ ') == False\nonly_letters(' ') == False\nonly_letters(' ') == False\nonly_letters('\
    \ ') == False\nonly_letters(' ') == False\nonly_letters(' ') == False\nonly_letters('\
    \ ') == False\nonly_letters(' ') == False\nonly_letters(' ') == False\nonly_letters('\
    \ ') == False\nonly_letters(' ') == False\nonly_letters(' ') == False\nonly_letters('\
    \ ') == False\nonly_letters(' ') == False\nonly_letters(' ') == False\nonly_letters('\
    \ ') == False\nonly_letters(' ') == False\nonly_letters(' ') == False\nonly_letters('\
    \ ') == False\nonly_letters(' ') == False\nonly_letters(' ') == False\nonly_letters('\
    \ ') == False\nonly_letters(' ') == False\nonly_letters(' ') == False\nonly_letters('\
    \ ') == False\nonly_letters(' ') == False\nonly_letters(' ') == False\nonly_letters('\
    \ ') == False\nonly_letters(' ') == False\nonly_letters(' ') == False\nonly_letters('\
    \ ') == False\nonly_letters(' ') == \nusing Test\n\n@testset begin\n\ncandidate\
    \ = prime_length;\n\t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"\
    abcdcba\") == true)\n\t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"\
    orange\") == false)\n\t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"\
    world\") == true)\n\t@test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"\
    Wow\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"HI\")\
    \ == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"gogo\") ==\
    \ false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2z3qhe4p.jl:27\nin expression starting at\
    \ /tmp/tmp2z3qhe4p.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_numbers = primes(string)\n    \n    for i in prime_numbers\n\
    \        if string.count(i) == string.count(i) + 1 \n            then return False\n\
    \        else return True\nend\n</cell>\n<code language=julia-1.4>\nprime_length(\"\
    Hello\")\n</cell>\n<code language=julia-1.4>\nprime_length(\"abcdcba\")\n</cell>\n\
    <code language=julia-1.4>\nprime_length(\"kittens\")\n</cell>\n<code language=julia-1.4>\n\
    prime_length(\"orange\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns True if the string is a palindrome or False otherwise\n\
    Examples\npalindrome(\"abba\") == True\npalindrome(\"abba\") == False\npalindrome(\"\
    abbaab\") == True\npalindrome(\"abbaab\") == False\npalindrome(\"abbaabba\") ==\
    \ True\npalindrome(\"abbaabba\") == False\npalindrome(\"abbaabbaab\") == True\n\
    palindrome(\"abbaabbaab\") == False\npalindrome(\"abbaabbaabba\") == True\npalindrome(\"\
    abbaabbaabba\") == False\npalindrome(\"abbaabbaabbaab\") == True\npalindrome(\"\
    abbaabbaabbaab\") == False\npalindrome(\"abbaabbaabbaabba\") == True\npalindrome(\"\
    abbaabbaabbaabba\") == False\npalindrome(\"abbaabbaabbaabbaab\") == True\npalindrome(\"\
    abbaabbaabbaabbaab\") == False\npalindrome(\"abbaabbaabbaabbaabba\") == True\n\
    palindrome(\"abbaabbaabbaabbaabba\") == False\npalindrome(\"abbaabbaabbaabbaabbaab\"\
    ) == True\npalindrome(\"abbaabbaabbaabbaabbaab\") == False\npalindrome(\"abbaabbaabbaabbaabbaabba\"\
    ) == True\npalindrome(\"abbaabbaabbaabbaabbaab\") == False\npalindrome(\"abbaabbaabbaabbaabbaabba\"\
    ) == True\npalindrome(\"abbaabbaabbaabbaabbaabba\") == False\npalindro\nusing\
    \ Test\n\n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"Hello\"\
    ) == true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"kittens\"\
    ) == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"wow\"\
    ) == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp6n6utavj.jl:15\nin expression starting at /tmp/tmp6n6utavj.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_numbers = Set{Int}()\n    \n    for i in 2..length(string)\n\
    \        if prime_numbers.contains(i)\n            prime_numbers.remove(i)\n \
    \       else\n            prime_numbers.add(i)\n        end\n    end\n    \n \
    \   return prime_numbers.size == length(string)\nend\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"Hello\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"abcdcba\"\
    )\n</cell>\n<code language=julia-1.5>\nprime_length(\"kittens\")\n</cell>\n<code\
    \ language=julia-1.5>\nprime_length(\"orange\")\n</cell>\n<text>\nWrite a function\
    \ that takes a string and returns True if the string is a palindrome or False\
    \ otherwise\nExamples\npalindrome(\"racecar\") == True\npalindrome(\"racecars\"\
    ) == False\npalindrome(\"racecarc\") == True\npalindrome(\"racecarce\") == False\n\
    palindrome(\"racecarc\") == False\npalindrome(\"racecarce\") == False\npalindrome(\"\
    racecarc\") == False\npalindrome(\"racecarce\") == False\npalindrome(\"racecarc\"\
    ) == False\npalindrome(\"racecarce\") == False\npalindrome(\"racecarc\") == False\n\
    palindrome(\"racecarce\") == False\npalindrome(\"racecarc\") == False\npalindrome(\"\
    racecarce\") == False\npalindrome(\"racecarc\") == False\npalindrome(\"racecarce\"\
    ) == False\npalindrome(\"racecarc\") == False\npalindrome(\"racecarce\") == False\n\
    palindrome(\"racecarc\") == False\npalindrome(\"racecarce\") == False\npalindrome(\"\
    racecarc\") == False\npalindrome(\"racecarce\") == False\npalindrome(\"racecarc\"\
    ) == False\npalindrome(\"racecarce\") == False\npalindrome(\"racecarc\") == False\n\
    palindrome(\"racecarce\") == False\npalindrome(\"racecarc\") == False\npalindrome(\"\
    racecarce\") == False\npalindrome(\"racecarc\") == False\npalindrome(\"racecarce\"\
    ) == False\npalindrome(\"racecarc\") == False\npalindrome(\"racecarce\") == False\n\
    palindro\nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"\
    Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"\
    kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"\
    wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplb95jmrg.jl:23\nin expression starting at\
    \ /tmp/tmplb95jmrg.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    if string == \"\"\n        return true\n    \n    prime_numbers::Vector{Int}\
    \ = 2:2:2\n    \n    for character in string\n        if character == character[1]\n\
    \            prime_numbers[prime_numbers.length-1] += 1\n        else\n      \
    \      prime_numbers[prime_numbers.length-1] = 1\n        end\n    end\n    \n\
    \    for number in prime_numbers\n        if number == string.length\n       \
    \     return true\n        end\n    end\n    \n    return false\nend\n</cell>\n\
    <code language=julia-1.3>\nprime_length(\"Hello\")\n</cell>\n<code language=julia-1.3>\n\
    prime_length(\"abcdcba\")\n</cell>\n<code language=julia-1.3>\nprime_length(\"\
    kittens\")\n</cell>\n<code language=julia-1.3>\nprime_length(\"orange\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns True if the\
    \ string is a palindrome or False otherwise\nExamples\npalindrome(\"kittens\"\
    ) == True\npalindrome(\"racecar\") == True\npalindrome(\"racecars\") == False\n\
    palindrome(\"racecarc\") == False\npalindrome(\"racecarce\") == False\npalindrome(\"\
    racecarcec\") == False\npalindrome(\"racecarceca\") == False\npalindrome(\"racecarcecba\"\
    ) == False\npalindrome(\"racecarcecbace\") == False\npalindrome(\"racecarcecbacec\"\
    ) == False\npalindrome(\"racecarcecbacecba\") == False\npalindrome(\"racecarcecbacecbace\"\
    ) == False\npalindrome(\"racecarcecbacecbacec\") == False\npalindrome(\"racecarcecbacecbacecba\"\
    ) == False\npalindrome(\"racecarcecbacecbacecbace\") == False\npalindrome(\"racecarcecbacecbacecbacec\"\
    ) == False\npalindrome(\"racecarcecbacecbacecbaceca\") == False\npalindrome(\"\
    racecarcecbacecbacecbacecba\") == False\npalindrome(\"racecarcecbacecbacecbacecbace\"\
    ) == False\npalindrome(\"racecarcecbacecbacecbacec\nusing Test\n\n@testset begin\n\
    \ncandidate = prime_length;\n\t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"\
    abcdcba\") == true)\n\t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"\
    orange\") == false)\n\t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"\
    world\") == true)\n\t@test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"\
    Wow\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"HI\")\
    \ == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"gogo\") ==\
    \ false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppn4ru8rr.jl:32\nin expression starting at\
    \ /tmp/tmppn4ru8rr.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_length::Bool = false \n    \n    for char in string:\n   \
    \     if char == \"'\" \n            prime_length = false \n        else \n  \
    \          if char == \"'\" \n                prime_length = true \n         \
    \   else \n                if char == \"'\" \n                    prime_length\
    \ = false \n                else \n                    if char == \"'\" \n   \
    \                     prime_length = true \n                    else \n      \
    \                  if char == \"'\" \n                            prime_length\
    \ = false \n                        else \n                            if char\
    \ == \"'\" \n                                prime_length = true \n          \
    \                  else \n                                if char == \"'\" \n\
    \                                    prime_length = false \n                 \
    \               else \n                                    if char == \"'\" \n\
    \                                        prime_length = true \n              \
    \                      else \n                                        if char\
    \ == \"'\" \n                                            prime_length = false\
    \ \n                                        else \n                          \
    \                  if char == \"'\" \n                                       \
    \         prime_length = true \n                                            else\
    \ \n                                                if char == \"'\" \n      \
    \                                              prime_length = false \n       \
    \                                         else \n                            \
    \                        if char == \"'\" \n                                 \
    \                       prime_length = true \n                               \
    \                     else \n                                                \
    \        if char == \"'\" \n                                                 \
    \           prime_length = false \n                                          \
    \              else \n                                                       \
    \     if char == \"'\" \n                                                    \
    \            prime_length = true \n                                          \
    \                  else \n                                                   \
    \             if char == \"'\" \n                                            \
    \                        prime_length = false \n                             \
    \                                   else \n                                  \
    \                                  if char == \"'\" \n                       \
    \                                                 prime_length = true \n     \
    \                                                               else \n      \
    \                                                  if char == \"'\" \n       \
    \                                                     prime_length = false \n\
    \                                                        else \n             \
    \                                               if char == \"'\" \n          \
    \                                                      prime_length = true \n\
    \                                                            else \n         \
    \                                                       if char == \"'\" \n  \
    \                                                                  prime_length\
    \ = false \n                                                                else\
    \ \n                                                                    if char\
    \ == \"'\" \n                                                                \
    \        prime_length = true \n                                              \
    \                      else \n                                               \
    \         if char == \"'\" \n                                                \
    \            prime_length = false \n                                         \
    \               else \n                                                      \
    \      if char == \"'\" \n                                                   \
    \             prime_length = true \n                                         \
    \                   else \n                                                  \
    \              if char == \"'\" \n                                           \
    \                         prime_length = false \n                            \
    \                                    else \n                                 \
    \                                   if char == \"'\" \n                      \
    \                                                  prime_length = true \n    \
    \                                                                else \n     \
    \                                                   if char == \"'\" \n      \
    \                                                      prime_length = false \n\
    \                                                        else \n             \
    \                                               if char == \"'\" \n          \
    \                                                      prime_length = true \n\
    \                                                            else \n         \
    \                                                       if char == \"'\" \n  \
    \                                                                  prime_length\
    \ = false \n                                                                else\
    \ \n                                                                    if char\
    \ == \"'\" \n                                                                \
    \        prime_length = true \n                                              \
    \                      else \n                                               \
    \         if char == \"'\" \n                                                \
    \            prime_length = false \n                                         \
    \               else \n                                                      \
    \      if char == \"'\" \n                                                   \
    \             prime_length = true \n                                         \
    \                   else \n                                                  \
    \              if char == \"'\" \n                                           \
    \                         \nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\
    \t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\
    \t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\
    \t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t\
    @test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") ==\
    \ true)\n\t@test(candidate(\"gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\"\
    ) == false)\n\t@test(candidate(\"Madam\") == true)\n\t@test(candidate(\"M\") ==\
    \ false)\n\t@test(candidate(\"0\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp78cn1xxy.jl:14\nin expression starting at\
    \ /tmp/tmp78cn1xxy.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_length::Bool = False \n    \n    for i in string:\n      \
    \  if prime_length == True:\n            break\n        if i == '':\n        \
    \    break\n        if i == 'a' or i == 'e' or i == 'i' or i == 'o' or i == 'u':\n\
    \            prime_length = True\n            break\n        if i == 'n':\n  \
    \          prime_length = False\n            break\n        if i == 't':\n   \
    \         prime_length = False\n            break\n        if i == 'h':\n    \
    \        prime_length = False\n            break\n        if i == 'l':\n     \
    \       prime_length = False\n            break\n        if i == 'o':\n      \
    \      prime_length = False\n            break\n        if i == 'r':\n       \
    \     prime_length = False\n            break\n        if i == 's':\n        \
    \    prime_length = False\n            break\n        if i == 'c':\n         \
    \   prime_length = False\n            break\n        if i == 'd':\n          \
    \  prime_length = False\n            break\n        if i == 'b':\n           \
    \ prime_length = False\n            break\n        if i == 'g':\n            prime_length\
    \ = False\n            break\n        if i == 'f':\n            prime_length =\
    \ False\n            break\n        if i == 'v':\n            prime_length = False\n\
    \            break\n        if i == 'm':\n            prime_length = False\n \
    \           break\n        if i == 'p':\n            prime_length = False\n  \
    \          break\n        if i == 'y':\n            prime_length = False\n   \
    \         break\n        if i == 'k':\n            prime_length = False\n    \
    \        break\n        if i == 'x':\n            prime_length = False\n     \
    \       break\n        if i == 'q':\n            prime_length = False\n      \
    \      break\n        if i == 'z':\n            prime_length = False\n       \
    \     break\n        if i == 'w':\n            prime_length = False\n        \
    \    break\n        if i == 'v':\n            prime_length = False\n         \
    \   break\n        if i == 'u':\n            prime_length = False\n          \
    \  break\n        if i == 't':\n            prime_length = False\n           \
    \ break\n        if i == 'x':\n            prime_length = False\n            break\n\
    \        if i == 'y':\n            prime_length = False\n            break\n \
    \       if i == 'z':\n            prime_length = False\n            break\n  \
    \      if i == 'w':\n            prime_length = False\n            break\n   \
    \     if i == 'v':\n            prime_length = False\n            break\n    \
    \    if i == 'u':\n            prime_length = False\n            break\n     \
    \   if i == 't':\n            prime_length = False\n            break\n      \
    \  if i == 'x':\n            prime_length = False\n            break\n       \
    \ if i == 'y\nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"\
    Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"\
    kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"\
    wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprs49stb7.jl:14\nin expression starting at\
    \ /tmp/tmprs49stb7.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_numbers = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n\
    \    \n    for i in prime_numbers\n        if string == i\n            return\
    \ true\n        else\n            return false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"Hello\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"abcdcba\"\
    )\n</cell>\n<code language=julia-1.5>\nprime_length(\"kittens\")\n</cell>\n<code\
    \ language=julia-1.5>\nprime_length(\"orange\")\n</cell>\n<text>\nWrite a function\
    \ that takes a string and returns True if the string contains only letters a-z\
    \ or A-Z or False otherwise\nExamples\nletter_only_letters(\"Hello\") == True\n\
    letter_only_letters(\"abcdcba\") == False\nletter_only_letters(\"kittens\") ==\
    \ False\nletter_only_letters(\"orange\") == False\nletter_only_letters(\"ABC\"\
    ) == False\nletter_only_letters(\"aBc\") == False\nletter_only_letters(\"aBc123\"\
    ) == False\nletter_only_letters(\"aBc123!\") == False\nletter_only_letters(\"\
    aBc123!!\") == False\nletter_only_letters(\"aBc123!!!\") == False\nletter_only_letters(\"\
    aBc123!!!\") == False\nletter_only_letters(\"aBc123!!!!\") == False\nletter_only_letters(\"\
    aBc123!!!!!\") == False\nletter_only_letters(\"aBc123!!!!!!\") == False\nletter_only_letters(\"\
    aBc123!!!!!!\") == False\nletter_only_letters(\"aBc123!!!!!!!\") == False\nletter_only_letters(\"\
    aBc123!!!!!!!!\") == False\nletter_only_letters(\"aBc123!!!!!!!!!\") == False\n\
    letter_only_letters(\"aBc123!!!!!!!!!\") == False\nletter_only_letters(\"aBc123!!!!!!!!!\"\
    ) == False\nletter_only_letters(\"aBc123!!!!!!!!!!\") == False\nletter_only_letters(\"\
    aBc123!!!!!!!!!!!\") == False\nletter_only_letters(\"aBc123!!!!!!!!!!!!\") ==\
    \ False\nletter_only_letters(\"aBc123!!!!!!!!!!!!\") == False\nletter_only_letters(\"\
    aBc123!!!!!!!!!!!!\") == False\nletter_only_letters(\"aBc123!!!!!!!!!!!!!\") ==\
    \ False\nletter_only_letters(\"aBc123!!!!!!!!!!!!\nusing Test\n\n@testset begin\n\
    \ncandidate = prime_length;\n\t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"\
    abcdcba\") == true)\n\t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"\
    orange\") == false)\n\t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"\
    world\") == true)\n\t@test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"\
    Wow\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"HI\")\
    \ == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"gogo\") ==\
    \ false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv2uf7v86.jl:20\nin expression starting at\
    \ /tmp/tmpv2uf7v86.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_length::Bool = false \n    \n    prime_length::Bool = false\
    \ \n    \n    prime_length::Bool = false \n    \n    prime_length::Bool = false\
    \ \n    \n    prime_length::Bool = false \n    \n    prime_length::Bool = false\
    \ \n    \n    prime_length::Bool = false \n    \n    prime_length::Bool = false\
    \ \n    \n    prime_length::Bool = false \n    \n    prime_length::Bool = false\
    \ \n    \n    prime_length::Bool = false \n    \n    prime_length::Bool = false\
    \ \n    \n    prime_length::Bool = false \n    \n    prime_length::Bool = false\
    \ \n    \n    prime_length::Bool = false \n    \n    prime_length::Bool = false\
    \ \n    \n    prime_length::Bool = false \n    \n    prime_length::Bool = false\
    \ \n    \n    prime_length::Bool = false \n    \n    prime_length::Bool = false\
    \ \n    \n    prime_length::Bool = false \n    \n    prime_length::Bool = false\
    \ \n    \n    prime_length::Bool = false \n    \n    prime_length::Bool = false\
    \ \n    \n    prime_length::Bool = false \n    \n    prime_length::Bool = false\
    \ \n    \n    prime_length::Bool = false \n    \n    prime_length::Bool = false\
    \ \n    \n    prime_length::Bool = false \n    \n    prime_length::Bool = false\
    \ \n    \n    prime_length::Bool = false \n    \n    prime_length::Bool = false\
    \ \n    \n    prime_length::Bool = false \n    \n    prime_length::Bool = false\
    \ \n    \n    prime_length::Bool = false \n    \n    prime_length::Bool = false\
    \ \n    \n    prime_length::Bool = false \n    \n    prime_length::Bool = false\
    \ \n    \n    prime_length::Bool = false \n    \n    prime_length::Bool = false\
    \ \n    \n    prime_length::Bool = false \n    \n    prime_length::Bool = false\
    \ \n    \n    prime_length::Bool = false \n    \n    prime_length::Bool = false\
    \ \n    \n    prime_length::Bool = false \n    \n    prime_length::Bool = false\
    \ \n    \n    prime_length\nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\
    \t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\
    \t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\
    \t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t\
    @test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") ==\
    \ true)\n\t@test(candidate(\"gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\"\
    ) == false)\n\t@test(candidate(\"Madam\") == true)\n\t@test(candidate(\"M\") ==\
    \ false)\n\t@test(candidate(\"0\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpvzrkg9_w.jl:9\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpvzrkg9_w.jl:1\n\
    in expression starting at /tmp/tmpvzrkg9_w.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_numbers = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n\
    \    \n    for i in prime_numbers\n        if string.length == i\n           \
    \ return true\n    return false\nend\n</cell>\n<code language=julia-1.5>\nprime_length(\"\
    Hello\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"abcdcba\")\n</cell>\n\
    <code language=julia-1.5>\nprime_length(\"kittens\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"orange\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns True if the string is a palindrome or False otherwise\n\
    Examples\npalindrome(\"kittens\") == True\npalindrome(\"hello\") == False\npalindrome(\"\
    kitten\") == False\npalindrome(\"abba\") == True\npalindrome(\"abbaab\") == True\n\
    palindrome(\"abbaaba\") == False\npalindrome(\"abba\") == False\npalindrome(\"\
    abbaab\") == False\npalindrome(\"abbaaba\") == False\npalindrome(\"abbaabba\"\
    ) == True\npalindrome(\"abbaabbaab\") == True\npalindrome(\"abbaabbaaba\") ==\
    \ False\npalindrome(\"abbaabba\") == False\npalindrome(\"abbaabbaab\") == False\n\
    palindrome(\"abbaabbaaba\") == False\npalindrome(\"abbaabba\") == False\npalindrome(\"\
    abbaabbaab\") == False\npalindrome(\"abbaabbaaba\") == False\npalindrome(\"abbaabba\"\
    ) == False\npalindrome(\"abbaabbaab\") == False\npalindrome(\"abbaabbaaba\") ==\
    \ False\npalindrome(\"abbaabba\") == False\npalindrome(\"abbaabbaab\") == False\n\
    palindrome(\"abbaabbaaba\") == False\npalindrome(\"abbaabba\") == False\npalindrome(\"\
    abbaabbaab\") == False\npalindrome(\"abbaabbaaba\") == False\npalindrome(\"abbaabba\"\
    ) == False\npalindro\nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\
    \t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\
    \t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\
    \t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t\
    @test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") ==\
    \ true)\n\t@test(candidate(\"gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\"\
    ) == false)\n\t@test(candidate(\"Madam\") == true)\n\t@test(candidate(\"M\") ==\
    \ false)\n\t@test(candidate(\"0\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5m7pt4fj.jl:18\nin expression starting at\
    \ /tmp/tmp5m7pt4fj.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_length = true\n    \n    for i in string:\n        if i ==\
    \ 'a' or i == 'e' or i == 'i' or i == 'o' or i == 'u':\n            prime_length\
    \ = false\n            break\n    \n    return prime_length\n\"\"\"\nWrite a function\
    \ that takes a string and returns True if the string\n    contains only letters\
    \ or False otherwise\n    Examples\n    letters_only('Hello') == True\n    letters_only('abcdcba')\
    \ == True\n    letters_only('kittens') == False\n    letters_only('orange') ==\
    \ False\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\
    \t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\
    \t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\
    \t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t\
    @test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") ==\
    \ true)\n\t@test(candidate(\"gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\"\
    ) == false)\n\t@test(candidate(\"Madam\") == true)\n\t@test(candidate(\"M\") ==\
    \ false)\n\t@test(candidate(\"0\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp93542c_l.jl:14\nin expression starting at\
    \ /tmp/tmp93542c_l.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_numbers = prime_numbers()\n    \n    prime_numbers_set = Set(prime_numbers)\n\
    \    \n    prime_numbers_set.remove(string)\n    \n    if prime_numbers_set.length()\
    \ == 0 \n        then return true\n        else return false\n    \nend\n</cell>\n\
    <code language=julia-1.5>\nprime_length(\"Hello\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"abcdcba\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"\
    kittens\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"orange\")\n</cell>\n\
    <text>\nWrite a function that takes a string and returns True if the string\n\
    \    contains any letter 'a' or 'b' or 'c' or 'd' or 'e' or 'f' or 'g' or 'h'\
    \ or 'i' or 'j' or 'k' or 'l' or 'm' or 'n' or 'o' or 'p' or 'q' or 'r' or 's'\
    \ or 't' or 'u' or 'v' or 'w' or 'x' or 'y' or 'z'\n    Examples\n    contains_letters('Hello')\
    \ == True\n    contains_letters('abcdcba') == True\n    contains_letters('kittens')\
    \ == True\n    contains_letters('orange') == False\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"Hello\") == true)\n\
    \t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"kittens\") == true)\n\
    \t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"wow\") == true)\n\
    \t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\") == true)\n\
    \t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"\
    HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"gogo\"\
    ) == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpt259cukp.jl:18\nin expression starting at /tmp/tmpt259cukp.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_length::Bool = False \n    \n    prime_length::Bool = is_prime(string)\
    \ == True \n    \n    return prime_length \nend \n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"Hello\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"abcdcba\"\
    )\n</cell>\n<code language=julia-1.5>\nprime_length(\"kittens\")\n</cell>\n<code\
    \ language=julia-1.5>\nprime_length(\"orange\")\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a string and returns True if the string is a palindrome\
    \ or False otherwise\nExamples\npalindrome(\"racecar\") == True\npalindrome(\"\
    racecars\") == False\npalindrome(\"A man, a plan, a canal: Panama\") == True\n\
    palindrome(\"A man, a plan, a canal: Panama\") == False\npalindrome(\"A man, a\
    \ plan, a canal: Panama\") == False\npalindrome(\"A man, a plan, a canal: Panama\"\
    ) == False\npalindrome(\"A man, a plan, a canal: Panama\") == False\npalindrome(\"\
    A man, a plan, a canal: Panama\") == False\npalindrome(\"A man, a plan, a canal:\
    \ Panama\") == False\npalindrome(\"A man, a plan, a canal: Panama\") == False\n\
    palindrome(\"A man, a plan, a canal: Panama\") == False\npalindrome(\"A man, a\
    \ plan, a canal: Panama\") == False\npalindrome(\"A man, a plan, a canal: Panama\"\
    ) == False\npalindrome(\"A man, a plan, a canal: Panama\") == False\npalindrome(\"\
    A man, a plan, a canal: Panama\") == False\npalindrome(\"A man, a plan, a canal:\
    \ Panama\") == False\npalindrome(\"A man, a plan, a canal: Panama\") == False\n\
    palindrome(\"A man, a plan, a canal: Panama\") == False\npalindrome(\"A man, a\
    \ plan, a canal: Panama\") == False\npalindrome(\"A man, a plan, a canal: Panama\"\
    ) == False\npalindrome(\"A man, a plan, a canal: P\nusing Test\n\n@testset begin\n\
    \ncandidate = prime_length;\n\t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"\
    abcdcba\") == true)\n\t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"\
    orange\") == false)\n\t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"\
    world\") == true)\n\t@test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"\
    Wow\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"HI\")\
    \ == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"gogo\") ==\
    \ false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: multiple type declarations for \"prime_length\"\
    \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmplaq0egy6.jl:1\nin expression\
    \ starting at /tmp/tmplaq0egy6.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_length::Bool = \n        true\n    \n    for i in string:\n\
    \        if prime_length::Bool = \n            false\n        else\n         \
    \   prime_length::Bool = \n                true\n        end\n    end\nend\n</cell>\n\
    <code language=julia-1.0>\nprime_length(\"Hello\")\n</cell>\n<code language=julia-1.0>\n\
    prime_length(\"abcdcba\")\n</cell>\n<code language=julia-1.0>\nprime_length(\"\
    kittens\")\n</cell>\n<code language=julia-1.0>\nprime_length(\"orange\")\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a string and returns True if the\
    \ string is a palindrome or False otherwise\nExamples\npalindrome(\"racecar\"\
    ) == True\npalindrome(\"racecars\") == False\npalindrome(\"racecarc\") == True\n\
    palindrome(\"racecarce\") == False\npalindrome(\"racecarc\") == False\npalindrome(\"\
    racecarce\") == False\npalindrome(\"racecarce\") == False\npalindrome(\"racecarce\"\
    ) == False\npalindrome(\"racecarce\") == False\npalindrome(\"racecarce\") == False\n\
    palindrome(\"racecarce\") == False\npalindrome(\"racecarce\") == False\npalindrome(\"\
    racecarce\") == False\npalindrome(\"racecarce\") == False\npalindrome(\"racecarce\"\
    ) == False\npalindrome(\"racecarce\") == False\npalindrome(\"racecarce\") == False\n\
    palindrome(\"racecarce\") == False\npalindrome(\"racecarce\") == False\npalindrome(\"\
    racecarce\") == False\npalindrome(\"racecarce\") == False\npalindrome(\"racecarce\"\
    ) == False\npalindrome(\"racecarce\") == False\npalindrome(\"racecarce\") == False\n\
    palindrome(\"racecarce\") == False\npalindrome(\"racecarce\") == False\npalindrome(\"\
    racecarce\") == False\npalindrome(\"racecarce\") == False\npalindrome(\"racecarce\"\
    ) == False\npalindrome(\"racecarce\") == False\npalindrome(\"racecarce\") == False\n\
    palindrome(\"racecarce\") == False\npalindrome(\"racecarce\") == False\npalin\n\
    using Test\n\n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"\
    Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"\
    kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"\
    wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpucrei38_.jl:15\nin expression starting at\
    \ /tmp/tmpucrei38_.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_length::Bool = false\n    \n    if string == \"\"\n      \
    \  prime_length::Bool = true\n    else\n        prime_length::Bool = prime_length(string.tail)\
    \ == true\n    \n    return prime_length\nend\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"Hello\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"abcdcba\"\
    )\n</cell>\n<code language=julia-1.5>\nprime_length(\"kittens\")\n</cell>\n<code\
    \ language=julia-1.5>\nprime_length(\"orange\")\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a string and returns True if the string is a palindrome\
    \ or False otherwise\nExamples\npalindrome(\"abba\") == True\npalindrome(\"abba\"\
    ) == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"\
    abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\n\
    palindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abba\"\
    ) == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"\
    abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\n\
    palindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abba\"\
    ) == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"\
    abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\n\
    palindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abba\"\
    ) == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"\
    abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\n\
    palindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abba\"\
    ) == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\np\n\
    using Test\n\n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"\
    Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"\
    kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"\
    wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdb4oja3d.jl:20\nin expression starting at\
    \ /tmp/tmpdb4oja3d.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_length = 0\n    \n    for i in string:\n        if i == 'a'\
    \ or i == 'e' or i == 'i' or i == 'o' or i == 'u':\n            prime_length +=\
    \ 0\n        elif i == 'b' or i == 'c' or i == 'd' or i == 'f' or i == 'g' or\
    \ i == 'h':\n            prime_length += 0\n        elif i == 'j' or i == 'k'\
    \ or i == 'l' or i == 'm' or i == 'n' or i == 'p':\n            prime_length +=\
    \ 0\n        elif i == 'q' or i == 'r' or i == 's' or i == 't' or i == 'v' or\
    \ i == 'w':\n            prime_length += 0\n        elif i == 'x' or i == 'y'\
    \ or i == 'z':\n            prime_length += 0\n        else:\n            prime_length\
    \ += 0\n    \n    if prime_length == 0:\n        return False\n    else:\n   \
    \     return True\n\"\"\"\nWrite a function that takes a string and returns True\
    \ if the string\n    contains only letters a-z or A-Z or False otherwise\n   \
    \ Examples\n    contains_only_letters('Hello') == True\n    contains_only_letters('abcdcba')\
    \ == True\n    contains_only_letters('kittens') == False\n    contains_only_letters('orange')\
    \ == False\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\
    \t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\
    \t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\
    \t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t\
    @test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") ==\
    \ true)\n\t@test(candidate(\"gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\"\
    ) == false)\n\t@test(candidate(\"Madam\") == true)\n\t@test(candidate(\"M\") ==\
    \ false)\n\t@test(candidate(\"0\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpim8cg7w9.jl:14\nin expression starting at\
    \ /tmp/tmpim8cg7w9.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_numbers = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n\
    \    \n    for i in string:\n        if i in prime_numbers:\n            prime_numbers.remove(i)\n\
    \            \n    if prime_numbers == []:\n        return True\n    else:\n \
    \       return False\n\"\"\"\nWrite a function that takes a string and returns\
    \ True if the string\n    contains only letters or False otherwise\n    Examples\n\
    \    letters_only('Hello') == True\n    letters_only('abcdcba') == True\n    letters_only('kittens')\
    \ == False\n    letters_only('orange') == False\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = prime_length;\n\t@test(candidate(\"Hello\") == true)\n\t\
    @test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"kittens\") == true)\n\
    \t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"wow\") == true)\n\
    \t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\") == true)\n\
    \t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"\
    HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"gogo\"\
    ) == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx2hmv8vv.jl:14\nin expression starting at\
    \ /tmp/tmpx2hmv8vv.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_length = true\n    \n    for i in string:\n        if i ==\
    \ 'a' or i == 'e' or i == 'i' or i == 'o' or i == 'u':\n            prime_length\
    \ = false\n            break\n        \n    if prime_length == true:\n       \
    \ return true\n    else:\n        return false\nend\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"Hello\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"abcdcba\"\
    )\n</cell>\n<code language=julia-1.5>\nprime_length(\"kittens\")\n</cell>\n<code\
    \ language=julia-1.5>\nprime_length(\"orange\")\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a string and returns True if the string contains only\
    \ letters a-z or A-Z or False otherwise\nExamples\nonly_letters('Hello') == True\n\
    only_letters('abcdcba') == False\nonly_letters('kittens') == False\nonly_letters('orange')\
    \ == False\nonly_letters('') == False\nonly_letters(' ') == False\nonly_letters('\
    \ ') == False\nonly_letters(' ') == False\nonly_letters(' ') == False\nonly_letters('\
    \ ') == False\nonly_letters(' ') == False\nonly_letters(' ') == False\nonly_letters('\
    \ ') == False\nonly_letters(' ') == False\nonly_letters(' ') == False\nonly_letters('\
    \ ') == False\nonly_letters(' ') == False\nonly_letters(' ') == False\nonly_letters('\
    \ ') == False\nonly_letters(' ') == False\nonly_letters(' ') == False\nonly_letters('\
    \ ') == False\nonly_letters(' ') == False\nonly_letters(' ') == False\nonly_letters('\
    \ ') == False\nonly_letters(' ') == False\nonly_letters(' ') == False\nonly_letters('\
    \ ') == False\nonly_letters(' ') == False\nonly_letters(' ') == False\nonly_letters('\
    \ ') == False\nonly_letters(' ') == False\nonly_letters(' ') == False\nonly_letters('\
    \ ') == False\nonly_letters(' ') == False\nonly_letters(' ') == False\nonly_letters('\
    \ ') == False\nonly_letters(' ') == False\nonly_letters(' ') == False\nonly_letters('\
    \ ') == False\nonly_letters(' ') == False\nonly_letters(' ') == False\nonly_letters('\
    \ ') == False\nonly_letters(' ') == False\nonly_letters(' ') == False\nonly_letters('\
    \ ') == False\nonly_letters(' ') == False\nonly_letters(' ') == False\nonly_letters('\
    \ ') == False\nonly_\nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\
    \t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\
    \t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\
    \t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t\
    @test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") ==\
    \ true)\n\t@test(candidate(\"gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\"\
    ) == false)\n\t@test(candidate(\"Madam\") == true)\n\t@test(candidate(\"M\") ==\
    \ false)\n\t@test(candidate(\"0\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqrwhkt4n.jl:14\nin expression starting at\
    \ /tmp/tmpqrwhkt4n.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_numbers = prime_numbers()\n    \n    for i in string\n   \
    \     if i in prime_numbers\n            return false\n    return true\nend\n\
    </cell>\n<code language=julia-1.5>\nprime_length(\"Hello\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"abcdcba\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"\
    kittens\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"orange\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns True if the\
    \ string has all letters uppercase\nExamples\nuppercase_string('Hello') == True\n\
    uppercase_string('HELLO') == True\nuppercase_string('kittens') == False\nuppercase_string('orange')\
    \ == False\nuppercase_string('Orange') == False\nuppercase_string('ORANG') ==\
    \ False\nuppercase_string('ORANGE') == False\nuppercase_string('Orange') == False\n\
    uppercase_string('ORANGE') == False\nuppercase_string('ORANGE') == False\nuppercase_string('ORANGES')\
    \ == False\nuppercase_string('ORANGES') == False\nuppercase_string('ORANGES')\
    \ == False\nuppercase_string('ORANGES') == False\nuppercase_string('ORANGES')\
    \ == False\nuppercase_string('ORANGES') == False\nuppercase_string('ORANGES')\
    \ == False\nuppercase_string('ORANGES') == False\nuppercase_string('ORANGES')\
    \ == False\nuppercase_string('ORANGES') == False\nuppercase_string('ORANGES')\
    \ == False\nuppercase_string('ORANGES') == False\nuppercase_string('ORANGES')\
    \ == False\nuppercase_string('ORANGES') == False\nuppercase_string('ORANGES')\
    \ == False\nuppercase_string('ORANGES') == False\nuppercase_string('ORANGES')\
    \ == False\nuppercase_string('ORANGES') == False\nuppercase_string('ORANGES')\
    \ == False\nuppercase_string('ORANGES') == False\nuppercase_string('ORANGES')\
    \ == False\nuppercase_string('ORANGES') == False\nuppercase_string('ORANGES')\
    \ == False\nuppercase_string('ORANGES') == False\nuppercase_string('ORANGES')\
    \ == False\nuppercase_string('ORANGES') == False\nuppercase_string('ORANGES')\
    \ == False\nuppercase_string('ORANGES') == False\nuppercase_string('ORANGES')\
    \ == False\nuppercase_string('ORANGES') == False\nuppercase_string('ORANGES')\
    \ == False\nuppercase_string('ORANGES') == False\nuppercase_string('ORANGES')\
    \ == False\nuppercase_string('OR\nusing Test\n\n@testset begin\n\ncandidate =\
    \ prime_length;\n\t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"abcdcba\"\
    ) == true)\n\t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"orange\"\
    ) == false)\n\t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"world\"\
    ) == true)\n\t@test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"Wow\")\
    \ == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"HI\") == true)\n\
    \t@test(candidate(\"go\") == true)\n\t@test(candidate(\"gogo\") == false)\n\t\
    @test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"Madam\") ==\
    \ true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\") == false)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2n2idtpy.jl:18\nin expression starting at\
    \ /tmp/tmp2n2idtpy.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_numbers = Set{Int}()\n    \n    for character in string\n\
    \        if character in prime_numbers\n            return false\n        else\n\
    \            prime_numbers.add(character)\n    end\n    return true\nend\n</cell>\n\
    <code language=julia-1.5>\nprime_length(\"Hello\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"abcdcba\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"\
    kittens\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"orange\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns True if the\
    \ string is a palindrome or False otherwise\nExamples\npalindrome(\"racecar\"\
    ) == True\npalindrome(\"racecars\") == False\npalindrome(\"A man, a plan, a canal:\
    \ Panama\") == True\npalindrome(\"A man, a plan, a canal: Panama\") == False\n\
    palindrome(\"A man, a plan, a canal: Panama\") == False\npalindrome(\"A man, a\
    \ plan, a canal: Panama\") == False\npalindrome(\"A man, a plan, a canal: Panama\"\
    ) == False\npalindrome(\"A man, a plan, a canal: Panama\") == False\npalindrome(\"\
    A man, a plan, a canal: Panama\") == False\npalindrome(\"A man, a plan, a canal:\
    \ Panama\") == False\npalindrome(\"A man, a plan, a canal: Panama\") == False\n\
    palindrome(\"A man, a plan, a canal: Panama\") == False\npalindrome(\"A man, a\
    \ plan, a canal: Panama\") == False\npalindrome(\"A man, a plan, a canal: Panama\"\
    ) == False\npalindrome(\"A man, a plan, a canal: Panama\") == False\npalindrome(\"\
    A man, a plan, a canal: Panama\") == False\npalindrome(\"A man, a plan, a canal:\
    \ Panama\") == False\npalindrome(\"A man, a plan, a canal: Panama\") == False\n\
    palindrome(\"A man, a plan, a canal: Panama\") == False\npalindrome(\"A man, a\
    \ plan, a canal: Panama\") == False\npalin\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prime_length;\n\t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"\
    abcdcba\") == true)\n\t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"\
    orange\") == false)\n\t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"\
    world\") == true)\n\t@test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"\
    Wow\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"HI\")\
    \ == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"gogo\") ==\
    \ false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9lghljj0.jl:21\nin expression starting at\
    \ /tmp/tmp9lghljj0.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_length = true\n    \n    for char in string:\n        if char\
    \ == ' ':\n            continue\n        if char == '\\n':\n            continue\n\
    \        if char == '\\t':\n            continue\n        if char == '\\r':\n\
    \            continue\n        if char == '\\f':\n            continue\n     \
    \   if char == '\\v':\n            continue\n        if char == '\\0':\n     \
    \       continue\n        if char == '\\'':\n            continue\n        if\
    \ char == '\\\\':\n            continue\n        if char == '(':\n           \
    \ continue\n        if char == ')':\n            continue\n        if char ==\
    \ '[':\n            continue\n        if char == ']':\n            continue\n\
    \        if char == '{':\n            continue\n        if char == '}':\n    \
    \        continue\n        if char == '<':\n            continue\n        if char\
    \ == '>':\n            continue\n        if char == '%':\n            continue\n\
    \        if char == '+':\n            continue\n        if char == '-':\n    \
    \        continue\n        if char == '*':\n            continue\n        if char\
    \ == '/':\n            continue\n        if char == '^':\n            continue\n\
    \        if char == '=':\n            continue\n        if char == '!':\n    \
    \        continue\n        if char == '&':\n            continue\n        if char\
    \ == '|':\n            continue\n        if char == '~':\n            continue\n\
    \        if char == '?':\n            continue\n        if char == '.':\n    \
    \        continue\n        if char == ',':\n            continue\n        if char\
    \ == '$':\n            continue\n        if char == '@':\n            continue\n\
    \        if char == '[':\n            continue\n        if char == ']':\n    \
    \        continue\n        if char == '(':\n            continue\n        if char\
    \ == ')':\n            continue\n        if char == '{':\n            continue\n\
    \        if char == '}':\n            continue\n        if char == '<':\n    \
    \        continue\n        if char == '>':\n            continue\n        if char\
    \ == '%':\n            continue\n        if char == '+':\n            continue\n\
    \        if char == '-':\n            continue\n        if char == '*':\n    \
    \        continue\n        if char == '/':\n            continue\n        if char\
    \ == '^':\n            continue\n        if char == '=':\n            continue\n\
    \        if char == '!':\n            continue\n        if char == '&':\n    \
    \        continue\n        if char == '|':\n            continue\n        if char\
    \ == '~':\n            continue\n        if char == '?':\n            continue\n\
    \        if char == '.':\n            continue\n        if char == ',':\n    \
    \        continue\n        if char == '$':\n            continue\n        if char\
    \ == '@':\n            continue\n        if char == '[':\n            continue\n\
    \        if char == ']':\n            continue\n        if char == '(':\n    \
    \        continue\n        if char == ')':\n            continue\n        if char\
    \ == '{':\n            continue\n        if char == '}\nusing Test\n\n@testset\
    \ begin\n\ncandidate = prime_length;\n\t@test(candidate(\"Hello\") == true)\n\t\
    @test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"kittens\") == true)\n\
    \t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"wow\") == true)\n\
    \t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\") == true)\n\
    \t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"\
    HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"gogo\"\
    ) == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_vho3vs_.jl:14\nin expression starting at\
    \ /tmp/tmp_vho3vs_.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_numbers = prime_numbers()\n    \n    for i in string:\n  \
    \      if i in prime_numbers:\n            return False\n    return True\n\"\"\
    \"\nWrite a function that takes a string and returns True if the string\n    contains\
    \ any uppercase letters or False otherwise\n    Examples\n    contains_uppercase('Hello')\
    \ == True\n    contains_uppercase('abcdcba') == True\n    contains_uppercase('kittens')\
    \ == False\n    contains_uppercase('orange') == False\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"Hello\") ==\
    \ true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"kittens\"\
    ) == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"wow\"\
    ) == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprx_qszjv.jl:14\nin expression starting at\
    \ /tmp/tmprx_qszjv.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    prime_length = true\n    for character in string:\n        if character\
    \ == ' ':\n            prime_length = false\n            break\n        if character\
    \ in '0123456789':\n            prime_length = false\n            break\n    \
    \    if character in 'abcdefghijklmnopqrstuvwxyz':\n            prime_length =\
    \ false\n            break\n        if character in 'wxyz':\n            prime_length\
    \ = false\n            break\n    return prime_length\n</code>\n<|/ a |>\n<| c\
    \ |>\nThanks for your answer! I appreciate it!\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    def prime_length(s):\n    prime_length = 0\n    for character in s:\n        if\
    \ character in '0123456789':\n            prime_length = 0\n            break\n\
    \        if character in 'abcdefghijklmnopqrstuvwxyz':\n            prime_length\
    \ = 0\n            break\n        if character in 'wxyz':\n            prime_length\
    \ = 0\n            break\n    return prime_length\n</code>\n<|/ a tags=python\
    \ |>\n<| c |>\nWhile this code may answer the question, providing additional context\
    \ regarding why and/or how this code answers the question improves its long-term\
    \ value.\n<|/ c |>\n<| a tags=python |>\n<code>\ndef prime_length(s):\n    prime_length\
    \ = 0\n    for character in s:\n        if character in '0123456789':\n      \
    \      prime_length = 0\n            break\n        if character in 'abcdefghijklmnopqrstuvwxyz':\n\
    \            prime_length = 0\n            break\n        if character in 'wxyz':\n\
    \            prime_length = 0\n            break\n    return prime_length\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nWhile this code may answer the question, providing\
    \ additional context regarding why and/or how this code answers the question improves\
    \ its long-term value.\n<|/ c |>\n<| a dscore=0 |>\n<code>\ndef prime_length(s):\n\
    \    prime_length = 0\n    for character in s:\n        if character in '0123456789':\n\
    \            prime_length = 0\n            break\n        if character in 'abcdefghijklmnopqrstuvwxyz':\n\
    \            prime_length = 0\n            break\n        if character in 'wxyz':\n\
    \            prime_length = 0\n            break\n    return prime_length\n</code>\n\
    <|/ a tags=python |>\n<| a dscore=0 |>\n<code>\ndef prime_length(s):\n    prime_length\
    \ = 0\n    for character in s:\n        if character in '0123456789':\n\nusing\
    \ Test\n\n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"Hello\"\
    ) == true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"kittens\"\
    ) == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"wow\"\
    ) == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw8gp6ws6.jl:12\nin expression starting at\
    \ /tmp/tmpw8gp6ws6.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_length::Bool = False \n    \n    prime_length::Bool = string.len()==2\
    \ || string.len()==3 || string.len()==5 || string.len()==7 || string.len()==11\
    \ || string.len()==13 || string.len()==17 || string.len()==19 || string.len()==23\
    \ || string.len()==29 || string.len()==31 || string.len()==37 || string.len()==43\
    \ || string.len()==49 || string.len()==63 || string.len()==69 || string.len()==73\
    \ || string.len()==79 || string.len()==83 || string.len()==89 || string.len()==97\
    \ || string.len()==103 || string.len()==109 || string.len()==113 || string.len()==127\
    \ || string.len()==131 \n    \n    return prime_length\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"\
    Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"\
    kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"\
    wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: multiple type declarations for \"prime_length\"\
    \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfobb0dy5.jl:1\nin expression\
    \ starting at /tmp/tmpfobb0dy5.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_length::Bool = true \n    \n    for i in string\n        if\
    \ prime_length == false\n            break\n        else if prime_length == true\n\
    \            if string.length % i == 0\n                prime_length = false\n\
    \                break\n            else\n                prime_length = true\n\
    \                break\n        end\n    end\n    return prime_length\nend\n</cell>\n\
    <code language=julia-1.5>\nprime_length(\"Hello\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"abcdcba\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"\
    kittens\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"orange\")\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a string and returns True if the\
    \ string contains only letters a-z or A-Z or False otherwise\nExamples\nonly_letters('Hello')\
    \ == True\nonly_letters('abcdcba') == False\nonly_letters('kittens') == False\n\
    only_letters('orange') == False\nonly_letters('') == False\nonly_letters(' ')\
    \ == False\nonly_letters(' ') == False\nonly_letters(' ') == False\nonly_letters('\
    \ ') == False\nonly_letters(' ') == False\nonly_letters(' ') == False\nonly_letters('\
    \ ') == False\nonly_letters(' ') == False\nonly_letters(' ') == False\nonly_letters('\
    \ ') == False\nonly_letters(' ') == False\nonly_letters(' ') == False\nonly_letters('\
    \ ') == False\nonly_letters(' ') == False\nonly_letters(' ') == False\nonly_letters('\
    \ ') == False\nonly_letters(' ') == False\nonly_letters(' ') == False\nonly_letters('\
    \ ') == False\nonly_letters(' ') == False\nonly_letters(' ') == False\nonly_letters('\
    \ ') == False\nonly_letters(' ') == False\nonly_letters(' ') == False\nonly_letters('\
    \ ') == False\nonly_letters(' ') == False\nonly_letters(' ') == False\nonly_letters('\
    \ ') == False\nonly_letters(' ') == False\nonly_letters(' ') == False\nonly_letters('\
    \ ') == False\nonly_letters(' ') == False\nonly_letters(' ') == False\nonly_letters('\
    \ ') == False\nonly_letters(' ') == False\nonly_letters(' ') == False\nonly_letters('\
    \ ') == False\nonly_letters(' ') == False\nonly_letters(' ') == False\nonly_letters('\
    \ ') == False\nonly_letters(' ') == False\nonly_letters(' ') == False\nonly_letters('\
    \ ') == False\nonly_\nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\
    \t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\
    \t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\
    \t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t\
    @test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") ==\
    \ true)\n\t@test(candidate(\"gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\"\
    ) == false)\n\t@test(candidate(\"Madam\") == true)\n\t@test(candidate(\"M\") ==\
    \ false)\n\t@test(candidate(\"0\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmm3s7us1.jl:16\nin expression starting at\
    \ /tmp/tmpmm3s7us1.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    if string == \"\"\n        return true\n    \n    prime_numbers\
    \ = prime_numbers()\n    \n    for i in string\n        if i in prime_numbers\n\
    \            return false\n    \n    return true\nend\n</cell>\n<code language=julia-1.0>\n\
    prime_length(\"Hello\")\n</cell>\n<code language=julia-1.0>\nprime_length(\"abcdcba\"\
    )\n</cell>\n<code language=julia-1.0>\nprime_length(\"kittens\")\n</cell>\n<code\
    \ language=julia-1.0>\nprime_length(\"orange\")\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a string and returns True if the string contains any\
    \ uppercase letters or False otherwise\nExamples\nhas_uppercase(\"Hello\") ==\
    \ True\nhas_uppercase(\"HELLO\") == True\nhas_uppercase(\"HELLOWORLD\") == False\n\
    has_uppercasen\
    using Test\n\n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"\
    Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"\
    kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"\
    wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk6yiitu0.jl:22\nin expression starting at\
    \ /tmp/tmpk6yiitu0.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_numbers = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n\
    \    \n    for i in string:\n        if i in prime_numbers:\n            prime_numbers.remove(i)\n\
    \            \n    if prime_numbers == []:\n        return True\n    else:\n \
    \       return False\n\"\"\"\nWrite a function that takes a string and returns\
    \ True if the string\n    contains only letters a-z or A-Z or False otherwise\n\
    \    Examples\n    contains_only_letters('Hello') == True\n    contains_only_letters('abcdcba')\
    \ == True\n    contains_only_letters('kittens') == False\n    contains_only_letters('orange')\
    \ == False\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\
    \t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\
    \t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\
    \t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t\
    @test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") ==\
    \ true)\n\t@test(candidate(\"gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\"\
    ) == false)\n\t@test(candidate(\"Madam\") == true)\n\t@test(candidate(\"M\") ==\
    \ false)\n\t@test(candidate(\"0\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1fa_arat.jl:14\nin expression starting at\
    \ /tmp/tmp1fa_arat.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_length = true\n    \n    for char in string:\n        if char\
    \ == ' ':\n            continue\n        if char == '\\n':\n            continue\n\
    \        if char == '\\t':\n            continue\n        if char == '\\r':\n\
    \            continue\n        if char == '\\f':\n            continue\n     \
    \   if char == '\\v':\n            continue\n        if char == '\\0':\n     \
    \       continue\n        if char == '\\'':\n            continue\n        if\
    \ char == '\"':\n            continue\n        if char == '\\\\':\n          \
    \  continue\n        if char == '(':\n            continue\n        if char ==\
    \ ')':\n            continue\n        if char == '[':\n            continue\n\
    \        if char == ']':\n            continue\n        if char == '{':\n    \
    \        continue\n        if char == '}':\n            continue\n        if char\
    \ == '<':\n            continue\n        if char == '>':\n            continue\n\
    \        if char == '%':\n            continue\n        if char == '!':\n    \
    \        continue\n        if char == '=':\n            continue\n        if char\
    \ == '?':\n            continue\n        if char == '*':\n            continue\n\
    \        if char == '+':\n            continue\n        if char == '-':\n    \
    \        continue\n        if char == '/':\n            continue\n        if char\
    \ == '|':\n            continue\n        if char == '&':\n            continue\n\
    \        if char == '^':\n            continue\n        if char == '~':\n    \
    \        continue\n        if char == '`':\n            continue\n        if char\
    \ == '[':\n            continue\n        if char == ']':\n            continue\n\
    \        if char == '(':\n            continue\n        if char == ')':\n    \
    \        continue\n        if char == '{':\n            continue\n        if char\
    \ == '}':\n            continue\n        if char == '<':\n            continue\n\
    \        if char == '>':\n            continue\n        if char == '%':\n    \
    \        continue\n        if char == '!':\n            continue\n        if char\
    \ == '=':\n            continue\n        if char == '?':\n            continue\n\
    \        if char == '*':\n            continue\n        if char == '+':\n    \
    \        continue\n        if char == '-':\n            continue\n        if char\
    \ == '/':\n            continue\n        if char == '|':\n            continue\n\
    \        if char == '&':\n            continue\n        if char == '^':\n    \
    \        continue\n        if char == '~':\n            continue\n        if char\
    \ == '`':\n            continue\n        if char == '[':\n            continue\n\
    \        if char == ']':\n            continue\n        if char == '(':\n    \
    \        continue\n        if char == ')':\n            continue\n        if char\
    \ == '{':\n            continue\n        if char == '}':\n            continue\n\
    \        if char == '<':\n            continue\n        if char == '>':\n    \
    \        continue\n        if char == '%':\n            continue\n        if char\
    \ == '!':\n            continue\n        if char == '='\nusing Test\n\n@testset\
    \ begin\n\ncandidate = prime_length;\n\t@test(candidate(\"Hello\") == true)\n\t\
    @test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"kittens\") == true)\n\
    \t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"wow\") == true)\n\
    \t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\") == true)\n\
    \t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"\
    HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"gogo\"\
    ) == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqhna_bbj.jl:14\nin expression starting at\
    \ /tmp/tmpqhna_bbj.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_length = true\n    \n    for i in string:\n        if i ==\
    \ 'a' or i == 'e' or i == 'i' or i == 'o' or i == 'u':\n            prime_length\
    \ = false\n            break\n        \n    if prime_length == true:\n       \
    \ for i in string:\n            if i == 'a' or i == 'e' or i == 'i' or i == 'o'\
    \ or i == 'u':\n                prime_length = false\n                break\n\
    \            \n    return prime_length\n</cell>\n<cell>\nprime_length('Hello')\
    \ == True\nprime_length('abcdcba') == True\nprime_length('kittens') == True\n\
    prime_length('orange') == False\n</cell>\n<text>\nExercise 7\nWrite a function\
    \ that takes a string and returns True if the string is a palindrome or False\
    \ otherwise\nExamples\npalindrome('racecar') == True\npalindrome('racecars') ==\
    \ True\npalindrome('racecar') == False\npalindrome('racecars') == False\npalindrome('')\
    \ == False\npalindrome(' ') == False\npalindrome('racecar') == False\npalindrome('racecars')\
    \ == False\npalindrome('racecar') == False\npalindrome('racecars') == False\n\
    palindrome('') == False\npalindrome(' ') == False\npalindrome('racecar') == False\n\
    palindrome('racecars') == False\npalindrome('racecar') == False\npalindrome('racecars')\
    \ == False\npalindrome('') == False\npalindrome(' ') == False\npalindrome('racecar')\
    \ == False\npalindrome('racecars') == False\npalindrome('racecar') == False\n\
    palindrome('racecars') == False\npalindrome('') == False\npalindrome(' ') == False\n\
    palindrome('racecar') == False\npalindrome('racecars') == False\npalindrome('racecar')\
    \ == False\npalindrome('racecars') == False\npalindrome('') == False\npalindrome('\
    \ ') == False\npalindrome('racecar') == False\npalindrome('racecars') == False\n\
    palindrome('racecar') == False\npalindrome('racecars') == False\npalindrome('')\
    \ == False\np\nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"\
    Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"\
    kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"\
    wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbok8ypl5.jl:14\nin expression starting at\
    \ /tmp/tmpbok8ypl5.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_numbers = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n\
    \    \n    for i in string:\n        if i in prime_numbers:\n            prime_numbers.remove(i)\n\
    \            \n    if prime_numbers == []:\n        return True\n    else:\n \
    \       return False\n\"\"\"\nWrite a function that takes a string and returns\
    \ True if the string\n    contains only letters or False otherwise\n    Examples\n\
    \    letters_only('Hello') == True\n    letters_only('abcdcba') == True\n    letters_only('kittens')\
    \ == False\n    letters_only('orange') == False\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = prime_length;\n\t@test(candidate(\"Hello\") == true)\n\t\
    @test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"kittens\") == true)\n\
    \t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"wow\") == true)\n\
    \t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\") == true)\n\
    \t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"\
    HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"gogo\"\
    ) == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbw2z0imx.jl:14\nin expression starting at\
    \ /tmp/tmpbw2z0imx.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_length = true\n    \n    for i in string:\n        if i ==\
    \ 'a' or i == 'e' or i == 'i' or i == 'o' or i == 'u':\n            prime_length\
    \ = false\n            break\n    \n    return prime_length\n\"\"\"\nWrite a function\
    \ that takes a string and returns True if the string\n    contains only letters\
    \ or False otherwise\n    Examples\n    contains_only_letters('Hello') == True\n\
    \    contains_only_letters('abcdcba') == True\n    contains_only_letters('kittens')\
    \ == False\n    contains_only_letters('orange') == False\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"Hello\") ==\
    \ true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"kittens\"\
    ) == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"wow\"\
    ) == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprxt2ddoj.jl:14\nin expression starting at\
    \ /tmp/tmprxt2ddoj.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_length::Bool = \n        if string.length == 0 \n        then\
    \ False\n        else if string.length == 1 \n        then True\n        else\
    \ if string.length == 2 \n        then string.length % 2 == 0\n        else if\
    \ string.length % 3 == 0 \n        then False\n        else if string.length %\
    \ 5 == 0 \n        then False\n        else if string.length % 7 == 0 \n     \
    \   then False\n        else if string.length % 11 == 0 \n        then False\n\
    \        else if string.length % 13 == 0 \n        then False\n        else if\
    \ string.length % 17 == 0 \n        then False\n        else if string.length\
    \ % 19 == 0 \n        then False\n        else if string.length % 23 == 0 \n \
    \       then False\n        else if string.length % 29 == 0 \n        then False\n\
    \        else if string.length % 31 == 0 \n        then False\n        else if\
    \ string.length % 37 == 0 \n        then False\n        else if string.length\
    \ % 41 == 0 \n        then False\n        else if string.length % 43 == 0 \n \
    \       then False\n        else if string.length % 47 == 0 \n        then False\n\
    \        else if string.length % 53 == 0 \n        then False\n        else if\
    \ string.length % 59 == 0 \n        then False\n        else if string.length\
    \ % 61 == 0 \n        then False\n        else if string.length % 67 == 0 \n \
    \       then False\n        else if string.length % 71 == 0 \n        then False\n\
    \        else if string.length % 73 == 0 \n        then False\n        else if\
    \ string.length % 79 == 0 \n        then False\n        else if string.length\
    \ % 83 == 0 \n        then False\n        else if string.length % 89 == 0 \n \
    \       then False\n        else if string.length % 97 == 0 \n        then False\n\
    \        else if string.length % 101 == 0 \n        then False\n        else if\
    \ string.length % 103 == 0 \n        then False\n        else if string.length\
    \ % 107 == 0 \n        then False\n        else if string.length % 109 == 0 \n\
    \        then False\n        else if string.length % 113 == 0 \n        then False\n\
    \        else if string.length % 127 == 0 \n        then False\n        else if\
    \ string.length % 131 == 0 \n        then False\n        else if string.length\
    \ % 137 == 0 \n        then False\n        else if string.length % 143 == 0 \n\
    \        then False\n        else if string.length % 149 == 0 \n        then False\n\
    \        else if string.length % 151 == 0 \n        then False\n        else if\
    \ string.length % 157 == 0 \n        then False\n        else \nusing Test\n\n\
    @testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"Hello\") == true)\n\
    \t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"kittens\") == true)\n\
    \t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"wow\") == true)\n\
    \t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\") == true)\n\
    \t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"\
    HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"gogo\"\
    ) == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"False\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp6kgvy6zv.jl:13\nin expression starting at /tmp/tmp6kgvy6zv.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_length::Bool = false \n    \n    \n    for i in string\n \
    \       \n        if i == 'a'\n            prime_length = true\n            break\n\
    \        \n        if i == 'b'\n            prime_length = true\n            break\n\
    \        \n        if i == 'c'\n            prime_length = true\n            break\n\
    \        \n        if i == 'd'\n            prime_length = true\n            break\n\
    \        \n        if i == 'e'\n            prime_length = true\n            break\n\
    \        \n        if i == 'f'\n            prime_length = true\n            break\n\
    \        \n        if i == 'g'\n            prime_length = true\n            break\n\
    \        \n        if i == 'h'\n            prime_length = true\n            break\n\
    \        \n        if i == 'i'\n            prime_length = true\n            break\n\
    \        \n        if i == 'j'\n            prime_length = true\n            break\n\
    \        \n        if i == 'k'\n            prime_length = true\n            break\n\
    \        \n        if i == 'l'\n            prime_length = true\n            break\n\
    \        \n        if i == 'm'\n            prime_length = true\n            break\n\
    \        \n        if i == 'n'\n            prime_length = true\n            break\n\
    \        \n        if i == 'o'\n            prime_length = true\n            break\n\
    \        \n        if i == 'p'\n            prime_length = true\n            break\n\
    \        \n        if i == 'q'\n            prime_length = true\n            break\n\
    \        \n        if i == 'r'\n            prime_length = true\n            break\n\
    \        \n        if i == 's'\n            prime_length = true\n            break\n\
    \        \n        if i == 't'\n            prime_length = true\n            break\n\
    \        \n        if i == 'u'\n            prime_length = true\n            break\n\
    \        \n        if i == 'v'\n            prime_length = true\n            break\n\
    \        \n        if i == 'w'\n            prime_length = true\n            break\n\
    \        \n        if i == 'x'\n            prime_length = true\n            break\n\
    \        \n        if i == 'y'\n            prime_length = true\n            break\n\
    \        \n        if i == 'z'\n            prime_length = true\n            break\n\
    \        \n        if i == 'A'\n            prime_length = true\n            break\n\
    \        \n        if i == 'B'\n            prime_length = true\n            break\n\
    \        \n        if i == 'C'\n            prime_length = true\n            break\n\
    \        \n        if i == 'D'\n            prime_length = true\n            break\n\
    \        \n        if i == 'E'\n            prime_length = true\n            break\n\
    \        \n        if i == 'F'\n            prime_\nusing Test\n\n@testset begin\n\
    \ncandidate = prime_length;\n\t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"\
    abcdcba\") == true)\n\t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"\
    orange\") == false)\n\t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"\
    world\") == true)\n\t@test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"\
    Wow\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"HI\")\
    \ == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"gogo\") ==\
    \ false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_lcoo6u7.jl:1\nin expression starting at /tmp/tmp_lcoo6u7.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_numbers = prime_numbers()\n    \n    for character in string:\n\
    \        if character in prime_numbers:\n            return False\n    return\
    \ True\n    \n\"\"\"Write a function that takes a string and returns True if the\
    \ string\n    contains any uppercase letters or False otherwise\n    Examples\n\
    \    contains_uppercase('Hello') == True\n    contains_uppercase('abcdcba') ==\
    \ True\n    contains_uppercase('kittens') == False\n    contains_uppercase('orange')\
    \ == False\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\
    \t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\
    \t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\
    \t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t\
    @test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") ==\
    \ true)\n\t@test(candidate(\"gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\"\
    ) == false)\n\t@test(candidate(\"Madam\") == true)\n\t@test(candidate(\"M\") ==\
    \ false)\n\t@test(candidate(\"0\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmfh4pcv6.jl:14\nin expression starting at\
    \ /tmp/tmpmfh4pcv6.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_length::Bool = False \n    \n    if string == \"\"\n     \
    \   return prime_length\n    \n    prime_length::Bool = True \n    \n    prime_length::Bool\
    \ = True \n    \n    for i in string\n        if prime_length\n            prime_length::Bool\
    \ = False \n        else \n            prime_length::Bool = True \n          \
    \  \n    return prime_length\n\"\"\"\nWrite a function that takes a string and\
    \ returns True if the string\n    contains only letters or False otherwise\n \
    \   Examples\n    contains_letters('Hello') == True\n    contains_letters('abcdcba')\
    \ == True\n    contains_letters('kittens') == False\n    contains_letters('orange')\
    \ == False\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\
    \t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\
    \t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\
    \t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t\
    @test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") ==\
    \ true)\n\t@test(candidate(\"gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\"\
    ) == false)\n\t@test(candidate(\"Madam\") == true)\n\t@test(candidate(\"M\") ==\
    \ false)\n\t@test(candidate(\"0\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmpwqjdyclw.jl:21\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwqjdyclw.jl:1\n\
    in expression starting at /tmp/tmpwqjdyclw.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_numbers = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n\
    \    \n    for i in prime_numbers\n        if string.length == i\n           \
    \ return true\n        end\n    end\n    return false\nend\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"Hello\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"abcdcba\"\
    )\n</cell>\n<code language=julia-1.5>\nprime_length(\"kittens\")\n</cell>\n<code\
    \ language=julia-1.5>\nprime_length(\"orange\")\n</cell>\n<text>\nWrite a function\
    \ that takes a string and returns True if the string is a palindrome or False\
    \ otherwise\nExamples\npalindrome(\"abba\") == True\npalindrome(\"abba\") == False\n\
    palindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abba\"\
    ) == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"\
    abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\n\
    palindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abba\"\
    ) == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"\
    abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\n\
    palindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abba\"\
    ) == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"\
    abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\n\
    palindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abba\"\
    ) == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"\
    abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\n\
    palindrome(\"\nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"\
    Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"\
    kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"\
    wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpltwqfi_t.jl:20\nin expression starting at\
    \ /tmp/tmpltwqfi_t.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_numbers = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n\
    \    \n    for i in prime_numbers\n        if string == i\n            return\
    \ true\n        else\n            return false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"Hello\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"abcdcba\"\
    )\n</cell>\n<code language=julia-1.5>\nprime_length(\"kittens\")\n</cell>\n<code\
    \ language=julia-1.5>\nprime_length(\"orange\")\n</cell>\n<text>\nWrite a function\
    \ that takes a string and returns True if the string is a palindrome or False\
    \ otherwise\nExamples\npalindrome(\"racecar\") == True\npalindrome(\"racecars\"\
    ) == True\npalindrome(\"racecarc\") == False\npalindrome(\"racecarce\") == False\n\
    palindrome(\"racecarc\") == \"racecarc\"\npalindrome(\"racecarce\") == \"racecarce\"\
    \npalindrome(\"racecarc\") == palindrome(\"racecarce\")\npalindrome(\"racecarce\"\
    ) == palindrome(\"racecarc\")\npalindrome(\"racecarc\") == palindrome(\"racecarce\"\
    )\npalindrome(\"racecarce\") == palindrome(\"racecarc\")\npalindrome(\"racecarc\"\
    ) == palindrome(\"racecarce\")\npalindrome(\"racecarce\") == palindrome(\"racecarc\"\
    )\npalindrome(\"racecarc\") == palindrome(\"racecarce\")\npalindrome(\"racecarce\"\
    ) == palindrome(\"racecarc\")\npalindrome(\"racecarc\") == palindrome(\"racecarce\"\
    )\npalindrome(\"racecarce\") == palindrome(\"racecarc\")\npalindrome(\"racecarc\"\
    ) == palindrome(\"racecarce\")\npalindrome(\"racecarce\") == palindrome(\"racecarc\"\
    )\npalindrome(\"racecarc\") == palindrome(\"racecarce\")\npalindrome(\"racecarce\"\
    ) == palindrome(\"racecarc\")\npalindrome(\"racecarc\") == palindrome(\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"Hello\"\
    ) == true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"kittens\"\
    ) == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"wow\"\
    ) == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnyzes9w8.jl:20\nin expression starting at\
    \ /tmp/tmpnyzes9w8.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_numbers = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n\
    \    \n    for i in string\n        if prime_numbers.contains(i)\n           \
    \ prime_numbers.remove(i)\n            \n    if prime_numbers.contains(0)\n  \
    \      prime_numbers.remove(0)\n        \n    if prime_numbers.contains(1)\n \
    \       prime_numbers.remove(1)\n        \n    if prime_numbers.contains(2)\n\
    \        prime_numbers.remove(2)\n        \n    if prime_numbers.contains(3)\n\
    \        prime_numbers.remove(3)\n        \n    if prime_numbers.contains(4)\n\
    \        prime_numbers.remove(4)\n        \n    if prime_numbers.contains(5)\n\
    \        prime_numbers.remove(5)\n        \n    if prime_numbers.contains(6)\n\
    \        prime_numbers.remove(6)\n        \n    if prime_numbers.contains(7)\n\
    \        prime_numbers.remove(7)\n        \n    if prime_numbers.contains(8)\n\
    \        prime_numbers.remove(8)\n        \n    if prime_numbers.contains(9)\n\
    \        prime_numbers.remove(9)\n        \n    if prime_numbers.contains(10)\n\
    \        prime_numbers.remove(10)\n        \n    if prime_numbers.contains(11)\n\
    \        prime_numbers.remove(11)\n        \n    if prime_numbers.contains(12)\n\
    \        prime_numbers.remove(12)\n        \n    if prime_numbers.contains(13)\n\
    \        prime_numbers.remove(13)\n        \n    if prime_numbers.contains(14)\n\
    \        prime_numbers.remove(14)\n        \n    if prime_numbers.contains(15)\n\
    \        prime_numbers.remove(15)\n        \n    if prime_numbers.contains(16)\n\
    \        prime_numbers.remove(16)\n        \n    if prime_numbers.contains(17)\n\
    \        prime_numbers.remove(17)\n        \n    if prime_numbers.contains(18)\n\
    \        prime_numbers.remove(18)\n        \n    if prime_numbers.contains(19)\n\
    \        prime_numbers.remove(19)\n        \n    if prime_numbers.contains(20)\n\
    \        prime_numbers.remove(20)\n        \n    if prime_numbers.contains(21)\n\
    \        prime_numbers.remove(21)\n        \n    if prime_numbers.contains(22)\n\
    \        prime_numbers.remove(22)\n        \n    if prime_numbers.contains(23)\n\
    \        prime_numbers.remove(23)\n        \n    if prime_numbers.contains(24)\n\
    \        prime_numbers.remove(24)\n        \n    if prime_numbers.contains(25)\n\
    \        prime_numbers.remove(25)\n        \n    if prime_numbers.contains(26)\n\
    \        prime_numbers.remove(26)\n        \n    if prime_numbers.contains(27)\n\
    using Test\n\n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"\
    Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"\
    kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"\
    wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpurg8w3zb.jl:1\nin expression starting at /tmp/tmpurg8w3zb.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    prime_length = 0\n    for character in string:\n        if character ==\
    \ ' ':\n            continue\n        if character == '\\n':\n            continue\n\
    \        if character == '\\t':\n            continue\n        if character ==\
    \ '\\r':\n            continue\n        if character == '\\f':\n            continue\n\
    \        if character == '\\v':\n            continue\n        if character ==\
    \ '\\0':\n            continue\n        if character == '\\\\':\n            continue\n\
    \        if character == '\\'':\n            continue\n        if character ==\
    \ '\"':\n            continue\n        if character == '(':\n            continue\n\
    \        if character == ')':\n            continue\n        if character == '[':\n\
    \            continue\n        if character == ']':\n            continue\n  \
    \      if character == '{':\n            continue\n        if character == '}':\n\
    \            continue\n        if character == '<':\n            continue\n  \
    \      if character == '>':\n            continue\n        if character == '|':\n\
    \            continue\n        if character == '+':\n            continue\n  \
    \      if character == '-':\n            continue\n        if character == '*':\n\
    \            continue\n        if character == '/':\n            continue\n  \
    \      if character == '%':\n            continue\n        if character == '^':\n\
    \            continue\n        if character == '~':\n            continue\n  \
    \      if character == '=':\n            continue\n        if character == '!':\n\
    \            continue\n        if character == '<':\n            continue\n  \
    \      if character == '>':\n            continue\n        if character == '?':\n\
    \            continue\n        if character == '@':\n            continue\n  \
    \      if character == '[':\n            continue\n        if character == ']':\n\
    \            continue\n        if character == '\\\\':\n            continue\n\
    \        if character == '\\'':\n            continue\n        if character ==\
    \ '\"':\n            continue\n        if character == '(':\n            continue\n\
    \        if character == ')':\n            continue\n        if character == '{':\n\
    \            continue\n        if character == '}':\n            continue\n  \
    \      if character == '<':\n            continue\n        if character == '>':\n\
    \            continue\n        if character == '|':\n            continue\n  \
    \      if character == '+':\n            continue\n        if character == '-':\n\
    \            continue\n        if character == '*':\n            continue\n  \
    \      if character == '/':\n            continue\n        if character == '%':\n\
    \            continue\n        if character == '^':\n            continue\n  \
    \      if character == '~':\n            continue\n        if character == '=':\n\
    \            continue\n        if character == '!':\n            continue\n  \
    \      if character == '<':\n            continue\n        if character == '>':\n\
    \            continue\n        if character == '?':\n            continue\n  \
    \      if character == '@':\n            continue\n        if character == '[':\n\
    \            continue\n        if character == ']':\n            continue\n  \
    \      if character == '\\\\':\n            continue\n        if character ==\
    \ '\\'':\n            continue\n        if character == '\"':\n            continue\n\
    \        if character == '(':\n            continue\nusing Test\n\n@testset begin\n\
    \ncandidate = prime_length;\n\t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"\
    abcdcba\") == true)\n\t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"\
    orange\") == false)\n\t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"\
    world\") == true)\n\t@test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"\
    Wow\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"HI\")\
    \ == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"gogo\") ==\
    \ false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplhotpny2.jl:12\nin expression starting at\
    \ /tmp/tmplhotpny2.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_numbers = primes(string)\n    \n    for prime in prime_numbers\n\
    \        if prime > string.length\n            return false\n        end\n   \
    \ end\n    return true\nend\n</cell>\n<code language=julia-1.3>\nprime_length(\"\
    Hello\")\n</cell>\n<code language=julia-1.3>\nprime_length(\"abcdcba\")\n</cell>\n\
    <code language=julia-1.3>\nprime_length(\"kittens\")\n</cell>\n<code language=julia-1.3>\n\
    prime_length(\"orange\")\n</cell>\n<text>\nExercise: Write a function that takes\
    \ a string and returns True if the string contains any character that is a prime\
    \ number or False otherwise\nExamples\nprime_contains(\"Hello\") == True\nprime_contains(\"\
    abcdcba\") == True\nprime_contains(\"kittens\") == False\nprime_contains(\"orange\"\
    ) == False\nprime_contains(\"123\") == True\nprime_contains(\"abc\") == False\n\
    prime_contains(\"abcde\") == False\nprime_contains(\"abcde\") == False\nprime_contains(\"\
    abcde\") == False\nprime_contains(\"abcde\") == False\nprime_contains(\"abcde\"\
    ) == False\nprime_contains(\"abcde\") == False\nprime_contains(\"abcde\") == False\n\
    prime_contains(\"abcde\") == False\nprime_contains(\"abcde\") == False\nprime_contains(\"\
    abcde\") == False\nprime_contains(\"abcde\") == False\nprime_contains(\"abcde\"\
    ) == False\nprime_contains(\"abcde\") == False\nprime_contains(\"abcde\") == False\n\
    prime_contains(\"abcde\") == False\nprime_contains(\"abcde\") == False\nprime_contains(\"\
    abcde\") == False\nprime_contains(\"abcde\") == False\nprime_contains(\"abcde\"\
    ) == False\nprime_contains(\"abcde\") == False\nprime_contains(\"abcde\") == False\n\
    prime_contains(\"abcde\") == False\nprime_contains(\"abcde\") == False\nprime_contains(\"\
    abcde\") == False\nprime_contains(\"abcde\") == False\nprime_contains(\"abcde\"\
    ) == False\nprime_contains(\"abcde\") == False\nprime_contains(\"abcde\") == False\n\
    prime_contains(\"abcde\") == False\nprime_contains(\"abcde\") == False\nprime_contains(\"\
    abcde\") == False\nprime_contains(\"abcde\") == False\nprime_contains(\"abcde\"\
    ) == False\nprime_contains(\"abcde\") == False\nprime_contains(\"abcde\") == False\n\
    prime_contains(\"abcde\nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\
    \t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\
    \t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\
    \t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t\
    @test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") ==\
    \ true)\n\t@test(candidate(\"gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\"\
    ) == false)\n\t@test(candidate(\"Madam\") == true)\n\t@test(candidate(\"M\") ==\
    \ false)\n\t@test(candidate(\"0\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplp43b4el.jl:20\nin expression starting at\
    \ /tmp/tmplp43b4el.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_numbers = prime_numbers()\n    \n    for character in string:\n\
    \        if character in prime_numbers:\n            return False\n    return\
    \ True\n    \n\"\"\"Write a function that takes a string and returns True if the\
    \ string\n    contains any uppercase letters or False otherwise\n    Examples\n\
    \    contains_uppercase('Hello') == True\n    contains_uppercase('abcdcba') ==\
    \ True\n    contains_uppercase('kittens') == False\n    contains_uppercase('orange')\
    \ == False\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\
    \t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\
    \t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\
    \t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t\
    @test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") ==\
    \ true)\n\t@test(candidate(\"gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\"\
    ) == false)\n\t@test(candidate(\"Madam\") == true)\n\t@test(candidate(\"M\") ==\
    \ false)\n\t@test(candidate(\"0\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps113gg2z.jl:14\nin expression starting at\
    \ /tmp/tmps113gg2z.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_numbers = Set([2,3,5,7,11,13,17,19])\n    \n    for character\
    \ in string:\n        if character in prime_numbers:\n            return False\n\
    \    return True\n</code>\n<|/ a |>\n<| a tags=haskell,primes |>\n<code>\nprimes\
    \ :: [Integer]\nprimes = 2 : filter isPrime [3..]\n</code>\n<|/ a dscore=1 |>\n\
    <| c |>\nThis doesn't answer the question, which is about finding prime numbers,\
    \ not finding prime numbers.\n<|/ c |>\n<| a dscore=1 |>\n<code>\nprimes :: [Integer]\n\
    primes = 2 : filter isPrime [3..]\n</code>\n<|/ a tags=haskell,primes |>\n<| a\
    \ tags=haskell,primes |>\n<code>\nprimes :: [Integer]\nprimes = 2 : filter isPrime\
    \ [3..]\n</code>\n<|/ a dscore=1 |>\n<| a tags=haskell,primes |>\n<code>\nprimes\
    \ :: [Integer]\nprimes = 2 : filter isPrime [3..]\n</code>\n<|/ a dscore=1 |>\n\
    <| a tags=haskell,primes |>\n<code>\nprimes :: [Integer]\nprimes = 2 : filter\
    \ isPrime [3..]\n</code>\n<|/ a dscore=1 |>\n<| a tags=haskell,primes |>\n<code>\n\
    primes :: [Integer]\nprimes = 2 : filter isPrime [3..]\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=1 |>\n<code>\nprimes :: [Integer]\nprimes = 2 : filter isPrime\
    \ [3..]\n</code>\n<|/ a tags=haskell,primes |>\n<| a tags=haskell,primes |>\n\
    <code>\nprimes :: [Integer]\nprimes = 2 : filter isPrime [3..]\n</code>\n<|/ a\
    \ dscore=1 |>\n<| a dscore=1 |>\n<code>\nprimes :: [Integer]\nprimes = 2 : filter\
    \ isPrime [3..]\n</code>\n<|/ a tags=haskell,primes |>\n<| a tags=haskell,primes\
    \ |>\n<code>\nprimes :: [Integer]\nprimes = 2 : filter isPrime [3..]\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nprimes :: [Integer]\nprimes = 2 :\
    \ filter \nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"\
    Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"\
    kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"\
    wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvu_e788x.jl:14\nin expression starting at\
    \ /tmp/tmpvu_e788x.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    prime_length_helper(string,2,0)\nend\n</cell>\n<code language=julia-1.0>\n\
    @code_warntype prime_length(\"Hello\")\n</cell>\n<code language=julia-1.0>\n@code_warntype\
    \ prime_length(\"abcdcba\")\n</cell>\n<code language=julia-1.0>\n@code_warntype\
    \ prime_length(\"kittens\")\n</cell>\n<code language=julia-1.0>\n@code_warntype\
    \ prime_length(\"orange\")\n</cell>\n<text>\nExercise: Write a function that takes\
    \ a string and returns True if the string is a palindrome or False otherwise\n\
    Examples\npalindrome(\"abba\") == True\npalindrome(\"abba\") == False\npalindrome(\"\
    abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\n\
    palindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abba\"\
    ) == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"\
    abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\n\
    palindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abba\"\
    ) == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"\
    abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\n\
    palindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abba\"\
    ) == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"\
    abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\n\
    palindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abba\"\
    ) == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"\
    abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\n\
    palindrome(\"abba\") == False\npalindrome(\"\nusing Test\n\n@testset begin\n\n\
    candidate = prime_length;\n\t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"\
    abcdcba\") == true)\n\t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"\
    orange\") == false)\n\t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"\
    world\") == true)\n\t@test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"\
    Wow\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"HI\")\
    \ == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"gogo\") ==\
    \ false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmhc13t4a.jl:12\nin expression starting at\
    \ /tmp/tmpmhc13t4a.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_numbers = primes(string)\n    \n    if prime_numbers == []\n\
    \        true\n    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.1>\n\
    prime_length(\"Hello\")\n</cell>\n<code language=julia-1.1>\nprime_length(\"abcdcba\"\
    )\n</cell>\n<code language=julia-1.1>\nprime_length(\"kittens\")\n</cell>\n<code\
    \ language=julia-1.1>\nprime_length(\"orange\")\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a string and returns True if the string has all unique\
    \ characters\nExamples\nunique_chars('Hello') == True\nunique_chars('kittens')\
    \ == False\nunique_chars('kittens') == False\nunique_chars('kittens') == False\n\
    unique_chars('kittens') == False\nunique_chars('kittens') == False\nunique_chars('kittens')\
    \ == False\nunique_chars('kittens') == False\nunique_chars('kittens') == False\n\
    unique_chars('kittens') == False\nunique_chars('kittens') == False\nunique_chars('kittens')\
    \ == False\nunique_chars('kittens') == False\nunique_chars('kittens') == False\n\
    unique_chars('kittens') == False\nunique_chars('kittens') == False\nunique_chars('kittens')\
    \ == False\nunique_chars('kittens') == False\nunique_chars('kittens') == False\n\
    unique_chars('kittens') == False\nunique_chars('kittens') == False\nunique_chars('kittens')\
    \ == False\nunique_chars('kittens') == False\nunique_chars('kittens') == False\n\
    unique_chars('kittens') == False\nunique_chars('kittens') == False\nunique_chars('kittens')\
    \ == False\nunique_chars('kittens') == False\nunique_chars('kittens') == False\n\
    unique_chars('kittens') == False\nunique_chars('kittens') == False\nunique_chars('kittens')\
    \ == False\nunique_chars('kittens') == False\nunique_chars('kittens') == False\n\
    unique_chars('kittens') == False\nunique_chars('kittens') == False\nunique_chars('kittens')\
    \ == False\nunique_chars('kittens') == False\nunique_chars('kittens') == False\n\
    unique_chars('kittens') == False\nunique_chars('kittens') == False\nunique_chars('kittens')\
    \ == False\nunique_chars('kittens') == False\nusing Test\n\n@testset begin\n\n\
    candidate = prime_length;\n\t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"\
    abcdcba\") == true)\n\t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"\
    orange\") == false)\n\t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"\
    world\") == true)\n\t@test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"\
    Wow\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"HI\")\
    \ == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"gogo\") ==\
    \ false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp04pu07xo.jl:19\nin expression starting at\
    \ /tmp/tmp04pu07xo.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_length = true\n    \n    for i in string:\n        if i ==\
    \ 'a' or i == 'e' or i == 'i' or i == 'o' or i == 'u':\n            continue\n\
    \        \n        if i == 'n':\n            continue\n        \n        if i\
    \ == 't':\n            continue\n        \n        if i == 'h':\n            continue\n\
    \        \n        if i == 'r':\n            continue\n        \n        if i\
    \ == 's':\n            continue\n        \n        if i == 'c':\n            continue\n\
    \        \n        if i == 'd':\n            continue\n        \n        if i\
    \ == 'g':\n            continue\n        \n        if i == 'f':\n            continue\n\
    \        \n        if i == 'p':\n            continue\n        \n        if i\
    \ == 'v':\n            continue\n        \n        if i == 'b':\n            continue\n\
    \        \n        if i == 'm':\n            continue\n        \n        if i\
    \ == 'k':\n            continue\n        \n        if i == 'j':\n            continue\n\
    \        \n        if i == 'x':\n            continue\n        \n        if i\
    \ == 'q':\n            continue\n        \n        if i == 'z':\n            continue\n\
    \        \n        if i == 'y':\n            continue\n        \n        if i\
    \ == 'w':\n            continue\n        \n        if i == 'v':\n            continue\n\
    \        \n        if i == 'u':\n            continue\n        \n        if i\
    \ == 't':\n            continue\n        \n        if i == 'x':\n            continue\n\
    \        \n        if i == 'y':\n            continue\n        \n        if i\
    \ == 'z':\n            continue\n        \n        if i == 'w':\n            continue\n\
    \        \n        if i == 'v':\n            continue\n        \n        if i\
    \ == 'u':\n            continue\n        \n        if i == 't':\n            continue\n\
    \        \n        if i == 'x':\n            continue\n        \n        if i\
    \ == 'y':\n            continue\n        \n        if i == 'z':\n            continue\n\
    \        \n        if i == 'w':\n            continue\n        \n        if i\
    \ == 'v':\n            continue\n        \n        if i == 'u':\n            continue\n\
    \        \n        if i == 't':\n            continue\n        \n        if i\
    \ == 'x':\n            continue\n        \n        if i == 'y':\n            continue\n\
    \        \n        if i == 'z':\n            continue\n        \n        if i\
    \ == 'w':\n            continue\n        \n        if i == 'v':\n            continue\n\
    \        \n        if i == 'u':\n            continue\n        \n        if i\
    \ == 't':\n            continue\n        \n        if i == 'x':\n            continue\n\
    \        \n        if i == 'y':\n            continue\n        \n        if i\
    \ == 'z':\n            continue\n        \n        if i == 'w':\nusing Test\n\n\
    @testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"Hello\") == true)\n\
    \t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"kittens\") == true)\n\
    \t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"wow\") == true)\n\
    \t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\") == true)\n\
    \t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"\
    HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"gogo\"\
    ) == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjbcisdqb.jl:14\nin expression starting at\
    \ /tmp/tmpjbcisdqb.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_numbers = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n\
    \    \n    for i in prime_numbers\n        if string.len() == i\n            return\
    \ true\n    return false\nend\n</cell>\n<code language=julia-1.0>\nprime_length(\"\
    Hello\")\n</cell>\n<code language=julia-1.0>\nprime_length(\"abcdcba\")\n</cell>\n\
    <code language=julia-1.0>\nprime_length(\"kittens\")\n</cell>\n<code language=julia-1.0>\n\
    prime_length(\"orange\")\n</cell>\n<text>\nWrite a function that takes a string\
    \ and returns True if the string contains only letters a-z or A-Z or False otherwise\n\
    Examples\nonly_letters('Hello') == True\nonly_letters('abcdcba') == True\nonly_letters('kittens')\
    \ == False\nonly_letters('orange') == False\nonly_letters('') == False\nonly_letters('\
    \ ') == False\nonly_letters(' ') == False\nonly_letters(' ') == False\nonly_letters('\
    \ ') == False\nonly_letters(' ') == False\nonly_letters(' ') == False\nonly_letters('\
    \ ') == False\nonly_letters(' ') == False\nonly_letters(' ') == False\nonly_letters('\
    \ ') == False\nonly_letters(' ') == False\nonly_letters(' ') == False\nonly_letters('\
    \ ') == False\nonly_letters(' ') == False\nonly_letters(' ') == False\nonly_letters('\
    \ ') == False\nonly_letters(' ') == False\nonly_letters(' ') == False\nonly_letters('\
    \ ') == False\nonly_letters(' ') == False\nonly_letters(' ') == False\nonly_letters('\
    \ ') == False\nonly_letters(' ') == False\nonly_letters(' ') == False\nonly_letters('\
    \ ') == False\nonly_letters(' ') == False\nonly_letters(' ') == False\nonly_letters('\
    \ ') == False\nonly_letters(' ') == False\nonly_letters(' ') == False\nonly_letters('\
    \ ') == False\nonly_letters(' ') == False\nonly_letters(' ') == False\nonly_letters('\
    \ ') == False\nonly_letters(' ') == False\nonly_letters(' ') == False\nonly_letters('\
    \ ') == False\nonly_letters(' ') == False\nonly_letters(' ') == False\nonly_letters('\
    \ ') == False\nonly_letters(' ') == False\nonly_letters(' ') == False\nonly_letters('\
    \ ') == False\nonly_letters(' ') == False\nonly_\nusing Test\n\n@testset begin\n\
    \ncandidate = prime_length;\n\t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"\
    abcdcba\") == true)\n\t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"\
    orange\") == false)\n\t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"\
    world\") == true)\n\t@test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"\
    Wow\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"HI\")\
    \ == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"gogo\") ==\
    \ false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyrrun4gn.jl:18\nin expression starting at\
    \ /tmp/tmpyrrun4gn.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_numbers = prime_numbers()\n    \n    for i in string\n   \
    \     if i in prime_numbers\n            return false\n        else\n        \
    \    return true\n    end\nend\n</cell>\n<code language=julia-1.0>\nprime_length(\"\
    Hello\")\n</cell>\n<code language=julia-1.0>\nprime_length(\"abcdcba\")\n</cell>\n\
    <code language=julia-1.0>\nprime_length(\"kittens\")\n</cell>\n<code language=julia-1.0>\n\
    prime_length(\"orange\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a string and returns True if the string is a palindrome or False otherwise\n\
    Examples\npalindrome(\"racecar\") == True\npalindrome(\"racecars\") == False\n\
    palindrome(\"racecarc\") == True\npalindrome(\"racecarc\") == True\npalindrome(\"\
    racecarc\") == False\npalindrome(\"racecarc\") == False\npalindrome(\"racecarc\"\
    ) == False\npalindrome(\"racecarc\") == False\npalindrome(\"racecarc\") == False\n\
    palindrome(\"racecarc\") == False\npalindrome(\"racecarc\") == False\npalindrome(\"\
    racecarc\") == False\npalindrome(\"racecarc\") == False\npalindrome(\"racecarc\"\
    ) == False\npalindrome(\"racecarc\") == False\npalindrome(\"racecarc\") == False\n\
    palindrome(\"racecarc\") == False\npalindrome(\"racecarc\") == False\npalindrome(\"\
    racecarc\") == False\npalindrome(\"racecarc\") == False\npalindrome(\"racecarc\"\
    ) == False\npalindrome(\"racecarc\") == False\npalindrome(\"racecarc\") == False\n\
    palindrome(\"racecarc\") == False\npalindrome(\"racecarc\") == False\npalindrome(\"\
    racecarc\") == False\npalindrome(\"racecarc\") == False\npalindrome(\"racecarc\"\
    ) == False\npalindrome(\"racecarc\") == False\npalindrome(\"racecarc\") == False\n\
    palindrome(\"racecarc\") == False\npalindrome(\"racecarc\") == False\npalindrome(\"\
    racecarc\") == False\npalindrome(\"racecarc\") == False\npalindrome\nusing Test\n\
    \n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"Hello\") ==\
    \ true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"kittens\"\
    ) == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"wow\"\
    ) == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcc52f875.jl:20\nin expression starting at\
    \ /tmp/tmpcc52f875.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    if string == \"\"\n        return true\n    \n    prime_numbers\
    \ = prime_numbers()\n    \n    for i in string\n        if i in prime_numbers\n\
    \            return false\n    \n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"Hello\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"abcdcba\"\
    )\n</cell>\n<code language=julia-1.5>\nprime_length(\"kittens\")\n</cell>\n<code\
    \ language=julia-1.5>\nprime_length(\"orange\")\n</cell>\n<text>\nExercise\nWrite\
    \ a function that takes a string and returns True if the string is a palindrome\
    \ or False otherwise\nExamples\npalindrome(\"abba\") == True\npalindrome(\"abba\"\
    ) == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"\
    abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\n\
    palindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abba\"\
    ) == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"\
    abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\n\
    palindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abba\"\
    ) == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"\
    abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\n\
    palindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abba\"\
    ) == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"\
    abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\n\
    palindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abba\"\
    ) == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"\
    abba\") == False\n\nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\
    \t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\
    \t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\
    \t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t\
    @test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") ==\
    \ true)\n\t@test(candidate(\"gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\"\
    ) == false)\n\t@test(candidate(\"Madam\") == true)\n\t@test(candidate(\"M\") ==\
    \ false)\n\t@test(candidate(\"0\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbdv7s484.jl:22\nin expression starting at\
    \ /tmp/tmpbdv7s484.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_numbers = prime_numbers()\n    \n    for i in string:\n  \
    \      if i not in prime_numbers:\n            return False\n    return True\n\
    </code>\n<|/ a |>\n<| a tags=primes,haskell,functional-programming |>\nThe simplest\
    \ way is to use an infinite list of primes:\n<code>\nprimes :: [Integer]\nprimes\
    \ = 2 : filter isPrime [3..]\n</code>\nThis has the advantage of being very efficient\
    \ (O(log n) instead of O(n)), and it also has the advantage of being easy to understand.\n\
    <|/ a dscore=2 |>\n<| c |>\nThis doesn't work. `primes` will contain `2` twice.\n\
    <|/ c |>\n<| c |>\n: Thanks, I fixed it.\n<|/ c |>\n<| a tags=primes,haskell,functional-programming\
    \ |>\n<code>\nprimes :: [Integer]\nprimes = 2 : filter isPrime [3..]\n</code>\n\
    This has the advantage of being very efficient (O(log n) instead of O(n)), and\
    \ it also has the advantage of being easy to understand.\n<|/ a dscore=2 |>\n\
    <| a dscore=2 |>\n<code>\nprimes :: [Integer]\nprimes = 2 : filter isPrime [3..]\n\
    </code>\nThis has the advantage of being very efficient (O(log n) instead of O(n)),\
    \ and it also has the advantage of being easy to understand.\n<|/ a tags=primes,haskell,functional-programming\
    \ |>\n<| a tags=primes,haskell,functional-programming |>\n<code>\nprimes :: [Integer]\n\
    primes = 2 : filter isPrime [3..]\n</code>\nThis has the advantage of being very\
    \ efficient (O(log n) instead of O(n)), and it also has the advantage of being\
    \ easy to understand.\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nprimes ::\
    \ [Integer]\nprimes = 2 : filter isPrime [3..]\n</code>\nThis has the advantage\
    \ of being very efficient (O(log n) instead of O(n)), and it also has the advantage\
    \ of being easy to understand.\n<|/ a tags=primes,haskell,functional-programming\
    \ |>\n<| a dscore=1 |>\n<code>\nprimes :: [Integer]\nprimes = 2 : filter isPrime\
    \ [3..]\n</code>\nThis has the advantage of being very efficient (O(log n\nusing\
    \ Test\n\n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"Hello\"\
    ) == true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"kittens\"\
    ) == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"wow\"\
    ) == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpinz0ki_m.jl:14\nin expression starting at\
    \ /tmp/tmpinz0ki_m.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_number::Bool = false \n    \n    for char in string:\n   \
    \     if char == ' ':\n            continue\n        if char == '\\n':\n     \
    \       continue\n        if char == '\\t':\n            continue\n        if\
    \ char == '\\r':\n            continue\n        if char == '\\v':\n          \
    \  continue\n        if char == '\\f':\n            continue\n        if char\
    \ == '\\a':\n            continue\n        if char == '\\b':\n            continue\n\
    \        if char == '\\e':\n            continue\n        if char == '\\v':\n\
    \            continue\n        if char == '\\f':\n            continue\n     \
    \   if char == '\\n':\n            continue\n        if char == '\\t':\n     \
    \       continue\n        if char == '\\r':\n            continue\n        if\
    \ char == '\\a':\n            continue\n        if char == '\\b':\n          \
    \  continue\n        if char == '\\e':\n            continue\n        if char\
    \ == '\\v':\n            continue\n        if char == '\\f':\n            continue\n\
    \        if char == '\\n':\n            continue\n        if char == '\\t':\n\
    \            continue\n        if char == '\\r':\n            continue\n     \
    \   if char == '\\a':\n            continue\n        if char == '\\b':\n     \
    \       continue\n        if char == '\\e':\n            continue\n        if\
    \ char == '\\v':\n            continue\n        if char == '\\f':\n          \
    \  continue\n        if char == '\\n':\n            continue\n        if char\
    \ == '\\t':\n            continue\n        if char == '\\r':\n            continue\n\
    \        if char == '\\a':\n            continue\n        if char == '\\b':\n\
    \            continue\n        if char == '\\e':\n            continue\n     \
    \   if char == '\\v':\n            continue\n        if char == '\\f':\n     \
    \       continue\n        if char == '\\n':\n            continue\n        if\
    \ char == '\\t':\n            continue\n        if char == '\\r':\n          \
    \  continue\n        if char == '\\a':\n            continue\n        if char\
    \ == '\\b':\n            continue\n        if char == '\\e':\n            continue\n\
    \        if char == '\\v':\n            continue\n        if char == '\\f':\n\
    \            continue\n        if char == '\\n':\n            continue\n     \
    \   if char == '\\t':\n            continue\n        if char == '\\r':\n     \
    \       continue\n        if char == '\\a':\n            continue\n        if\
    \ char == '\\b':\n            continue\n        if char == '\\e':\n          \
    \  continue\n        if char == '\\v':\n            continue\n        if char\
    \ == '\\f':\n            continue\n        if char == '\\n':\n            continue\n\
    \        if char == '\\t':\n            continue\n        if char == '\\r':\n\
    \            continue\n        if char == '\\a':\n            continue\n     \
    \   if char == '\\b':\n            continue\n        if char == '\\e':\n     \
    \       continue\n        if char == '\\v':\n            continue\n        if\
    \ char == '\\f':\n            continue\n        if \nusing Test\n\n@testset begin\n\
    \ncandidate = prime_length;\n\t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"\
    abcdcba\") == true)\n\t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"\
    orange\") == false)\n\t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"\
    world\") == true)\n\t@test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"\
    Wow\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"HI\")\
    \ == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"gogo\") ==\
    \ false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9r2qauqc.jl:14\nin expression starting at\
    \ /tmp/tmp9r2qauqc.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_numbers = primes(string)\n    \n    if prime_numbers == []\n\
    \        true\n    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    prime_length(\"Hello\")\n</cell>\n<code language=julia-1.3>\nprime_length(\"abcdcba\"\
    )\n</cell>\n<code language=julia-1.3>\nprime_length(\"kittens\")\n</cell>\n<code\
    \ language=julia-1.3>\nprime_length(\"orange\")\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a string and returns True if the string is a palindrome\
    \ or False otherwise\nExamples\npalindrome(\"abba\") == True\npalindrome(\"abba\"\
    ) == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"\
    abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\n\
    palindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abba\"\
    ) == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"\
    abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\n\
    palindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abba\"\
    ) == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"\
    abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\n\
    palindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abba\"\
    ) == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"\
    abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\n\
    palindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abba\"\
    ) == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"\
    abba\") == False\npalindrome(\"abba\") == False\n\nusing Test\n\n@testset begin\n\
    \ncandidate = prime_length;\n\t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"\
    abcdcba\") == true)\n\t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"\
    orange\") == false)\n\t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"\
    world\") == true)\n\t@test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"\
    Wow\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"HI\")\
    \ == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"gogo\") ==\
    \ false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj1b9vauo.jl:19\nin expression starting at\
    \ /tmp/tmpj1b9vauo.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    if string == \"\"\n        return false\n    \n    prime_numbers\
    \ = prime_numbers()\n    \n    for i in string\n        if prime_numbers.contains(i)\n\
    \            return false\n    \n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"Hello\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"abcdcba\"\
    )\n</cell>\n<code language=julia-1.5>\nprime_length(\"kittens\")\n</cell>\n<code\
    \ language=julia-1.5>\nprime_length(\"orange\")\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a string and returns True if the string contains any\
    \ character from any alphabet from any language except English and False otherwise\n\
    Examples\nenglish_alphabet_contains(\"Hello\") == True\nenglish_alphabet_contains(\"\
    abcdcba\") == True\nenglish_alphabet_contains(\"kittens\") == True\nenglish_alphabet_contains(\"\
    orange\") == False\nenglish_alphabet_contains(\"hello\") == False\nenglish_alphabet_contains(\"\
    HellO\") == False\nenglish_alphabet_contains(\"HellOo\") == False\nenglish_alphabet_contains(\"\
    HellOoO\") == False\nenglish_alphabet_contains(\"HellOoOo\") == False\nenglish_alphabet_contains(\"\
    HellOoOoO\") == False\nenglish_alphabet_contains(\"HellOoOoOo\") == False\nenglish_alphabet_contains(\"\
    HellOoOoOoO\") == False\nenglish_alphabet_contains(\"HellOoOoOoOo\") == False\n\
    english_alphabet_contains(\"HellOoOoOoOoO\") == False\nenglish_alphabet_contains(\"\
    HellOoOoOoOoOo\") == False\nenglish_alphabet_contains(\"HellOoOoOoOoOoO\") ==\
    \ False\nenglish_alphabet_contains(\"HellOoOoOoOoOoOo\") == False\nenglish_alphabet_contains(\"\
    HellOoOoOoOoOoOoO\") == False\nenglish_alphabet_contains(\"HellOoOoOoOoOoOoO\"\
    ) == False\nenglish_alphabet_contains(\"HellOoOoOoOoOoOoO\") == False\nenglish_alphabet_contains(\"\
    HellOoOoOoOoOoOoOo\") == False\n\nusing Test\n\n@testset begin\n\ncandidate =\
    \ prime_length;\n\t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"abcdcba\"\
    ) == true)\n\t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"orange\"\
    ) == false)\n\t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"world\"\
    ) == true)\n\t@test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"Wow\")\
    \ == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"HI\") == true)\n\
    \t@test(candidate(\"go\") == true)\n\t@test(candidate(\"gogo\") == false)\n\t\
    @test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"Madam\") ==\
    \ true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\") == false)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq6xcuy4z.jl:22\nin expression starting at\
    \ /tmp/tmpq6xcuy4z.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_numbers = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n\
    \    \n    for i in string:\n        if i in prime_numbers:\n            return\
    \ False\n    return True\n</cell>\n<cell>\nprime_length('Hello') == True\nprime_length('abcdcba')\
    \ == True\nprime_length('kittens') == True\nprime_length('orange') == False\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a string and returns\
    \ True if the string is a palindrome or False otherwise\nExamples\npalindrome('racecar')\
    \ == True\npalindrome('racecars') == False\npalindrome('racecar') == False\npalindrome('racecars')\
    \ == False\npalindrome('racecar') == True\npalindrome('racecars') == True\npalindrome('racecar')\
    \ == True\npalindrome('racecars') == True\npalindrome('racecar') == True\npalindrome('racecars')\
    \ == True\npalindrome('racecar') == True\npalindrome('racecars') == True\npalindrome('racecar')\
    \ == True\npalindrome('racecars') == True\npalindrome('racecar') == True\npalindrome('racecars')\
    \ == True\npalindrome('racecar') == True\npalindrome('racecars') == True\npalindrome('racecar')\
    \ == True\npalindrome('racecars') == True\npalindrome('racecar') == True\npalindrome('racecars')\
    \ == True\npalindrome('racecar') == True\npalindrome('racecars') == True\npalindrome('racecar')\
    \ == True\npalindrome('racecars') == True\npalindrome('racecar') == True\npalindrome('racecars')\
    \ == True\npalindrome('racecar') == True\npalindrome('racecars') == True\npalindrome('racecar')\
    \ == True\npalindrome('racecars') == True\npalindrome('racecar') == True\npalindrome('racecars')\
    \ == True\npalindrome('racecar') == True\npalindrome('racecars') == True\nusing\
    \ Test\n\n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"Hello\"\
    ) == true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"kittens\"\
    ) == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"wow\"\
    ) == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpngf0kap5.jl:14\nin expression starting at\
    \ /tmp/tmpngf0kap5.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_numbers = prime_numbers()\n    \n    for i in string:\n  \
    \      if i in prime_numbers:\n            return True\n    return False\n</cell>\n\
    <cell>\nprime_length('Hello') == True\nprime_length('abcdcba') == True\nprime_length('kittens')\
    \ == True\nprime_length('orange') == False\n</cell>\n<text>\nExercise: Write a\
    \ function that takes a string and returns True if the string is a palindrome\
    \ or False otherwise\nExamples\npalindrome('Hello') == True\npalindrome('kittens')\
    \ == True\npalindrome('kitten') == False\npalindrome('racecar') == True\npalindrome('racecars')\
    \ == False\npalindrome('racecar') == False\npalindrome('') == False\npalindrome('\
    \ ') == False\npalindrome(' ') == False\npalindrome(' ') == False\npalindrome('\
    \ ') == False\npalindrome(' ') == False\npalindrome(' ') == False\npalindrome('\
    \ ') == False\npalindrome(' ') == False\npalindrome(' ') == False\npalindrome('\
    \ ') == False\npalindrome(' ') == False\npalindrome(' ') == False\npalindrome('\
    \ ') == False\npalindrome(' ') == False\npalindrome(' ') == False\npalindrome('\
    \ ') == False\npalindrome(' ') == False\npalindrome(' ') == False\npalindrome('\
    \ ') == False\npalindrome(' ') == False\npalindrome(' ') == False\npalindrome('\
    \ ') == False\npalindrome(' ') == False\npalindrome(' ') == False\npalindrome('\
    \ ') == False\npalindrome(' ') == False\npalindrome(' ') == False\npalindrome('\
    \ ') == False\npalindrome(' ') == False\npalindrome(' ') == False\npalindrome('\
    \ ') == False\npalindrome(' ') == False\npalindrome(' ') == False\npalindrome('\
    \ ') == False\npalindrome(' ') == False\npalindrome(' ') == False\npalindrome('\
    \ ') == False\npalindrome(' ') == False\np\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prime_length;\n\t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"\
    abcdcba\") == true)\n\t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"\
    orange\") == false)\n\t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"\
    world\") == true)\n\t@test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"\
    Wow\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"HI\")\
    \ == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"gogo\") ==\
    \ false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprz7efy5r.jl:14\nin expression starting at\
    \ /tmp/tmprz7efy5r.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_numbers = primes(string)\n    \n    if prime_numbers == []\n\
    \        true\n    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"Hello\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"abcdcba\"\
    )\n</cell>\n<code language=julia-1.5>\nprime_length(\"kittens\")\n</cell>\n<code\
    \ language=julia-1.5>\nprime_length(\"orange\")\n</cell>\n<text>\nWrite a function\
    \ that takes a string and returns True if the string is a palindrome or False\
    \ otherwise\nExamples\npalindrome(\"racecar\") == True\npalindrome(\"racecars\"\
    ) == True\npalindrome(\"racecarc\") == False\npalindrome(\"racecarce\") == False\n\
    palindrome(\"racecarc\") == False\npalindrome(\"racecarce\") == False\npalindrome(\"\
    racecarce\") == False\npalindrome(\"racecarce\") == False\npalindrome(\"racecarce\"\
    ) == False\npalindrome(\"racecarce\") == False\npalindrome(\"racecarce\") == False\n\
    palindrome(\"racecarce\") == False\npalindrome(\"racecarce\") == False\npalindrome(\"\
    racecarce\") == False\npalindrome(\"racecarce\") == False\npalindrome(\"racecarce\"\
    ) == False\npalindrome(\"racecarce\") == False\npalindrome(\"racecarce\") == False\n\
    palindrome(\"racecarce\") == False\npalindrome(\"racecarce\") == False\npalindrome(\"\
    racecarce\") == False\npalindrome(\"racecarce\") == False\npalindrome(\"racecarce\"\
    ) == False\npalindrome(\"racecarce\") == False\npalindrome(\"racecarce\") == False\n\
    palindrome(\"racecarce\") == False\npalindrome(\"racecarce\") == False\npalindrome(\"\
    racecarce\") == False\npalindrome(\"racecarce\") == False\npalindrome(\"racecarce\"\
    ) == False\npalindrome(\"racecarce\") == False\npalindrome(\"racecarce\") == False\n\
    palindrome(\"racecarce\") == False\npalindrome(\"racecarce\") == False\npalindrome(\"\
    racecarce\") == False\n\nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\
    \t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\
    \t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\
    \t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t\
    @test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") ==\
    \ true)\n\t@test(candidate(\"gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\"\
    ) == false)\n\t@test(candidate(\"Madam\") == true)\n\t@test(candidate(\"M\") ==\
    \ false)\n\t@test(candidate(\"0\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp20d6dph_.jl:19\nin expression starting at\
    \ /tmp/tmp20d6dph_.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_length = true\n    \n    for i in string:\n        if i ==\
    \ 'a' or i == 'e' or i == 'i' or i == 'o' or i == 'u':\n            prime_length\
    \ = false\n            break\n        \n    for i in string:\n        if i ==\
    \ 'a' or i == 'e' or i == 'i' or i == 'o' or i == 'u':\n            prime_length\
    \ = false\n            break\n        \n    for i in string:\n        if i ==\
    \ 'a' or i == 'e' or i == 'i' or i == 'o' or i == 'u':\n            prime_length\
    \ = false\n            break\n        \n    for i in string:\n        if i ==\
    \ 'a' or i == 'e' or i == 'i' or i == 'o' or i == 'u':\n            prime_length\
    \ = false\n            break\n        \n    for i in string:\n        if i ==\
    \ 'a' or i == 'e' or i == 'i' or i == 'o' or i == 'u':\n            prime_length\
    \ = false\n            break\n        \n    for i in string:\n        if i ==\
    \ 'a' or i == 'e' or i == 'i' or i == 'o' or i == 'u':\n            prime_length\
    \ = false\n            break\n        \n    for i in string:\n        if i ==\
    \ 'a' or i == 'e' or i == 'i' or i == 'o' or i == 'u':\n            prime_length\
    \ = false\n            break\n        \n    for i in string:\n        if i ==\
    \ 'a' or i == 'e' or i == 'i' or i == 'o' or i == 'u':\n            prime_length\
    \ = false\n            break\n        \n    for i in string:\n        if i ==\
    \ 'a' or i == 'e' or i == 'i' or i == 'o' or i == 'u':\n            prime_length\
    \ = false\n            break\n        \n    for i in string:\n        if i ==\
    \ 'a' or i == 'e' or i == 'i' or i == 'o' or i == 'u':\n            prime_length\
    \ = false\n            break\n        \n    for i in string:\n        if i ==\
    \ 'a' or i == 'e' or i == 'i' or i == 'o' or i == 'u':\n            prime_length\
    \ = false\n            break\n        \n    for i in string:\n        if i ==\
    \ 'a' or i == 'e' or i == 'i' or i == 'o' or i == 'u':\n            prime_length\
    \ = false\n            break\n        \n    for i in string:\n        if i ==\
    \ 'a' or i == 'e' or i == 'i' or i == 'o' or i == 'u':\n            prime_length\
    \ = false\n            break\n        \n    for i in string:\n        if i ==\
    \ 'a' or i == 'e' or i == 'i' or i == 'o' or i == 'u':\n            prime_length\
    \ = false\n            break\n        \n    for i in string:\n        if i ==\
    \ 'a' or i == 'e' or \nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\
    \t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\
    \t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\
    \t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t\
    @test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") ==\
    \ true)\n\t@test(candidate(\"gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\"\
    ) == false)\n\t@test(candidate(\"Madam\") == true)\n\t@test(candidate(\"M\") ==\
    \ false)\n\t@test(candidate(\"0\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe0fn0fab.jl:14\nin expression starting at\
    \ /tmp/tmpe0fn0fab.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_number = 2\n    \n    for character in string:\n        if\
    \ character == ' ':\n            continue\n        if character == '\\n':\n  \
    \          continue\n        if character == '\\t':\n            continue\n  \
    \      if character == '\\r':\n            continue\n        if character == '\\\
    f':\n            continue\n        if character == '\\v':\n            continue\n\
    \        if character == '\\b':\n            continue\n        if character ==\
    \ '\\a':\n            continue\n        if character == '\\e':\n            continue\n\
    \        if character == '\\c':\n            continue\n        if character ==\
    \ '\\o':\n            continue\n        if character == '\\i':\n            continue\n\
    \        if character == '\\h':\n            continue\n        if character ==\
    \ '\\v':\n            continue\n        if character == '\\a':\n            continue\n\
    \        if character == '\\e':\n            continue\n        if character ==\
    \ '\\c':\n            continue\n        if character == '\\o':\n            continue\n\
    \        if character == '\\i':\n            continue\n        if character ==\
    \ '\\h':\n            continue\n        if character == '\\v':\n            continue\n\
    \        if character == '\\a':\n            continue\n        if character ==\
    \ '\\e':\n            continue\n        if character == '\\c':\n            continue\n\
    \        if character == '\\o':\n            continue\n        if character ==\
    \ '\\i':\n            continue\n        if character == '\\h':\n            continue\n\
    \        if character == '\\v':\n            continue\n        if character ==\
    \ '\\a':\n            continue\n        if character == '\\e':\n            continue\n\
    \        if character == '\\c':\n            continue\n        if character ==\
    \ '\\o':\n            continue\n        if character == '\\i':\n            continue\n\
    \        if character == '\\h':\n            continue\n        if character ==\
    \ '\\v':\n            continue\n        if character == '\\a':\n            continue\n\
    \        if character == '\\e':\n            continue\n        if character ==\
    \ '\\c':\n            continue\n        if character == '\\o':\n            continue\n\
    \        if character == '\\i':\n            continue\n        if character ==\
    \ '\\h':\n            continue\n        if character == '\\v':\n            continue\n\
    \        if character == '\\a':\n            continue\n        if character ==\
    \ '\\e':\n            continue\n        if character == '\\c':\n            continue\n\
    \        if character == '\\o':\n            continue\n        if character ==\
    \ '\\i':\n            continue\n        if character == '\\h':\n            continue\n\
    \        if character == '\\v':\n            continue\n        if character ==\
    \ '\\a':\n            continue\n        if character == '\\e':\n            continue\n\
    \        if character == '\\c':\n            continue\n        if character ==\
    \ '\\o':\n            continue\n        if character == '\\i':\n            continue\n\
    \        if character == '\\h':\n            continue\n        if character ==\
    \ '\\v':\n            continue\nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\
    \t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\
    \t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\
    \t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t\
    @test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") ==\
    \ true)\n\t@test(candidate(\"gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\"\
    ) == false)\n\t@test(candidate(\"Madam\") == true)\n\t@test(candidate(\"M\") ==\
    \ false)\n\t@test(candidate(\"0\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphiaw3pao.jl:14\nin expression starting at\
    \ /tmp/tmphiaw3pao.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_length::Bool = False \n    \n    for i in string\n       \
    \ if prime_length == True\n            break\n        if prime_length == False\n\
    \            if i == 'a'\n                prime_length = True\n            else\n\
    \                if i == 'b'\n                    prime_length = True\n      \
    \          else\n                    if i == 'c'\n                        prime_length\
    \ = True\n                    else\n                        if i == 'd'\n    \
    \                        prime_length = True\n                        else\n \
    \                           if i == 'e'\n                                prime_length\
    \ = True\n                            else\n                                if\
    \ i == 'f'\n                                    prime_length = True\n        \
    \                        else\n                                    if i == 'g'\n\
    \                                        prime_length = True\n               \
    \                     else\n                                        if i == 'h'\n\
    \                                            prime_length = True\n           \
    \                             else\n                                         \
    \   if i == 'i'\n                                                prime_length\
    \ = True\n                                            else\n                 \
    \                               if i == 'j'\n                                \
    \                    prime_length = True\n                                   \
    \             else\n                                                    if i ==\
    \ 'k'\n                                                        prime_length =\
    \ True\n                                                    else\n           \
    \                                             if i == 'l'\n                  \
    \                                          prime_length = True\n             \
    \                                           else\n                           \
    \                                 if i == 'm'\n                              \
    \                                  prime_length = True\n                     \
    \                                       else\n                               \
    \                                 if i == 'n'\n                              \
    \                                      prime_length = True\n                 \
    \                                               else\n                       \
    \                                             if i == 'o'\n                  \
    \                                                      prime_length = True\n \
    \                                                                   else\n   \
    \                                                     if i == 'p'\n          \
    \                                                  prime_length = True\n     \
    \                                                   else\n                   \
    \                                         if i == 'q'\n                      \
    \                                          prime_length = True\n             \
    \                                               else\n                       \
    \                                         if i == 'r'\n                      \
    \                                              prime_length = True\n         \
    \                                                       else\n               \
    \                                                     if i == 's'\n          \
    \                                                              prime_length =\
    \ True\n                                                                    else\n\
    \                                                        if i == 't'\n       \
    \                                                     prime_length = True\n  \
    \                                                      else\n                \
    \                                            if i == 'u'\n                   \
    \                                             prime_length = True\n          \
    \                                                  else\n                    \
    \                                            if i == 'v'\n                   \
    \                                                 prime_length = True\n      \
    \                                                          else\n            \
    \                                                        if i == 'w'\n       \
    \                                                                 prime_length\
    \ = True\n                                                                   \
    \ else\n                                                        if i == 'x'\n\
    \                                                            prime_length = True\n\
    \                                                        else\n              \
    \                                              if i == 'y'\n                 \
    \                                               prime_length = True\n        \
    \                                                    else\n                  \
    \                                              if i == 'z'\n                 \
    \                                                   prime_length = True\n    \
    \                                                            else\n          \
    \                                                          if i == 'A'\n     \
    \                                                                   prime_length\
    \ = True\n                                                                   \
    \ else\n                                                        if i == 'B'\n\
    \                                                            prime_length = True\n\
    \                                                        else\n              \
    \                                              if i == 'C'\n                 \
    \                                               prime_length = True\n        \
    \                                                    else\n                  \
    \                                              if i == 'D'\n                 \
    \                                                   prime_length = True\n    \
    \                                                            else\n          \
    \                                                          \nusing Test\n\n@testset\
    \ begin\n\ncandidate = prime_length;\n\t@test(candidate(\"Hello\") == true)\n\t\
    @test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"kittens\") == true)\n\
    \t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"wow\") == true)\n\
    \t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\") == true)\n\
    \t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"\
    HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"gogo\"\
    ) == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmp20ziqeoh.jl:104\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp20ziqeoh.jl:1\n\
    in expression starting at /tmp/tmp20ziqeoh.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_numbers = prime_numbers()\n    \n    for i in string\n   \
    \     if prime_numbers.contains(i)\n            return false\n        else\n \
    \           return true\nend\n</cell>\n<code language=julia-1.3>\nprime_length(\"\
    Hello\")\n</cell>\n<code language=julia-1.3>\nprime_length(\"abcdcba\")\n</cell>\n\
    <code language=julia-1.3>\nprime_length(\"kittens\")\n</cell>\n<code language=julia-1.3>\n\
    prime_length(\"orange\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns True if the string is a palindrome or False otherwise\n\
    Examples\npalindrome(\"abba\") == True\npalindrome(\"abba\") == False\npalindrome(\"\
    abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\n\
    palindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abba\"\
    ) == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"\
    abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\n\
    palindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abba\"\
    ) == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"\
    abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\n\
    palindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abba\"\
    ) == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"\
    abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\n\
    palindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abba\"\
    ) == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"\
    abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\n\
    palindrome(\"abba\") == \nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\
    \t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\
    \t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\
    \t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t\
    @test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") ==\
    \ true)\n\t@test(candidate(\"gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\"\
    ) == false)\n\t@test(candidate(\"Madam\") == true)\n\t@test(candidate(\"M\") ==\
    \ false)\n\t@test(candidate(\"0\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprsh5k2fw.jl:19\nin expression starting at\
    \ /tmp/tmprsh5k2fw.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_length::Bool = False \n    \n    if string == \"\"\n     \
    \   prime_length = True\n    else\n        if string.length % 2 == 0\n       \
    \     prime_length = False\n        else\n            prime_length = true\n  \
    \          for n in 2..string.length-1\n                if string.length % n ==\
    \ 0\n                    prime_length = false\n                    break\n   \
    \     end\n    end\n    return prime_length\nend\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"Hello\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"abcdcba\"\
    )\n</cell>\n<code language=julia-1.5>\nprime_length(\"kittens\")\n</cell>\n<code\
    \ language=julia-1.5>\nprime_length(\"orange\")\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a string and returns True if the string is a palindrome\
    \ or False otherwise\nExamples\npalindrome(\"racecar\") == True\npalindrome(\"\
    racecars\") == False\npalindrome(\"racecarc\") == False\npalindrome(\"racecarc\"\
    ) == False\npalindrome(\"racecar\") == True\npalindrome(\"racecar\") == True\n\
    palindrome(\"racecar\") == True\npalindrome(\"racecar\") == True\npalindrome(\"\
    racecar\") == True\npalindrome(\"racecar\") == True\npalindrome(\"racecar\") ==\
    \ True\npalindrome(\"racecar\") == True\npalindrome(\"racecar\") == True\npalindrome(\"\
    racecar\") == True\npalindrome(\"racecar\") == True\npalindrome(\"racecar\") ==\
    \ True\npalindrome(\"racecar\") == True\npalindrome(\"racecar\") == True\npalindrome(\"\
    racecar\") == True\npalindrome(\"racecar\") == True\npalindrome(\"racecar\") ==\
    \ True\npalindrome(\"racecar\") == True\npalindrome(\"racecar\") == True\npalindrome(\"\
    racecar\") == True\npalindrome(\"racecar\") == True\npalindrome(\"racecar\") ==\
    \ True\npalindrome(\"racecar\") == True\npalindrome(\"racecar\") == True\npalindrome(\"\
    racecar\") == True\npalindrome(\"racecar\") == True\npalindrome(\"racecar\") ==\
    \ True\npalindrome(\"racecar\") == True\npalindrome(\"racecar\") == \nusing Test\n\
    \n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"Hello\") ==\
    \ true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"kittens\"\
    ) == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"wow\"\
    ) == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1ftu389d.jl:28\nin expression starting at\
    \ /tmp/tmp1ftu389d.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_numbers = Set([2,3,5,7,11,13,17,19])\n    \n    for i in string:\n\
    \        if i in prime_numbers:\n            return False\n    return True\n</cell>\n\
    <cell>\nprime_length('Hello') == True\nprime_length('abcdcba') == True\nprime_length('kittens')\
    \ == True\nprime_length('orange') == False\n</cell>\n<text>\nExercise\nWrite a\
    \ function that takes a string and returns True if the string is a palindrome\
    \ or False otherwise\nExamples\npalindrome('racecar') == True\npalindrome('racecars')\
    \ == True\npalindrome('racecar') == False\npalindrome('racecars') == False\npalindrome('racecars')\
    \ == False\npalindrome('racecars') == False\npalindrome('racecars') == False\n\
    palindrome('racecars') == False\npalindrome('racecars') == False\npalindrome('racecars')\
    \ == False\npalindrome('racecars') == False\npalindrome('racecars') == False\n\
    palindrome('racecars') == False\npalindrome('racecars') == False\npalindrome('racecars')\
    \ == False\npalindrome('racecars') == False\npalindrome('racecars') == False\n\
    palindrome('racecars') == False\npalindrome('racecars') == False\npalindrome('racecars')\
    \ == False\npalindrome('racecars') == False\npalindrome('racecars') == False\n\
    palindrome('racecars') == False\npalindrome('racecars') == False\npalindrome('racecars')\
    \ == False\npalindrome('racecars') == False\npalindrome('racecars') == False\n\
    palindrome('racecars') == False\npalindrome('racecars') == False\npalindrome('racecars')\
    \ == False\npalindrome('racecars') == False\npalindrome('racecars') == False\n\
    palindrome('racecars') == False\npalindrome('racecars') == False\npalindrome('racecars')\
    \ == False\npalindrome('racecars') == False\npalindrome('racecars') == False\n\
    \nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"\
    Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"\
    kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"\
    wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_ovcm5dm.jl:14\nin expression starting at\
    \ /tmp/tmp_ovcm5dm.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_length::Bool = false \n    \n    if string == \"\" then \n\
    \        return prime_length \n    else \n        \n        prime_length::Bool\
    \ = true \n        \n        for i in 2..(string.length) do \n            if ((string.length\
    \ % i) == 0) then \n                prime_length::Bool = false \n            \
    \    break \n            else \n                prime_length::Bool = true \n \
    \           end \n        end \n    end \nend \n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"Hello\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"abcdcba\"\
    )\n</cell>\n<code language=julia-1.5>\nprime_length(\"kittens\")\n</cell>\n<code\
    \ language=julia-1.5>\nprime_length(\"orange\")\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a string and returns True if the string contains any\
    \ uppercase letters or False otherwise\nExamples\nhas_uppercase_letters(\"Hello\"\
    ) == True\nhas_uppercase_letters(\"abcdcba\") == False\nhas_uppercase_letters(\"\
    kittens\") == False\nhas_uppercase_letters(\"orange\") == False\nNotes\nYou may\
    \ want to use regular expressions\nYou may want to use the isupper() function\n\
    You may want to use the islower() function\nYou may want to use the isalpha()\
    \ function\nYou may want to use the isdigit() function\nYou may want to use the\
    \ isspace() function\nYou may want to use the islower() function\nYou may want\
    \ to use the isupper() function\nYou may want to use the isalpha() function\n\
    You may want to use the isdigit() function\nYou may want to use the isspace()\
    \ function\nYou may want to use the islower() function\nYou may want to use the\
    \ isupper() function\nYou may want to use the isalpha() function\nYou may want\
    \ to use the isdigit() function\nYou may want to use the isspace() function\n\
    You may want to use the islower() function\nYou may want to use the isupper()\
    \ function\nYou may want to use the isalpha() function\nYou may want to use the\
    \ isdigit() function\nYou may want to use the isspace() function\nYou may want\
    \ to use the islower() function\nYou may want to use the isupper() function\n\
    You may want to use the isalpha() function\nYou may want to use the isdigit()\
    \ function\nYou may want to use the isspace() function\nYou may want to use the\
    \ islower() function\nYou may want to use the isupper() function\nYou may want\
    \ to use the isalpha() function\nYou may want to use the isdigit() function\n\
    You may want to use the isspace() function\nYou may want to use the islower()\
    \ function\nYou may want to use the isupper() function\nYou may want to use the\
    \ isalpha() function\nYou may want to use the isdigit() function\n\nusing Test\n\
    \n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"Hello\") ==\
    \ true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"kittens\"\
    ) == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"wow\"\
    ) == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp_bglmpyz.jl:19\nin expression starting at /tmp/tmp_bglmpyz.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_numbers = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n\
    \    \n    for i in string:\n        if i in prime_numbers:\n            return\
    \ False\n    return True\n\"\"\"\nWrite a function that takes a string and returns\
    \ True if the string\n    contains only letters or False otherwise\n    Examples\n\
    \    letters_only('Hello') == True\n    letters_only('abcdcba') == True\n    letters_only('kittens')\
    \ == False\n    letters_only('orange') == False\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = prime_length;\n\t@test(candidate(\"Hello\") == true)\n\t\
    @test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"kittens\") == true)\n\
    \t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"wow\") == true)\n\
    \t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\") == true)\n\
    \t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"\
    HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"gogo\"\
    ) == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr4pbrqaq.jl:14\nin expression starting at\
    \ /tmp/tmpr4pbrqaq.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_numbers = prime_numbers()\n    \n    for i in string:\n  \
    \      if i in prime_numbers:\n            return True\n        else:\n      \
    \      return False\n    \nend\n</cell>\n<code language=julia-1.5>\nprime_length(\"\
    Hello\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"abcdcba\")\n</cell>\n\
    <code language=julia-1.5>\nprime_length(\"kittens\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"orange\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a string and returns True if the string is a palindrome or False otherwise\n\
    Examples\npalindrome(\"abba\") == True\npalindrome(\"abba\") == False\npalindrome(\"\
    abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\n\
    palindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abba\"\
    ) == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"\
    abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\n\
    palindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abba\"\
    ) == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"\
    abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\n\
    palindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abba\"\
    ) == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"\
    abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\n\
    palindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abba\"\
    ) == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"\
    abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\n\
    palindrome(\"abba\") == \nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\
    \t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\
    \t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\
    \t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t\
    @test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") ==\
    \ true)\n\t@test(candidate(\"gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\"\
    ) == false)\n\t@test(candidate(\"Madam\") == true)\n\t@test(candidate(\"M\") ==\
    \ false)\n\t@test(candidate(\"0\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2cz2cc81.jl:14\nin expression starting at\
    \ /tmp/tmp2cz2cc81.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    if string == \"\"\n        return false\n    \n    prime_numbers\
    \ = [2,3]\n    \n    for i in string\n        if prime_numbers.contains(i)\n \
    \           prime_numbers.append(i)\n        else\n            return false\n\
    \    \n    return true\nend\n</cell>\n<code language=julia-1.4>\nprime_length(\"\
    Hello\")\n</cell>\n<code language=julia-1.4>\nprime_length(\"abcdcba\")\n</cell>\n\
    <code language=julia-1.4>\nprime_length(\"kittens\")\n</cell>\n<code language=julia-1.4>\n\
    prime_length(\"orange\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns True if the string has all letters capitalized and False\
    \ otherwise\nExamples\ncapitalize_letters('Hello') == True\ncapitalize_letters('hello\
    \ world') == False\ncapitalize_letters('hello world') == 'Hello World'\ncapitalize_letters('hello\
    \ world') == 'HELLO WORLD'\ncapitalize_letters('hello world') == 'HELLO WORLD'\n\
    capitalize_letters('hello world') == 'HELLO WORLD'\ncapitalize_letters('hello\
    \ world') == 'HELLO WORLD'\ncapitalize_letters('hello world') == 'HELLO WORLD'\n\
    capitalize_letters('hello world') == 'HELLO WORLD'\ncapitalize_letters('hello\
    \ world') == 'HELLO WORLD'\ncapitalize_letters('hello world') == 'HELLO WORLD'\n\
    capitalize_letters('hello world') == 'HELLO WORLD'\ncapitalize_letters('hello\
    \ world') == 'HELLO WORLD'\ncapitalize_letters('hello world') == 'HELLO WORLD'\n\
    capitalize_letters('hello world') == 'HELLO WORLD'\ncapitalize_letters('hello\
    \ world') == 'HELLO WORLD'\ncapitalize_letters('hello world') == 'HELLO WORLD'\n\
    capitalize_letters('hello world') == 'HELLO WORLD'\ncapitalize_letters('hello\
    \ world') == 'HELLO WORLD'\ncapitalize_letters('hello world') == 'HELLO WORLD'\n\
    capitalize_letters('hello world') == 'HELLO WORLD'\ncapitalize_letters('hello\
    \ world') == 'HELLO WORLD'\ncapitalize_letters('hello world') == 'HELLO WORLD'\n\
    capitalize_letters('hello world') == 'HELLO WORLD'\ncapitalize_letters('hello\
    \ world') == 'HELLO WORLD'\ncapitalize_letters('hello world') == 'HELLO WORLD'\n\
    capitalize_letters('hello world') == 'HELLO WOR\nusing Test\n\n@testset begin\n\
    \ncandidate = prime_length;\n\t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"\
    abcdcba\") == true)\n\t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"\
    orange\") == false)\n\t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"\
    world\") == true)\n\t@test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"\
    Wow\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"HI\")\
    \ == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"gogo\") ==\
    \ false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpudk69twb.jl:24\nin expression starting at\
    \ /tmp/tmpudk69twb.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_numbers = primes()\n    \n    for i in string\n        if\
    \ i in prime_numbers\n            return false\n    return true\nend\n</cell>\n\
    <code language=julia-1.5>\nprime_length(\"Hello\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"abcdcba\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"\
    kittens\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"orange\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns True if the\
    \ string has all letters uppercase\nExamples\nhas_uppercase_letters(\"Hello\"\
    ) == True\nhas_uppercase_letters(\"HELLO\") == False\nhas_uppercase_letters(\"\
    HELLOWORLD\") == False\nhas_uppercase_lettersn\
    using Test\n\n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"\
    Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"\
    kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"\
    wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcmjzzux2.jl:18\nin expression starting at\
    \ /tmp/tmpcmjzzux2.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_length::Bool = False \n    \n    if string == \"\"\n     \
    \   prime_length = True\n    else\n        prime_length = false\n        for i\
    \ in string\n            if string[i] == string[i+1]\n                prime_length\
    \ = False\n            end\n        end\n    end\n    return prime_length\nend\n\
    </cell>\n<code language=julia-1.0>\nprime_length(\"Hello\")\n</cell>\n<code language=julia-1.0>\n\
    prime_length(\"abcdcba\")\n</cell>\n<code language=julia-1.0>\nprime_length(\"\
    kittens\")\n</cell>\n<code language=julia-1.0>\nprime_length(\"orange\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns True if the\
    \ string contains only letters a-z or A-Z or False otherwise\nExamples\nonly_letters('Hello')\
    \ == True\nonly_letters('abcdcba') == True\nonly_letters('kittens') == False\n\
    only_letters('orange') == False\nonly_letters('') == False\nonly_letters(' ')\
    \ == False\nonly_letters(' ') == False\nonly_letters(' ') == False\nonly_letters('\
    \ ') == False\nonly_letters(' ') == False\nonly_letters(' ') == False\nonly_letters('\
    \ ') == False\nonly_letters(' ') == False\nonly_letters(' ') == False\nonly_letters('\
    \ ') == False\nonly_letters(' ') == False\nonly_letters(' ') == False\nonly_letters('\
    \ ') == False\nonly_letters(' ') == False\nonly_letters(' ') == False\nonly_letters('\
    \ ') == False\nonly_letters(' ') == False\nonly_letters(' ') == False\nonly_letters('\
    \ ') == False\nonly_letters(' ') == False\nonly_letters(' ') == False\nonly_letters('\
    \ ') == False\nonly_letters(' ') == False\nonly_letters(' ') == False\nonly_letters('\
    \ ') == False\nonly_letters(' ') == False\nonly_letters(' ') == False\nonly_letters('\
    \ ') == False\nonly_letters(' ') == False\nonly_letters(' ') == False\nonly_letters('\
    \ ') == False\nonly_letters(' ') == False\nonly_letters(' ') == False\nonly_letters('\
    \ ') == False\nonly_letters(' ') == False\nonly_letters(' ') == False\nonly_letters('\
    \ ') == False\nonly_letters(' ') == False\nonly_letters(' ') == False\nonly_letters('\
    \ ') == False\nonly_letters(' ') == False\nonly_letters(' ') == False\nonly_letters('\
    \ ') == False\nonly_letters(' ') == False\nonly_letters('\nusing Test\n\n@testset\
    \ begin\n\ncandidate = prime_length;\n\t@test(candidate(\"Hello\") == true)\n\t\
    @test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"kittens\") == true)\n\
    \t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"wow\") == true)\n\
    \t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\") == true)\n\
    \t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"\
    HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"gogo\"\
    ) == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp23xeieok.jl:25\nin expression starting at\
    \ /tmp/tmp23xeieok.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    prime_length = true\n    for char in string:\n        if char == ' ':\n\
    \            continue\n        if char == '\\n':\n            continue\n     \
    \   if char == '\\t':\n            continue\n        if char == '\\r':\n     \
    \       continue\n        if char == '\\f':\n            continue\n        if\
    \ char == '\\b':\n            continue\n        if char == '\\a':\n          \
    \  continue\n        if char == '\\v':\n            continue\n        if char\
    \ == '\\e':\n            continue\n        if char == '\\c':\n            continue\n\
    \        if char == '\\o':\n            continue\n        if char == '\\i':\n\
    \            continue\n        if char == '\\h':\n            continue\n     \
    \   if char == '\\v':\n            continue\n        if char == '\\o':\n     \
    \       continue\n        if char == '\\e':\n            continue\n        if\
    \ char == '\\c':\n            continue\n        if char == '\\i':\n          \
    \  continue\n        if char == '\\h':\n            continue\n        if char\
    \ == '\\v':\n            continue\n        if char == '\\o':\n            continue\n\
    \        if char == '\\e':\n            continue\n        if char == '\\c':\n\
    \            continue\n        if char == '\\i':\n            continue\n     \
    \   if char == '\\h':\n            continue\n        if char == '\\v':\n     \
    \       continue\n        if char == '\\o':\n            continue\n        if\
    \ char == '\\e':\n            continue\n        if char == '\\c':\n          \
    \  continue\n        if char == '\\i':\n            continue\n        if char\
    \ == '\\h':\n            continue\n        if char == '\\v':\n            continue\n\
    \        if char == '\\o':\n            continue\n        if char == '\\e':\n\
    \            continue\n        if char == '\\c':\n            continue\n     \
    \   if char == '\\i':\n            continue\n        if char == '\\h':\n     \
    \       continue\n        if char == '\\v':\n            continue\n        if\
    \ char == '\\o':\n            continue\n        if char == '\\e':\n          \
    \  continue\n        if char == '\\c':\n            continue\n        if char\
    \ == '\\i':\n            continue\n        if char == '\\h':\n            continue\n\
    \        if char == '\\v':\n            continue\n        if char == '\\o':\n\
    \            continue\n        if char == '\\e':\n            continue\n     \
    \   if char == '\\c':\n            continue\n        if char == '\\i':\n     \
    \       continue\n        if char == '\\h':\n            continue\n        if\
    \ char == '\\v':\n            continue\n        if char == '\\o':\n          \
    \  continue\n        if char == '\\e':\n            continue\n        if char\
    \ == '\\c':\n            continue\n        if char == '\\i':\n            continue\n\
    \        if char == '\\h':\n            continue\n        if char == '\\v':\n\
    \            continue\n        if char == '\\\nusing Test\n\n@testset begin\n\n\
    candidate = prime_length;\n\t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"\
    abcdcba\") == true)\n\t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"\
    orange\") == false)\n\t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"\
    world\") == true)\n\t@test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"\
    Wow\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"HI\")\
    \ == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"gogo\") ==\
    \ false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpomn_a1zs.jl:12\nin expression starting at\
    \ /tmp/tmpomn_a1zs.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_numbers = primes(string)\n    \n    if prime_numbers == []\n\
    \        true\n    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"Hello\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"abcdcba\"\
    )\n</cell>\n<code language=julia-1.5>\nprime_length(\"kittens\")\n</cell>\n<code\
    \ language=julia-1.5>\nprime_length(\"orange\")\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a string and returns True if the string is a palindrome\
    \ or False otherwise\nExamples\npalindrome(\"abba\") == True\npalindrome(\"abba\"\
    ) == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"\
    abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\n\
    palindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abba\"\
    ) == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"\
    abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\n\
    palindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abba\"\
    ) == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"\
    abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\n\
    palindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abba\"\
    ) == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"\
    abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\n\
    palindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abba\"\
    ) == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"\
    abba\") == False\npalindrome(\"abba\") == False\n\nusing Test\n\n@testset begin\n\
    \ncandidate = prime_length;\n\t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"\
    abcdcba\") == true)\n\t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"\
    orange\") == false)\n\t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"\
    world\") == true)\n\t@test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"\
    Wow\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"HI\")\
    \ == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"gogo\") ==\
    \ false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj86tag86.jl:19\nin expression starting at\
    \ /tmp/tmpj86tag86.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_numbers = primes(string)\n    \n    if prime_numbers == []\n\
    \        true\n    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"Hello\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"abcdcba\"\
    )\n</cell>\n<code language=julia-1.5>\nprime_length(\"kittens\")\n</cell>\n<code\
    \ language=julia-1.5>\nprime_length(\"orange\")\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a string and returns True if the string is a palindrome\
    \ or False otherwise\nExamples\npalindrome(\"abba\") == True\npalindrome(\"abba\"\
    ) == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"\
    abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\n\
    palindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abba\"\
    ) == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"\
    abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\n\
    palindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abba\"\
    ) == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"\
    abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\n\
    palindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abba\"\
    ) == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"\
    abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\n\
    palindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abba\"\
    ) == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"\
    abba\") == False\npalindrome(\"abba\") == False\n\nusing Test\n\n@testset begin\n\
    \ncandidate = prime_length;\n\t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"\
    abcdcba\") == true)\n\t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"\
    orange\") == false)\n\t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"\
    world\") == true)\n\t@test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"\
    Wow\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"HI\")\
    \ == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"gogo\") ==\
    \ false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2je0bprm.jl:19\nin expression starting at\
    \ /tmp/tmp2je0bprm.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_numbers = prime_numbers()\n    \n    for i in string:\n  \
    \      if i in prime_numbers:\n            return False\n    return True\n</cell>\n\
    <cell>\nprime_length('Hello')\n</cell>\n<cell>\nprime_length('abcdcba')\n</cell>\n\
    <cell>\nprime_length('kittens')\n</cell>\n<cell>\nprime_length('orange')\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns True if the\
    \ string is a palindrome or False otherwise\nExamples\npalindrome('kittens') ==\
    \ True\npalindrome('racecar') == True\npalindrome('racecars') == False\npalindrome('racecar')\
    \ == False\npalindrome('racecars') == False\npalindrome('') == False\npalindrome('\
    \ ') == False\npalindrome('kitten') == False\npalindrome('kittens') == False\n\
    palindrome('racecars') == False\npalindrome('racecar') == False\npalindrome('racecars')\
    \ == False\npalindrome('') == False\npalindrome(' ') == False\npalindrome('kitten')\
    \ == False\npalindrome('kittens') == False\npalindrome('racecars') == False\n\
    palindrome('racecar') == False\npalindrome('racecars') == False\npalindrome('')\
    \ == False\npalindrome(' ') == False\npalindrome('kitten') == False\npalindrome('kittens')\
    \ == False\npalindrome('racecars') == False\npalindrome('racecar') == False\n\
    palindrome('racecars') == False\npalindrome('') == False\npalindrome(' ') == False\n\
    palindrome('kitten') == False\npalindrome('kittens') == False\npalindrome('racecars')\
    \ == False\npalindrome('racecar') == False\npalindrome('racecars') == False\n\
    palindrome('') == False\npalindrome(' ') == False\npalindrome('kitten') == False\n\
    palindrome('kittens') == False\npalindrome('racecars') == False\npalindrome('racecar')\
    \ == False\n\nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"\
    Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"\
    kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"\
    wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjcikil3x.jl:14\nin expression starting at\
    \ /tmp/tmpjcikil3x.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_length::Bool = False \n    \n    for i in string:\n      \
    \  if prime_length::Bool == True:\n            break\n        if i::Int % 2 ==\
    \ 1:\n            prime_length::Bool = False\n            break\n    return prime_length::Bool\n\
    \"\"\"\nWrite a function that takes a string and returns True if the string\n\
    \    length is an even number or False otherwise\n    Examples\n    even_length('Hello')\
    \ == True\n    even_length('abcdcba') == True\n    even_length('kittens') == True\n\
    \    even_length('orange') == False\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = prime_length;\n\t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"\
    abcdcba\") == true)\n\t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"\
    orange\") == false)\n\t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"\
    world\") == true)\n\t@test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"\
    Wow\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"HI\")\
    \ == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"gogo\") ==\
    \ false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp75bcfitp.jl:14\nin expression starting at\
    \ /tmp/tmp75bcfitp.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_length::Bool = False \n    \n    if string == \"\" \n    \
    \    prime_length = True \n    else \n        prime_length = False \n        \n\
    \        for i in string\n            if string[i] == string[i+1] \n         \
    \       prime_length = True \n                break \n            else \n    \
    \            prime_length = False \n                break \n    return prime_length\
    \ \n\"\"\"\nWrite a function that takes a string and returns True if the string\n\
    \    contains only letters or False otherwise\n    Examples\n    letters_only('Hello')\
    \ == True\n    letters_only('abcdcba') == True\n    letters_only('kittens') ==\
    \ False\n    letters_only('orange') == False\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = prime_length;\n\t@test(candidate(\"Hello\") == true)\n\t\
    @test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"kittens\") == true)\n\
    \t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"wow\") == true)\n\
    \t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\") == true)\n\
    \t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"\
    HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"gogo\"\
    ) == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmpy4d1s874.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpy4d1s874.jl:1\n\
    in expression starting at /tmp/tmpy4d1s874.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_numbers::Set{Int} = (2..math.floor(sqrt(string)))\n    \n\
    \    for number in prime_numbers\n        if string mod number == 0\n        \
    \    return false\n    return true\nend\n</cell>\n<code language=julia-1.4>\n\
    prime_length(\"Hello\")\n</cell>\n<code language=julia-1.4>\nprime_length(\"abcdcba\"\
    )\n</cell>\n<code language=julia-1.4>\nprime_length(\"kittens\")\n</cell>\n<code\
    \ language=julia-1.4>\nprime_length(\"orange\")\n</cell>\n<text>\nExercise\nWrite\
    \ a function that takes a string and returns True if the string is a palindrome\
    \ or False otherwise\nExamples\npalindrome(\"abba\") == True\npalindrome(\"abba\"\
    ) == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"\
    abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\n\
    palindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abba\"\
    ) == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"\
    abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\n\
    palindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abba\"\
    ) == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"\
    abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\n\
    palindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abba\"\
    ) == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"\
    abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\n\
    palindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"abba\"\
    ) == False\npalindrome(\"abba\") == False\npalindrome(\"abba\") == False\npalindrome(\"\
    abba\") == False\nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\t\
    @test(candidate(\"Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\
    \t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\
    \t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t\
    @test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") ==\
    \ true)\n\t@test(candidate(\"gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\"\
    ) == false)\n\t@test(candidate(\"Madam\") == true)\n\t@test(candidate(\"M\") ==\
    \ false)\n\t@test(candidate(\"0\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"number\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpsujd9frs.jl:14\nin expression starting at /tmp/tmpsujd9frs.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_numbers = prime_numbers()\n    \n    for i in string:\n  \
    \      if i in prime_numbers:\n            return False\n    return True\n\"\"\
    \"\nWrite a function that takes a string and returns True if the string\n    length\
    \ is an even number or False otherwise\n    Examples\n    even_length('Hello')\
    \ == True\n    even_length('abcdcba') == True\n    even_length('kittens') == False\n\
    \    even_length('orange') == False\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = prime_length;\n\t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"\
    abcdcba\") == true)\n\t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"\
    orange\") == false)\n\t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"\
    world\") == true)\n\t@test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"\
    Wow\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"HI\")\
    \ == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"gogo\") ==\
    \ false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt9m4ckt9.jl:14\nin expression starting at\
    \ /tmp/tmpt9m4ckt9.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_numbers = primes(string)\n    \n    for prime in prime_numbers\n\
    \        if prime_numbers[prime] == true\n            return false\n    return\
    \ true\nend\n</cell>\n<code language=julia-1.5>\nprime_length(\"Hello\")\n</cell>\n\
    <code language=julia-1.5>\nprime_length(\"abcdcba\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"kittens\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"\
    orange\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and\
    \ returns True if the string is a palindrome or False otherwise\nExamples\npalindrome(\"\
    abba\") == True\npalindrome(\"abbaab\") == True\npalindrome(\"abbaabba\") == True\n\
    palindrome(\"abbaabbaabba\") == True\npalindrome(\"abbaabbaabbaabba\") == False\n\
    palindrome(\"abbaabbaabbaabbaabbaabba\") == False\npalindrome(\"abbaabbaabbaabbaabbaabbaabbaabba\"\
    ) == False\npalindrome(\"abbaabbaabbaabbaabbaabbaabbaabbaabbaabba\") == False\n\
    palindrome(\"abbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabba\") == False\npalindrome(\"\
    abbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaab\n\
    using Test\n\n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"\
    Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"\
    kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"\
    wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx_j36awf.jl:18\nin expression starting at\
    \ /tmp/tmpx_j36awf.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_numbers = prime_numbers()\n    \n    for i in string:\n  \
    \      if i not in prime_numbers:\n            return False\n    return True\n\
    \"\"\"\nWrite a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = prime_length;\n\t@test(candidate(\"Hello\") == true)\n\t\
    @test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"kittens\") == true)\n\
    \t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"wow\") == true)\n\
    \t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\") == true)\n\
    \t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"\
    HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"gogo\"\
    ) == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnhjkj3mt.jl:14\nin expression starting at\
    \ /tmp/tmpnhjkj3mt.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_numbers = Set([2,3,5,7,11,13,17,19])\n    \n    for character\
    \ in string:\n        if character in prime_numbers:\n            return False\n\
    \    return True\n</cell>\n<cell>\nprime_length('Hello')\n</cell>\n<cell>\nprime_length('abcdcba')\n\
    </cell>\n<cell>\nprime_length('kittens')\n</cell>\n<cell>\nprime_length('orange')\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ True if the string is a palindrome or False otherwise\nExamples\npalindrome('racecar')\
    \ == True\npalindrome('racecars') == False\npalindrome('racecar') == True\npalindrome('racecars')\
    \ == False\npalindrome('racecar') == True\npalindrome('racecars') == False\npalindrome('racecar')\
    \ == True\npalindrome('racecars') == False\npalindrome('racecar') == True\npalindrome('racecars')\
    \ == False\npalindrome('racecar') == True\npalindrome('racecars') == False\npalindrome('racecar')\
    \ == True\npalindrome('racecars') == False\npalindrome('racecar') == True\npalindrome('racecars')\
    \ == False\npalindrome('racecar') == True\npalindrome('racecars') == False\npalindrome('racecar')\
    \ == True\npalindrome('racecars') == False\npalindrome('racecar') == True\npalindrome('racecars')\
    \ == False\npalindrome('racecar') == True\npalindrome('racecars') == False\npalindrome('racecar')\
    \ == True\npalindrome('racecars') == False\npalindrome('racecar') == True\npalindrome('racecars')\
    \ == False\npalindrome('racecar') == True\npalindrome('racecars') == False\npalindrome('racecar')\
    \ == True\npalindrome('racecars') == False\npalindrome('racecar') == True\npalindrome('racecars')\
    \ == False\npalindrome('racecar') == True\npalindrome('racecars') == False\npalindrome\n\
    using Test\n\n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"\
    Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"\
    kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"\
    wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2tuo_1gd.jl:14\nin expression starting at\
    \ /tmp/tmp2tuo_1gd.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_numbers = prime_numbers()\n    \n    for i in string\n   \
    \     if i \u2209 prime_numbers\n            return false\n    return true\nend\n\
    </cell>\n<code language=julia-1.3>\nprime_length(\"Hello\")\n</cell>\n<code language=julia-1.3>\n\
    prime_length(\"abcdcba\")\n</cell>\n<code language=julia-1.3>\nprime_length(\"\
    kittens\")\n</cell>\n<code language=julia-1.3>\nprime_length(\"orange\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns True if the\
    \ string is a palindrome or False otherwise\nExamples\npalindrome(\"kittens\"\
    ) == True\npalindrome(\"racecar\") == True\npalindrome(\"hello\") == False\npalindrome(\"\
    racecars\") ==False\npalindrome(\"racecar\") == False\npalindrome(\"racecars\"\
    ) ==False\npalindrome(\"racecar\") == False\npalindrome(\"racecars\") ==False\n\
    palindrome(\"racecar\") == False\npalindrome(\"racecars\") ==False\npalindrome(\"\
    racecar\") == False\npalindrome(\"racecars\") ==False\npalindrome(\"racecar\"\
    ) == False\npalindrome(\"racecars\") ==False\npalindrome(\"racecar\") == False\n\
    palindrome(\"racecars\") ==False\npalindrome(\"racecar\") == False\npalindrome(\"\
    racecars\") ==False\npalindrome(\"racecar\") == False\npalindrome(\"racecars\"\
    ) ==False\npalindrome(\"racecar\") == False\npalindrome(\"racecars\") ==False\n\
    palindrome(\"racecar\") == False\npalindrome(\"racecars\") ==False\npalindrome(\"\
    racecar\") == False\npalindrome(\"racecars\") ==False\npalindrome(\"racecar\"\
    ) == False\npalindrome(\"racecars\") ==False\npalindrome(\"racecar\") == False\n\
    palindrome(\"racecars\") ==False\npalindrome(\"racecar\") == False\npalindrome(\"\
    racecars\") ==False\npalindrome(\"racecar\") == False\npalindrome(\"racecars\"\
    ) ==False\npalindrome(\"race\nusing Test\n\n@testset begin\n\ncandidate = prime_length;\n\
    \t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\
    \t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\
    \t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t\
    @test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") ==\
    \ true)\n\t@test(candidate(\"gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\"\
    ) == false)\n\t@test(candidate(\"Madam\") == true)\n\t@test(candidate(\"M\") ==\
    \ false)\n\t@test(candidate(\"0\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7rnw0xec.jl:18\nin expression starting at\
    \ /tmp/tmp7rnw0xec.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    prime_length = true\n    for i in string\n        if prime_length == false\n\
    \            break\n        if i == 'a'\n            prime_length = false\n  \
    \      else\n            if i == 'b'\n                prime_length = true\n  \
    \          else\n                if i == 'c'\n                    prime_length\
    \ = true\n                else\n                    if i == 'd'\n            \
    \            prime_length = true\n                    else\n                 \
    \       if i == 'e'\n                            prime_length = true\n       \
    \                 else\n                            if i == 'f'\n            \
    \                    prime_length = true\n                            else\n \
    \                               if i == 'g'\n                                \
    \    prime_length = true\n                                else\n             \
    \                       if i == 'h'\n                                        prime_length\
    \ = true\n                                    else\n                         \
    \               if i == 'i'\n                                            prime_length\
    \ = true\n                                        else\n                     \
    \                       if i == 'j'\n                                        \
    \        prime_length = true\n                                            else\n\
    \                                                if i == 'k'\n               \
    \                                     prime_length = true\n                  \
    \                              else\n                                        \
    \            if i == 'l'\n                                                   \
    \     prime_length = true\n                                                  \
    \  else\n                                                        if i == 'm'\n\
    \                                                            prime_length = true\n\
    \                                                        else\n              \
    \                                              if i == 'n'\n                 \
    \                                               prime_length = true\n        \
    \                                                    else\n                  \
    \                                              if i == 'o'\n                 \
    \                                                   prime_length = true\n    \
    \                                                            else\n          \
    \                                                          if i == 'p'\n     \
    \                                                                   prime_length\
    \ = true\n                                                                   \
    \ else\n                                                        if i == 'q'\n\
    \                                                            prime_length = true\n\
    \                                                        else\n              \
    \                                              if i == 'r'\n                 \
    \                                               prime_length = true\n        \
    \                                                    else\n                  \
    \                                              if i == 's'\n                 \
    \                                                   prime_length = true\n    \
    \                                                            else\n          \
    \                                                          if i == 't'\n     \
    \                                                                   prime_length\
    \ = true\n                                                                   \
    \ else\n                                                        if i == 'u'\n\
    \                                                            prime_length = true\n\
    \                                                        else\n              \
    \                                              if i == 'v'\n                 \
    \                                               prime_length = true\n        \
    \                                                    else\n                  \
    \                                              if i == 'w'\n                 \
    \                                                   prime_length = true\n    \
    \                                                            else\n          \
    \                                                          if i == 'x'\n     \
    \                                                                   prime_length\
    \ = true\n                                                                   \
    \ else\n                                                        if i == 'y'\n\
    \                                                            prime_length = true\n\
    \                                                        else\n              \
    \                                              if i == 'z'\n                 \
    \                                               prime_length = true\n        \
    \                                                    else\n                  \
    \                                              prime_length = false\n    return\
    \ prime_length\nend\n</cell>\n<code language=julia-1.4>\nprime_length(\"Hello\"\
    )\n</cell>\n<code language=julia-1.4>\nprime_length(\"abcdcba\")\n</cell>\n<code\
    \ language=julia-1.4>\nprime_length(\"kittens\")\n</cell>\n<code language=julia-1.4>\n\
    prime_length(\"orange\")\n</cell>\nusing Test\n\n@testset begin\n\ncandidate =\
    \ prime_length;\n\t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"abcdcba\"\
    ) == true)\n\t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"orange\"\
    ) == false)\n\t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"world\"\
    ) == true)\n\t@test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"Wow\")\
    \ == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"HI\") == true)\n\
    \t@test(candidate(\"go\") == true)\n\t@test(candidate(\"gogo\") == false)\n\t\
    @test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"Madam\") ==\
    \ true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\") == false)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnrfqqdb5.jl:95\nin expression starting at\
    \ /tmp/tmpnrfqqdb5.jl:95\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_numbers = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n\
    \    \n    for i in prime_numbers\n        if string.length == i\n           \
    \ return true\n        else\n            return false\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nprime_length(\"Hello\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"abcdcba\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"\
    kittens\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"orange\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns True if all\
    \ characters in the string are letters or False otherwise\nExamples\nall_letters('Hello')\
    \ == True\nall_letters('abcdcba') == True\nall_letters('kittens') == False\nall_letters('orange')\
    \ == False\nHint: use the isletter function\nusing Test\n\n@testset begin\n\n\
    candidate = prime_length;\n\t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"\
    abcdcba\") == true)\n\t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"\
    orange\") == false)\n\t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"\
    world\") == true)\n\t@test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"\
    Wow\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"HI\")\
    \ == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"gogo\") ==\
    \ false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpum9x6ap1.jl:20\nin expression starting at\
    \ /tmp/tmpum9x6ap1.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_length::Bool = false \n    \n    if string == \"\"\n     \
    \   return prime_length\n    \n    for i in string\n        if prime_length\n\
    \            prime_length::Bool = false \n        else\n            if string[i]\
    \ == string[i+1]\n                prime_length::Bool = false \n            else\n\
    \                if string[i] != string[i+1]\n                    prime_length::Bool\
    \ = true \n                else\n                    if string[i] == string[i+1]\n\
    \                        prime_length::Bool = true \n                    else\n\
    \                        if string[i] != string[i+1]\n                       \
    \     prime_length::Bool = false \n                        else\n            \
    \                if string[i] == string[i+1]\n                               \
    \ prime_length::Bool = false \n                            else\n            \
    \                    if string[i] != string[i+1]\n                           \
    \         prime_length::Bool = false \n                                else\n\
    \                                    if string[i] == string[i+1]\n           \
    \                             prime_length::Bool = false \n                  \
    \                  else\n                                        if string[i]\
    \ != string[i+1]\n                                            prime_length::Bool\
    \ = false \n                                    else\n                       \
    \                 if string[i] == string[i+1]\n                              \
    \              prime_length::Bool = false \n                                 \
    \   else\n                                        if string[i] != string[i+1]\n\
    \                                            prime_length::Bool = false \n   \
    \                                 else\n                                     \
    \   if string[i] == string[i+1]\n                                            prime_length::Bool\
    \ = false \n                                    else\n                       \
    \                 if string[i] != string[i+1]\n                              \
    \              prime_length::Bool = false \n                                 \
    \   else\n                                        if string[i] == string[i+1]\n\
    \                                            prime_length::Bool = false \n   \
    \                                 else\n                                     \
    \   if string[i] != string[i+1]\n                                            prime_length::Bool\
    \ = false \n                                    else\n                       \
    \                 if string[i] == string[i+1]\n                              \
    \              prime_length::Bool = false \n                                 \
    \   else\n                                        if string[i] != string[i+1]\n\
    \                                            prime_length::Bool = false \n   \
    \                                 else\n                                     \
    \   if string[i] == string[i+1]\n                                            prime_length::Bool\
    \ = false \n                                    else\n                       \
    \                 if string[i] != string[i+1]\n                              \
    \              prime_length::Bool = false \n                                 \
    \   else\n                                        if string[i] == string[i+1]\n\
    \                                            prime_length::Bool = false \n   \
    \                                 else\n                                     \
    \   if string[i] != string[i+1]\n                                            prime_length::Bool\
    \ = false \n                                    else\n                       \
    \                 if string[i] == string[i+1]\n                              \
    \              prime_length::Bool = false \n                                 \
    \   else\n                                        if string[i] != string[i+1]\n\
    \                                            prime_length::Bool = false \n   \
    \                                 else\n                                     \
    \   if string[i] == string[i+1]\n                                            prime_length::Bool\
    \ = false \n                                    else\n                       \
    \                 if string[i] != string[i+1]\n                              \
    \              prime_length::Bool = false \n                                 \
    \   else\n                                        if string[i] == string[i+1]\n\
    using Test\n\n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"\
    Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"\
    kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"\
    wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
    ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
    gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbeab0b7r.jl:1\nin expression starting at /tmp/tmpbeab0b7r.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello')\
    \ == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') ==\
    \ True\n    prime_length('orange') == False\n    \"\"\"\nfunction prime_length(string::String)::Bool\
    \ \n    \n    prime_length = true\n    \n    for character in string:\n      \
    \  if character == ' ':\n            continue\n        if character == '\\n':\n\
    \            continue\n        if character == '\\t':\n            continue\n\
    \        if character == '\\r':\n            continue\n        if character ==\
    \ '\\f':\n            continue\n        if character == '\\v':\n            continue\n\
    \        if character == '\\\\':\n            continue\n        if character ==\
    \ '\\'':\n            continue\n        if character == '\\\"':\n            continue\n\
    \        if character == '(':\n            continue\n        if character == ')':\n\
    \            continue\n        if character == '[':\n            continue\n  \
    \      if character == ']':\n            continue\n        if character == '{':\n\
    \            continue\n        if character == '}':\n            continue\n  \
    \      if character == '<':\n            continue\n        if character == '>':\n\
    \            continue\n        if character == '|':\n            continue\n  \
    \      if character == '&':\n            continue\n        if character == '+':\n\
    \            continue\n        if character == '-':\n            continue\n  \
    \      if character == '.':\n            continue\n        if character == '/':\n\
    \            continue\n        if character == '*':\n            continue\n  \
    \      if character == '^':\n            continue\n        if character == '%':\n\
    \            continue\n        if character == '~':\n            continue\n  \
    \      if character == '=':\n            continue\n        if character == '!':\n\
    \            continue\n        if character == '?':\n            continue\n  \
    \      if character == '<':\n            continue\n        if character == '>':\n\
    \            continue\n        if character == '|':\n            continue\n  \
    \      if character == '&':\n            continue\n        if character == '+':\n\
    \            continue\n        if character == '-':\n            continue\n  \
    \      if character == '.':\n            continue\n        if character == '/':\n\
    \            continue\n        if character == '*':\n            continue\n  \
    \      if character == '^':\n            continue\n        if character == '%':\n\
    \            continue\n        if character == '~':\n            continue\n  \
    \      if character == '=':\n            continue\n        if character == '!':\n\
    \            continue\n        if character == '?':\n            continue\n  \
    \      if character == '<':\n            continue\n        if character == '>':\n\
    \            continue\n        if character == '|':\n            continue\n  \
    \      if character == '&':\n            continue\n        if character == '+':\n\
    \            continue\n        if character == '-':\n            continue\n  \
    \      if character == '.':\n            continue\n        if character == '/':\n\
    \            continue\n        if character == '*':\n            continue\n  \
    \      if character == '^':\n            continue\n        if character == '%':\n\
    \            continue\n        if character == '~':\n            continue\n  \
    \      if character == '=':\n            continue\n        if character == '!':\n\
    \            continue\n        if character == '?':\n            continue\n  \
    \      if character == '<':\n            continue\n        if character == '>':\n\
    \            continue\n        if \nusing Test\n\n@testset begin\n\ncandidate\
    \ = prime_length;\n\t@test(candidate(\"Hello\") == true)\n\t@test(candidate(\"\
    abcdcba\") == true)\n\t@test(candidate(\"kittens\") == true)\n\t@test(candidate(\"\
    orange\") == false)\n\t@test(candidate(\"wow\") == true)\n\t@test(candidate(\"\
    world\") == true)\n\t@test(candidate(\"MadaM\") == true)\n\t@test(candidate(\"\
    Wow\") == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"HI\")\
    \ == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"gogo\") ==\
    \ false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
    Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmexkhyc8.jl:14\nin expression starting at\
    \ /tmp/tmpmexkhyc8.jl:14\n"
  exit_code: 1
  status: SyntaxError
