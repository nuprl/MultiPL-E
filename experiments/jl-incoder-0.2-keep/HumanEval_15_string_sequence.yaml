name: HumanEval_15_string_sequence
language: julia
prompt: "\"\"\" Return a string containing space-delimited numbers starting from 0\
  \ upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
  \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n"
tests: "using Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
  \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"0\
  \ 1 2 3 4 5 6 7 8 9 10\")\nend\n"
completions: ["    string_seq = String[]\n    for i = 1:n\n        string_seq[i] =\
    \ \"$(string_seq[i-1] + 1) \"\n    end\n    return string_seq\nend", "    \n \
    \   string = \"\"\n    for i = 1:n\n        string = string + \" \" + i\n    end\n\
    \    return string\nend\n</cell>\n<code language=julia-1.4>\nstring_sequence(0)\n\
    </cell>\n<code language=julia-1.4>\nstring_sequence(5)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns the number of words in the\
    \ string.", "    string_sequence = \"\"\n    for i = n\n    do\n        string_sequence\
    \ = string_sequence + \" \" + to_string(i)\n    done\n    return string_sequence\n\
    </code>\n<|/ a tags=julia |>\n<| c |>\n`string_sequence` can be written as `join`\
    \ on `Int64` arrays: `join.(0:5, \" \", \" \")`\n<|/ c |>\n<| c |>\nThanks, I\
    \ didn't know about `join`. I was trying to avoid the explicit loop and use `join`\
    \ instead.\n<|/ c |>\n<| a tags=julia |>\nThe other answers here are great, but\
    \ I wanted to add that you can also use mapslices to do this:\n<code>\nmapslices(x\
    \ -> string(x), 0:5, dims=2)\n</code>\n<|/ a dscore=2 |>\n<| a tags=julia |>\n\
    I came up with this solution:\n<code>", "    \n    string = \"\"\n    for i =\
    \ 1:n\n        string = string + \" \" + i\n    end\n    return string\nend\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(5)\n</cell>\n<text>\nExercise\
    \ 4\nWrite a function that returns the first n prime numbers. \nThe function should\
    \ accept a parameter of type Int64.", "    string_seq = \"\"\n    for i = 1 to\
    \ n do\n        string_seq = string_seq + i\n    end\n    return string_seq\n\
    end\n</cell>\n<code language=julia-1.1>\nstring_sequence(5)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a vector of numbers and returns the sum\
    \ of the numbers. \nThe function should also return a string containing the sum\
    \ of the numbers. \nThe function should also return a string containing the number\
    \ of elements in the vector.\nThe function should also return a string containing\
    \ the number of elements in the vector.\nThe function should also return a string\
    \ containing the number of elements in the vector.\nThe function should also return\
    \ a string containing the number of elements in the vector.\nThe function should\
    \ also return a string containing the number of elements in the vector.\nThe function\
    \ should also return a string containing the number of elements in the vector.\n\
    The function should also return a string containing the number of elements in\
    \ the vector.\nThe function should also return a string containing the number\
    \ of elements in the vector.\nThe function should also return a string containing\
    \ the number of elements in the vector.\nThe function should also return a string\
    \ containing the number of elements in the vector.\nThe function should also return\
    \ a string containing the number of elements in the vector.\nThe function should\
    \ also return a string containing the number of elements in the vector.\nThe function\
    \ should also return a string containing the number of elements in the vector.\n\
    The function should also return a string containing the number of elements in\
    \ the vector.\nThe function should also return a string containing the number\
    \ of elements in the vector.\nThe function should also return a string containing\
    \ the number of elements in the vector.\nThe function should also return a string\
    \ containing the number of elements in the vector.\nThe function should also return\
    \ a string containing the number of elements in the vector.\nThe function should\
    \ also return a string containing the number of elements in the vector.\nThe function\
    \ should also return a string containing the number of elements in the vector.\n\
    The function should also return a string containing the number of elements in\
    \ the vector.\nThe function should also return a string containing the number\
    \ of elements in the vector.\nThe function should also return a string containing\
    \ the number of elements in the vector.\nThe function should also return a string\
    \ containing the number of elements in the vector.\nThe function should also return\
    \ a string containing the number of elements in the vector.\nThe function should\
    \ also return a string containing the number of elements in the vector.\nThe function\
    \ should also return a string containing the number of elements in the vector.\n\
    The function should also return a string containing the number of elements in\
    \ the vector.\nThe function should also return a string containing the number\
    \ of elements in the vector.\nThe function should also return a string containing\
    \ the number of elements in the vector.\nThe function should also return a string\
    \ containing the number of elements in the vector.\nThe function should also return\
    \ a string containing the number of elements in the vector.\nThe function should\
    \ also return a string containing the number of elements in the vector.\nThe function\
    \ should also return a string containing the number of elements in the vector.\n\
    The function should also return a string containing the number of elements in\
    \ the vector.\nThe function should also return a string containing the number\
    \ of elements in the vector.\nThe function should also ", "    \n    string =\
    \ \"\"\n    for i = 1:n\n        string = string + \" \" + to_string(i)\n    end\n\
    \    return string\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a string as input and\
    \ returns the number of characters in the string.\nHint: Use length() function",
  "    string_seq = \"\"\n    for i = 1:n\n        string_seq = string_seq + i\n \
    \   end\n    return string_seq\nend\n</cell>\n<code language=julia-1.4>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a number as input and\
    \ returns the number converted to its binary representation.", "    \n    string\
    \ = \"\"\n    for i = 1:n\n        string = string + i\n    end\n    return string\n\
    end\n</cell>\n<code language=julia-1.5>\nstring_sequence(0)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite a function that generates\
    \ all the prime numbers up to a number n.", "    string_seq = String[]\n    for\
    \ i = 1:n\n        string_seq += String(i)\n    end\n    return string_seq\nend\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(5)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\nThe function should take one argument, n,\
    \ which specifies the number of numbers to return.\nThe function should return\
    \ a string containing space-delimited numbers starting from 0 upto n inclusive.\n\
    The function should return an empty string if the argument n does not satisfy\
    \ this condition.\nThe function should return an error message if the argument\
    \ n does not satisfy this condition.\nThe function should return an error message\
    \ if the argument n does not satisfy this condition.\nThe function should return\
    \ an error message if the argument n does not satisfy this condition.\nThe function\
    \ should return an error message if the argument n does not satisfy this condition.\n\
    The function should return an error message if the argument n does not satisfy\
    \ this condition.\nThe function should return an error message if the argument\
    \ n does not satisfy this condition.\nThe function should return an error message\
    \ if the argument n does not satisfy this condition.\nThe function should return\
    \ an error message if the argument n does not satisfy this condition.\nThe function\
    \ should return an error message if the argument n does not satisfy this condition.\n\
    The function should return an error message if the argument n does not satisfy\
    \ this condition.\nThe function should return an error message if the argument\
    \ n does not satisfy this condition.\nThe function should return an error message\
    \ if the argument n does not satisfy this condition.\nThe function should return\
    \ an error message if the argument n does not satisfy this condition.\nThe function\
    \ should return an error message if the argument n does not satisfy this condition.\n\
    The function should return an error message if the argument n does not satisfy\
    \ this condition.\nThe function should return an error message if the argument\
    \ n does not satisfy this condition.\nThe function should return an error message\
    \ if the argument n does not satisfy this condition.\nThe function should return\
    \ an error message if the argument n does not satisfy this condition.\nThe function\
    \ should return an error message if the argument n does not satisfy this condition.\n\
    The function should return an error message if the argument n does not satisfy\
    \ this condition.\nThe function should return an error message if the argument\
    \ n does not satisfy this condition.\nThe function should return an error message\
    \ if the argument n does not satisfy this condition.\nThe function should return\
    \ an error message if the argument n does not satisfy this condition.\nThe function\
    \ should return an error message if the argument n does not satisfy this condition.\n\
    The function should return an error message if the argument n does not satisfy\
    \ this condition.\nThe function should return an error message if the argument\
    \ n does not satisfy this condition.\nThe function should ", "    \n    string\
    \ = \"\"\n    for i = 1:n\n        string = string + \" \" + i\n    end\n    return\
    \ string\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a string and returns the number\
    \ of words in the string.", "    \n    string = \"\"\n    for i = n\n    do\n\
    \        string += i\n        i += 1\n    done\n    return string\n</code>\n<|/\
    \ a tags=julia |>\n<| a dscore=0 |>\n<code>", "    \n    string = \"\"\n    for\
    \ i = 1:n\n        string = string + \" \" + i\n    end\n    return string\nend\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(5)\n</cell>\n<text>\nExercise\
    \ 4\nWrite a function that takes a string and returns the number of words in the\
    \ string.\nHint: Use split() to split the string into words.", "    \n    string\
    \ = \"\"\n    for i = 1:n\n        string = string + \" \" + string(i)\n    end\n\
    \    return string\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector of integers\
    \ and returns a vector of strings. Each string in the returned vector is the concatenation\
    \ of the integers in the input vector. For example, if the input vector is [1,2,3,4,5],\
    \ then the returned vector will be [\"1 2 3 4 5\", \"1 2 3 4 5\", \"1 2 3 4 5\"\
    , \"1 2 3 4 5\", \"1 2 3 4 5\"]", "    \n    string = \"\"\n    \n    for i in\
    \ 0:n-1\n        string = string + i\n    \n    return string\n</code>\n<|/ a\
    \ tags=julia |>\n<| a dscore=2 |>\nI wrote a package called Strings.jl that does\
    \ this for you. \n<code>\njulia> using Strings", "    \" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\"\n    \n    \" Initialize\
    \ a string variable 'result' with an empty string.\"\n    \" Initialize an integer\
    \ variable 'i' with 0.\"\n    \" Initialize an integer variable 'j' with n.\"\n\
    \    \" Initialize an integer variable 'k' with 0.\"\n    \" Initialize an integer\
    \ variable 'l' with 0.\"\n    \" Initialize an integer variable 'm' with 0.\"\n\
    \    \" Initialize an integer variable 'n' with 0.\"\n    \" Initialize an integer\
    \ variable 'o' with 0.\"\n    \" Initialize an integer variable 'p' with 0.\"\n\
    \    \" Initialize an integer variable 'q' with 0.\"\n    \" Initialize an integer\
    \ variable 'r' with 0.\"\n    \" Initialize an integer variable 's' with 0.\"\n\
    \    \" Initialize an integer variable 't' with 0.\"\n    \" Initialize an integer\
    \ variable 'u' with 0.\"\n    \" Initialize an integer variable 'v' with 0.\"\n\
    \    \" Initialize an integer variable 'w' with 0.\"\n    \" Initialize an integer\
    \ variable 'x' with 0.\"\n    \" Initialize an integer variable 'y' with 0.\"\n\
    \    \" Initialize an integer variable 'z' with 0.\"\n    \" Initialize an integer\
    \ variable 'aa' with 0.\"\n    \" Initialize an integer variable 'ab' with 0.\"\
    \n    \" Initialize an integer variable 'ac' with 0.\"\n    \" Initialize an integer\
    \ variable 'ad' with 0.\"\n    \" Initialize an integer variable 'ae' with 0.\"\
    \n    \" Initialize an integer variable 'af' with 0.\"\n    \" Initialize an integer\
    \ variable 'ag' with 0.\"\n    \" Initialize an integer variable 'ah' with 0.\"\
    \n    \" Initialize an integer variable 'ai' with 0.\"\n    \" Initialize an integer\
    \ variable 'aj' with 0.\"\n    \" Initialize an integer variable 'ak' with 0.\"\
    \n    \" Initialize an integer variable 'al' with 0.\"\n    \" Initialize an integer\
    \ variable 'am' with 0.\"\n    \" Initialize an integer variable 'an' with 0.\"\
    \n    \" Initialize an integer variable 'ao' with 0.\"\n    \" Initialize an integer\
    \ variable 'ap' with 0.\"\n    \" Initialize an integer variable 'aq' with 0.\"\
    \n    \" Initialize an integer variable 'ar' with 0.\"\n    \" Initialize an integer\
    \ variable 'as' with 0.\"\n    \" Initialize an integer variable 'at' with 0.\"\
    \n    \" Initialize an integer variable 'au' with 0.\"\n    \" Initialize an integer\
    \ variable 'av' with 0.\"\n    ", "    str = \" \"\n    for i = 1 to n do\n  \
    \      str = str + i\n    end\n    return str\nend\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 3\nWrite a function that takes a\
    \ string as input and returns a string with all the characters in lower case.\
    \ \nThe function should ignore all non-alphabetic characters.\nThe function should\
    \ ignore all spaces.\nThe function should ignore all punctuation characters.\n\
    The function should ignore all digits.\nThe function should ignore all non-alphabetic\
    \ characters.\nThe function should ignore all spaces.\nThe function should ignore\
    \ all punctuation characters.\nThe function should ignore all digits.\nThe function\
    \ should ignore all non-alphabetic characters.\nThe function should ignore all\
    \ spaces.\nThe function should ignore all punctuation characters.\nThe function\
    \ should ignore all digits.\nThe function should ignore all non-alphabetic characters.\n\
    The function should ignore all spaces.\nThe function should ignore all punctuation\
    \ characters.\nThe function should ignore all digits.\nThe function should ignore\
    \ all non-alphabetic characters.\nThe function should ignore all spaces.\nThe\
    \ function should ignore all punctuation characters.\nThe function should ignore\
    \ all digits.\nThe function should ignore all non-alphabetic characters.\nThe\
    \ function should ignore all spaces.\nThe function should ignore all punctuation\
    \ characters.\nThe function should ignore all digits.\nThe function should ignore\
    \ all non-alphabetic characters.\nThe function should ignore all spaces.\nThe\
    \ function should ignore all punctuation characters.\nThe function should ignore\
    \ all digits.\nThe function should ignore all non-alphabetic characters.\nThe\
    \ function should ignore all spaces.\nThe function should ignore all punctuation\
    \ characters.\nThe function should ignore all digits.\nThe function should ignore\
    \ all non-alphabetic characters.\nThe function should ignore all spaces.\nThe\
    \ function should ignore all punctuation characters.\nThe function should ignore\
    \ all digits.\nThe function should ignore all non-alphabetic characters.\nThe\
    \ function should ignore all spaces.\nThe function should ignore all punctuation\
    \ characters.\nThe function should ignore all digits.\nThe function should ignore\
    \ all non-alphabetic characters.\nThe function should ignore all spaces.\nThe\
    \ function should ignore all punctuation characters.\nThe function should ignore\
    \ all digits.\nThe function should ignore all non-alphabetic characters.\nThe\
    \ function should ignore all spaces.\nThe function should ignore all punctuation\
    \ characters.\nThe function should ignore all digits.\nThe function should ignore\
    \ all non-alphabetic characters.\nThe function should ignore all spaces.\nThe\
    \ function should ignore all punctuation characters.\n", "    \n    string = \"\
    \"\n    for i = 1:n\n        string = string + \" \" + i\n    end\n    return\
    \ string\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\nWrite a function that returns a string\
    \ containing space-delimited numbers starting from 0 upto n inclusive.\nWrite\
    \ a function that returns a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\nWrite a function that returns a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\nWrite a function\
    \ that returns a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nWrite a function that returns a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\nWrite a function that returns a string\
    \ containing space-delimited numbers starting from 0 upto n inclusive.\nWrite\
    \ a function that returns a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\nWrite a function that returns a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\nWrite a function\
    \ that returns a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nWrite a function that returns a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\nWrite a function that returns a string\
    \ containing space-delimited numbers starting from 0 upto n inclusive.\nWrite\
    \ a function that returns a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\nWrite a function that returns a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\nWrite a function\
    \ that returns a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nWrite a function that returns a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\nWrite a function that returns a string\
    \ containing space-delimited numbers starting from 0 upto n inclusive.\nWrite\
    \ a function that returns a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\nWrite a function that returns a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\nWrite a function\
    \ that returns a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nWrite a function that returns a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\nWrite a function that returns a string\
    \ containing space-delimited numbers starting from 0 upto n inclusive.\nWrite\
    \ a function that returns a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\nWrite a function that returns a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\nWrite a function\
    \ that returns a string containing space-", "    string_sequence = String[]\n\
    \    for n in 0 .. n\n        string_sequence += String(n)\n    return string_sequence\n\
    </code>\n<|/ a tags=julia |>\n<| a dscore=0 |>\n<code>", "    \n    string_sequence\
    \ = \"\"\n    for i = 1 to n do\n        string_sequence = string_sequence + \"\
    \ \" + i\n    end\n    \n    return string_sequence\nend\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 10\nWrite a function that takes\
    \ a string as input and returns the string with all the characters in lower case.\n\
    Hint: Use replace!", "    string_sequence = \"\"\n    for i = 1 to n do\n    \
    \    string_sequence = string_sequence + \" \" + string(i)\n    end\n    return\
    \ string_sequence\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the first n prime numbers.\
    \ \nHint: Use a for loop and a prime number test.", "    string_seq = String[]\n\
    \    for x in 0:n\n        string_seq.append(x)\n    return string_seq.join(\"\
    \ \")\nend\n</cell>\n<code language=julia-1.3>\nstring_sequence(5)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of words in the string.", "    \n    string = \"\"\n    for i = 1:n\n      \
    \  string = string + string(i)\n    end\n    return string\nend\n</cell>\n<code\
    \ language=julia-1.5>\nstring_sequence(0)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ vector of numbers and returns the sum of the numbers in the vector.\nFor example,\
    \ if the vector is [1,2,3], the function should return 6.\nHint: Use a for loop\
    \ to iterate over the vector.", "    string_seq = String[]\n    for i = 1:n\n\
    \        string_seq += String(i)\n    return string_seq.join(\" \")\nend\n</cell>\n\
    <code language=julia-1.5>\nstring_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string as input and returns the string with all the\
    \ characters in lower case.\nHint: use the function replace.", "    string = \"\
    \"\n    for i = 1:n\n        string = string + string(i)\n    end\n    return\
    \ string\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that generates the Fibonacci sequence up\
    \ to n.\nHint: Use a recursive function.", "    string_seq = \"\"\n    for i =\
    \ n\n    do\n        string_seq = string_seq + string(i)\n    done\n    return\
    \ string_seq\n</code>\n<|/ a dscore=0 |>\n<| a tags=julia,string |>\n<code>",
  "    \n    string = \"\"\n    for i = 1:n\n        string = string + \" \" + i\n\
    \    end\n    return string\nend", "    string_seq = \"\"\n    for i = n\n   \
    \ do\n        string_seq = string_seq + i\n    done\n    return string_seq\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=0 |>\n<code>", "    \n    string = \"\"\n    for\
    \ i = n\n    do\n        string = string + \" \" + i\n    done\n    return string\n\
    </code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>", "    string_sequence =\
    \ \"\"\n    for i = n\n    do\n        string_sequence = string_sequence + \"\
    \ \" + i\n    done\n    return string_sequence\n</code>\n<|/ a tags=julia |>\n\
    <| a dscore=1 |>\n<code>", "    string_seq = \"\"\n    for i = 1:n\n        string_seq\
    \ = string_seq + string(i)\n    end\n    return string_seq\nend\n</cell>\n<code\
    \ language=julia-1.5>\nstring_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the first n prime numbers. A prime number is a natural\
    \ number greater than 1 that has no positive divisors other than 1 and itself.\
    \ For example, 2 is a prime number, but 3 is not because 3 has two divisors, 2\
    \ and 3. Write a function that returns the first n prime numbers. A prime number\
    \ is a natural number greater than 1 that has no positive divisors other than\
    \ 1 and itself. For example, 2 is a prime number, but 3 is not because 3 has two\
    \ divisors, 2 and 3.", "    string_seq = String[]\n    for i in 0:n-1\n      \
    \  string_seq[i] = i\n    return string_seq.join(\" \")\nend\n</cell>\n<code language=julia-1.1>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 3\nWrite a function that takes a\
    \ string and returns the number of characters in the string.", "    \n    string_seq\
    \ = \"\"\n    \n    for n in 0:n\n        string_seq = string_seq + string(n)\n\
    \    end\n    \n    return string_seq\nend\n</cell>\n<code language=julia-1.3>\n\
    string_sequence(0)\n</cell>\n<code language=julia-1.3>\nstring_sequence(5)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the string\
    \ with all the letters capitalized.", "    string_sequence = String[]\n    for\
    \ i in 0 .. n\n        string_sequence += String(i)\n    return string_sequence.join(\"\
    \ \")\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n</cell>\n\
    <text>\nThe function string_sequence is now a first-class citizen in Julia. Let's\
    \ try it out!", "    str = string_range(0,n)\n    return str\nend\n</cell>\n<code\
    \ language=julia-1.4>\nstring_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string as input and returns the number of characters\
    \ in the string.", "    string_seq = String[]\n    for n in 0:n\n        string_seq\
    \ += String(n)\n    return string_seq\nend\n</cell>\n<code language=julia-1.1>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ string as input and returns the string with all the characters in lower case.\
    \ \nHint: Use lowercase() function", "    \"\"\"Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n\
    \    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"", "    string_sequence\
    \ = \"\"\n    for i = 1 to n do\n        string_sequence = string_sequence + \"\
    \ \" + i\n    end\n    return string_sequence\n</code>\n<|/ a dscore=0 |>\n<|\
    \ a dscore=0 |>\n<code>", "    \n    string = \"\"\n    for i = 1:n\n        string\
    \ = string + \" \" + to_string(i)\n    end\n    return string\nend", "    string\
    \ = \"\"\n    for i = 1 to n do\n        string = string + i\n    end\n    return\
    \ string\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the first n prime numbers. \n\
    Hint: Use a for loop and a prime number checker function.", "    str = \" \"\n\
    \    for i = 1:n\n        str = str + i\n    end\n    return str\nend\n</cell>\n\
    <code language=julia-1.4>\nstring_sequence(5)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a string as input and returns a string with all the characters\
    \ in lower case.\nThe function should ignore the case of the characters.\nThe\
    \ function should ignore the case of the characters.\nThe function should ignore\
    \ the case of the characters.\nThe function should ignore the case of the characters.\n\
    The function should ignore the case of the characters.\nThe function should ignore\
    \ the case of the characters.\nThe function should ignore the case of the characters.\n\
    The function should ignore the case of the characters.\nThe function should ignore\
    \ the case of the characters.\nThe function should ignore the case of the characters.\n\
    The function should ignore the case of the characters.\nThe function should ignore\
    \ the case of the characters.\nThe function should ignore the case of the characters.\n\
    The function should ignore the case of the characters.\nThe function should ignore\
    \ the case of the characters.\nThe function should ignore the case of the characters.\n\
    The function should ignore the case of the characters.\nThe function should ignore\
    \ the case of the characters.\nThe function should ignore the case of the characters.\n\
    The function should ignore the case of the characters.\nThe function should ignore\
    \ the case of the characters.\nThe function should ignore the case of the characters.\n\
    The function should ignore the case of the characters.\nThe function should ignore\
    \ the case of the characters.\nThe function should ignore the case of the characters.\n\
    The function should ignore the case of the characters.\nThe function should ignore\
    \ the case of the characters.\nThe function should ignore the case of the characters.\n\
    The function should ignore the case of the characters.\nThe function should ignore\
    \ the case of the characters.\nThe function should ignore the case of the characters.\n\
    The function should ignore the case of the characters.\nThe function should ignore\
    \ the case of the characters.\nThe function should ignore the case of the characters.\n\
    The function should ignore the case of the characters.\nThe function should ignore\
    \ the case of the characters.\nThe function should ignore the case of the characters.\n\
    The function should ignore the case of the characters.\nThe function should ignore\
    \ the case of the characters.\nThe function should ignore the case of the characters.\n\
    The function should ignore the case of the characters.\nThe function should ignore\
    \ the case of the characters.\nThe function should ignore the case of the characters.\n\
    The function should ignore the case of the characters.\nThe function should ignore\
    \ the case of the characters.\nThe function should ignore the case of the characters.\n\
    The function should ignore the case of the characters.\nThe function should ignore\
    \ the case of the characters.\nThe function should ignore the case of the characters.\n\
    The function should ignore the case of the characters.\n", "    \n    string_seq\
    \ = \"\"\n    for i = 1:n\n        string_seq = string_seq + i\n    end\n    return\
    \ string_seq\nend", "    \n    string = \"\"\n    for i = 1:n\n        string\
    \ = string + \" \" + i\n    end\n    return string\nend\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(0)\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n</cell>\n\
    <code language=julia-1.5>", "    \n    string = \"\"\n    for i = 1:n\n      \
    \  string = string + \" \" + to_string(i)\n    end\n    return string\nend\n</cell>\n\
    <code language=julia-1.5>\nstring_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a vector of numbers and returns the sum of the numbers.\
    \ \nThe function should take one argument, a vector of numbers.\nThe function\
    \ should return a number.", "    \n    string = \"\"\n    for i = 1:n\n      \
    \  string = string + string(i)\n    end\n    return string\nend\n</cell>\n<code\
    \ language=julia-1.5>\nstring_sequence(5)\n</cell>\n<text>\nExercise 5\nWrite\
    \ a function that takes a vector of numbers and returns the sum of the numbers.\
    \ \nThe function should only take one argument. \nThe function should return a\
    \ number.", "    string_sequence = \"\"\n    for i = 1:n\n        string_sequence\
    \ = string_sequence + \" \" + to_string(i)\n    end\n    return string_sequence\n\
    end\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the number of characters\
    \ in that string.\nHint: Use a for loop to iterate over the string.", "    string\
    \ = \"\"\n    for i = 1:n\n        string = string + \" \" + string(i)\n    end\n\
    \    return string\nend", "    \n    string = \"\"\n    for i = n\n    do\n  \
    \      string += i\n        i += 1\n    done\n    return string\n</code>\n<|/\
    \ a dscore=0 |>\n<| a dscore=0 |>\n<code>", "    string_seq = String[]\n    for\
    \ i in 0..n-1\n        string_seq[i] = i\n    return string_seq.join(\" \")\n\
    end\n</cell>\n<code language=julia-1.0>\nstring_sequence(5)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the number of characters\
    \ in the string.\nHint: Use length()", "    string_sequence = \"\"\n    for i\
    \ = 1:n\n        string_sequence = string_sequence + \" \" + string(i)\n    end\n\
    \    return string_sequence\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 1\nWrite a function that takes a string and returns\
    \ the string with all the characters in reverse order.", "    string_sequence\
    \ = \"\"\n    for i = 1:n\n        string_sequence = string_sequence + \" \" +\
    \ str(i)\n    end\n    return string_sequence\nend\n</cell>\n<code language=julia-1.4>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ string as input and returns the string with all the characters in lower case.",
  "    string = \"\"\n    for i = n-1, 0, -1 do\n        string = string + i\n   \
    \ end\n    return string\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a number n and returns\
    \ the string \"n!\".\nHint: Use a for loop.", "    \"\"\"Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n\
    \    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"", "    \"\"\
    \"Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n\
    \    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3\
    \ 4 5'\n    \"\"\"", "    string_seq = \"\"\n    for i = 1:n\n        string_seq\
    \ = string_seq + i\n    end\n    return string_seq\nend\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite a function called string_sequence\
    \ that returns a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.", "    string_sequence = \"\"\n    for i = n\n    do\n        string_sequence\
    \ = string_sequence + \" \" + string(i)\n    done\n    return string_sequence\n\
    </code>\n<|/ a tags=julia,string |>\n<| a tags=julia,string |>\nIn Julia v0.6\
    \ you can use the string function which converts any object to a string.\n<code>\n\
    julia> string(5)\n\"5\"\n</code>\n<|/ a dscore=2 |>\n<| a tags=julia,string |>\n\
    In Julia v0.6 you can use the string function which converts any object to a string.\n\
    <code>\njulia> string(5)\n\"5\"\n</code>\n<|/ a dscore=2 |>\n<| a tags=julia,string\
    \ |>\nIn Julia v0.6 you can use the string function which converts any object\
    \ to a string.\n<code>\njulia> string(5)\n\"5\"\n</code>\n<|/ a dscore=2 |>\n\
    <| a |>\nIn Julia v0.6 you can use the string function which converts any object\
    \ to a string.\n<code>\njulia> string(5)\n\"5\"\n</code>\n<|/ a dscore=2 tags=julia,string\
    \ |>\n<| a tags=julia,string |>\nIn Julia v0.6 you can use the string function\
    \ which converts any object to a string.\n<code>\njulia> string(5)\n\"5\"\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=julia,string |>\nIn Julia v0.6 you can use the string\
    \ function which converts any object to a string.\n<code>\njulia> string(5)\n\"\
    5\"\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\nIn Julia v0.6 you can use the\
    \ string function which converts any object to a string.\n<code>\njulia> string(5)\n\
    \"5\"\n</code>\n<|/ a tags=julia,string |>\n<| a tags=julia,string |>\nIn Julia\
    \ v0.6 you can use the string function which converts any object to a string.\n\
    <code>\njulia> string(5)\n\"5\"\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\n\
    In Julia v0.6 you can use the string function which converts any object to a string.\n\
    <code>\njulia> string(5)\n\"5\"\n</code>\n<|/ a tags=julia,string |>\n<| a tags=julia,string\
    \ |>\nIn Julia v0.6 you can use the string function which converts any object\
    \ to a string.\n<code>\njulia> string(5)\n\"5\"\n</code>\n<|/", "    \n    string\
    \ = \"\"\n    for i = 1:n\n        string = string + i\n    end\n    return string\n\
    end\n</cell>\n<code language=julia-1.5>\nstring_sequence(0)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ vector of numbers and returns the sum of the numbers. \nThe function should\
    \ also return a string containing the sum of the numbers. \nThe function should\
    \ also return a string containing the number of elements in the vector.\nThe function\
    \ should also return a string containing the number of elements in the vector.\n\
    The function should also return a string containing the number of elements in\
    \ the vector.\nThe function should also return a string containing the number\
    \ of elements in the vector.\nThe function should also return a string containing\
    \ the number of elements in the vector.\nThe function should also return a string\
    \ containing the number of elements in the vector.\nThe function should also return\
    \ a string containing the number of elements in the vector.\nThe function should\
    \ also return a string containing the number of elements in the vector.\nThe function\
    \ should also return a string containing the number of elements in the vector.\n\
    The function should also return a string containing the number of elements in\
    \ the vector.\nThe function should also return a string containing the number\
    \ of elements in the vector.\nThe function should also return a string containing\
    \ the number of elements in the vector.\nThe function should also return a string\
    \ containing the number of elements in the vector.\nThe function should also return\
    \ a string containing the number of elements in the vector.\nThe function should\
    \ also return a string containing the number of elements in the vector.\nThe function\
    \ should also return a string containing the number of elements in the vector.\n\
    The function should also return a string containing the number of elements in\
    \ the vector.\nThe function should also return a string containing the number\
    \ of elements in the vector.\nThe function should also return a string containing\
    \ the number of elements in the vector.\nThe function should also return a string\
    \ containing the number of elements in the vector.\nThe function should also return\
    \ a string containing the number of elements in the vector.\nThe function should\
    \ also return a string containing the number of elements in the vector.\nThe function\
    \ should also return a string containing the number of elements in the vector.\n\
    The function should also return a string containing the number of elements in\
    \ the vector.\nThe function should also return a string containing the number\
    \ of elements in the vector.\nThe function should also return a string containing\
    \ the number of elements in the vector.\nThe function should also return a string\
    \ containing the number of elements in the vector.\nThe function should also return\
    \ a string containing the number of elements in the vector.\nThe function should\
    \ also return a string containing the number of elements in the vector.\nThe function\
    \ should also return a string containing the number of elements in the vector.\n\
    The function should also return a string containing the number of elements in\
    \ the vector.\nThe function should also return a string containing the number\
    \ of elements in the vector.\nThe function should also return a string containing\
    \ the number of elements in the vector.\nThe function should also return a string\
    \ containing the number of elements in the vector.\nThe function should also return\
    \ a string containing the number of elements in the vector.\nThe function should\
    \ also return a ", "    string_seq = String[]\n    for i = 1:n\n        string_seq.append(i::Int64)\n\
    \    return string_seq.join(\" \")\nend\n</cell>\n<code language=julia-1.3>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ string as input and returns the number of words in the string.\nThe function\
    \ should ignore all punctuation and only count the words. \nThe function should\
    \ ignore all numbers and only count the words.\nThe function should ignore all\
    \ special characters and only count the words.\nThe function should ignore all\
    \ uppercase and only count the words.\nThe function should ignore all lowercase\
    \ and only count the words.\nThe function should ignore all whitespace and only\
    \ count the words.\nThe function should ignore all non-word characters and only\
    \ count the words.\nThe function should ignore all non-word characters and only\
    \ count the words.\nThe function should ignore all non-word characters and only\
    \ count the words.\nThe function should ignore all non-word characters and only\
    \ count the words.\nThe function should ignore all non-word characters and only\
    \ count the words.\nThe function should ignore all non-word characters and only\
    \ count the words.\nThe function should ignore all non-word characters and only\
    \ count the words.\nThe function should ignore all non-word characters and only\
    \ count the words.\nThe function should ignore all non-word characters and only\
    \ count the words.\nThe function should ignore all non-word characters and only\
    \ count the words.\nThe function should ignore all non-word characters and only\
    \ count the words.\nThe function should ignore all non-word characters and only\
    \ count the words.\nThe function should ignore all non-word characters and only\
    \ count the words.\nThe function should ignore all non-word characters and only\
    \ count the words.\nThe function should ignore all non-word characters and only\
    \ count the words.\nThe function should ignore all non-word characters and only\
    \ count the words.\nThe function should ignore all non-word characters and only\
    \ count the words.\nThe function should ignore all non-word characters and only\
    \ count the words.\nThe function should ignore all non-word characters and only\
    \ count the words.\nThe function should ignore all non-word characters and only\
    \ count the words.\nThe function should ignore all non-word characters and only\
    \ count the words.\nThe function should ignore all non-word characters and only\
    \ count the words.\nThe function should ignore all non-word characters and only\
    \ count the words.\nThe function should ignore all non-word characters and only\
    \ count the words.\nThe function should ignore all non-word characters and only\
    \ count the words.\nThe function should ignore all non-word characters and only\
    \ count the words.\nThe function should ignore all non-word ", "    string_seq\
    \ = String[]\n    for i = 1 to n do\n        string_seq.append(i_to_string(i))\n\
    \    return string_seq.join(\" \")\nend\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ number n and returns the string \"nth term\" where n is an integer between 1\
    \ and 20.", "    \n    string_sequence = \"\"\n    \n    for i = 1 to n do\n \
    \       string_sequence = string_sequence + \" \" + string(i)\n    \n    return\
    \ string_sequence\n</code>\n<|/ a |>\n<| a dscore=0 |>\n<code>", "    string_seq\
    \ = String[]\n    for i in 0:n-1\n        string_seq[i] = i\n    return string_seq.join(\"\
    \ \")\nend\n</cell>\n<code language=julia-1.4>\nstring_sequence(0)\n</cell>\n\
    <code language=julia-1.4>\nstring_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string and returns the number of characters in the string.\n\
    Hint: Use length()", "    string_seq = String[]\n    for i = 1:n\n        push!(string_seq,string(i))\n\
    \    end\n    return join(\" \",string_seq)\nend\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a string and returns the number of characters in that\
    \ string.\nWrite a function that takes a string and returns the number of words\
    \ in that string.\nWrite a function that takes a string and returns the number\
    \ of sentences in that string.\nWrite a function that takes a string and returns\
    \ the number of characters in that string divided by the number of words in that\
    \ string.\nWrite a function that takes a string and returns the number of characters\
    \ in that string divided by the number of sentences in that string.", "    str\
    \ = string_sequences(n)\n    str = str[end-1]\n    return str\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    string = \"\"\n    for i = 1:n\n      \
    \  string = string + \" \" + string(i)\n    end\n    return string\nend\n</cell>\n\
    <code language=julia-1.5>\nstring_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function which takes a number n and returns the string \"1 2 3 4 5\".\nWrite\
    \ a second function which takes a number n and returns the string \"1 2 3 4 5\
    \ 6 7 8 9\".\nWrite a third function which takes a number n and returns the string\
    \ \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28\
    \ 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54\
    \ 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80\
    \ 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100\".\nWrite a fourth\
    \ function which takes a number n and returns the string \"1 2 3 4 5 6 7 8 9 10\
    \ 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36\
    \ 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62\
    \ 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88\
    \ 89 90 91 92 93 94 95 96 97 98 99 100\".\nWrite a fifth function which takes\
    \ a number n and returns the string \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17\
    \ 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43\
    \ 44 45 46 47 48 49 50 51 52 53 54 55 56 ", "    \n    string_seq = \"\"\n   \
    \ for i = 1:n\n        string_seq = string_seq + i\n    end\n    return string_seq\n\
    end", "    string_seq = String[]\n    for i = 1:n\n        string_seq += String(i)\n\
    \    return string_seq.join(\" \")\nend\n</cell>\n<code language=julia-1.0>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 3\nWrite a function that takes a\
    \ vector of strings and returns a vector of integers representing the number of\
    \ times a string appears in the vector.\nFor example, string_sequence(\"abba\"\
    ) should return a vector [1, 1, 2, 1]\nHint: Use a for loop to iterate over the\
    \ strings in the vector and count the number of times each string appears.", " \
    \   \n    string_seq = \"\"\n    for i = 1:n\n        string_seq = string_seq\
    \ + i\n    end\n    return string_seq\nend\n</cell>\n<code language=julia-1.4>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ string as input and returns the number of characters in the string.\nHint: Use\
    \ length() function", "    string_sequence = \"\"\n    for i = 1 to n do\n   \
    \     string_sequence = string_sequence + \" \" + to_string(i)\n    end\n    return\
    \ string_sequence\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 5\nWrite a function that takes a number n and returns\
    \ the string \"n is a multiple of 3\" if the number is divisible by 3, otherwise\
    \ \"n is not a multiple of 3\".", "    str = String[Int64]()\n    i = 0\n    while\
    \ i < n do\n        str = str + String[i]\n        i = i + 1\n    end\n    return\
    \ str\nend\n</cell>\n<code language=julia-1.3>", "    \n    string = \"\"\n  \
    \  for i = 1 to n do\n        string = string + \" \" + i\n    end\n    return\
    \ string\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(0)\n</cell>\n\
    <code language=julia-1.5>\nstring_sequence(5)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a string as input and returns a string containing all\
    \ the characters in that string in alphabetical order.\ne.g. \"hello\" -> \"ehllo\"",
  "    \n    string = \"\"\n    for i = 1:n\n        string = string + \" \" + to_string(i)\n\
    \    end\n    return string\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nThe function string_sequence is now defined, we can test it by\
    \ executing the following cell:", "    string_seq = String[]\n    for i = 1 to\
    \ n do\n        string_seq.append(i.toString())\n    return string_seq.join(\"\
    \ \")\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string as input and returns\
    \ a string containing all the characters of the string in reverse order.\nHint:\
    \ Use reverse function.", "    string_sequence = \"\"\n    for i = 1:n\n     \
    \   string_sequence = string_sequence + \" \" + to_string(i)\n    end\n    return\
    \ string_sequence\nend", "    string_seq = String[]\n    for i = 1 to n do\n \
    \       string_seq.append(i.toString())\n    return string_seq.join(\" \")\nend\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(5)\n</cell>\n<text>\nExercise:\
    \ Write a function that takes a string and returns the string with all the letters\
    \ capitalized.\ne.g. \"hello\" => \"Hello\"\nHint: Use a for loop to iterate over\
    \ the string and capitalize each letter", "    string_seq = String[]\n    for\
    \ i in 0 .. n\n        string_seq.append(i::Int64)\n    return string_seq.join(\"\
    \ \")\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(0)\n</cell>\n\
    <code language=julia-1.5>\nstring_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a vector of numbers and returns the sum of the numbers.\
    \ \nThe function should work for vectors of any length.\nHint: use the reduce\
    \ function.", "    string = \"\"\n    for i = 1 to n do\n        string = string\
    \ + \" \" + string(i)\n    end\n    return string\nend\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(0)\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n</cell>\n\
    <code language=julia-1.5>", "    string_sequence = String[]\n    for i in 0 ..\
    \ n-1\n        string_sequence += String(i)\n    return string_sequence\n</code>\n\
    <|/ a tags=julia |>\n<| c |>\nThis doesn't seem to work. `string_sequence(5)`\
    \ returns `[\"0\", \"1\", \"2\", \"3\", \"4\", \"5\"]`, not `\"0 1 2 3 4 5\"`.\n\
    <|/ c |>\n<| c |>\nI see what you mean. I've updated the answer to reflect this.\n\
    <|/ c |>\n<| a dscore=2 |>\nThe easiest way is to use string interpolation:\n\
    <code>\njulia> \"$(0:5)\"\n5-element Array{String,1}:\n \"0\"\n \"1\"\n \"2\"\n\
    \ \"3\"\n \"4\"\n \"5\"\n</code>\n<|/ a tags=julia |>\n<| a dscore=2 |>\nYou can\
    \ use the join function from the string package:\n<code>\njulia> using String",
  "    \n    string = \"\"\n    for i = 1:n\n        string = string + \" \" + i\n\
    \    end\n    return string\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a vector of numbers and\
    \ returns the sum of the numbers in the vector.\nFor example, if the vector is\
    \ [1,2,3,4,5], the function should return 15.\nHint: Use a for loop.\nHint: Use\
    \ a variable named sum to store the sum of the numbers.", "    \n    string =\
    \ \"\"\n    for i = 1:n\n        string = string + \" \" + i\n    end\n    return\
    \ string\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n</cell>\n\
    <text>\nWrite a function that takes a string and returns the string with all the\
    \ characters in upper case. For example, \"Hello\" => \"HELLO\".", "    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    string_sequence = String[]\n\
    \    for i = n-1, 0, -1 do\n        string_sequence.append(i%10^6)\n        i\
    \ = floor(i/10^6)\n    end\n    return string_sequence.join(\" \")\nend\n</cell>\n\
    <code language=julia-1.3>\nstring_sequence(0)\n</cell>\n<code language=julia-1.3>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the first n prime numbers. \nHint: Use a for loop to iterate from 2 to n inclusive.",
  "    string_seq = String[]\n    for i = 1:n\n        string_seq[i] = i\n    end\n\
    \    return string_seq.join(\" \")\nend\n</cell>\n<code language=julia-1.0>\n\
    string_sequence(0)\n</cell>\n<code language=julia-1.0>\nstring_sequence(5)\n</cell>\n\
    <code language=julia-1.0>", "    string_seq = \"\"\n    for i = 1:n\n        string_seq\
    \ = string_seq + i\n    end\n    return string_seq\nend\n</cell>\n<code language=julia-1.4>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite a function that generates\
    \ a sequence of numbers from 0 to n inclusive, where n is given as an input argument.\n\
    The function should return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\nThe function should also return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\nThe function should\
    \ also return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nThe function should also return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\nThe function should also return a\
    \ string containing space-delimited numbers starting from 0 upto n inclusive.\n\
    The function should also return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\nThe function should also return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\nThe function should\
    \ also return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nThe function should also return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\nThe function should also return a\
    \ string containing space-delimited numbers starting from 0 upto n inclusive.\n\
    The function should also return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\nThe function should also return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\nThe function should\
    \ also return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nThe function should also return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\nThe function should also return a\
    \ string containing space-delimited numbers starting from 0 upto n inclusive.\n\
    The function should also return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\nThe function should also return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\nThe function should\
    \ also return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nThe function should also return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\nThe function should also return a\
    \ string containing space-delimited numbers starting from 0 upto n inclusive.\n\
    The function should also return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\nThe function should also return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\nThe function should ",
  "    string_sequence = \" \"\n    for i = 1:n\n        string_sequence = string_sequence\
    \ + \" \" + i\n    end\n    return string_sequence\nend\n</cell>\n<code language=julia-1.0>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 4\nWrite a function that takes a\
    \ number n and returns the string \"n!\".\n    >>> string_factorial(0)\n    '1'\n\
    \    >>> string_factorial(5)\n    '5!'\n    \"\"\"", "    \n    string = \"\"\n\
    \    for i = 1:n\n        string = string + \" \" + i\n    end\n    return string\n\
    end\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a number as input and returns the string\
    \ representation of that number in reverse order. For example, if the input is\
    \ 5, the function should return \"5 4 3 2 1\"", "    string_sequence = \"\"\n\
    \    for i = 1 to n do\n        string_sequence = string_sequence + \" \" + to_string(i)\n\
    \    end\n    return string_sequence\nend\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the first n prime numbers. \nHint: Use a for loop and a prime number test.",
  "    string = \"\"\n    for i = n-1 downto 1 do\n        string = string + i\n \
    \       string = string + \" \" \n    return string\n</code>\n<|/ a tags=julia,string\
    \ |>\n<| a dscore=1 |>\nHere's a solution using string interpolation:\n<code>",
  "    \n    string = \"\"\n    for i = 1:n\n        string = string + \" \" + i\n\
    \    end\n    return string\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes an array of numbers and\
    \ returns the sum of the numbers in the array.\nHint: Use a for loop to iterate\
    \ through the array.", "    string_seq = \"\"\n    for i = 1:n\n        string_seq\
    \ = string_seq + string(i)\n    end\n    return string_seq\nend\n</cell>\n<code\
    \ language=julia-1.5>\nstring_sequence(5)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a string as input and returns the number of characters\
    \ in the string.", "    string = \"\"\n    for i = 1:n\n        string = string\
    \ + \" \" + i\n    end\n    return string\nend\n</cell>\n<code language=julia-1.3>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 3\nWrite a function that takes a\
    \ string and returns the string with all the letters in lower case and spaces\
    \ replaced by underscore. For example, \"Hello World\" becomes \"hello_world\"\
    .", "    \"\"\"Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"", "    string_sequence = \"\"\n    for i = 1:n\n\
    \        string_sequence = string_sequence + \" \" + i\n    end\n    return string_sequence\n\
    end\n</cell>\n<code language=julia-1.3>\nstring_sequence(5)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a string and returns the number of characters\
    \ in the string.", "    \n    string = \"\"\n    for i = 1 to n do\n        string\
    \ = string + i\n    end\n    return string\nend\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the first n prime numbers. \nHint: Use a for loop to iterate through all numbers\
    \ from 2 to n. \nHint: Use a boolean to check if a number is prime or not. \n\
    Hint: Use a while loop to iterate through all numbers from 2 to n. \nHint: Use\
    \ a boolean to check if a number is prime or not. \nHint: Use a while loop to\
    \ iterate through all numbers from 2 to n. \nHint: Use a boolean to check if a\
    \ number is prime or not. \nHint: Use a while loop to iterate through all numbers\
    \ from 2 to n. \nHint: Use a boolean to check if a number is prime or not. \n\
    Hint: Use a while loop to iterate through all numbers from 2 to n. \nHint: Use\
    \ a boolean to check if a number is prime or not. \nHint: Use a while loop to\
    \ iterate through all numbers from 2 to n. \nHint: Use a boolean to check if a\
    \ number is prime or not. \nHint: Use a while loop to iterate through all numbers\
    \ from 2 to n. \nHint: Use a boolean to check if a number is prime or not. \n\
    Hint: Use a while loop to iterate through all numbers from 2 to n. \nHint: Use\
    \ a boolean to check if a number is prime or not. \nHint: Use a while loop to\
    \ iterate through all numbers from 2 to n. \nHint: Use a boolean to check if a\
    \ number is prime or not. \nHint: Use a while loop to iterate through all numbers\
    \ from 2 to n. \nHint: Use a boolean to check if a number is prime or not. \n\
    Hint: Use a while loop to iterate through all numbers from 2 to n. \nHint: Use\
    \ a boolean to check if a number is prime or not. \nHint: Use a while loop to\
    \ iterate through all numbers from 2 to n. \nHint: Use a boolean to check if a\
    \ number is prime or not. \nHint: Use a while loop to iterate through all numbers\
    \ from 2 to n. \nHint: Use a boolean to check if a number is prime or not. \n\
    Hint: Use a while loop to iterate through all numbers from 2 to n. \nHint: Use\
    \ a boolean to check if a number is prime or not. \nHint: Use a while loop to\
    \ iterate through all numbers from 2 to n. \nHint: Use a boolean to check if a\
    \ number is prime or not. \nHint: Use ", "    \" Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\"\n    \" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\"\n    \" Return a\
    \ string containing space-delimited numbers starting from 0 upto n inclusive.\"\
    \n    \" Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\"\n    \" Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\"\n    \" Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\"\n    \" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\"\n    \" Return a\
    \ string containing space-delimited numbers starting from 0 upto n inclusive.\"\
    \n    \" Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\"\n    \" Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\"\n    \" Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\"\n    \" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\"\n    \" Return a\
    \ string containing space-delimited numbers starting from 0 upto n inclusive.\"\
    \n    \" Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\"\n    \" Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\"\n    \" Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\"\n    \" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\"\n    \" Return a\
    \ string containing space-delimited numbers starting from 0 upto n inclusive.\"\
    \n    \" Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\"\n    \" Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\"\n    \" Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\"\n    \" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\"\n    \" Return a\
    \ string containing space-delimited numbers starting from 0 upto n inclusive.\"\
    \n    \" Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\"\n    \" Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\"\n    \" Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\"\n    \" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\"\n    \" Return a\
    \ string containing space-delimited numbers starting from 0 upto n inclusive.\"\
    \n    \" Return a string containing space-delimited ", "    \n    string_seq =\
    \ \"\"\n    for i = 1:n\n        string_seq = string_seq + string(i)\n    end\n\
    \    return string_seq\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 4\nWrite a function that takes a string as input and\
    \ returns the number of characters in the string.", "    str = \" \"\n    for\
    \ i = 1:n\n        str = str + i\n    end\n    return str\nend\n</cell>\n<code\
    \ language=julia-1.4>\nstring_sequence(0)\n</cell>\n<code language=julia-1.4>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ vector of numbers and returns the sum of the numbers. \nHint: use the reduce\
    \ function.", "    \n    string = \"\"\n    for i = 1:n\n        string = string\
    \ + string(i)\n    end\n    return string\nend\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ string and returns the number of characters in the string.\nFor example, string_length(\"\
    Hello World\") should return 11.", "    \n    string = \"\"\n    for i = 1:n\n\
    \        string = string + \" \" + i\n    end\n    return string\nend\n</cell>\n\
    <code language=julia-1.5>\nstring_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function called string_sequence that returns a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.", "    \n    string_seq = \"\"\n \
    \   \n    for i = 1:n\n        string_seq = string_seq + i\n    end\n    \n  \
    \  return string_seq\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the first n prime numbers.\
    \ \nHint: Use a for loop to iterate over all numbers from 2 to n. \nHint: Use\
    \ a while loop to iterate over all numbers from 2 to n. \nHint: Use a boolean\
    \ variable to keep track of whether a number is prime or not. \nHint: Use a while\
    \ loop to iterate over all numbers from 2 to n. \nHint: Use a boolean variable\
    \ to keep track of whether a number is prime or not. \nHint: Use a while loop\
    \ to iterate over all numbers from 2 to n. \nHint: Use a boolean variable to keep\
    \ track of whether a number is prime or not. \nHint: Use a while loop to iterate\
    \ over all numbers from 2 to n. \nHint: Use a boolean variable to keep track of\
    \ whether a number is prime or not. \nHint: Use a while loop to iterate over all\
    \ numbers from 2 to n. \nHint: Use a boolean variable to keep track of whether\
    \ a number is prime or not. \nHint: Use a while loop to iterate over all numbers\
    \ from 2 to n. \nHint: Use a boolean variable to keep track of whether a number\
    \ is prime or not. \nHint: Use a while loop to iterate over all numbers from 2\
    \ to n. \nHint: Use a boolean variable to keep track of whether a number is prime\
    \ or not. \nHint: Use a while loop to iterate over all numbers from 2 to n. \n\
    Hint: Use a boolean variable to keep track of whether a number is prime or not.\
    \ \nHint: Use a while loop to iterate over all numbers from 2 to n. \nHint: Use\
    \ a boolean variable to keep track of whether a number is prime or not. \nHint:\
    \ Use a while loop to iterate over all numbers from 2 to n. \nHint: Use a boolean\
    \ variable to keep track of whether a number is prime or not. \nHint: Use a while\
    \ loop to iterate over all numbers from 2 to n. \nHint: Use a boolean variable\
    \ to keep track of whether a number is prime or not. \nHint: Use a while loop\
    \ to iterate over all numbers from 2 to n. \nHint: Use a boolean variable to keep\
    \ track of whether a number is prime or not. \nHint: Use a while loop to iterate\
    \ over all numbers from 2 to n. \nHint: Use a boolean variable to keep track of\
    \ whether a number is prime or not. \n", "    string_sequence = \"\"\n    for\
    \ i = 1 to n do\n        string_sequence = string_sequence + \" \" + string(i)\n\
    \    end\n    return string_sequence\nend\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 5\nWrite a function that takes a\
    \ string as input and returns the string with all the characters in lower case.",
  "    str = \" \"\n    for i in 0:n-1\n        str = str + string(i)\n    return\
    \ str\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't answer the question,\
    \ which is about how to do this in Julia.\n<|/ c |>\n<| c |>\nThe question is\
    \ about how to do this in Julia, not Python.\n<|/ c |>\n<| c |>\nThe question\
    \ is about how to do this in Julia, not Python.\n<|/ c |>\n<| a tags=julia,string\
    \ |>\n<code>", "    string_sequence = \"\"\n    for i = 1:n\n        string_sequence\
    \ = string_sequence + \" \" + string(i)\n    end\n    return string_sequence\n\
    end\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a string and returns the number of words\
    \ in the string.", "    string_seq = String[]\n    for x in 0:n\n        string_seq.append(x)\n\
    \    return string_seq.join(\" \")\nend\n</cell>\n<code language=julia-1.4>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 3\nWrite a function that takes a\
    \ string as input and returns the number of characters in the string.", "    string_seq\
    \ = String[]\n    for i in 0..n-1\n        string_seq[i] = i\n    return string_seq.join(\"\
    \ \")\nend\n</cell>\n<code language=julia-1.3>\nstring_sequence(5)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of characters in the string.\nHint: Use length()", "    \n    string = \"\"\n\
    \    for i = 1:n\n        string = string + \" \" + string(i)\n    end\n    return\
    \ string\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a vector of numbers and returns\
    \ the sum of the numbers in the vector.\nFor example, if the input vector is [1,2,3,4,5],\
    \ the output should be 15.\nHint: use the sum function.", "    string = \"\"\n\
    \    for i = 1:n\n        string = string + string(i)\n    end\n    return string\n\
    end\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n</cell>\n<text>\n\
    Exercise 5\nWrite a function which takes a number n and returns the string \"\
    n!\".\nHint: Use a for loop to iterate over all numbers from 1 to n.", "    \n\
    \    string = \"\"\n    for i = 1 to n do\n        string = string + \" \" + to_string(i)\n\
    \    end\n    return string\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that converts a string to a vector\
    \ of integers. For example,", "    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    \n    string = \"\"\n    for i = 1:n\n        string = string +\
    \ \" \" + i\n    end\n    return string\nend\n</cell>\n<code language=julia-1.1>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 3\nWrite a function that takes a\
    \ vector of numbers and returns a vector of strings containing the numbers in\
    \ reverse order. For example, if the input vector is [1,2,3,4,5], the output should\
    \ be [\"5 4 3 2 1\"].", "    \n    string = \"\"\n    for i = 1:n\n        string\
    \ = string + i\n    end\n    return string\nend", "    string_seq = String[]\n\
    \    for k in 0 .. n-1\n        string_seq[k] = str(k)\n    return string_seq.join(\"\
    \ \")\nend\n</cell>\n<code language=julia-1.3>\nstring_sequence(5)\n</cell>\n\
    <text>\nExercise: Write a function that returns the first n prime numbers. \n\
    Hint: Use a for loop and a prime number test.", "    \n    string = \"\"\n   \
    \ for i = n\n    do\n        string += i\n        i += 1\n    done\n    \n   \
    \ return string\n</code>\n<|/ a tags=julia,string |>\n<| a dscore=2 |>\nThe easiest\
    \ way is to use join:\n<code>\njulia> join(x->string(x), 1:5)\n\"12345\"\n</code>\n\
    <|/ a tags=julia,string |>\n<| a dscore=1 |>\n<code>", "    string_seq = String[]\n\
    \    for i = 1 to n do\n        string_seq.append(i.toString())\n    return string_seq.join(\"\
    \ \")\nend\n</cell>\n<code language=julia-1.3>\nstring_sequence(0)\n</cell>\n\
    <code language=julia-1.3>\nstring_sequence(5)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes an array of numbers and returns the sum of the numbers\
    \ in the array.\nHint: Use a for loop to iterate over the array.", "    \n   \
    \ string = \"\"\n    for i = 1 to n do\n        string = string + \" \" + string(i)\n\
    \    end\n    return string\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a vector of integers\
    \ and returns the sum of the integers in the vector.\nFor example, if the input\
    \ vector is [1,2,3,4,5], the function should return 15.\nHint: use sum.", "  \
    \  \n    string = \"\"\n    for i = 1:n\n        string = string + \" \" + string(i)\n\
    \    end\n    return string\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 7: Write a function that takes a vector of integers\
    \ and returns a string containing the elements of the vector separated by spaces.\n\
    Hint: Use a for loop to iterate over the elements of the vector.", "    \n   \
    \ string = \"\"\n    for i = 1:n\n        string = string + \" \" + i\n    end\n\
    \    return string\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a number n and returns\
    \ a string containing space-delimited numbers starting from 0 upto n inclusive.",
  "    \n    string = \"\"\n    for i = 1 to n do\n        string = string + \" \"\
    \ + i\n    end\n    return string\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the first n prime numbers.\
    \ \nThe function should take an Int argument n and return a Vector of Ints.\n\
    The function should return nothing if n is less than or equal to 0.\nThe function\
    \ should return nothing if n is negative.\nThe function should return nothing\
    \ if n is greater than 100.\nThe function should return nothing if n is NaN.\n\
    The function should return nothing if n is Inf.\nThe function should return nothing\
    \ if n is NaN.\nThe function should return nothing if n is Inf.\nThe function\
    \ should return nothing if n is NaN.\nThe function should return nothing if n\
    \ is Inf.\nThe function should return nothing if n is NaN.\nThe function should\
    \ return nothing if n is Inf.\nThe function should return nothing if n is NaN.\n\
    The function should return nothing if n is Inf.\nThe function should return nothing\
    \ if n is NaN.\nThe function should return nothing if n is Inf.\nThe function\
    \ should return nothing if n is NaN.\nThe function should return nothing if n\
    \ is Inf.\nThe function should return nothing if n is NaN.\nThe function should\
    \ return nothing if n is Inf.\nThe function should return nothing if n is NaN.\n\
    The function should return nothing if n is Inf.\nThe function should return nothing\
    \ if n is NaN.\nThe function should return nothing if n is Inf.\nThe function\
    \ should return nothing if n is NaN.\nThe function should return nothing if n\
    \ is Inf.\nThe function should return nothing if n is NaN.\nThe function should\
    \ return nothing if n is Inf.\nThe function should return nothing if n is NaN.\n\
    The function should return nothing if n is Inf.\nThe function should return nothing\
    \ if n is NaN.\nThe function should return nothing if n is Inf.\nThe function\
    \ should return nothing if n is NaN.\nThe function should return nothing if n\
    \ is Inf.\nThe function should return nothing if n is NaN.\nThe function should\
    \ return nothing if n is Inf.\nThe function should return nothing if n is NaN.\n\
    The function should return nothing if n is Inf.\nThe function should return nothing\
    \ if n is NaN.\nThe function should return nothing if n is Inf.\nThe function\
    \ should return nothing if ", "    \n    string = \"\"\n    for i = 1:n\n    \
    \    string = string + \" \" + string(i)\n    end\n    return string\nend\n</cell>\n\
    <code language=julia-1.5>\nstring_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function named string_sequence that returns a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\nThe function should take a single\
    \ argument named n and return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\nThe function should return an error if n is not a\
    \ positive integer.\nThe function should return an error if n is less than 0.\n\
    The function should return an error if n is greater than or equal to 0.\nThe function\
    \ should return an error if n is not a positive integer.\nThe function should\
    \ return an error if n is less than 0.\nThe function should return an error if\
    \ n is greater than or equal to 0.\nThe function should return an error if n is\
    \ not a positive integer.\nThe function should return an error if n is less than\
    \ 0.\nThe function should return an error if n is greater than or equal to 0.\n\
    The function should return an error if n is not a positive integer.\nThe function\
    \ should return an error if n is less than 0.\nThe function should return an error\
    \ if n is greater than or equal to 0.\nThe function should return an error if\
    \ n is not a positive integer.\nThe function should return an error if n is less\
    \ than 0.\nThe function should return an error if n is greater than or equal to\
    \ 0.\nThe function should return an error if n is not a positive integer.\nThe\
    \ function should return an error if n is less than 0.\nThe function should return\
    \ an error if n is greater than or equal to 0.\nThe function should return an\
    \ error if n is not a positive integer.\nThe function should return an error if\
    \ n is less than 0.\nThe function should return an error if n is greater than\
    \ or equal to 0.\nThe function should return an error if n is not a positive integer.\n\
    The function should return an error if n is less than 0.\nThe function should\
    \ return an error if n is greater than or equal to 0.\nThe function should return\
    \ an error if n is not a positive integer.\nThe function should return an error\
    \ if n is less than 0.\nThe function should return an error if n is greater than\
    \ or equal to 0.\nThe function should return an error if n is not a positive integer.\n\
    The function should return an error if n is less than 0.\nThe function should\
    \ return an error if n is greater than or equal to 0.\nThe function should return\
    \ an error if n is not a positive integer.\nThe function should return an error\
    \ if n is less than 0.\nThe function should return an error if n is greater than\
    \ or equal to 0.\nThe function should return an error if n is not a positive integer.\n\
    The function should return an error if n", "    \n    string = \"\"\n    for i\
    \ = 1:n\n        string = string + \" \" + i\n    end\n    return string\nend\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(5)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a vector of numbers and returns a string containing\
    \ the first n numbers of the vector. For example, string_vector([1,2,3,4,5]) should\
    \ return \"1 2 3 4 5\".", "    string_seq = String[]\n    for i in 0 .. n\n  \
    \      string_seq.append(i.toString())\n    return string_seq.join(\" \")\nend\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(5)\n</cell>\n<text>\nExercise\
    \ 1\nWrite a function that takes a number as input and returns the string representation\
    \ of that number in reverse order. For example, if the input is 5, the function\
    \ should return \"5 4 3 2 1\"", "    \n    string_seq = \"\"\n    for i = 1:n\n\
    \        string_seq = string_seq + string(i)\n    end\n    \n    return string_seq\n\
    end", "    \n    string = \"\"\n    for i = 1:n\n        string = string + \"\
    \ \" + i\n    end\n    return string\nend\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(0)\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector of numbers and returns\
    \ the sum of the numbers. \nThe function should also return the number of elements\
    \ in the vector.\nThe function should also return the mean of the numbers in the\
    \ vector.\nThe function should also return the median of the numbers in the vector.\n\
    The function should also return the mode of the numbers in the vector.", "   \
    \ str = String[Int64]()\n    for i = 1:n\n        str = str + i\n    end\n   \
    \ str\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n</cell>\n\
    <text>\nThe function string_sequence is now available in the Julia REPL.", " \
    \   if n == 0 \n        then return \"0\" \n    else \n        string_sequence(n-1)\
    \ + \", \" + string_sequence(n-1)\nend\n</cell>\n<code language=julia-1.1>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a vector of integers\
    \ and returns the sum of the integers in the vector.\nHint: Use a for loop to\
    \ iterate over the vector and add up the integers in the vector.", "    \n   \
    \ string = \"\"\n    for i = 1:n\n        string = string + string(i)\n    end\n\
    \    return string\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the first n prime numbers.\
    \ \nHint: Use a for loop and a prime number test.", "    string_seq = String[]\n\
    \    for i in 0 .. n\n        string_seq.append(i::Int64)\n    return string_seq.join(\"\
    \ \")\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n</cell>\n\
    <text>\nExercise 1\nWrite a function that takes a string as input and returns\
    \ the number of characters in the string.", "    \n    string = \"\"\n    for\
    \ i = 1:n\n        string = string + \" \" + to_string(i)\n    end\n    return\
    \ string\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(0)\n</cell>\n\
    <code language=julia-1.5>\nstring_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that converts a number to a string and returns the string in reverse\
    \ order.", "    \n    string = \"\"\n    \n    for i = 1:n\n        string = string\
    \ + \" \" + to_string(i)\n    end\n    \n    return string\nend\n</cell>\n<code\
    \ language=julia-1.1>\nstring_sequence(5)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a vector of numbers and returns the sum of the numbers.\
    \ \nThe function should work for vectors of any length.\nThe function should work\
    \ for vectors of any type of numbers.\nThe function should work for vectors of\
    \ any type of numbers.\nThe function should work for vectors of any type of numbers.\n\
    The function should work for vectors of any type of numbers.\nThe function should\
    \ work for vectors of any type of numbers.\nThe function should work for vectors\
    \ of any type of numbers.\nThe function should work for vectors of any type of\
    \ numbers.\nThe function should work for vectors of any type of numbers.\nThe\
    \ function should work for vectors of any type of numbers.\nThe function should\
    \ work for vectors of any type of numbers.\nThe function should work for vectors\
    \ of any type of numbers.\nThe function should work for vectors of any type of\
    \ numbers.\nThe function should work for vectors of any type of numbers.\nThe\
    \ function should work for vectors of any type of numbers.\nThe function should\
    \ work for vectors of any type of numbers.\nThe function should work for vectors\
    \ of any type of numbers.\nThe function should work for vectors of any type of\
    \ numbers.\nThe function should work for vectors of any type of numbers.\nThe\
    \ function should work for vectors of any type of numbers.\nThe function should\
    \ work for vectors of any type of numbers.\nThe function should work for vectors\
    \ of any type of numbers.\nThe function should work for vectors of any type of\
    \ numbers.\nThe function should work for vectors of any type of numbers.\nThe\
    \ function should work for vectors of any type of numbers.\nThe function should\
    \ work for vectors of any type of numbers.\nThe function should work for vectors\
    \ of any type of numbers.\nThe function should work for vectors of any type of\
    \ numbers.\nThe function should work for vectors of any type of numbers.\nThe\
    \ function should work for vectors of any type of numbers.\nThe function should\
    \ work for vectors of any type of numbers.\nThe function should work for vectors\
    \ of any type of numbers.\nThe function should work for vectors of any type of\
    \ numbers.\nThe function should work for vectors of any type of numbers.\nThe\
    \ function should work for vectors of any type of numbers.\nThe function should\
    \ work for vectors of any type of numbers.\nThe function should work for vectors\
    \ of any type of numbers.\nThe function should work for vectors of any type of\
    \ numbers.\nThe function should work for vectors of any type of numbers.\nThe\
    \ function should work for vectors of any type of numbers.\nThe function should\
    \ work for vectors of any type of numbers.\nThe function should work for vectors\
    \ of any type of numbers.\nThe function should work for vectors of any type of\
    \ numbers.\nThe function should work for vectors of any type of numbers.\nThe\
    \ function should work for vectors of ", "    string_sequence = \"\"\n    for\
    \ i = n-1, 0, -1 do string_sequence = string_sequence + string_sequence(i) end\n\
    \    return string_sequence\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of characters in the string.\nHint: Use length()", "    \n    string\
    \ = \"\"\n    \n    for i = 1 to n do\n        string = string + \" \" + i\n \
    \   end\n    \n    return string\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector of integers\
    \ and returns the sum of the integers squared. \nFor example, \n>>> square_vector([1,2,3])\n\
    [1,2,3]\n>>> square_vector([1,2])\n[1,4,9]\n>>> square_vector([1,2])\n[1,4,9]\n\
    >>> square_vector([1,2,3])\n[1,2,3]\n>>> square_vector([1,2])\n[1,4,9]\n>>> square_vector([1,2,3])\n\
    [1,2,3]\n>>> square_vector([1,2])\n[1,4,9]\n>>> square_vector([1,2,3])\n[1,2,3]\n\
    >>> square_vector([1,2])\n[1,4,9]\n>>> square_vector([1,2,3])\n[1,2,3]\n>>> square_vector([1,2])\n\
    [1,4,9]\n>>> square_vector([1,2,3])\n[1,2,3]\n>>> square_vector([1,2])\n[1,4,9]\n\
    >>> square_vector([1,2,3])\n[1,2,3]\n>>> square_vector([1,2])\n[1,4,9]\n>>> square_vector([1,2,3])\n\
    [1,2,3]\n>>> square_vector([1,2])\n[1,4,9]\n>>> square_vector([1,2,3])\n[1,2,3]\n\
    >>> square_vector([1,2])\n[1,4,9]\n>>> square_vector([1,2,3])\n[1,2,3]\n>>> square_vector([1,2])\n\
    [1,4,9]\n>>> square_vector([1,2,3])\n[1,2,3]\n>>> square_vector([1,2])\n[1,4,9]\n\
    >>> square_vector([1,2,3])\n[1,2,3]\n>>> square_vector([1,2])\n[1,4,9]\n>>> square_vector([1,2,3])\n\
    [1,2,3]\n>>> square_vector([1,2])\n[1,4,9]\n>>> square_vector([1,2,3])\n[1,2,3]\n\
    >>> square_vector([1,2])\n[1,4,9]\n>>> square_vector([1,2,3])\n[1,2,3]\n>>> square_vector([1,2])\n\
    [1,4,9]\n>>> square_vector([1,2,3])\n[1,2,3]\n>>> square_vector([1,2])\n[1,4,9]\n\
    >>> square_vector([1,2,3])\n[1,2,3]\n>>> square_vector([1,2])\n[1,4,9]\n>>> square_vector([1,2,3])\n\
    [1,2,3]\n>>> square_vector([1,2])\n[1,4,9]\n>>> square_vector([1,2,3])\n[1,2,3]\n\
    >>> square_vector([1,2])\n[1,4,9]\n>>> square_vector([1,2,3])\n[1,2,3]\n", " \
    \   string = \"\"\n    for i = 1:n\n        string = string + \" \" + i\n    end\n\
    \    return string\nend", "    \n    string_seq = \"\"\n    for i = 1:n\n    \
    \    string_seq = string_seq + i\n    end\n    return string_seq\nend\n</cell>\n\
    <code language=julia-1.5>\nstring_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string as input and returns the string with all the\
    \ characters in lower case. \nHint: Use lowercase()", "    string_seq = \"\"\n\
    \    for i = 1:n\n        string_seq = string_seq + string(i)\n    end\n    return\
    \ string_seq\nend", "    \n    string = \"\"\n    for i = 1 to n do\n        string\
    \ = string + \" \" + to_string(i)\n    end\n    return string\nend\n</cell>\n\
    <code language=julia-1.5>\nstring_sequence(0)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise: Write a function that takes a string\
    \ and returns the number of characters in the string.\nHint: Use length()", " \
    \   \" Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\"\n    \n    \" Initialize a string variable with an empty string.\"\
    \n    \" Initialize a variable i to 0.\"\n    \" Initialize a variable j to 1.\"\
    \n    \" Initialize a variable k to n.\"\n    \" Initialize a variable l to n.\"\
    \n    \" Initialize a variable m to n.\"\n    \" Initialize a variable n to n.\"\
    \n    \" Initialize a variable o to n.\"\n    \" Initialize a variable p to n.\"\
    \n    \" Initialize a variable q to n.\"\n    \" Initialize a variable r to n.\"\
    \n    \" Initialize a variable s to n.\"\n    \" Initialize a variable t to n.\"\
    \n    \" Initialize a variable u to n.\"\n    \" Initialize a variable v to n.\"\
    \n    \" Initialize a variable w to n.\"\n    \" Initialize a variable x to n.\"\
    \n    \" Initialize a variable y to n.\"\n    \" Initialize a variable z to n.\"\
    \n    \" Initialize a variable a to n.\"\n    \" Initialize a variable b to n.\"\
    \n    \" Initialize a variable c to n.\"\n    \" Initialize a variable d to n.\"\
    \n    \" Initialize a variable e to n.\"\n    \" Initialize a variable f to n.\"\
    \n    \" Initialize a variable g to n.\"\n    \" Initialize a variable h to n.\"\
    \n    \" Initialize a variable i to n.\"\n    \" Initialize a variable j to n.\"\
    \n    \" Initialize a variable k to n.\"\n    \" Initialize a variable l to n.\"\
    \n    \" Initialize a variable m to n.\"\n    \" Initialize a variable n to n.\"\
    \n    \" Initialize a variable o to n.\"\n    \" Initialize a variable p to n.\"\
    \n    \" Initialize a variable q to n.\"\n    \" Initialize a variable r to n.\"\
    \n    \" Initialize a variable s to n.\"\n    \" Initialize a variable t to n.\"\
    \n    \" Initialize a variable u to n.\"\n    \" Initialize a variable v to n.\"\
    \n    \" Initialize a variable w to n.\"\n    \" Initialize a variable x to n.\"\
    \n    \" Initialize a variable y to n.\"\n    \" Initialize a variable z to n.\"\
    \n    \" Initialize a variable a to n.\"\n    \" Initialize a variable b to n.\"\
    \n    \" Initialize a variable c to n.\"\n    \" Initialize a variable d to n.\"\
    \n    \" Initialize a variable e to n.\"\n    \" ", "    \n    string = \"\"\n\
    \    for i = 1 to n do\n        string = string + string(i)\n    end\n    return\
    \ string\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of characters in the string.", "    \n    string_sequence = \"\"\n    for i\
    \ = 1:n\n        string_sequence = string_sequence + \" \" + i\n    end\n    \n\
    \    return string_sequence\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of characters in that string.\nHint: Use length()", "    \"\"\"Return\
    \ a string containing space-delimited numbers starting from 0 upto n inclusive.\n\
    \    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3\
    \ 4 5'\n    \"\"\"", "    string_seq = String[]\n    for i in 0 .. n\n       \
    \ string_seq.append(i::Int64)\n    return string_seq.join(\" \")\nend\n</cell>\n\
    <code language=julia-1.5>\nstring_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string and returns the number of characters in it.",
  "    if n < 0\n        error(\"n must be positive\")\n    else if n == 0\n     \
    \   return \"0\"\n    else if n == 1\n        return \"1\"\n    else if n == 2\n\
    \        return \"1 2\"\n    else if n == 3\n        return \"1 2 3\"\n    else\
    \ if n == 4\n        return \"1 2 3 4\"\n    else if n == 5\n        return \"\
    1 2 3 4 5\"\n    else if n == 6\n        return \"1 2 3 4 5 6\"\n    else if n\
    \ == 7\n        return \"1 2 3 4 5 6 7\"\n    else if n == 8\n        return \"\
    1 2 3 4 5 6 7 8\"\n    else if n == 9\n        return \"1 2 3 4 5 6 7 8 9\"\n\
    \    else if n == 10\n        return \"1 2 3 4 5 6 7 8 9 10\"\n    else if n ==\
    \ 11\n        return \"1 2 3 4 5 6 7 8 9 10 11\"\n    else if n == 12\n      \
    \  return \"1 2 3 4 5 6 7 8 9 10 11 12\"\n    else if n == 13\n        return\
    \ \"1 2 3 4 5 6 7 8 9 10 11 12 13\"\n    else if n == 14\n        return \"1 2\
    \ 3 4 5 6 7 8 9 10 11 12 13 14\"\n    else if n == 15\n        return \"1 2 3\
    \ 4 5 6 7 8 9 10 11 12 13 14 15\"\n    else if n == 16\n        return \"1 2 3\
    \ 4 5 6 7 8 9 10 11 12 13 14 15 16\"\n    else if n == 17\n        return \"1\
    \ 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17\"\n    else if n == 18\n        return\
    \ \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18\"\n    else if n == 19\n    \
    \    return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\"\n    else if n\
    \ == 20\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\"\
    \n    else if n == 21\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16\
    \ 17 18 19 20 21\"\n    else if n == 22\n        return \"1 2 3 4 5 6 7 8 9 10\
    \ 11 12 13 14 15 16 17 18 19 20 21 22\"\n    else if n == 23\n        return \"\
    1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23\"\n    else if n ==\
    \ 24\n        return \"1 2 3 4 5 6 7 8 ", "    string_seq = \"\"\n    for i =\
    \ 1:n\n        string_seq = string_seq + string(i)\n    end\n    return string_seq\n\
    end\n</cell>\n<code language=julia-1.4>\nstring_sequence(5)\n</cell>\n<code language=julia-1.4>",
  "    string = \"\"\n    for i = 1 to n do\n        string = string + i\n    end\n\
    \    return string\nend\n</cell>\n<code language=julia-1.0>\nstring_sequence(5)\n\
    </cell>\n<text>\nWrite a function that takes a string and returns the number of\
    \ characters in the string.\nHint: Use a for loop.", "    string_sequence = \"\
    \"\n    for i = n-1 downto 1 do\n        string_sequence = string_sequence + \"\
    \ \" + to_string(i)\n    end\n    return string_sequence\nend", "    string =\
    \ \"\"\n    for i = n-1 downto 0 do\n        string = string + \" \" + string(i)\n\
    \    end\n    return string\nend\n</cell>\n<code language=julia-1.1>\nstring_sequence(0)\n\
    </cell>\n<code language=julia-1.1>\nstring_sequence(5)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the first n prime numbers. \nHint: Use a for\
    \ loop to iterate from 2 to n inclusive.\nHint: Use a boolean array to keep track\
    \ of whether a number is prime or not.\nHint: Use a while loop to iterate from\
    \ 2 to n inclusive.\nHint: Use a while loop to iterate from 2 to n inclusive.\n\
    Hint: Use a while loop to iterate from 2 to n inclusive.\nHint: Use a while loop\
    \ to iterate from 2 to n inclusive.\nHint: Use a while loop to iterate from 2\
    \ to n inclusive.\nHint: Use a while loop to iterate from 2 to n inclusive.\n\
    Hint: Use a while loop to iterate from 2 to n inclusive.\nHint: Use a while loop\
    \ to iterate from 2 to n inclusive.\nHint: Use a while loop to iterate from 2\
    \ to n inclusive.\nHint: Use a while loop to iterate from 2 to n inclusive.\n\
    Hint: Use a while loop to iterate from 2 to n inclusive.\nHint: Use a while loop\
    \ to iterate from 2 to n inclusive.\nHint: Use a while loop to iterate from 2\
    \ to n inclusive.\nHint: Use a while loop to iterate from 2 to n inclusive.\n\
    Hint: Use a while loop to iterate from 2 to n inclusive.\nHint: Use a while loop\
    \ to iterate from 2 to n inclusive.\nHint: Use a while loop to iterate from 2\
    \ to n inclusive.\nHint: Use a while loop to iterate from 2 to n inclusive.\n\
    Hint: Use a while loop to iterate from 2 to n inclusive.\nHint: Use a while loop\
    \ to iterate from 2 to n inclusive.\nHint: Use a while loop to iterate from 2\
    \ to n inclusive.\nHint: Use a while loop to iterate from 2 to n inclusive.\n\
    Hint: Use a while loop to iterate from 2 to n inclusive.\nHint: Use a while loop\
    \ to iterate from 2 to n inclusive.\nHint: Use a while loop to iterate from 2\
    \ to n inclusive.\nHint: Use a while loop to iterate from 2 to n inclusive.\n\
    Hint: Use a while loop to iterate from 2 to n inclusive.\nHint: ", "    if n <=\
    \ 0\n        error(\"n must be positive\")\n    else if n == 1\n        return\
    \ \"0\"\n    else\n        return string_sequence(n - 1) + \" \" + (string_sequence(n)\
    \ - 1)\nend\n</cell>\n<code language=julia-1.3>\nstring_sequence(5)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a string as input and returns\
    \ the number of characters in the string.\nHint: Use a for loop to iterate over\
    \ the characters in the string.", "    string_sequence = \"\"\n    for i = n\n\
    \        do\n            string_sequence = string_sequence + \" \" + string(i)\n\
    \        done\n    return string_sequence\n</code>\n<|/ a dscore=2 |>\n<| a tags=julia\
    \ |>\n<code>", "    \" Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\"\n    \n    \" Return an empty string if n is less\
    \ than or equal to 0.\"\n    if n <= 0\n        return \"\"\n    \n    \" Return\
    \ an empty string if n is greater than or equal to 10.\"\n    if n >= 10\n   \
    \     return \"\"\n    \n    \" Return an empty string if n is less than or equal\
    \ to 10.\"\n    if n >= 10\n        return \"\"\n    \n    \" Return an empty\
    \ string if n is less than or equal to 10.\"\n    if n >= 10\n        return \"\
    \"\n    \n    \" Return an empty string if n is less than or equal to 10.\"\n\
    \    if n >= 10\n        return \"\"\n    \n    \" Return an empty string if n\
    \ is less than or equal to 10.\"\n    if n >= 10\n        return \"\"\n    \n\
    \    \" Return an empty string if n is less than or equal to 10.\"\n    if n >=\
    \ 10\n        return \"\"\n    \n    \" Return an empty string if n is less than\
    \ or equal to 10.\"\n    if n >= 10\n        return \"\"\n    \n    \" Return\
    \ an empty string if n is less than or equal to 10.\"\n    if n >= 10\n      \
    \  return \"\"\n    \n    \" Return an empty string if n is less than or equal\
    \ to 10.\"\n    if n >= 10\n        return \"\"\n    \n    \" Return an empty\
    \ string if n is less than or equal to 10.\"\n    if n >= 10\n        return \"\
    \"\n    \n    \" Return an empty string if n is less than or equal to 10.\"\n\
    \    if n >= 10\n        return \"\"\n    \n    \" Return an empty string if n\
    \ is less than or equal to 10.\"\n    if n >= 10\n        return \"\"\n    \n\
    \    \" Return an empty string if n is less than or equal to 10.\"\n    if n >=\
    \ 10\n        return \"\"\n    \n    \" Return an empty string if n is less than\
    \ or equal to 10.\"\n    if n >= 10\n        return \"\"\n    \n    \" Return\
    \ an empty string if n is less than or equal to 10.\"\n    if n >= 10\n      \
    \  return \"\"\n    \n    \" Return an empty string if n is less than or equal\
    \ to 10.\"\n    if n >= 10\n        return \"\"\n    \n    \" Return an empty\
    \ string if n is less than or equal to 10.\"\n    if n >= 10\n        return \"\
    \"\n    \n    \" Return an empty string if n is less than or equal to 10.\"\n\
    \    if n >= 10\n        return \"\"\n    \n    \" Return an empty string if n\
    \ is less than or equal to 10.\"\n    if n >= 10\n        return \"\"\n    \n\
    \    \" Return an empty string if n is less than or equal to 10.", "    if n ==\
    \ 0 \n        return \"0\" \n    else \n        return string_sequence(n-1) +\
    \ \", \" + string_sequence(n) \nend \n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<text>\nExercise 4\nWrite a function that returns the first n prime numbers.\
    \ \nHint: Use a recursive function.\nHint: Use a while loop.\nHint: Use a for\
    \ loop.\nHint: Use a while loop and a counter.\nHint: Use a for loop and a counter.\n\
    Hint: Use a while loop and a counter.\nHint: Use a for loop and a counter.\nHint:\
    \ Use a while loop and a counter.\nHint: Use a for loop and a counter.\nHint:\
    \ Use a while loop and a counter.\nHint: Use a for loop and a counter.\nHint:\
    \ Use a while loop and a counter.\nHint: Use a for loop and a counter.\nHint:\
    \ Use a while loop and a counter.\nHint: Use a for loop and a counter.\nHint:\
    \ Use a while loop and a counter.\nHint: Use a for loop and a counter.\nHint:\
    \ Use a while loop and a counter.\nHint: Use a for loop and a counter.\nHint:\
    \ Use a while loop and a counter.\nHint: Use a for loop and a counter.\nHint:\
    \ Use a while loop and a counter.\nHint: Use a for loop and a counter.\nHint:\
    \ Use a while loop and a counter.\nHint: Use a for loop and a counter.\nHint:\
    \ Use a while loop and a counter.\nHint: Use a for loop and a counter.\nHint:\
    \ Use a while loop and a counter.\nHint: Use a for loop and a counter.\nHint:\
    \ Use a while loop and a counter.\nHint: Use a for loop and a counter.\nHint:\
    \ Use a while loop and a counter.\nHint: Use a for loop and a counter.\nHint:\
    \ Use a while loop and a counter.\nHint: Use a for loop and a counter.\nHint:\
    \ Use a while loop and a counter.\nHint: Use a for loop and a counter.\nHint:\
    \ Use a while loop and a counter.\nHint: Use a for loop and a counter.\nHint:\
    \ Use a while loop and a counter.\nHint: Use a for loop and a counter.\nHint:\
    \ Use a while loop and a counter.\nHint: Use ", "    \n    string = \"\"\n   \
    \ for i = 1:n\n        string = string + \" \" + i\n    end\n    return string\n\
    end\n</cell>\n<code language=julia-1.5>\nstring_sequence(0)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ string as input and returns a string with all the characters in lower case.",
  "    \n    string = \"\"\n    for i = 1:n\n        string = string + \" \" + i\n\
    \    end\n    return string\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a vector of numbers and\
    \ returns a string containing the numbers separated by commas.\ne.g. [1,2,3] ->\
    \ \"1, 2, 3\"\nHint: use the function string_sequence", "    \" Return a string\
    \ containing space-delimited numbers starting from 0 upto n inclusive.\"\n   \
    \ \n    \" Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\"\n    \n    \" Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\"\n    \n    \" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\"\n    \n    \" Return\
    \ a string containing space-delimited numbers starting from 0 upto n inclusive.\"\
    \n    \n    \" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\"\n    \n    \" Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\"\n    \n    \" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\"\n    \n    \" Return\
    \ a string containing space-delimited numbers starting from 0 upto n inclusive.\"\
    \n    \n    \" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\"\n    \n    \" Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\"\n    \n    \" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\"\n    \n    \" Return\
    \ a string containing space-delimited numbers starting from 0 upto n inclusive.\"\
    \n    \n    \" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\"\n    \n    \" Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\"\n    \n    \" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\"\n    \n    \" Return\
    \ a string containing space-delimited numbers starting from 0 upto n inclusive.\"\
    \n    \n    \" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\"\n    \n    \" Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\"\n    \n    \" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\"\n    \n    \" Return\
    \ a string containing space-delimited numbers starting from 0 upto n inclusive.\"\
    \n    \n    \" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\"\n    \n    \" Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\"\n    \n    \" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\"\n    \n    \" Return\
    \ a string containing space-delimited numbers starting from 0 upto n inclusive.\"\
    \n    \n    \" Return a string containing space-delimited numbers starting from\
    \ 0 ", "    string_seq = \"\"\n    for i = n\n        do\n            string_seq\
    \ = string_seq + string(i)\n        end\n    end\n    return string_seq\nend\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(0)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(5)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(100)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(1000)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10000)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(100000)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(1000000)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10000000)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(100000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstring_sequence(1000000000)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10000000000)\n</cell>\n<code language=julia-1.5>\nstring_sequence(100000000000)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(1000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstring_sequence(10000000000000)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(100000000000000)\n</cell>\n<code language=julia-1.5>\nstring_sequence(1000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstring_sequence(100000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstring_sequence(1000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10000000000000000000)\n</cell>\n<code language=julia-1.5>\nstring_sequence(100000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(1000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(100000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(1000000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10000000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(100000000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(1000000000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10000000000000000000000000000)\n\
    </cell>\n<code language=", "    \n    string_sequence = \" \"\n    for i = 1:n\n\
    \        string_sequence = string_sequence + \" \" + i\n    end\n    \n    return\
    \ string_sequence\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns a string containing\
    \ the first n numbers of a Fibonacci sequence. \nThe Fibonacci sequence is defined\
    \ by the recurrence relation:\n$$ Fn = F{n-1} + F_{n-2} $$\nwhere $F_0 = 0$ and\
    \ $F_1 = 1$.", "    string_sequence = String[]\n    for i = 1 to n do\n      \
    \  string_sequence = string_sequence @ [string(i)]\n    return string_sequence\n\
    </code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\nI wrote a function that will do\
    \ what you want (I think)\n<code>", "    if n == 0\n        return \"0\"\n   \
    \ else if n == 1\n        return \"1\"\n    else\n        return string_sequence(n-1)\
    \ + \", \" + string_sequence(n-2) + \", \" + string_sequence(n-3) + \", \" + string_sequence(n-4)\
    \ + \", \" + string_sequence(n-5) \nend\n</cell>\n<code language=julia-1.3>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ number n and returns the number $2^n$. For example, for n=5, the function should\
    \ return $2^5$. Make sure you use recursion to solve this problem.", "    string_seq\
    \ = String[]\n    for i = 1 to n do\n        string_seq.append(i::Int64)\n   \
    \ return string_seq.join(\" \")\nend\n</cell>\n<code language=julia-1.4>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a number n and returns\
    \ the string \"nth term\" where n is an integer between 1 and 20.", "    string_seq\
    \ = String[]\n    for n in 0:n\n        string_seq += String(n)\n    return string_seq\n\
    end\n</cell>\n<code language=julia-1.3>", "    string_seq = \"\"\n    for i =\
    \ 1:n\n        string_seq = string_seq + i\n    end\n    return string_seq\nend\n\
    </cell>\n<code language=julia-1.5>", "    string_seq = \"\"\n    for i = 1:n\n\
    \        string_seq = string_seq + i\n    end\n    return string_seq\nend\n</cell>\n\
    <code language=julia-1.1>\nstring_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the first n prime numbers. \nHint: use an iterator to\
    \ generate prime numbers.", "    \n    string = \"\"\n    for i = 1:n\n      \
    \  string = string + \" \" + i\n    end\n    return string\nend\n</cell>\n<code\
    \ language=julia-1.5>\nstring_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the first n prime numbers. \nThe function should take\
    \ an input n and output a vector of prime numbers from 0 to n-1.\nThe function\
    \ should return nothing if n is less than 2.\nThe function should return nothing\
    \ if n is less than or equal to 0.\nThe function should return nothing if n is\
    \ greater than or equal to 2.", "    string_seq = String[]\n    for x in 0:n\n\
    \        string_seq.append(x)\n    return string_seq.join(\" \")\nend\n</cell>\n\
    <code language=julia-1.4>\nstring_sequence(5)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a string as input and returns the number of characters\
    \ in the string.\nHint: Use length() function", "    string_sequence = \"\"\n\
    \    for i = 1 to n do\n        string_sequence = string_sequence + \" \" + string(i)\n\
    \    end\n    return string_sequence\nend\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 4\nWrite a function that takes a\
    \ string as input and returns the string with all the characters in lower case.",
  "    \"\"\"Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"", "    string_seq = String[]\n    for i in 0 ..\
    \ n\n        string_seq <- string_seq + String(i)\n    return string_seq\nend\n\
    </cell>\n<code language=julia-1.3>\nstring_sequence(5)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns the number of characters\
    \ in the string.\nHint: Use length() function", "    str = \" \"\n    for i =\
    \ 1:n\n        str = str + i\n    end\n    return str\nend\n</cell>\n<code language=julia-1.3>\n\
    string_sequence(5)\n</cell>\n<text>\nWrite a function that takes a string and\
    \ returns the string with all the characters in reverse order.\ne.g. \"hello\"\
    \ => \"olleh\"", "    \n    string = \"\"\n    for i = 1:n\n        string = string\
    \ + i\n    end\n    return string\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector of numbers and\
    \ returns the sum of the numbers. \nThe function should work for vectors of any\
    \ length.\nHint: use sum.", "    \n    string = \"\"\n    for i = 1:n\n      \
    \  string = string + \" \" + string(i)\n    end\n    return string\nend\n</cell>\n\
    <code language=julia-1.5>\nstring_sequence(5)\n</cell>\n<text>\nExercise 4\nWrite\
    \ a function that takes a string and returns the number of characters in the string.\n\
    Hint: Use a for loop to iterate over the string.", "    \n    string = \"\"\n\
    \    for i = 1 to n do\n        string = string + \" \" + to_string(i)\n    end\n\
    \    return string\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nThe function string_sequence is now available in the Julia REPL.",
  "    \n    string_seq = String[]()\n    for i = 1:n\n        string_seq.append(i::Int64)\n\
    \    return string_seq.join(\" \")\nend\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ string and returns the number of words in the string.", "    \"\"\"Return a\
    \ string containing space-delimited numbers starting from 0 upto n inclusive.\n\
    \    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3\
    \ 4 5'\n    \"\"\"", "    string = \"\"\n    for i = 1:n\n        string = string\
    \ + \" \" + i\n    end\n    return string\n</code>\n<|/ a tags=julia,string |>\n\
    <| c |>\n`string_sequence` can be written more concisely as `join`.\n<|/ c |>\n\
    <| c |>\nThanks for pointing that out. I was trying to be as close to the original\
    \ as possible.\n<|/ c |>\n<| a tags=julia,string |>\nIn Julia 1.5 you can use\
    \ the string interpolation syntax:\n<code>\njulia> \"Hello $world\"\n\"Hello world\"\
    \n</code>\n<|/ a dscore=4 |>\n<| c |>\nThis doesn't work for me. `julia> \"Hello\
    \ $world\"\nERROR: syntax: invalid expression\n in expression starting at line\
    \ 1`\n<|/ c |>\n<| c |>\nThis doesn't work for me either. `julia> \"Hello $world\"\
    \nERROR: syntax: invalid expression\n in expression starting at line 1`\n<|/ c\
    \ |>\n<| c |>\nThis doesn't work for me either. `julia> \"Hello $world\"\nERROR:\
    \ syntax: invalid expression\n in expression starting at line 1`\n<|/ c |>\n<|\
    \ c |>\nThis doesn't work for me either. `julia> \"Hello $world\"\nERROR: syntax:\
    \ invalid expression\n in expression starting at line 1`\n<|/ c |>\n<| c |>\n\
    This doesn't work for me either. `julia> \"Hello $world\"\nERROR: syntax: invalid\
    \ expression\n in expression starting at line 1`\n<|/ c |>\n<| a dscore=4 |>\n\
    In Julia 1.5 you can use the string interpolation syntax:\n<code>\njulia> \"Hello\
    \ $world\"\n\"Hello world\"\n</code>\n<|/ a tags=julia,string |>\n<| a dscore=4\
    \ |>\nIn Julia 1.5 you can use the string interpolation syntax:\n<code>\njulia>\
    \ \"Hello $world\"\n\"Hello world\"\n</code>\n<|/ a tags=julia,string |>\n<| a\
    \ dscore=3 |>\nIn Julia 1.5 you can use the string interpolation syntax:\n<code>\n\
    julia> \"Hello $world\"\n\"Hello world\"\n</code>\n<|/ a tags=julia,string |>\n\
    <| a dscore=3 |>\nIn Julia 1.5 you can use the string interpolation syntax:\n\
    <code>\njulia> \"Hello $world\"\n\"Hello world\"\n</code>\n<|/ a tag", "    string\
    \ = \"\"\n    for i = n\n    do\n        string += i\n        i += 1\n    done\n\
    \    return string\n</code>\n<|/ a tags=julia |>\n<| a dscore=2 |>\n<code>", " \
    \   \n    string = \"\"\n    for i = 1:n\n        string = string + \" \" + i\n\
    \    end\n    return string\nend", "    \n    string = \"\"\n    \n    for i =\
    \ 1:n\n        string = string + string(i)\n    \n    return string\n</code>\n\
    <|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>", "    \" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\"\n    if n == 0 \n\
    \        \" Return an empty string.\"\n        return \"\"\n    \" Return string\
    \ containing space-delimited numbers starting from 0 upto n inclusive.\"\n   \
    \ return \" \".(string_sequence(n-1))\nend\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 4\nWrite a function that takes a\
    \ string and returns the number of characters in the string.\nHint: Use a for\
    \ loop to iterate over the string.", "    string_seq = \"\"\n    for i = 1:n\n\
    \        string_seq = string_seq + i\n    end\n    return string_seq\nend\n</cell>\n\
    <code language=julia-1.3>\nstring_sequence(5)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a vector of strings and returns a vector of integers representing\
    \ the number of times each string appears in the vector.\nFor example, if the\
    \ input vector is [\"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\"\
    , \"hello\", \"world\"] then the output vector should be [2, 2, 2, 2, 2, 1, 1,\
    \ 1].\nHint: Use a for loop to iterate over the strings in the vector.", "   \
    \ string_seq = String[]\n    for i in 0 .. n\n        string_seq.append(i::Int64)\n\
    \    return string_seq.join(\" \")\nend\n</cell>\n<code language=julia-1.4>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 3\nWrite a function that takes a\
    \ vector of strings as input and returns a vector of integers containing the number\
    \ of times each string appears in the input vector.\nFor example, if the input\
    \ vector is [\"a\", \"b\", \"c\", \"a\", \"b\", \"c\"], the output vector should\
    \ be [1, 1, 2, 1, 1, 2].", "    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    string_sequence = String[]\n    for i = 1 to n do\n        string_sequence\
    \ = string_sequence @ [String(i)]\n    return string_sequence\n</code>\n<|/ a\
    \ tags=julia |>\n<| a tags=julia |>\n<code>", "    string_seq = String[]\n   \
    \ for i = 1:n\n        string_seq[i] = i\n    end\n    return string_seq.join(\"\
    \ \")\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector of strings and returns\
    \ a vector of integers representing the number of times each string appears in\
    \ the vector.\nFor example, if the input vector is [\"a\", \"a\", \"b\", \"b\"\
    , \"c\"], then the output vector should be [1, 1, 2, 1].", "    string_seq = String[]\n\
    \    for i in 0 .. n\n        string_seq.append(i::Int64)\n    return string_seq.join(\"\
    \ \")\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of words in the string.\nWrite a function that takes a string and returns the\
    \ number of characters in the string.\nWrite a function that takes a string and\
    \ returns the number of lines in the string.\nWrite a function that takes a string\
    \ and returns the number of characters in the string that are not spaces.\nWrite\
    \ a function that takes a string and returns the number of words in the string\
    \ that are not spaces.\nWrite a function that takes a string and returns the number\
    \ of characters in the string that are not spaces.\nWrite a function that takes\
    \ a string and returns the number of lines in the string that are not spaces.\n\
    Write a function that takes a string and returns the number of words in the string\
    \ that are not spaces.\nWrite a function that takes a string and returns the number\
    \ of characters in the string that are not spaces.\nWrite a function that takes\
    \ a string and returns the number of lines in the string that are not spaces.\n\
    Write a function that takes a string and returns the number of words in the string\
    \ that are not spaces.\nWrite a function that takes a string and returns the number\
    \ of characters in the string that are not spaces.\nWrite a function that takes\
    \ a string and returns the number of lines in the string that are not spaces.\n\
    Write a function that takes a string and returns the number of words in the string\
    \ that are not spaces.\nWrite a function that takes a string and returns the number\
    \ of characters in the string that are not spaces.\nWrite a function that takes\
    \ a string and returns the number of lines in the string that are not spaces.\n\
    Write a function that takes a string and returns the number of words in the string\
    \ that are not spaces.\nWrite a function that takes a string and returns the number\
    \ of characters in the string that are not spaces.\nWrite a function that takes\
    \ a string and returns the number of lines in the string that are not spaces.\n\
    Write a function that takes a string and returns the number of words in the string\
    \ that are not spaces.\nWrite a function that takes a string and returns the number\
    \ of characters in the string that are not spaces.\nWrite a function that takes\
    \ a string and returns the number of lines in the string that are not spaces.\n\
    Write a function that takes a string and returns the number of words in the string\
    \ that are not spaces.\nWrite a function that takes a string and returns the number\
    \ of characters in the string that are not spaces.\nWrite a function that takes\
    \ a string and returns the number of lines in the string that are not spaces.\n\
    Write a function that takes a string and returns the number of words in the string\
    \ that are not spaces.\nWrite a function that takes a string and returns the number\
    \ of characters in the string that are not spaces.\nWrite a function that takes\
    \ a string and returns the number of lines in the string that are not spaces.\n\
    Write a function that takes a string and returns the number of words in the string\
    \ that are not spaces.\nWrite a function that takes a string and returns the number\
    \ of ", "    string_seq = String[]\n    for i in 0:n\n        string_seq.append(i.toString())\n\
    \    return string_seq.join(\" \")\nend\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ string and returns the number of characters in the string.\nHint: Use a for\
    \ loop to iterate over the string.", "    if n <= 0\n        error(\"n must be\
    \ positive\")\n    else if n > 0\n        string_sequence(n - 1) + \" \" ++ string_sequence(n)\n\
    \    else\n        error(\"n must be positive\")\n    end\nend\n</cell>\n<code\
    \ language=julia-1.3>\nstring_sequence(5)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a vector of numbers and returns the sum of the numbers\
    \ in the vector.\nFor example, if the vector is [1,2,3,4,5], the function should\
    \ return 15.\nHint: use the reduce function.", "    string_sequence = \"\"\n \
    \   for i = n\n    do\n        string_sequence = string_sequence + \" \" + string(i)\n\
    \    done\n    return string_sequence\n</code>\n<|/ a |>\n<| c |>\nThis answer\
    \ would be better if it explained what it does and why it works.\n<|/ c |>\n<|\
    \ a tags=julia |>\n<code>", "    \n    string = \"\"\n    for i = 1:n\n      \
    \  string = string + \" \" + i\n    end\n    return string\nend\n</cell>\n<code\
    \ language=julia-1.5>\nstring_sequence(5)\n</cell>\n<text>\nExercise 1\nWrite\
    \ a function that returns the first n prime numbers. \nHint: Use a for loop and\
    \ a prime number generator to generate prime numbers.", "    \n    string_seq\
    \ = \"\"\n    for i = 1:n\n        string_seq = string_seq + i\n    end\n    return\
    \ string_seq\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a number n and returns the string\
    \ \"n\" repeated n times.\n>>> string_sequence(5)\n'5'\n>>> string_sequence(10)\n\
    '5 '\n>>> string_sequence(0)\n'0'\n>>> string_sequence(-1)\n'-1'\n>>> string_sequence(-10)\n\
    '-10'\n>>> string_sequence(-100)\n'-100'\n>>> string_sequence(-1000)\n'-1000 '\n\
    >>> string_sequence(-1000000000)\n'-1000000000'\n>>> string_sequence(-1000000000000)\n\
    '-1000000000000'\n>>> string_sequence(-1000000000000000)\n'-1000000000000000'\n\
    >>> string_sequence(-1000000000000000000)\n'-1000000000000000000'\n>>> string_sequence(-100000000000000000000)\n\
    '-100000000000000000000'\n>>> string_sequence(-10000000000000000000000)\n'-10000000000000000000000'\n\
    >>> string_sequence(-1000000000000000000000000)\n'-1000000000000000000000000'\n\
    >>> string_sequence(-100000000000000000000000000)\n'-100000000000000000000000000'\n\
    >>> string_sequence(-10000000000000000000000000000)\n'-10000000000000000000000000000'\n\
    >>> string_sequence(-1000000000000000000000000000000)\n'-1000000000000000000000000000000'\n\
    >>> string_sequence(-1000000000000000000000000000000000)\n'-1000000000000000000000000000000000'\n\
    >>> string_sequence(-10000000000000000000000000000000000000000)\n'-100000000000000000000000000000000'\n\
    >>> string_sequence(-1000000000000000000000000000000000000000)\n'-1000000000000000000000000000000000'\n\
    >>> string_sequence(-1000000000000000000000000000000000000000)\n'-1000000000000000000000000000000000'\n\
    >>> string_sequence(-100000000000000000000000000000000000000000)\n'-1000000000000000000000000000000000'\n\
    >>> string_sequence(-10000000000000000000000000000000000000000)\n'-100000000000000000000000000000000'\n\
    >>> string_sequence(-1000000000000000000000000000000000000000)\n'-1000000000000000000000000000000000'\n\
    >>> string_sequence(-1000000000000000000000000000000000000000)\n'-1000000000000000000000000000000000'\n\
    >>> string_sequence(-100000000000000000000000000000000000000000)\n'-1000000000000000000000000000000000'\n\
    >>> string_sequence(-10000000000000000000000000000000000000000)\n'-100000000000000000000000000000000'\n\
    >>> string_sequence(-1000000000000000000000000000000000000000)\n'-1000000000000000000000000000000000'\n\
    >>> string_sequence(-1000000000000000000000000000000000000000)\n'-1000000000000000000000000000000000'\n\
    >>> string_sequence(-100000000000000000000000000000000000000000)\n'-1000000000000000000000000000000000'\n\
    >>> string_sequence(-10000000000000000000000000000000000000000)\n'-100000000000000000000000000000000'\n\
    >>> string_sequence(-100000000000000000000000000", "    string_sequence = \"\"\
    \n    for i = 1:n\n        string_sequence = string_sequence + \" \" + to_string(i)\n\
    \    end\n    return string_sequence\nend\n</cell>\n<code language=julia-1.4>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 3\nWrite a function that takes a\
    \ string as input and returns the number of characters in the string.\nHint: Use\
    \ length() function", "    string_seq = String[]\n    for i = 1:n\n        push!(string_seq,string(i))\n\
    \    end\n    return join(\" \",string_seq)\nend\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the first n prime numbers. Write a test to see if it works.", "    if n <= 0\n\
    \        error(\"n must be positive\")\n    else if n == 1\n        return \"\
    0\"\n    else\n        string_sequence(n - 1) + \" \" ++ string_sequence(n - 1)\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that takes a number n and returns\
    \ the string \"n!\".\nFor example, string_sequence(3) should return \"3!\".",
  "    string_seq = String[]\n    for i = 1:n\n        push!(string_seq,string(i))\n\
    \    end\n    return join(string_seq,\" \")\nend\n</cell>\n<code language=julia-1.4>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ string as input and returns a string with all the characters in lower case and\
    \ spaces replaced by underscores.", "    string_seq = \"\"\n    for i = 1:n\n\
    \        string_seq = string_seq + i\n    end\n    return string_seq\nend\n</cell>\n\
    <code language=julia-1.3>\nstring_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a number n and returns the string \"n!\".\nWrite a function\
    \ that takes a number n and returns the string \"n!+n\"\nWrite a function that\
    \ takes a number n and returns the string \"n!+n!+n\"\nWrite a function that takes\
    \ a number n and returns the string \"n!+n!+n!+n\"\nWrite a function that takes\
    \ a number n and returns the string \"n!+n!+n!+n!+n\"\nWrite a function that takes\
    \ a number n and returns the string \"n!+n!+n!+n!+n!+n\"\nWrite a function that\
    \ takes a number n and returns the string \"n!+n!+n!+n!+n!+n!+n\"\nWrite a function\
    \ that takes a number n and returns the string \"n!+n!+n!+n!+n!+n!+n!+n\"\nWrite\
    \ a function that takes a number n and returns the string \"n!+n!+n!+n!+n!+n!+n!+n!+n\"\
    \nWrite a function that takes a number n and returns the string \"n!+n!+n!+n!+n!+n!+n!+n!+n!+n\"\
    \nWrite a function that takes a number n and returns the string \"n!+n!+n!+n!+n!+n!+n!+n!+n!+n\"\
    \nWrite a function that takes a number n and returns the string \"n!+n!+n!+n!+n!+n!+n!+n!+n!+n!+n\"\
    \nWrite a function that takes a number n and returns the string \"n!+n!+n!+n!+n!+n!+n!+n!+n!+n!+n\"\
    \nWrite a function that takes a number n and returns the string \"n!+n!+n!+n!+n!+n!+n!+n!+n!+n!+n!+n\"\
    \nWrite a function that takes a number n and returns the string \"n!+n!+n!+n!+n!",
  "    \n    string = \"\"\n    for i = 1:n\n        string = string + \" \" + string(i)\n\
    \    end\n    return string\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that converts a number to a string\
    \ and returns the string in reverse order. For example, convert_number(10) should\
    \ return \"010\".", "    \n    string = \"\"\n    for i = n\n    do\n        string\
    \ += i\n        i += 1\n    done\n    return string\n</code>\n<|/ a |>\n<| c |>\n\
    This answer does not explain what it does, and does not explain why it works.\
    \ Please add some explanation.\n<|/ c |>\n<| c |>\nI added some explanation.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>", "    string_seq = \"\"\n    for i = 1:n\n\
    \        string_seq = string_seq + string(i)\n    end\n    return string_seq\n\
    end\n</cell>\n<code language=julia-1.5>", "    string_seq = String[]\n    for\
    \ i = 1:n\n        string_seq += String(i)\n    end\n    return string_seq\nend\n\
    </cell>\n<code language=julia-1.0>", "    \n    string = \"\"\n    \n    for i\
    \ = 1 to n do\n        string = string + \" \" + i\n    \n    return string\n\
    </code>\n<|/ a tags=julia,string |>\n<| a dscore=2 |>\nIn Julia 1.5 you can use\
    \ the string interpolation syntax to achieve this easily:\n<code>\njulia> \"$(0:5)\"\
    \n\"0 1 2 3 4 5\"\n</code>\n<|/ a tags=julia,string |>\n<| a dscore=2 |>\nIn Julia\
    \ 1.5 you can use the string interpolation syntax to achieve this easily:\n<code>\n\
    julia> \"$(0:5)\"\n\"0 1 2 3 4 5\"\n</code>\n<|/ a tags=julia,string |>\n<| a\
    \ tags=julia,string |>\nIn Julia 1.5 you can use the string interpolation syntax\
    \ to achieve this easily:\n<code>\njulia> \"$(0:5)\"\n\"0 1 2 3 4 5\"\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=julia,string |>\nIn Julia 1.5 you can use the string\
    \ interpolation syntax to achieve this easily:\n<code>\njulia> \"$(0:5)\"\n\"\
    0 1 2 3 4 5\"\n</code>\n<|/ a dscore=2 |>\n<| a tags=julia,string |>\nIn Julia\
    \ 1.5 you can use the string interpolation syntax to achieve this easily:\n<code>\n\
    julia> \"$(0:5)\"\n\"0 1 2 3 4 5\"\n</code>\n<|/ a dscore=2 |>\n<| a tags=julia,string\
    \ |>\nIn Julia 1.5 you can use the string interpolation syntax to achieve this\
    \ easily:\n<code>\njulia> \"$(0:5)\"\n\"0 1 2 3 4 5\"\n</code>\n<|/ a dscore=2\
    \ |>\n<| a tags=julia,string |>\nIn Julia 1.5 you can use the string interpolation\
    \ syntax to achieve this easily:\n<code>\njulia> \"$(0:5)\"\n\"0 1 2 3 4 5\"\n\
    </code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\nIn Julia 1.5 you can use the string\
    \ interpolation syntax to achieve this easily:\n<code>\njulia> \"$(0:5)\"\n\"\
    0 1 2 3 4 5\"\n</code>\n<|/ a tags=julia,string |>\n<| a tags=julia,string |>\n\
    In Julia 1.5 you can use the string interpolation syntax to achieve this easily:\n\
    <code>\njulia> \"$(0:5)", "    \n    string = \"\"\n    \n    for i = 1 to n do\n\
    \        string = string + \" \" + i\n    \n    return string\n</code>\n<|/ a\
    \ dscore=0 |>\n<| a tags=julia,string |>\n<code>", "    \n    string = \"\"\n\
    \    for i = 1:n\n        string = string + \" \" + i\n    end\n    return string\n\
    end\n</cell>\n<code language=julia-1.5>\nstring_sequence(0)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(5)\n</cell>\n<code language=julia-1.5>", "    string_seq = String[]\n\
    \    for i in 0 .. n-1 do\n        string_seq[i] = i\n    return string_seq.join(\"\
    \ \")\nend\n</cell>\n<code language=julia-1.4>\nstring_sequence(5)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a string and returns the number\
    \ of characters in it.", "    \n    string = \"\"\n    for i = n\n    do\n   \
    \     string += i\n        i += 1\n    done\n    \n    return string\nend\n</cell>\n\
    <code language=julia-1.5>\nstring_sequence(0)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ string as input and returns a string with all the characters in lower case.",
  "    string_sequence = \"\"\n    for k in 0..n-1\n        string_sequence = string_sequence\
    \ + \" \" + string_sequence(k)\n    end\n    string_sequence\nend\n</cell>\n<code\
    \ language=julia-1.5>\nstring_sequence(5)\n</cell>\n<code language=julia-1.5>"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
