name: HumanEval_132_is_nested
language: julia
prompt: "\"\"\"\n    Create a function that takes a string as input which contains\
  \ only square brackets.\n    The function should return True if and only if there\
  \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
  \ is nested.\n\n    is_nested('[[]]') \u279E True\n    is_nested('[]]]]]]][[[[[]')\
  \ \u279E False\n    is_nested('[][]') \u279E False\n    is_nested('[]') \u279E False\n\
  \    is_nested('[[][]]') \u279E True\n    is_nested('[[]][[') \u279E True\n    \"\
  \"\"\nfunction is_nested(string::String)::Bool \n"
tests: "using Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"\
  [[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
  [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
  ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\"\
  ) == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") ==\
  \ false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\")\
  \ == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") ==\
  \ false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
completions: ["    \n    stack = Stack()\n    stack.append(0)\n    \n    for c in\
    \ string:\n        if c == '[':\n            stack.append(1)\n        elif c ==\
    \ ']':\n            stack.pop()\n        elif stack.isEmpty or stack.pop() !=\
    \ 1:\n            return False\n    \n    return stack.isEmpty\n\"\"\"\n    Create\
    \ a function that takes a string as input which contains only square brackets.\n\
    \    The function should return True if and only if there is a valid subsequence\
    \ of brackets \n    where at least one bracket in the subsequence is nested.",
  "    \n    brackets = string.count(\"[\")\n    squares = string.count(\"]\")\n \
    \   \n    if brackets == squares \n        then true\n        else false\n   \
    \ end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Create a function\
    \ that takes a string as input which contains only square brackets.\n    The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    \    where at least one bracket in the subsequence is nested.", "    \n    stack::Vector[String]\
    \ = Vector.empty\n    \n    for c in string\n        if c == '['\n           \
    \ push!(stack, c)\n        elif c == ']'\n            if !isempty(stack)\n   \
    \             pop!(stack)\n            else\n                return false\n  \
    \          end\n        end\n    end\n    \n    return isempty(stack)\nend\n</cell>\n\
    <code language=julia-1.5>\nis_nested(\"[][]\")\n</cell>\n<code language=julia-1.5>\n\
    is_nested(\"[]\")\n</cell>\n<code language=julia-1.5>\nis_nested(\"[[][]]\")\n\
    </cell>\n<code language=julia-1.5>\nis_nested(\"[[]][[\")\n</cell>\n<code language=julia-1.5>\n\
    is_nested(\"[[]]\")\n</cell>\n<code language=julia-1.5>\nis_nested(\"[[][]]\"\
    )\n</cell>\n<code language=julia-1.5>\nis_nested(\"[[][]]\")\n</cell>\n<code language=julia-1.5>\n\
    is_nested(\"[[][]]\")\n</cell>\n<code language=julia-1.5>\nis_nested(\"[[][]]\"\
    )\n</cell>\n<code language=julia-1.5>\nis_nested(\"[[][]]\")\n</cell>\n<code language=julia-1.5>\n\
    is_nested(\"[[][]]\")\n</cell>\n<code language=julia-1.5>\nis_nested(\"[[][]]\"\
    )\n</cell>\n<code language=julia-1.5>\nis_nested(\"[[][]]\")\n</cell>\n<code language=julia-1.5>\n\
    is_nested(\"[[][]]\")\n</cell>\n<code language=julia-1.5>\nis_nested(\"[[][]]\"\
    )\n</cell>\n<code language=julia-1.5>\nis_nested(\"[[][]]\")\n</cell>\n<code language=julia-1.5>\n\
    is_nested(\"[[][]]\")\n</cell>\n<code language=julia-1.5>\nis_nested(\"[[][]]\"\
    )\n</cell>\n<code language=julia-1.5>\nis_nested(\"[[][]]\")\n</cell>\n<code language=julia-1.5>\n\
    is_nested(\"[[][]]\")\n</cell>\n<code language=julia-1.5>\nis_nested(\"[[][]]\"\
    )\n</cell>\n<code language=julia-1.5>\nis_nested(\"[[][]]\")\n</cell>\n<code language=julia-1.5>\n\
    is_nested(\"[[][]]\")\n</cell>\n<code language=julia-1.5>\nis_nested(\"[[][]]\"\
    )\n</cell>\n<code language=julia-1.5", "    \n    stack::Vector{String} = []\n\
    \    \n    for c in string\n        if c == '['\n            push!(stack, c)\n\
    \        elseif c == ']'\n            if isempty(stack)\n                return\
    \ false\n            else\n                pop!(stack)\n            end\n    \
    \    else\n            if isempty(stack)\n                return false\n     \
    \       else\n                pop!(stack)\n            end\n        end\n    end\n\
    \    \n    return isempty(stack)\nend\n</cell>\n<code language=julia-1.5>\n\"\"\
    \"\n    Create a function that takes a string as input which contains only square\
    \ brackets.\n    The function should return True if and only if there is a valid\
    \ subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.", "    \n    stack = Stack()\n    \n    for c in string:\n      \
    \  if c == '[':\n            stack.push(c)\n        elif c == ']':\n         \
    \   if stack.isEmpty():\n                return False\n            elif stack.pop()\
    \ != '[':\n                return False\n            else:\n                stack.pop()\n\
    \        elif stack.isEmpty():\n            return False\n        elif stack.pop()\
    \ != '[':\n            return False\n        else:\n            stack.push(c)\n\
    \    \n    return stack.isEmpty()\n</cell>\n<code language=julia-1.5>\nis_nested
  "    \n    stack = Stack()\n    stack.append(0)\n    \n    for c in string:\n  \
    \      if c == '[':\n            stack.append(1)\n        elif c == ']':\n   \
    \         stack.pop()\n        elif stack.isEmpty == True:\n            return\
    \ False\n        else:\n            stack.pop()\n            \n    return stack.isEmpty\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nThis does not provide an answer to the question.\
    \ To critique or request clarification from an author, leave a comment below their\
    \ post. - [From Review](/review/low-quality-posts/26670244)\n<|/ c |>\n<| c |>\n\
    I believe this does provide an answer to the question. He wants to know if there\
    \ is a way to check if a string contains any nested brackets. He also wants to\
    \ know if there is a way to check if a string contains any nested brackets. He\
    \ also wants to know if there is a way to check if a string contains any nested\
    \ brackets. He also wants to know if there is a way to check if a string contains\
    \ any nested brackets. He also wants to know if there is a way to check if a string\
    \ contains any nested brackets. He also wants to know if there is a way to check\
    \ if a string contains any nested brackets. He also wants to know if there is\
    \ a way to check if a string contains any nested brackets. He also wants to know\
    \ if there is a way to check if a string contains any nested brackets. He also\
    \ wants to know if there is a way to check if a string contains any nested brackets.\
    \ He also wants to know if there is a way to check if a string contains any nested\
    \ brackets. He also wants to know if there is a way to check if a string contains\
    \ any nested brackets. He also wants to know if there is a way to check if a string\
    \ contains any nested brackets. He also wants to know if there is a way to check\
    \ if a string contains any nested brackets. He also wants to know if there is\
    \ a way to check if a string contains any nested brackets. He also wants to know\
    \ if there is a way to check if a string contains any nested brackets. He also\
    \ wants to know if there is a way to check if a string contains any nested brackets.\
    \ He also wants to know if there is a way to check if a string contains any nested\
    \ brackets. He also wants to know if there is a way to check if a string contains\
    \ any nested brackets. He also wants to know if there is a way to check if a string\
    \ contains any nested brackets. He also wants to know if there is a way to check\
    \ if a string contains any nested brackets. He also wants to know if there is\
    \ a way to check if a string contains any nested brackets. He also wants to know\
    \ if there is a way to check if a string contains any nested brackets. He also\
    \ wants to know if there is a way to check if a string contains any nested brackets.\
    \ H", "    \n    stack = Stack()\n    \n    for c in string:\n        if c ==\
    \ '[':\n            stack.push(c)\n        elif c == ']':\n            if stack.isEmpty():\n\
    \                return False\n            elif stack.pop() != '[':\n        \
    \        return False\n        elif stack.isEmpty():\n            return False\n\
    \    \n    return stack.isEmpty()\n</code>\n<|/ a tags=haskell,functional-programming\
    \ |>\n<| c |>\nThis doesn't work if there are multiple brackets in the string.\
    \ For example, it returns `True` for `is_nested
  "    \n    stack = Stack()\n    \n    for c in string:\n        if c == '[':\n \
    \           stack.push(c)\n        elif c == ']':\n            if stack.isEmpty():\n\
    \                return False\n            elif stack.pop() != '[':\n        \
    \        return False\n            else:\n                stack.pop()\n      \
    \  elif stack.isEmpty():\n            return False\n        else:\n          \
    \  stack.pop()\n            stack.push(c)\n            \n    return stack.isEmpty()\n\
    </cell>\n<cell>\nis_nested('[[]]') \u279E True\nis_nested('[]]]]]]][[[[[]') \u279E\
    \ False\nis_nested('[][]') \u279E False\nis_nested('[]') \u279E False\nis_nested('[[][]]')\
    \ \u279E True\nis_nested('[[]][[') \u279E True\n</cell>\n<text>\nExercise\nWrite\
    \ a function that takes a string as input and returns a string with all the brackets\
    \ removed. \nThe function should return '[]' if the input string is empty. \n\
    The function should return
  "    \n    stack = Stack()\n    \n    for char in string:\n        if char == '[':\n\
    \            stack.push(char)\n        elif char == ']':\n            stack.pop()\n\
    \        elif char == '[' or char == ']':\n            if stack.top == '[':\n\
    \                stack.pop()\n            else:\n                return False\n\
    \    return stack.top == ''", "    \n    brackets = string.count(\"[\")\n    squares\
    \ = string.count(\"]\")\n    \n    if brackets == squares \n        then return\
    \ true\n        else return false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Create a function that takes a string as input which contains only\
    \ square brackets.\n    The function should return True if and only if there is\
    \ a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.", "    \n    stack = Stack()\n    stack.push(string)\n    \n    while\
    \ stack.size > 0\n        \n        current = stack.pop()\n        \n        if\
    \ current == '['\n            stack.push(current + current)\n        \n      \
    \  elif current == ']'\n            if stack.size == 0\n                return\
    \ false\n            \n            top = stack.pop()\n            \n         \
    \   if top == '['\n                stack.push(top + top)\n            \n     \
    \       elif top == ']'\n                if stack.size == 0\n                \
    \    return false\n                \n                top = stack.pop()\n     \
    \           \n                if top == '['\n                    stack.push(top\
    \ + top)\n                \n                elif top == ']'\n                \
    \    if stack.size == 0\n                        return false\n              \
    \      \n                    top = stack.pop()\n                    \n       \
    \             if top == '['\n                        stack.push(top + top)\n \
    \                   \n                    elif top == ']'\n                  \
    \      if stack.size == 0\n                            return false\n        \
    \                \n                        top = stack.pop()\n               \
    \         \n                        if top == '['\n                          \
    \  stack.push(top + top)\n                        \n                        elif\
    \ top == ']'\n                            if stack.size == 0\n               \
    \                 return false\n                            \n               \
    \             top = stack.pop()\n                            \n              \
    \              if top == '['\n                                stack.push(top +\
    \ top)\n                            \n                            elif top ==\
    \ ']'\n                                if stack.size == 0\n                  \
    \                  return false\n                                \n          \
    \                      top = stack.pop()\n                                \n \
    \                               if top == '['\n                              \
    \      stack.push(top + top)\n                                \n             \
    \                   elif top == ']'\n                                    if stack.size\
    \ == 0\n                                        return false\n               \
    \                     \n                                    top = stack.pop()\n\
    \                                    \n                                    if\
    \ top == '['\n                                        stack.push(top + top)\n\
    \                                    \n                                    elif\
    \ top == ']'\n                                        if stack.size == 0\n   \
    \                                         return false\n                     \
    \                   \n                                        top = stack.pop()\n\
    \                                        \n                                  \
    \      if top == '['\n                                            stack.push(top\
    \ + top)\n                                        \n                         \
    \               elif top == ']'\n                                            if\
    \ stack.size == 0\n                                                return false\n\
    \                                            \n                              \
    \              top = stack.pop()\n                                           \
    \ \n                                            if top == '['\n              \
    \                                  stack.push(top + top)\n                   \
    \                         \n                                            elif top\
    \ == ']'\n                                                if stack.size == 0\n\
    \                                                    return false\n          \
    \                                      \n                                    \
    \            top = stack.pop()\n                                             \
    \   \n                                                if top == '['\n        \
    \                                            stack.push(top + top)\n         \
    \                                       \n                                   \
    \             elif top == ']'\n                                              \
    \      if stack.size == 0\n                                                  \
    \      return false\n                                                    \n  \
    \                                                  top = stack.pop()\n       \
    \                                             \n                             \
    \                       if top == '['\n                                      \
    \                  stack.push(top + top)\n                                   \
    \                 \n                                                    elif top\
    \ == ']'\n                                                        if stack.size\
    \ == 0\n                                                            return false\n\
    \                                                        \n                  \
    \                                      top = stack.pop()\n                   \
    \                                     \n                                ", " \
    \   \n    stack::Vector[String] = Vector.empty\n    \n    for c in string:\n \
    \       if c == '[':\n            stack := stack + [c]\n        elif c == ']':\n\
    \            if stack.length == 0: return False\n            stack = stack[stack.length-1]\n\
    \        elif c == ']' and stack.length > 0: \n            stack = stack[stack.length-1]\n\
    \            if stack.length == 0: return False\n        else: return False\n\
    \    \n    if stack.length > 0: return False\n    return True\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\n    Create a function that takes a string as input\
    \ which contains only square brackets.\n    The function should return True if\
    \ and only if there is a valid subsequence of brackets \n    where at least one\
    \ bracket in the subsequence is nested.", "    \n    stack = Stack()\n    \n \
    \   for char in string:\n        if char == '[':\n            stack.push(char)\n\
    \        elif char == ']':\n            if not stack.is_empty():\n           \
    \     stack.pop()\n            else:\n                return False\n        elif\
    \ char == '[':\n            stack.push(char)\n        elif char == ']':\n    \
    \        if not stack.is_empty():\n                stack.pop()\n            else:\n\
    \                return False\n        elif char == '[':\n            stack.push(char)\n\
    \        elif char == ']':\n            if not stack.is_empty():\n           \
    \     stack.pop()\n            else:\n                return False\n        elif\
    \ char == '[':\n            stack.push(char)\n        elif char == ']':\n    \
    \        if not stack.is_empty():\n                stack.pop()\n            else:\n\
    \                return False\n        elif char == '[':\n            stack.push(char)\n\
    \        elif char == ']':\n            if not stack.is_empty():\n           \
    \     stack.pop()\n            else:\n                return False\n        elif\
    \ char == '[':\n            stack.push(char)\n        elif char == ']':\n    \
    \        if not stack.is_empty():\n                stack.pop()\n            else:\n\
    \                return False\n        elif char == '[':\n            stack.push(char)\n\
    \        elif char == ']':\n            if not stack.is_empty():\n           \
    \     stack.pop()\n            else:\n                return False\n        elif\
    \ char == '[':\n            stack.push(char)\n        elif char == ']':\n    \
    \        if not stack.is_empty():\n                stack.pop()\n            else:\n\
    \                return False\n        elif char == '[':\n            stack.push(char)\n\
    \        elif char == ']':\n            if not stack.is_empty():\n           \
    \     stack.pop()\n            else:\n                return False\n        elif\
    \ char == '[':\n            stack.push(char)\n        elif char == ']':\n    \
    \        if not stack.is_empty():\n                stack.pop()\n            else:\n\
    \                return False\n        elif char == '[':\n            stack.push(char)\n\
    \        elif char == ']':\n            if not stack.is_empty():\n           \
    \     stack.pop()\n            else:\n                return False\n        elif\
    \ char == '[':\n            stack.push(char)\n        elif char == ']':\n    \
    \        if not stack.is_empty():\n                stack.pop()\n            else:\n\
    \                return False\n        elif char == '[':\n            stack.push(char)\n\
    \        elif char == ']':\n            if not stack.is_empty():\n           \
    \     stack.pop()\n            else:\n                return False\n        elif\
    \ char == '[':\n            stack.push(char)\n        elif char == ']':\n    \
    \        if not stack.is_empty():\n                stack.pop()\n            else:\n\
    \                return False\n        elif char == '[':\n            stack.push(char)\n\
    \        elif char == ']':\n            if not stack.is_empty():\n           \
    \     stack.pop()\n            else:\n                return False\n        elif\
    \ char == '[':\n            stack.push(char)\n        elif char == ']':\n    \
    \        if not stack.is_empty():\n                stack.pop()\n            else:\n\
    \                return False\n        elif char", "    \n    brackets = string.count(\"\
    [\")\n    squares = string.count(\"]\")\n    \n    if brackets == squares \n \
    \       then return true\n        else return false\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\n    Create a function that takes a string as input\
    \ which contains only square brackets.\n    The function should return True if\
    \ and only if there is a valid subsequence of brackets \n    where at least one\
    \ bracket in the subsequence is nested.", "    \n    stack = Stack()\n    \n \
    \   for c in string:\n        if c == '[':\n            stack.push(c)\n      \
    \  elif c == ']':\n            if stack.is_empty():\n                return False\n\
    \            elif stack.pop() != '[':\n                return False\n        \
    \    else:\n                stack.pop()\n        elif stack.is_empty():\n    \
    \        return False\n        else:\n            stack.pop()\n            stack.push(c)\n\
    \            \n    return stack.is_empty()\n</cell>\n<cell>\nis_nested('[[]]')\
    \ \u279E True\nis_nested('[]]]]]]][[[[[]') \u279E False\nis_nested('[][]') \u279E\
    \ False\nis_nested('[]') \u279E False\nis_nested('[[][]]') \u279E True\nis_nested('[[]][[')\
    \ \u279E True\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ as input and returns the number of times a substring appears in the string.",
  "    \n    stack = Stack()\n    \n    for char in string:\n        if char == '[':\n\
    \            stack.push(char)\n        elif char == ']':\n            if not stack.isEmpty():\n\
    \                if stack.top() == '[':\n                    stack.pop()\n   \
    \             else:\n                    return False\n            else:\n   \
    \             return False\n        elif char == '[':\n            stack.push(char)\n\
    \        elif char == ']':\n            if not stack.isEmpty():\n            \
    \    if stack.top() == '[':\n                    stack.pop()\n               \
    \ else:\n                    return False\n            else:\n               \
    \ return False\n        elif char == '[':\n            stack.push(char)\n    \
    \    elif char == ']':\n            if not stack.isEmpty():\n                if\
    \ stack.top() == '[':\n                    stack.pop()\n                else:\n\
    \                    return False\n            else:\n                return False\n\
    \        elif char == '[':\n            stack.push(char)\n        elif char ==\
    \ ']':\n            if not stack.isEmpty():\n                if stack.top() ==\
    \ '[':\n                    stack.pop()\n                else:\n             \
    \       return False\n            else:\n                return False\n      \
    \  elif char == '[':\n            stack.push(char)\n        elif char == ']':\n\
    \            if not stack.isEmpty():\n                if stack.top() == '[':\n\
    \                    stack.pop()\n                else:\n                    return\
    \ False\n            else:\n                return False\n        elif char ==\
    \ '[':\n            stack.push(char)\n        elif char == ']':\n            if\
    \ not stack.isEmpty():\n                if stack.top() == '[':\n             \
    \       stack.pop()\n                else:\n                    return False\n\
    \            else:\n                return False\n        elif char == '[':\n\
    \            stack.push(char)\n        elif char == ']':\n            if not stack.isEmpty():\n\
    \                if stack.top() == '[':\n                    stack.pop()\n   \
    \             else:\n                    return False\n            else:\n   \
    \             return False\n        elif char == '[':\n            stack.push(char)\n\
    \        elif char == ']':\n            if not stack.isEmpty():\n            \
    \    if stack.top() == '[':\n                    stack.pop()\n               \
    \ else:\n                    return False\n            else:\n               \
    \ return False\n        elif char == '[':\n            stack.push(char)\n    \
    \    elif char == ']':\n            if not stack.isEmpty():\n                if\
    \ stack.top() == '[':\n                    stack.pop()\n                else:\n\
    \                    return False\n            else:\n                return False\n\
    \        elif char == '[':\n            stack.push(char)\n        elif char ==\
    \ ']':\n            if not stack.isEmpty():\n                if stack.top() ==\
    \ '[':\n                    stack.pop()\n                else:\n             \
    \       return False\n            else:\n                return False\n      \
    \  elif char == '[':\n            stack.push(char)\n        elif char == ']':\n\
    \            if not stack.isEmpty():\n                if stack.top() == '[':\n\
    \                    stack.pop()\n                else:\n                    return\
    \ False\n            else:\n                return False\n        elif char ==\
    \ '[':\n            stack.push(char)\n        elif char == ']':\n            if\
    \ not stack.isEmpty():\n                if stack.top() == '[':\n             \
    \       stack.pop()\n                else:\n", "    \n    stack = Stack()\n  \
    \  stack.append(0)\n    \n    for c in string:\n        if c == '[':\n       \
    \     stack.append(1)\n        elif c == ']':\n            stack.pop()\n     \
    \   elif stack.isEmpty == True:\n            return False\n        \n    return\
    \ stack.isEmpty\n\"\"\"\n    Create a function that takes a string as input which\
    \ contains only square brackets.\n    The function should return True if and only\
    \ if there is a valid subsequence of brackets \n    where at least one bracket\
    \ in the subsequence is nested.", "    \n    stack = Stack()\n    stack.append(0)\n\
    \    \n    for c in string:\n        if c == '[':\n            stack.append(1)\n\
    \        elif c == ']':\n            stack.pop()\n        elif stack.isEmpty ==\
    \ True:\n            return False\n    \n    return stack.isEmpty == False\n \
    \   \n\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.", "    \n    brackets = string.count('[') \n    square_brackets =\
    \ string.count(']') \n    \n    if brackets == square_brackets \n        then\
    \ return true\n        else return false\n    end\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string as input which contains only square\
    \ brackets.\nThe function should return True if and only if there is a valid subsequence\
    \ of brackets \n    where at least one bracket in the subsequence is nested.",
  "    \n    stack = Stack()\n    \n    for c in string:\n        if c == '[':\n \
    \           stack.push(c)\n        elif c == ']':\n            stack.pop()\n \
    \       elif stack.empty():\n            return False\n        else:\n       \
    \     top = stack.pop()\n            if top != '[' and top != ']':\n         \
    \       return False\n    return True\n</code>\n<|/ a tags=python,string,python-3.x\
    \ |>\n<| c |>\nThis does not work if the brackets are nested. For example, the\
    \ string `'[[]]'` returns `True` when it should return `False`.\n<|/ c |>\n<|\
    \ c |>\nI missed that case. Thanks for pointing that out.\n<|/ c |>\n<| a dscore=1\
    \ |>\n<code>\ndef isNested(s):\n    stack = []\n    for c in s:\n        if c\
    \ == '[':\n            stack.append(c)\n        elif c == ']':\n            if\
    \ len(stack) == 0:\n                return False\n            else:\n        \
    \        stack.pop()\n        else:\n            if len(stack) == 0:\n       \
    \         return False\n            else:\n                top = stack.pop()\n\
    \                if top != '[' and top != ']':\n                    return False\n\
    \    return True\n</code>\n<|/ a tags=python,string,python-3.x |>\n<| a dscore=1\
    \ |>\n<code>\ndef isNested(s):\n    stack = []\n    for c in s:\n        if c\
    \ == '[':\n            stack.append(c)\n        elif c == ']':\n            if\
    \ len(stack) == 0:\n                return False\n            else:\n        \
    \        stack.pop()\n        else:\n            if len(stack) == 0:\n       \
    \         return False\n            else:\n                top = stack.pop()\n\
    \                if top != '[' and top != ']':\n                    return False\n\
    \    return True\n</code>\n<|/ a tags=python,string,python-3.x |>\n<| a tags=python,string,python-3.x\
    \ |>\n<code>\ndef isNested(s):\n    stack = []\n    for c in s:\n        if c\
    \ == '[':\n            stack.append(c)\n        elif c == ']':\n            if\
    \ len(stack) == 0:\n                return False\n            else:\n        \
    \        stack.pop()\n        else:\n            if len(stack) == 0:\n       \
    \         return False\n            else:\n                top = stack.pop()\n\
    \                if top != '[' and top != ']':\n                    return False\n\
    \    return True\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\ndef isNested(s):\n\
    \    stack = []\n    for c in s:\n        if c == '[':\n            stack.append(c)\n\
    \        elif c == ']':\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n        else:\n     \
    \       if len(stack) == 0:\n                return False\n            else:\n\
    \                top = stack.pop()\n                if top != '[' and top != ']':\n\
    \                    return False\n    return True\n</code>\n<|/ a tags=python,string,python-3.",
  "    \n    stack = Stack()\n    \n    for char in string:\n        if char == '[':\n\
    \            stack.push(char)\n        elif char == ']':\n            if not stack.is_empty():\n\
    \                if stack.pop() != '[':\n                    return False\n  \
    \          else:\n                return False\n        elif char == '[' or char\
    \ == ']':\n            return False\n    \n    return not stack.is_empty()\n</cell>\n\
    <code language=julia-1.5>\nis_nested
  "    \n    stack = Stack()\n    stack.push(string)\n    \n    while stack.size >\
    \ 0\n        \n        current = stack.pop()\n        \n        if current ==\
    \ '['\n            stack.push(\"[\")\n            stack.push(\"[\")\n        \
    \    stack.push(\"[\")\n            stack.push(\"[\")\n            stack.push(\"\
    [\")\n            stack.push(\"[\")\n            stack.push(\"[\")\n         \
    \   stack.push(\"[\")\n            stack.push(\"[\")\n            stack.push(\"\
    [\")\n            stack.push(\"[\")\n            stack.push(\"[\")\n         \
    \   stack.push(\"[\")\n            stack.push(\"[\")\n            stack.push(\"\
    [\")\n            stack.push(\"[\")\n            stack.push(\"[\")\n         \
    \   stack.push(\"[\")\n            stack.push(\"[\")\n            stack.push(\"\
    [\")\n            stack.push(\"[\")\n            stack.push(\"[\")\n         \
    \   stack.push(\"[\")\n            stack.push(\"[\")\n            stack.push(\"\
    [\")\n            stack.push(\"[\")\n            stack.push(\"[\")\n         \
    \   stack.push(\"[\")\n            stack.push(\"[\")\n            stack.push(\"\
    [\")\n            stack.push(\"[\")\n            stack.push(\"[\")\n         \
    \   stack.push(\"[\")\n            stack.push(\"[\")\n            stack.push(\"\
    [\")\n            stack.push(\"[\")\n            stack.push(\"[\")\n         \
    \   stack.push(\"[\")\n            stack.push(\"[\")\n            stack.push(\"\
    [\")\n            stack.push(\"[\")\n            stack.push(\"[\")\n         \
    \   stack.push(\"[\")\n            stack.push(\"[\")\n            stack.push(\"\
    [\")\n            stack.push(\"[\")\n            stack.push(\"[\")\n         \
    \   stack.push(\"[\")\n            stack.push(\"[\")\n            stack.push(\"\
    [\")\n            stack.push(\"[\")\n            stack.push(\"[\")\n         \
    \   stack.push(\"[\")\n            stack.push(\"[\")\n            stack.push(\"\
    [\")\n            stack.push(\"[\")\n            stack.push(\"[\")\n         \
    \   stack.push(\"[\")\n            stack.push(\"[\")\n            stack.push(\"\
    [\")\n            stack.push(\"[\")\n            stack.push(\"[\")\n         \
    \   stack.push(\"[\")\n            stack.push(\"[\")\n            stack.push(\"\
    [\")\n            stack.push(\"[\")\n            stack.push(\"[\")\n         \
    \   stack.push(\"[\")\n            stack.", "    \n    stack = Stack()\n    \n\
    \    for c in string:\n        if c == '[':\n            stack.push(c)\n     \
    \   elif c == ']':\n            if not stack.is_empty():\n                if stack.pop()\
    \ != '[':\n                    return False\n            else:\n             \
    \   return False\n        elif stack.is_empty():\n            return False\n \
    \       else:\n            stack.pop()\n    return True", "    \n    stack::Vector[String]\
    \ = Vector.empty\n    \n    for c in string:\n        if c == '[':\n         \
    \   stack := stack :+ c\n        elif c == ']':\n            if stack.length ==\
    \ 0 then return false\n            stack = stack[stack.length-1]\n           \
    \ stack.length -= 1\n        elif stack.length > 0 then\n            if stack[stack.length-1]\
    \ == c then stack.length -= 1\n            else stack := stack :+ c\n        else\
    \ stack := stack :+ c\n    end\n    return stack.length == 0\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\n    Create a function that takes a string as input\
    \ which contains only square brackets.\n    The function should return True if\
    \ and only if there is a valid subsequence of brackets \n    where at least one\
    \ bracket in the subsequence is nested.", "    \n    stack = Stack()\n    \n \
    \   for c in string:\n        if c == '[':\n            stack.push(c)\n      \
    \  elif c == ']':\n            if stack.isEmpty():\n                return False\n\
    \            else:\n                stack.pop()\n        elif stack.isEmpty():\n\
    \            return False\n        else:\n            stack.pop()\n          \
    \  stack.push(c)\n            \n    return stack.isEmpty()\n</cell>\n<cell>\n\
    is_nested('[[]]') \u279E True\nis_nested('[]]]]]]][[[[[]') \u279E False\nis_nested('[][]')\
    \ \u279E False\nis_nested('[]') \u279E False\nis_nested('[[][]]') \u279E True\n\
    is_nested('[[]][[') \u279E True\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string as input which contains only square brackets.\nThe function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    where at least one bracket in the subsequence is nested.", "    stack = Stack()\n\
    \    brackets = Stack()\n    brackets.push(string)\n    while brackets.length()\
    \ > 0 do\n        current = brackets.pop()\n        if current == '[' then\n \
    \           stack.push(current)\n        elif current == ']' then\n          \
    \  if stack.top == '[' then\n                stack.pop()\n            else\n \
    \               return false\n        else\n            return false\n    end\n\
    \    return true\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Create\
    \ a function that takes a string as input which contains only square brackets.\n\
    \    The function should return True if and only if there is a valid subsequence\
    \ of brackets \n    where at least one bracket in the subsequence is nested.",
  "    \n    stack = Stack()\n    \n    for c in string:\n        if c == '[':\n \
    \           stack.push(c)\n        elif c == ']':\n            if stack.isEmpty():\n\
    \                return False\n            elif stack.pop() != '[':\n        \
    \        return False\n            else:\n                stack.pop()\n      \
    \  elif stack.isEmpty():\n            return False\n        else:\n          \
    \  stack.pop()\n            stack.push(c)\n            \n    return stack.isEmpty()\n\
    </cell>\n<code language=julia-1.5>\nis_nested('[[]]') \u279E True\nis_nested('[]]]]]]][[[[[]')\
    \ \u279E False\nis_nested('[][]') \u279E False\nis_nested('[]') \u279E False\n\
    is_nested('[[][]]') \u279E True\nis_nested('[[]][[') \u279E True\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a string as input which contains only\
    \ square brackets.\nThe function should return True if and only if there is a\
    \ valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.", "    \n    stack = Stack()\n    \n    for c in string:\n      \
    \  if c == '[':\n            stack.push(c)\n        elif c == ']':\n         \
    \   if not stack.is_empty():\n                if stack.pop() == '[':\n       \
    \             return True\n                else:\n                    return False\n\
    \            else:\n                return False\n        else:\n            return\
    \ False\n    \n    return not stack.is_empty()\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a string as input and returns the number of brackets\
    \ in the string.", "    \n    stack = Stack()\n    stack.push(string)\n    \n\
    \    while stack.size > 0\n        \n        current = stack.pop()\n        \n\
    \        if current == '['\n            stack.push(current + current)\n      \
    \  \n        elif current == ']'\n            if stack.size == 0\n           \
    \     return false\n            \n            top = stack.pop()\n            if\
    \ top == '['\n                stack.push(top + top)\n            \n          \
    \  elif top == ']'\n                if stack.size == 0\n                    return\
    \ false\n                \n                top = stack.pop()\n               \
    \ if top == '['\n                    stack.push(top + top)\n                \n\
    \                elif top == ']'\n                    if stack.size == 0\n   \
    \                     return false\n                    \n                   \
    \ top = stack.pop()\n                    if top == '['\n                     \
    \   stack.push(top + top)\n                    \n                    elif top\
    \ == ']'\n                        if stack.size == 0\n                       \
    \     return false\n                        \n                        top = stack.pop()\n\
    \                        if top == '['\n                            stack.push(top\
    \ + top)\n                        \n                        elif top == ']'\n\
    \                            if stack.size == 0\n                            \
    \    return false\n                            \n                            top\
    \ = stack.pop()\n                            if top == '['\n                 \
    \               stack.push(top + top)\n                            \n        \
    \                    elif top == ']'\n                                if stack.size\
    \ == 0\n                                    return false\n                   \
    \             \n                                top = stack.pop()\n          \
    \                      if top == '['\n                                    stack.push(top\
    \ + top)\n                                \n                                elif\
    \ top == ']'\n                                    if stack.size == 0\n       \
    \                                 return false\n                             \
    \       \n                                    top = stack.pop()\n            \
    \                        if top == '['\n                                     \
    \   stack.push(top + top)\n                                    \n            \
    \                        elif top == ']'\n                                   \
    \     if stack.size == 0\n                                            return false\n\
    \                                        \n                                  \
    \      top = stack.pop()\n                                        if top == '['\n\
    \                                            stack.push(top + top)\n         \
    \                               \n                                        elif\
    \ top == ']'\n                                            if stack.size == 0\n\
    \                                                return false\n              \
    \                              \n                                            top\
    \ = stack.pop()\n                                            if top == '['\n \
    \                                               stack.push(top + top)\n      \
    \                                      \n                                    \
    \        elif top == ']'\n                                                if stack.size\
    \ == 0\n                                                    return false\n   \
    \                                             \n                             \
    \                   top = stack.pop()\n                                      \
    \          if top == '['\n                                                   \
    \ stack.push(top + top)\n                                                \n  \
    \                                              elif top == ']'\n             \
    \                                       if stack.size == 0\n                 \
    \                                       return false\n                       \
    \                             \n                                             \
    \       top = stack.pop()\n                                                  \
    \  if top == '['\n                                                        stack.push(top\
    \ + top)\n                                                    \n             \
    \                                       elif top == ']'\n                    \
    \                                    if stack.size == 0\n                    \
    \                                        return false\n                      \
    \                                  \n                                        \
    \                top = stack.pop()\n                                         \
    \               if top == '['\n                                              \
    \              stack.push(top + top)\n                                       \
    \                 \n                                                        elif\
    \ top == ']'\n                                                            if ",
  "    \n    stack = Stack()\n    \n    for c in string:\n        if c == '[':\n \
    \           stack.push(c)\n        elif c == ']':\n            if stack.length()\
    \ == 0:\n                return False\n            elif stack.pop() != '[':\n\
    \                return False\n            else:\n                stack.pop()\n\
    \        elif stack.top() == '[':\n            if c != stack.peek():\n       \
    \         return False\n            else:\n                stack.pop()\n     \
    \           stack.push(c)\n        else:\n            return False\n    \n   \
    \ if stack.length() > 0:\n        return False\n    else:\n        return True\n\
    </cell>\n<cell>\n\"\"\"\n    Create a function that takes a string as input which\
    \ contains only square brackets.\n    The function should return True if and only\
    \ if there is a valid subsequence of brackets \n    where at least one bracket\
    \ in the subsequence is nested.", "    \n    stack = Stack()\n    stack.push(string)\n\
    \    \n    while stack.count > 0\n        \n        current = stack.pop()\n  \
    \      \n        if current == '['\n            stack.push(current + current)\n\
    \        \n        elif current == ']'\n            if stack.count > 0\n     \
    \           stack.pop()\n            else\n                return false\n    \
    \    \n        else\n            return false\n    end\n    \n    return true\n\
    end\n</cell>\n<code language=julia-1.5>\nis_nested
  "    \n    stack = Stack()\n    \n    for c in string:\n        if c == '[':\n \
    \           stack.push(c)\n        elif c == ']':\n            if stack.isEmpty():\n\
    \                return False\n            else:\n                stack.pop()\n\
    \        elif stack.isEmpty():\n            return False\n        else:\n    \
    \        stack.pop()\n            stack.push(c)\n            \n    return stack.isEmpty()\n\
    </cell>\n<cell>\nis_nested('[[]]') \u279E True\nis_nested('[]]]]]]][[[[[]') \u279E\
    \ False\nis_nested('[][]') \u279E False\nis_nested('[]') \u279E False\nis_nested('[[][]]')\
    \ \u279E True\nis_nested('[[]][[') \u279E True\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a string as input which contains only square brackets.\n\
    The function should return True if and only if there is a valid subsequence of\
    \ brackets \nwhere at least one bracket in the subsequence is nested.", "    \n\
    \    stack = Stack()\n    \n    for char in string:\n        if char == '[':\n\
    \            stack.push(char)\n        elif char == ']':\n            if stack.top\
    \ == '[':\n                stack.pop()\n            else:\n                return\
    \ False\n        elif char == '[' or char == ']':\n            if stack.top ==\
    \ '[':\n                stack.pop()\n            else:\n                return\
    \ False\n        elif char == '[':\n            stack.push(char)\n        elif\
    \ char == ']':\n            if stack.top == '[':\n                stack.pop()\n\
    \            else:\n                return False\n        else:\n            return\
    \ False\n    \n    return stack.top == '['", "    \n    stack = Stack()\n    \n\
    \    for char in string:\n        if char == '[':\n            stack.push(char)\n\
    \        elif char == ']':\n            if stack.is_empty():\n               \
    \ return False\n            else:\n                stack.pop()\n        elif char\
    \ == '[' or char == ']':\n            if stack.is_empty():\n                return\
    \ False\n            else:\n                stack.pop()\n                stack.pop()\n\
    \                \n    return True\n</cell>\n<code language=julia-1.5>\nis_nested('[[]]')\
    \ \u279E True\nis_nested('[]]]]]]][[[[[]') \u279E False\nis_nested('[][]') \u279E\
    \ False\nis_nested('[]') \u279E False\nis_nested('[[][]]') \u279E True\nis_nested('[[]][[')\
    \ \u279E True\n</cell>\n<text>\nExercise: Write a function that takes a string\
    \ as input and returns the number of nested brackets within the string.", "  \
    \  \n    stack = Stack()\n    stack.push(string)\n    \n    while stack.size >\
    \ 0\n        \n        element = stack.pop()\n        \n        if element ==\
    \ ']'\n            \n            if stack.size > 0\n                \n       \
    \         element = stack.pop()\n                \n                if element\
    \ == '['\n                    \n                    return True\n            \
    \    \n                stack.push(element)\n            \n            else\n \
    \               \n                return False\n        \n        else\n     \
    \       \n            stack.push(element)\n            \n    end\n    \n    return\
    \ false\nend\n</cell>\n<code language=julia-1.5>\nis_nested
  "    \n    stack = Stack()\n    \n    for c in string:\n        if c == '[':\n \
    \           stack.push(c)\n        elif c == ']':\n            if not stack.is_empty():\n\
    \                if stack.pop() != '[':\n                    return False\n  \
    \          else:\n                return False\n        else:\n            return\
    \ False\n    \n    return not stack.is_empty()\n    \n\"\"\"\n    Create a function\
    \ that takes a string as input which contains only square brackets.\n    The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    \    where all brackets in the subsequence are nested.", "    \n    stack::Vector{String}\
    \ = []\n    \n    for char in string\n        if char == '['\n            push!(stack,\
    \ char)\n        elseif char == ']'\n            if isempty(stack)\n         \
    \       return false\n            else\n                pop!(stack)\n        \
    \    end\n        else\n            if isempty(stack)\n                return\
    \ false\n            else\n                pop!(stack)\n            end\n    \
    \    end\n    end\n    \n    return true\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a string as input and returns the number of characters\
    \ in the string that are not letters.", "    \n    stack::Vector[String] = Vector.empty\n\
    \    \n    for c in string:\n        if c == '[':\n            stack := stack\
    \ + [c]\n        elif c == ']':\n            if len(stack) == 0: return False\n\
    \            stack = stack[1..-1]\n        elif c == ']' and stack[1..-1] == ['[']:\n\
    \            stack = stack[1..-1]\n        elif c == ']' and stack[1..-1] == ['[',\
    \ ']']:\n            stack = stack[1..-1]\n        elif c == ']' and stack[1..-1]\
    \ == ['[', ']', ',']:\n            stack = stack[1..-1]\n        elif c == ']'\
    \ and stack[1..-1] == ['[', ']', ',', ']']:\n            stack = stack[1..-1]\n\
    \        elif c == ']' and stack[1..-1] == ['[', ']', ',', ']']:\n           \
    \ stack = stack[1..-1]\n        elif c == ']' and stack[1..-1] == ['[', ']', ',',\
    \ ']']:\n            stack = stack[1..-1]\n        elif c == ']' and stack[1..-1]\
    \ == ['[', ']', ',', ']']:\n            stack = stack[1..-1]\n        elif c ==\
    \ ']' and stack[1..-1] == ['[', ']', ',', ']']:\n            stack = stack[1..-1]\n\
    \        elif c == ']' and stack[1..-1] == ['[', ']', ',', ']']:\n           \
    \ stack = stack[1..-1]\n        elif c == ']' and stack[1..-1] == ['[', ']', ',',\
    \ ']']:\n            stack = stack[1..-1]\n        elif c == ']' and stack[1..-1]\
    \ == ['[', ']', ',', ']']:\n            stack = stack[1..-1]\n        elif c ==\
    \ ']' and stack[1..-1] == ['[', ']', ',', ']']:\n            stack = stack[1..-1]\n\
    \        elif c == ']' and stack[1..-1] == ['[', ']', ',', ']']:\n           \
    \ stack = stack[1..-1]\n        elif c == ']' and stack[1..-1] == ['[', ']', ',',\
    \ ']']:\n            stack = stack[1..-1]\n        elif c == ']' and stack[1..-1]\
    \ == ['[', ']', ',', ']']:\n            stack = stack[1..-1]\n        elif c ==\
    \ ']' and stack[1..-1] == ['[', ']', ',', ']']:\n            stack = stack[1..-1]\n\
    \        elif c == ']' and stack[1..-1] == ['[', ']', ',', ']']:\n            ",
  "    \n    stack::Vector{String} = []\n    \n    for char in string\n        if\
    \ char == '['\n            push!(stack, char)\n        elseif char == ']'\n  \
    \          if length(stack) == 0\n                return false\n            else\n\
    \                pop!(stack)\n            end\n        else\n            if length(stack)\
    \ > 0\n                if stack[length(stack)-1] == '['\n                    push!(stack,\
    \ char)\n                elseif stack[length(stack)-1] == ']'\n              \
    \      pop!(stack)\n                else\n                    return false\n \
    \               end\n            else\n                return false\n        \
    \    end\n        end\n    end\n    \n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    is_nested(\"[[]]\") \u279E true\nis_nested(\"[]]]]]]][[[[[]\") \u279E false\n\
    is_nested(\"[][]\") \u279E false\nis_nested(\"[]\") \u279E false\nis_nested(\"\
    [[][]]\") \u279E true\nis_nested(\"[[]][[\") \u279E true\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a string as input and returns the number of characters\
    \ in the string that are not brackets.", "    \n    stack = Stack()\n    \n  \
    \  for c in string:\n        if c == '[':\n            stack.push(c)\n       \
    \ elif c == ']':\n            if not stack.is_empty():\n                if stack.pop()\
    \ != '[':\n                    return False\n            else:\n             \
    \   return False\n        elif stack.is_empty():\n            return False\n \
    \       else:\n            stack.push(c)\n    \n    return stack.is_empty()",
  "    \n    stack = Stack()\n    stack.append(0)\n    \n    for c in string:\n  \
    \      if c == '[':\n            stack.append(1)\n        elif c == ']':\n   \
    \         stack.pop()\n        elif stack.isEmpty == True:\n            return\
    \ False\n        else:\n            stack.pop()\n            \n    return stack.isEmpty\
    \ == False", "    \n    stack = Stack()\n    \n    for c in string:\n        if\
    \ c == '[':\n            stack.push(c)\n        elif c == ']':\n            if\
    \ not stack.is_empty():\n                if stack.pop() != '[':\n            \
    \        return False\n            else:\n                return False\n     \
    \   elif stack.is_empty():\n            return False\n        else:\n        \
    \    stack.pop()\n    return True\n</cell>\n<code language=julia-1.5>\nis_nested('[][]')\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a string as input which\
    \ contains only square brackets.\nThe function should return True if and only\
    \ if there is a valid subsequence of brackets \nwhere at least one bracket in\
    \ the subsequence is nested.", "    \n    stack = Stack()\n    stack.append(0)\n\
    \    \n    for c in string:\n        if c == '[':\n            stack.append(1)\n\
    \        elif c == ']':\n            stack.pop()\n        elif stack.isEmpty ==\
    \ True:\n            return False\n    \n    return stack.isEmpty\n</cell>\n<cell>\n\
    is_nested('[[]]') \u279E True\nis_nested('[]]]]]]][[[[[]') \u279E False\nis_nested('[][]')\
    \ \u279E False\nis_nested('[]') \u279E False\nis_nested('[[][]]') \u279E True\n\
    is_nested('[[]][[') \u279E True\n</cell>\n<text>\nExercise\nWrite a function that\
    \ takes a string as input which contains only square brackets.\nThe function should\
    \ return True if and only if there is a valid subsequence of brackets \nwhere\
    \ at least one bracket in the subsequence is nested.", "    \n    stack = Stack()\n\
    \    \n    for c in string:\n        if c == '[':\n            stack.push(c)\n\
    \        elif c == ']':\n            if stack.pop() != '[':\n                return\
    \ False\n        elif stack.pop() != '[':\n            return False\n    return\
    \ True\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string as input\
    \ and returns the number of times the string \"[[]]\" appears in the string.",
  "    \n    stack = Stack()\n    \n    for c in string:\n        if c == '[':\n \
    \           stack.push(c)\n        elif c == ']':\n            if stack.top ==\
    \ '[':\n                stack.pop()\n            else:\n                return\
    \ False\n    return stack.top == '['", "    \n    stack = Stack()\n    \n    for\
    \ c in string:\n        if c == '[':\n            stack.push(c)\n        elif\
    \ c == ']':\n            if stack.pop() != '[':\n                return False\n\
    \        elif c != '[' and c != ']':\n            return False\n    \n    return\
    \ not stack.is_empty()\n\"\"\"\n    Create a function that takes a string as input\
    \ which contains only square brackets.\n    The function should return True if\
    \ and only if there is a valid subsequence of brackets \n    where at least one\
    \ bracket in the subsequence is nested.", "    \n    stack = Stack()\n    stack.push(string)\n\
    \    \n    while stack.count > 0\n        \n        current = stack.pop()\n  \
    \      \n        if current == '['\n            stack.push(current + current)\n\
    \        \n        if current == ']'\n            if stack.count > 0\n       \
    \         stack.pop()\n            else\n                return false\n      \
    \      end\n        end\n    end\n    \n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    is_nested
  "    \n    stack = Stack()\n    \n    for c in string:\n        if c == '[':\n \
    \           stack.push(c)\n        elif c == ']':\n            if not stack.is_empty():\n\
    \                if stack.pop() != '[':\n                    return False\n  \
    \          else:\n                return False\n        else:\n            return\
    \ False\n    \n    return stack.is_empty()\n</cell>\n<cell>\nis_nested('[[]]')\
    \ \u279E True\nis_nested('[]]]]]]][[[[[]') \u279E False\nis_nested('[][]') \u279E\
    \ False\nis_nested('[]') \u279E False\nis_nested('[[][]]') \u279E True\nis_nested('[[]][[')\
    \ \u279E True\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string\
    \ as input which contains only square brackets.\nThe function should return True\
    \ if and only if there is a valid subsequence of brackets \n    where at least\
    \ one bracket in the subsequence is nested.", "    \n    stack = Stack()\n   \
    \ stack.push(string)\n    \n    while stack.size > 0\n        \n        current\
    \ = stack.pop()\n        \n        if current == '['\n            stack.push(']')\n\
    \            stack.push('[')\n            \n        elif current == ']'\n    \
    \        stack.push('[')\n            stack.push(']')\n            \n        else\n\
    \            stack.push(current)\n            \n    end\n    \n    if stack.size\
    \ == 0\n        return false\n    else\n        return true\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    Create a function that takes a string as\
    \ input which contains only square brackets.\n    The function should return True\
    \ if and only if there is a valid subsequence of brackets \n    where at least\
    \ one bracket in the subsequence is nested.", "    \n    brackets = string.count('[')::Int\n\
    \    \n    if brackets == 0 \n        then return False\n    else if brackets\
    \ == string.count(']') \n        then return True\n    else if brackets == string.count('[')\n\
    \        then return is_nested(string[1:brackets])\n    else if brackets == string.count(']')\n\
    \        then return is_nested(string[1:brackets])\n    else if brackets == string.count('[')::Int\n\
    \        then return is_nested(string[1:brackets])\n    else return False\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    Create a function that takes a\
    \ string as input which contains only square brackets.\n    The function should\
    \ return True if and only if there is a valid subsequence of brackets \n    where\
    \ at least one bracket in the subsequence is nested.", "    \n    stack = Stack()\n\
    \    stack.push(0)\n    \n    for c in string:\n        if c == '[':\n       \
    \     stack.push(1)\n        elif c == ']':\n            stack.pop()\n       \
    \ elif stack.isEmpty():\n            return False\n        else:\n           \
    \ stack.pop()\n            \n    return stack.isEmpty()\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string as input and returns the number of square\
    \ brackets in the string.", "    \n    stack = Stack()\n    stack.append(0)\n\
    \    \n    for c in string:\n        if c == '[':\n            stack.append(1)\n\
    \        elif c == ']':\n            stack.pop()\n        elif stack.isEmpty():\n\
    \            return False\n        else:\n            stack.pop()\n          \
    \  stack.append(0)\n            \n    return stack.isEmpty()\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a string as input and returns the number\
    \ of times a substring appears in the string.", "    \n    stack = Stack()\n \
    \   stack.append(0)\n    \n    for c in string:\n        if c == '[':\n      \
    \      stack.append(1)\n        elif c == ']':\n            stack.pop()\n    \
    \    elif stack.isEmpty == True:\n            return False\n        \n    return\
    \ stack.isEmpty\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string\
    \ as input which contains only square brackets.\nThe function should return True\
    \ if and only if there is a valid subsequence of brackets \n    where at least\
    \ one bracket in the subsequence is nested.", "    \n    stack = Stack()\n   \
    \ \n    for char in string:\n        if char == '[':\n            stack.push(char)\n\
    \        elif char == ']':\n            if not stack.is_empty():\n           \
    \     if stack.pop() != '[':\n                    return False\n            else:\n\
    \                return False\n        elif char == '[':\n            stack.push(char)\n\
    \        elif char == ']':\n            if not stack.is_empty():\n           \
    \     if stack.pop() != '[':\n                    return False\n            else:\n\
    \                return False\n        else:\n            return False\n    \n\
    \    return stack.is_empty()\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a string as input and returns the number of times the string \"[[]]\"\
    \ appears in the string.", "    \n    stack = Stack()\n    stack.push(string)\n\
    \    \n    while stack.size > 0\n        \n        current = stack.pop()\n   \
    \     \n        if current == '['\n            stack.push(\"[\")\n           \
    \ stack.push(\"]\")\n            stack.push(\"[\")\n            stack.push(\"\
    ]\")\n            stack.push(\"[\")\n            stack.push(\"]\")\n         \
    \   stack.push(\"[\")\n            stack.push(\"]\")\n            stack.push(\"\
    [\")\n            stack.push(\"]\")\n            stack.push(\"[\")\n         \
    \   stack.push(\"]\")\n            stack.push(\"[\")\n            stack.push(\"\
    ]\")\n            stack.push(\"[\")\n            stack.push(\"]\")\n         \
    \   stack.push(\"[\")\n            stack.push(\"]\")\n            stack.push(\"\
    [\")\n            stack.push(\"]\")\n            stack.push(\"[\")\n         \
    \   stack.push(\"]\")\n            stack.push(\"[\")\n            stack.push(\"\
    ]\")\n            stack.push(\"[\")\n            stack.push(\"]\")\n         \
    \   stack.push(\"[\")\n            stack.push(\"]\")\n            stack.push(\"\
    [\")\n            stack.push(\"]\")\n            stack.push(\"[\")\n         \
    \   stack.push(\"]\")\n            stack.push(\"[\")\n            stack.push(\"\
    ]\")\n            stack.push(\"[\")\n            stack.push(\"]\")\n         \
    \   stack.push(\"[\")\n            stack.push(\"]\")\n            stack.push(\"\
    [\")\n            stack.push(\"]\")\n            stack.push(\"[\")\n         \
    \   stack.push(\"]\")\n            stack.push(\"[\")\n            stack.push(\"\
    ]\")\n            stack.push(\"[\")\n            stack.push(\"]\")\n         \
    \   stack.push(\"[\")\n            stack.push(\"]\")\n            stack.push(\"\
    [\")\n            stack.push(\"]\")\n            stack.push(\"[\")\n         \
    \   stack.push(\"]\")\n            stack.push(\"[\")\n            stack.push(\"\
    ]\")\n            stack.push(\"[\")\n            stack.push(\"]\")\n         \
    \   stack.push(\"[\")\n            stack.push(\"]\")\n            stack.push(\"\
    [\")\n            stack.push(\"]\")\n            stack.push(\"[\")\n         \
    \   stack.push(\"]\")\n            stack.push(\"[\")\n            stack.push(\"\
    ]\")\n            stack.push(\"[\")\n            stack.push(\"]\")\n         \
    \   stack.push(\"[\")\n            stack.push(\"]\")\n            stack.push(\"\
    [\")\n            stack.push(\"]\")\n            stack.push(\"[\")\n         \
    \   stack.push(\"]\")\n            stack.push(\"[\")\n            stack.push",
  "    \n    stack::Vector[String] = Vector.empty\n    \n    for c in string:\n  \
    \      if c == '[':\n            stack push(c)\n        elif c == ']':\n     \
    \       if stack.isEmpty():\n                return False\n            \n    \
    \        stack.pop()\n        elif c == ']' and stack.isEmpty():\n           \
    \ return False\n    \n    return stack.isEmpty()\n    \n\"\"\"\n    Create a function\
    \ that takes a string as input which contains only square brackets.\n    The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    \    where at least one bracket in the subsequence is nested.", "    \n    stack\
    \ = Stack()\n    stack.push(string)\n    \n    while stack.count > 0\n       \
    \ \n        current = stack.pop()\n        \n        if current == '['\n     \
    \       stack.push(']')\n            stack.push('[')\n            \n        elif\
    \ current == ']'\n            stack.push('[')\n            stack.push(']')\n \
    \           \n        else\n            stack.push(current)\n            \n  \
    \  end\n    \n    return stack.count == 0\nend\n</cell>\n<code language=julia-1.5>\n\
    is_nested(\"[[]]\")\n</cell>\n<code language=julia-1.5>\nis_nested(\"[][]\")\n\
    </cell>\n<code language=julia-1.5>\nis_nested(\"[]\")\n</cell>\n<code language=julia-1.5>\n\
    is_nested(\"[[][]]\")\n</cell>\n<code language=julia-1.5>\nis_nested(\"[[]][[\"\
    )\n</cell>\n<code language=julia-1.5>\nis_nested(\"[[]]\")\n</cell>\n<code language=julia-1.5>\n\
    is_nested(\"[][]\")\n</cell>\n<code language=julia-1.5>\nis_nested(\"[]\")\n</cell>\n\
    <code language=julia-1.5>\nis_nested(\"[[][]]\")\n</cell>\n<code language=julia-1.5>\n\
    is_nested(\"[[]][[\")\n</cell>\n<code language=julia-1.5>\nis_nested(\"[[]]\"\
    )\n</cell>\n<code language=julia-1.5>\nis_nested(\"[][]\")\n</cell>\n<code language=julia-1.5>\n\
    is_nested(\"[]\")\n</cell>\n<code language=julia-1.5>\nis_nested(\"[[][]]\")\n\
    </cell>\n<code language=julia-1.5>\nis_nested(\"[[]][[\")\n</cell>\n<code language=julia-1.5>\n\
    is_nested(\"[[]]\")\n</cell>\n<code language=julia-1.5>\nis_nested(\"[][]\")\n\
    </cell>\n<code language=julia-1.5>\nis_nested(\"[]\")\n</cell>\n<code language=julia-1.5>\n\
    is_nested(\"[[][]]\")\n</cell>\n<code language=julia-1.5>\nis_nested(\"[[]][[\"\
    )\n</cell>\n<code language=julia-1.5>\nis_nested(\"[[]]\")\n</cell>\n<code language=julia-1.5>\n\
    is_nested(\"[][]\")\n</cell>\n<code language=julia-1.5>\nis_nested(\"[]\")\n</cell>\n\
    <code language=julia-1.5>\nis_nested(\"[[][]]\")\n</cell>\n<code language=julia-1.5>",
  "    \n    stack = Stack()\n    stack.append(0)\n    \n    for c in string:\n  \
    \      if c == '[':\n            stack.append(1)\n        elif c == ']':\n   \
    \         stack.pop()\n        elif stack.isEmpty == True:\n            return\
    \ False\n    \n    return stack.isEmpty\n    \n\"\"\"\n    Create a function that\
    \ takes a string as input which contains only square brackets.\n    The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    \    where at least one bracket in the subsequence is nested.", "    \n    stack\
    \ = Stack()\n    \n    for char in string:\n        if char == '[':\n        \
    \    stack.push(char)\n        elif char == ']':\n            if not stack.is_empty():\n\
    \                if stack.pop() != '[':\n                    return False\n  \
    \          else:\n                return False\n        else:\n            return\
    \ False\n    \n    return not stack.is_empty()\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a string as input and returns the number of characters\
    \ in the string that are not brackets.", "    \n    stack = Stack()\n    \n  \
    \  for char in string:\n        if char == '[':\n            stack.push(char)\n\
    \        elif char == ']':\n            if stack.is_empty():\n               \
    \ return False\n            else:\n                stack.pop()\n        elif char\
    \ == '[' or char == ']':\n            if stack.is_empty():\n                return\
    \ False\n            else:\n                stack.pop()\n                stack.push(char)\n\
    \        else:\n            if stack.is_empty():\n                return False\n\
    \            else:\n                stack.pop()\n                stack.push(char)\n\
    \                \n    return stack.is_empty()\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Create a function that takes a string as input which contains only\
    \ square brackets.\n    The function should return True if and only if there is\
    \ a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.", "    \n    stack = Stack()\n    stack.push([string])\n    \n  \
    \  while stack.count > 0\n        \n        current = stack.pop()\n        \n\
    \        if current.count == 0\n            return true\n        \n        if\
    \ current.count == 1\n            if current[0].head == '['\n                stack.push([current[0].tail])\n\
    \            else\n                stack.push([current[0].head])\n        else\n\
    \            if current[0].head == '['\n                if current[0].tail ==\
    \ ']'\n                    stack.push([current[0].tail])\n                else\n\
    \                    stack.push([current[0].tail, current[0].head])\n        \
    \    else\n                if current[0].tail == ']'\n                    stack.push([current[0].head])\n\
    \                else\n                    stack.push([current[0].head, current[0].tail])\n\
    \    end\n    return false\nend\n</cell>\n<code language=julia-1.5>", "    \n\
    \    stack = Stack()\n    \n    for c in string:\n        if c == '[':\n     \
    \       stack.push(c)\n        elif c == ']':\n            if not stack.is_empty():\n\
    \                if stack.pop() != '[':\n                    return False\n  \
    \          else:\n                return False\n        elif stack.is_empty():\n\
    \            return False\n        else:\n            stack.pop()\n    return\
    \ True\n</cell>\n<cell>\n\"\"\"\n    Create a function that takes a string as\
    \ input which contains only square brackets.\n    The function should return True\
    \ if and only if there is a valid subsequence of brackets \n    where at least\
    \ one bracket in the subsequence is nested.", "    \n    stack = Stack()\n   \
    \ \n    for c in string:\n        if c == '[':\n            stack.push(c)\n  \
    \      elif c == ']':\n            if stack.is_empty():\n                return\
    \ False\n            elif stack.pop() != '[':\n                return False\n\
    \        elif stack.is_empty():\n            return False\n        \n    return\
    \ True", "    \n    stack = Stack()\n    stack.push(string)\n    \n    while stack.size\
    \ > 0\n        \n        current = stack.pop()\n        \n        if current ==\
    \ '['\n            stack.push(\"[\")\n        elif current == ']'\n          \
    \  stack.push(\"]\")\n        else\n            stack.push(current)\n    end",
  "    \n    stack = Stack()\n    \n    for c in string:\n        if c == '[':\n \
    \           stack.push(c)\n        elif c == ']':\n            if not stack.isEmpty():\n\
    \                if stack.pop() == '[':\n                    return True\n   \
    \         else:\n                return False\n        else:\n            stack.push(c)\n\
    \    return False", "    stack = Stack()\n    for c in string:\n        if c ==\
    \ '[':\n            stack.push(c)\n        elif c == ']':\n            if stack.isEmpty():\n\
    \                return False\n            elif stack.pop() != '[':\n        \
    \        return False\n        elif stack.isEmpty():\n            return False\n\
    \    return stack.isEmpty()\n</code>\n<|/ a dscore=0 |>\n<| a tags=string,python,algorithm\
    \ |>\nI wrote a recursive function for this problem:\n<code>\ndef isNested(s):\n\
    \    stack = []\n    openingBrackets = 0\n    closingBrackets = 0\n    for c in\
    \ s:\n        if c == '[':\n            openingBrackets += 1\n            stack.append(c)\n\
    \        elif c == ']':\n            closingBrackets += 1\n            if openingBrackets\
    \ == closingBrackets:\n                return True\n            elif openingBrackets\
    \ > closingBrackets:\n                return False\n            stack.pop()\n\
    \        else:\n            stack.append(c)\n    return False\n</code>\n<|/ a\
    \ dscore=0 |>\n<| a |>\n<code>\ndef isNested(s):\n    stack = []\n    openingBrackets\
    \ = 0\n    closingBrackets = 0\n    for c in s:\n        if c == '[':\n      \
    \      openingBrackets += 1\n            stack.append(c)\n        elif c == ']':\n\
    \            closingBrackets += 1\n            if openingBrackets == closingBrackets:\n\
    \                return True\n            elif openingBrackets > closingBrackets:\n\
    \                return False\n            stack.pop()\n        else:\n      \
    \      stack.append(c)\n    return False\n</code>\n<|/ a tags=string,python,algorithm\
    \ dscore=0 |>\n<| a dscore=0 |>\n<code>\ndef isNested(s):\n    stack = []\n  \
    \  openingBrackets = 0\n    closingBrackets = 0\n    for c in s:\n        if c\
    \ == '[':\n            openingBrackets += 1\n            stack.append(c)\n   \
    \     elif c == ']':\n            closingBrackets += 1\n            if openingBrackets\
    \ == closingBrackets:\n                return True\n            elif openingBrackets\
    \ > closingBrackets:\n                return False\n            stack.pop()\n\
    \        else:\n            stack.append(c)\n    return False\n</code>\n<|/ a\
    \ tags=string,python,algorithm |>\n<| a tags=string,python,algorithm |>\n<code>\n\
    def isNested(s):\n    stack = []\n    openingBrackets = 0\n    closingBrackets\
    \ = 0\n    for c in s:\n        if c == '[':\n            openingBrackets += 1\n\
    \            stack.append(c)\n        elif c == ']':\n            closingBrackets\
    \ += 1\n            if openingBrackets == closingBrackets:\n                return\
    \ True\n            elif opening", "    \n    stack::Vector[String] = Vector.empty\n\
    \    \n    for c in string:\n        if c == '[':\n            stack := stack:+[c]\n\
    \        elif c == ']':\n            if stack.length == 0 then return False\n\
    \            \n            stack::Vector[String] = stack:-1\n        else\n  \
    \          stack := stack:+[c]\n    end\n    \n    return stack.length == 1\n\
    end\n</cell>\n<code language=julia-1.5>\nis_nested(\"[[]]\")\n</cell>\n<code language=julia-1.5>\n\
    is_nested(\"[]]]]]]][[[[[]\")\n</cell>\n<code language=julia-1.5>\nis_nested(\"\
    [][]\")\n</cell>\n<code language=julia-1.5>\nis_nested(\"[]\")\n</cell>\n<code\
    \ language=julia-1.5>\nis_nested(\"[[][]]\")\n</cell>\n<code language=julia-1.5>\n\
    is_nested(\"[[]][[\")\n</cell>\n<code language=julia-1.5>\nis_nested
  "    \n    stack::Vector{String} = []\n    \n    for c in string\n        if c ==\
    \ '['\n            push!(stack, c)\n        elseif c == ']'\n            if isempty(stack)\n\
    \                return false\n            elseif pop!(stack) == '['\n       \
    \         return true\n            else\n                return false\n      \
    \      end\n        end\n    end\n    \n    return false\nend\n</cell>\n<code\
    \ language=julia-1.5>\nis_nested(\"[][]\")\n</cell>\n<code language=julia-1.5>\n\
    is_nested(\"[]\")\n</cell>\n<code language=julia-1.5>\nis_nested(\"[[][]]\")\n\
    </cell>\n<code language=julia-1.5>\nis_nested(\"[[]][[\")\n</cell>\n<code language=julia-1.5>\n\
    is_nested(\"[[]][[[]\")\n</cell>\n<code language=julia-1.5>\nis_nested(\"[[]][[[][]]\"\
    )\n</cell>\n<code language=julia-1.5>\nis_nested(\"[[]][[[][]]]\")\n</cell>\n\
    <code language=julia-1.5>\nis_nested(\"[[]][[[][]]][]\")\n</cell>\n<code language=julia-1.5>\n\
    is_nested(\"[[]][[[][]]][][]\")\n</cell>\n<code language=julia-1.5>\nis_nested(\"\
    [[]][[[][]]][][][]\")\n</cell>\n<code language=julia-1.5>\nis_nested(\"[[]][[[][]]][][][][]\"\
    )\n</cell>\n<code language=julia-1.5>\nis_nested(\"[[]][[[][]]][][][][][]\")\n\
    </cell>\n<code language=julia-1.5>\nis_nested(\"[[]][[[][]]][][][][][][]\")\n\
    </cell>\n<code language=julia-1.5>\nis_nested(\"[[]][[[][]]][][][][][][][]\")\n\
    </cell>\n<code language=julia-1.5>\nis_nested(\"[[]][[[][]]][][][][][][][][]\"\
    )\n</cell>\n<code language=julia-1.5>\nis_nested(\"[[]][[[][]]][][][][][][][][][]\"\
    )\n</cell>\n<code language=julia-1.5>\nis_nested(\"[[]][[[][]]][][][][][][][][][][][]\"\
    )\n</cell>\n<code language=julia-1.5>\nis_nested(\"[[]][[[][]]][][][][][][]",
  "    \n    stack = Stack()\n    \n    for char in string:\n        if char == '[':\n\
    \            stack.push(char)\n        elif char == ']':\n            if stack.is_empty():\n\
    \                return False\n            else:\n                top = stack.pop()\n\
    \                if top != '[':\n                    return False\n        elif\
    \ char == '[':\n            if stack.is_empty():\n                return False\n\
    \            else:\n                top = stack.pop()\n                if top\
    \ != '[':\n                    return False\n        elif char == ']':\n     \
    \       if stack.is_empty():\n                return False\n            else:\n\
    \                top = stack.pop()\n                if top != '[':\n         \
    \           return False\n        else:\n            return False\n    return\
    \ True\n</cell>\n<text>\nExercise 4\nWrite a function that takes a string as input\
    \ and returns a list of all valid substrings of the string.", "    \n    stack::Vector{String}\
    \ = []\n    \n    for c in string\n        if c == '['\n            push!(stack,\
    \ c)\n        elseif c == ']'\n            if isempty(stack)\n               \
    \ return false\n            elseif pop!(stack) == ']'\n                return\
    \ true\n            else\n                return false\n            end\n    \
    \    else\n            return false\n        end\n    end\n    return false\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Create a function that takes\
    \ a string as input which contains only square brackets.\n    The function should\
    \ return True if and only if there is a valid subsequence of brackets \n    where\
    \ at least one bracket in the subsequence is nested.", "    \n    brackets = string.count('[')::Int\n\
    \    \n    if brackets == 0 \n        then return False\n    else if brackets\
    \ == string.count(']') \n        then return True\n    else \n        brackets\
    \ = brackets - 1\n        \n        nested = is_nested(string[1:brackets])\n \
    \       \n        if nested \n            then return True\n        else \n  \
    \          brackets = brackets - 1\n            \n            nested = is_nested(string[1:brackets])\n\
    \            \n            if nested \n                then return True\n    \
    \        else \n                brackets = brackets - 1\n                \n  \
    \              nested = is_nested(string[1:brackets])\n                \n    \
    \            if nested \n                    then return True\n              \
    \  else \n                    brackets = brackets - 1\n                    \n\
    \                    nested = is_nested(string[1:brackets])\n                \
    \    \n                    if nested \n                        then return True\n\
    \                    else \n                        brackets = brackets - 1\n\
    \                        \n                        nested = is_nested(string[1:brackets])\n\
    \                        \n                        if nested \n              \
    \              then return True\n                        else \n             \
    \               brackets = brackets - 1\n                            \n      \
    \                      nested = is_nested(string[1:brackets])\n              \
    \              \n                            if nested \n                    \
    \            then return True\n                            else \n           \
    \                     brackets = brackets - 1\n                              \
    \  \n                                nested = is_nested(string[1:brackets])\n\
    \                                \n                                if nested \n\
    \                                    then return True\n                      \
    \          else \n                                    brackets = brackets - 1\n\
    \                                    \n                                    nested\
    \ = is_nested(string[1:brackets])\n                                    \n    \
    \                                if nested \n                                \
    \        then return True\n                                    else \n       \
    \                                 brackets = brackets - 1\n                  \
    \                      \n                                        nested = is_nested(string[1:brackets])\n\
    \                                        \n                                  \
    \      if nested \n                                            then return True\n\
    \                                        else \n                             \
    \               brackets = brackets - 1\n                                    \
    \        \n                                            nested = is_nested(string[1:brackets])\n\
    \                                            \n                              \
    \              if nested \n                                                then\
    \ return True\n                                            else \n           \
    \                                     brackets = brackets - 1\n              \
    \                                  \n                                        \
    \        nested = is_nested(string[1:brackets])\n                            \
    \                    \n                                                if nested\
    \ \n                                                    then return True\n   \
    \                                             else \n                        \
    \                            brackets = brackets - 1\n                       \
    \                             \n                                             \
    \       nested = is_nested(string[1:brackets])\n                             \
    \                       \n                                                   \
    \ if nested \n                                                        then return\
    \ True\n                                                    else \n          \
    \                                              brackets = brackets - 1\n     \
    \                                                   \n                       \
    \                                 nested = is_nested(string[1:brackets])\n   \
    \                                                     \n                     \
    \                                   if nested \n                             \
    \                               then return True\n                           \
    \                             else \n                                        \
    \                    brackets = brackets - 1\n                               \
    \                             \n                                             \
    \               nested = is_nested(string[1:brackets])\n                     \
    \                                       \n                                   \
    \                             if nested \n                                   \
    \                                 then return True\n                         \
    \                                       else \n                              \
    \                                      brackets = brackets - 1\n             \
    \                                                       \n                   \
    \                                                 nested = ", "    \n    stack\
    \ = Stack()\n    \n    for c in string:\n        if c == '[':\n            stack.push(c)\n\
    \        elif c == ']':\n            if stack.is_empty():\n                return\
    \ False\n            else:\n                stack.pop()\n        else:\n     \
    \       return False\n    \n    return stack.is_empty()\n</cell>\n<cell>\nis_nested('[[]]')\
    \ \u279E True\nis_nested('[]]]]]]][[[[[]') \u279E False\nis_nested('[][]') \u279E\
    \ False\nis_nested('[]') \u279E False\nis_nested('[[][]]') \u279E True\nis_nested('[[]][[')\
    \ \u279E True\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string\
    \ as input and returns the number of brackets contained in the string.", "   \
    \ \n    stack = Stack()\n    stack.push(string)\n    \n    while stack.size >\
    \ 0\n        \n        current = stack.pop()\n        \n        if current ==\
    \ '['\n            stack.push(']')\n            stack.push('[')\n        \n  \
    \      elif current == ']'\n            stack.push('[')\n            stack.push(']')\n\
    \        \n        else\n            stack.push(current)\n            \n    return\
    \ stack.size == 0\n    \n\"\"\"\n    Create a function that takes a string as\
    \ input which contains only square brackets.\n    The function should return True\
    \ if and only if there is a valid subsequence of brackets \n    where at least\
    \ one bracket in the subsequence is nested.", "    \n    stack = Stack()\n   \
    \ \n    for c in string:\n        if c == '[':\n            stack.push(c)\n  \
    \      elif c == ']':\n            if stack.is_empty():\n                return\
    \ False\n            else:\n                stack.pop()\n        elif stack.is_empty():\n\
    \            return False\n        else:\n            stack.pop()\n          \
    \  stack.push(c)\n            \n    return stack.is_empty()\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Create a function that takes a string as input which contains only\
    \ square brackets.\n    The function should return True if and only if there is\
    \ a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.", "    \n    stack = Stack()\n    \n    for c in string:\n      \
    \  if c == '[':\n            stack.push(c)\n        elif c == ']':\n         \
    \   if stack.is_empty():\n                return False\n            elif stack.pop()\
    \ != '[':\n                return False\n        elif stack.is_empty():\n    \
    \        return False\n        \n    return True\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a string as input which contains only square brackets.\n\
    The function should return True if and only if there is a valid subsequence of\
    \ brackets \nwhere at least one bracket in the subsequence is nested.", "    \n\
    \    stack = Stack()\n    stack.push(string)\n    \n    while stack.size > 0 do\n\
    \        \n        current = stack.pop()\n        \n        if current == '['\
    \ then\n            stack.push(current + current)\n            stack.push(current\
    \ + current)\n            stack.push(current + current)\n            stack.push(current\
    \ + current)\n            stack.push(current + current)\n            stack.push(current\
    \ + current)\n            stack.push(current + current)\n            stack.push(current\
    \ + current)\n            stack.push(current + current)\n            stack.push(current\
    \ + current)\n            stack.push(current + current)\n            stack.push(current\
    \ + current)\n            stack.push(current + current)\n            stack.push(current\
    \ + current)\n            stack.push(current + current)\n            stack.push(current\
    \ + current)\n            stack.push(current + current)\n            stack.push(current\
    \ + current)\n            stack.push(current + current)\n            stack.push(current\
    \ + current)\n            stack.push(current + current)\n            stack.push(current\
    \ + current)\n            stack.push(current + current)\n            stack.push(current\
    \ + current)\n            stack.push(current + current)\n            stack.push(current\
    \ + current)\n            stack.push(current + current)\n            stack.push(current\
    \ + current)\n            stack.push(current + current)\n            stack.push(current\
    \ + current)\n            stack.push(current + current)\n            stack.push(current\
    \ + current)\n            stack.push(current + current)\n            stack.push(current\
    \ + current)\n            stack.push(current + current)\n            stack.push(current\
    \ + current)\n            stack.push(current + current)\n            stack.push(current\
    \ + current)\n            stack.push(current + current)\n            stack.push(current\
    \ + current)\n            stack.push(current + current)\n            stack.push(current\
    \ + current)\n            stack.push(current + current)\n            stack.push(current\
    \ + current)\n            stack.push(current + current)\n            stack.push(current\
    \ + current)\n            stack.push(current + current)\n            stack.push(current\
    \ + current)\n            stack.push(current + current)\n            stack.push(current\
    \ + current)\n            stack.push(current + current)\n            stack.push(current\
    \ + current)\n            stack.push(current + current)\n            stack.push(current\
    \ + current)\n            stack.push(current + current)\n            stack.push(current\
    \ + current)\n            stack.push(current + current)\n            stack.push(current\
    \ + current)\n            stack.push(current + current)\n            stack.push(",
  "    \n    stack::Vector[String] = Vector.empty\n    \n    for c in string\n   \
    \     if c == '['\n            push!(stack, c)\n        elif c == ']'\n      \
    \      if !isempty(stack)\n                if stack[end] == '['\n            \
    \        pop!(stack)\n                else\n                    return false\n\
    \            else\n                return false\n        end\n    end\n    return\
    \ true\nend\n</cell>\n<code language=julia-1.5>\nis_nested
  "    \n    stack = Stack()\n    \n    for char in string\n        if char == '['\n\
    \            stack.push(char)\n        else if char == ']'\n            if stack.size\
    \ == 0\n                return false\n            else\n                stack.pop()\n\
    \        end\n    end\n    return stack.size == 0\nend\n</cell>\n<code language=julia-1.5>\n\
    is_nested
  "    \n    brackets = string.count('[') \n    square_brackets = string.count(']')\n\
    \    \n    if brackets == square_brackets:\n        return True\n    else:\n \
    \       return False\n    \n\"\"\"\n    Create a function that takes a string\
    \ as input which contains only square brackets.\n    The function should return\
    \ True if and only if there is a valid subsequence of brackets \n    where at\
    \ least one bracket in the subsequence is nested.", "    \n    stack = Stack()\n\
    \    stack.push(string)\n    \n    while stack.count > 0\n        \n        current\
    \ = stack.pop()\n        \n        if current == '['\n            stack.push(']')\n\
    \            stack.push('[')\n            \n        elif current == ']'\n    \
    \        \n            if stack.count > 0\n                \n                top\
    \ = stack.pop()\n                \n                if top == '['\n           \
    \         stack.push(']')\n                    stack.push('[')\n             \
    \   \n                elif top == ']'\n                    \n                \
    \    if stack.count > 0\n                        \n                        top\
    \ = stack.pop()\n                        \n                        if top == '['\n\
    \                            stack.push(']')\n                            stack.push('[')\n\
    \                        \n                        elif top == ']'\n         \
    \                   \n                            if stack.count > 0\n       \
    \                         \n                                top = stack.pop()\n\
    \                                \n                                if top == '['\n\
    \                                    stack.push(']')\n                       \
    \             stack.push('[')\n                                \n            \
    \                    elif top == ']'\n                                    \n \
    \                                   if stack.count > 0\n                     \
    \                   \n                                        top = stack.pop()\n\
    \                                        \n                                  \
    \      if top == '['\n                                            stack.push(']')\n\
    \                                            stack.push('[')\n               \
    \                         \n                                        elif top ==\
    \ ']'\n                                            \n                        \
    \                    if stack.count > 0\n                                    \
    \            \n                                                top = stack.pop()\n\
    \                                                \n                          \
    \                      if top == '['\n                                       \
    \             stack.push(']')\n                                              \
    \      stack.push('[')\n                                                \n   \
    \                                             elif top == ']'\n              \
    \                                      \n                                    \
    \                if stack.count > 0\n                                        \
    \                \n                                                        top\
    \ = stack.pop()\n                                                        \n  \
    \                                                      if top == '['\n       \
    \                                                     stack.push(']')\n      \
    \                                                      stack.push('[')\n     \
    \                                                   \n                       \
    \                                 elif top == ']'\n                          \
    \                                  \n                                        \
    \                    stack.push(']')\n                                       \
    \                     stack.push('[')\n                                      \
    \                  \n                                                    else\
    \ \n                                                        \n               \
    \                                         stack.push(']')\n                  \
    \                                      stack.push('[')\n                     \
    \                               \n                                           \
    \     else \n                                                    \n          \
    \                                          stack.push(']')\n                 \
    \                                   stack.push('[')\n                        \
    \                        \n                            else \n               \
    \                 \n                                stack.push(']')\n        \
    \                        stack.push('[')\n                            \n     \
    \                   else \n                            \n                    \
    \        stack.push(']')\n                            stack.push('[')\n      \
    \                  \n                    else \n                        \n   \
    \                     stack.push(']')\n                        stack.push('[')\n\
    \                    \n                else \n                    \n         \
    \           stack.push(']')\n                    stack.push('[')\n           \
    \     \n            else \n                \n                stack.push(']')\n\
    \                stack.push('[')\n            \n        else \n            \n\
    \            stack.push(']')\n            stack.push('[')\n        \n    end\n\
    \    \n    if stack.count > 0\n        \n        top = stack.pop()\n        \n\
    \        if top == '['\n            stack.push(']')\n            stack.push('[')\n\
    \        \n        elif top == ']'\n            \n            if stack.count >\
    \ 0\n                \n                top = ", "    \n    stack = Stack()\n \
    \   stack.append(0)\n    \n    for c in string:\n        if c == '[':\n      \
    \      stack.append(1)\n        elif c == ']':\n            stack.pop()\n    \
    \    elif stack.isEmpty == True:\n            return False\n        \n    return\
    \ stack.isEmpty == False\n\"\"\"\n    Create a function that takes a string as\
    \ input which contains only square brackets.\n    The function should return True\
    \ if and only if there is a valid subsequence of brackets \n    where at least\
    \ one bracket in the subsequence is nested.", "    \n    stack = Stack()\n   \
    \ stack.append(0)\n    \n    for c in string:\n        if c == '[':\n        \
    \    stack.append(1)\n        elif c == ']':\n            stack.pop()\n      \
    \  elif stack.isEmpty == True:\n            return False\n    \n    return stack.isEmpty\n\
    </cell>\n<cell>\n\"\"\"\n    Create a function that takes a string as input which\
    \ contains only square brackets.\n    The function should return True if and only\
    \ if there is a valid subsequence of brackets \n    where at least one bracket\
    \ in the subsequence is nested.", "    \n    stack = Stack()\n    \n    for c\
    \ in string:\n        if c == '[':\n            stack.push(c)\n        elif c\
    \ == ']':\n            if stack.pop() == '[':\n                return True\n \
    \           else:\n                return False\n        else:\n            return\
    \ False\n    \n    return stack.is_empty()\n</cell>\n<text>\nExercise 4\nWrite\
    \ a function that takes a string as input which contains only square brackets.\n\
    The function should return True if and only if there is a valid subsequence of\
    \ brackets \n    where at least one bracket in the subsequence is nested.", " \
    \   stack = Stack()\n    brackets = Stack()\n    brackets.push(string)\n    while\
    \ brackets.size > 0 do\n        current = brackets.pop()\n        if current ==\
    \ '[' then\n            stack.push(current)\n        elseif current == ']' then\n\
    \            if stack.size == 0 then\n                return false\n         \
    \   elseif stack.peek() == '[' then\n                stack.pop()\n           \
    \ else\n                brackets.push(stack.peek())\n            end\n       \
    \ else\n            brackets.push(current)\n        end\n    end\n    return stack.size\
    \ == 0\nend\n</cell>\n<code language=julia-1.5>\nis_nested(\"[][]\")\n</cell>\n\
    <code language=julia-1.5>\nis_nested(\"[]\")\n</cell>\n<code language=julia-1.5>\n\
    is_nested(\"[[][]]\")\n</cell>\n<code language=julia-1.5>\nis_nested(\"[[]][[\"\
    )\n</cell>\n<code language=julia-1.5>\nis_nested(\"[[]]\")\n</cell>\n<code language=julia-1.5>\n\
    is_nested(\"[][]\")\n</cell>\n<code language=julia-1.5>\nis_nested(\"[]\")\n</cell>\n\
    <code language=julia-1.5>\nis_nested(\"[[][]]\")\n</cell>\n<code language=julia-1.5>\n\
    is_nested(\"[[]][[\")\n</cell>\n<code language=julia-1.5>\nis_nested(\"[[]]\"\
    )\n</cell>\n<code language=julia-1.5>\nis_nested(\"[][]\")\n</cell>\n<code language=julia-1.5>\n\
    is_nested(\"[]\")\n</cell>\n<code language=julia-1.5>\nis_nested(\"[[][]]\")\n\
    </cell>\n<code language=julia-1.5>\nis_nested(\"[[]][[\")\n</cell>\n<code language=julia-1.5>\n\
    is_nested(\"[[]]\")\n</cell>\n<code language=julia-1.5>\nis_nested(\"[][]\")\n\
    </cell>\n<code language=julia-1.5>\nis_nested(\"[]\")\n</cell>\n<code language=julia-1.5>\n\
    is_nested(\"[[][]]\")\n</cell>\n<code language=julia-1.5>\nis_nested(\"[[]][[\"\
    )\n</cell>\n<code language=julia-1.5>\nis_nested(\"[[]]\")\n</cell>\n<code language=julia-1.5>\n\
    is_nested(\"[][]\")\n</cell>\n<code language=julia-1.5>\nis_nested(\"[]\")\n</cell>\n\
    <code language=julia-1.5>\nis_nested(\"[[][]]\")\n</cell>\n<code language=julia-",
  "    \n    stack::Vector{String} = []\n    \n    for c in string\n        if c ==\
    \ '['\n            push!(stack, c)\n        elseif c == ']'\n            if length(stack)\
    \ == 0\n                return false\n            elseif length(stack) == 1 &&\
    \ stack[1] == '['\n                pop!(stack)\n            else\n           \
    \     return false\n            end\n        else\n            push!(stack, c)\n\
    \        end\n    end\n    \n    return length(stack) == 0\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\n    Create a function that takes a string as input\
    \ which contains only square brackets.\n    The function should return True if\
    \ and only if there is a valid subsequence of brackets \n    where at least one\
    \ bracket in the subsequence is nested.", "    \n    stack = Stack()\n    \n \
    \   for c in string:\n        if c == '[':\n            stack.push(c)\n      \
    \  elif c == ']':\n            if stack.isEmpty():\n                return False\n\
    \            elif stack.pop() != '[':\n                return False\n        elif\
    \ stack.isEmpty():\n            return False\n    \n    return stack.isEmpty()\n\
    </cell>\n<text>\nExercise: Write a function that takes a string as input and returns\
    \ the number of times a substring appears in the string. \nFor example, if the\
    \ input string is \"abcabcbb\", the function should return 3 because the substring\
    \ \"abc\" appears 3 times.", "    \n    stack = Stack()\n    \n    for c in string:\n\
    \        if c == '[':\n            stack.push(c)\n        elif c == ']':\n   \
    \         if stack.pop() != '[':\n                return False\n        elif stack.pop()\
    \ != '[':\n            return False\n    return True\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string as input which contains only square\
    \ brackets.\nThe function should return True if and only if there is a valid subsequence\
    \ of brackets \nwhere at least one bracket in the subsequence is nested.", " \
    \   \n    stack = Stack()\n    stack.append(0)\n    \n    for c in string:\n \
    \       if c == '[':\n            stack.append(1)\n        elif c == ']':\n  \
    \          stack.pop()\n        elif stack.isEmpty():\n            return False\n\
    \        else:\n            stack.pop()\n            \n    return stack.isEmpty()\n\
    </cell>\n<cell>\nis_nested
  "    \n    stack = Stack()\n    \n    for c in string:\n        if c == '[':\n \
    \           stack.push(c)\n        elif c == ']':\n            if stack.pop()\
    \ != '[':\n                return False\n        elif stack.pop() != '[':\n  \
    \          return False\n    \n    return not stack.is_empty()\n</cell>\n<text>\n\
    Exercise\nWrite a function that takes a string as input which contains only square\
    \ brackets.\nThe function should return True if and only if there is a valid subsequence\
    \ of brackets \n    where at least one bracket in the subsequence is nested.",
  "    \n    stack = Stack()\n    \n    for char in string:\n        if char == '[':\n\
    \            stack.push(char)\n        elif char == ']':\n            if not stack.is_empty():\n\
    \                stack.pop()\n            else:\n                return False\n\
    \        elif char == '[':\n            stack.push(char)\n        elif char ==\
    \ ']':\n            if not stack.is_empty():\n                stack.pop()\n  \
    \          else:\n                return False\n        elif char == '[':\n  \
    \          stack.push(char)\n        elif char == ']':\n            if not stack.is_empty():\n\
    \                stack.pop()\n            else:\n                return False\n\
    \        elif char == '[':\n            stack.push(char)\n        elif char ==\
    \ ']':\n            if not stack.is_empty():\n                stack.pop()\n  \
    \          else:\n                return False\n        elif char == '[':\n  \
    \          stack.push(char)\n        elif char == ']':\n            if not stack.is_empty():\n\
    \                stack.pop()\n            else:\n                return False\n\
    \        elif char == '[':\n            stack.push(char)\n        elif char ==\
    \ ']':\n            if not stack.is_empty():\n                stack.pop()\n  \
    \          else:\n                return False\n        elif char == '[':\n  \
    \          stack.push(char)\n        elif char == ']':\n            if not stack.is_empty():\n\
    \                stack.pop()\n            else:\n                return False\n\
    \        elif char == '[':\n            stack.push(char)\n        elif char ==\
    \ ']':\n            if not stack.is_empty():\n                stack.pop()\n  \
    \          else:\n                return False\n        elif char == '[':\n  \
    \          stack.push(char)\n        elif char == ']':\n            if not stack.is_empty():\n\
    \                stack.pop()\n            else:\n                return False\n\
    \        elif char == '[':\n            stack.push(char)\n        elif char ==\
    \ ']':\n            if not stack.is_empty():\n                stack.pop()\n  \
    \          else:\n                return False\n        elif char == '[':\n  \
    \          stack.push(char)\n        elif char == ']':\n            if not stack.is_empty():\n\
    \                stack.pop()\n            else:\n                return False\n\
    \        elif char == '[':\n            stack.push(char)\n        elif char ==\
    \ ']':\n            if not stack.is_empty():\n                stack.pop()\n  \
    \          else:\n                return False\n        elif char == '[':\n  \
    \          stack.push(char)\n        elif char == ']':\n            if not stack.is_empty():\n\
    \                stack.pop()\n            else:\n                return False\n\
    \        elif char == '[':\n            stack.push(char)\n        elif char ==\
    \ ']':\n            if not stack.is_empty():\n                stack.pop()\n  \
    \          else:\n                return False\n        elif char == '[':\n  \
    \          stack.push(char)\n        elif char == ']':\n            if not stack.is_empty():\n\
    \                stack.pop()\n            else:\n                return False\n\
    \        elif char == '[':\n            stack.push(char)\n        elif char ==\
    \ ']':\n            if not stack.is_empty():\n                stack.pop()\n  \
    \          else:\n                return False\n        elif char", "    \n  \
    \  stack = Stack()\n    \n    for c in string:\n        if c == '[':\n       \
    \     stack.push(c)\n        elif c == ']':\n            if stack.top == '[':\n\
    \                stack.pop()\n            else:\n                return False\n\
    \        elif stack.isEmpty():\n            return False\n        else:\n    \
    \        top = stack.top()\n            if c == '[':\n                if top ==\
    \ '[':\n                    stack.pop()\n                else:\n             \
    \       return False\n            elif c == ']':\n                if top == '[':\n\
    \                    stack.pop()\n                else:\n                    return\
    \ False\n            elif top == '[':\n                stack.pop()\n         \
    \   else:\n                return False\n    return True", "    stack = Stack()\n\
    \    stack.append(0)\n    \n    for c in string:\n        if c == '[':\n     \
    \       stack.append(1)\n        elif c == '[':\n            stack.pop()\n   \
    \     elif c == ']':\n            if stack.pop() != 0:\n                return\
    \ False\n    return True", "    stack = Stack()\n    for c in string:\n      \
    \  if c == '[':\n            stack.push(c)\n        elif c == ']':\n         \
    \   if stack.is_empty():\n                return False\n            elif stack.pop()\
    \ != '[':\n                return False\n    return stack.is_empty()\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=string,python,brackets |>\n<code>\ndef check_brackets(s):\n\
    \    stack = []\n    open_brackets = ['[', '(', '{']\n    close_brackets = [']',\
    \ ')', '}']\n    for c in s:\n        if c in open_brackets:\n            stack.append(c)\n\
    \        elif c in close_brackets:\n            if not stack:\n              \
    \  return False\n            if stack.pop() != c:\n                return False\n\
    \    return not stack\n</code>\n<|/ a dscore=0 |>\n<| a tags=string,python,brackets\
    \ |>\n<code>\ndef check_brackets(s):\n    stack = []\n    open_brackets = ['[',\
    \ '(', '{']\n    close_brackets = [']', ')', '}']\n    for c in s:\n        if\
    \ c in open_brackets:\n            stack.append(c)\n        elif c in close_brackets:\n\
    \            if not stack:\n                return False\n            if stack.pop()\
    \ != c:\n                return False\n    return not stack\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nPlease don't post only code as an answer, but also provide an explanation\
    \ of what your code does and how it solves the problem of the question. Answers\
    \ with an explanation are usually more helpful and of better quality, and are\
    \ more likely to attract upvotes.\n<|/ c |>\n<| a dscore=0 |>\n<code>\ndef check_brackets(s):\n\
    \    stack = []\n    open_brackets = ['[', '(', '{']\n    close_brackets = [']',\
    \ ')', '}']\n    for c in s:\n        if c in open_brackets:\n            stack.append(c)\n\
    \        elif c in close_brackets:\n            if not stack:\n              \
    \  return False\n            if stack.pop() != c:\n                return False\n\
    \    return not stack\n</code>\n<|/ a tags=string,python,brackets |>\n<| a dscore=0\
    \ |>\n<code>\ndef check_brackets(s):\n    stack = []\n    open_brackets = ['[',\
    \ '(', '{']\n    close_brackets = [']', ')', '}']\n    for c in s:\n        if\
    \ c in open_brackets:\n            stack.append(c)\n        elif c in close_brackets:\n\
    \            if not stack:\n                return False\n", "    \n    stack\
    \ = Stack()\n    \n    for c in string:\n        if c == '[':\n            stack.push(c)\n\
    \        elif c == ']':\n            if not stack.is_empty():\n              \
    \  if stack.pop() == '[':\n                    return True\n                else:\n\
    \                    return False\n            else:\n                return False\n\
    \        else:\n            return False\n    \n    return stack.is_empty()\n\
    </cell>\n<code language=julia-1.5>\nis_nested(\"[][]\")\n</cell>\n<code language=julia-1.5>\n\
    is_nested(\"[[]]\")\n</cell>\n<code language=julia-1.5>\nis_nested(\"[]\")\n</cell>\n\
    <code language=julia-1.5>\nis_nested(\"[[][]]\")\n</cell>\n<code language=julia-1.5>\n\
    is_nested(\"[[]][[\")\n</cell>\n<code language=julia-1.5>\nis_nested(\"[[]]\"\
    )\n</cell>\n<code language=julia-1.5>\nis_nested(\"[][]\")\n</cell>\n<code language=julia-1.5>\n\
    is_nested(\"[]\")\n</cell>\n<code language=julia-1.5>\nis_nested(\"[[][]]\")\n\
    </cell>\n<code language=julia-1.5>\nis_nested(\"[[]][[\")\n</cell>\n<code language=julia-1.5>\n\
    is_nested(\"[[]]\")\n</cell>\n<code language=julia-1.5>\nis_nested(\"[][]\")\n\
    </cell>\n<code language=julia-1.5>\nis_nested(\"[]\")\n</cell>\n<code language=julia-1.5>\n\
    is_nested(\"[[][]]\")\n</cell>\n<code language=julia-1.5>\nis_nested(\"[[]][[\"\
    )\n</cell>\n<code language=julia-1.5>\nis_nested(\"[[]]\")\n</cell>\n<code language=julia-1.5>\n\
    is_nested(\"[][]\")\n</cell>\n<code language=julia-1.5>\nis_nested(\"[]\")\n</cell>\n\
    <code language=julia-1.5>\nis_nested(\"[[][]]\")\n</cell>\n<code language=julia-1.5>\n\
    is_nested(\"[[]][[\")\n</cell>\n<code language=julia-1.5>\nis_nested(\"[[]]\"\
    )\n</cell>\n<code language=julia-1.5>\nis_nested(\"[][]\")\n</cell>\n<code language=julia-1.5>\n\
    is_nested(\"[]\")\n</cell>\n<code language=julia-1.5>\nis_nested(\"[[][]]\")\n\
    </cell>\n<code language=julia-1.5>\nis_nested(\"[[]][[\")\n</cell>\n<code language=julia-1.5>\n\
    is_", "    \n    stack = Stack()\n    \n    for c in string:\n        if c ==\
    \ '[':\n            stack.push(c)\n        elif c == ']':\n            if not\
    \ stack.isEmpty():\n                stack.pop()\n            else:\n         \
    \       return False\n        elif stack.isEmpty():\n            return False\n\
    \        else:\n            stack.pop()\n            stack.push(c)\n         \
    \   \n    return stack.isEmpty()\n</cell>\n<code language=julia-1.5>\nis_nested(\"\
    [][]\")\n</cell>\n<code language=julia-1.5>\nis_nested(\"[]\")\n</cell>\n<code\
    \ language=julia-1.5>\nis_nested(\"[[]]\")\n</cell>\n<code language=julia-1.5>\n\
    is_nested(\"[[]][]\")\n</cell>\n<code language=julia-1.5>\nis_nested(\"[[]][][]\"\
    )\n</cell>\n<code language=julia-1.5>\nis_nested(\"[[]][][][]\")\n</cell>\n<code\
    \ language=julia-1.5>\nis_nested(\"[[]][][][][]\")\n</cell>\n<code language=julia-1.5>\n\
    is_nested(\"[[]][][][][][]\")\n</cell>\n<code language=julia-1.5>\nis_nested(\"\
    [[]][][][][][][]\")\n</cell>\n<code language=julia-1.5>\nis_nested(\"[[]][][][][][][][]\"\
    )\n</cell>\n<code language=julia-1.5>\nis_nested(\"[[]][][][][][][][][]\")\n</cell>\n\
    <code language=julia-1.5>\nis_nested(\"[[]][][][][][][][][][]\")\n</cell>\n<code\
    \ language=julia-1.5>\nis_nested(\"[[]][][][][][][][][][][]\")\n</cell>\n<code\
    \ language=julia-1.5>\nis_nested(\"[[]][][][][][][][][][][][][]\")\n</cell>\n\
    <code language=julia-1.5>\nis_nested(\"[[]][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][]",
  "    \n    stack = Stack()\n    stack.push(string)\n    \n    while stack.size >\
    \ 0\n        \n        current = stack.pop()\n        \n        if current ==\
    \ '['\n            stack.push(']')\n            stack.push('[')\n            \n\
    \        elif current == ']'\n            stack.push('[')\n            stack.push(']')\n\
    \            \n        else\n            stack.push(current)\n            \n \
    \   return stack.size == 0\nend", "    stack = Stack()\n    brackets = Stack()\n\
    \    brackets.push(string)\n    \n    while brackets.length() > 0 do\n       \
    \ current = brackets.pop()\n        if current == '[' then\n            stack.push(current)\n\
    \        elseif current == ']' then\n            if stack.length() == 0 then\n\
    \                return false\n            else\n                top = stack.pop()\n\
    \                if top == '[' then\n                    stack.push(top)\n   \
    \             elseif top == ']' then\n                    if stack.length() ==\
    \ 0 then\n                        return false\n                    else\n   \
    \                     top = stack.pop()\n                        if top == '['\
    \ then\n                            stack.push(top)\n                        elseif\
    \ top == ']' then\n                            if stack.length() == 0 then\n \
    \                               return false\n                            else\n\
    \                                top = stack.pop()\n                         \
    \       if top == '[' then\n                                    stack.push(top)\n\
    \                                elseif top == ']' then\n                    \
    \                if stack.length() == 0 then\n                               \
    \         return false\n                                    else\n           \
    \                             top = stack.pop()\n                            \
    \            if top == '[' then\n                                            stack.push(top)\n\
    \                                        elseif top == ']' then\n            \
    \                                if stack.length() == 0 then\n               \
    \                                 return false\n                             \
    \               else\n                                                top = stack.pop()\n\
    \                                                if top == '[' then\n        \
    \                                            stack.push(top)\n               \
    \                                 elseif top == ']' then\n                   \
    \                                 if stack.length() == 0 then\n              \
    \                                          return false\n                    \
    \                                else\n                                      \
    \                  top = stack.pop()\n                                       \
    \                 if top == '[' then\n                                       \
    \                     stack.push(top)\n                                      \
    \                  elseif top == ']' then\n                                  \
    \                          if stack.length() == 0 then\n                     \
    \                                           return false\n                   \
    \                                         else\n                             \
    \                                   top = stack.pop()\n                      \
    \                                          if top == '[' then\n              \
    \                                                      stack.push(top)\n     \
    \                                                           elseif top == ']'\
    \ then\n                                                                    if\
    \ stack.length() == 0 then\n                                                 \
    \                                                       return false\n       \
    \                                                             else\n         \
    \                                                               top = stack.pop()\n\
    \                                                                            \
    \            if top == '[' then\n                                            \
    \                stack.push(top)\n                                           \
    \             elseif top == ']' then\n                                       \
    \                     if stack.length() == 0 then\n                          \
    \                                      return false\n                        \
    \                                    else\n                                  \
    \                              top = stack.pop()\n                           \
    \                                     if top == '[' then\n                   \
    \                                                 stack.push(top)\n          \
    \                                                      elseif top == ']' then\n\
    \                                                                    if stack.length()\
    \ == 0 then\n                                                                \
    \        return false\n                                                      \
    \              else\n                                                        \
    \                top = stack.pop()\n                                         \
    \               if top == '[' then\n                                         \
    \                   stack.push(top)\n                                        \
    \                elseif top == ']' then\n                                    \
    \                        if stack.length() == 0 then\n                       \
    \                                         return false\n                     \
    \                                       else\n                               \
    \                                 top = stack.pop()\n                        \
    \                                        if top == '['", "    \n    stack = Stack()\n\
    \    stack.append(0)\n    \n    for c in string:\n        if c == '[':\n     \
    \       stack.append(1)\n        elif c == ']':\n            stack.pop()\n   \
    \     elif stack.isEmpty == False:\n            if stack.pop() != 1:\n       \
    \         return False\n    \n    return stack.isEmpty\n</cell>\n<cell>\n\"\"\"\
    \n    Create a function that takes a string as input which contains only square\
    \ brackets.\n    The function should return True if and only if there is a valid\
    \ subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.", "    \n    stack = Stack()\n    stack.append(0)\n    \n    for\
    \ c in string:\n        if c == '[':\n            stack.append(1)\n        elif\
    \ c == ']':\n            stack.pop()\n        elif stack.isEmpty():\n        \
    \    return False\n        else:\n            stack.pop()\n            \n    return\
    \ stack.isEmpty()\n</cell>\n<code language=julia-1.5>\nis_nested
  "    stack = Stack()\n    brackets = Stack()\n    brackets.push(string)\n    while\
    \ brackets.size > 0 do\n        current = brackets.pop()\n        if current ==\
    \ '[' then\n            stack.push(current)\n        elseif current == ']' then\n\
    \            if stack.size == 0 then\n                return false\n         \
    \   else\n                brackets.push(stack.pop())\n            end\n      \
    \  elseif current == '[' then\n            stack.push(current)\n        elseif\
    \ current == ']' then\n            if stack.size == 0 then\n                return\
    \ false\n            else\n                brackets.push(stack.pop())\n      \
    \      end\n        else\n            return false\n        end\n    end\n   \
    \ return true\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Create a function\
    \ that takes a string as input which contains only square brackets.\n    The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    \    where at least one bracket in the subsequence is nested.", "    \n    stack\
    \ = Stack()\n    \n    for char in string:\n        if char == '[':\n        \
    \    stack.push(char)\n        elif char == ']':\n            if stack.is_empty():\n\
    \                return False\n            elif stack.pop() != '[':\n        \
    \        return False\n            else:\n                stack.pop()\n      \
    \  elif char == '[':\n            if stack.is_empty():\n                return\
    \ False\n            elif stack.pop() != '[':\n                return False\n\
    \            else:\n                stack.push(char)\n        elif char == ']':\n\
    \            if stack.is_empty():\n                return False\n            elif\
    \ stack.pop() != '[':\n                return False\n            else:\n     \
    \           stack.push(char)\n        elif char == '[':\n            if stack.is_empty():\n\
    \                return False\n            elif stack.pop() != '[':\n        \
    \        return False\n            else:\n                stack.push(char)\n \
    \       elif char == ']':\n            if stack.is_empty():\n                return\
    \ False\n            elif stack.pop() != '[':\n                return False\n\
    \            else:\n                stack.push(char)\n        elif char == '[':\n\
    \            if stack.is_empty():\n                return False\n            elif\
    \ stack.pop() != '[':\n                return False\n            else:\n     \
    \           stack.push(char)\n        elif char == ']':\n            if stack.is_empty():\n\
    \                return False\n            elif stack.pop() != '[':\n        \
    \        return False\n            else:\n                stack.push(char)\n \
    \       elif char == '[':\n            if stack.is_empty():\n                return\
    \ False\n            elif stack.pop() != '[':\n                return False\n\
    \            else:\n                stack.push(char)\n        elif char == ']':\n\
    \            if stack.is_empty():\n                return False\n            elif\
    \ stack.pop() != '[':\n                return False\n            else:\n     \
    \           stack.push(char)\n        elif char == '[':\n            if stack.is_empty():\n\
    \                return False\n            elif stack.pop() != '[':\n        \
    \        return False\n            else:\n                stack.push(char)\n \
    \       elif char == ']':\n            if stack.is_empty():\n                return\
    \ False\n            elif stack.pop() != '[':\n                return False\n\
    \            else:\n                stack.push(char)\n        elif char == '[':\n\
    \            if stack.is_empty():\n                return False\n            elif\
    \ stack.pop() != '[':\n                return False\n            else:\n     \
    \           stack.push(char)\n        elif char == ']':\n            if stack.is_empty():\n\
    \                return False\n            elif stack.pop() != '[':\n        \
    \        return False\n            else:\n                stack.push(char)\n \
    \       elif char == '[':\n            if stack.is_empty():\n                return\
    \ False\n            elif stack.pop() != '[':\n                return False\n\
    \            else:\n                stack.push(char)\n        elif char == ']':\n\
    \            if stack.is_empty():\n                return False\n            elif\
    \ stack.pop() != '[':\n                return False\n            else:\n     \
    \           stack.push(char)\n        elif char == '[':\n            if stack.is_empty():\n\
    \                return False\n            elif stack.pop() != '[':\n        \
    \        return False", "    \n    stack::Vector[String] = Vector.empty\n    \n\
    \    for c in string:\n        if c == '[':\n            stack := stack + [c]\n\
    \        elif c == ']':\n            if stack.length == 0 then return False\n\
    \            stack = stack - [c]\n        else if stack.length > 0 then\n    \
    \        if stack[stack.length-1] == '[' then return False\n            stack\
    \ = stack - [c]\n        else return False\n    \n    return stack.length == 0\n\
    end\n</cell>\n<code language=julia-1.5>\nis_nested(\"[[]]\") \u279E true\nis_nested(\"\
    []]]]]]][[[[[]\") \u279E false\nis_nested(\"[][]\") \u279E false\nis_nested(\"\
    []\") \u279E false\nis_nested(\"[[][]]\") \u279E true\nis_nested(\"[[]][[\") \u279E\
    \ true\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string as input\
    \ which contains only square brackets.\nThe function should return True if and\
    \ only if there is a valid subsequence of brackets \nwhere at least one bracket\
    \ in the subsequence is nested.", "    \n    stack = Stack()\n    stack.push(\"\
    [\")\n    \n    for c in string:\n        if c == \"[\":\n            stack.push(c)\n\
    \        elif c == \"]\":\n            if stack.is_empty():\n                return\
    \ False\n            else:\n                stack.pop()\n        elif stack.is_empty():\n\
    \            return False\n        else:\n            stack.pop()\n          \
    \  stack.push(c)\n            \n    return stack.is_empty()\n</cell>\n<code language=julia-1.5>\n\
    is_nested(\"[[]]\") \u279E True\nis_nested(\"[]]]]]]][[[[[]\") \u279E False\n\
    is_nested(\"[][]\") \u279E False\nis_nested(\"[]\") \u279E False\nis_nested(\"\
    [[][]]\") \u279E True\nis_nested(\"[[]][[\") \u279E True\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string as input which contains only square\
    \ brackets.\nThe function should return True if and only if there is a valid subsequence\
    \ of brackets \nwhere at least one bracket in the subsequence is nested.", " \
    \   \n    stack = Stack()\n    \n    for char in string:\n        if char == '[':\n\
    \            stack.push(char)\n        elif char == ']':\n            if stack.is_empty():\n\
    \                return False\n            else:\n                stack.pop()\n\
    \        else:\n            if stack.is_empty():\n                return False\n\
    \            else:\n                stack.pop()\n                stack.push(char)\n\
    \                \n    return stack.is_empty()\n</cell>\n<code language=julia-1.5>\n\
    is_nested(\"[][]\")\n</cell>\n<code language=julia-1.5>\nis_nested(\"[]\")\n</cell>\n\
    <code language=julia-1.5>\nis_nested(\"[[]]\")\n</cell>\n<code language=julia-1.5>\n\
    is_nested(\"[[]][]\")\n</cell>\n<code language=julia-1.5>\nis_nested(\"[[]][][]\"\
    )\n</cell>\n<code language=julia-1.5>\nis_nested(\"[[]][][][]\")\n</cell>\n<code\
    \ language=julia-1.5>\nis_nested(\"[[]][][][][]\")\n</cell>\n<code language=julia-1.5>\n\
    is_nested(\"[[]][][][][][]\")\n</cell>\n<code language=julia-1.5>\nis_nested(\"\
    [[]][][][][][][]\")\n</cell>\n<code language=julia-1.5>\nis_nested(\"[[]][][][][][][][]\"\
    )\n</cell>\n<code language=julia-1.5>\nis_nested(\"[[]][][][][][][][][]\")\n</cell>\n\
    <code language=julia-1.5>\nis_nested(\"[[]][][][][][][][][][][]\")\n</cell>\n\
    <code language=julia-1.5>\nis_nested(\"[[]][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][]",
  "    \n    stack = Stack()\n    \n    for char in string:\n        if char == '[':\n\
    \            stack.push(char)\n        elif char == ']':\n            if not stack.isEmpty():\n\
    \                stack.pop()\n            else:\n                return False\n\
    \        elif char == '[':\n            stack.push(char)\n        elif char ==\
    \ ']':\n            if not stack.isEmpty():\n                stack.pop()\n   \
    \         else:\n                return False\n        elif char == '[':\n   \
    \         stack.push(char)\n        elif char == ']':\n            if not stack.isEmpty():\n\
    \                stack.pop()\n            else:\n                return False\n\
    \        elif char == '[':\n            stack.push(char)\n        elif char ==\
    \ ']':\n            if not stack.isEmpty():\n                stack.pop()\n   \
    \         else:\n                return False\n        elif char == '[':\n   \
    \         stack.push(char)\n        elif char == ']':\n            if not stack.isEmpty():\n\
    \                stack.pop()\n            else:\n                return False\n\
    \        elif char == '[':\n            stack.push(char)\n        elif char ==\
    \ ']':\n            if not stack.isEmpty():\n                stack.pop()\n   \
    \         else:\n                return False\n        elif char == '[':\n   \
    \         stack.push(char)\n        elif char == ']':\n            if not stack.isEmpty():\n\
    \                stack.pop()\n            else:\n                return False\n\
    \        elif char == '[':\n            stack.push(char)\n        elif char ==\
    \ ']':\n            if not stack.isEmpty():\n                stack.pop()\n   \
    \         else:\n                return False\n        elif char == '[':\n   \
    \         stack.push(char)\n        elif char == ']':\n            if not stack.isEmpty():\n\
    \                stack.pop()\n            else:\n                return False\n\
    \        elif char == '[':\n            stack.push(char)\n        elif char ==\
    \ ']':\n            if not stack.isEmpty():\n                stack.pop()\n   \
    \         else:\n                return False\n        elif char == '[':\n   \
    \         stack.push(char)\n        elif char == ']':\n            if not stack.isEmpty():\n\
    \                stack.pop()\n            else:\n                return False\n\
    \        elif char == '[':\n            stack.push(char)\n        elif char ==\
    \ ']':\n            if not stack.isEmpty():\n                stack.pop()\n   \
    \         else:\n                return False\n        elif char == '[':\n   \
    \         stack.push(char)\n        elif char == ']':\n            if not stack.isEmpty():\n\
    \                stack.pop()\n            else:\n                return False\n\
    \        elif char == '[':\n            stack.push(char)\n        elif char ==\
    \ ']':\n            if not stack.isEmpty():\n                stack.pop()\n   \
    \         else:\n                return False\n        elif char == '[':\n   \
    \         stack.push(char)\n        elif char == ']':\n            if not stack.isEmpty():\n\
    \                stack.pop()\n            else:\n                return False\n\
    \        elif char == '[':\n            stack.push(char)\n        elif char ==\
    \ ']':\n            if not stack.isEmpty():\n                stack.pop()\n   \
    \         else:\n                return False\n        elif char", "    \n   \
    \ stack = Stack()\n    stack.push([string])\n    \n    while stack.size > 0\n\
    \        \n        current = stack.pop()\n        \n        if current.size ==\
    \ 0\n            return true\n        \n        if current.size == 1\n       \
    \     if current[0] == '['\n                stack.push([current[1:]])\n      \
    \      elseif current[0] == '('\n                stack.push([current[1:]])\n \
    \           elseif current[0] == '{'\n                stack.push([current[1:]])\n\
    \            elseif current[0] == '}'\n                stack.push([current[1:]])\n\
    \            elseif current[0] == '\"'\n                stack.push([current[1:]])\n\
    \            elseif current[0] == '\\'' \n                stack.push([current[1:]])\n\
    \            elseif current[0] == '`' \n                stack.push([current[1:]])\n\
    \            elseif current[0] == '\\t'\n                stack.push([current[1:]])\n\
    \            elseif current[0] == '\\n'\n                stack.push([current[1:]])\n\
    \            elseif current[0] == '\\r'\n                stack.push([current[1:]])\n\
    \            elseif current[0] == '\\v'\n                stack.push([current[1:]])\n\
    \            elseif current[0] == '\\f'\n                stack.push([current[1:]])\n\
    \            elseif current[0] == '\\a'\n                stack.push([current[1:]])\n\
    \            elseif current[0] == '\\e'\n                stack.push([current[1:]])\n\
    \            elseif current[0] == '\\c'\n                stack.push([current[1:]])\n\
    \            elseif current[0] == '\\b'\n                stack.push([current[1:]])\n\
    \            elseif current[0] == '\\f'\n                stack.push([current[1:]])\n\
    \            elseif current[0] == '\\r'\n                stack.push([current[1:]])\n\
    \            elseif current[0] == '\\n'\n                stack.push([current[1:]])\n\
    \            elseif current[0] == '\\v'\n                stack.push([current[1:]])\n\
    \            elseif current[0] == '\\f'\n                stack.push([current[1:]])\n\
    \            elseif current[0] == '\\r'\n                stack.push([current[1:]])\n\
    \            elseif current[0] == '\\a'\n                stack.push([current[1:]])\n\
    \            elseif current[0] == '\\e'\n                stack.push([current[1:]])\n\
    \            elseif current[0] == '\\c'\n                stack.push([current[1:]])\n\
    \            elseif current[0] == '\\b'\n                stack.push([current[1:]])\n\
    \            elseif current[0] == '\\f'\n                stack.push([current[1:]])\n\
    \            elseif current[0] == '\\r'\n                stack.push([current[1:]])\n\
    \            elseif current[0] == '\\a'\n                stack.push([current[1:]])\n\
    \            elseif current[0] == '\\e", "    \n    stack = Stack()\n    \n  \
    \  for char in string:\n        if char == '[':\n            stack.push(char)\n\
    \        elif char == ']':\n            if stack.size == 0: return False\n   \
    \         stack.pop()\n        elif char == '[' or char == ']':\n            if\
    \ stack.size == 0: return False\n            stack.pop()\n            stack.pop()\n\
    \            \n    return stack.size == 0", "    \n    stack::Vector[String] =\
    \ Vector.empty\n    \n    for c in string:\n        if c == '[':\n           \
    \ stack := stack :+ c\n        elif c == ']':\n            if len(stack) == 0:\
    \ return False\n            stack = stack[1..]\n        elif c == ']':\n     \
    \       if len(stack) == 0: return False\n            stack = stack[1..]\n   \
    \     elif c == '[':\n            stack := stack :+ c\n        elif c == ']':\n\
    \            if len(stack) == 0: return False\n            stack = stack[1..]\n\
    \        elif c == '[':\n            stack := stack :+ c\n        elif c == ']':\n\
    \            if len(stack) == 0: return False\n            stack = stack[1..]\n\
    \        elif c == '[':\n            stack := stack :+ c\n        elif c == ']':\n\
    \            if len(stack) == 0: return False\n            stack = stack[1..]\n\
    \        elif c == '[':\n            stack := stack :+ c\n        elif c == ']':\n\
    \            if len(stack) == 0: return False\n            stack = stack[1..]\n\
    \        elif c == '[':\n            stack := stack :+ c\n        elif c == ']':\n\
    \            if len(stack) == 0: return False\n            stack = stack[1..]\n\
    \        elif c == '[':\n            stack := stack :+ c\n        elif c == ']':\n\
    \            if len(stack) == 0: return False\n            stack = stack[1..]\n\
    \        elif c == '[':\n            stack := stack :+ c\n        elif c == ']':\n\
    \            if len(stack) == 0: return False\n            stack = stack[1..]\n\
    \        elif c == '[':\n            stack := stack :+ c\n        elif c == ']':\n\
    \            if len(stack) == 0: return False\n            stack = stack[1..]\n\
    \        elif c == '[':\n            stack := stack :+ c\n        elif c == ']':\n\
    \            if len(stack) == 0: return False\n            stack = stack[1..]\n\
    \        elif c == '[':\n            stack := stack :+ c\n        elif c == ']':\n\
    \            if len(stack) == 0: return False\n            stack = stack[1..]\n\
    \        elif c == '[':\n            stack := stack :+ c\n        elif c == ']':\n\
    \            if len(stack) == 0: return False\n            stack = stack[1..]\n\
    \        elif c == '[':\n            stack := stack :+ c\n        elif c == ']':\n\
    \            if len(stack) == 0: return False\n            stack = stack[1..]\n\
    \        elif c == '[':\n            stack := stack :+ c\n        elif c == ']",
  "    \n    stack = Stack()\n    stack.append(0)\n    \n    for c in string:\n  \
    \      if c == '[':\n            stack.append(1)\n        elif c == ']':\n   \
    \         stack.pop()\n        elif stack.isEmpty():\n            return False\n\
    \        else:\n            stack.pop()\n            \n    return stack.isEmpty()\n\
    </cell>\n<text>\nExercise\nWrite a function that takes a string as input which\
    \ contains only square brackets.\nThe function should return True if and only\
    \ if there is a valid subsequence of brackets \nwhere at least one bracket in\
    \ the subsequence is nested.", "    \n    stack = Stack()\n    \n    for char\
    \ in string:\n        if char == '[':\n            stack.push(char)\n        elif\
    \ char == ']':\n            if stack.is_empty():\n                return False\n\
    \            else:\n                stack.pop()\n        elif char == '[' or char\
    \ == ']':\n            if stack.is_empty():\n                return False\n  \
    \          else:\n                stack.pop()\n                stack.push(char)\n\
    \    \n    return stack.is_empty()\n</cell>\n<text>\nExercise 4\nWrite a function\
    \ that takes a string as input and returns the number of times a substring appears\
    \ in the string.", "    \n    stack = Stack()\n    \n    for char in string:\n\
    \        if char == '[':\n            stack.push(char)\n        elif char == ']':\n\
    \            if stack.is_empty():\n                return False\n            elif\
    \ stack.top() != '[':\n                return False\n            else:\n     \
    \           stack.pop()\n        elif char == '[':\n            if stack.is_empty():\n\
    \                return False\n            elif stack.top() != '[':\n        \
    \        return False\n            else:\n                stack.pop()\n      \
    \  elif char == ']':\n            if stack.is_empty():\n                return\
    \ False\n            elif stack.top() != '[':\n                return False\n\
    \            else:\n                stack.pop()\n        elif char == '[':\n \
    \           if stack.is_empty():\n                return False\n            elif\
    \ stack.top() != '[':\n                return False\n            else:\n     \
    \           stack.pop()\n        elif char == ']':\n            if stack.is_empty():\n\
    \                return False\n            elif stack.top() != '[':\n        \
    \        return False\n            else:\n                stack.pop()\n      \
    \  else:\n            return False\n    \n    return stack.is_empty()\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a string as input and returns\
    \ the number of nested brackets.", "    \n    brackets = string.count('[')::Int\n\
    \    \n    if brackets == 0 \n        then return True\n    else if brackets ==\
    \ string.count(']') \n        then return True\n    else if brackets == string.count(']')\
    \ \n        then return True\n    else if brackets == string.count(']') \n   \
    \     then return True\n    else if brackets == string.count(']') \n        then\
    \ return True\n    else if brackets == string.count(']') \n        then return\
    \ True\n    else if brackets == string.count(']') \n        then return True\n\
    \    else if brackets == string.count(']') \n        then return True\n    else\
    \ if brackets == string.count(']') \n        then return True\n    else if brackets\
    \ == string.count(']') \n        then return True\n    else if brackets == string.count(']')\
    \ \n        then return True\n    else if brackets == string.count(']') \n   \
    \     then return True\n    else if brackets == string.count(']') \n        then\
    \ return True\n    else if brackets == string.count(']') \n        then return\
    \ True\n    else if brackets == string.count(']') \n        then return True\n\
    \    else if brackets == string.count(']') \n        then return True\n    else\
    \ if brackets == string.count(']') \n        then return True\n    else if brackets\
    \ == string.count(']') \n        then return True\n    else if brackets == string.count(']')\
    \ \n        then return True\n    else if brackets == string.count(']') \n   \
    \     then return True\n    else if brackets == string.count(']') \n        then\
    \ return True\n    else if brackets == string.count(']') \n        then return\
    \ True\n    else if brackets == string.count(']') \n        then return True\n\
    \    else if brackets == string.count(']') \n        then return True\n    else\
    \ if brackets == string.count(']') \n        then return True\n    else if brackets\
    \ == string.count(']') \n        then return True\n    else if brackets == string.count(']')\
    \ \n        then return True\n    else if brackets == string.count(']') \n   \
    \     then return True\n    else if brackets == string.count(']') \n        then\
    \ return True\n    else if brackets == string.count(']') \n        then return\
    \ True\n    else if brackets == string.count(']') \n        then return True\n\
    \    else if brackets == string.count", "    \n    stack = Stack()\n    \n   \
    \ for char in string:\n        if char == '[':\n            stack.push(char)\n\
    \        elif char == ']':\n            if not stack.is_empty():\n           \
    \     if stack.pop() == '[':\n                    return True\n            else:\n\
    \                return False\n        else:\n            return False\n    \n\
    \    return stack.is_empty()\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a string as input and returns the number of times a substring appears\
    \ in the string.", "    \n    stack = Stack()\n    \n    for c in string:\n  \
    \      if c == '[':\n            stack.push(c)\n        elif c == ']':\n     \
    \       if stack.isEmpty():\n                return False\n            elif stack.peek()\
    \ == '[':\n                stack.pop()\n            else:\n                stack.pop()\n\
    \                stack.push(c)\n        elif stack.isEmpty():\n            return\
    \ False\n        else:\n            stack.pop()\n            stack.push(c)\n \
    \           \n    return stack.isEmpty()\n</cell>\n<code language=julia-1.5>\n\
    is_nested('[[]]') \u279E True\nis_nested('[]]]]]]][[[[[]') \u279E False\nis_nested('[][]')\
    \ \u279E False\nis_nested('[]') \u279E False\nis_nested('[[][]]') \u279E True\n\
    is_nested('[[]][[') \u279E True\n</cell>\n<text>\nExercise\nWrite a function that\
    \ takes a string as input which contains only square brackets.\nThe function should\
    \ return True if and only if there is a valid subsequence of brackets \nwhere\
    \ at least one bracket in the subsequence is nested.", "    \n    stack = Stack()\n\
    \    \n    for char in string:\n        if char == '[':\n            stack.push(char)\n\
    \        elif char == ']':\n            if not stack.is_empty():\n           \
    \     if stack.pop() != '[':\n                    return False\n            else:\n\
    \                return False\n        elif char == '[':\n            stack.push(char)\n\
    \        elif char == ']':\n            if not stack.is_empty():\n           \
    \     if stack.pop() != '[':\n                    return False\n            else:\n\
    \                return False\n        else:\n            return False\n    return\
    \ True\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string as input\
    \ and returns the number of times a substring appears in the string.", "    \n\
    \    stack = Stack()\n    \n    for c in string:\n        if c == '[':\n     \
    \       stack.push(c)\n        elif c == ']':\n            if stack.is_empty():\n\
    \                return False\n            elif stack.top() == '[':\n        \
    \        stack.pop()\n            else:\n                stack.pop()\n       \
    \         stack.push(c)\n        else:\n            stack.push(c)\n          \
    \  \n    return stack.is_empty()\n</cell>\n<code language=julia-1.5>\n\"\"\"\n\
    \    Create a function that takes a string as input which contains only square\
    \ brackets.\n    The function should return True if and only if there is a valid\
    \ subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.", "    \n    stack = Stack()\n    stack.push(string)\n    \n    while\
    \ stack.size > 0\n        \n        current = stack.pop()\n        \n        if\
    \ current == '['\n            stack.push(current + current)\n            stack.push(current\
    \ + current)\n            stack.push(current + current)\n            stack.push(current\
    \ + current)\n            stack.push(current + current)\n            stack.push(current\
    \ + current)\n            stack.push(current + current)\n            stack.push(current\
    \ + current)\n            stack.push(current + current)\n            stack.push(current\
    \ + current)\n            stack.push(current + current)\n            stack.push(current\
    \ + current)\n            stack.push(current + current)\n            stack.push(current\
    \ + current)\n            stack.push(current + current)\n            stack.push(current\
    \ + current)\n            stack.push(current + current)\n            stack.push(current\
    \ + current)\n            stack.push(current + current)\n            stack.push(current\
    \ + current)\n            stack.push(current + current)\n            stack.push(current\
    \ + current)\n            stack.push(current + current)\n            stack.push(current\
    \ + current)\n            stack.push(current + current)\n            stack.push(current\
    \ + current)\n            stack.push(current + current)\n            stack.push(current\
    \ + current)\n            stack.push(current + current)\n            stack.push(current\
    \ + current)\n            stack.push(current + current)\n            stack.push(current\
    \ + current)\n            stack.push(current + current)\n            stack.push(current\
    \ + current)\n            stack.push(current + current)\n            stack.push(current\
    \ + current)\n            stack.push(current + current)\n            stack.push(current\
    \ + current)\n            stack.push(current + current)\n            stack.push(current\
    \ + current)\n            stack.push(current + current)\n            stack.push(current\
    \ + current)\n            stack.push(current + current)\n            stack.push(current\
    \ + current)\n            stack.push(current + current)\n            stack.push(current\
    \ + current)\n            stack.push(current + current)\n            stack.push(current\
    \ + current)\n            stack.push(current + current)\n            stack.push(current\
    \ + current)\n            stack.push(current + current)\n            stack.push(current\
    \ + current)\n            stack.push(current + current)\n            stack.push(current\
    \ + current)\n            stack.push(current + current)\n            stack.push(current\
    \ + current)\n            stack.push(current + current)\n            stack.push(current\
    \ + current)\n            stack.push(current + current)\n            stack.push(current\
    \ + current", "    \n    stack::Vector{String} = []\n    \n    for c in string\n\
    \        if c == '['\n            push!(stack, c)\n        elseif c == ']'\n \
    \           if isempty(stack)\n                return false\n            else\n\
    \                pop!(stack)\n            end\n        elseif c == '['\n     \
    \       if isempty(stack)\n                return false\n            else\n  \
    \              pop!(stack)\n            end\n        end\n    end\n    return\
    \ true\nend\n</cell>\n<code language=julia-1.5>\nis_nested
  "    \n    stack = Stack()\n    stack.append(0)\n    \n    for c in string:\n  \
    \      if c == '[':\n            stack.append(1)\n        elif c == ']':\n   \
    \         stack.pop()\n        elif stack.isEmpty == True:\n            return\
    \ False\n        else:\n            stack.pop()\n            \n    return stack.isEmpty\
    \ == False\n</code>\n<|/ a tags=python,algorithm |>\n<| c |>\nI believe this solution\
    \ fails for `is_nested
  "    stack = Stack()\n    brackets = Stack()\n    brackets.push(string)\n    while\
    \ brackets.count > 0 do\n        current = brackets.pop()\n        if current\
    \ == '[' then\n            stack.push(current)\n        elseif current == ']'\
    \ then\n            if stack.count > 0 then\n                brackets.push(stack.pop())\n\
    \            else\n                return false\n            end\n        elseif\
    \ current == '[' then\n            stack.push(current)\n        elseif current\
    \ == ']' then\n            if stack.count > 0 then\n                brackets.push(stack.pop())\n\
    \            else\n                return false\n            end\n        elseif\
    \ current == '[' then\n            stack.push(current)\n        elseif current\
    \ == ']' then\n            if stack.count > 0 then\n                brackets.push(stack.pop())\n\
    \            else\n                return false\n            end\n        else\n\
    \            return false\n        end\n    end\n    return true\nend\n</cell>\n\
    <code language=julia-1.5>\nis_nested(\"[[]]\")\n</cell>\n<code language=julia-1.5>\n\
    is_nested(\"[]]]]]]][[[[[]\")\n</cell>\n<code language=julia-1.5>\nis_nested(\"\
    [][]\")\n</cell>\n<code language=julia-1.5>\nis_nested(\"[]\")\n</cell>\n<code\
    \ language=julia-1.5>\nis_nested(\"[[][]]\")\n</cell>\n<code language=julia-1.5>\n\
    is_nested(\"[[]][[\")\n</cell>\n<code language=julia-1.5>\nis_nested(\"[[]][[[]\"\
    )\n</cell>\n<code language=julia-1.5>\nis_nested(\"[[]][[[][]\")\n</cell>\n<code\
    \ language=julia-1.5>\nis_nested(\"[[]][[[][][]\")\n</cell>\n<code language=julia-1.5>\n\
    is_nested(\"[[]][[[][][][]\")\n</cell>\n<code language=julia-1.5>\nis_nested(\"\
    [[]][[[][][][][]\")\n</cell>\n<code language=julia-1.5>\nis_nested(\"[[]][[[][][][][][]\"\
    )\n</cell>\n<code language=julia-1.5>\nis_nested(\"[[]][[[][][][][][][]\")\n</cell>\n\
    <code language=julia-1.5>\nis_nested(\"[[]][[[][][][][][][][]\")\n</cell>\n<code\
    \ language=julia-1.5>\nis_nested(\"[[]][[[][][][][][][][][]\")\n</cell>\n<code\
    \ language=julia-", "    \n    stack = Stack()\n    stack.push(0)\n    \n    for\
    \ c in string:\n        if c == '[':\n            stack.push(1)\n        elif\
    \ c == ']':\n            stack.push(-1)\n        elif stack.top == 1 and c ==\
    \ '[':\n            stack.push(-1)\n        elif stack.top == -1 and c == ']':\n\
    \            stack.push(1)\n        elif stack.top == 1 and c == '[':\n      \
    \      stack.push(-1)\n        elif stack.top == -1 and c == ']':\n          \
    \  stack.push(1)\n        elif stack.top == 1 and c == ']':\n            stack.push(-1)\n\
    \        elif stack.top == -1 and c == '[':\n            stack.push(1)\n     \
    \   elif stack.top == 1 and c == '[':\n            stack.push(-1)\n        elif\
    \ stack.top == -1 and c == '[':\n            stack.push(1)\n        elif stack.top\
    \ == 1 and c == ']':\n            stack.push(-1)\n        elif stack.top == -1\
    \ and c == ']':\n            stack.push(1)\n        elif stack.top == 1 and c\
    \ == '[':\n            stack.push(-1)\n        elif stack.top == -1 and c == '[':\n\
    \            stack.push(1)\n        elif stack.top == 1 and c == ']':\n      \
    \      stack.push(-1)\n        elif stack.top == -1 and c == '[':\n          \
    \  stack.push(1)\n        elif stack.top == 1 and c == ']':\n            stack.push(-1)\n\
    \        elif stack.top == -1 and c == ']':\n            stack.push(1)\n     \
    \   elif stack.top == 1 and c == '[':\n            stack.push(-1)\n        elif\
    \ stack.top == -1 and c == '[':\n            stack.push(1)\n        elif stack.top\
    \ == 1 and c == ']':\n            stack.push(-1)\n        elif stack.top == -1\
    \ and c == ']':\n            stack.push(1)\n        elif stack.top == 1 and c\
    \ == '[':\n            stack.push(-1)\n        elif stack.top == -1 and c == '[':\n\
    \            stack.push(1)\n        elif stack.top == 1 and c == ']':\n      \
    \      stack.push(-1)\n        elif stack.top == -1 and c == ']':\n          \
    \  stack.push(1)\n        elif stack.top == 1 and c == '[':\n            stack.push(-1)\n\
    \        elif stack.top == -1 and c == '[':\n            stack.push(1)\n     \
    \   elif stack.top == 1 and c == ']':\n            stack.push(-1)\n        elif\
    \ stack.top == -1 and c == ']':\n            stack.push(1)\n        elif stack.top\
    \ == 1 and c == '[':\n            stack.push(-1)\n        elif stack.top == -1\
    \ and c == '[':\n            stack.push(1)\n        elif stack.top == 1 and c\
    \ == ']':\n            stack.push(-1)\n        elif stack.top == -1 and c == ",
  "    \n    stack = Stack()\n    \n    for c in string:\n        if c == '[':\n \
    \           stack.push(c)\n        elif c == ']':\n            if stack.isEmpty():\n\
    \                return False\n            elif stack.peek() == '[':\n       \
    \         stack.pop()\n            else:\n                stack.pop()\n      \
    \          stack.push(c)\n        elif stack.isEmpty():\n            return False\n\
    \        else:\n            stack.pop()\n            stack.push(c)\n         \
    \   \n    return stack.isEmpty()\n</cell>\n<code language=julia-1.5>\nis_nested
  "    \n    stack = Stack()\n    \n    for c in string:\n        if c == '[':\n \
    \           stack.push(c)\n        elif c == ']':\n            if not stack.isEmpty():\n\
    \                if stack.pop() == '[':\n                    return True\n   \
    \         else:\n                return False\n        else:\n            stack.push(c)\n\
    \    return stack.isEmpty()\n</cell>\n<cell>\nis_nested('[[]]') \u279E True\n\
    is_nested('[]]]]]]][[[[[]') \u279E False\nis_nested('[][]') \u279E False\nis_nested('[]')\
    \ \u279E False\nis_nested('[[][]]') \u279E True\nis_nested('[[]][[') \u279E True\n\
    </cell>\n<text>\nExercise\nWrite a function that takes a string as input which\
    \ contains only square brackets.\nThe function should return True if and only\
    \ if there is a valid subsequence of brackets \n    where at least one bracket\
    \ in the subsequence is nested.", "    \n    stack = Stack()\n    \n    for c\
    \ in string:\n        if c == '[':\n            stack.push(c)\n        elif c\
    \ == ']':\n            if not stack.is_empty():\n                if stack.pop()\
    \ != '[':\n                    return False\n            else:\n             \
    \   return False\n        elif c == ']':\n            if not stack.is_empty():\n\
    \                if stack.pop() != '[':\n                    return False\n  \
    \          else:\n                return False\n        else:\n            return\
    \ False\n    \n    return not stack.is_empty()\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a string as input and returns the number of times\
    \ a substring appears in the string.", "    \n    stack = Stack()\n    \n    for\
    \ c in string:\n        if c == '[':\n            stack.push(c)\n        elif\
    \ c == ']':\n            if not stack.is_empty():\n                if stack.pop()\
    \ != '[':\n                    return False\n            else:\n             \
    \   return False\n        else:\n            return False\n    \n    return not\
    \ stack.is_empty()\n</cell>\n<code language=julia-1.5>\nis_nested('[[]]') \u279E\
    \ True\nis_nested('[]]]]]]][[[[[]') \u279E False\nis_nested('[][]') \u279E False\n\
    is_nested('[]') \u279E False\nis_nested('[[][]]') \u279E True\nis_nested('[[]][[')\
    \ \u279E True\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ as input which contains only square brackets.\nThe function should return True\
    \ if and only if there is a valid subsequence of brackets \nwhere at least one\
    \ bracket in the subsequence is nested.", "    \n    stack = Stack()\n    \n \
    \   for c in string:\n        if c == '[':\n            stack.push(c)\n      \
    \  elif c == ']':\n            if stack.pop() == '[':\n                return\
    \ True\n            else:\n                return False\n        else:\n     \
    \       return False\n    \n    return stack.is_empty()\n</cell>\n<text>\nExercise\
    \ 4\nWrite a function that takes a string as input and returns the number of characters\
    \ in the string that are valid brackets.", "    \n    stack = Stack()\n    \n\
    \    for c in string:\n        if c == '[':\n            stack.push(c)\n     \
    \   elif c == ']':\n            if stack.isEmpty():\n                return False\n\
    \            elif stack.pop() != '[':\n                return False\n        \
    \    else:\n                stack.pop()\n        elif stack.isEmpty():\n     \
    \       return False\n        else:\n            stack.pop()\n            stack.push(c)\n\
    \            \n    return stack.isEmpty()\n</cell>\n<code language=julia-1.5>\n\
    is_nested(\"[][]\")\n</cell>\n<code language=julia-1.5>\nis_nested(\"[]\")\n</cell>\n\
    <code language=julia-1.5>\nis_nested(\"[[][]]\")\n</cell>\n<code language=julia-1.5>\n\
    is_nested(\"[[]]\")\n</cell>\n<code language=julia-1.5>\nis_nested(\"[[][[]]]\"\
    )\n</cell>\n<code language=julia-1.5>\nis_nested
  "    \n    brackets = string.count('[') - string.count(']')\n    if brackets ==\
    \ 0 \n        return true\n    else \n        return false\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=string,python,recursion |>\n<code>\ndef check_brackets(string):\n\
    \    stack = []\n    for c in string:\n        if c == '[':\n            stack.append(c)\n\
    \        elif c == ']':\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0", "    \n    stack = Stack()\n    stack.push(string)\n    \n    while stack.size\
    \ > 0\n        \n        current = stack.pop()\n        \n        if current ==\
    \ '['\n            stack.push(']')\n            stack.push('[')\n            \n\
    \        elif current == ']'\n            stack.push(']')\n            \n    \
    \    elif current == '['\n            stack.push('[')\n            \n        elif\
    \ current == ']'\n            stack.push(']')\n            \n        else\n  \
    \          stack.push(current)\n            \n    return stack.size == 0\n   \
    \ \n\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.", "    \n    stack = Stack()\n    \n    for c in string:\n      \
    \  if c == '[':\n            stack.push(c)\n        elif c == ']':\n         \
    \   if not stack.is_empty():\n                if stack.pop() == '[':\n       \
    \             return True\n                else:\n                    return False\n\
    \            else:\n                return False\n        else:\n            return\
    \ False\n    \n    return stack.is_empty()\n</cell>\n<cell>\nis_nested('[[]]')\
    \ \u279E True\nis_nested('[]]]]]]][[[[[]') \u279E False\nis_nested('[][]') \u279E\
    \ False\nis_nested('[]') \u279E False\nis_nested('[[][]]') \u279E True\nis_nested('[[]][[')\
    \ \u279E True\n</cell>\n<text>\nExercise\nWrite a function that takes a string\
    \ as input which contains only square brackets.\nThe function should return True\
    \ if and only if there is a valid subsequence of brackets \n    where at least\
    \ one bracket in the subsequence is nested.", "    \n    brackets = string.count('[')::Int\n\
    \    \n    if brackets == 0 \n        then return False\n    else if brackets\
    \ == string.count(']') \n        then return True\n    else if brackets == string.count('[')\n\
    \        then return is_nested(string[1:end-1])\n    else \n        return is_nested(string[1:end-2])\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Create a function that takes\
    \ a string as input which contains only square brackets.\n    The function should\
    \ return True if and only if there is a valid subsequence of brackets \n    where\
    \ at least one bracket in the subsequence is nested.", "    \n    stack = Stack()\n\
    \    stack.push(\"[\")\n    \n    for char in string\n        if char == \"[\"\
    \n            stack.push(\"[\")\n        elif char == \"]\"\n            stack.pop()\n\
    \        else\n            stack.push(char)\n            \n    return stack.length()\
    \ == 0\nend", "    \n    stack = Stack()\n    stack.append(0)\n    \n    for c\
    \ in string:\n        if c == '[':\n            stack.append(1)\n        elif\
    \ c == ']':\n            stack.pop()\n        elif stack.isEmpty == True:\n  \
    \          return False\n        else:\n            stack.pop()\n            \n\
    \    return stack.isEmpty\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a string as input and returns the number of times the string \"[[]]\"\
    \ appears in the string.", "    stack::Vector{String} = []\n    bracket::String\
    \ = \"\"\n    \n    for character in string\n        if character == \"[\" ||\
    \ character == \"{\" || character == \"(\"\n            push!(stack, character)\n\
    \        elseif character == \"]\" || character == \"}\" || character == \")\"\
    \n            if stack == []\n                return false\n            elseif\
    \ stack[length(stack)-1] == \"[\" || stack[length(stack)-1] == \"{\" || stack[length(stack)-1]\
    \ == \"(\"\n                pop!(stack)\n            else\n                return\
    \ false\n            end\n        else\n            push!(stack, character)\n\
    \        end\n    end\n    return stack == []\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Create a function that takes a string as input which contains only\
    \ square brackets.\n    The function should return True if and only if there is\
    \ a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.", "    \n    stack = Stack()\n    stack.push(string)\n    \n    while\
    \ stack.size > 0 do\n        \n        current = stack.pop()\n        \n     \
    \   if current == '[' then\n            stack.push(current + current)\n      \
    \  \n        elif current == ']' then\n            if stack.size == 0 then\n \
    \               return false\n            else\n                stack.pop()\n\
    \            end\n        end\n    end\n    \n    return true\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    Create a function that takes a string as\
    \ input which contains only square brackets.\n    The function should return True\
    \ if and only if there is a valid subsequence of brackets \n    where at least\
    \ one bracket in the subsequence is nested.", "    \n    stack = Stack()\n   \
    \ stack.push([string])\n    \n    while stack.size > 0\n        \n        current\
    \ = stack.pop()\n        \n        if current.size == 1\n            \n      \
    \      if current[0] == '['\n                stack.push([current[1:]])\n     \
    \       \n            elif current[0] == ']'\n                \n             \
    \   if current.size == 2\n                    \n                    if current[1]\
    \ == '['\n                        stack.push([current[2:]])\n                \
    \    \n                    elif current[1] == ']'\n                        \n\
    \                        if current.size == 3\n                            \n\
    \                            if current[2] == '['\n                          \
    \      stack.push([current[3:]])\n                            \n             \
    \               elif current[2] == ']'\n                                return\
    \ True\n                        \n                        else:\n            \
    \                return False\n                    \n                    else:\n\
    \                        return False\n                \n                else:\n\
    \                    return False\n            \n            else:\n         \
    \       return False\n        \n        else:\n            return False\n    \n\
    \    return False \n</cell>\n<code language=julia-1.5>\nis_nested
  "    \n    stack = Stack()\n    stack.push(string)\n    \n    while stack.size >\
    \ 0\n        \n        current = stack.pop()\n        \n        if current ==\
    \ '['\n            stack.push(current + current)\n            stack.push(current\
    \ + current + current)\n            stack.push(current + current + current + current)\n\
    \            stack.push(current + current + current + current + current)\n   \
    \         stack.push(current + current + current + current + current + current)\n\
    \            stack.push(current + current + current + current + current + current\
    \ + current)\n            stack.push(current + current + current + current + current\
    \ + current + current + current)\n            stack.push(current + current + current\
    \ + current + current + current + current + current + current)\n            stack.push(current\
    \ + current + current + current + current + current + current + current + current\
    \ + current)\n            stack.push(current + current + current + current + current\
    \ + current + current + current + current + current + current)\n            stack.push(current\
    \ + current + current + current + current + current + current + current + current\
    \ + current + current + current)\n            stack.push(current + current + current\
    \ + current + current + current + current + current + current + current + current\
    \ + current + current)\n            stack.push(current + current + current + current\
    \ + current + current + current + current + current + current + current + current\
    \ + current)\n            stack.push(current + current + current + current + current\
    \ + current + current + current + current + current + current + current + current\
    \ + current)\n            stack.push(current + current + current + current + current\
    \ + current + current + current + current + current + current + current + current\
    \ + current + current)\n            stack.push(current + current + current + current\
    \ + current + current + current + current + current + current + current + current\
    \ + current + current + current)\n            stack.push(current + current + current\
    \ + current + current + current + current + current + current + current + current\
    \ + current + current + current + current)\n            stack.push(current + current\
    \ + current + current + current + current + current + current + current + current\
    \ + current + current + current + current + current + current)\n            stack.push(current\
    \ + current + current + current + current + current + current + current + current\
    \ + current + current + current + current + current + current + current + current)\n\
    \            stack.push(current + current + current + current + current ", " \
    \   stack = Stack()\n    stack.append(0)\n    \n    for c in string:\n       \
    \ if c == '[':\n            stack.append(1)\n        elif c == ']':\n        \
    \    stack.pop()\n        elif stack.isEmpty == True:\n            return False\n\
    \        else:\n            stack.pop()\n    return True\n</cell>\n<cell>\n\"\"\
    \"\n    Create a function that takes a string as input which contains only square\
    \ brackets.\n    The function should return True if and only if there is a valid\
    \ subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.", "    \n    stack = Stack()\n    \n    for char in string\n    \
    \    if char == '['\n            stack.push(char)\n        elif char == ']'\n\
    \            if stack.size == 0\n                return false\n            else\n\
    \                stack.pop()\n        end\n    end\n    \n    return stack.size\
    \ == 0\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Create a function\
    \ that takes a string as input which contains only square brackets.\n    The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    \    where at least one bracket in the subsequence is nested.", "    \n    stack::Vector[String]\
    \ = Vector.empty\n    \n    for c in string:\n        if c == '[':\n         \
    \   stack := stack + [String(c)]\n        elif c == ']':\n            if stack.length\
    \ == 0 then return False\n            \n            stack::Vector[String] = stack\n\
    \            \n            if stack[stack.length-1] == '[' then return True\n\
    \            \n            stack.length -= 1\n        \n    return stack.length\
    \ == 0\nend\n</cell>\n<code language=julia-1.5>\nis_nested(\"[][]\")\n</cell>\n\
    <code language=julia-1.5>\nis_nested(\"[]\")\n</cell>\n<code language=julia-1.5>\n\
    is_nested(\"[[][]]\")\n</cell>\n<code language=julia-1.5>\nis_nested(\"[[]]\"\
    )\n</cell>\n<code language=julia-1.5>\nis_nested(\"[[][][]]\")\n</cell>\n<code\
    \ language=julia-1.5>\nis_nested
  "    \n    stack::Vector[String] = Vector.empty\n    \n    for char in string\n\
    \        if char == '['\n            stack := stack + [char]\n        elif char\
    \ == ']'\n            if stack.length == 0\n                return false\n   \
    \         \n            popped_char := stack.pop()\n            if popped_char\
    \ != '['\n                return false\n            \n            if stack.length\
    \ == 0\n                return true\n            \n            popped_char :=\
    \ stack.pop()\n            if popped_char != ']'\n                return false\n\
    \            \n            if stack.length == 0\n                return true\n\
    \            \n            popped_char := stack.pop()\n            if popped_char\
    \ != ']'\n                return false\n            \n            if stack.length\
    \ == 0\n                return true\n            \n            popped_char :=\
    \ stack.pop()\n            if popped_char != '['\n                return false\n\
    \            \n            if stack.length == 0\n                return true\n\
    \            \n            popped_char := stack.pop()\n            if popped_char\
    \ != ']'\n                return false\n            \n            if stack.length\
    \ == 0\n                return true\n            \n            popped_char :=\
    \ stack.pop()\n            if popped_char != '['\n                return false\n\
    \            \n            if stack.length == 0\n                return true\n\
    \            \n            popped_char := stack.pop()\n            if popped_char\
    \ != ']'\n                return false\n            \n            if stack.length\
    \ == 0\n                return true\n            \n            popped_char :=\
    \ stack.pop()\n            if popped_char != '['\n                return false\n\
    \            \n            if stack.length == 0\n                return true\n\
    \            \n            popped_char := stack.pop()\n            if popped_char\
    \ != ']'\n                return false\n            \n            if stack.length\
    \ == 0\n                return true\n            \n            popped_char :=\
    \ stack.pop()\n            if popped_char != '['\n                return false\n\
    \            \n            if stack.length == 0\n                return true\n\
    \            \n            popped_char := stack.pop()\n            if popped_char\
    \ != ']'\n                return false\n            \n            if stack.length\
    \ == 0\n                return true\n            \n            popped_char :=\
    \ stack.pop()\n            if popped_char != '['\n                return false\n\
    \            \n            if stack.length == 0\n                return true\n\
    \            \n            popped_char := stack.pop()\n            if popped_char\
    \ != ']'\n                return false\n            \n            if stack.length\
    \ == 0\n                return true\n            \n            popped_char :=\
    \ stack.pop()\n            if popped_char != '['\n                return false\n\
    \            \n            if stack.length == 0\n                return true\n\
    \            \n            popped_char := stack.pop()\n            if popped_char\
    \ != ']'\n                return false\n            \n            if stack.length\
    \ == 0\n                return true\n            \n            popped_char :=\
    \ stack", "    \n    stack = Stack()\n    \n    for char in string:\n        if\
    \ char == '[':\n            stack.push(char)\n        elif char == ']':\n    \
    \        if not stack.is_empty():\n                stack.pop()\n            else:\n\
    \                return False\n        elif char == '[':\n            stack.push(char)\n\
    \        elif char == ']':\n            if not stack.is_empty():\n           \
    \     stack.pop()\n            else:\n                return False\n        elif\
    \ char == '[':\n            stack.push(char)\n        elif char == ']':\n    \
    \        if not stack.is_empty():\n                stack.pop()\n            else:\n\
    \                return False\n        elif char == '[':\n            stack.push(char)\n\
    \        elif char == ']':\n            if not stack.is_empty():\n           \
    \     stack.pop()\n            else:\n                return False\n        elif\
    \ char == '[':\n            stack.push(char)\n        elif char == ']':\n    \
    \        if not stack.is_empty():\n                stack.pop()\n            else:\n\
    \                return False\n        elif char == '[':\n            stack.push(char)\n\
    \        elif char == ']':\n            if not stack.is_empty():\n           \
    \     stack.pop()\n            else:\n                return False\n        elif\
    \ char == '[':\n            stack.push(char)\n        elif char == ']':\n    \
    \        if not stack.is_empty():\n                stack.pop()\n            else:\n\
    \                return False\n        elif char == '[':\n            stack.push(char)\n\
    \        elif char == ']':\n            if not stack.is_empty():\n           \
    \     stack.pop()\n            else:\n                return False\n        elif\
    \ char == '[':\n            stack.push(char)\n        elif char == ']':\n    \
    \        if not stack.is_empty():\n                stack.pop()\n            else:\n\
    \                return False\n        elif char == '[':\n            stack.push(char)\n\
    \        elif char == ']':\n            if not stack.is_empty():\n           \
    \     stack.pop()\n            else:\n                return False\n        elif\
    \ char == '[':\n            stack.push(char)\n        elif char == ']':\n    \
    \        if not stack.is_empty():\n                stack.pop()\n            else:\n\
    \                return False\n        elif char == '[':\n            stack.push(char)\n\
    \        elif char == ']':\n            if not stack.is_empty():\n           \
    \     stack.pop()\n            else:\n                return False\n        elif\
    \ char == '[':\n            stack.push(char)\n        elif char == ']':\n    \
    \        if not stack.is_empty():\n                stack.pop()\n            else:\n\
    \                return False\n        elif char == '[':\n            stack.push(char)\n\
    \        elif char == ']':\n            if not stack.is_empty():\n           \
    \     stack.pop()\n            else:\n                return False\n        elif\
    \ char == '[':\n            stack.push(char)\n        elif char == ']':\n    \
    \        if not stack.is_empty():\n                stack.pop()\n            else:\n\
    \                return False\n        elif char == '[':\n            stack.push(char)\n\
    \        elif char == ']':\n            if not stack.is_empty():\n           \
    \     stack.pop()\n            else:\n                return False\n        elif\
    \ char", "    stack = Stack()\n    stack.push(string)\n    while stack.count >\
    \ 0\n        current = stack.pop()\n        if current == '['\n            stack.push(\"\
    [\")\n        elif current == ']'\n            stack.push(\"]\")\n        else\n\
    \            stack.push(current)\n    end\n    return stack.count == 0\nend\n\
    </cell>\n<code language=julia-1.5>\nis_nested(\"[[]]\")\n</cell>\n<code language=julia-1.5>\n\
    is_nested(\"[][]\")\n</cell>\n<code language=julia-1.5>\nis_nested(\"[]\")\n</cell>\n\
    <code language=julia-1.5>\nis_nested(\"[[][]]\")\n</cell>\n<code language=julia-1.5>\n\
    is_nested(\"[[]][[\")\n</cell>\n<code language=julia-1.5>\nis_nested(\"[[]][[[]]\"\
    )\n</cell>\n<code language=julia-1.5>\nis_nested(\"[[]][[[]]]\")\n</cell>\n<code\
    \ language=julia-1.5>\nis_nested(\"[[]][[[]]][]\")\n</cell>\n<code language=julia-1.5>\n\
    is_nested(\"[[]][[[]]][][]\")\n</cell>\n<code language=julia-1.5>\nis_nested(\"\
    [[]][[[]]][][][]\")\n</cell>\n<code language=julia-1.5>\nis_nested(\"[[]][[[]]][][][][]\"\
    )\n</cell>\n<code language=julia-1.5>\nis_nested(\"[[]][[[]]][][][][][]\")\n</cell>\n\
    <code language=julia-1.5>\nis_nested(\"[[]][[[]]][][][][][][]\")\n</cell>\n<code\
    \ language=julia-1.5>\nis_nested(\"[[]][[[]]][][][][][][][]\")\n</cell>\n<code\
    \ language=julia-1.5>\nis_nested(\"[[]][[[]]][][][][][][][][]\")\n</cell>\n<code\
    \ language=julia-1.5>\nis_nested(\"[[]][[[]]][][][][][][][][][]\")\n</cell>\n\
    <code language=julia-1.5>\nis_nested(\"[[]][[[]]][][][][][][][][][][]\")\n</cell>\n\
    <code language=julia-1.5>\nis_nested(\"[[]][[[]]][][][][][][][][][][][]\")\n</cell>\n\
    <code language=julia-1.5>\nis_nested(\"[[]][[[]]][][][][][][]", "    \n    stack\
    \ = Stack()\n    stack.append(0)\n    \n    for c in string:\n        if c ==\
    \ '[':\n            stack.append(1)\n        elif c == ']':\n            stack.pop()\n\
    \        elif stack.isEmpty == True:\n            return False\n    \n    return\
    \ stack.isEmpty\n\"\"\"\n    Create a function that takes a string as input which\
    \ contains only square brackets.\n    The function should return True if and only\
    \ if there is a valid subsequence of brackets \n    where at least one bracket\
    \ in the subsequence is nested.", "    \n    stack = Stack()\n    \n    for c\
    \ in string:\n        if c == '[':\n            stack.push(c)\n        elif c\
    \ == ']':\n            if stack.is_empty():\n                return False\n  \
    \          elif stack.pop() != '[':\n                return False\n        elif\
    \ stack.is_empty():\n            return False\n        \n    return True\n</cell>\n\
    <cell>\nis_nested('[[]]') \u279E True\nis_nested('[]]]]]]][[[[[]') \u279E False\n\
    is_nested('[][]') \u279E False\nis_nested('[]') \u279E False\nis_nested('[[][]]')\
    \ \u279E True\nis_nested('[[]][[') \u279E True\n</cell>\n<text>\nExercise: Write\
    \ a function that takes a string as input which contains only square brackets.\n\
    The function should return True if and only if there is a valid subsequence of\
    \ brackets \nwhere at least one bracket in the subsequence is nested.", "    \n\
    \    stack = Stack()\n    \n    for c in string:\n        if c == '[':\n     \
    \       stack.push(c)\n        elif c == ']':\n            if stack.pop() != '[':\n\
    \                return False\n        elif c != ']':\n            return False\n\
    \    \n    return stack.is_empty()\n    \n\"\"\"\n    Create a function that takes\
    \ a string as input which contains only square brackets.\n    The function should\
    \ return True if and only if there is a valid subsequence of brackets \n    where\
    \ at least one bracket in the subsequence is nested.", "    \n    stack = Stack()\n\
    \    stack.append(0)\n    \n    for c in string:\n        if c == '[':\n     \
    \       stack.append(1)\n        elif c == ']':\n            stack.pop()\n   \
    \     elif stack.isEmpty == True:\n            return False\n    return stack.isEmpty\n\
    </cell>\n<text>\nExercise 7\nWrite a function that takes a string as input which\
    \ contains only square brackets.\nThe function should return True if and only\
    \ if there is a valid subsequence of brackets \n    where at least one bracket\
    \ in the subsequence is nested.", "    \n    stack = Stack()\n    stack.append(0)\n\
    \    \n    for c in string:\n        if c == '[':\n            stack.append(1)\n\
    \        elif c == ']':\n            stack.pop()\n        elif stack.isEmpty ==\
    \ True:\n            return False\n    \n    return stack.isEmpty", "    \n  \
    \  stack = Stack()\n    \n    for c in string:\n        if c == '[':\n       \
    \     stack.push(c)\n        elif c == ']':\n            if not stack.is_empty():\n\
    \                if stack.pop() == '[':\n                    return True\n   \
    \         else:\n                return False\n        elif stack.is_empty():\n\
    \            return False\n        else:\n            stack.pop()\n          \
    \  \n    return stack.is_empty()\n</cell>\n<cell>\nis_nested('[[]]') \u279E True\n\
    is_nested('[]]]]]]][[[[[]') \u279E False\nis_nested('[][]') \u279E False\nis_nested('[]')\
    \ \u279E False\nis_nested('[[][]]') \u279E True\nis_nested('[[]][[') \u279E True\n\
    </cell>\n<text>\nExercise 4\nWrite a function that takes a string as input which\
    \ contains only square brackets.\nThe function should return True if and only\
    \ if there is a valid subsequence of brackets \nwhere at least one bracket in\
    \ the subsequence is nested.", "    \n    stack::Vector[String] = Vector.empty\n\
    \    \n    for c in string\n        if c == '['\n            push!(stack, c)\n\
    \        elif c == ']'\n            if !isempty(stack)\n                pop!(stack)\n\
    \            else\n                return false\n            end\n        end\n\
    \    end\n    \n    return !isempty(stack)\nend\n</cell>\n<code language=julia-1.5>\n\
    is_nested(\"[][]\")\n</cell>\n<code language=julia-1.5>\nis_nested(\"[]\")\n</cell>\n\
    <code language=julia-1.5>\nis_nested(\"[[][]]\")\n</cell>\n<code language=julia-1.5>\n\
    is_nested(\"[[]][[\")\n</cell>\n<code language=julia-1.5>\nis_nested(\"[[]]\"\
    )\n</cell>\n<code language=julia-1.5>\nis_nested(\"[[][]]\")\n</cell>\n<code language=julia-1.5>\n\
    is_nested(\"[[][][]]\")\n</cell>\n<code language=julia-1.5>\nis_nested(\"[[][][][]]\"\
    )\n</cell>\n<code language=julia-1.5>\nis_nested(\"[[][][][][]]\")\n</cell>\n\
    <code language=julia-1.5>\nis_nested(\"[[][][][][][]]\")\n</cell>\n<code language=julia-1.5>\n\
    is_nested(\"[[][][][][][][]]\")\n</cell>\n<code language=julia-1.5>\nis_nested(\"\
    [[][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][]",
  "    \n    stack = Stack()\n    \n    for c in string:\n        if c == '[':\n \
    \           stack.push(c)\n        elif c == ']':\n            if stack.is_empty():\n\
    \                return False\n            elif stack.pop() != '[':\n        \
    \        return False\n            else:\n                stack.pop()\n      \
    \  elif stack.is_empty():\n            return False\n        else:\n         \
    \   stack.pop()\n            stack.push(c)\n            \n    return stack.is_empty()\n\
    </cell>\n<code language=julia-1.5>\nis_nested(\"[[]]\") \u279E True\nis_nested(\"\
    []]]]]]][[[[[]\") \u279E False\nis_nested(\"[][]\") \u279E False\nis_nested(\"\
    []\") \u279E False\nis_nested(\"[[][]]\") \u279E True\nis_nested(\"[[]][[\") \u279E\
    \ True\n</cell>\n<text>\nExercise\nWrite a function that takes a string as input\
    \ which contains only square brackets.\nThe function should return True if and\
    \ only if there is a valid subsequence of brackets \nwhere at least one bracket\
    \ in the subsequence is nested.", "    \n    stack = Stack()\n    \n    for c\
    \ in string:\n        if c == '[':\n            stack.push(c)\n        elif c\
    \ == ']':\n            if stack.pop() != '[':\n                return False\n\
    \        elif c != ']':\n            return False\n    \n    return stack.is_empty()\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string as input and\
    \ returns the number of times a substring appears in the string.", "    \n   \
    \ stack::Vector[String] = Vector.empty\n    \n    for c in string:\n        if\
    \ c == '[':\n            stack := stack + [String(c)]\n        elif c == ']':\n\
    \            if len(stack) == 0:\n                return False\n            \n\
    \            stack.pop\n        \n    return stack.length == 1\n    \n\"\"\"\n\
    \    Create a function that takes a string as input which contains only square\
    \ brackets.\n    The function should return True if and only if there is a valid\
    \ subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.", "    \n    stack = Stack()\n    \n    for c in string:\n      \
    \  if c == '[':\n            stack.push(c)\n        elif c == ']':\n         \
    \   if stack.pop() == '[':\n                return True\n            else:\n \
    \               return False\n        elif stack.top() == '[':\n            if\
    \ c == ']':\n                stack.pop()\n            else:\n                return\
    \ False\n        else:\n            return False\n    \n    return stack.pop()\
    \ == '['\n\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.", "    \n    stack = Stack()\n    stack.push([string])\n    \n  \
    \  while stack.size > 0\n        \n        current = stack.pop()\n        \n \
    \       if current.size == 1\n            return true\n        \n        if current.size\
    \ == 2\n            if current[1] == '['\n                stack.push([current[0]])\n\
    \            elseif current[1] == '{'\n                stack.push([current[0]])\n\
    \            elseif current[1] == '('\n                stack.push([current[0]])\n\
    \            elseif current[1] == ')'\n                \n                if stack.is_empty()\n\
    \                    return false\n                \n                top = stack.pop()\n\
    \                \n                if top[1] == '['\n                    stack.push([top[0]])\n\
    \                elseif top[1] == '{'\n                    stack.push([top[0]])\n\
    \                elseif top[1] == '('\n                    stack.push([top[0]])\n\
    \                elseif top[1] == ')'\n                    \n                \
    \    if stack.is_empty()\n                        return false\n             \
    \       \n                    top = stack.pop()\n                    \n      \
    \              if top[1] == '['\n                        stack.push([top[0]])\n\
    \                    elseif top[1] == '{'\n                        stack.push([top[0]])\n\
    \                    elseif top[1] == '('\n                        stack.push([top[0]])\n\
    \                    elseif top[1] == ')'\n                        \n        \
    \                if stack.is_empty()\n                            return false\n\
    \                        \n                        top = stack.pop()\n       \
    \                 \n                        if top[1] == '['\n               \
    \             stack.push([top[0]])\n                        elseif top[1] == '{'\n\
    \                            stack.push([top[0]])\n                        elseif\
    \ top[1] == '('\n                            stack.push([top[0]])\n          \
    \              elseif top[1] == ')'\n                            \n          \
    \                  if stack.is_empty()\n                                return\
    \ false\n                            \n                            top = stack.pop()\n\
    \                            \n                            if top[1] == '['\n\
    \                                stack.push([top[0]])\n                      \
    \      elseif top[1] == '{'\n                                stack.push([top[0]])\n\
    \                            elseif top[1] == '('\n                          \
    \      stack.push([top[0]])\n                            elseif top[1] == ')'\n\
    \                                \n                                if stack.is_empty()\n\
    \                                    return false\n                          \
    \      \n                                top = stack.pop()\n                 \
    \               \n                                if top[1] == '['\n         \
    \                           stack.push([top[0]])\n                           \
    \     elseif top[1] == '{'\n                                    stack.push([top[0]])\n\
    \                                elseif top[1] == '('\n                      \
    \              stack.push([top[0]])\n                                elseif top[1]\
    \ == ')'\n                                    \n                             \
    \       if stack.is_empty()\n                                        return false\n\
    \                                    \n                                    top\
    \ = stack.pop()\n                                    \n                      \
    \              if top[1] == '['\n                                        stack.push([top[0]])\n\
    \                                    elseif ", "    \n    stack = Stack()\n  \
    \  stack.push([string])\n    \n    while stack.size > 0\n        \n        current\
    \ = stack.pop()\n        \n        if current.size == 1\n            return true\n\
    \        \n        for c in current\n            if c == '['\n               \
    \ stack.push([c])\n            elseif c == ']'\n                if stack.isEmpty()\n\
    \                    return false\n                else\n                    stack.pop()\n\
    \            else\n                stack.push(c)\n    end\n    return false\n\
    end\n</cell>\n<code language=julia-1.5>\nis_nested(\"[[]]\")\n</cell>\n<code language=julia-1.5>\n\
    is_nested(\"[]]]]]]][[[[[]\")\n</cell>\n<code language=julia-1.5>\nis_nested(\"\
    [][]\")\n</cell>\n<code language=julia-1.5>\nis_nested(\"[]\")\n</cell>\n<code\
    \ language=julia-1.5>\nis_nested(\"[[][]]\")\n</cell>\n<code language=julia-1.5>\n\
    is_nested(\"[[]][[\")\n</cell>\n<text>\nExercise\nWrite a function that takes\
    \ a string as input which contains only square brackets.\nThe function should\
    \ return True if and only if there is a valid subsequence of brackets \nwhere\
    \ at least one bracket in the subsequence is nested.", "    \n    stack = Stack()\n\
    \    \n    for c in string:\n        if c == '[':\n            stack.push(c)\n\
    \        elif c == ']':\n            if stack.isEmpty():\n                return\
    \ False\n            elif stack.pop() != '[':\n                return False\n\
    \            else:\n                stack.pop()\n        elif stack.isEmpty():\n\
    \            return False\n        else:\n            stack.pop()\n          \
    \  stack.push(c)\n            \n    return stack.isEmpty()\n</cell>\n<code language=julia-1.5>\n\
    is_nested(\"[][]\")\n</cell>\n<code language=julia-1.5>\nis_nested(\"[[][]]\"\
    )\n</cell>\n<code language=julia-1.5>\nis_nested(\"[[]][[]]\")\n</cell>\n<code\
    \ language=julia-1.5>\nis_nested
  "    \n    stack = Stack()\n    stack.push(string)\n    \n    while stack.count\
    \ > 0\n        \n        current = stack.pop()\n        \n        if current ==\
    \ '['\n            stack.push(']')\n            stack.push('[')\n        \n  \
    \      elif current == ']'\n            stack.push('[')\n            stack.push(']')\n\
    \        \n        else\n            stack.push(current)\n            \n    return\
    \ stack.count > 0\nend\n</cell>\n<code language=julia-1.5>\nis_nested
  "    \n    stack = Stack()\n    \n    for char in string\n        if char == '['\n\
    \            stack.push(char)\n        elif char == ']'\n            if stack.size\
    \ == 0\n                return false\n            else\n                stack.pop()\n\
    \        end\n    end\n    \n    return stack.size == 0\nend\n</cell>\n<code language=julia-1.5>\n\
    is_nested(\"[][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][]",
  "    \n    brackets = string.count('[')::Int\n    open_brackets = string.count('(')::Int\n\
    \    closed_brackets = string.count(')')::Int\n    \n    if brackets == open_brackets\
    \ + closed_brackets \n        && open_brackets > closed_brackets\n        && open_brackets\
    \ > 0\n        && closed_brackets > 0\n        && open_brackets <= closed_brackets\n\
    \        && brackets == closed_brackets\n        && brackets == 0\n        &&\
    \ open_brackets == closed_brackets\n        && open_brackets == 0\n        &&\
    \ brackets == 0\n    then true\n    else false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Create a function that takes a string as input which contains only\
    \ square brackets.\n    The function should return True if and only if there is\
    \ a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.", "    \n    stack = Stack()\n    stack.append(0)\n    \n    for\
    \ c in string:\n        if c == '[':\n            stack.append(1)\n        elif\
    \ c == '[':\n            stack.pop()\n        elif c == ']':\n            if stack.pop()\
    \ != 0:\n                return False\n    return stack.pop() == 0", "    \n \
    \   stack = Stack()\n    stack.append(0)\n    \n    for c in string:\n       \
    \ if c == '[':\n            stack.append(1)\n        elif c == ']':\n        \
    \    stack.pop()\n        elif stack.isEmpty():\n            return False\n  \
    \      else:\n            stack.pop()\n            \n    return stack.isEmpty()\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string as input which\
    \ contains only square brackets.\nThe function should return True if and only\
    \ if there is a valid subsequence of brackets \nwhere at least one bracket in\
    \ the subsequence is nested.", "    \n    stack = Stack()\n    \n    for c in\
    \ string:\n        if c == '[':\n            stack.push(c)\n        elif c ==\
    \ ']':\n            if not stack.is_empty():\n                stack.pop()\n  \
    \          else:\n                return False\n        elif stack.is_empty():\n\
    \            return False\n        else:\n            stack.pop()\n          \
    \  stack.push(c)\n            \n    return not stack.is_empty()\n</cell>\n<cell>\n\
    is_nested('[[]]') \u279E True\nis_nested('[]]]]]]][[[[[]') \u279E False\nis_nested('[][]')\
    \ \u279E False\nis_nested('[]') \u279E False\nis_nested('[[][]]') \u279E True\n\
    is_nested('[[]][[') \u279E True\n</cell>\n<text>\nExercise: Write a function that\
    \ takes a string as input which contains only square brackets.\nThe function should\
    \ return True if and only if there is a valid subsequence of brackets \nwhere\
    \ at least one bracket in the subsequence is nested.", "    \n    stack::Vector[String]\
    \ = Vector.empty\n    \n    for c in string:\n        if c == '[':\n         \
    \   stack := stack + [c]\n        elif c == ']':\n            if len(stack) ==\
    \ 0: return False\n            if stack.pop() == '[':\n                stack :=\
    \ stack + [c]\n            elif stack.pop() == '[':\n                return False\n\
    \        elif c == '[':\n            stack := stack + [c]\n        elif c == ']':\n\
    \            if len(stack) == 0: return False\n            if stack.pop() == '[':\n\
    \                stack := stack + [c]\n            elif stack.pop() == '[':\n\
    \                return False\n        elif c == '[':\n            stack := stack\
    \ + [c]\n        elif c == ']':\n            if len(stack) == 0: return False\n\
    \            if stack.pop() == '[':\n                stack := stack + [c]\n  \
    \          elif stack.pop() == '[':\n                return False\n        elif\
    \ c == '[':\n            stack := stack + [c]\n        elif c == ']':\n      \
    \      if len(stack) == 0: return False\n            if stack.pop() == '[':\n\
    \                stack := stack + [c]\n            elif stack.pop() == '[':\n\
    \                return False\n        elif c == '[':\n            stack := stack\
    \ + [c]\n        elif c == ']':\n            if len(stack) == 0: return False\n\
    \            if stack.pop() == '[':\n                stack := stack + [c]\n  \
    \          elif stack.pop() == '[':\n                return False\n        elif\
    \ c == '[':\n            stack := stack + [c]\n        elif c == ']':\n      \
    \      if len(stack) == 0: return False\n            if stack.pop() == '[':\n\
    \                stack := stack + [c]\n            elif stack.pop() == '[':\n\
    \                return False\n        elif c == '[':\n            stack := stack\
    \ + [c]\n        elif c == ']':\n            if len(stack) == 0: return False\n\
    \            if stack.pop() == '[':\n                stack := stack + [c]\n  \
    \          elif stack.pop() == '[':\n                return False\n        elif\
    \ c == '[':\n            stack := stack + [c]\n        elif c == ']':\n      \
    \      if len(stack) == 0: return False\n            if stack.pop() == '[':\n\
    \                stack := stack + [c]\n            elif stack.pop() == '[':\n\
    \                return False\n        elif c == '[':\n            stack := stack\
    \ + [c]\n        elif c == ']':\n            if len(stack) == 0: return False\n\
    \            if stack.pop() == '[':\n                stack := stack + [c]\n  \
    \          elif stack.pop() == '[':\n                return False\n        elif\
    \ c == '[':\n            stack := stack + [c]\n        elif c == ']':\n      \
    \      if len(stack) == 0: return False\n            if stack.pop() == '[':\n\
    \                stack := stack + [c]\n            elif stack", "    \n    stack\
    \ = Stack()\n    \n    for c in string:\n        if c == '[':\n            stack.push(c)\n\
    \        elif c == ']':\n            if not stack.isEmpty():\n               \
    \ if stack.peek() == '[':\n                    stack.pop()\n                else:\n\
    \                    return False\n            else:\n                return False\n\
    \        elif stack.isEmpty():\n            return False\n        else:\n    \
    \        stack.pop()\n            \n    return stack.isEmpty()\n</cell>\n<cell>\n\
    is_nested('[[]]') \u279E True\nis_nested('[]]]]]]][[[[[]') \u279E False\nis_nested('[][]')\
    \ \u279E False\nis_nested('[]') \u279E False\nis_nested('[[][]]') \u279E True\n\
    is_nested('[[]][[') \u279E True\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a string as input which contains only square brackets.\nThe function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    where at least one bracket in the subsequence is nested.", "    \n    stack =\
    \ Stack()\n    \n    for char in string:\n        if char == '[':\n          \
    \  stack.push(char)\n        elif char == ']':\n            if not stack.is_empty():\n\
    \                stack.pop()\n            else:\n                return False\n\
    \        elif char == '[':\n            stack.push(char)\n        elif char ==\
    \ ']':\n            if not stack.is_empty():\n                stack.pop()\n  \
    \          else:\n                return False\n        elif char == '[':\n  \
    \          stack.push(char)\n        elif char == ']':\n            if not stack.is_empty():\n\
    \                stack.pop()\n            else:\n                return False\n\
    \        elif char == '[':\n            stack.push(char)\n        elif char ==\
    \ ']':\n            if not stack.is_empty():\n                stack.pop()\n  \
    \          else:\n                return False\n        elif char == '[':\n  \
    \          stack.push(char)\n        elif char == ']':\n            if not stack.is_empty():\n\
    \                stack.pop()\n            else:\n                return False\n\
    \        elif char == '[':\n            stack.push(char)\n        elif char ==\
    \ ']':\n            if not stack.is_empty():\n                stack.pop()\n  \
    \          else:\n                return False\n        elif char == '[':\n  \
    \          stack.push(char)\n        elif char == ']':\n            if not stack.is_empty():\n\
    \                stack.pop()\n            else:\n                return False\n\
    \        elif char == '[':\n            stack.push(char)\n        elif char ==\
    \ ']':\n            if not stack.is_empty():\n                stack.pop()\n  \
    \          else:\n                return False\n        elif char == '[':\n  \
    \          stack.push(char)\n        elif char == ']':\n            if not stack.is_empty():\n\
    \                stack.pop()\n            else:\n                return False\n\
    \        elif char == '[':\n            stack.push(char)\n        elif char ==\
    \ ']':\n            if not stack.is_empty():\n                stack.pop()\n  \
    \          else:\n                return False\n        elif char == '[':\n  \
    \          stack.push(char)\n        elif char == ']':\n            if not stack.is_empty():\n\
    \                stack.pop()\n            else:\n                return False\n\
    \        elif char == '[':\n            stack.push(char)\n        elif char ==\
    \ ']':\n            if not stack.is_empty():\n                stack.pop()\n  \
    \          else:\n                return False\n        elif char == '[':\n  \
    \          stack.push(char)\n        elif char == ']':\n            if not stack.is_empty():\n\
    \                stack.pop()\n            else:\n                return False\n\
    \        elif char == '[':\n            stack.push(char)\n        elif char ==\
    \ ']':\n            if not stack.is_empty():\n                stack.pop()\n  \
    \          else:\n                return False\n        elif char == '[':\n  \
    \          stack.push(char)\n        elif char == ']':\n            if not stack.is_empty():\n\
    \                stack.pop()\n            else:\n                return False\n\
    \        elif char == '[':\n            stack.push(char)\n        elif char ==\
    \ ']':\n            if not stack.is_empty():\n                stack.pop()\n  \
    \          else:\n                return False\n        elif char", "    \n  \
    \  stack = Stack()\n    \n    for c in string:\n        if c == '[':\n       \
    \     stack.push(c)\n        elif c == ']':\n            if stack.is_empty():\n\
    \                return False\n            elif stack.pop() != '[':\n        \
    \        return False\n            else:\n                stack.pop()\n      \
    \  elif stack.is_empty():\n            return False\n        else:\n         \
    \   stack.pop()\n            stack.push(c)\n            \n    return stack.is_empty()\n\
    </cell>\n<code language=julia-1.5>\nis_nested
  "    \n    stack = Stack()\n    \n    for c in string:\n        if c == '[':\n \
    \           stack.push(c)\n        elif c == ']':\n            if stack.is_empty():\n\
    \                return False\n            elif stack.pop() != '[':\n        \
    \        return False\n            else:\n                stack.pop()\n      \
    \  elif stack.is_empty():\n            return False\n        else:\n         \
    \   stack.pop()\n            stack.push(c)\n            \n    return stack.is_empty()\n\
    </cell>\n<code language=julia-1.5>\nis_nested('[[]]') \u279E True\nis_nested('[]]]]]]][[[[[]')\
    \ \u279E False\nis_nested('[][]') \u279E False\nis_nested('[]') \u279E False\n\
    is_nested('[[][]]') \u279E True\nis_nested('[[]][[') \u279E True\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string as input which contains only\
    \ square brackets.\nThe function should return True if and only if there is a\
    \ valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.", "    \n    stack = Stack()\n    \n    for c in string:\n      \
    \  if c == '[':\n            stack.push(c)\n        elif c == ']':\n         \
    \   if stack.isEmpty():\n                return False\n            elif stack.pop()\
    \ != '[':\n                return False\n            else:\n                stack.pop()\n\
    \        elif stack.isEmpty():\n            return False\n        else:\n    \
    \        stack.pop()\n            stack.push(c)\n            \n    return stack.isEmpty()\n\
    </cell>\n<cell>\nis_nested('[[]]') \u279E True\nis_nested('[]]]]]]][[[[[]') \u279E\
    \ False\nis_nested('[][]') \u279E False\nis_nested('[]') \u279E False\nis_nested('[[][]]')\
    \ \u279E True\nis_nested('[[]][[') \u279E True\n</cell>\n<text>\nExercise: Write\
    \ a function that takes a string as input which contains only square brackets.\n\
    The function should return True if and only if there is a valid subsequence of\
    \ brackets \nwhere at least one bracket in the subsequence is nested.", "    \n\
    \    stack = Stack()\n    \n    for c in string:\n        if c == '[':\n     \
    \       stack.push(c)\n        elif c == ']':\n            if stack.pop() != '[':\n\
    \                return False\n        elif stack.pop() != '[':\n            return\
    \ False\n    return True\n</cell>\n<cell>\nis_nested('[[]]') \u279E True\nis_nested('[]]]]]]][[[[[]')\
    \ \u279E False\nis_nested('[][]') \u279E False\nis_nested('[]') \u279E False\n\
    is_nested('[[][]]') \u279E True\nis_nested('[[]][[') \u279E True\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a string as input which contains only\
    \ square brackets.\nThe function should return True if and only if there is a\
    \ valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.", "    stack = Stack()\n    stack.append(0)\n    for i in string:\n\
    \        if i == '[':\n            stack.append(1)\n        elif i == ']':\n \
    \           if stack.pop() == 0:\n                return False\n            else:\n\
    \                stack.append(0)\n        elif stack.pop() != 0:\n           \
    \ return False\n    return True\n</code>\n<|/ a dscore=0 |>\n<| a tags=string,python,recursion\
    \ |>\n<code>\ndef check_brackets(string):\n    stack = []\n    open_brackets =\
    \ 0\n    close_brackets = 0\n    for char in string:\n        if char == '[':\n\
    \            open_brackets += 1\n            stack.append(char)\n        elif\
    \ char == ']':\n            close_brackets += 1\n            if len(stack) ==\
    \ 0:\n                return False\n            elif close_brackets == open_brackets:\n\
    \                stack.pop()\n            else:\n                return False\n\
    \        else:\n            stack.append(char)\n    return len(stack) == 0\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=string,python,recursion |>\n<code>\ndef check_brackets(string):\n\
    \    stack = []\n    open_brackets = 0\n    close_brackets = 0\n    for char in\
    \ string:\n        if char == '[':\n            open_brackets += 1\n         \
    \   stack.append(char)\n        elif char == ']':\n            close_brackets\
    \ += 1\n            if len(stack) == 0:\n                return False\n      \
    \      elif close_brackets == open_brackets:\n                stack.pop()\n  \
    \          else:\n                return False\n        else:\n            stack.append(char)\n\
    \    return len(stack) == 0\n</code>\n<|/ a dscore=0 |>\n<| a tags=string,python,recursion\
    \ |>\n<code>\ndef check_brackets(string):\n    stack = []\n    open_brackets =\
    \ 0\n    close_brackets = 0\n    for char in string:\n        if char == '[':\n\
    \            open_brackets += 1\n            stack.append(char)\n        elif\
    \ char == ']':\n            close_brackets += 1\n            if len(stack) ==\
    \ 0:\n                return False\n            elif close_brackets == open_brackets:\n\
    \                stack.pop()\n            else:\n                return False\n\
    \        else:\n            stack.append(char)\n    return len(stack) == 0\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nPlease don't post only code as an answer, but also\
    \ provide an explanation of what your code does and how it solves the problem\
    \ of the question. Answers with an explanation are usually more helpful and of\
    \ better quality, and are more likely to attract upvotes.\n<|/ c |>\n<| c |>\n\
    This does not provide an answer to the question. Once you have sufficient [reput",
  "    \n    stack::Vector{String} = Vector{String}()\n    \n    for char in string\n\
    \        if char == '['\n            push!(stack, char)\n        elseif char ==\
    \ ']'\n            if isempty(stack)\n                return false\n         \
    \   else\n                pop!(stack)\n            end\n        else\n       \
    \     return false\n        end\n    end\n    \n    return true\nend\n</cell>\n\
    <code language=julia-1.5>\nis_nested
  "    \n    stack::Vector[String] = Vector.empty\n    \n    for c in string\n   \
    \     if c == '['\n            push!(stack, c)\n        elif c == ']'\n      \
    \      if !isempty(stack)\n                if stack[end] == '['\n            \
    \        pop!(stack)\n                else\n                    return false\n\
    \            else\n                return false\n        end\n    end\n    \n\
    \    return true\nend\n</cell>\n<code language=julia-1.5>\nis_nested(\"[][]\"\
    )\n</cell>\n<code language=julia-1.5>\nis_nested(\"[]\")\n</cell>\n<code language=julia-1.5>\n\
    is_nested(\"[[]]\")\n</cell>\n<code language=julia-1.5>\nis_nested(\"[[][]]\"\
    )\n</cell>\n<code language=julia-1.5>\nis_nested(\"[[][[]]]\")\n</cell>\n<code\
    \ language=julia-1.5>\nis_nested
  "    \n    stack = Stack()\n    stack.append(string)\n    \n    while stack.size\
    \ > 0\n        \n        element = stack.pop()\n        \n        if element ==\
    \ '['\n            stack.append(element)\n            stack.append(element)\n\
    \            stack.append(element)\n            stack.append(element)\n      \
    \      stack.append(element)\n            stack.append(element)\n            stack.append(element)\n\
    \            stack.append(element)\n            stack.append(element)\n      \
    \      stack.append(element)\n            stack.append(element)\n            stack.append(element)\n\
    \            stack.append(element)\n            stack.append(element)\n      \
    \      stack.append(element)\n            stack.append(element)\n            stack.append(element)\n\
    \            stack.append(element)\n            stack.append(element)\n      \
    \      stack.append(element)\n            stack.append(element)\n            stack.append(element)\n\
    \            stack.append(element)\n            stack.append(element)\n      \
    \      stack.append(element)\n            stack.append(element)\n            stack.append(element)\n\
    \            stack.append(element)\n            stack.append(element)\n      \
    \      stack.append(element)\n            stack.append(element)\n            stack.append(element)\n\
    \            stack.append(element)\n            stack.append(element)\n      \
    \      stack.append(element)\n            stack.append(element)\n            stack.append(element)\n\
    \            stack.append(element)\n            stack.append(element)\n      \
    \      stack.append(element)\n            stack.append(element)\n            stack.append(element)\n\
    \            stack.append(element)\n            stack.append(element)\n      \
    \      stack.append(element)\n            stack.append(element)\n            stack.append(element)\n\
    \            stack.append(element)\n            stack.append(element)\n      \
    \      stack.append(element)\n            stack.append(element)\n            stack.append(element)\n\
    \            stack.append(element)\n            stack.append(element)\n      \
    \      stack.append(element)\n            stack.append(element)\n            stack.append(element)\n\
    \            stack.append(element)\n            stack.append(element)\n      \
    \      stack.append(element)\n            stack.append(element)\n            stack.append(element)\n\
    \            stack.append(element)\n            stack.append(element)\n      \
    \      stack.append(element)\n            stack.append(element)\n            stack.append(element)\n\
    \            stack.append(element)\n            stack.append(element)\n      \
    \      stack.append(element)\n            stack.append(element)\n            stack.append(element)\n\
    \            stack.append(element)\n            stack.append(element)\n      \
    \      stack.append(element)\n            stack.append(element)\n            stack.append(element)\n\
    \            stack.append(element)\n            stack.append(element)\n      \
    \      stack.append(element)\n            stack.append(element)\n            stack.append(element)\n\
    \            stack.append(element)\n            stack.append(element)\n      \
    \      stack.append(element)\n            stack.append(element)\n            stack.append(element)\n\
    \            stack.append(element)\n            stack.append(element)\n      \
    \      stack.append(element)\n            stack.append(element)\n            stack.append(element)\n\
    \            stack.append(element)\n            stack.append(element)\n      \
    \      stack.append(element)\n            stack.append(", "    \n    stack = Stack()\n\
    \    \n    for c in string:\n        if c == '[':\n            stack.push(c)\n\
    \        elif c == ']':\n            if not stack.is_empty():\n              \
    \  if stack.pop() != '[':\n                    return False\n            else:\n\
    \                return False\n        elif c == ']':\n            if not stack.is_empty():\n\
    \                if stack.pop() != '[':\n                    return False\n  \
    \          else:\n                return False\n        elif c == '[':\n     \
    \       if not stack.is_empty():\n                if stack.pop() != '[':\n   \
    \                 return False\n            else:\n                return False\n\
    \        else:\n            return False\n    \n    return not stack.is_empty()\n\
    </cell>\n<cell>\nis_nested('[[]]') \u279E True\nis_nested('[]]]]]]][[[[[]') \u279E\
    \ False\nis_nested('[][]') \u279E False\nis_nested('[]') \u279E False\nis_nested('[[][]]')\
    \ \u279E True\nis_nested('[[]][[') \u279E True\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a string as input which contains only square brackets.\n\
    The function should return True if and only if there is a valid subsequence of\
    \ brackets \nwhere at least one bracket in the subsequence is nested.", "    \n\
    \    stack = Stack()\n    \n    for char in string:\n        if char == '[':\n\
    \            stack.push(char)\n        elif char == ']':\n            if stack.is_empty():\n\
    \                return False\n            else:\n                stack.pop()\n\
    \        elif char == '[':\n            if stack.is_empty():\n               \
    \ return False\n            else:\n                stack.pop()\n             \
    \   stack.push(char)\n        elif char == ']':\n            if stack.is_empty():\n\
    \                return False\n            else:\n                stack.pop()\n\
    \                stack.push(char)\n        else:\n            if stack.is_empty():\n\
    \                return False\n            else:\n                stack.pop()\n\
    \                stack.push(char)\n                \n    return stack.is_empty()\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    Create a function that takes a\
    \ string as input which contains only square brackets.\n    The function should\
    \ return True if and only if there is a valid subsequence of brackets \n    where\
    \ at least one bracket in the subsequence is nested.", "    \n    stack::Vector[String]\
    \ = Vector.empty\n    \n    for c in string\n        if c == '['\n           \
    \ stack := stack:push(c)\n        elif c == ']'\n            if stack.length ==\
    \ 0\n                return false\n            else\n                stack = stack:pop()\n\
    \        end\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    is_nested(\"[][]\")\n</cell>\n<code language=julia-1.5>\nis_nested(\"[]\")\n</cell>\n\
    <code language=julia-1.5>\nis_nested(\"[[][]]\")\n</cell>\n<code language=julia-1.5>\n\
    is_nested(\"[[]][[\")\n</cell>\n<code language=julia-1.5>\nis_nested(\"[[]]\"\
    )\n</cell>\n<code language=julia-1.5>\nis_nested(\"[[][]]\")\n</cell>\n<code language=julia-1.5>\n\
    is_nested(\"[[][]]\")\n</cell>\n<code language=julia-1.5>\nis_nested(\"[[][]]\"\
    )\n</cell>\n<code language=julia-1.5>\nis_nested(\"[[][]]\")\n</cell>\n<code language=julia-1.5>\n\
    is_nested(\"[[][]]\")\n</cell>\n<code language=julia-1.5>\nis_nested(\"[[][]]\"\
    )\n</cell>\n<code language=julia-1.5>\nis_nested(\"[[][]]\")\n</cell>\n<code language=julia-1.5>\n\
    is_nested(\"[[][]]\")\n</cell>\n<code language=julia-1.5>\nis_nested(\"[[][]]\"\
    )\n</cell>\n<code language=julia-1.5>\nis_nested(\"[[][]]\")\n</cell>\n<code language=julia-1.5>\n\
    is_nested(\"[[][]]\")\n</cell>\n<code language=julia-1.5>\nis_nested(\"[[][]]\"\
    )\n</cell>\n<code language=julia-1.5>\nis_nested(\"[[][]]\")\n</cell>\n<code language=julia-1.5>\n\
    is_nested(\"[[][]]\")\n</cell>\n<code language=julia-1.5>\nis_nested(\"[[][]]\"\
    )\n</cell>\n<code language=julia-1.5>\nis_nested(\"[[][]]\")\n</cell>\n<code language=julia-1.5>\n\
    is_nested(\"[[][]]\")\n</cell>\n<code language=julia-1.5>\nis_nested(\"[[][]]\"\
    )\n</cell>\n<code language=julia-1.5>\nis_nested(\"[[][]]\")\n</cell>\n<code language=julia-1.5>\n\
    is_nested(\"[[][]]\")\n</", "    stack = Stack()\n    stack.append(0)\n    \n\
    \    for c in string:\n        if c == '[':\n            stack.append(1)\n   \
    \     elif c == '[':\n            stack.pop()\n        elif c == ']':\n      \
    \      if stack.pop() != 1:\n                return False\n        elif c == ']':\n\
    \            if stack.pop() != 0:\n                return False\n    return stack.pop()\
    \ == 0\n</cell>\n<text>\nExercise\nWrite a function that takes a string as input\
    \ which contains only square brackets.\nThe function should return True if and\
    \ only if there is a valid subsequence of brackets \nwhere at least one bracket\
    \ in the subsequence is nested.", "    \n    stack = Stack()\n    stack.append(0)\n\
    \    \n    for c in string:\n        if c == '[':\n            stack.append(1)\n\
    \        elif c == ']':\n            stack.pop()\n        elif stack.isEmpty():\n\
    \            return False\n        elif stack.pop() != 1:\n            return\
    \ False\n    \n    return stack.isEmpty()\n    \n\"\"\"\n    Create a function\
    \ that takes a string as input which contains only square brackets.\n    The function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    \    where no bracket in the subsequence is nested.", "    \n    stack::Vector{String}\
    \ = []\n    \n    for c in string\n        if c == '['\n            push!(stack,\
    \ c)\n        elseif c == ']'\n            if isempty(stack)\n               \
    \ return false\n            else\n                pop!(stack)\n            end\n\
    \        elseif c == '['\n            if isempty(stack)\n                return\
    \ false\n            else\n                pop!(stack)\n            end\n    \
    \    end\n    end\n    \n    return isempty(stack)\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Create a function that takes a string as input which contains only\
    \ square brackets.\n    The function should return True if and only if there is\
    \ a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.", "    \n    stack = Stack()\n    stack.append(0)\n    \n    for\
    \ c in string:\n        if c == '[':\n            stack.append(1)\n        elif\
    \ c == '[':\n            stack.pop()\n        elif c == ']':\n            if stack.pop()\
    \ == 0:\n                return True\n    return False\n</cell>\n<cell>\nis_nested('[[]]')\
    \ \u279E True\nis_nested('[]]]]]]][[[[[]') \u279E False\nis_nested('[][]') \u279E\
    \ False\nis_nested('[]') \u279E False\nis_nested('[[][]]') \u279E True\nis_nested('[[]][[')\
    \ \u279E True\n</cell>\n<text>\nExercise\nWrite a function that takes a string\
    \ as input which contains only square brackets.\nThe function should return True\
    \ if and only if there is a valid subsequence of brackets \nwhere at least one\
    \ bracket in the subsequence is nested.", "    \n    stack = Stack()\n    \n \
    \   for c in string:\n        if c == '[':\n            stack.push(c)\n      \
    \  elif c == ']':\n            if not stack.isEmpty():\n                if stack.pop()\
    \ != '[':\n                    return False\n            else:\n             \
    \   return False\n        elif stack.isEmpty():\n            return False\n  \
    \      else:\n            stack.push(c)\n    \n    return not stack.isEmpty()\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    Create a function that takes a\
    \ string as input which contains only square brackets.\n    The function should\
    \ return True if and only if there is a valid subsequence of brackets \n    where\
    \ at least one bracket in the subsequence is nested.", "    \n    stack = Stack()\n\
    \    \n    for char in string\n        if char == '['\n            stack.push(char)\n\
    \        else if char == ']'\n            if stack.length == 0\n             \
    \   return false\n            else\n                stack.pop()\n        end\n\
    \    end\n    \n    return stack.length == 0\nend\n</cell>\n<code language=julia-1.5>\n\
    is_nested
  "    \n    stack = Stack()\n    \n    for char in string:\n        if char == '[':\n\
    \            stack.push(char)\n        elif char == ']':\n            if stack.top\
    \ == '[':\n                stack.pop()\n            else:\n                return\
    \ False\n        elif char == '[':\n            if stack.top == '[':\n       \
    \         stack.pop()\n            else:\n                stack.push(char)\n \
    \       elif char == ']':\n            if stack.top == '[':\n                stack.pop()\n\
    \            else:\n                return False\n        elif char == ']':\n\
    \            if stack.top == '[':\n                stack.pop()\n            else:\n\
    \                return False\n        elif char == ']':\n            if stack.top\
    \ == '[':\n                stack.pop()\n            else:\n                return\
    \ False\n        elif char == ']':\n            if stack.top == '[':\n       \
    \         stack.pop()\n            else:\n                return False\n     \
    \   elif char == ']':\n            if stack.top == '[':\n                stack.pop()\n\
    \            else:\n                return False\n        elif char == ']':\n\
    \            if stack.top == '[':\n                stack.pop()\n            else:\n\
    \                return False\n        elif char == ']':\n            if stack.top\
    \ == '[':\n                stack.pop()\n            else:\n                return\
    \ False\n        elif char == ']':\n            if stack.top == '[':\n       \
    \         stack.pop()\n            else:\n                return False\n     \
    \   elif char == ']':\n            if stack.top == '[':\n                stack.pop()\n\
    \            else:\n                return False\n        elif char == ']':\n\
    \            if stack.top == '[':\n                stack.pop()\n            else:\n\
    \                return False\n        elif char == ']':\n            if stack.top\
    \ == '[':\n                stack.pop()\n            else:\n                return\
    \ False\n        elif char == ']':\n            if stack.top == '[':\n       \
    \         stack.pop()\n            else:\n                return False\n     \
    \   elif char == ']':\n            if stack.top == '[':\n                stack.pop()\n\
    \            else:\n                return False\n        elif char == ']':\n\
    \            if stack.top == '[':\n                stack.pop()\n            else:\n\
    \                return False\n        elif char == ']':\n            if stack.top\
    \ == '[':\n                stack.pop()\n            else:\n                return\
    \ False\n        elif char == ']':\n            if stack.top == '[':\n       \
    \         stack.pop()\n            else:\n                return False\n     \
    \   elif char == ']':\n            if stack.top == '[':\n                stack.pop()\n\
    \            else:\n                return False\n        elif char == ']':\n\
    \            if stack.top == '[':\n                stack.pop()\n            else:\n\
    \                return False\n        elif char == ']':\n            if stack.top\
    \ == '[':\n                stack.pop()\n            else:\n                return\
    \ False\n        elif char == ']':\n            if stack.top == '[':\n       \
    \         stack.pop()\n            else:\n                return False\n     \
    \   elif char == ']':\n            if stack.top == '[':\n                stack.pop()\n\
    \            else:\n                return False\n        elif ", "    \n    stack\
    \ = Stack()\n    \n    for c in string:\n        if c == '[':\n            stack.push(c)\n\
    \        elif c == ']':\n            if stack.length() == 0:\n               \
    \ return False\n            else:\n                stack.pop()\n        elif stack.length()\
    \ > 0:\n            if stack.length() > 1:\n                return False\n   \
    \         else:\n                stack.pop()\n                \n    return True\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string as input which\
    \ contains only square brackets.\nThe function should return True if and only\
    \ if there is a valid subsequence of brackets \nwhere at least one bracket in\
    \ the subsequence is nested.", "    \n    stack = Stack()\n    stack.push(\"[\"\
    )\n    \n    for c in string:\n        if c == \"[\":\n            stack.push(c)\n\
    \        elif c == \"]\":\n            if not stack.isEmpty():\n             \
    \   if stack.pop() == \"[\":\n                    return True\n            else:\n\
    \                return False\n        elif c == \"]\" and stack.isEmpty():\n\
    \            return False\n    \n    return stack.isEmpty()\n</cell>\n<code language=julia-1.5>\n\
    is_nested(\"[][]\")\n</cell>\n<code language=julia-1.5>\nis_nested(\"[]\")\n</cell>\n\
    <code language=julia-1.5>\nis_nested(\"[[]]\")\n</cell>\n<code language=julia-1.5>\n\
    is_nested(\"[[]][]\")\n</cell>\n<code language=julia-1.5>\nis_nested(\"[[]][][]\"\
    )\n</cell>\n<code language=julia-1.5>\nis_nested(\"[[]][][][]\")\n</cell>\n<code\
    \ language=julia-1.5>\nis_nested(\"[[]][][][][]\")\n</cell>\n<code language=julia-1.5>\n\
    is_nested(\"[[]][][][][][]\")\n</cell>\n<code language=julia-1.5>\nis_nested(\"\
    [[]][][][][][][]\")\n</cell>\n<code language=julia-1.5>\nis_nested(\"[[]][][][][][][][]\"\
    )\n</cell>\n<code language=julia-1.5>\nis_nested(\"[[]][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][]",
  "    stack = Stack()\n    stack.append(0)\n    for i in string:\n        if i ==\
    \ '[':\n            stack.append(1)\n        elif i == ']':\n            stack.pop()\n\
    \        elif stack.isEmpty():\n            return False\n    return stack.isEmpty()\n\
    </code>\n<|/ a tags=string,python,algorithm |>\n<| a dscore=0 |>\n<code>\ndef\
    \ isNest(string):\n    stack = []\n    stack.append(0)\n    for i in string:\n\
    \        if i == '[':\n            stack.append(1)\n        elif i == ']':\n \
    \           stack.pop()\n        elif stack.isEmpty():\n            return False\n\
    \    return stack.isEmpty()\n</code>\n<|/ a tags=string,python,algorithm |>\n\
    <| c |>\nWhile this code may answer the question, providing additional context\
    \ regarding why and/or how this code answers the question improves its long-term\
    \ value.\n<|/ c |>\n<| a dscore=0 |>\n<code>\ndef isNest(string):\n    stack =\
    \ []\n    stack.append(0)\n    for i in string:\n        if i == '[':\n      \
    \      stack.append(1)\n        elif i == ']':\n            stack.pop()\n    \
    \    elif stack.isEmpty():\n            return False\n    return stack.isEmpty()\n\
    </code>\n<|/ a tags=string,python,algorithm |>\n<| a dscore=0 |>\n<code>\ndef\
    \ isNest(string):\n    stack = []\n    stack.append(0)\n    for i in string:\n\
    \        if i == '[':\n            stack.append(1)\n        elif i == ']':\n \
    \           stack.pop()\n        elif stack.isEmpty():\n            return False\n\
    \    return stack.isEmpty()\n</code>\n<|/ a tags=string,python,algorithm |>\n\
    <| c |>\nWhile this code may answer the question, providing additional context\
    \ regarding why and/or how this code answers the question improves its long-term\
    \ value.\n<|/ c |>\n<| a tags=string,python,algorithm |>\n<code>\ndef isNest(string):\n\
    \    stack = []\n    stack.append(0)\n    for i in string:\n        if i == '[':\n\
    \            stack.append(1)\n        elif i == ']':\n            stack.pop()\n\
    \        elif stack.isEmpty():\n            return False\n    return stack.isEmpty()\n\
    </code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\ndef isNest(string):\n    stack =\
    \ []\n    stack.append(0)\n    for i in string:\n        if i == '[':\n      \
    \      stack.append(1)\n        elif i == ']':\n            stack.pop()\n    \
    \    elif stack.isEmpty():\n            return False\n    return stack.isEmpty()\n\
    </code>\n<|/ a tags=string,python,algorithm dscore=0 |>\n<| a d", "    \n    stack\
    \ = Stack()\n    \n    for c in string:\n        if c == '[':\n            stack.push(c)\n\
    \        elif c == ']':\n            if stack.isEmpty():\n                return\
    \ False\n            elif stack.peek() == '[':\n                stack.pop()\n\
    \            else:\n                stack.pop()\n                stack.push(c)\n\
    \        elif stack.isEmpty():\n            return False\n        else:\n    \
    \        stack.pop()\n            stack.push(c)\n            \n    return stack.isEmpty()\n\
    </cell>\n<cell>\nis_nested('[[]]') \u279E True\nis_nested('[]]]]]]][[[[[]') \u279E\
    \ False\nis_nested('[][]') \u279E False\nis_nested('[]') \u279E False\nis_nested('[[][]]')\
    \ \u279E True\nis_nested('[[]][[') \u279E True\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a string as input and returns the number of square\
    \ brackets in the string.", "    \n    stack = Stack()\n    \n    for c in string:\n\
    \        if c == '[':\n            stack.push(c)\n        elif c == ']':\n   \
    \         if not stack.is_empty():\n                if stack.pop() == '[':\n \
    \                   return True\n                else:\n                    return\
    \ False\n            else:\n                return False\n        else:\n    \
    \        return False\n        \n    return not stack.is_empty()\n</cell>\n<text>\n\
    Exercise\nWrite a function that takes a string as input which contains only square\
    \ brackets.\nThe function should return True if and only if there is a valid subsequence\
    \ of brackets \nwhere at least one bracket in the subsequence is nested.", " \
    \   \n    stack = Stack()\n    \n    for char in string:\n        if char == '[':\n\
    \            stack.push(char)\n        elif char == ']':\n            if stack.is_empty():\n\
    \                return False\n            stack.pop()\n        elif char == '['\
    \ or char == ']':\n            if stack.is_empty():\n                return False\n\
    \            stack.pop()\n            stack.pop()\n            \n    return stack.is_empty()\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string as input and\
    \ returns the number of square brackets in the string.", "    \n    stack = Stack()\n\
    \    \n    for c in string:\n        if c == '[':\n            stack.push(c)\n\
    \        elif c == ']':\n            if stack.is_empty():\n                return\
    \ False\n            else:\n                stack.pop()\n        elif stack.is_empty():\n\
    \            return False\n        else:\n            stack.pop()\n          \
    \  stack.push(c)\n            \n    return stack.is_empty()\n</cell>\n<cell>\n\
    is_nested('[[]]') \u279E True\nis_nested('[]]]]]]][[[[[]') \u279E False\nis_nested('[][]')\
    \ \u279E False\nis_nested('[]') \u279E False\nis_nested('[[][]]') \u279E True\n\
    is_nested('[[]][[') \u279E True\n</cell>\n<text>\nExercise\nWrite a function that\
    \ takes a string as input which contains only square brackets.\nThe function should\
    \ return True if and only if there is a valid subsequence of brackets \nwhere\
    \ at least one bracket in the subsequence is nested.", "    \n    stack::Vector{String}\
    \ = []\n    \n    for c in string\n        if c == '['\n            push!(stack,\
    \ c)\n        elseif c == ']'\n            if isempty(stack)\n               \
    \ return false\n            elseif pop!(stack) == ']'\n                return\
    \ true\n            else\n                return false\n            end\n    \
    \    elseif c == '['\n            if isempty(stack)\n                return false\n\
    \            elseif pop!(stack) == '['\n                return true\n        \
    \    else\n                return false\n            end\n        end\n    end\n\
    \    \n    return false\nend\n</cell>\n<code language=julia-1.5>\nis_nested(\"\
    []\")\n</cell>\n<code language=julia-1.5>\nis_nested(\"[[]]\")\n</cell>\n<code\
    \ language=julia-1.5>\nis_nested(\"[][]\")\n</cell>\n<code language=julia-1.5>\n\
    is_nested(\"[]\")\n</cell>\n<code language=julia-1.5>\nis_nested(\"[[][]]\")\n\
    </cell>\n<code language=julia-1.5>\nis_nested(\"[[]][[\")\n</cell>\n<code language=julia-1.5>\n\
    is_nested
  "    \n    stack = Stack()\n    stack.append(0)\n    \n    for c in string:\n  \
    \      if c == '[':\n            stack.append(1)\n        elif c == ']':\n   \
    \         stack.pop()\n        elif stack.isEmpty == True:\n            return\
    \ False\n        elif stack.isEmpty == False:\n            if stack.pop() != 1:\n\
    \                return False\n    \n    return True\n</cell>\n<code language=julia-1.5>\n\
    is_nested(\"[[]]\")\n</cell>\n<code language=julia-1.5>\nis_nested(\"[]]]]]]][[[[[]\"\
    )\n</cell>\n<code language=julia-1.5>\nis_nested(\"[][]\")\n</cell>\n<code language=julia-1.5>\n\
    is_nested(\"[]\")\n</cell>\n<code language=julia-1.5>\nis_nested(\"[[][]]\")\n\
    </cell>\n<code language=julia-1.5>\nis_nested(\"[[]][[\")\n</cell>\n<code language=julia-1.5>\n\
    is_nested
  "    \n    stack = Stack()\n    stack.push(string)\n    \n    while stack.size >\
    \ 0 do\n        \n        current = stack.pop()\n        \n        if current\
    \ == '[' then\n            stack.push(current + current)\n        elseif current\
    \ == ']' then\n            if stack.size == 0 then\n                return false\n\
    \            else\n                stack.pop()\n            end\n        else\n\
    \            return false\n        end\n    end\n    \n    return true\nend\n\
    </cell>\n<code language=julia-1.5>\nis_nested(\"[]\")\n</cell>\n<code language=julia-1.5>\n\
    is_nested(\"[[]\")\n</cell>\n<code language=julia-1.5>\nis_nested(\"[][]\")\n\
    </cell>\n<code language=julia-1.5>\nis_nested(\"[[][]]\")\n</cell>\n<code language=julia-1.5>\n\
    is_nested(\"[[][[]]]\")\n</cell>\n<code language=julia-1.5>\nis_nested(\"[[][[]]][]\"\
    )\n</cell>\n<code language=julia-1.5>\nis_nested(\"[[][[]]][][]\")\n</cell>\n\
    <code language=julia-1.5>\nis_nested(\"[[][[]]][][][]\")\n</cell>\n<code language=julia-1.5>\n\
    is_nested(\"[[][[]]][][][][]\")\n</cell>\n<code language=julia-1.5>\nis_nested(\"\
    [[][[]]][][][][][]\")\n</cell>\n<code language=julia-1.5>\nis_nested(\"[[][[]]][][][][][][]\"\
    )\n</cell>\n<code language=julia-1.5>\nis_nested(\"[[][[]]][][][][][][][]\")\n\
    </cell>\n<code language=julia-1.5>\nis_nested(\"[[][[]]][][][][][][][][][]\")\n\
    </cell>\n<code language=julia-1.5>\nis_nested(\"[[][[]]][][][][][][][][][][][]\"\
    )\n</cell>\n<code language=julia-1.5>\nis_nested(\"[[][[]]][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][]",
  "    \n    stack = Stack()\n    stack.push(string)\n    \n    while stack.size >\
    \ 0\n        \n        current = stack.pop()\n        \n        if current ==\
    \ \"[]\"\n            \n            return true\n        \n        if current\
    \ == \"[[]\"\n            \n            stack.push(\"[]\")\n            \n   \
    \         return true\n        \n        if current == \"[]]\"\n            \n\
    \            stack.push(\"[]\")\n            \n            return true\n     \
    \   \n        if current == \"[[][]\"\n            \n            stack.push(\"\
    []\")\n            \n            return true\n        \n        if current ==\
    \ \"[[]\"\n            \n            stack.push(\"[]\")\n            \n      \
    \      return true\n        \n        if current == \"[][]]\"\n            \n\
    \            stack.push(\"[]\")\n            \n            return true\n     \
    \   \n        if current == \"[][]\"\n            \n            stack.push(\"\
    []\")\n            \n            return true\n        \n        if current ==\
    \ \"[]\"\n            \n            stack.push(\"[]\")\n            \n       \
    \     return true\n        \n        if current == \"[[][]]\"\n            \n\
    \            stack.push(\"[]\")\n            \n            return true\n     \
    \   \n        if current == \"[[]]\"\n            \n            stack.push(\"\
    []\")\n            \n            return true\n        \n        if current ==\
    \ \"[][]]\"\n            \n            stack.push(\"[]\")\n            \n    \
    \        return true\n        \n        if current == \"[][]\"\n            \n\
    \            stack.push(\"[]\")\n            \n            return true\n     \
    \   \n        if current == \"[]\"\n            \n            stack.push(\"[]\"\
    )\n            \n            return true\n        \n        if current == \"[[][]]\"\
    \n            \n            stack.push(\"[]\")\n            \n            return\
    \ true\n        \n        if current == \"[[]]\"\n            \n            stack.push(\"\
    []\")\n            \n            return true\n        \n        if current ==\
    \ \"[][]]\"\n            \n            stack.push(\"[]\")\n            \n    \
    \        return true\n        \n        if current == \"[][]\"\n            \n\
    \            stack.push(\"[]\")\n            \n            return true\n     \
    \   \n        if current == \"[]\"\n            \n            stack.push(\"[]\"\
    )\n            \n            return true\n        \n        if current == \"[[][]]\"\
    \n            \n            stack.push(\"[]\")\n            \n            return\
    \ true\n        \n        if current == \"[[]]\"\n            \n            stack.push(\"\
    []\")\n            \n            return true\n        \n        if current ==\
    \ \"[][]]\"\n            \n            stack.push(\"[]\")\n            \n    \
    \        return true\n        \n        if current == \"[][]\"\n            \n\
    \            ", "    \n    stack = Stack()\n    \n    for c in string:\n     \
    \   if c == '[':\n            stack.push(c)\n        elif c == ']':\n        \
    \    if stack.isEmpty():\n                return False\n            elif stack.pop()\
    \ != '[':\n                return False\n            else:\n                stack.pop()\n\
    \        else:\n            if stack.isEmpty():\n                return False\n\
    \            elif stack.pop() != c:\n                return False\n    \n    return\
    \ stack.isEmpty()\n    \n\"\"\"\n    Create a function that takes a string as\
    \ input which contains only square brackets.\n    The function should return True\
    \ if and only if there is a valid subsequence of brackets \n    where at least\
    \ one bracket in the subsequence is nested.", "    \n    stack = Stack()\n   \
    \ stack.push(string)\n    \n    while stack.size > 0\n        \n        current\
    \ = stack.pop()\n        \n        if current == '['\n            stack.push(']')\n\
    \            stack.push('[')\n            \n        elif current == ']'\n    \
    \        stack.push('[')\n            stack.push(']')\n            \n        else\n\
    \            stack.push(current)\n            \n    end\n    \n    return stack.size\
    \ == 0\nend\n</cell>\n<code language=julia-1.5>\nis_nested
  "    \n    stack = Stack()\n    \n    for char in string\n        if char == '['\n\
    \            stack.push(char)\n        else if char == ']'\n            if stack.size\
    \ == 0\n                false\n            else if stack.peek() == '['\n     \
    \           stack.pop()\n            else\n                false\n        else\n\
    \            false\n    end\n    \n    return stack.size == 0\nend", "    \n \
    \   stack::Vector[String] = Vector.empty\n    \n    for c in string:\n       \
    \ if c == '[':\n            stack := stack :+ c\n        elif c == ']':\n    \
    \        if len(stack) == 0:\n                return False\n            elif stack[length(stack)\
    \ - 1] == '[':\n                stack = stack[length(stack) - 1 .. -1]\n     \
    \       else:\n                return False\n        elif c == ']':\n        \
    \    if len(stack) == 0:\n                return False\n            elif stack[length(stack)\
    \ - 1] == '[':\n                stack = stack[length(stack) - 1 .. -1]\n     \
    \       else:\n                return False\n        elif c == '[':\n        \
    \    stack := stack :+ c\n        elif c == ']':\n            if len(stack) ==\
    \ 0:\n                return False\n            elif stack[length(stack) - 1]\
    \ == '[':\n                stack = stack[length(stack) - 1 .. -1]\n          \
    \  else:\n                return False\n        elif c == '[':\n            stack\
    \ := stack :+ c\n        elif c == ']':\n            if len(stack) == 0:\n   \
    \             return False\n            elif stack[length(stack) - 1] == '[':\n\
    \                stack = stack[length(stack) - 1 .. -1]\n            else:\n \
    \               return False\n        elif c == '[':\n            stack := stack\
    \ :+ c\n        elif c == ']':\n            if len(stack) == 0:\n            \
    \    return False\n            elif stack[length(stack) - 1] == '[':\n       \
    \         stack = stack[length(stack) - 1 .. -1]\n            else:\n        \
    \        return False\n        elif c == '[':\n            stack := stack :+ c\n\
    \        elif c == ']':\n            if len(stack) == 0:\n                return\
    \ False\n            elif stack[length(stack) - 1] == '[':\n                stack\
    \ = stack[length(stack) - 1 .. -1]\n            else:\n                return\
    \ False\n        elif c == '[':\n            stack := stack :+ c\n        elif\
    \ c == ']':\n            if len(stack) == 0:\n                return False\n \
    \           elif stack[length(stack) - 1] == '[':\n                stack = stack[length(stack)\
    \ - 1 .. -1]\n            else:\n                return False\n        elif c\
    \ == '[':\n            stack := stack :+ c\n        elif c == ']':\n         \
    \   if len(stack) == 0:\n                return False\n            elif stack[length(stack)\
    \ - 1] == '[':\n                stack = stack[length(stack) - 1 .. -1]\n     \
    \       else:\n                return False\n        elif c == '[':\n        \
    \    stack := stack :+ c\n        elif c == ']':\n            if len(stack) ==\
    \ 0:\n                return False\n            elif stack[length(stack) - 1]\
    \ == '[':\n                stack = stack[length(stack) - 1 .. -1]\n          \
    \  else:\n                return False\n        elif c == '[':\n            stack\
    \ := stack :+ c\n        elif c == ']':\n            if len(stack) == 0:\n   \
    \             return False\n            elif stack[length(stack) - 1] == '[':\n\
    \                stack = ", "    stack = Stack()\n    brackets = Stack()\n   \
    \ brackets.push(string)\n    \n    while brackets.count > 0\n        current =\
    \ brackets.pop()\n        if current == '['\n            stack.push(current)\n\
    \        else if current == ']'\n            if stack.count > 0\n            \
    \    brackets.push(stack.pop())\n            else\n                return false\n\
    \        end\n    end\n    return stack.count == 0\nend\n</cell>\n<code language=julia-1.5>\n\
    is_nested(\"[[]]\")\n</cell>\n<code language=julia-1.5>\nis_nested(\"[]]]]]]][[[[[]\"\
    )\n</cell>\n<code language=julia-1.5>\nis_nested(\"[][]\")\n</cell>\n<code language=julia-1.5>\n\
    is_nested(\"[]\")\n</cell>\n<code language=julia-1.5>\nis_nested(\"[[][]]\")\n\
    </cell>\n<code language=julia-1.5>\nis_nested(\"[[]][[\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string as input and returns the number of characters\
    \ in the string that are not alphanumeric."]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
