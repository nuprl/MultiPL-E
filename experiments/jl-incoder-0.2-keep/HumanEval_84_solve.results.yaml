name: HumanEval_84_solve
language: julia
results:
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N <\
    \ 0\n        return \"0\"\n    \n    if N == 0\n        return \"0\"\n    \n \
    \   sum = 0\n    \n    while N > 0\n        sum = sum + N % 2\n        N = N /\
    \ 2\n    \n    return String(sum)\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ solve(1) == \"0\"\n@assert solve(2) == \"1\"\n@assert solve(3) == \"11\"\n@assert\
    \ solve(4) == \"100\"\n@assert solve(5) == \"101\"\n@assert solve(6) == \"110\"\
    \n@assert solve(7) == \"111\"\n@assert solve(8) == \"1000\"\n@assert solve(9)\
    \ == \"1001\"\n@assert solve(10) == \"1010\"\n@assert solve(11) == \"1011\"\n\
    @assert solve(12) == \"1100\"\n@assert solve(13) == \"1101\"\n@assert solve(14)\
    \ == \"1110\"\n@assert solve(15) == \"1111\"\n@assert solve(16) == \"10000\"\n\
    @assert solve(17) == \"10001\"\n@assert solve(18) == \"10010\"\n@assert solve(19)\
    \ == \"10011\"\n@assert solve(20) == \"10100\"\n@assert solve(21) == \"10501\"\
    \n@assert solve(22) == \"10110\"\n@assert solve(23) == \"10111\"\n@assert solve(24)\
    \ == \"11000\"\n@assert solve(25) == \"11001\"\n@assert solve(26) == \"11010\"\
    \n@assert solve(27) == \"11011\"\n@assert solve(28) == \"11100\"\n@assert solve(29)\
    \ == \"11101\"\n@assert solve(30) == \"11110\"\n@assert solve(31) == \"11111\"\
    \n@assert solve(32) == \"10000\"\n@assert solve(33) == \"10001\"\n@assert solve(34)\
    \ == \"10010\"\n@assert solve(35) == \"10011\"\n@assert solve(36) == \"10100\"\
    \n@assert solve(37) == \"10501\"\n@assert solve(38) == \"10110\"\n@assert solve(39)\
    \ == \"10111\"\n@assert solve(40) == \"11000\"\n@assert solve(41) == \"11001\"\
    \n@assert solve(42) == \"11010\"\n@assert solve(43) == \"11011\"\n@assert solve(44)\
    \ == \"11100\"\n@assert solve(45) == \"11101\"\n@assert solve(46) == \"11110\"\
    \n@assert solve(47) == \"11111\"\n@assert solve(48) == \"10000\"\n@assert solve(49)\
    \ == \"10001\"\n@assert solve(50) == \"10010\"\n@assert solve(51) == \"10011\"\
    \n@assert solve(52) == \"10100\"\n@assert solve(53) == \"10\nusing Test\n\n@testset\
    \ begin\n\ncandidate = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150)\
    \ == \"110\")\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) ==\
    \ \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr1a_6iot.jl:29\nin expression starting at\
    \ /tmp/tmpr1a_6iot.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N <\
    \ 0\n        return \"-1\"\n    \n    digits = zeros(Int, N)\n    \n    for i\
    \ = 1:N\n        digits[i] = N % 2\n        N = N / 2\n    end\n    \n    sum\
    \ = 0\n    for i = 1:N\n        sum = sum + digits[i]\n    end\n    \n    return\
    \ string(digits, digits[end], sum)\nend\n</cell>\n<code language=julia-1.5>\n\
    solve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\n\
    solve(147)\n</cell>\n<text>\nProblem 4\nWrite a Julia function called sumDigits\
    \ that takes in an integer N and returns the sum of its digits in binary.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000) == \"\
    1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"1100\")\n\
    \t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpoaz7i4vj.jl:32\nin expression starting at\
    \ /tmp/tmpoaz7i4vj.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N <\
    \ 0\n        return \"-1\"\n    \n    if N == 0\n        return \"0\"\n    \n\
    \    sum = 0\n    \n    while N > 0\n        sum = sum + N % 10\n        N = N\
    \ / 10\n    end\n    \n    return string(sum)\nend\n</cell>\n<code language=julia-1.5>\n\
    solve(1)\n</cell>\n<code language=julia-1.5>\nsolve(10)\n</cell>\n<code language=julia-1.5>\n\
    solve(100)\n</cell>\n<code language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\n\
    solve(150)\n</cell>\n<code language=julia-1.5>\nsolve(147)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(15\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000)\
    \ == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"\
    1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2qe8d64h.jl:30\nin expression starting at\
    \ /tmp/tmp2qe8d64h.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N <\
    \ 0\n        return \"-1\"\n    \n    digits = N % 10\n    \n    if N < 10\n \
    \       return digits::String\n    \n    digits = digits::String\n    \n    digits\
    \ = digits[0..digits.length-1]\n    \n    digits = digits[0..digits.length-1]\n\
    \    \n    digits = digits[0..digits.length-1]\n    \n    digits = digits[0..digits.length-1]\n\
    \    \n    digits = digits[0..digits.length-1]\n    \n    digits = digits[0..digits.length-1]\n\
    \    \n    digits = digits[0..digits.length-1]\n    \n    digits = digits[0..digits.length-1]\n\
    \    \n    digits = digits[0..digits.length-1]\n    \n    digits = digits[0..digits.length-1]\n\
    \    \n    digits = digits[0..digits.length-1]\n    \n    digits = digits[0..digits.length-1]\n\
    \    \n    digits = digits[0..digits.length-1]\n    \n    digits = digits[0..digits.length-1]\n\
    \    \n    digits = digits[0..digits.length-1]\n    \n    digits = digits[0..digits.length-1]\n\
    \    \n    digits = digits[0..digits.length-1]\n    \n    digits = digits[0..digits.length-1]\n\
    \    \n    digits = digits[0..digits.length-1]\n    \n    digits = digits[0..digits.length-1]\n\
    \    \n    digits = digits[0..digits.length-1]\n    \n    digits = digits[0..digits.length-1]\n\
    \    \n    digits = digits[0..digits.length-1]\n    \n    digits = digits[0..digits.length-1]\n\
    \    \n    digits = digits[0..digits.length-1]\n    \n    digits = digits[0..digits.length-1]\n\
    \    \n    digits = digits[0..digits.length-1]\n    \n    digits = digits[0..digits.length-1]\n\
    \    \n    digits = digits[0..digits.length-1]\n    \n    digits = digits[0..digits.length-1]\n\
    \    \n    digits = digits[0..digits.length-1]\n    \n    digits = digits[0..digits.length-1]\n\
    \    \n    digits = digits[0..digits.length-1]\n    \n    digits = digits[0..digits.length-1]\n\
    \    \n    digits = digits[0..digits.length-1]\n    \n    digits = digits[0..digits.length-1]\n\
    \    \n    digits = \nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000)\
    \ == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"\
    1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc8_e2c81.jl:1\nin expression starting at /tmp/tmpc8_e2c81.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N <\
    \ 0\n        return \"-1\"\n    \n    digits = zeros(Int, 10)\n    \n    for i\
    \ in 1:N\n        digits[i] = N % 10\n        N = N / 10\n    end\n    \n    sum\
    \ = 0\n    for i in 1:length(digits)\n        sum = sum + digits[i]\n    end\n\
    \    \n    return string(digits, digits[end], sum)\nend\n</cell>\n<code language=julia-1.5>\n\
    solve(1)\n</cell>\n<code language=julia-1.5>\nsolve(100)\n</cell>\n<code language=julia-1.5>\n\
    solve(150)\n</cell>\n<code language=julia-1.5>\nsolve(147)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000)\n</cell>\n<code language=\nusing Test\n\n@testset begin\n\ncandidate\
    \ = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150) == \"110\"\
    )\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) == \"1001\")\n\t\
    @test(candidate(963) == \"10010\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdrm_y7r7.jl:32\nin expression starting at\
    \ /tmp/tmpdrm_y7r7.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    \n    if\
    \ N < 0\n        return \"-1\"\n    \n    digits = N % 10\n    \n    if digits\
    \ == 0\n        return \"0\"\n    \n    sum = 0\n    \n    while N > 0\n     \
    \   sum = sum + digit\n        N = N / 10\n    \n    return sum.to_s\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000) == \"\
    1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"1100\")\n\
    \t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjubqni00.jl:1\nin expression starting at /tmp/tmpjubqni00.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    \n    if\
    \ N < 0\n        return \"0\"\n    \n    if N == 0\n        return \"0\"\n   \
    \ \n    if N == 1\n        return \"1\"\n    \n    digits = N % 10\n    \n   \
    \ binary_digits = solve(floor(N / 10))\n    \n    binary_digits = binary_digits\
    \ + digits_to_binary(digits)\n    \n    return binary_digits\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(N)\n</cell>\n<text>\nProblem 3\nA palindromic number\
    \ reads the same both ways. The largest palindrome made from the product of two\
    \ 2-digit numbers is 9009 = 91 \xD7 99.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150) == \"110\"\
    )\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) == \"1001\")\n\t\
    @test(candidate(963) == \"10010\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnofaaads.jl:33\nin expression starting at\
    \ /tmp/tmpnofaaads.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N <\
    \ 0\n        return \"0\"\n    \n    sum = 0\n    digits = N % 10\n    \n    while\
    \ N > 0\n        sum += digits\n        N /= 10\n        digits = N % 10\n   \
    \ end\n    \n    return string(digits, digits)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150)\
    \ == \"110\")\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) ==\
    \ \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpulizr1zs.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpulizr1zs.jl:1\n\
    in expression starting at /tmp/tmpulizr1zs.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    \n    if\
    \ N < 0\n        return \"0\"\n    \n    if N == 0 \n        return \"0\"\n  \
    \  \n    if N == 1\n        return \"1\"\n    \n    digits = N % 10\n    \n  \
    \  sum = 0\n    \n    while N > 0\n        sum += digits\n        N /= 10\n  \
    \  \n    return sum.to_s(2)\nend\n</cell>\n<code language=julia-1.5>\nsolve(N)\n\
    </cell>\n<text>\nProblem 3\nWrite a Julia function called sumDigits(N) that takes\
    \ an integer N and returns the sum of its digits in binary. For example, sumDigits(1000)\
    \ should return 1 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0\
    \ + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0\
    \ + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0\
    \ + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0\
    \ + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0\
    \ + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0\
    \ + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0\
    \ + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0\
    \ + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0\
    \ + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0\
    \ + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0\
    \ + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0\
    \ + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0\
    \ + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0\
    \ + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0\
    \ + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0\
    \ + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0\
    \ + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0\
    \ + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0\
    \ + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0\
    \ + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + \nusing Test\n\n@testset begin\n\
    \ncandidate = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150)\
    \ == \"110\")\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) ==\
    \ \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw25gvid8.jl:35\nin expression starting at\
    \ /tmp/tmpw25gvid8.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N <\
    \ 0\n        return \"-1\"\n    \n    digits = N % 10\n    N = N / 10\n    \n\
    \    if N == 0\n        return \"0\"\n    \n    digits = digits + solve(N)\n \
    \   \n    return digits\nend\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\
    \t@test(candidate(1000) == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147)\
    \ == \"1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) ==\
    \ \"10010\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkojxm4id.jl:1\nin expression starting at /tmp/tmpkojxm4id.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N <\
    \ 0\n        return \"0\"\n    \n    if N == 0\n        return \"0\"\n    \n \
    \   if N == 1\n        return \"1\"\n    \n    digits = String[]\n    \n    digits\
    \ = digits[0..N-1]\n    \n    sum = 0\n    \n    for i in digits\n        sum\
    \ += i\n    \n    return sum.to_s\nend\n</cell>\n<code language=julia-1.5>\nsolve(1000)\n\
    </cell>\n<code language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\n\
    solve(147)\n</cell>\n<text>\nProblem 7: Binary to Decimal\nGiven a binary number\
    \ represented as a string, convert it to decimal form by considering the digits\
    \ from right to left.\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t\
    @test(candidate(1000) == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147)\
    \ == \"1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) ==\
    \ \"10010\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx47otzuc.jl:35\nin expression starting at\
    \ /tmp/tmpx47otzuc.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    \n    sum\
    \ = 0\n    \n    for i in N:\n        sum += i\n    \n    return bin(sum)[2:]\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert solve(1) == \"1\"\n@assert solve(2)\
    \ == \"10\"\n@assert solve(3) == \"111\"\n@assert solve(4) == \"1010\"\n@assert\
    \ solve(5) == \"10111\"\n@assert solve(6) == \"11110\"\n@assert solve(7) == \"\
    11111\"\n@assert solve(8) == \"111111\"\n@assert solve(9) == \"1111111\"\n@assert\
    \ solve(10) == \"11111110\"\n@assert solve(11) == \"111111110\"\n@assert solve(12)\
    \ == \"1111111101\"\n@assert solve(13) == \"11111111010\"\n@assert solve(14) ==\
    \ \"111111110100\"\n@assert solve(15) == \"1111111101000\"\n@assert solve(16)\
    \ == \"11111111010000\"\n@assert solve(17) == \"111111110100000\"\n@assert solve(18)\
    \ == \"1111111101000000\"\n@assert solve(19) == \"11111111010000000\"\n@assert\
    \ solve(20) == \"111111110100000000\"\n@assert solve(21) == \"1111111101000000000\"\
    \n@assert solve(22) == \"11111111010000000000\"\n@assert solve(23) == \"111111110100000000000\"\
    \n@assert solve(24) == \"1111111101000000000000\"\n@assert solve(25) == \"11111111010000000000000\"\
    \n@assert solve(26) == \"111111110100000000000000\"\n@assert solve(27) == \"1111111101000000000000000\"\
    \n@assert solve(28) == \"11111111010000000000000000\"\n@assert solve(29) == \"\
    1111111101000000000000000000\"\n@assert solve(30) == \"11111111010000000000000000000\"\
    \n@assert solve(31) == \"111111110100000000000000000000\"\n@assert solve(32) ==\
    \ \"1111111101000000000000000000000\"\n@assert solve(33) == \"11111111010000000000000000000000\"\
    \n@assert solve(34) == \"111111110100000000000000000000000\"\n@assert solve(35)\
    \ == \"1111111101000000000000000000000000\"\n@assert solve(36) == \"11111111010000000000000000000000000\"\
    \n@assert solve(37) == \"111111110100000000000000000000000000\"\n@assert solve(38)\
    \ == \"1111111101000000000000000000000000000\"\n@assert solve(39) == \"11111111010000000000000000000000000000\"\
    \n@assert solve(40) == \"111111110100000000000000000000000000000\"\n@assert solve(41)\
    \ == \"1111111101000000000000000000000000000000\"\n@assert solve(42) == \"11111111010000000000000000000000000000000\n\
    using Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000) ==\
    \ \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"1100\"\
    )\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw16kfvj0.jl:19\nin expression starting at\
    \ /tmp/tmpw16kfvj0.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N <\
    \ 0 \n        return \"0\"\n    \n    digits = N % 10\n    \n    if digits ==\
    \ 0 \n        return \"0\"\n    \n    sum = 0\n    \n    while N > 0 \n      \
    \  sum += digits\n        N /= 10\n    \n    return sum.to_s(2)\nend\n</cell>\n\
    <code language=julia-1.5>\nsolve(147)\n</cell>\n<code language=julia-1.5>\nsolve(1000)\n\
    </cell>\n<code language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\n\
    solve(140)\n</cell>\n<code language=julia-1.5>\nsolve(130)\n</cell>\n<code language=julia-1.5>\n\
    solve(120)\n</cell>\n<code language=julia-1.5>\nsolve(100)\n</cell>\n<code language=julia-1.5>\n\
    solve(10)\n</cell>\n<code language=julia-1.5>\nsolve(9)\n</cell>\n<code language=julia-1.5>\n\
    solve(8)\n</cell>\n<code language=julia-1.5>\nsolve(7)\n</cell>\n<code language=julia-1.5>\n\
    solve(6)\n</cell>\n<code language=julia-1.5>\nsolve(5)\n</cell>\n<code language=julia-1.5>\n\
    solve(4)\n</cell>\n<code language=julia-1.5>\nsolve(3)\n</cell>\n<code language=julia-1.5>\n\
    solve(2)\n</cell>\n<code language=julia-1.5>\nsolve(1)\n</cell>\n<code language=julia-1.5>\n\
    solve(0) \n</cell>\n<code language=julia-1.5>\nsolve(-1) # should return \"0\"\
    \n</cell>\n<code language=julia-1.5>\nsolve(101) # should return \"111\"\n</cell>\n\
    <code language=julia-1.5>\nsolve(1001) # should return \"1001\"\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(1000) # should return \"1000\"\n</cell>\n<code language=julia-1.5>\n\
    solve(10000) # should return \"10000\"\n</cell>\n<code language=julia-1.5>\nsolve(100000)\
    \ # should return \"100000\"\n</cell>\n<code language=julia-1.5>\nsolve(1000000)\
    \ # should return \"1000000\"\n</cell>\n<code language=julia-1.5>\nsolve(100000000)\
    \ # should return \"100000000\"\n</cell>\n<code language=julia-1.5>\nsolve(1000000000000)\
    \ # should return \"1000000000000\"\n</cell>\n<code language=julia-1.5>\nsolve(1000000000000000)\
    \ # should return \"1000000000000000\"\n</cell>\n<code language=julia-1.5>\nsolve(100\n\
    using Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000) ==\
    \ \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"1100\"\
    )\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz5pcfwp1.jl:31\nin expression starting at\
    \ /tmp/tmpz5pcfwp1.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N <\
    \ 0\n        return \"-1\"\n    \n    if N == 0\n        return \"0\"\n    \n\
    \    if N == 1\n        return \"1\"\n    \n    digits = zeros(Int, 10)\n    \n\
    \    digits[1] = 1\n    \n    for i = 2 to N\n        digits[i] = digits[i-1]\
    \ + digits[i-2]\n    end\n    \n    return string(digits)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(150)\n\
    </cell>\n<code language=julia-1.5>\nsolve(147)\n</cell>\n<text>\nProblem 7\nWrite\
    \ a Julia function called sumDigits that takes in an integer N and returns the\
    \ sum of the digits of N in binary.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150) == \"110\"\
    )\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) == \"1001\")\n\t\
    @test(candidate(963) == \"10010\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpa8kld14l.jl:28 expected \"\
    end\", got \"N\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpa8kld14l.jl:28\n\
    in expression starting at /tmp/tmpa8kld14l.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N <\
    \ 0 \n        return \"0\"\n    \n    sum = 0\n    \n    for i in N:\n       \
    \ sum += i\n    \n    digits = sum.to_bin()\n    \n    return digits\nend\n</cell>\n\
    <code language=julia-1.5>\nsolve(1)\n</cell>\n<code language=julia-1.5>\nsolve(100)\n\
    </cell>\n<code language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\n\
    solve(147)\n</cell>\n<code language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\n\
    solve(10000)\n</cell>\n<text>\nProblem 3\nGiven a positive integer N, return the\
    \ sum of its digits in binary using only addition and multiplication operators.\n\
    \    \n    Example\n        For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n        For N = 150, the sum of digits will be 6 the output\
    \ should be \"110\".\n        For N = 147, the sum of digits will be 12 the output\
    \ should be \"1100\".\n    \n    Variables:\n        @N integer\n            \
    \ Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary\
    \ number\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000)\
    \ == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"\
    1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphu_fs9c8.jl:21\nin expression starting at\
    \ /tmp/tmphu_fs9c8.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N <\
    \ 0\n        return \"0\"\n    if N < 10\n        return tostring(N)\n    \n \
    \   digits = zeros(Int, 10)\n    digits[1] = 1\n    digits[2] = 1\n    digits[3]\
    \ = 1\n    digits[4] = 1\n    digits[5] = 1\n    digits[6] = 1\n    digits[7]\
    \ = 1\n    digits[8] = 1\n    digits[9] = 1\n    \n    sum = 0\n    \n    for\
    \ i = 2 to N\n        digits[i] = digits[i-1] * 2\n        sum += digits[i]\n\
    \    end\n    \n    return tostring(sum)\nend\n</cell>\n<code language=julia-1.5>\n\
    solve(2)\n</cell>\n<code language=julia-1.5>\nsolve(10)\n</cell>\n<code language=julia-1.5>\n\
    solve(100)\n</cell>\n<code language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1400)\n</cell>\n<code language=julia-1.5>\n\
    solve(1480)\n</cell>\n<code language=julia-1.5>\nsolve(1480)\n</cell>\n<code language=julia-1.5>\n\
    solve(1480)\n</cell>\n<code language=julia-1.5>\nsolve(1480)\n</cell>\n<code language=julia-1.5>\n\
    solve(1480)\n</cell>\n<code language=julia-1.5>\nsolve(1480)\n</cell>\n<code language=julia-1.5>\n\
    solve(1480)\n</cell>\n<code language=julia-1.5>\nsolve(1480)\n</cell>\n<code language=julia-1.5>\n\
    solve(1480)\n</cell>\n<code language=julia-1.5>\nsolve(1480)\n</cell>\n<code language=julia-1.5>\n\
    solve(1480)\n</cell>\n<code language=julia-1.5>\nsolve(1480)\n</cell>\n<code language=julia-1.5>\n\
    solve(1480)\n</cell>\n<code language=julia-1.5>\nsolve(1480)\n</cell>\n<code language=julia-1.5>\n\
    solve(1480)\n</cell>\n<code language=julia-1.5>\nsolve(1480)\n</cell>\n<code language=julia-1.5>\n\
    solve(1480)\n</cell>\n<code language=julia-1.5>\nsolve(1480)\n</cell>\n<code language=julia-1.5>\n\
    solve(1480)\n</cell>\n<code language=julia-1.5>\nsolve(1480)\n</cell>\n<code language=julia-1.5>\n\
    solve(1480)\n</cell>\n<code language=julia-1.5>\nsolve(1480)\n</cell>\n\nusing\
    \ Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000) == \"\
    1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"1100\")\n\
    \t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmp35i9wizt.jl:33 expected \"\
    end\", got \"N\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp35i9wizt.jl:33\n\
    in expression starting at /tmp/tmp35i9wizt.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N <\
    \ 0 \n        return \"0\"\n    \n    sum = 0\n    \n    for i in N:\n       \
    \ sum += i\n    \n    return bin(sum)[2:]\nend\n</cell>\n<code language=julia-1.5>\n\
    solve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\n\
    solve(147)\n</cell>\n<text>\nProblem 8: Find the sum of all numbers between 1\
    \ and N that are divisible by 3\nThe sum of all numbers between 1 and N that are\
    \ divisible by 3 is given by N * (N + 1) / 2. For example, with N = 10, the sum\
    \ is 10 * 9 / 2 = 55.\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t\
    @test(candidate(1000) == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147)\
    \ == \"1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) ==\
    \ \"10010\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp91lj6_ri.jl:21\nin expression starting at\
    \ /tmp/tmp91lj6_ri.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N <\
    \ 0\n        return \"-1\"\n    \n    if N == 0\n        return \"0\"\n    \n\
    \    if N == 1\n        return \"1\"\n    \n    sum = 0\n    \n    while N > 0\n\
    \        sum = sum + N % 10\n        N = N / 10\n    \n    return to_string(sum)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000)\
    \ == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"\
    1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqx3eebib.jl:1\nin expression starting at /tmp/tmpqx3eebib.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    \n    if\
    \ N < 0\n        return \"Invalid input\"\n    \n    digits = N % 10\n    \n \
    \   if digits == 0\n        return \"0\"\n    \n    sum = 0\n    \n    while N\
    \ > 0\n        digit = N % 10\n        sum += digit\n        N = N / 10\n    \n\
    \    return sum.to_s(2)\nend\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\
    \t@test(candidate(1000) == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147)\
    \ == \"1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) ==\
    \ \"10010\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplll34qol.jl:1\nin expression starting at /tmp/tmplll34qol.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N <\
    \ 0 \n        return \"0\"\n    \n    sum = 0\n    \n    for i in N:\n       \
    \ sum += i\n    \n    return bin(sum)[2:]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150)\
    \ == \"110\")\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) ==\
    \ \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw0o0xddh.jl:21\nin expression starting at\
    \ /tmp/tmpw0o0xddh.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N <\
    \ 0\n        throw(ArgumentError(\"N must be positive\"))\n    \n    sum = 0\n\
    \    while N > 0\n        sum += N % 2\n        N /= 2\n    \n    sumStr = \"\"\
    \n    while sum > 0\n        sumStr += str(sum % 2)\n        sum /= 2\n    \n\
    \    return sumStr\nend\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t\
    @test(candidate(1000) == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147)\
    \ == \"1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) ==\
    \ \"10010\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"while\" at /tmp/tmp2junamgt.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2junamgt.jl:1\n\
    in expression starting at /tmp/tmp2junamgt.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N <\
    \ 0 \n        return \"-1\"\n    \n    digits = zeros(Int, N)\n    \n    for i\
    \ = 1:N\n        digits[i] = N % 10\n        N = N / 10\n    end\n    \n    sum\
    \ = 0\n    for i = 1:N\n        sum = sum + digits[i]\n    end\n    \n    return\
    \ string(digits, digits[end], sum)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert solve(1) == \"1\"\n@assert solve(2) == \"10\"\n@assert solve(3) == \"\
    11\"\n@assert solve(4) == \"100\"\n@assert solve(5) == \"101\"\n@assert solve(6)\
    \ == \"110\"\n@assert solve(7) == \"111\"\n@assert solve(8) == \"1000\"\n@assert\
    \ solve(9) == \"1001\"\n@assert solve(10) == \"1010\"\n@assert solve(11) == \"\
    1011\"\n@assert solve(12) == \"1100\"\n@assert solve(13) == \"1101\"\n@assert\
    \ solve(14) == \"1110\"\n@assert solve(15) == \"1111\"\n@assert solve(16) == \"\
    10000\"\n@assert solve(17) == \"10001\"\n@assert solve(18) == \"10010\"\n@assert\
    \ solve(19) == \"10011\"\n@assert solve(20) == \"10100\"\n@assert solve(21) ==\
    \ \"10101\"\n@assert solve(22) == \"10110\"\n@assert solve(23) == \"10111\"\n\
    @assert solve(24) == \"11100\"\n@assert solve(25) == \"11101\"\n@assert solve(26)\
    \ == \"11110\"\n@assert solve(27) == \"11111\"\n@assert solve(28) == \"100001\"\
    \n@assert solve(29) == \"100002\"\n@assert solve(30) == \"100003\"\n@assert solve(31)\
    \ == \"100004\"\n@assert solve(32) == \"100005\"\n@assert solve(33) == \"100006\"\
    \n@assert solve(34) == \"100007\"\n@assert solve(35) == \"100008\"\n@assert solve(36)\
    \ == \"100009\"\n@assert solve(37) == \"100010\"\n@assert solve(38) == \"100011\"\
    \n@assert solve(39) == \"100012\"\n@assert solve(40) == \"100013\"\n@assert solve(41)\
    \ == \"100014\"\n@assert solve(42) == \"100015\"\n@assert solve(43) == \"100016\"\
    \n@assert solve(44) == \"100017\"\n@assert solve(45) == \"100018\"\n@assert solve(46)\
    \ == \"100019\"\n@assert solve(47) == \"100020\"\n@assert solve(48) == \"100021\"\
    \n@assert solve(49) == \"100022\"\n@assert solve(50) == \"100023\"\n@\nusing Test\n\
    \n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000) == \"1\")\n\t\
    @test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333)\
    \ == \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_tmihdlq.jl:32\nin expression starting at\
    \ /tmp/tmp_tmihdlq.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N <\
    \ 0\n        return \"0\"\n    \n    sum = 0\n    \n    while N > 0\n        sum\
    \ += N % 10\n        N /= 10\n    \n    return sum.to_s(2)\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert solve(1) == \"1\"\n@assert solve(2) == \"10\"\n\
    @assert solve(3) == \"11\"\n@assert solve(4) == \"100\"\n@assert solve(5) == \"\
    101\"\n@assert solve(6) == \"110\"\n@assert solve(7) == \"111\"\n@assert solve(8)\
    \ == \"1000\"\n@assert solve(9) == \"1001\"\n@assert solve(10) == \"1010\"\n@assert\
    \ solve(11) == \"1011\"\n@assert solve(12) == \"1100\"\n@assert solve(13) == \"\
    1101\"\n@assert solve(14) == \"1110\"\n@assert solve(15) == \"1111\"\n@assert\
    \ solve(16) == \"10000\"\n@assert solve(17) == \"10001\"\n@assert solve(18) ==\
    \ \"10010\"\n@assert solve(19) == \"10011\"\n@assert solve(20) == \"10100\"\n\
    @assert solve(21) == \"10101\"\n@assert solve(22) == \"10110\"\n@assert solve(23)\
    \ == \"10111\"\n@assert solve(24) == \"11100\"\n@assert solve(25) == \"11101\"\
    \n@assert solve(26) == \"11110\"\n@assert solve(27) == \"11111\"\n@assert solve(28)\
    \ == \"100000\"\n@assert solve(29) == \"100001\"\n@assert solve(30) == \"100010\"\
    \n@assert solve(31) == \"100011\"\n@assert solve(32) == \"100100\"\n@assert solve(33)\
    \ == \"100101\"\n@assert solve(34) == \"100110\"\n@assert solve(35) == \"100111\"\
    \n@assert solve(36) == \"101000\"\n@assert solve(37) == \"101001\"\n@assert solve(38)\
    \ == \"101010\"\n@assert solve(39) == \"101011\"\n@assert solve(40) == \"101100\"\
    \n@assert solve(41) == \"101101\"\n@assert solve(42) == \"101110\"\n@assert solve(43)\
    \ == \"101111\"\n@assert solve(44) == \"111000\"\n@assert solve(45) == \"111001\"\
    \n@assert solve(46) == \"111010\"\n@assert solve(47) == \"111011\"\n@assert solve(48)\
    \ == \"111100\"\n@assert solve(49) == \"111101\"\n@assert solve(50) == \"111110\"\
    \n@assert solve(51) == \"111111\"\n@assert solve(52) == \"1000000\"\n@assert solve(53)\
    \ == \"1000001\"\n@assert solve(54) == \"1000010\"\nusing Test\n\n@testset begin\n\
    \ncandidate = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150)\
    \ == \"110\")\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) ==\
    \ \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjvcbzbut.jl:26\nin expression starting at\
    \ /tmp/tmpjvcbzbut.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N <\
    \ 0\n        return \"-1\"\n    \n    digits = zeros(Int, N)\n    \n    for i\
    \ = 1:N\n        digits[i] = digits[i-1] + N % 10\n        N = N / 10\n    end\n\
    \    \n    binary = \"\"\n    \n    for i = 1:N\n        binary = string(digits[i],\
    \ binary)\n    end\n    \n    return binary\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150)\
    \ == \"110\")\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) ==\
    \ \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp191we17q.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp191we17q.jl:1\n\
    in expression starting at /tmp/tmp191we17q.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N <\
    \ 0\n        return \"0\"\n    \n    sum = 0\n    \n    for i in N:\n        sum\
    \ += i\n    \n    return bin(sum)[2:]\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert solve(1) == \"1\"\n@assert solve(2) == \"10\"\n@assert solve(3) == \"\
    111\"\n@assert solve(4) == \"1001\"\n@assert solve(5) == \"10101\"\n@assert solve(6)\
    \ == \"11100\"\n@assert solve(7) == \"1110101\"\n@assert solve(8) == \"11110100\"\
    \n@assert solve(9) == \"1111010101\"\n@assert solve(10) == \"11110110100\"\n@assert\
    \ solve(11) == \"1111011010101\"\n@assert solve(12) == \"11110110110100\"\n@assert\
    \ solve(13) == \"1111011011010101\"\n@assert solve(14) == \"11110110110110100\"\
    \n@assert solve(15) == \"1111011011011010101\"\n@assert solve(16) == \"11110110110110110100\"\
    \n@assert solve(17) == \"1111011011011011010101\"\n@assert solve(18) == \"11110110110110110110100\"\
    \n@assert solve(19) == \"1111011011011011011010101\"\n@assert solve(20) == \"\
    11110110110110110110110100\"\n@assert solve(21) == \"11110110110110110110110101010\"\
    \n@assert solve(22) == \"111101101101101101101101010100\"\n@assert solve(23) ==\
    \ \"1111011011011011011011010101010\"\n@assert solve(24) == \"111101101101101101101101010100100\"\
    \n@assert solve(25) == \"11110110110110110110101010010010\"\n@assert solve(26)\
    \ == \"111101101101101101010100100100100\"\n@assert solve(27) == \"111101101101101010100100100100100\"\
    \n@assert solve(28) == \"111101101101010100100100100100100\"\n@assert solve(29)\
    \ == \"111101101101010100100100100100100100\"\n@assert solve(30) == \"111101101101010100100100100100100100100\"\
    \n@assert solve(31) == \"111101101101010100100100100100100100100100\"\n@assert\
    \ solve(32) == \"111101101101010100100100100100100100100100100\"\n@assert solve(33)\
    \ == \"111101101101010100100100100100100100100100100\nusing Test\n\n@testset begin\n\
    \ncandidate = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150)\
    \ == \"110\")\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) ==\
    \ \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz4z_s5ic.jl:21\nin expression starting at\
    \ /tmp/tmpz4z_s5ic.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N <\
    \ 0\n        return \"0\"\n    \n    sum = 0\n    \n    while N > 0\n        sum\
    \ = sum + N % 10\n        N = N / 10\n    \n    return String(sum)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000) == \"\
    1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"1100\")\n\
    \t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy9jm9enc.jl:1\nin expression starting at /tmp/tmpy9jm9enc.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N <\
    \ 0\n        return \"-1\"\n    \n    sum = 0\n    digits = N % 10\n    \n   \
    \ while N > 0\n        sum += digits\n        N /= 10\n        digits = N % 10\n\
    \    end\n    \n    return string(digits, digits)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150)\
    \ == \"110\")\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) ==\
    \ \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpqdpwyquw.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpqdpwyquw.jl:1\n\
    in expression starting at /tmp/tmpqdpwyquw.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    \n    digits\
    \ = N % 10\n    \n    if digits == 0\n        return \"0\"\n    \n    digits =\
    \ digits % 10\n    \n    if digits == 0\n        return \"0\"\n    \n    digits\
    \ = digits % 10\n    \n    if digits == 0\n        return \"0\"\n    \n    digits\
    \ = digits % 10\n    \n    if digits == 0\n        return \"0\"\n    \n    digits\
    \ = digits % 10\n    \n    if digits == 0\n        return \"0\"\n    \n    digits\
    \ = digits % 10\n    \n    if digits == 0\n        return \"0\"\n    \n    digits\
    \ = digits % 10\n    \n    if digits == 0\n        return \"0\"\n    \n    digits\
    \ = digits % 10\n    \n    if digits == 0\n        return \"0\"\n    \n    digits\
    \ = digits % 10\n    \n    if digits == 0\n        return \"0\"\n    \n    digits\
    \ = digits % 10\n    \n    if digits == 0\n        return \"0\"\n    \n    digits\
    \ = digits % 10\n    \n    if digits == 0\n        return \"0\"\n    \n    digits\
    \ = digits % 10\n    \n    if digits == 0\n        return \"0\"\n    \n    digits\
    \ = digits % 10\n    \n    if digits == 0\n        return \"0\"\n    \n    digits\
    \ = digits % 10\n    \n    if digits == 0\n        return \"0\"\n    \n    digits\
    \ = digits % 10\n    \n    if digits == 0\n        return \"0\"\n    \n    digits\
    \ = digits % 10\n    \n    if digits == 0\n        return \"0\"\n    \n    digits\
    \ = digits % 10\n    \n    if digits == 0\n        return \"0\"\n    \n    digits\
    \ = digits % 10\n    \n    if digits == 0\n        return \"0\"\n    \n    digits\
    \ = digits % 10\n    \n    if digits == 0\n        return \"0\"\n    \n    digits\
    \ = digits % 10\n    \n    if digits == 0\n        return \"0\"\n    \n    digits\
    \ = digits % 10\n    \n    if digits == 0\n        return \"0\"\n    \n    digits\
    \ = digits % 10\n    \n    if digits == 0\n        return \"0\"\n    \n    digits\
    \ = digits % 10\n    \n    if digits == 0\n        return \"0\"\n    \n    digits\
    \ = digits % 10\n    \n    if digits == 0\n        return \"0\"\n    \n    digits\
    \ = digits % 10\n    \n    if digits == 0\n        return \"0\"\n    \n    digits\
    \ = digits % 10\n    \n    if digits == 0\n        return \"0\"\n    \n    digits\
    \ = digits % 10\n    \n    if digits == 0\n        return \"0\"\nusing Test\n\n\
    @testset begin\n\ncandidate = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150)\
    \ == \"110\")\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) ==\
    \ \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptjshmp13.jl:1\nin expression starting at /tmp/tmptjshmp13.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N <\
    \ 0\n        return \"0\"\n    \n    sum = 0\n    digits = N % 10\n    \n    while\
    \ digits > 0\n        sum = sum + digits\n        N = N / 10\n        digits =\
    \ N % 10\n    \n    return String(sum)\nend\n</cell>\n<code language=julia-1.5>\n\
    solve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\n\
    solve(147)\n</cell>\n<text>\nProblem 7\nWrite a Julia function called sumDigits\
    \ that takes in an integer N and returns the sum of the digits of N in binary.\n\
    using Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000) ==\
    \ \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"1100\"\
    )\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppd80wplw.jl:28\nin expression starting at\
    \ /tmp/tmppd80wplw.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    \n    if\
    \ N < 0\n        return \"0\"\n    \n    sum = 0\n    \n    while N > 0\n    \
    \    sum = sum + N % 10\n        N = N / 10\n    \n    return String(sum)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000) ==\
    \ \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"1100\"\
    )\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6smdcobq.jl:1\nin expression starting at /tmp/tmp6smdcobq.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    \n    if\
    \ N < 0\n        return \"0\"\n    \n    if N == 0\n        return \"0\"\n   \
    \ \n    if N == 1\n        return \"1\"\n    \n    sum = 0\n    \n    for i in\
    \ 1..N\n        sum = sum + digits(N % i)\n    \n    return sum.to_s\nend\n</cell>\n\
    <code language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(150)\n\
    </cell>\n<code language=julia-1.5>\nsolve(147)\n</cell>\n<text>\nProblem 7: Digit\
    \ Factorization\nGiven a positive integer N, return the factors of N. \n    \n\
    \    Example\n        For N = 12, the factors of N will be 1, 2, and 3.\n    \
    \    For N = 14, the factors of N will be 1, 2, 3, and 4.\n        For N = 100,\
    \ the factors of N will be 1, 2, 3, 5, and 8.\n        For N = 1000, the factors\
    \ of N will be 1, 2, 3, 5, 8, 13, and 17.\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a vector\
    \ of integers\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\
    \t@test(candidate(1000) == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147)\
    \ == \"1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) ==\
    \ \"10010\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwiwm14zw.jl:32\nin expression starting at\
    \ /tmp/tmpwiwm14zw.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N ==\
    \ 0 \n        return \"0\"\n    \n    sum = 0\n    \n    for i in N:\n       \
    \ sum += i\n    \n    return bin(sum)[2:]\nend\n</cell>\n<code language=julia-1.5>\n\
    solve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\n\
    solve(147)\n</cell>\n<text>\nProblem 7\nGiven a positive integer N, return the\
    \ number of trailing zeroes in N's binary representation.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150)\
    \ == \"110\")\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) ==\
    \ \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvlqb37sk.jl:21\nin expression starting at\
    \ /tmp/tmpvlqb37sk.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N <\
    \ 0\n        return \"0\"\n    \n    sum = 0\n    \n    while N > 0\n        sum\
    \ += N % 10\n        N /= 10\n    end\n    \n    return string(sum)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000) == \"\
    1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"1100\")\n\
    \t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpbjlx4ie0.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpbjlx4ie0.jl:1\n\
    in expression starting at /tmp/tmpbjlx4ie0.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N ==\
    \ 0 \n        return \"0\"\n    \n    sum = 0\n    \n    for i in N:\n       \
    \ sum += i\n    \n    sumStr = String(sum)\n    \n    if sumStr == \"0\"\n   \
    \     return \"0\"\n    \n    if sumStr == \"1\"\n        return \"1\"\n    \n\
    \    sumStr = sumStr.substring(0,sumStr.length-1)\n    \n    return sumStr + solve(N-1)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000)\
    \ == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"\
    1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvf21owrk.jl:21\nin expression starting at\
    \ /tmp/tmpvf21owrk.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N <\
    \ 0 \n        return \"Invalid input\"\n    \n    digits = zeros(Int, N)\n   \
    \ \n    for digit in digits\n        digits[digit] = digits[digit] + 1\n    end\n\
    \    \n    digits = digits[digits]\n    \n    if digits == 0\n        return \"\
    0\"\n    end\n    \n    digits = digits[digits]\n    \n    if digits == 0\n  \
    \      return \"0\"\n    end\n    \n    digits = digits[digits]\n    \n    if\
    \ digits == 0\n        return \"0\"\n    end\n    \n    digits = digits[digits]\n\
    \    \n    if digits == 0\n        return \"0\"\n    end\n    \n    digits = digits[digits]\n\
    \    \n    if digits == 0\n        return \"0\"\n    end\n    \n    digits = digits[digits]\n\
    \    \n    if digits == 0\n        return \"0\"\n    end\n    \n    digits = digits[digits]\n\
    \    \n    if digits == 0\n        return \"0\"\n    end\n    \n    digits = digits[digits]\n\
    \    \n    if digits == 0\n        return \"0\"\n    end\n    \n    digits = digits[digits]\n\
    \    \n    if digits == 0\n        return \"0\"\n    end\n    \n    digits = digits[digits]\n\
    \    \n    if digits == 0\n        return \"0\"\n    end\n    \n    digits = digits[digits]\n\
    \    \n    if digits == 0\n        return \"0\"\n    end\n    \n    digits = digits[digits]\n\
    \    \n    if digits == 0\n        return \"0\"\n    end\n    \n    digits = digits[digits]\n\
    \    \n    if digits == 0\n        return \"0\"\n    end\n    \n    digits = digits[digits]\n\
    \    \n    if digits == 0\n        return \"0\"\n    end\n    \n    digits = digits[digits]\n\
    \    \n    if digits == 0\n        return \"0\"\n    end\n    \n    digits = digits[digits]\n\
    \    \n    if digits == 0\n        return \"0\"\n    end\n    \n    digits = digits[digits]\n\
    \    \n    if digits == 0\n        return \"0\"\n    end\n    \n    digits = digits[digits]\n\
    \    \n    if digits == 0\n        return \"0\"\n    end\n    \n    digits = digits[digits]\n\
    \    \n    if digits == 0\n        return \"0\"\n    end\n    \n    digits = digits[digits]\n\
    \    \n    if digits == 0\n        return \"0\"\n    end\n    \n    digits = digits[digits]\n\
    \    \n    if digits == 0\n        return \"0\"\n    end\n    \n    digits = digits[digits]\n\
    \nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000)\
    \ == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"\
    1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz_i69kw7.jl:1\nin expression starting at /tmp/tmpz_i69kw7.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N <\
    \ 0\n        return \"-1\"\n    \n    if N == 0\n        return \"0\"\n    \n\
    \    digits = zeros(Int, 10)\n    digits[1] = 1\n    \n    for i = 2 to N\n  \
    \      digits[i] = digits[i-1] + digits[i-2]\n    end\n    \n    return string(digits)\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert solve(1) == \"1\"\n@assert solve(2)\
    \ == \"10\"\n@assert solve(3) == \"111\"\n@assert solve(4) == \"1001\"\n@assert\
    \ solve(5) == \"1011\"\n@assert solve(6) == \"1101\"\n@assert solve(7) == \"1110\"\
    \n@assert solve(8) == \"11110\"\n@assert solve(9) == \"11111\"\n@assert solve(10)\
    \ == \"111111\"\n@assert solve(11) == \"1111111\"\n@assert solve(12) == \"11111110\"\
    \n@assert solve(13) == \"111111110\"\n@assert solve(14) == \"1111111101\"\n@assert\
    \ solve(15) == \"11111111010\"\n@assert solve(16) == \"111111110100\"\n@assert\
    \ solve(17) == \"1111111101000\"\n@assert solve(18) == \"11111111010000\"\n@assert\
    \ solve(19) == \"111111110100000\"\n@assert solve(20) == \"1111111101000000\"\n\
    @assert solve(21) == \"11111111010000000\"\n@assert solve(22) == \"111111110100000000\"\
    \n@assert solve(23) == \"1111111101000000000\"\n@assert solve(24) == \"11111111010000000000\"\
    \n@assert solve(25) == \"111111110100000000000\"\n@assert solve(26) == \"1111111101000000000000\"\
    \n@assert solve(27) == \"11111111010000000000000\"\n@assert solve(28) == \"111111110100000000000000\"\
    \n@assert solve(29) == \"1111111101000000000000000\"\n@assert solve(30) == \"\
    11111111010000000000000000\"\n@assert solve(31) == \"1111111101000000000000000000\"\
    \n@assert solve(32) == \"11111111010000000000000000000\"\n@assert solve(33) ==\
    \ \"111111110100000000000000000000\"\n@assert solve(34) == \"1111111101000000000000000000000\"\
    \n@assert solve(35) == \"11111111010000000000000000000000\"\n@assert solve(36)\
    \ == \"111111110100000000000000000000000\"\n@assert solve(37) == \"1111111101000000000000000000000000\"\
    \n@assert solve(38) == \"11111111010000000000000000000000000\"\n@assert solve(39)\
    \ == \"111111110100000000000000000000000000\"\n@assert solve(40) == \"1111111101000000000000000000000000000\"\
    \n@\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000)\
    \ == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"\
    1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpruru62ff.jl:24 expected \"\
    end\", got \"N\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpruru62ff.jl:24\n\
    in expression starting at /tmp/tmpruru62ff.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    \n    if\
    \ N < 0\n        return \"0\"\n    \n    sum = 0\n    \n    while N > 0\n    \
    \    sum = sum + N % 10\n        N = N / 10\n    end\n    \n    return string(sum)\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert solve(1) == \"1\"\n@assert solve(2)\
    \ == \"10\"\n@assert solve(3) == \"111\"\n@assert solve(4) == \"1010\"\n@assert\
    \ solve(5) == \"1011\"\n@assert solve(6) == \"1100\"\n@assert solve(7) == \"1101\"\
    \n@assert solve(8) == \"1110\"\n@assert solve(9) == \"1111\"\n@assert solve(10)\
    \ == \"1001\"\n@assert solve(11) == \"10101\"\n@assert solve(12) == \"101111\"\
    \n@assert solve(13) == \"110011\"\n@assert solve(14) == \"110010\"\n@assert solve(15)\
    \ == \"1100111\"\n@assert solve(16) == \"1100110\"\n@assert solve(17) == \"11001100\"\
    \n@assert solve(18) == \"11001101\"\n@assert solve(19) == \"11001011\"\n@assert\
    \ solve(20) == \"11001110\"\n@assert solve(21) == \"11001111\"\n@assert solve(22)\
    \ == \"11010001\"\n@assert solve(23) == \"11010010\"\n@assert solve(24) == \"\
    11010011\"\n@assert solve(25) == \"11010100\"\n@assert solve(26) == \"11010101\"\
    ;\n</cell>\n<text>\nProblem 3\nWrite a Julia function named sum_digits(N) that\
    \ returns the sum of its digits in binary.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150) == \"110\"\
    )\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) == \"1001\")\n\t\
    @test(candidate(963) == \"10010\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp80_9xiq4.jl:28\nin expression starting at\
    \ /tmp/tmp80_9xiq4.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N <\
    \ 0\n        return \"-1\"\n    if N == 0\n        return \"0\"\n    if N == 1\n\
    \        return \"1\"\n    if N == 2\n        return \"10\"\n    if N == 3\n \
    \       return \"11\"\n    if N == 4\n        return \"100\"\n    if N == 5\n\
    \        return \"101\"\n    if N == 6\n        return \"110\"\n    if N == 7\n\
    \        return \"111\"\n    if N == 8\n        return \"1000\"\n    if N == 9\n\
    \        return \"1001\"\n    if N == 10\n        return \"1010\"\n    if N ==\
    \ 11\n        return \"1011\"\n    if N == 12\n        return \"1100\"\n    if\
    \ N == 13\n        return \"1101\"\n    if N == 14\n        return \"1110\"\n\
    \    if N == 15\n        return \"1111\"\n    return \"-1\"\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(2)\n</cell>\n<code language=julia-1.5>\nsolve(10)\n\
    </cell>\n<code language=julia-1.5>\nsolve(100)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(10000)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(100000)\n</cell>\n<code language=julia-1.5>\nsolve(1000000)\n\
    </cell>\n<code language=julia-1.5>\nsolve(10000000)\n</cell>\n<code language=julia-1.5>\n\
    solve(100000000)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000)\n</cell>\n\
    <code language=julia-1.5>\nsolve(10000000000)\n</cell>\n<code language=julia-1.5>\n\
    solve(100000000000)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000000)\n\
    </cell>\n<code language=julia-1.5>\nsolve(1000000000001)\n</cell>\n<code language=julia-1.5>\n\
    solve(10000000000010)\n</cell>\n<code language=julia-1.5>\nsolve(10000000000011)\n\
    </cell>\n<code language=julia-1.5>\nsolve(100000000000100)\n</cell>\n<code language=julia-1.5>\n\
    solve(100000000000101)\n</cell>\n<code language=julia-1.5>\nsolve(100000000000100)\n\
    </cell>\n<code language=julia-1.5>\nsolve(100000000000101)\n</cell>\n<code language=julia-1.5>\n\
    solve(100000000000100)\n</cell>\n<code language=julia-1.5>\nsolve(100000000000101)\n\
    </cell>\n<code language=julia-1.5>\nsolve(100000000000100)\n</cell>\n<code language=julia-1.5>\n\
    solve(100000000000101)\n</cell>\n\nusing Test\n\n@testset begin\n\ncandidate =\
    \ solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150) == \"110\"\
    )\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) == \"1001\")\n\t\
    @test(candidate(963) == \"10010\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp54t6nswj.jl:51\nin expression starting at\
    \ /tmp/tmp54t6nswj.jl:51\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N <\
    \ 0\n        return \"0\"\n    \n    if N == 0\n        return \"0\"\n    \n \
    \   if N == 1\n        return \"1\"\n    \n    digits = N % 10\n    \n    sum\
    \ = \"\"\n    \n    while N > 0\n        sum = sum + digits_to_binary(digits)\n\
    \        N = N / 10\n        digits = N % 10\n    \n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nsolve(1)\n</cell>\n<code language=julia-1.5>\nsolve(100)\n\
    </cell>\n<code language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\n\
    solve(147)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</\nusing Test\n\
    \n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000) == \"1\")\n\t\
    @test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333)\
    \ == \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0d1ipn9q.jl:35\nin expression starting at\
    \ /tmp/tmp0d1ipn9q.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N <\
    \ 0 \n        return \"-1\"\n    \n    digits = String[1..N]\n    \n    sum =\
    \ 0\n    for i in digits\n        sum += Int(i)\n    \n    binary = String[sum..N]\n\
    \    \n    return binary\nend\n</cell>\n<code language=julia-1.5>\nsolve(1000)\n\
    </cell>\n<code language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\n\
    solve(147)\n</cell>\n<text>\nProblem 9: Binary to Decimal\nGiven a binary number\
    \ represented as a string, convert it to decimal and return the decimal number.\n\
    using Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000) ==\
    \ \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"1100\"\
    )\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqhx0k5wc.jl:28\nin expression starting at\
    \ /tmp/tmpqhx0k5wc.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N <\
    \ 0\n        return \"0\"\n    \n    digits = zeros(Int, N+1)\n    digits[1] =\
    \ 1\n    \n    for i in 2..N\n        digits[i] = digits[i-1] + digits[i-2]\n\
    \    \n    return digits[N]\nend\n</cell>\n<code language=julia-1.5>\nsolve(1000)\n\
    </cell>\n<code language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\n\
    solve(147)\n</cell>\n<text>\nProblem 7: Binary to Decimal\nThe binary number represented\
    \ as a string can represent a number between 0 and 2,147,483,647. Write a Julia\
    \ function that converts a binary number represented as a string to its decimal\
    \ equivalent.\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000)\
    \ == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"\
    1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_bal8ucp.jl:26\nin expression starting at\
    \ /tmp/tmp_bal8ucp.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    \n    if\
    \ N < 0\n        return \"0\"\n    \n    digits = N % 10\n    \n    if N < 10\n\
    \        return digits\n    \n    digits = solve(N / 10)\n    \n    return digits\
    \ + digits\nend\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000)\
    \ == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"\
    1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps9p4cwe6.jl:1\nin expression starting at /tmp/tmps9p4cwe6.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    \n    if\
    \ N < 0\n        return \"0\"\n    \n    digits = N % 10\n    \n    if digits\
    \ == 0\n        return \"0\"\n    \n    sum = \"\"\n    \n    while N > 0\n  \
    \      digit = N % 10\n        \n        if digit == 0\n            sum += \"\
    0\"\n            \n        else\n            sum += \"1\"\n            \n    \
    \    N = N / 10\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert solve(1) == \"1\"\n@assert solve(2) == \"10\"\n@assert solve(3) == \"\
    11\"\n@assert solve(4) == \"100\"\n@assert solve(5) == \"101\"\n@assert solve(6)\
    \ == \"110\"\n@assert solve(7) == \"111\"\n@assert solve(8) == \"1000\"\n@assert\
    \ solve(9) == \"1001\"\n@assert solve(10) == \"1010\"\n@assert solve(11) == \"\
    1011\"\n@assert solve(12) == \"1100\"\n@assert solve(13) == \"1101\"\n@assert\
    \ solve(14) == \"1110\"\n@assert solve(15) == \"1111\"\n@assert solve(16) == \"\
    10000\"\n@assert solve(17) == \"10001\"\n@assert solve(18) == \"10010\"\n@assert\
    \ solve(19) == \"10011\"\n@assert solve(20) == \"10100\"\n@assert solve(21) ==\
    \ \"10101\"\n@assert solve(22) == \"10110\"\n@assert solve(23) == \"10111\"\n\
    @assert solve(24) == \"11100\"\n@assert solve(25) == \"11101\"\n@assert solve(26)\
    \ == \"11110\"\n@assert solve(27) == \"11111\"\n@assert solve(28) == \"100001\"\
    \n@assert solve(29) == \"100002\"\n@assert solve(30) == \"100003\"\n@assert solve(31)\
    \ == \"100004\"\n@assert solve(32) == \"100005\"\n@assert solve(33) == \"100006\"\
    \n@assert solve(34) == \"100007\"\n@assert solve(35) == \"100008\"\n@assert solve(36)\
    \ == \"100009\"\n@assert solve(37) == \"100010\"\n@assert solve(38) == \"100011\"\
    \n@assert solve(39) == \"100012\"\n@assert solve(40) == \"100013\"\n@assert solve(41)\
    \ == \"100014\"\n@assert solve(42) == \"100015\"\n@assert solve(43) == \"100016\"\
    \n@assert solve(44) == \"100017\"\n@assert solve(45) == \"100018\"\n@assert solve(46)\
    \ == \"100019\"\n@assert solve(47) == \"100020\"\n@assert solve(48) == \"100021\"\
    \n@assert solve(49) == \"100022\"\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150) == \"110\"\
    )\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) == \"1001\")\n\t\
    @test(candidate(963) == \"10010\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpeq3y9by2.jl:39\nin expression starting at\
    \ /tmp/tmpeq3y9by2.jl:39\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    \n    if\
    \ N < 0\n        return \"-1\"\n    \n    if N == 0\n        return \"0\"\n  \
    \  \n    if N == 1\n        return \"1\"\n    \n    digits = N % 10\n    \n  \
    \  sum = 0\n    \n    while N > 0\n        \n        N = N / 10\n        \n  \
    \      sum = sum + digits\n        \n    return sum.to_s(2)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(150)\n\
    </cell>\n<code language=julia-1.5>\nsolve(147)\n</cell>\n<text>\nProblem 4\nWrite\
    \ a Julia function called sumDigits which takes a positive integer N and returns\
    \ the sum of its digits in binary.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150) == \"110\"\
    )\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) == \"1001\")\n\t\
    @test(candidate(963) == \"10010\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7cl15947.jl:37\nin expression starting at\
    \ /tmp/tmp7cl15947.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N <\
    \ 0 \n        return \"0\"\n    \n    sum = 0\n    \n    for i in N:\n       \
    \ sum += i\n    \n    return bin(sum)[2:]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150)\
    \ == \"110\")\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) ==\
    \ \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl8kl5w_a.jl:21\nin expression starting at\
    \ /tmp/tmpl8kl5w_a.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N <\
    \ 0\n        return \"0\"\n    \n    if N == 0 \n        return \"0\"\n    \n\
    \    if N == 1 \n        return \"1\"\n    \n    digits = String[1..N]\n    \n\
    \    sum = 0\n    for i in digits\n        sum += Int(i)\n    \n    binary = String[sum..N]\n\
    \    \n    return binary\nend\n</cell>\n<code language=julia-1.5>\nsolve(2)\n\
    </cell>\n<code language=julia-1.5>\nsolve(10)\n</cell>\n<code language=julia-1.5>\n\
    solve(100)\n</cell>\n<code language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\n\
    solve(150)\n</cell>\n<code language=julia-1.5>\nsolve(147)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\n\nusing Test\n\n@testset begin\n\
    \ncandidate = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150)\
    \ == \"110\")\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) ==\
    \ \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp87ji6oyr.jl:34\nin expression starting at\
    \ /tmp/tmp87ji6oyr.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N <\
    \ 0\n        return \"0\"\n    \n    sum = 0\n    \n    for i in N:\n        sum\
    \ += i\n    \n    return sum.to_s(2)\nend\n</cell>\n<code language=julia-1.5>\n\
    solve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\n\
    solve(147)\n</cell>\n<text>\nProblem 7: Binary to Decimal\nGiven a binary number\
    \ represented as a string, convert it to decimal form by considering the digits\
    \ from right to left and stopping when the string is empty.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150)\
    \ == \"110\")\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) ==\
    \ \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp87_5i61j.jl:21\nin expression starting at\
    \ /tmp/tmp87_5i61j.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N <\
    \ 0\n        error(\"N must be positive\")\n    end\n    if N == 0\n        return\
    \ \"0\"\n    end\n    \n    digits = zeros(Int, 10)\n    digits[1] = 1\n    \n\
    \    for i = 2:N\n        digits[i] = digits[i-1] * 10 + digits[i-2]\n    end\n\
    \    \n    return join(digits, \"\")\nend\n</cell>\n<code language=julia-1.5>\n\
    solve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\n\
    solve(147)\n</cell>\n<text>\nProblem 3\nGiven a positive integer N, return the\
    \ sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum\
    \ of digits will be 1 the output should be \"1\".\n        For N = 150, the sum\
    \ of digits will be 6 the output should be \"110\".\n        For N = 147, the\
    \ sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n\
    \        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150)\
    \ == \"110\")\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) ==\
    \ \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpebwfdd55.jl:31\nin expression starting at\
    \ /tmp/tmpebwfdd55.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    \n    if\
    \ N < 0\n        return \"-1\"\n    \n    if N == 0\n        return \"0\"\n  \
    \  \n    if N == 1\n        return \"1\"\n    \n    sum = 0\n    \n    while N\
    \ > 0\n        sum = sum + N % 10\n        N = N / 10\n    \n    return sum.to_s\n\
    end\n</cell>\n<code language=julia-1.5>\nsolve(1)\n</cell>\n<code language=julia-1.5>\n\
    solve(10)\n</cell>\n<code language=julia-1.5>\nsolve(100)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\n\
    solve(147)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000)\
    \ == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"\
    1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_4ci_k0h.jl:33\nin expression starting at\
    \ /tmp/tmp_4ci_k0h.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    \n    if\
    \ N < 0\n        return \"0\"\n    \n    sum = 0\n    \n    while N > 0\n    \
    \    sum = sum + N % 10\n        N = N / 10\n    \n    return String(sum)\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert solve(1) == \"1\"\n@assert solve(2)\
    \ == \"10\"\n@assert solve(3) == \"11\"\n@assert solve(4) == \"100\"\n@assert\
    \ solve(5) == \"101\"\n@assert solve(6) == \"110\"\n@assert solve(7) == \"111\"\
    \n@assert solve(8) == \"1000\"\n@assert solve(9) == \"1001\"\n@assert solve(10)\
    \ == \"1010\"\n@assert solve(11) == \"1011\"\n@assert solve(12) == \"1100\"\n\
    @assert solve(13) == \"1101\"\n@assert solve(14) == \"1110\"\n@assert solve(15)\
    \ == \"1111\"\n@assert solve(16) == \"10000\"\n@assert solve(17) == \"10001\"\n\
    @assert solve(18) == \"10010\"\n@assert solve(19) == \"10011\"\n@assert solve(20)\
    \ == \"10100\"\n@assert solve(21) == \"10101\"\n@assert solve(22) == \"10110\"\
    \n@assert solve(23) == \"10111\"\n@assert solve(24) == \"11100\"\n@assert solve(25)\
    \ == \"11101\"\n@assert solve(26) == \"11110\"\n@assert solve(27) == \"11111\"\
    \n@assert solve(28) == \"100000\"\n@assert solve(29) == \"100001\"\n@assert solve(30)\
    \ == \"100010\"\n@assert solve(31) == \"100011\"\n@assert solve(32) == \"100100\"\
    \n@assert solve(33) == \"100101\"\n@assert solve(34) == \"100110\"\n@assert solve(35)\
    \ == \"100111\"\n@assert solve(36) == \"101000\"\n@assert solve(37) == \"101001\"\
    \n@assert solve(38) == \"101010\"\n@assert solve(39) == \"101011\"\n@assert solve(40)\
    \ == \"101100\"\n@assert solve(41) == \"101101\"\n@assert solve(42) == \"101110\"\
    \n@assert solve(43) == \"101111\"\n@assert solve(44) == \"111000\"\n@assert solve(45)\
    \ == \"111001\"\n@assert solve(46) == \"111010\"\n@assert solve(47) == \"111011\"\
    \n@assert solve(48) == \"111100\"\n@assert solve(49) == \"111101\"\n@assert solve(50)\
    \ == \"111110\"\n@assert solve(51) == \"111111\"\n@assert solve(52) == \"10000000\"\
    \n@assert solve(53) == \"10000001\"\n@assert solve(\nusing Test\n\n@testset begin\n\
    \ncandidate = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150)\
    \ == \"110\")\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) ==\
    \ \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqenv2uaf.jl:27\nin expression starting at\
    \ /tmp/tmpqenv2uaf.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N ==\
    \ 0 \n        return \"0\"\n    \n    digits = digits(N)\n    \n    sum = 0\n\
    \    for i in digits\n        sum += i\n    \n    return bin(sum)[2:]\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert solve(1) == \"1\"\n@assert solve(2) == \"10\"\
    \n@assert solve(3) == \"111\"\n@assert solve(4) == \"1001\"\n@assert solve(5)\
    \ == \"1011\"\n@assert solve(6) == \"11001\"\n@assert solve(7) == \"11010\"\n\
    @assert solve(8) == \"111001\"\n@assert solve(9) == \"111011\"\n@assert solve(10)\
    \ == \"111101\"\n@assert solve(11) == \"111100\"\n@assert solve(12) == \"1111010\"\
    \n@assert solve(13) == \"11111001\"\n@assert solve(14) == \"11111011\"\n@assert\
    \ solve(15) == \"11111101\"\n@assert solve(16) == \"11111100\"\n@assert solve(17)\
    \ == \"111111010\"\n@assert solve(18) == \"1111111001\"\n@assert solve(19) ==\
    \ \"1111111011\"\n@assert solve(20) == \"1111111101\"\n@assert solve(21) == \"\
    1111111100\"\n@assert solve(22) == \"11111111010\"\n@assert solve(23) == \"111111111001\"\
    \n@assert solve(24) == \"111111111011\"\n@assert solve(25) == \"111111111101\"\
    \n@assert solve(26) == \"1111111100\"\n@assert solve(27) == \"11111111101\"\n\
    @assert solve(28) == \"11111111110\"\n@assert solve(29) == \"11111111111\"\n@assert\
    \ solve(30) == \"111111111101\"\n@assert solve(31) == \"111111111110\"\n@assert\
    \ solve(32) == \"111111111111\"\n@assert solve(33) == \"1111111111110\"\n@assert\
    \ solve(34) == \"1111111111111\"\n@assert solve(35) == \"11111111111110\"\n@assert\
    \ solve(36) == \"11111111111111\"\n@assert solve(37) == \"111111111111110\"\n\
    @assert solve(38) == \"111111111111111\"\n@assert solve(39) == \"1111111111111101\"\
    \n@assert solve(40) == \"1111111111111110\"\n@assert solve(41) == \"1111111111111111\"\
    \n@assert solve(42) == \"11111111111111110\"\n@assert solve(43) == \"11111111111111111\"\
    \n@assert solve(44) == \"111111111111111101\"\n@assert solve(45) == \"1111111111111111010\"\
    \n@assert solve(46) == \"111111111111111111100\"\n@assert solve(47) == \"1111111111111110001\"\
    \n@assert solve(48) == \"1111111111111110010\"\n\nusing Test\n\n@testset begin\n\
    \ncandidate = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150)\
    \ == \"110\")\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) ==\
    \ \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp5njqsdsi.jl:24\nin expression\
    \ starting at /tmp/tmp5njqsdsi.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N <\
    \ 0\n        return \"0\"\n    \n    if N == 0\n        return \"0\"\n    \n \
    \   if N == 1\n        return \"1\"\n    \n    if N > 1\n        digits = digits(N)\n\
    \        \n        sum = 0\n        for i in digits\n            sum += i\n  \
    \      \n        return bin(sum)[2:]\nend\n</cell>\n<code language=julia-1.5>\n\
    solve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\n\
    solve(147)\n</cell>\n<text>\nProblem 7\nWrite a Julia function called digits(N)\
    \ that returns the number of digits in N in binary.\nusing Test\n\n@testset begin\n\
    \ncandidate = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150)\
    \ == \"110\")\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) ==\
    \ \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu1sdad_y.jl:31\nin expression\
    \ starting at /tmp/tmpu1sdad_y.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N ==\
    \ 0 \n        return \"0\"\n    \n    digits = String[]\n    \n    if N < 10 \n\
    \        digits = [N]\n    else \n        digits = digits(N / 10)\n        \n\
    \        digits.append(N % 10)\n        \n    return join(digits, \"\")\nend\n\
    </cell>\n<code language=julia-1.4>\nsolve(2)\n</cell>\n<code language=julia-1.4>\n\
    solve(10)\n</cell>\n<code language=julia-1.4>\nsolve(100)\n</cell>\n<code language=julia-1.4>\n\
    solve(1000)\n</cell>\n<code language=julia-1.4>\nsolve(150)\n</cell>\n<code language=julia-1.4>\n\
    solve(147)\n</cell>\n<code language=julia-1.4>\nsolve(148)\n</cell>\n<code language=julia-1.4>\n\
    solve(149)\n</cell>\n<code language=julia-1.4>\nsolve(151)\n</cell>\n<code language=julia-1.4>\n\
    solve(152)\n</cell>\n<code language=julia-1.4>\nsolve(153)\n</cell>\n<code language=julia-1.4>\n\
    solve(154)\n</cell>\n<code language=julia-1.4>\nsolve(155)\n</cell>\n<code language=julia-1.4>\n\
    solve(156)\n</cell>\n<code language=julia-1.4>\nsolve(157)\n</cell>\n<code language=julia-1.4>\n\
    solve(158)\n</cell>\n<code language=julia-1.4>\nsolve(159)\n</cell>\n<code language=julia-1.4>\n\
    solve(160)\n</cell>\n<code language=julia-1.4>\nsolve(161)\n</cell>\n<code language=julia-1.4>\n\
    solve(162)\n</cell>\n<code language=julia-1.4>\nsolve(163)\n</cell>\n<code language=julia-1.4>\n\
    solve(164)\n</cell>\n<code language=julia-1.4>\nsolve(165)\n</cell>\n<code language=julia-1.4>\n\
    solve(166)\n</cell>\n<code language=julia-1.4>\nsolve(167)\n</cell>\n<code language=julia-1.4>\n\
    solve(168)\n</cell>\n<code language=julia-1.4>\nsolve(169)\n</cell>\n<code language=julia-1.4>\n\
    solve(170)\n</cell>\n<code language=julia-1.4>\nsolve(171)\n</cell>\n<code language=julia-1.4>\n\
    solve(172)\n</cell>\n<code language=julia-1.4>\nsolve(173)\n</cell>\n<code language=julia-1.4>\n\
    solve(174)\n</cell>\n<code language=julia-1.\nusing Test\n\n@testset begin\n\n\
    candidate = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150)\
    \ == \"110\")\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) ==\
    \ \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3gezv6t7.jl:29\nin expression starting at\
    \ /tmp/tmp3gezv6t7.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    \n    if\
    \ N < 0\n        return \"-1\"\n    \n    digits = N % 10\n    \n    if N < 10\n\
    \        return digits::String\n    \n    digits = solve(N / 10)\n    \n    return\
    \ digits + digits\nend\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t\
    @test(candidate(1000) == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147)\
    \ == \"1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) ==\
    \ \"10010\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpytbkxbz3.jl:1\nin expression starting at /tmp/tmpytbkxbz3.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N <\
    \ 0\n        return \"0\"\n    \n    sum = 0\n    \n    for i in N:\n        sum\
    \ += i\n    \n    return str(sum)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150) == \"110\"\
    )\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) == \"1001\")\n\t\
    @test(candidate(963) == \"10010\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp24mrfhcl.jl:21\nin expression starting at\
    \ /tmp/tmp24mrfhcl.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    \n    if\
    \ N < 0\n        return \"0\"\n    \n    digits = String[]\n    \n    sum = 0\n\
    \    \n    while N > 0\n        digits.append(tostring(N % 2))\n        N = N\
    \ / 2\n    \n    for digit in digits\n        sum = sum + digit\n    \n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.5>\n@assert solve(1) == \"1\"\n@assert\
    \ solve(2) == \"10\"\n@assert solve(3) == \"111\"\n@assert solve(4) == \"1001\"\
    \n@assert solve(5) == \"10101\"\n@assert solve(6) == \"101111\"\n@assert solve(7)\
    \ == \"1100111\"\n@assert solve(8) == \"11010011\"\n@assert solve(9) == \"1101010101\"\
    \n@assert solve(10) == \"11010101111\"\n@assert solve(11) == \"110101100111\"\n\
    @assert solve(12) == \"1101110010011\"\n@assert solve(13) == \"110111001010101\"\
    \n@assert solve(14) == \"1101110010101111\"\n@assert solve(15) == \"11011100101100111\"\
    \n@assert solve(16) == \"110111010010011\"\n@assert solve(17) == \"11011101001010101\"\
    \n@assert solve(18) == \"110111010010101111\"\n@assert solve(19) == \"1101110100101100111\"\
    \n@assert solve(20) == \"11011101110010011\"\n@assert solve(21) == \"1101110111001010101\"\
    \n@assert solve(22) == \"11011101110010101111\"\n@assert solve(23) == \"110111011100101100111\"\
    \n@assert solve(24) == \"110111110010010011\"\n@assert solve(25) == \"11011111001001010101\"\
    \n@assert solve(26) == \"110111110010010101111\"\n@assert solve(27) == \"1101111100100101100111\"\
    \n@assert solve(28) == \"1101111100101010011\"\n@assert solve(29) == \"110111110010101010101\"\
    \n@assert solve(30) == \"1101111100101010101111\"\n@assert solve(31) == \"11011111001010101100111\"\
    \n@assert solve(32) == \"110111110010101110011\"\n@assert solve(33) == \"11011111001010111010101\"\
    \n@assert solve(34) == \"110111110010101110101111\"\n@assert solve(35) == \"1101111100101011101100111\"\
    \n@assert solve(36) == \"1101111\nusing Test\n\n@testset begin\n\ncandidate =\
    \ solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150) == \"110\"\
    )\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) == \"1001\")\n\t\
    @test(candidate(963) == \"10010\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmcaxf_yj.jl:32\nin expression starting at\
    \ /tmp/tmpmcaxf_yj.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N ==\
    \ 0 \n        return \"0\"\n    \n    if N < 0 \n        return \"0\"\n    \n\
    \    sum = 0\n    \n    for i in 0..N-1 \n        sum += N % 2\n        N = N\
    \ / 2\n    \n    return show(sum)\nend\n</cell>\n<code language=julia-1.5>\nsolve(1000)\n\
    </cell>\n<code language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\n\
    solve(147)\n</cell>\n<text>\nProblem 7: Binary to Decimal\nGiven a binary number\
    \ represented as a string, convert it to decimal form. \nThe binary number consists\
    \ of an even number of digits. \nThe decimal number should be the sum of its digits.\
    \ \nThe binary number may contain leading zeros. \nIf the binary number is 0,\
    \ the decimal number should be 0.\nIf the binary number has only one digit, the\
    \ decimal number should be that digit.\nIf the binary number has two digits, the\
    \ decimal number should be the sum of its digits.\nIf the binary number has more\
    \ than two digits, the decimal number should be the sum of the first two digits\
    \ plus the sum of the last two digits.\nFor example, if the binary number is \"\
    10\", the decimal number should be 1 + 0 = 1.\nIf the binary number is \"11\"\
    , the decimal number should be 1 + 1 = 2.\nIf the binary number is \"1010\", the\
    \ decimal number should be 10 + 1 = 11.\nIf the binary number is \"0\", the decimal\
    \ number should be 0.\nIf the binary number is \"1\", the decimal number should\
    \ be 1.\nIf the binary number is \"111\", the decimal number should be 11 + 1\
    \ = 12.\nIf the binary number is \"1111\", the decimal number should be 11 + 1\
    \ + 1 = 13.\nIf the binary number is \"11111\", the decimal number should be 11\
    \ + 1 + 1 + 1 = 14.\nIf the binary number is \"111111\", the decimal number should\
    \ be 11 + 1 + 1 + 1 + 1 = 15.\nIf the binary number is \"11111111\", the decimal\
    \ number should be 11 + 1 + 1 + 1 + 1 + 1 = 16.\nIf the binary number is \"111111111\"\
    , the decimal number should be 11 + 1 + 1 + 1 + 1 + 1 + 1 = 17.\nIf the binary\
    \ number is \"1111111111\", the decimal number should be 11 + 1 + 1 + 1 + 1 +\
    \ 1 + 1 + 1 = 18.\nIf the binary number is \"11111111111\", the decimal number\
    \ should be 11 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 = 19.\nIf the binary number is\
    \ \"111111111111\", the decimal number should be 11 + 1 + 1 + 1 + 1 + 1 + 1 +\
    \ 1 + 1 + 1 = 20.\nIf the binary number is \"1111111111111\", the decimal number\
    \ should be 11 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 = 21.\nIf the binary number\
    \ is \"11111111111111\", the decimal number should be 11 + 1 + 1 + 1 + 1 + 1 +\
    \ 1 + 1 + 1 + 1 + 1 + 1 = 22.\nIf the binary \nusing Test\n\n@testset begin\n\n\
    candidate = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150)\
    \ == \"110\")\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) ==\
    \ \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps0i147ch.jl:29\nin expression starting at\
    \ /tmp/tmps0i147ch.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N <\
    \ 0 \n        return \"-1\"\n    \n    digits = N % 10\n    \n    if N < 10 \n\
    \        return digits::String\n    \n    digits = N / 10\n    \n    sum = 0\n\
    \    \n    while digits > 0\n        sum += digits%2\n        digits = digits\
    \ / 2\n    \n    return sum::String\nend\n</cell>\n<code language=julia-1.5>\n\
    solve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\n\
    solve(147)\n</cell>\n<text>\nProblem 7: Binary to Decimal\nGiven a binary number\
    \ represented as a string, convert it to decimal form. \nThe binary number represented\
    \ as a string may contain leading zeros. \nThe decimal number represented as a\
    \ string should contain exactly one leading zero.\nThe decimal number represented\
    \ as a string may contain leading zeros. \nThe decimal number represented as a\
    \ string should contain exactly one leading zero.\nThe decimal number represented\
    \ as a string may contain leading zeros. \nThe decimal number represented as a\
    \ string should contain exactly one leading zero.\nThe decimal number represented\
    \ as a string may contain leading zeros. \nThe decimal number represented as a\
    \ string should contain exactly one leading zero.\nThe decimal number represented\
    \ as a string may contain leading zeros. \nThe decimal number represented as a\
    \ string should contain exactly one leading zero.\nThe decimal number represented\
    \ as a string may contain leading zeros. \nThe decimal number represented as a\
    \ string should contain exactly one leading zero.\nThe decimal number represented\
    \ as a string may contain leading zeros. \nThe decimal number represented as a\
    \ string should contain exactly one leading zero.\nThe decimal number represented\
    \ as a string may contain leading zeros. \nThe decimal number represented as a\
    \ string should contain exactly one leading zero.\nThe decimal number represented\
    \ as a string may contain leading zeros. \nThe decimal number represented as a\
    \ string should contain exactly one leading zero.\nThe decimal number represented\
    \ as a string may contain leading zeros. \nThe decimal number represented as a\
    \ string should contain exactly one leading zero.\nThe decimal number represented\
    \ as a string may contain leading zeros. \nThe decimal number represented as a\
    \ string should contain exactly one leading zero.\nThe decimal number represented\
    \ as a string may contain leading zeros. \nThe decimal number represented as a\
    \ string should contain exactly one leading zero.\nThe decimal number represented\
    \ as a string may contain leading zeros. \nThe decimal number represented as a\
    \ string should contain exactly one leading zero.\nThe decimal number represented\
    \ as a string \nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000)\
    \ == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"\
    1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsewhum4a.jl:33\nin expression starting at\
    \ /tmp/tmpsewhum4a.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    \n    if\
    \ N < 0\n        return \"-1\"\n    \n    digits = digits(N)\n    \n    if digits\
    \ == 0\n        return \"0\"\n    \n    sum = 0\n    for i in digits\n       \
    \ sum += i\n    \n    return bin(sum)[2:]\nend\n</cell>\n<code language=julia-1.5>\n\
    solve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\n\
    solve(147)\n</cell>\n<text>\nProblem 7: Find the sum of all numbers between 1\
    \ and N that are divisible by 3\nInput:\n    N integer\nOutput:\n    sum of all\
    \ numbers between 1 and N that are divisible by 3\nConstraints:\n    1 \u2264\
    \ N \u2264 10^5\nExample:\n    N = 12\n    Output: 12\n    N = 13\n    Output:\
    \ 13\n    N = 14\n    Output: 14\n    N = 15\n    Output: 15\n    N = 16\n   \
    \ Output: 16\n    N = 17\n    Output: 17\n    N = 18\n    Output: 18\n    N =\
    \ 19\n    Output: 19\n    N = 20\n    Output: 20\n    N = 21\n    Output: 21\n\
    \    N = 22\n    Output: 22\n    N = 23\n    Output: 23\n    N = 24\n    Output:\
    \ 24\n    N = 25\n    Output: 25\n    N = 26\n    Output: 26\n    N = 27\n   \
    \ Output: 27\n    N = 28\n    Output: 28\n    N = 29\n    Output: 29\n    N =\
    \ 30\n    Output: 30\n    N = 31\n    Output: 31\n    N = 32\n    Output: 32\n\
    \    N = 33\n    Output: 33\n    N = 34\n    Output: 34\n    N = 35\n    Output:\
    \ 35\n    N = 36\n    Output: 36\n    N = 37\n    Output: 37\n    N = 38\n   \
    \ Output: 38\n    N = 39\n    Output: 39\n    N = 40\n    Output: 40\n    N =\
    \ 41\n    Output: 41\n    N = 42\n    Output: 42\n    N = 43\n    Output: 43\n\
    \    N = 44\n    Output: 44\n    N = 45\n    Output: 45\n    N = 46\n    Output:\
    \ 46\n    N = 47\n    Output: 47\n    N = 48\n    Output: 48\n    N = 49\n   \
    \ Output: 49\n    N = 50\n    Output: 50\nusing Test\n\n@testset begin\n\ncandidate\
    \ = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150) == \"110\"\
    )\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) == \"1001\")\n\t\
    @test(candidate(963) == \"10010\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsla5l5b6.jl:28\nin expression\
    \ starting at /tmp/tmpsla5l5b6.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N <\
    \ 0\n        return \"0\"\n    \n    digits = N % 10\n    \n    if N < 10\n  \
    \      return digits\n    \n    digits = solve(N / 10)\n    \n    return digits\
    \ + digits\nend\n</cell>\n<code language=julia-1.5>\nsolve(1000)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\nsolve(147)\n\
    </cell>\n<code language=julia-1.5>\nsolve(123)\n</cell>\n<code language=julia-1.5>\n\
    solve(129)\n</cell>\n<code language=julia-1.5>\nsolve(130)\n</cell>\n<code language=julia-1.5>\n\
    solve(131)\n</cell>\n<code language=julia-1.5>\nsolve(132)\n</cell>\n<code language=julia-1.5>\n\
    solve(133)\n</cell>\n<code language=julia-1.5>\nsolve(134)\n</cell>\n<code language=julia-1.5>\n\
    solve(135)\n</cell>\n<code language=julia-1.5>\nsolve(136)\n</cell>\n<code language=julia-1.5>\n\
    solve(137)\n</cell>\n<code language=julia-1.5>\nsolve(138)\n</cell>\n<code language=julia-1.5>\n\
    solve(139)\n</cell>\n<code language=julia-1.5>\nsolve(140)\n</cell>\n<code language=julia-1.5>\n\
    solve(141)\n</cell>\n<code language=julia-1.5>\nsolve(142)\n</cell>\n<code language=julia-1.5>\n\
    solve(143)\n</cell>\n<code language=julia-1.5>\nsolve(144)\n</cell>\n<code language=julia-1.5>\n\
    solve(145)\n</cell>\n<code language=julia-1.5>\nsolve(146)\n</cell>\n<code language=julia-1.5>\n\
    solve(147)\n</cell>\n<code language=julia-1.5>\nsolve(148)\n</cell>\n<code language=julia-1.5>\n\
    solve(149)\n</cell>\n<code language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\n\
    solve(151)\n</cell>\n<code language=julia-1.5>\nsolve(152)\n</cell>\n<code language=julia-1.5>\n\
    solve(153)\n</cell>\n<code language=julia-1.5>\nsolve(154)\n</cell>\n<code language=julia-1.5>\n\
    solve(155)\n</cell>\n<code language=julia-1.5>\nsolve(156)\n</cell>\n<code language=julia-1.5>\n\
    solve(157)\n</cell>\n<code language=\nusing Test\n\n@testset begin\n\ncandidate\
    \ = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150) == \"110\"\
    )\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) == \"1001\")\n\t\
    @test(candidate(963) == \"10010\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd292ptpo.jl:27\nin expression starting at\
    \ /tmp/tmpd292ptpo.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N <\
    \ 0\n        return \"0\"\n    \n    digits = zeros(Int, N)\n    digits[1] = 1\n\
    \    \n    for i = 2 to N\n        digits[i] = digits[i-1] + digits[i-2]\n   \
    \ end\n    \n    return string(digits)\nend\n</cell>\n<code language=julia-1.5>\n\
    solve(2)\n</cell>\n<code language=julia-1.5>\nsolve(10)\n</cell>\n<code language=julia-1.5>\n\
    solve(100)\n</cell>\n<code language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\n\
    solve(150)\n</cell>\n<code language=julia-1.5>\nsolve(147)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=julia-1.5>\nsolve(149)\n</cell>\n<code language=julia-1.5>\n\
    solve(151)\n</cell>\n<code language=julia-1.5>\nsolve(152)\n</cell>\n<code language=julia-1.5>\n\
    solve(153)\n</cell>\n<code language=julia-1.5>\nsolve(154)\n</cell>\n<code language=julia-1.5>\n\
    solve(155)\n</cell>\n<code language=julia-1.5>\nsolve(156)\n</cell>\n<code language=julia-1.5>\n\
    solve(157)\n</cell>\n<code language=julia-1.5>\nsolve(158)\n</cell>\n<code language=julia-1.5>\n\
    solve(159)\n</cell>\n<code language=julia-1.5>\nsolve(160)\n</cell>\n<code language=julia-1.5>\n\
    solve(161)\n</cell>\n<code language=julia-1.5>\nsolve(162)\n</cell>\n<code language=julia-1.5>\n\
    solve(163)\n</cell>\n<code language=julia-1.5>\nsolve(164)\n</cell>\n<code language=julia-1.5>\n\
    solve(165)\n</cell>\n<code language=julia-1.5>\nsolve(166)\n</cell>\n<code language=julia-1.5>\n\
    solve(167)\n</cell>\n<code language=julia-1.5>\nsolve(168)\n</cell>\n<code language=julia-1.5>\n\
    solve(169)\n</cell>\n<code language=julia-1.5>\nsolve(170)\n</cell>\n<code language=julia-1.5>\n\
    solve(171)\n</cell>\n<code language=julia-1.5>\nsolve(172)\n</cell>\n<code language=julia-1.5>\n\
    solve(173)\n</cell>\n<code language=julia-1.5>\nsolve(174)\n</cell>\n<code language=julia-1.5>\n\
    solve(175)\n</\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000)\
    \ == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"\
    1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmphs4gyq1v.jl:21 expected \"\
    end\", got \"N\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphs4gyq1v.jl:21\n\
    in expression starting at /tmp/tmphs4gyq1v.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N <\
    \ 0\n        return \"-1\"\n    \n    if N == 0\n        return \"0\"\n    \n\
    \    if N == 1\n        return \"1\"\n    \n    sum = 0\n    \n    while N > 0\n\
    \        sum = sum + N % 10\n        N = N / 10\n    \n    return sum.to_s(2)\n\
    end\n</cell>\n<code language=julia-1.5>\nsolve(N)\n</cell>\n<text>\nProblem 3\n\
    Given a positive integer N, return the sum of its digits in binary using only\
    \ bit operations.\n    \n    Example\n        For N = 1000, the sum of digits\
    \ will be 1 the output should be \"1\".\n        For N = 150, the sum of digits\
    \ will be 6 the output should be \"110\".\n        For N = 147, the sum of digits\
    \ will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N\
    \ integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n \
    \        a string of binary number\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150)\
    \ == \"110\")\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) ==\
    \ \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprzyxwhx4.jl:32\nin expression starting at\
    \ /tmp/tmprzyxwhx4.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N <\
    \ 0\n        return \"-1\"\n    \n    digits = zeros(Int, N)\n    \n    for i\
    \ = 1:N\n        digits[i] = digits[i-1] + N % 10\n        N = N / 10\n    end\n\
    \    \n    return join(digits, \"\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150) == \"110\"\
    )\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) == \"1001\")\n\t\
    @test(candidate(963) == \"10010\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp52glau72.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp52glau72.jl:1\n\
    in expression starting at /tmp/tmp52glau72.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N <\
    \ 0\n        return \"0\"\n    \n    sum = 0\n    \n    for i in 0..N\n      \
    \  sum += N % 2\n        N /= 2\n    \n    return String(sum)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000) == \"1\")\n\t\
    @test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333)\
    \ == \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvjfa_okd.jl:1\nin expression starting at /tmp/tmpvjfa_okd.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N <\
    \ 0\n        return \"-1\"\n    if N == 0\n        return \"0\"\n    if N == 1\n\
    \        return \"1\"\n    \n    digits = zeros(Int, N)\n    digits[1] = 1\n \
    \   \n    for i = 2 to N\n        digits[i] = digits[i-1] + digits[i-2]\n    end\n\
    \    \n    sum = 0\n    for i = 2 to N\n        sum = sum + digits[i]\n    end\n\
    \    \n    return string(digits, sum)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150) == \"110\"\
    )\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) == \"1001\")\n\t\
    @test(candidate(963) == \"10010\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpas5vx0mn.jl:25 expected \"\
    end\", got \"N\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpas5vx0mn.jl:25\n\
    in expression starting at /tmp/tmpas5vx0mn.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N <\
    \ 0\n        return \"0\"\n    \n    sum = 0\n    \n    for i in 0..N\n      \
    \  sum += N % 2\n        N /= 2\n    \n    return String(sum)\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert solve(1) == \"1\"\n@assert solve(2) == \"10\"\
    \n@assert solve(3) == \"111\"\n@assert solve(4) == \"1010\"\n@assert solve(5)\
    \ == \"10111\"\n@assert solve(6) == \"111010\"\n@assert solve(7) == \"1110111\"\
    \n@assert solve(8) == \"1111010\"\n@assert solve(9) == \"11110110\"\n@assert solve(10)\
    \ == \"11110011\"\n@assert solve(11) == \"111100100\"\n@assert solve(12) == \"\
    1111001010\"\n@assert solve(13) == \"11110010111\"\n@assert solve(14) == \"11110011110\"\
    \n@assert solve(15) == \"111100111110\"\n@assert solve(16) == \"1111001111111\"\
    \n@assert solve(17) == \"1111001111100\"\n@assert solve(18) == \"11110011111010\"\
    \n@assert solve(19) == \"111100111110111\"\n@assert solve(20) == \"11110011110110\"\
    \n@assert solve(21) == \"111100111101110\"\n@assert solve(22) == \"111100111101111\"\
    \n@assert solve(23) == \"111100111111100\"\n@assert solve(24) == \"1111001111111010\"\
    \n@assert solve(25) == \"11110011111110111\"\n@assert solve(26) == \"1111001111011010\"\
    \n@assert solve(27) == \"1111001111011011\"\n@assert solve(28) == \"11110011110110101\"\
    \n@assert solve(29) == \"11110011110110110\"\n@assert solve(30) == \"111100111101101011\"\
    \n@assert solve(31) == \"111100111101101101\"\n@assert solve(32) == \"1111001111011011010\"\
    \n@assert solve(33) == \"11110011110110110100\"\n@assert solve(34) == \"111100111101101101010\"\
    \n@assert solve(35) == \"1111001111011011010111\"\n@assert solve(36) == \"111100111101101101100\"\
    \n@assert solve(37) == \"1111001111011011011000\"\n@assert solve(38) == \"11110011110110110110010\"\
    \n@assert solve(39) == \"111100111101101101100100\"\n@assert solve(40) == \"1111001111011011011001010\"\
    \n@assert solve(41) == \"11110011110110110110010111\"\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150)\
    \ == \"110\")\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) ==\
    \ \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvxodv0ut.jl:26\nin expression starting at\
    \ /tmp/tmpvxodv0ut.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    \n    digits\
    \ = N % 10\n    \n    if N < 10\n        return digits::String\n    \n    digits\
    \ = solve(N / 10)\n    \n    return digits + digits\nend\n</cell>\n<code language=julia-1.5>\n\
    solve(N)\n</cell>\n<text>\nProblem 7\nWrite a Julia function called sumdigits(N)\
    \ that takes in a positive integer N and returns the sum of its digits in binary.\n\
    using Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000) ==\
    \ \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"1100\"\
    )\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpruzw3_zt.jl:25\nin expression starting at\
    \ /tmp/tmpruzw3_zt.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    \n    if\
    \ N < 0\n        return \"0\"\n    \n    sum = 0\n    \n    while N > 0\n    \
    \    sum = sum + N % 10\n        N = N / 10\n    \n    return sum.to_s\nend\n\
    using Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000) ==\
    \ \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"1100\"\
    )\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8v5jox3s.jl:1\nin expression starting at /tmp/tmp8v5jox3s.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N <\
    \ 0\n        return \"0\"\n    if N < 10\n        return string(\"0\", N)\n  \
    \  \n    digits = string(\"0\", N)\n    \n    for i = N - 1, j = 0, k = 1\n  \
    \      while i >= k\n            digits[j] += digits[i%k]\n            i /= k\n\
    \            j += 1\n            k += 1\n    \n    return digits\nend\n</cell>\n\
    <code language=julia-1.5>\nsolve(1)\n</cell>\n<code language=julia-1.5>\nsolve(10)\n\
    </cell>\n<code language=julia-1.5>\nsolve(100)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\n\
    solve(147)\n</cell>\n<code language=julia-1.5>\nsolve(148)\n</cell>\n<code language=julia-1.5>\n\
    solve(151)\n</cell>\n<code language=julia-1.5>\nsolve(152)\n</cell>\n<code language=julia-1.5>\n\
    solve(153)\n</cell>\n<code language=julia-1.5>\nsolve(154)\n</cell>\n<code language=julia-1.5>\n\
    solve(155)\n</cell>\n<code language=julia-1.5>\nsolve(156)\n</cell>\n<code language=julia-1.5>\n\
    solve(157)\n</cell>\n<code language=julia-1.5>\nsolve(158)\n</cell>\n<code language=julia-1.5>\n\
    solve(159)\n</cell>\n<code language=julia-1.5>\nsolve(160)\n</cell>\n<code language=julia-1.5>\n\
    solve(161)\n</cell>\n<code language=julia-1.5>\nsolve(162)\n</cell>\n<code language=julia-1.5>\n\
    solve(163)\n</cell>\n<code language=julia-1.5>\nsolve(164)\n</cell>\n<code language=julia-1.5>\n\
    solve(165)\n</cell>\n<code language=julia-1.5>\nsolve(166)\n</cell>\n<code language=julia-1.5>\n\
    solve(167)\n</cell>\n<code language=julia-1.5>\nsolve(168)\n</cell>\n<code language=julia-1.5>\n\
    solve(169)\n</cell>\n<code language=julia-1.5>\nsolve(170)\n</cell>\n<code language=julia-1.5>\n\
    solve(171)\n</cell>\n<code language=julia-1.5>\nsolve(172)\n</cell>\n<code language=julia-1.5>\n\
    solve(173)\n</cell>\n<code language=julia-1.5>\nsolve(174)\n</cell>\n<code language=juli\n\
    using Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000) ==\
    \ \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"1100\"\
    )\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjpd3ai1y.jl:31\nin expression starting at\
    \ /tmp/tmpjpd3ai1y.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    \n    if\
    \ N < 0\n        return \"0\"\n    \n    digits = zeros(Int, N)\n    \n    for\
    \ i = 1:N\n        digits[i] = digits[i-1] + N % 10\n        N = N / 10\n    end\n\
    \    \n    digits[N] = digits[N]\n    \n    return join(digits, \"\")\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000) == \"\
    1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"1100\")\n\
    \t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmphxvjw94t.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphxvjw94t.jl:1\n\
    in expression starting at /tmp/tmphxvjw94t.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N <\
    \ 0\n        return \"-1\"\n    \n    sum = 0\n    digits = N % 10\n    \n   \
    \ while N > 0\n        sum += digits\n        N /= 10\n        digits = N % 10\n\
    \    \n    return String(sum)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150) == \"110\"\
    )\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) == \"1001\")\n\t\
    @test(candidate(963) == \"10010\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxr_7nbxw.jl:1\nin expression starting at /tmp/tmpxr_7nbxw.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    \n    if\
    \ N < 0\n        return \"0\"\n    \n    if N == 0\n        return \"0\"\n   \
    \ \n    if N == 1\n        return \"1\"\n    \n    if N == 2\n        return \"\
    10\"\n    \n    if N == 3\n        return \"11\"\n    \n    if N == 4\n      \
    \  return \"100\"\n    \n    if N == 5\n        return \"101\"\n    \n    if N\
    \ == 6\n        return \"110\"\n    \n    if N == 7\n        return \"111\"\n\
    \    \n    if N == 8\n        return \"1000\"\n    \n    if N == 9\n        return\
    \ \"1001\"\n    \n    if N == 10\n        return \"1010\"\n    \n    if N == 11\n\
    \        return \"1011\"\n    \n    if N == 12\n        return \"1100\"\n    \n\
    \    if N == 13\n        return \"1101\"\n    \n    if N == 14\n        return\
    \ \"1110\"\n    \n    if N == 15\n        return \"1111\"\n    \n    if N == 16\n\
    \        return \"10000\"\n    \n    if N == 17\n        return \"10001\"\n  \
    \  \n    if N == 18\n        return \"10010\"\n    \n    if N == 19\n        return\
    \ \"10011\"\n    \n    if N == 20\n        return \"10100\"\n    \n    if N ==\
    \ 21\n        return \"10101\"\n    \n    if N == 22\n        return \"10102\"\
    \n    \n    if N == 23\n        return \"10110\"\n    \n    if N == 24\n     \
    \   return \"10111\"\n    \n    if N == 25\n        return \"11000\"\n    \n \
    \   if N == 26\n        return \"11001\"\n    \n    if N == 27\n        return\
    \ \"11010\"\n    \n    if N == 28\n        return \"11011\"\n    \n    if N ==\
    \ 29\n        return \"11100\"\n    \n    if N == 30\n        return \"11101\"\
    \n    \n    if N == 31\n        return \"11110\"\n    \n    if N == 32\n     \
    \   return \"11111\"\n    \n    if N == 33\n        return \"10000\"\n    \n \
    \   if N == 34\n        return \"10001\"\n    \n    if N == 35\n        return\
    \ \"10010\"\n    \n    if N == 36\n        return \"10011\"\n    \n    if N ==\
    \ 37\n        return \"10100\"\n    \n    if N == 38\n        return \"10101\"\
    \n    \n    if N == 39\n        return \"10102\"\n    \n    if N == 40\n     \
    \   return \"10110\"\n    \n    if N == 41\n        return \"10111\"\n    \n \
    \   if N == 42\n        return \"11000\"\n    \n    if N == 43\n        return\
    \ \"11001\"\n    \n    if N == 44\n        return \"11010\"\n    \n    if N ==\
    \ 45\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000)\
    \ == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"\
    1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3fqm3il3.jl:1\nin expression starting at /tmp/tmp3fqm3il3.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N <\
    \ 0\n        return \"-1\"\n    if N == 0\n        return \"0\"\n    if N == 1\n\
    \        return \"1\"\n    if N == 2\n        return \"10\"\n    if N == 3\n \
    \       return \"11\"\n    if N == 4\n        return \"100\"\n    if N == 5\n\
    \        return \"101\"\n    if N == 6\n        return \"110\"\n    if N == 7\n\
    \        return \"111\"\n    if N == 8\n        return \"1000\"\n    if N == 9\n\
    \        return \"1001\"\n    if N == 10\n        return \"1010\"\n    if N ==\
    \ 11\n        return \"1011\"\n    if N == 12\n        return \"1100\"\n    if\
    \ N == 13\n        return \"1101\"\n    if N == 14\n        return \"1110\"\n\
    \    if N == 15\n        return \"1111\"\n    return \"-1\"\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000) == \"1\")\n\t\
    @test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333)\
    \ == \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp4ktvzt5.jl:1\nin expression starting at /tmp/tmpp4ktvzt5.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N <\
    \ 0\n        return \"0\"\n    \n    digits = N % 10\n    \n    if N < 10\n  \
    \      return digits::String\n    \n    digits = solve(N / 10)\n    \n    return\
    \ digits + digits\nend\n</cell>\n<code language=julia-1.4>\nsolve(1000)\n</cell>\n\
    <code language=julia-1.4>\nsolve(150)\n</cell>\n<code language=julia-1.4>\nsolve(147)\n\
    </cell>\n<text>\nProblem 7\nWrite a Julia function called digitsum that takes\
    \ a positive integer N and returns the sum of its digits in binary.\n    \n  \
    \  Example\n        For N = 1000, the sum of digits will be 1 the output should\
    \ be \"1\".\n        For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n        For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints:\
    \ 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000)\
    \ == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"\
    1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp67h9jwut.jl:27\nin expression starting at\
    \ /tmp/tmp67h9jwut.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    \n    if\
    \ N < 0\n        return \"-1\"\n    \n    sum = 0\n    \n    while N > 0\n   \
    \     sum = sum + N % 10\n        N = N / 10\n    \n    return String(sum)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000) ==\
    \ \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"1100\"\
    )\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvxqwdqcm.jl:1\nin expression starting at /tmp/tmpvxqwdqcm.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N <\
    \ 0\n        return \"0\"\n    \n    if N < 10\n        return tostring(N)\n \
    \   \n    digits = zeros(Int, 10)\n    \n    digits[1] = 1\n    \n    for i =\
    \ 2 to N\n        digits[i] = digits[i-1] * 2\n    \n    return tostring(digits)\n\
    end\n</cell>\n<code language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\n\
    solve(150)\n</cell>\n<code language=julia-1.5>\nsolve(147)\n</cell>\n<text>\n\
    Problem 7\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000)\
    \ == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"\
    1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpk4hhhjv0.jl:25 expected \"\
    end\", got \"N\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpk4hhhjv0.jl:25\n\
    in expression starting at /tmp/tmpk4hhhjv0.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    \n    if\
    \ N < 0\n        return \"-1\"\n    \n    if N == 0\n        return \"0\"\n  \
    \  \n    if N == 1\n        return \"1\"\n    \n    digits = N % 10\n    \n  \
    \  sum = \"\"\n    \n    while N > 0\n        \n        sum += digits_to_binary(digits)\n\
    \        \n        N = N / 10\n        \n        digits = N % 10\n    \n    return\
    \ sum\nend\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000)\
    \ == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"\
    1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp93976fom.jl:1\nin expression starting at /tmp/tmp93976fom.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N ==\
    \ 0 \n        return \"0\"\n    \n    sum = 0\n    \n    for i in N:\n       \
    \ sum += i\n    \n    return bin(sum)[2:]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150)\
    \ == \"110\")\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) ==\
    \ \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm44q84bf.jl:21\nin expression starting at\
    \ /tmp/tmpm44q84bf.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N <\
    \ 0\n        return \"0\"\n    \n    if N < 10\n        return string(\"0\", N)\n\
    \    \n    sum = 0\n    \n    for n in N\n        sum += n%2\n        n /= 2\n\
    \    \n    return string(\"1\", sum)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert solve(1) == \"1\"\n@assert solve(2) == \"10\"\n@assert solve(3) == \"\
    11\"\n@assert solve(4) == \"100\"\n@assert solve(5) == \"101\"\n@assert solve(6)\
    \ == \"110\"\n@assert solve(7) == \"111\"\n@assert solve(8) == \"1000\"\n@assert\
    \ solve(9) == \"1001\"\n@assert solve(10) == \"1010\"\n@assert solve(11) == \"\
    1011\"\n@assert solve(12) == \"1100\"\n@assert solve(13) == \"1101\"\n@assert\
    \ solve(14) == \"1110\"\n@assert solve(15) == \"1111\"\n@assert solve(16) == \"\
    10000\"\n@assert solve(17) == \"10001\"\n@assert solve(18) == \"10010\"\n@assert\
    \ solve(19) == \"10011\"\n@assert solve(20) == \"10100\"\n@assert solve(21) ==\
    \ \"10501\"\n@assert solve(22) == \"10110\"\n@assert solve(23) == \"10110\"\n\
    @assert solve(24) == \"10111\"\n@assert solve(25) == \"11000\"\n@assert solve(26)\
    \ == \"11001\"\n@assert solve(27) == \"11010\"\n@assert solve(28) == \"11010\"\
    \n@assert solve(29) == \"11011\"\n@assert solve(30) == \"11100\"\n@assert solve(31)\
    \ == \"11100\"\n@assert solve(32) == \"11101\"\n@assert solve(33) == \"11110\"\
    \n@assert solve(34) == \"11110\"\n@assert solve(35) == \"11111\"\n@assert solve(36)\
    \ == \"10000\"\n@assert solve(37) == \"10001\"\n@assert solve(38) == \"10010\"\
    \n@assert solve(39) == \"10011\"\n@assert solve(40) == \"10100\"\n@assert solve(41)\
    \ == \"10501\"\n@assert solve(42) == \"10110\"\n@assert solve(43) == \"10110\"\
    \n@assert solve(44) == \"10111\"\n@assert solve(45) == \"11000\"\n@assert solve(46)\
    \ == \"11001\"\n@assert solve(47) == \"11010\"\n@assert solve(48) == \"11010\"\
    \n@assert solve(49) == \"11011\"\n@assert solve(50) == \"11100\"\n@assert solve(51)\
    \ == \"11100\"\n@assert solve(52) == \"11101\"\n\nusing Test\n\n@testset begin\n\
    \ncandidate = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150)\
    \ == \"110\")\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) ==\
    \ \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4k9ak1ha.jl:29\nin expression starting at\
    \ /tmp/tmp4k9ak1ha.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N <\
    \ 0 \n        return \"-1\"\n    \n    if N == 0 \n        return \"0\"\n    \n\
    \    digits = zeros(Int, N)\n    \n    for i = 1:N\n        digits[i] = digits[i-1]\
    \ + N % 2\n        N = N / 2\n    end\n    \n    sum = 0\n    for i = 1:N\n  \
    \      sum = sum + digits[i]\n    end\n    \n    return string(digits, digits[N],\
    \ sum)\nend\n</cell>\n<code language=julia-1.3>\nsolve(1000)\n</cell>\n<code language=julia-1.3>\n\
    solve(150)\n</cell>\n<code language=julia-1.3>\nsolve(147)\n</cell>\n<text>\n\
    Problem 7\nGiven a positive integer N, return the number of trailing zeroes in\
    \ N's binary representation.\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\
    \t@test(candidate(1000) == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147)\
    \ == \"1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) ==\
    \ \"10010\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwb0_65rz.jl:35\nin expression starting at\
    \ /tmp/tmpwb0_65rz.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    \n    if\
    \ N < 0 \n        return \"-1\"\n    \n    sum = 0\n    \n    while N > 0\n  \
    \      sum = sum + N % 10\n        N = N / 10\n    \n    return String(sum)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000)\
    \ == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"\
    1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkb_bj3yc.jl:1\nin expression starting at /tmp/tmpkb_bj3yc.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N <\
    \ 0\n        return \"0\"\n    \n    sum = 0\n    \n    for i in 0..N-1\n    \
    \    sum += N % 2\n        N = N / 2\n    \n    return String(sum)\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert solve(1) == \"1\"\n@assert solve(2) == \"10\"\
    \n@assert solve(3) == \"111\"\n@assert solve(4) == \"1001\"\n@assert solve(5)\
    \ == \"1011\"\n@assert solve(6) == \"1101\"\n@assert solve(7) == \"1110\"\n@assert\
    \ solve(8) == \"11110\"\n@assert solve(9) == \"11111\"\n@assert solve(10) == \"\
    111111\"\n@assert solve(11) == \"1111111\"\n@assert solve(12) == \"11111110\"\n\
    @assert solve(13) == \"111111110\"\n@assert solve(14) == \"1111111101\"\n@assert\
    \ solve(15) == \"11111111011\"\n@assert solve(16) == \"111111110111\"\n@assert\
    \ solve(17) == \"1111111101111\"\n@assert solve(18) == \"11111111011111\"\n@assert\
    \ solve(19) == \"111111110111111\"\n@assert solve(20) == \"1111111101111111\"\n\
    @assert solve(21) == \"11111111011111111\"\n@assert solve(22) == \"111111110111111111\"\
    \n@assert solve(23) == \"1111111101111111110\"\n@assert solve(24) == \"11111111011111111110\"\
    \n@assert solve(25) == \"111111110111111111101\"\n@assert solve(26) == \"1111111101111111111011\"\
    \n@assert solve(27) == \"11111111011111111110111\"\n@assert solve(28) == \"111111110111111111101111\"\
    \n@assert solve(29) == \"1111111101111111111011111\"\n@assert solve(30) == \"\
    11111111011111111110111111\"\n@assert solve(31) == \"111111110111111111101111111\"\
    \n@assert solve(32) == \"1111111101111111111011111111\"\n@assert solve(33) ==\
    \ \"11111111011111111110111111111\"\n@assert solve(34) == \"111111110111111111101111111110\"\
    \n@assert solve(35) == \"1111111101111111111011111111110\"\n@assert solve(36)\
    \ == \"11111111011111111110111111111101\"\n@assert solve(37) == \"111111110111111111101111111111011\"\
    \n@assert solve(38) == \"1111111101111111111011111111110111\"\n@assert solve(39)\
    \ == \"11111111011111111110111111111101111\"\n@assert \nusing Test\n\n@testset\
    \ begin\n\ncandidate = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150)\
    \ == \"110\")\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) ==\
    \ \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd0me1h1w.jl:26\nin expression starting at\
    \ /tmp/tmpd0me1h1w.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N <\
    \ 0\n        return \"-1\"\n    if N == 0\n        return \"0\"\n    if N == 1\n\
    \        return \"1\"\n    if N == 2\n        return \"10\"\n    if N == 3\n \
    \       return \"11\"\n    if N == 4\n        return \"100\"\n    if N == 5\n\
    \        return \"101\"\n    if N == 6\n        return \"110\"\n    if N == 7\n\
    \        return \"111\"\n    if N == 8\n        return \"1000\"\n    if N == 9\n\
    \        return \"1001\"\n    if N == 10\n        return \"1010\"\n    if N ==\
    \ 11\n        return \"1011\"\n    if N == 12\n        return \"1100\"\n    if\
    \ N == 13\n        return \"1101\"\n    if N == 14\n        return \"1110\"\n\
    \    if N == 15\n        return \"1111\"\n    if N == 16\n        return \"10000\"\
    \n    if N == 17\n        return \"10001\"\n    if N == 18\n        return \"\
    10010\"\n    if N == 19\n        return \"10011\"\n    if N == 20\n        return\
    \ \"10100\"\n    if N == 21\n        return \"10101\"\n    if N == 22\n      \
    \  return \"10102\"\n    if N == 23\n        return \"10103\"\n    if N == 24\n\
    \        return \"10104\"\n    if N == 25\n        return \"10105\"\n    if N\
    \ == 26\n        return \"10106\"\n    if N == 27\n        return \"10107\"\n\
    \    if N == 28\n        return \"10108\"\n    if N == 29\n        return \"10109\"\
    \n    if N == 30\n        return \"10110\"\n    if N == 31\n        return \"\
    10111\"\n    if N == 32\n        return \"11000\"\n    if N == 33\n        return\
    \ \"11001\"\n    if N == 34\n        return \"11002\"\n    if N == 35\n      \
    \  return \"11003\"\n    if N == 36\n        return \"11004\"\n    if N == 37\n\
    \        return \"11005\"\n    if N == 38\n        return \"11006\"\n    if N\
    \ == 39\n        return \"11007\"\n    if N == 40\n        return \"11008\"\n\
    \    if N == 41\n        return \"11009\"\n    if N == 42\n        return \"11010\"\
    \n    if N == 43\n        return \"11011\"\n    if N == 44\n        return \"\
    11012\"\n    if N == 45\n        return \"11013\"\n    if N == 46\n        return\
    \ \"11014\"\n    if N == 47\n        return \"11015\"\n    if N == 48\n      \
    \  return \"11016\"\n    if N == 49\n        return \"11017\"\n    if N == 50\n\
    \        return \"11018\"\n    if N == 51\n        return \"11019\"\n    if N\
    \ == 52\n        return \"11020\"\n    if N == 53\n        return \"11021\"\n\
    \    if N == 54\n        return \"110\nusing Test\n\n@testset begin\n\ncandidate\
    \ = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150) == \"110\"\
    )\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) == \"1001\")\n\t\
    @test(candidate(963) == \"10010\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"1\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpp3c5g8qa.jl:132\nin expression starting at /tmp/tmpp3c5g8qa.jl:132\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    \n    if\
    \ N < 0\n        return \"-1\"\n    \n    digits = String[1..N]\n    \n    sum\
    \ = 0\n    for i in digits\n        sum += i\n    \n    return sum.to_s\nend\n\
    using Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000) ==\
    \ \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"1100\"\
    )\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp087taamy.jl:1\nin expression starting at /tmp/tmp087taamy.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N <\
    \ 0\n        return \"-1\"\n    \n    sum = 0\n    \n    while N > 0\n       \
    \ sum = sum + N % 10\n        N = N / 10\n    end\n    \n    return string(sum)\n\
    end\n</cell>\n<code language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\n\
    solve(150)\n</cell>\n<code language=julia-1.5>\nsolve(147)\n</cell>\n<text>\n\
    Problem 3\nGiven a positive integer N, return the sum of its digits in binary\
    \ using only bit operations.\n    \n    Example\n        For N = 1000, the sum\
    \ of digits will be 1 the output should be \"1\".\n        For N = 150, the sum\
    \ of digits will be 6 the output should be \"110\".\n        For N = 147, the\
    \ sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n\
    \        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150)\
    \ == \"110\")\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) ==\
    \ \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf7m4zpm1.jl:27\nin expression starting at\
    \ /tmp/tmpf7m4zpm1.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N <\
    \ 0\n        return \"0\"\n    \n    digits = zeros(Int, N)\n    \n    for d in\
    \ digits\n        digits[d] = digits[d] + 1\n    end\n    \n    digits = digits[digits[end]\
    \ == 1]\n    \n    if length(digits) < 2\n        return \"0\"\n    end\n    \n\
    \    digits = digits[2:end]\n    \n    sum = 0\n    for d in digits\n        sum\
    \ = sum + d\n    end\n    \n    return string(digits, digits[end])\nend\n</cell>\n\
    <code language=julia-1.5>\nsolve(1)\n</cell>\n<code language=julia-1.5>\nsolve(100)\n\
    </cell>\n<code language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\n\
    solve(147)\n</cell>\n<text>\nProblem 4\nGiven a positive integer N, return the\
    \ sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum\
    \ of digits will be 1 the output should be \"1\".\n        For N = 150, the sum\
    \ of digits will be 6 the output should be \"110\".\n        For N = 147, the\
    \ sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n\
    \        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150)\
    \ == \"110\")\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) ==\
    \ \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4nok3u1u.jl:39\nin expression starting at\
    \ /tmp/tmp4nok3u1u.jl:39\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N <\
    \ 0\n        return \"-1\"\n    \n    digits = N % 10\n    N = N / 10\n    \n\
    \    if N == 0\n        return \"0\"\n    \n    sum = \"\"\n    \n    while N\
    \ > 0\n        sum = sum + digits_to_binary(digits)\n        digits = digits %\
    \ 10\n        N = N / 10\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    solve(N = 1000)\n</cell>\n<code language=julia-1.5>\nsolve(N = 150)\n</cell>\n\
    <code language=julia-1.5>\nsolve(N = 147)\n</cell>\n<text>\nProblem 7: Binary\
    \ to Decimal\nGiven a binary number represented as a string, convert it to decimal\
    \ form by adding up the individual digits in the right order.\n    \n    Variables:\n\
    \        @N string\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         an integer\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate =\
    \ solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150) == \"110\"\
    )\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) == \"1001\")\n\t\
    @test(candidate(963) == \"10010\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6irb3kvk.jl:33\nin expression starting at\
    \ /tmp/tmp6irb3kvk.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    \n    if\
    \ N < 0\n        return \"-1\"\n    \n    digits = zeros(Int, 10)\n    \n    for\
    \ digit in digits:\n        digits[digit] = N % 2\n        N = N / 2\n    \n \
    \   sum = 0\n    for digit in digits:\n        sum = sum + digit\n    \n    return\
    \ String(sum)\nend\n</cell>\n<code language=julia-1.5>\nsolve(1000)\n</cell>\n\
    <code language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\nsolve(147)\n\
    </cell>\n<text>\nProblem 8\nWrite a Julia function called sumDigits(N) that takes\
    \ in an integer N and returns the sum of the digits of N in binary.\nusing Test\n\
    \n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000) == \"1\")\n\t\
    @test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333)\
    \ == \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1f_yucrd.jl:22\nin expression starting at\
    \ /tmp/tmp1f_yucrd.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N <\
    \ 0\n        return \"0\"\n    \n    sum = 0\n    digits = N % 10\n    \n    while\
    \ N > 0\n        sum += digits\n        N /= 10\n        digits = N % 10\n   \
    \ \n    return sum.to_s(2)\nend\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\
    \t@test(candidate(1000) == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147)\
    \ == \"1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) ==\
    \ \"10010\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb2twxpac.jl:1\nin expression starting at /tmp/tmpb2twxpac.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N <\
    \ 0\n        return \"0\"\n    \n    sum = 0\n    \n    for i in N:\n        sum\
    \ += i\n    \n    return bin(sum)[2:]\nend\n</cell>\n<code language=julia-1.5>\n\
    solve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\n\
    solve(147)\n</cell>\n<text>\nProblem 7: Find all prime factors\nGiven a positive\
    \ integer N, find all prime factors of N.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150) == \"110\"\
    )\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) == \"1001\")\n\t\
    @test(candidate(963) == \"10010\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl060mb1f.jl:21\nin expression starting at\
    \ /tmp/tmpl060mb1f.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N <\
    \ 0\n        return \"0\"\n    \n    sum = 0\n    digits = \"\"\n    \n    for\
    \ i in N:\n        sum += i\n        digits = digits*i\n    \n    return digits\n\
    end\n</cell>\n<code language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\n\
    solve(150)\n</cell>\n<code language=julia-1.5>\nsolve(147)\n</cell>\n<text>\n\
    Problem 3\nWrite a Julia function called sumdigits which takes in an integer N\
    \ and returns the sum of the digits of N in binary.\nusing Test\n\n@testset begin\n\
    \ncandidate = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150)\
    \ == \"110\")\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) ==\
    \ \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwmbd3k9d.jl:22\nin expression starting at\
    \ /tmp/tmpwmbd3k9d.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N <\
    \ 0\n        return \"0\"\n    \n    sum = 0\n    \n    while N > 0\n        sum\
    \ += N % 10\n        N /= 10\n    \n    return sum.to_s(2)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(150)\n\
    </cell>\n<code language=julia-1.5>\nsolve(147)\n</cell>\n<text>\nProblem 4\nWrite\
    \ a Julia function called sum_to_ten(N) that takes an integer N and returns the\
    \ sum of its digits in binary.\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\
    \t@test(candidate(1000) == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147)\
    \ == \"1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) ==\
    \ \"10010\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6x9u_asw.jl:26\nin expression starting at\
    \ /tmp/tmp6x9u_asw.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N <\
    \ 0\n        return \"0\"\n    \n    digits = String[1..N]\n    \n    sum = 0\n\
    \    for i in digits\n        sum += i\n    \n    return sum.to_s\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000) == \"\
    1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"1100\")\n\
    \t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyughn0lt.jl:1\nin expression starting at /tmp/tmpyughn0lt.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N <\
    \ 0\n        return \"-1\"\n    \n    digits = N % 10\n    \n    if N < 10\n \
    \       return digits::String\n    \n    N = N / 10\n    \n    digits = N % 10\n\
    \    \n    if N < 10\n        return digits::String\n    \n    N = N / 10\n  \
    \  \n    digits = N % 10\n    \n    if N < 10\n        return digits::String\n\
    \    \n    N = N / 10\n    \n    digits = N % 10\n    \n    if N < 10\n      \
    \  return digits::String\n    \n    N = N / 10\n    \n    digits = N % 10\n  \
    \  \n    if N < 10\n        return digits::String\n    \n    N = N / 10\n    \n\
    \    digits = N % 10\n    \n    if N < 10\n        return digits::String\n   \
    \ \n    N = N / 10\n    \n    digits = N % 10\n    \n    if N < 10\n        return\
    \ digits::String\n    \n    N = N / 10\n    \n    digits = N % 10\n    \n    if\
    \ N < 10\n        return digits::String\n    \n    N = N / 10\n    \n    digits\
    \ = N % 10\n    \n    if N < 10\n        return digits::String\n    \n    N =\
    \ N / 10\n    \n    digits = N % 10\n    \n    if N < 10\n        return digits::String\n\
    \    \n    N = N / 10\n    \n    digits = N % 10\n    \n    if N < 10\n      \
    \  return digits::String\n    \n    N = N / 10\n    \n    digits = N % 10\n  \
    \  \n    if N < 10\n        return digits::String\n    \n    N = N / 10\n    \n\
    \    digits = N % 10\n    \n    if N < 10\n        return digits::String\n   \
    \ \n    N = N / 10\n    \n    digits = N % 10\n    \n    if N < 10\n        return\
    \ digits::String\n    \n    N = N / 10\n    \n    digits = N % 10\n    \n    if\
    \ N < 10\n        return digits::String\n    \n    N = N / 10\n    \n    digits\
    \ = N % 10\n    \n    if N < 10\n        return digits::String\n    \n    N =\
    \ N / 10\n    \n    digits = N % 10\n    \n    if N < 10\n        return digits::String\n\
    \    \n    N = N / 10\n    \n    digits = N % 10\n    \nusing Test\n\n@testset\
    \ begin\n\ncandidate = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150)\
    \ == \"110\")\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) ==\
    \ \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprcf_sm5g.jl:1\nin expression starting at /tmp/tmprcf_sm5g.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N <\
    \ 0\n        return \"Invalid input\"\n    \n    digits = N % 10\n    N = N /\
    \ 10\n    \n    if N == 0\n        return \"0\"\n    \n    digits = solve(N)\n\
    \    \n    return digits + digits\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150) == \"110\"\
    )\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) == \"1001\")\n\t\
    @test(candidate(963) == \"10010\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1mvvq7wv.jl:1\nin expression starting at /tmp/tmp1mvvq7wv.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N <\
    \ 0\n        return \"0\"\n    \n    digits = zeros(Int, N)\n    \n    for digit\
    \ in digits\n        digits[digit] = digits[digit] + 1\n    \n    digits = digits[digits]\n\
    \    \n    sum = 0\n    \n    for digit in digits\n        sum = sum + digit\n\
    \    \n    return String(sum)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150) == \"110\"\
    )\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) == \"1001\")\n\t\
    @test(candidate(963) == \"10010\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpp78vv4wq.jl:20\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpp78vv4wq.jl:1\n\
    in expression starting at /tmp/tmpp78vv4wq.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    \n    if\
    \ N < 0\n        return \"-1\"\n    \n    sum = 0\n    \n    while N > 0\n   \
    \     sum = sum + N % 10\n        N = N / 10\n    \n    if sum == 0\n        return\
    \ \"0\"\n    \n    sumstr = String(sum)\n    \n    if sumstr == \"0\"\n      \
    \  return \"0\"\n    \n    sumstr = sumstr.reverse\n    \n    if sumstr == \"\
    0\"\n        return \"0\"\n    \n    return sumstr\nend\n</cell>\n<code language=julia-1.5>\n\
    solve(1)\n</cell>\n<code language=julia-1.5>\nsolve(100)\n</cell>\n<code language=julia-1.5>\n\
    solve(150)\n</cell>\n<code language=julia-1.5>\nsolve(147)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\nusing Test\n\n@testset\
    \ begin\n\ncandidate = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150)\
    \ == \"110\")\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) ==\
    \ \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_nnkab63.jl:40\nin expression starting at\
    \ /tmp/tmp_nnkab63.jl:40\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N <\
    \ 0\n        return \"0\"\n    \n    if N == 0\n        return \"0\"\n    \n \
    \   if N == 1\n        return \"1\"\n    \n    if N == 2\n        return \"10\"\
    \n    \n    if N == 3\n        return \"11\"\n    \n    if N == 4\n        return\
    \ \"100\"\n    \n    if N == 5\n        return \"101\"\n    \n    if N == 6\n\
    \        return \"110\"\n    \n    if N == 7\n        return \"111\"\n    \n \
    \   if N == 8\n        return \"1000\"\n    \n    if N == 9\n        return \"\
    1001\"\n    \n    if N == 10\n        return \"1010\"\n    \n    if N == 11\n\
    \        return \"1011\"\n    \n    if N == 12\n        return \"1100\"\n    \n\
    \    if N == 13\n        return \"1101\"\n    \n    if N == 14\n        return\
    \ \"1110\"\n    \n    if N == 15\n        return \"1111\"\n    \n    return \"\
    0\"\nend\n</cell>\n<code language=julia-1.5>\nsolve(2)\n</cell>\n<code language=julia-1.5>\n\
    solve(10)\n</cell>\n<code language=julia-1.5>\nsolve(100)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(10000)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(100000)\n</cell>\n<code language=julia-1.5>\nsolve(1000000)\n\
    </cell>\n<code language=julia-1.5>\nsolve(10000000)\n</cell>\n<code language=julia-1.5>\n\
    solve(100000000)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000)\n</cell>\n\
    <code language=julia-1.5>\nsolve(10000000000)\n</cell>\n<code language=julia-1.5>\n\
    solve(100000000000)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000000)\n\
    </cell>\n<code language=julia-1.5>\nsolve(1000000000001)\n</cell>\n<code language=julia-1.5>\n\
    solve(10000000000010)\n</cell>\n<code language=julia-1.5>\nsolve(10000000000011)\n\
    </cell>\n<code language=julia-1.5>\nsolve(100000000000100)\n</cell>\n<code language=julia-1.5>\n\
    solve(100000000000101)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000001010)\n\
    </cell>\n<code language=julia-1.5>\nsolve(1000000000001011)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000000000001100)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000001101)\n\
    </cell>\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000)\
    \ == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"\
    1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp51qpobso.jl:68\nin expression starting at\
    \ /tmp/tmp51qpobso.jl:68\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N <\
    \ 0\n        return \"0\"\n    if N == 0\n        return \"0\"\n    if N == 1\n\
    \        return \"1\"\n    \n    digits = N % 10\n    N = N / 10\n    \n    sum\
    \ = \"\"\n    \n    while N > 0\n        sum = sum + digits_to_binary(digits)\n\
    \        N = N / 10\n        digits = N % 10\n        N = N / 10\n    end\n  \
    \  \n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\
    \t@test(candidate(1000) == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147)\
    \ == \"1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) ==\
    \ \"10010\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk_z1q9kf.jl:1\nin expression starting at /tmp/tmpk_z1q9kf.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N <\
    \ 0\n        return \"0\"\n    \n    digits = String[]\n    \n    sum = 0\n  \
    \  \n    while N > 0\n        digit = N % 10\n        sum += digit\n        N\
    \ /= 10\n        \n        push!(digits, digit)\n    end\n    \n    sum = \"\"\
    .join(digits)\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    solve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\n\
    solve(147)\n</cell>\n<text>\nProblem 7\nGiven a positive integer N, return the\
    \ number of trailing zeroes in N's binary representation.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150)\
    \ == \"110\")\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) ==\
    \ \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjtcefwz0.jl:34\nin expression starting at\
    \ /tmp/tmpjtcefwz0.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N <\
    \ 0\n        return \"0\"\n    \n    if N < 10\n        return tostring(N)\n \
    \   \n    sum = 0\n    \n    while N > 0\n        sum += N % 10\n        N /=\
    \ 10\n    \n    return tostring(sum)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150) == \"110\"\
    )\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) == \"1001\")\n\t\
    @test(candidate(963) == \"10010\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpob9xeq1c.jl:1\nin expression starting at /tmp/tmpob9xeq1c.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N <\
    \ 0 \n        return \"Invalid input\"\n    \n    digits = N % 10\n    \n    if\
    \ N < 10 \n        return digits::String\n    \n    N = N / 10\n    \n    digits\
    \ = digits + N % 10\n    \n    return digits::String\nend\n</cell>\n<code language=julia-1.5>\n\
    solve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\n\
    solve(147)\n</cell>\n<text>\nProblem 3\nGiven a positive integer N, return the\
    \ sum of its digits in base 10. \n    \n    Example\n        For N = 1000, the\
    \ sum of digits will be 1 the output should be \"1\".\n        For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n        For N = 147,\
    \ the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n\
    \        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of digits base 10\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150)\
    \ == \"110\")\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) ==\
    \ \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg89i19md.jl:29\nin expression starting at\
    \ /tmp/tmpg89i19md.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N <\
    \ 0\n        return \"-1\"\n    \n    digits = N % 10\n    N = N / 10\n    \n\
    \    if N == 0\n        return \"0\"\n    \n    digits = digits + solve(N)\n \
    \   \n    return digits\nend\n</cell>\n<code language=julia-1.3>\nsolve(1000)\n\
    </cell>\n<code language=julia-1.3>\nsolve(150)\n</cell>\n<code language=julia-1.3>\n\
    solve(147)\n</cell>\n<code language=julia-1.3>\nsolve(148)\n</cell>\n<code language=julia-1.3>\n\
    solve(149)\n</cell>\n<code language=julia-1.3>\nsolve(151)\n</cell>\n<code language=julia-1.3>\n\
    solve(152)\n</cell>\n<code language=julia-1.3>\nsolve(153)\n</cell>\n<code language=julia-1.3>\n\
    solve(154)\n</cell>\n<code language=julia-1.3>\nsolve(155)\n</cell>\n<code language=julia-1.3>\n\
    solve(156)\n</cell>\n<code language=julia-1.3>\nsolve(157)\n</cell>\n<code language=julia-1.3>\n\
    solve(158)\n</cell>\n<code language=julia-1.3>\nsolve(159)\n</cell>\n<code language=julia-1.3>\n\
    solve(160)\n</cell>\n<code language=julia-1.3>\nsolve(161)\n</cell>\n<code language=julia-1.3>\n\
    solve(162)\n</cell>\n<code language=julia-1.3>\nsolve(163)\n</cell>\n<code language=julia-1.3>\n\
    solve(164)\n</cell>\n<code language=julia-1.3>\nsolve(165)\n</cell>\n<code language=julia-1.3>\n\
    solve(166)\n</cell>\n<code language=julia-1.3>\nsolve(167)\n</cell>\n<code language=julia-1.3>\n\
    solve(168)\n</cell>\n<code language=julia-1.3>\nsolve(169)\n</cell>\n<code language=julia-1.3>\n\
    solve(170)\n</cell>\n<code language=julia-1.3>\nsolve(171)\n</cell>\n<code language=julia-1.3>\n\
    solve(172)\n</cell>\n<code language=julia-1.3>\nsolve(173)\n</cell>\n<code language=julia-1.3>\n\
    solve(174)\n</cell>\n<code language=julia-1.3>\nsolve(175)\n</cell>\n<code language=julia-1.3>\n\
    solve(176)\n</cell>\n<code language=julia-1.3>\nsolve(177)\n</cell>\n<code language=julia-1.3>\n\
    solve(178)\n\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000)\
    \ == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"\
    1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpaai1cvnu.jl:28\nin expression starting at\
    \ /tmp/tmpaai1cvnu.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N <\
    \ 0\n        return \"0\"\n    \n    digits = \"\"\n    \n    while N > 0\n  \
    \      digits = digits + str((N % 10).digits)\n        N = N / 10\n    end\n \
    \   \n    return digits\nend\n</cell>\n<code language=julia-1.5>\n@assert solve(1)\
    \ == \"1\"\n@assert solve(2) == \"10\"\n@assert solve(3) == \"11\"\n@assert solve(4)\
    \ == \"100\"\n@assert solve(5) == \"101\"\n@assert solve(6) == \"110\"\n@assert\
    \ solve(7) == \"111\"\n@assert solve(8) == \"1000\"\n@assert solve(9) == \"1001\"\
    \n@assert solve(10) == \"1010\"\n@assert solve(11) == \"1011\"\n@assert solve(12)\
    \ == \"1100\"\n@assert solve(13) == \"1101\"\n@assert solve(14) == \"1110\"\n\
    @assert solve(15) == \"1111\"\n@assert solve(16) == \"10000\"\n@assert solve(17)\
    \ == \"10001\"\n@assert solve(18) == \"10010\"\n@assert solve(19) == \"10011\"\
    \n@assert solve(20) == \"10100\"\n@assert solve(21) == \"10101\"\n@assert solve(22)\
    \ == \"10110\"\n@assert solve(23) == \"10111\"\n@assert solve(24) == \"11100\"\
    \n@assert solve(25) == \"11101\"\n@assert solve(26) == \"11110\"\n@assert solve(27)\
    \ == \"11111\"\n@assert solve(28) == \"100000\"\n@assert solve(29) == \"100001\"\
    \n@assert solve(30) == \"100010\"\n@assert solve(31) == \"100011\"\n@assert solve(32)\
    \ == \"100100\"\n@assert solve(33) == \"100101\"\n@assert solve(34) == \"100110\"\
    \n@assert solve(35) == \"100111\"\n@assert solve(36) == \"101000\"\n@assert solve(37)\
    \ == \"101001\"\n@assert solve(38) == \"101010\"\n@assert solve(39) == \"101011\"\
    \n@assert solve(40) == \"101100\"\n@assert solve(41) == \"101101\"\n@assert solve(42)\
    \ == \"101110\"\n@assert solve(43) == \"101111\"\n@assert solve(44) == \"111000\"\
    \n@assert solve(45) == \"111001\"\n@assert solve(46) == \"111010\"\n@assert solve(47)\
    \ == \"111011\"\n@assert solve(48) == \"111100\"\n@assert solve(49) == \"111101\"\
    \n@assert solve(50) == \"111110\"\n@assert solve(51) == \"111111\"\n@assert solve(52)\
    \ == \"10000000\"\n@assert solve(53) == \"1000000\nusing Test\n\n@testset begin\n\
    \ncandidate = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150)\
    \ == \"110\")\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) ==\
    \ \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp43sq9e3.jl:27\nin expression starting at\
    \ /tmp/tmpp43sq9e3.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N <\
    \ 0\n        return \"0\"\n    if N == 0\n        return \"0\"\n    if N == 1\n\
    \        return \"1\"\n    \n    digits = zeros(Int, N)\n    digits[1] = 1\n \
    \   \n    for i in 2:N\n        digits[i] = digits[i-1] * 2\n    \n    sum = \"\
    \"\n    for i in digits\n        sum = sum + i\n    end\n    return sum\nend\n\
    </cell>\n<code language=julia-1.4>\nsolve(1000)\n</cell>\n<code language=julia-1.4>\n\
    solve(150)\n</cell>\n<code language=julia-1.4>\nsolve(147)\n</cell>\n<text>\n\
    Problem 3\nGiven a positive integer N, return the number of trailing zeroes in\
    \ N's binary representation.\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\
    \t@test(candidate(1000) == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147)\
    \ == \"1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) ==\
    \ \"10010\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpirhciys0.jl:34\nin expression starting at\
    \ /tmp/tmpirhciys0.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N <\
    \ 0\n        return \"-1\"\n    \n    if N == 0\n        return \"0\"\n    \n\
    \    digits = N % 10\n    \n    if N < 10\n        return digits::String\n   \
    \ \n    digits = digits::String\n    \n    digits = digits::String\n    \n   \
    \ digits = digits::String\n    \n    digits = digits::String\n    \n    digits\
    \ = digits::String\n    \n    digits = digits::String\n    \n    digits = digits::String\n\
    \    \n    digits = digits::String\n    \n    digits = digits::String\n    \n\
    \    digits = digits::String\n    \n    digits = digits::String\n    \n    digits\
    \ = digits::String\n    \n    digits = digits::String\n    \n    digits = digits::String\n\
    \    \n    digits = digits::String\n    \n    digits = digits::String\n    \n\
    \    digits = digits::String\n    \n    digits = digits::String\n    \n    digits\
    \ = digits::String\n    \n    digits = digits::String\n    \n    digits = digits::String\n\
    \    \n    digits = digits::String\n    \n    digits = digits::String\n    \n\
    \    digits = digits::String\n    \n    digits = digits::String\n    \n    digits\
    \ = digits::String\n    \n    digits = digits::String\n    \n    digits = digits::String\n\
    \    \n    digits = digits::String\n    \n    digits = digits::String\n    \n\
    \    digits = digits::String\n    \n    digits = digits::String\n    \n    digits\
    \ = digits::String\n    \n    digits = digits::String\n    \n    digits = digits::String\n\
    \    \n    digits = digits::String\n    \n    digits = digits::String\n    \n\
    \    digits = digits::String\n    \n    digits = digits::String\n    \n    digits\
    \ = digits::String\n    \n    digits = digits::String\n    \n    digits = digits::String\n\
    \    \n    digits = digits::String\n    \n    digits = digits::String\n    \n\
    \    digits = digits::String\n    \n    digits = digits::String\n    \n    digits\
    \ = digits::String\n    \n    digits = digits::String\n    \n    digits = digits::String\n\
    \    \n    digits = digits::String\n    \n    digits = digits::String\n    \n\
    \    digits = digits::String\n    \n    digits = \nusing Test\n\n@testset begin\n\
    \ncandidate = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150)\
    \ == \"110\")\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) ==\
    \ \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphnjbpcb1.jl:1\nin expression starting at /tmp/tmphnjbpcb1.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N <\
    \ 0 \n        return \"-1\"\n    \n    digits = N % 10\n    \n    if N < 10 \n\
    \        return digits::String\n    \n    digits = solve(N / 10)\n    \n    return\
    \ digits + digits\nend\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t\
    @test(candidate(1000) == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147)\
    \ == \"1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) ==\
    \ \"10010\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcn5ctyxz.jl:1\nin expression starting at /tmp/tmpcn5ctyxz.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    \n    digits\
    \ = zeros(Int, 10)\n    \n    for i = 1:N\n        digits[i] = digits[i-1] + N\
    \ % 2\n        N = N / 2\n    end\n    \n    return join(digits)\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert solve(1) == \"1\"\n@assert solve(2) == \"10\"\
    \n@assert solve(3) == \"111\"\n@assert solve(4) == \"1001\"\n@assert solve(5)\
    \ == \"10010\"\n@assert solve(6) == \"100110\"\n@assert solve(7) == \"1001110\"\
    \n@assert solve(8) == \"10011110\"\n@assert solve(9) == \"10011111\"\n@assert\
    \ solve(10) == \"100111111\"\n@assert solve(11) == \"1001111111\"\n@assert solve(12)\
    \ == \"10011111110\"\n@assert solve(13) == \"100111111110\"\n@assert solve(14)\
    \ == \"1001111111101\"\n@assert solve(15) == \"10011111111010\"\n@assert solve(16)\
    \ == \"100111111110110\"\n@assert solve(17) == \"1001111111101101\"\n@assert solve(18)\
    \ == \"10011111111011010\"\n@assert solve(19) == \"10011111111011011\"\n@assert\
    \ solve(20) == \"100111111110110110\"\n@assert solve(21) == \"1001111111101101101\"\
    \n@assert solve(22) == \"10011111111011011010\"\n@assert solve(23) == \"1001111111101101100\"\
    \n@assert solve(24) == \"10011111111011011001\"\n@assert solve(25) == \"100111111110110110010\"\
    \n@assert solve(26) == \"100111111110110110011\"\n@assert solve(27) == \"1001111111101101100110\"\
    \n@assert solve(28) == \"10011111111011011001101\"\n@assert solve(29) == \"100111111110110110011010\"\
    \n@assert solve(30) == \"100111111110110110011011\"\n@assert solve(31) == \"1001111111101101100110110\"\
    \n@assert solve(32) == \"10011111111011011001101101\"\n@assert solve(33) == \"\
    100111111110110110011011010\"\n@assert solve(34) == \"10011111111011011001101100\"\
    \n@assert solve(35) == \"100111111110110110011011001\"\n@assert solve(36) == \"\
    1001111111101101100110110010\"\n@assert solve(37) == \"100\nusing Test\n\n@testset\
    \ begin\n\ncandidate = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150)\
    \ == \"110\")\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) ==\
    \ \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0rg6_acl.jl:25\nin expression starting at\
    \ /tmp/tmp0rg6_acl.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N <\
    \ 0\n        return \"0\"\n    \n    if N == 0\n        return \"0\"\n    \n \
    \   digits = N % 10\n    \n    if N < 10\n        return digits::String\n    \n\
    \    N = N / 10\n    \n    digits = digits + N % 10\n    \n    return digits::String\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000)\
    \ == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"\
    1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpywiaiwuh.jl:1\nin expression starting at /tmp/tmpywiaiwuh.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N ==\
    \ 0 \n        return \"0\"\n    \n    sum = 0\n    \n    for i in N:\n       \
    \ sum += i\n    \n    return sum.to_s(2)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150)\
    \ == \"110\")\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) ==\
    \ \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3u9xvesk.jl:21\nin expression starting at\
    \ /tmp/tmp3u9xvesk.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N <\
    \ 0\n        return \"-1\"\n    \n    if N < 10\n        return string(\"0\",\
    \ N)\n    \n    sum = 0\n    \n    for digit in N\n        sum += digit\n    \n\
    \    return string(\"1\", sum)\nend\n</cell>\n<code language=julia-1.5>\nsolve(1)\n\
    </cell>\n<code language=julia-1.5>\nsolve(10)\n</cell>\n<code language=julia-1.5>\n\
    solve(100)\n</cell>\n<code language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\n\
    solve(150)\n</cell>\n<code language=julia-1.5>\nsolve(147)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=julia-1.5>\nsolve(149)\n</cell>\n<code language=julia-1.5>\n\
    solve(151)\n</cell>\n<code language=julia-1.5>\nsolve(152)\n</cell>\n<code language=julia-1.5>\n\
    solve(153)\n</cell>\n<code language=julia-1.5>\nsolve(154)\n</cell>\n<code language=julia-1.5>\n\
    solve(155)\n</cell>\n<code language=julia-1.5>\nsolve(156)\n</cell>\n<code language=julia-1.5>\n\
    solve(157)\n</cell>\n<code language=julia-1.5>\nsolve(158)\n</cell>\n<code language=julia-1.5>\n\
    solve(159)\n</cell>\n<code language=julia-1.5>\nsolve(160)\n</cell>\n<code language=julia-1.5>\n\
    solve(161)\n</cell>\n<code language=julia-1.5>\nsolve(162)\n</cell>\n<code language=julia-1.5>\n\
    solve(163)\n</cell>\n<code language=julia-1.5>\nsolve(164)\n</cell>\n<code language=julia-1.5>\n\
    solve(165)\n</cell>\n<code language=julia-1.5>\nsolve(166)\n</cell>\n<code language=julia-1.5>\n\
    solve(167)\n</cell>\n<code language=julia-1.5>\nsolve(168)\n</cell>\n<code language=julia-1.5>\n\
    solve(169)\n</cell>\n<code language=julia-1.5>\nsolve(170)\n</cell>\n<code language=julia-1.5>\n\
    solve(171)\n</cell>\n<code language=julia-1.5>\nsolve(172)\n</cell>\n<code language=julia-1.5>\n\
    solve(173)\n</cell>\n<code language=julia-1.5>\nsolve(174)\n</cell>\n<code language=julia-1.5>\n\
    solve(175)\n</cell>\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000)\
    \ == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"\
    1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwe0871ub.jl:28\nin expression starting at\
    \ /tmp/tmpwe0871ub.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N <\
    \ 0\n        return \"0\"\n    \n    if N == 0\n        return \"0\"\n    \n \
    \   sum = 0\n    \n    while N > 0\n        sum += N % 10\n        N = N / 10\n\
    \    \n    return sum.to_s(2)\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ solve(1) == \"1\"\n@assert solve(2) == \"10\"\n@assert solve(3) == \"11\"\n\
    @assert solve(4) == \"100\"\n@assert solve(5) == \"101\"\n@assert solve(6) ==\
    \ \"110\"\n@assert solve(7) == \"111\"\n@assert solve(8) == \"1000\"\n@assert\
    \ solve(9) == \"1001\"\n@assert solve(10) == \"1010\"\n@assert solve(11) == \"\
    1011\"\n@assert solve(12) == \"1100\"\n@assert solve(13) == \"1101\"\n@assert\
    \ solve(14) == \"1110\"\n@assert solve(15) == \"1111\"\n@assert solve(16) == \"\
    10000\"\n@assert solve(17) == \"10001\"\n@assert solve(18) == \"10010\"\n@assert\
    \ solve(19) == \"10011\"\n@assert solve(20) == \"10100\"\n@assert solve(21) ==\
    \ \"10101\"\n@assert solve(22) == \"10110\"\n@assert solve(23) == \"10111\"\n\
    @assert solve(24) == \"11100\"\n@assert solve(25) == \"11101\"\n@assert solve(26)\
    \ == \"11110\"\n@assert solve(27) == \"11111\"\n@assert solve(28) == \"100000\"\
    \n@assert solve(29) == \"100001\"\n@assert solve(30) == \"100010\"\n@assert solve(31)\
    \ == \"100011\"\n@assert solve(32) == \"100100\"\n@assert solve(33) == \"100101\"\
    \n@assert solve(34) == \"100110\"\n@assert solve(35) == \"100111\"\n@assert solve(36)\
    \ == \"101000\"\n@assert solve(37) == \"101001\"\n@assert solve(38) == \"101010\"\
    \n@assert solve(39) == \"101011\"\n@assert solve(40) == \"101100\"\n@assert solve(41)\
    \ == \"101101\"\n@assert solve(42) == \"101110\"\n@assert solve(43) == \"101111\"\
    \n@assert solve(44) == \"111000\"\n@assert solve(45) == \"111001\"\n@assert solve(46)\
    \ == \"111010\"\n@assert solve(47) == \"111011\"\n@assert solve(48) == \"111100\"\
    \n@assert solve(49) == \"111101\"\n@assert solve(50) == \"111110\"\n@assert solve(51)\
    \ == \"111111\"\n@assert solve(52) == \"10000000\"\n@assert solve(53) == \"\n\
    using Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000) ==\
    \ \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"1100\"\
    )\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzo2vj0_7.jl:29\nin expression starting at\
    \ /tmp/tmpzo2vj0_7.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N ==\
    \ 0 \n        return \"0\"\n    \n    digits = N % 10\n    N = N / 10\n    \n\
    \    sum = \"\"\n    \n    while N > 0 \n        sum = sum + digits_to_binary(digits)\n\
    \        digits = digits * 2\n        N = N / 10\n    \n    return sum\nend\n\
    using Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000) ==\
    \ \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"1100\"\
    )\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_40q00xl.jl:1\nin expression starting at /tmp/tmp_40q00xl.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N <\
    \ 0\n        return \"0\"\n    \n    digits = zeros(Int, N)\n    \n    digits[1]\
    \ = 1\n    \n    for i in 2..N\n        digits[i] = digits[i-1] + digits[i-2]\n\
    \    \n    return string(digits)\nend\n</cell>\n<code language=julia-1.5>\nsolve(N)\n\
    </cell>\n<text>\nProblem 8\nWrite a Julia function called sumDigits which takes\
    \ in a positive integer N and returns the sum of its digits in binary. \nThe function\
    \ should work for all positive integers N. \nThe function should work for N =\
    \ 0 and negative integers N.\nThe function should work for N = 10000.\nusing Test\n\
    \n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000) == \"1\")\n\t\
    @test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333)\
    \ == \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr4xlyffz.jl:27\nin expression starting at\
    \ /tmp/tmpr4xlyffz.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N <\
    \ 0 \n        return \"-1\"\n    \n    sum = 0\n    \n    while N > 0 \n     \
    \   sum += N % 2\n        N /= 2\n    \n    return show(sum)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000) == \"1\")\n\t\
    @test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333)\
    \ == \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqy5a7oag.jl:1\nin expression starting at /tmp/tmpqy5a7oag.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N <\
    \ 0 \n        return \"-1\"\n    \n    if N == 0 \n        return \"0\"\n    \n\
    \    if N == 1 \n        return \"1\"\n    \n    digits = String[1..N]\n    \n\
    \    sum = 0\n    for i in digits\n        sum += i\n    \n    return String(sum)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000)\
    \ == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"\
    1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjj_16fu8.jl:1\nin expression starting at /tmp/tmpjj_16fu8.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N <\
    \ 0 \n        return \"-1\"\n    \n    digits = N % 10\n    \n    if N < 10 \n\
    \        return digits::String\n    \n    N = N / 10\n    \n    digits = N % 10\n\
    \    \n    if N < 10 \n        return digits::String\n    \n    N = N / 10\n \
    \   \n    digits = N % 10\n    \n    if N < 10 \n        return digits::String\n\
    \    \n    N = N / 10\n    \n    digits = N % 10\n    \n    if N < 10 \n     \
    \   return digits::String\n    \n    N = N / 10\n    \n    digits = N % 10\n \
    \   \n    if N < 10 \n        return digits::String\n    \n    N = N / 10\n  \
    \  \n    digits = N % 10\n    \n    if N < 10 \n        return digits::String\n\
    \    \n    N = N / 10\n    \n    digits = N % 10\n    \n    if N < 10 \n     \
    \   return digits::String\n    \n    N = N / 10\n    \n    digits = N % 10\n \
    \   \n    if N < 10 \n        return digits::String\n    \n    N = N / 10\n  \
    \  \n    digits = N % 10\n    \n    if N < 10 \n        return digits::String\n\
    \    \n    N = N / 10\n    \n    digits = N % 10\n    \n    if N < 10 \n     \
    \   return digits::String\n    \n    N = N / 10\n    \n    digits = N % 10\n \
    \   \n    if N < 10 \n        return digits::String\n    \n    N = N / 10\n  \
    \  \n    digits = N % 10\n    \n    if N < 10 \n        return digits::String\n\
    \    \n    N = N / 10\n    \n    digits = N % 10\n    \n    if N < 10 \n     \
    \   return digits::String\n    \n    N = N / 10\n    \n    digits = N % 10\n \
    \   \n    if N < 10 \n        return digits::String\n    \n    N = N / 10\n  \
    \  \n    digits = N % 10\n    \n    if N < 10 \n        return digits::String\n\
    \    \n    N = N / 10\n    \n    digits = N % 10\n    \n    if N < 10 \n     \
    \   return digits::String\n    \n    N = N / 10\n    \n    digits = N % 10\n \
    \   \n    if N < 10 \n        return digits::String\n    \n    N = N / 10\n  \
    \  \n    digits = N % 10\n    \nusing Test\n\n@testset begin\n\ncandidate = solve;\n\
    \t@test(candidate(1000) == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147)\
    \ == \"1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) ==\
    \ \"10010\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbzny6jor.jl:1\nin expression starting at /tmp/tmpbzny6jor.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N <\
    \ 0 \n        return \"0\"\n    \n    digits = N % 10\n    N = N / 10\n    \n\
    \    if N < 0 \n        return \"0\"\n    \n    digits = digits + N % 10\n   \
    \ N = N / 10\n    \n    if N < 0 \n        return \"0\"\n    \n    digits = digits\
    \ + N % 10\n    N = N / 10\n    \n    if N < 0 \n        return \"0\"\n    \n\
    \    digits = digits + N % 10\n    N = N / 10\n    \n    if N < 0 \n        return\
    \ \"0\"\n    \n    digits = digits + N % 10\n    N = N / 10\n    \n    if N <\
    \ 0 \n        return \"0\"\n    \n    digits = digits + N % 10\n    N = N / 10\n\
    \    \n    if N < 0 \n        return \"0\"\n    \n    digits = digits + N % 10\n\
    \    N = N / 10\n    \n    if N < 0 \n        return \"0\"\n    \n    digits =\
    \ digits + N % 10\n    N = N / 10\n    \n    if N < 0 \n        return \"0\"\n\
    \    \n    digits = digits + N % 10\n    N = N / 10\n    \n    if N < 0 \n   \
    \     return \"0\"\n    \n    digits = digits + N % 10\n    N = N / 10\n    \n\
    \    if N < 0 \n        return \"0\"\n    \n    digits = digits + N % 10\n   \
    \ N = N / 10\n    \n    if N < 0 \n        return \"0\"\n    \n    digits = digits\
    \ + N % 10\n    N = N / 10\n    \n    if N < 0 \n        return \"0\"\n    \n\
    \    digits = digits + N % 10\n    N = N / 10\n    \n    if N < 0 \n        return\
    \ \"0\"\n    \n    digits = digits + N % 10\n    N = N / 10\n    \n    if N <\
    \ 0 \n        return \"0\"\n    \n    digits = digits + N % 10\n    N = N / 10\n\
    \    \n    if N < 0 \n        return \"0\"\n    \n    digits = digits + N % 10\n\
    \    N = N / 10\n    \n    if N < 0 \n        return \"0\"\n    \n    digits =\
    \ digits + N % 10\n    N = N / 10\n    \n    if N < 0 \n        return \"0\"\n\
    \    \n    digits = digits + N % 10\n    N = N / 10\n    \n    if N < 0 \n   \
    \     return \"0\"\n    \n    digits = digits + N % 10\n    N = N / 10\n    \n\
    \    if \nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000)\
    \ == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"\
    1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing condition in \"if\" at /tmp/tmpssz6fbvi.jl:129\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpssz6fbvi.jl:130\nin expression\
    \ starting at /tmp/tmpssz6fbvi.jl:130\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N <\
    \ 0\n        return \"0\"\n    \n    sum = 0\n    \n    while N > 0\n        sum\
    \ += N % 10\n        N /= 10\n    \n    return sum.to_s(2)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(150)\n\
    </cell>\n<code language=julia-1.5>\nsolve(147)\n</cell>\n<text>\nProblem 4\nWrite\
    \ a Julia function named \"solve\" that takes in two integers N and M and returns\
    \ the sum of the digits of N in binary and M in decimal.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150)\
    \ == \"110\")\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) ==\
    \ \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqe6az3cf.jl:26\nin expression starting at\
    \ /tmp/tmpqe6az3cf.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N <\
    \ 0 \n        return \"0\"\n    \n    digits = N % 10\n    \n    if N < 10 \n\
    \        return digits::String\n    \n    digits = solve(N / 10)\n    \n    return\
    \ digits + digits\nend\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t\
    @test(candidate(1000) == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147)\
    \ == \"1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) ==\
    \ \"10010\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplbqowmd0.jl:1\nin expression starting at /tmp/tmplbqowmd0.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N <\
    \ 0\n        return \"-1\"\n    \n    sum = 0\n    \n    for i in N:\n       \
    \ sum += i\n    \n    return bin(sum)[2:]\nend\n</cell>\n<code language=julia-1.5>\n\
    solve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\n\
    solve(147)\n</cell>\n<text>\nProblem 7\nWrite a Julia function called count_digits(N)\
    \ that takes an integer N and returns the number of digits in N in binary.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000) == \"\
    1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"1100\")\n\
    \t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_q0khvvw.jl:21\nin expression starting at\
    \ /tmp/tmp_q0khvvw.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N <\
    \ 0\n        return \"0\"\n    if N < 10\n        return string(\"0\", N)\n  \
    \  if N < 100\n        return string(\"1\", N - 10)\n    if N < 1000\n       \
    \ return string(\"10\", N - 100)\n    if N < 10000\n        return string(\"11\"\
    , N - 1000)\n    if N < 100000\n        return string(\"100\", N - 10000)\n  \
    \  if N < 1000000\n        return string(\"101\", N - 100000)\n    if N < 10000000\n\
    \        return string(\"110\", N - 1000000)\n    if N < 100000000\n        return\
    \ string(\"111\", N - 10000000)\n    if N < 1000000000\n        return string(\"\
    1000\", N - 10000000)\n    if N < 10000000000\n        return string(\"1001\"\
    , N - 100000000)\n    if N < 100000000000\n        return string(\"1010\", N -\
    \ 1000000000)\n    if N < 1000000000000\n        return string(\"1011\", N - 10000000000)\n\
    \    if N < 10000000000000\n        return string(\"1100\", N - 100000000000)\n\
    \    if N < 100000000000000\n        return string(\"1101\", N - 1000000000000)\n\
    \    if N < 1000000000000000\n        return string(\"1110\", N - 10000000000000)\n\
    \    if N < 10000000000000000\n        return string(\"1111\", N - 100000000000000)\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    binary_to_decimal(binary_string::String)\n\
    \    \n    Convert binary string to decimal integer.\n    \n    Variables:\n \
    \       @binary_string string\n             Constraints: Binary string contains\
    \ only 0s and 1s.\n    Output:\n         an integer in decimal system.\n\"\"\"\
    \nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000)\
    \ == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"\
    1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxecibo9v.jl:50\nin expression starting at\
    \ /tmp/tmpxecibo9v.jl:50\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N <\
    \ 0\n        return \"0\"\n    if N == 0\n        return \"0\"\n    if N == 1\n\
    \        return \"1\"\n    \n    digits = N % 10\n    N = N / 10\n    \n    digits\
    \ = digits + solve(N)\n    \n    return digits\nend\n</cell>\n<code language=julia-1.5>\n\
    solve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\n\
    solve(147)\n</cell>\n<text>\nProblem 3\nGiven a positive integer N, return the\
    \ number of trailing zeroes in N's binary representation.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150)\
    \ == \"110\")\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) ==\
    \ \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq05f8jk6.jl:29\nin expression starting at\
    \ /tmp/tmpq05f8jk6.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N ==\
    \ 0 \n        return \"0\"\n    \n    digits = N % 10\n    \n    if N < 10 \n\
    \        return digits::String\n    \n    digits = solve(N / 10)\n    \n    digits\
    \ = digits + digits::String\n    \n    return digits\nend\n</cell>\n<code language=julia-1.5>\n\
    solve(1)\n</cell>\n<code language=julia-1.5>\nsolve(100)\n</cell>\n<code language=julia-1.5>\n\
    solve(150)\n</cell>\n<code language=julia-1.5>\nsolve(147)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000) ==\
    \ \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"1100\"\
    )\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpiwtdru9d.jl:29\nin expression starting at\
    \ /tmp/tmpiwtdru9d.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    \n    if\
    \ N < 0 \n        error(\"N must be positive\")\n    \n    if N == 0 \n      \
    \  return \"0\"\n    \n    if N == 1 \n        return \"1\"\n    \n    digits\
    \ = String[]\n    \n    digits = digits[1:N]\n    \n    sum = 0\n    \n    for\
    \ i in digits\n        sum += Int(i)\n    \n    return String(sum)\nend\n</cell>\n\
    <code language=julia-1.5>\nsolve(1)\n</cell>\n<code language=julia-1.5>\nsolve(10)\n\
    </cell>\n<code language=julia-1.5>\nsolve(100)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\n\
    solve(147)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=juli\n\
    using Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000) ==\
    \ \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"1100\"\
    )\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpksh5fvfq.jl:36\nin expression starting at\
    \ /tmp/tmpksh5fvfq.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N <\
    \ 0 \n        return \"0\"\n    \n    sum = 0\n    \n    for i in N:\n       \
    \ sum += i\n    \n    binary = \"\"\n    \n    while sum > 0:\n        binary\
    \ = str(sum % 2) + binary\n        sum = int(sum / 2)\n    \n    return binary\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000)\
    \ == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"\
    1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3182l_r5.jl:21\nin expression starting at\
    \ /tmp/tmp3182l_r5.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N <\
    \ 0 \n        return \"0\"\n    \n    digits = N % 10\n    \n    if N < 10 \n\
    \        return digits::String\n    \n    N = N / 10\n    \n    digits = digits\
    \ + N % 10\n    \n    return digits::String\nend\n</cell>\n<code language=julia-1.5>\n\
    solve(1)\n</cell>\n<code language=julia-1.5>\nsolve(10)\n</cell>\n<code language=julia-1.5>\n\
    solve(100)\n</cell>\n<code language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\n\
    solve(150)\n</cell>\n<code language=julia-1.5>\nsolve(147)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=julia-1.5>\nsolve(149)\n</cell>\n<code language=julia-1.5>\n\
    solve(151)\n</cell>\n<code language=julia-1.5>\nsolve(152)\n</cell>\n<code language=julia-1.5>\n\
    solve(153)\n</cell>\n<code language=julia-1.5>\nsolve(154)\n</cell>\n<code language=julia-1.5>\n\
    solve(155)\n</cell>\n<code language=julia-1.5>\nsolve(156)\n</cell>\n<code language=julia-1.5>\n\
    solve(157)\n</cell>\n<code language=julia-1.5>\nsolve(158)\n</cell>\n<code language=julia-1.5>\n\
    solve(159)\n</cell>\n<code language=julia-1.5>\nsolve(160)\n</cell>\n<code language=julia-1.5>\n\
    solve(161)\n</cell>\n<code language=julia-1.5>\nsolve(162)\n</cell>\n<code language=julia-1.5>\n\
    solve(163)\n</cell>\n<code language=julia-1.5>\nsolve(164)\n</cell>\n<code language=julia-1.5>\n\
    solve(165)\n</cell>\n<code language=julia-1.5>\nsolve(166)\n</cell>\n<code language=julia-1.5>\n\
    solve(167)\n</cell>\n<code language=julia-1.5>\nsolve(168)\n</cell>\n<code language=julia-1.5>\n\
    solve(169)\n</cell>\n<code language=julia-1.5>\nsolve(170)\n</cell>\n<code language=julia-1.5>\n\
    solve(171)\n</cell>\n<code language=julia-1.5>\nsolve(172)\n</cell>\n<code language=julia-1.5>\n\
    solve(173)\n</cell>\n<code language=julia-1.5>\nsolve(174)\n</cell>\n<code language=julia-1.5>\n\
    solve(\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000)\
    \ == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"\
    1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3vozixj2.jl:29\nin expression starting at\
    \ /tmp/tmp3vozixj2.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N <\
    \ 0\n        return \"0\"\n    if N == 0\n        return \"0\"\n    if N == 1\n\
    \        return \"1\"\n    \n    digits = N % 10\n    \n    sum = \"\"\n    \n\
    \    while N > 0\n        N = N / 10\n        sum = sum + digits_to_binary(digits)\n\
    \        digits = digits % 10\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    solve(1)\n</cell>\n<code language=julia-1.5>\nsolve(100)\n</cell>\n<code language=julia-1.5>\n\
    solve(150)\n</cell>\n<code language=julia-1.5>\nsolve(147)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(10000)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(100000)\n</cell>\n<code language=julia-1.5>\nsolve(1000000)\n\
    </cell>\n<code language=julia-1.5>\nsolve(10000000)\n</cell>\n<code language=julia-1.5>\n\
    solve(100000000)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000)\n</cell>\n\
    <code language=julia-1.5>\nsolve(10000000000)\n</cell>\n<code language=julia-1.5>\n\
    solve(100000000000)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000000)\n\
    </cell>\n<code language=julia-1.5>\nsolve(10000000000000)\n</cell>\n<code language=julia-1.5>\n\
    solve(100000000000000)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nsolve(10000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    solve(100000000000000000)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nsolve(10000000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(100000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000000000000000000000)\n</cell>\n<code language=julia-1.5>\nsolve(10000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nsolve(100000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nsolve(1000000000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    solve(10000000000000000000000000)\n</cell>\n<code language=julia-1.5>\nsolve(100000000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nsolve(1000000000000000000000000000)\n</cell>\n\
    \nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000)\
    \ == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"\
    1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp0ct92h9.jl:33\nin expression starting at\
    \ /tmp/tmpp0ct92h9.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    \n    if\
    \ N < 0\n        return \"0\"\n    \n    if N == 0\n        return \"0\"\n   \
    \ \n    if N == 1\n        return \"1\"\n    \n    digits = N % 10\n    \n   \
    \ binary = \"\"\n    \n    while N > 0\n        \n        N = N / 10\n       \
    \ \n        binary = binary + digits_to_binary(digits)\n        \n        digits\
    \ = N % 10\n    \n    return binary\nend\n</cell>\n<code language=julia-1.5>\n\
    solve(N = 1000)\n</cell>\n<code language=julia-1.5>\nsolve(N = 150)\n</cell>\n\
    <code language=julia-1.5>\nsolve(N = 147)\n</cell>\n<text>\nProblem 7: Sum of\
    \ Digits\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000)\
    \ == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"\
    1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmposzj963b.jl:39\nin expression starting at\
    \ /tmp/tmposzj963b.jl:39\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    \n    if\
    \ N < 0\n        return \"-1\"\n    \n    if N == 0\n        return \"0\"\n  \
    \  \n    digits = N % 10\n    \n    if digits == 0\n        return solve(N/10)\n\
    \    \n    digits = solve(N/10)\n    \n    return digits + digits\nend\n</cell>\n\
    <code language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(150)\n\
    </cell>\n<code language=julia-1.5>\nsolve(147)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=julia-1.5>\nsolve(149)\n</cell>\n<code language=julia-1.5>\n\
    solve(151)\n</cell>\n<code language=julia-1.5>\nsolve(152)\n</cell>\n<code language=julia-1.5>\n\
    solve(153)\n</cell>\n<code language=julia-1.5>\nsolve(154)\n</cell>\n<code language=julia-1.5>\n\
    solve(155)\n</cell>\n<code language=julia-1.5>\nsolve(156)\n</cell>\n<code language=julia-1.5>\n\
    solve(157)\n</cell>\n<code language=julia-1.5>\nsolve(158)\n</cell>\n<code language=julia-1.5>\n\
    solve(159)\n</cell>\n<code language=julia-1.5>\nsolve(160)\n</cell>\n<code language=julia-1.5>\n\
    solve(161)\n</cell>\n<code language=julia-1.5>\nsolve(162)\n</cell>\n<code language=julia-1.5>\n\
    solve(163)\n</cell>\n<code language=julia-1.5>\nsolve(164)\n</cell>\n<code language=julia-1.5>\n\
    solve(165)\n</cell>\n<code language=julia-1.5>\nsolve(166)\n</cell>\n<code language=julia-1.5>\n\
    solve(167)\n</cell>\n<code language=julia-1.5>\nsolve(168)\n</cell>\n<code language=julia-1.5>\n\
    solve(169)\n</cell>\n<code language=julia-1.5>\nsolve(170)\n</cell>\n<code language=julia-1.5>\n\
    solve(171)\n</cell>\n<code language=julia-1.5>\nsolve(172)\n</cell>\n<code language=julia-1.5>\n\
    solve(173)\n</cell>\n<code language=julia-1.5>\nsolve(174)\n</cell>\n<code language=julia-1.5>\n\
    solve(175)\n</cell>\n<code language=julia-1.5>\nsolve(176)\n</cell>\n<code language=julia-1.5>\n\
    solve(177)\n</cell>\n\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t\
    @test(candidate(1000) == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147)\
    \ == \"1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) ==\
    \ \"10010\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxeku3lvj.jl:31\nin expression starting at\
    \ /tmp/tmpxeku3lvj.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N <\
    \ 0\n        return \"-1\"\n    \n    sum = 0\n    \n    for n in N\n        sum\
    \ += n%2\n        \n    return sum.to_s(2)\nend\n</cell>\n<code language=julia-1.5>\n\
    solve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\n\
    solve(147)\n</cell>\n<text>\nProblem 3\nGiven a positive integer N, return the\
    \ sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum\
    \ of digits will be 1 the output should be \"1\".\n        For N = 150, the sum\
    \ of digits will be 6 the output should be \"110\".\n        For N = 147, the\
    \ sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n\
    \        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150)\
    \ == \"110\")\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) ==\
    \ \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwq49i7xj.jl:25\nin expression starting at\
    \ /tmp/tmpwq49i7xj.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N <\
    \ 0\n        return \"0\"\n    \n    sum = 0\n    \n    for i in N:\n        sum\
    \ += i\n    \n    return bin(sum)[2:]\nend\n</cell>\n<code language=julia-1.5>\n\
    solve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\n\
    solve(147)\n</cell>\n<text>\nProblem 7\nGiven a positive integer N, return the\
    \ number of trailing zeroes in N's binary representation.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150)\
    \ == \"110\")\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) ==\
    \ \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3spahl6h.jl:21\nin expression starting at\
    \ /tmp/tmp3spahl6h.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N <\
    \ 0 \n        return \"0\"\n    \n    digits = N % 10\n    \n    if N < 10 \n\
    \        return digits::String\n    \n    N = N / 10\n    \n    digits = digits\
    \ + N % 10\n    \n    N = N / 10\n    \n    digits = digits + N % 10\n    \n \
    \   N = N / 10\n    \n    digits = digits + N % 10\n    \n    N = N / 10\n   \
    \ \n    digits = digits + N % 10\n    \n    N = N / 10\n    \n    digits = digits\
    \ + N % 10\n    \n    N = N / 10\n    \n    digits = digits + N % 10\n    \n \
    \   N = N / 10\n    \n    digits = digits + N % 10\n    \n    N = N / 10\n   \
    \ \n    digits = digits + N % 10\n    \n    N = N / 10\n    \n    digits = digits\
    \ + N % 10\n    \n    N = N / 10\n    \n    digits = digits + N % 10\n    \n \
    \   N = N / 10\n    \n    digits = digits + N % 10\n    \n    N = N / 10\n   \
    \ \n    digits = digits + N % 10\n    \n    N = N / 10\n    \n    digits = digits\
    \ + N % 10\n    \n    N = N / 10\n    \n    digits = digits + N % 10\n    \n \
    \   N = N / 10\n    \n    digits = digits + N % 10\n    \n    N = N / 10\n   \
    \ \n    digits = digits + N % 10\n    \n    N = N / 10\n    \n    digits = digits\
    \ + N % 10\n    \n    N = N / 10\n    \n    digits = digits + N % 10\n    \n \
    \   N = N / 10\n    \n    digits = digits + N % 10\n    \n    N = N / 10\n   \
    \ \n    digits = digits + N % 10\n    \n    N = N / 10\n    \n    digits = digits\
    \ + N % 10\n    \n    N = N / 10\n    \n    digits = digits + N % 10\n    \n \
    \   N = N / 10\n    \n    digits = digits + N % 10\n    \n    N = N / 10\n   \
    \ \n    digits = digits + N % 10\n    \n    N = N / 10\n    \n    digits = digits\
    \ + N % 10\n    \n    N = N / 10\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150) == \"110\"\
    )\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) == \"1001\")\n\t\
    @test(candidate(963) == \"10010\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp29wmkzz4.jl:1\nin expression starting at /tmp/tmp29wmkzz4.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N <\
    \ 0\n        return \"-1\"\n    if N == 0\n        return \"0\"\n    if N == 1\n\
    \        return \"1\"\n    \n    digits = N % 10\n    N = N / 10\n    \n    sum\
    \ = \"\"\n    while N > 0\n        sum = sum + digits_to_binary(digits)\n    \
    \    digits = digits * 2\n        N = N / 10\n    \n    return sum\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000) == \"\
    1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"1100\")\n\
    \t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppa9203qn.jl:1\nin expression starting at /tmp/tmppa9203qn.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N <\
    \ 0\n        return \"0\"\n    \n    if N == 0\n        return \"0\"\n    \n \
    \   if N == 1\n        return \"1\"\n    \n    sum = 0\n    \n    while N > 0\n\
    \        sum = sum + N % 10\n        N = N / 10\n    end\n    \n    return string(sum)\n\
    end\n</cell>\n<code language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\n\
    solve(150)\n</cell>\n<code language=julia-1.5>\nsolve(147)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1400)\n</cell>\n<code language=julia-1.5>\n\
    solve(1450)\n</cell>\n<code language=julia-1.5>\nsolve(1460)\n</cell>\n<code language=julia-1.5>\n\
    solve(1480)\n</cell>\n<code language=julia-1.5>\nsolve(1480)\n</cell>\n<code language=julia-1.5>\n\
    solve(1480)\n</cell>\n<code language=julia-1.5>\nsolve(1480)\n</cell>\n<code language=julia-1.5>\n\
    solve(1480)\n</cell>\n<code language=julia-1.5>\nsolve(1480)\n</cell>\n<code language=julia-1.5>\n\
    solve(1480)\n</cell>\n<code language=julia-1.5>\nsolve(1480)\n</cell>\n<code language=julia-1.5>\n\
    solve(1480)\n</cell>\n<code language=julia-1.5>\nsolve(1480)\n</cell>\n<code language=julia-1.5>\n\
    solve(1480)\n</cell>\n<code language=julia-1.5>\nsolve(1480)\n</cell>\n<code language=julia-1.5>\n\
    solve(1480)\n</cell>\n<code language=julia-1.5>\nsolve(1480)\n</cell>\n<code language=julia-1.5>\n\
    solve(1480)\n</cell>\n<code language=julia-1.5>\nsolve(1480)\n</cell>\n<code language=julia-1.5>\n\
    solve(1480)\n</cell>\n<code language=julia-1.5>\nsolve(1480)\n</cell>\n<code language=julia-1.5>\n\
    solve(1480)\n</cell>\n<code language=julia-1.5>\nsolve(1480)\n</cell>\n<code language=julia-1.5>\n\
    solve(1480)\n</cell>\n<code language=julia-1.5>\nsolve(1480)\n</cell>\n<code language=julia-1.5>\n\
    solve(1480)\n</cell>\n<code language=julia-1.5>\nsolve(1480)\n</cell>\n<code language=julia-1.5>\n\
    solve(1480)\n</\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000)\
    \ == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"\
    1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjo6w0gn9.jl:33\nin expression starting at\
    \ /tmp/tmpjo6w0gn9.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N <\
    \ 0\n        return \"0\"\n    \n    if N < 10\n        return string(\"0\", N)\n\
    \    \n    digits = string(\"0\", N)\n    \n    for i in 1:N\n        digits =\
    \ digits[2:end-1] + digits[1:end-2] + digits[2:end]\n    end\n    \n    return\
    \ digits\nend\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000)\
    \ == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"\
    1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7pto6bou.jl:1\nin expression starting at /tmp/tmp7pto6bou.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N <\
    \ 0\n        error(\"N must be positive\")\n    end\n    \n    if N == 0\n   \
    \     return \"0\"\n    end\n    \n    digits = zeros(Int, N)\n    \n    for d\
    \ in digits[digits[1:end-1]]\n        digits[d] = digits[d] + 1\n    end\n   \
    \ \n    digits[digits[end-1]] += 1\n    \n    return join(digits, \"\")\nend\n\
    </cell>\n<code language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\n\
    solve(150)\n</cell>\n<code language=julia-1.5>\nsolve(147)\n</cell>\n<text>\n\
    Problem 3\nWrite a Julia function called sumdigits(N) that returns the sum of\
    \ its digits in binary.\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t\
    @test(candidate(1000) == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147)\
    \ == \"1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) ==\
    \ \"10010\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp988g8cmq.jl:33\nin expression starting at\
    \ /tmp/tmp988g8cmq.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N <\
    \ 0\n        return \"0\"\n    \n    digits = zeros(Int, N+1)\n    digits[1] =\
    \ 1\n    \n    for i in 2..N\n        digits[i] = digits[i-1] + digits[i-2]\n\
    \    end\n    \n    return join(digits, \"\")\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert solve(1) == \"1\"\n@assert solve(2) == \"10\"\n@assert solve(3) == \"\
    111\"\n@assert solve(4) == \"1001\"\n@assert solve(5) == \"10010\"\n@assert solve(6)\
    \ == \"100110\"\n@assert solve(7) == \"1001110\"\n@assert solve(8) == \"10011110\"\
    \n@assert solve(9) == \"10011111\"\n@assert solve(10) == \"100111111\"\n@assert\
    \ solve(11) == \"1001111111\"\n@assert solve(12) == \"10011111110\"\n@assert solve(13)\
    \ == \"100111111110\"\n@assert solve(14) == \"1001111111101\"\n@assert solve(15)\
    \ == \"10011111111010\"\n@assert solve(16) == \"100111111110110\"\n@assert solve(17)\
    \ == \"1001111111101011\"\n@assert solve(18) == \"10011111111010110\"\n@assert\
    \ solve(19) == \"100111111110101011\"\n@assert solve(20) == \"1001111111101010100\"\
    \n@assert solve(21) == \"10011111111010101010\"\n@assert solve(22) == \"100111111110101010111\"\
    \n@assert solve(23) == \"1001111111101010101111\"\n@assert solve(24) == \"100111111110101010111111\"\
    \n@assert solve(25) == \"1001111111101010101111111\"\n@assert solve(26) == \"\
    10011111111010101011111111\"\n@assert solve(27) == \"100111111110101010111111111\"\
    \n@assert solve(28) == \"1001111111101010101111111110\"\n@assert solve(29) ==\
    \ \"10011111111010101011111111110\"\n@assert solve(30) == \"100111111110101010111111111101\"\
    \n@assert solve(31) == \"1001111111101010101111111111010\"\n@assert solve(32)\
    \ == \"10011111111010101011111111110110\"\n@assert solve(33) == \"100111111110101010111111111101011\"\
    \n@assert solve(34) == \"1001111111101010101111111111010110\"\n@assert solve(35)\
    \ == \"10011111111010101011111111110101011\"\n@assert solve(36) == \"100111111110\n\
    using Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000) ==\
    \ \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"1100\"\
    )\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgy6iaj8t.jl:27\nin expression starting at\
    \ /tmp/tmpgy6iaj8t.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    \n    if\
    \ N < 0\n        return \"-1\"\n    \n    if N == 0\n        return \"0\"\n  \
    \  \n    if N == 1\n        return \"1\"\n    \n    sum = 0\n    \n    while N\
    \ > 0\n        sum = sum + N % 2\n        N = N / 2\n    \n    return String(sum)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000)\
    \ == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"\
    1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfxhdyfot.jl:1\nin expression starting at /tmp/tmpfxhdyfot.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N <\
    \ 0\n        return \"0\"\n    \n    digits = zeros(Int, N+1)\n    digits[1] =\
    \ 1\n    \n    for i in 2:N\n        digits[i] = digits[i-1] * 2\n    \n    sum\
    \ = 0\n    for i in digits[N]..digits[1]\n        sum += i\n    \n    return String(sum)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000)\
    \ == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"\
    1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmp69xe9nfx.jl:21\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp69xe9nfx.jl:1\n\
    in expression starting at /tmp/tmp69xe9nfx.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N <\
    \ 0\n        return \"0\"\n    \n    digits = N % 10\n    N = N / 10\n    \n \
    \   sum = \"\"\n    while N > 0\n        sum = sum + digits_to_binary(digits)\n\
    \        digits = digits % 10\n        N = N / 10\n    end\n    \n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\nsolve(N = 1000)\n</cell>\n<code language=julia-1.5>\n\
    solve(N = 150)\n</cell>\n<code language=julia-1.5>\nsolve(N = 147)\n</cell>\n\
    <text>\nProblem 7\nGiven a positive integer N, return the sum of its digits in\
    \ base 10. Do not convert the integer to a string and summing its digits directly.\
    \ For example, given N = 123, return 10.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150) == \"110\"\
    )\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) == \"1001\")\n\t\
    @test(candidate(963) == \"10010\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn7c8uv_f.jl:30\nin expression starting at\
    \ /tmp/tmpn7c8uv_f.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N ==\
    \ 0 \n        return \"0\"\n    \n    sum = 0\n    \n    for i in N:\n       \
    \ sum += i\n    \n    return bin(sum)[2:]\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert solve(0) == \"0\"\n@assert solve(1) == \"1\"\n@assert solve(2) == \"10\"\
    \n@assert solve(3) == \"11\"\n@assert solve(4) == \"100\"\n@assert solve(5) ==\
    \ \"101\"\n@assert solve(6) == \"110\"\n@assert solve(7) == \"111\"\n@assert solve(8)\
    \ == \"1000\"\n@assert solve(9) == \"1001\"\n@assert solve(10) == \"1010\"\n@assert\
    \ solve(11) == \"1011\"\n@assert solve(12) == \"1100\"\n@assert solve(13) == \"\
    1101\"\n@assert solve(14) == \"1110\"\n@assert solve(15) == \"1111\"\n@assert\
    \ solve(16) == \"10000\"\n@assert solve(17) == \"10001\"\n@assert solve(18) ==\
    \ \"10010\"\n@assert solve(19) == \"10011\"\n@assert solve(20) == \"10100\"\n\
    @assert solve(21) == \"10501\"\n@assert solve(22) == \"10110\"\n@assert solve(23)\
    \ == \"10111\"\n@assert solve(24) == \"11100\"\n@assert solve(25) == \"11101\"\
    \n@assert solve(26) == \"11110\"\n@assert solve(27) == \"11111\"\n@assert solve(28)\
    \ == \"100001\"\n@assert solve(29) == \"100010\"\n@assert solve(30) == \"100011\"\
    \n@assert solve(31) == \"100100\"\n@assert solve(32) == \"100101\"\n@assert solve(33)\
    \ == \"100110\"\n@assert solve(34) == \"100111\"\n@assert solve(35) == \"101000\"\
    \n@assert solve(36) == \"101001\"\n@assert solve(37) == \"101010\"\n@assert solve(38)\
    \ == \"101011\"\n@assert solve(39) == \"101100\"\n@assert solve(40) == \"101101\"\
    \n@assert solve(41) == \"101110\"\n@assert solve(42) == \"101111\"\n@assert solve(43)\
    \ == \"111000\"\n@assert solve(44) == \"111001\"\n@assert solve(45) == \"111010\"\
    \n@assert solve(46) == \"111011\"\n@assert solve(47) == \"111100\"\n@assert solve(48)\
    \ == \"1111011\"\n@assert solve(49) == \"111110\"\n@assert solve(50) == \"111111\"\
    \n@assert solve(51) == \"1000001\"\n@assert solve(52) == \"1000010\"\n@assert\
    \ solve(53) == \"1000011\"\n@assert solve(\nusing Test\n\n@testset begin\n\ncandidate\
    \ = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150) == \"110\"\
    )\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) == \"1001\")\n\t\
    @test(candidate(963) == \"10010\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_54rt4v9.jl:21\nin expression starting at\
    \ /tmp/tmp_54rt4v9.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N <\
    \ 0\n        return \"0\"\n    \n    digits = N % 10\n    N = N / 10\n    \n \
    \   if N > 0\n        return solve(N) + digits\n    \n    return digits\nend\n\
    </cell>\n<code language=julia-1.5>\nsolve(2)\n</cell>\n<code language=julia-1.5>\n\
    solve(100)\n</cell>\n<code language=julia-1.5>\nsolve(147)\n</cell>\n<code language=julia-1.5>\n\
    solve(150)\n</cell>\n<code language=julia-1.5>\nsolve(151)\n</cell>\n<code language=julia-1.5>\n\
    solve(152)\n</cell>\n<code language=julia-1.5>\nsolve(153)\n</cell>\n<code language=julia-1.5>\n\
    solve(154)\n</cell>\n<code language=julia-1.5>\nsolve(155)\n</cell>\n<code language=julia-1.5>\n\
    solve(156)\n</cell>\n<code language=julia-1.5>\nsolve(157)\n</cell>\n<code language=julia-1.5>\n\
    solve(158)\n</cell>\n<code language=julia-1.5>\nsolve(159)\n</cell>\n<code language=julia-1.5>\n\
    solve(160)\n</cell>\n<code language=julia-1.5>\nsolve(161)\n</cell>\n<code language=julia-1.5>\n\
    solve(162)\n</cell>\n<code language=julia-1.5>\nsolve(163)\n</cell>\n<code language=julia-1.5>\n\
    solve(164)\n</cell>\n<code language=julia-1.5>\nsolve(165)\n</cell>\n<code language=julia-1.5>\n\
    solve(166)\n</cell>\n<code language=julia-1.5>\nsolve(167)\n</cell>\n<code language=julia-1.5>\n\
    solve(168)\n</cell>\n<code language=julia-1.5>\nsolve(169)\n</cell>\n<code language=julia-1.5>\n\
    solve(170)\n</cell>\n<code language=julia-1.5>\nsolve(171)\n</cell>\n<code language=julia-1.5>\n\
    solve(172)\n</cell>\n<code language=julia-1.5>\nsolve(173)\n</cell>\n<code language=julia-1.5>\n\
    solve(174)\n</cell>\n<code language=julia-1.5>\nsolve(175)\n</cell>\n<code language=julia-1.5>\n\
    solve(176)\n</cell>\n<code language=julia-1.5>\nsolve(177)\n</cell>\n<code language=julia-1.5>\n\
    solve(178)\n</cell>\n<code language=julia-1.5>\nsolve(179)\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000) ==\
    \ \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"1100\"\
    )\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcz1udiy8.jl:26\nin expression starting at\
    \ /tmp/tmpcz1udiy8.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N <\
    \ 0\n        return \"0\"\n    \n    digits = N % 10\n    N = N / 10\n    \n \
    \   if N == 0\n        return \"0\"\n    \n    digits = digits + solve(N)\n  \
    \  \n    return digits\nend\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\
    \t@test(candidate(1000) == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147)\
    \ == \"1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) ==\
    \ \"10010\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprz_jcl96.jl:1\nin expression starting at /tmp/tmprz_jcl96.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N <\
    \ 0\n        return \"0\"\n    \n    sum = 0\n    \n    for i in 0..N\n      \
    \  sum += digits(i)\n    \n    return string(sum)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150)\
    \ == \"110\")\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) ==\
    \ \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprn59ruur.jl:1\nin expression starting at /tmp/tmprn59ruur.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    \n    digits\
    \ = N % 10\n    N = N / 10\n    \n    if N < 10\n        return digits::String\n\
    \    \n    digits = solve(N)\n    \n    return digits::String + digits\nend\n\
    using Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000) ==\
    \ \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"1100\"\
    )\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpsq2cyps_.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsq2cyps_.jl:1\n\
    in expression starting at /tmp/tmpsq2cyps_.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    \n    if\
    \ N < 0\n        return \"0\"\n    \n    sum = 0\n    \n    while N > 0\n    \
    \    sum = sum + N % 10\n        N = N / 10\n    \n    return sum.to_s\nend\n\
    </cell>\n<code language=julia-1.5>\nsolve(1)\n</cell>\n<code language=julia-1.5>\n\
    solve(100)\n</cell>\n<code language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\n\
    solve(147)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=juli\n\
    using Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000) ==\
    \ \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"1100\"\
    )\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppy9duy6y.jl:27\nin expression starting at\
    \ /tmp/tmppy9duy6y.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    \n    if\
    \ N < 0\n        return \"0\"\n    \n    if N == 0\n        return \"0\"\n   \
    \ \n    if N == 1\n        return \"1\"\n    \n    digits = N % 10\n    \n   \
    \ if digits == 0\n        return solve(N / 10)\n    \n    return solve(N / 10)\
    \ + digits::String\nend\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t\
    @test(candidate(1000) == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147)\
    \ == \"1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) ==\
    \ \"10010\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzx0jrt6r.jl:1\nin expression starting at /tmp/tmpzx0jrt6r.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N <\
    \ 0\n        return \"-1\"\n    \n    digits = N % 10\n    N = N / 10\n    \n\
    \    sum = \"\"\n    \n    while N > 0\n        sum = sum + digits_to_binary(digits)\n\
    \        digits = digits % 10\n        N = N / 10\n    \n    return sum\nend\n\
    using Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000) ==\
    \ \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"1100\"\
    )\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5o6pi08h.jl:1\nin expression starting at /tmp/tmp5o6pi08h.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N <\
    \ 0\n        return \"0\"\n    \n    digits = String[]\n    \n    digits = digits[0..(N-1)]\n\
    \    \n    sum = 0\n    for i in digits\n        sum += i\n    \n    sumStr =\
    \ String(sum)\n    \n    return sumStr\nend\n</cell>\n<code language=julia-1.5>\n\
    solve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\n\
    solve(147)\n</cell>\n<text>\nProblem 7: Find all prime factors of a given number\n\
    using Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000) ==\
    \ \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"1100\"\
    )\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp26vfycfz.jl:30\nin expression starting at\
    \ /tmp/tmp26vfycfz.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N ==\
    \ 0 \n        return \"0\"\n    \n    sum = 0\n    \n    for i in N:\n       \
    \ sum += i\n    \n    return sum.to_s(2)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150)\
    \ == \"110\")\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) ==\
    \ \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2mt72m_j.jl:21\nin expression starting at\
    \ /tmp/tmp2mt72m_j.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N <\
    \ 0\n        return \"-1\"\n    \n    if N == 0\n        return \"0\"\n    \n\
    \    if N < 10\n        return String(N)\n    \n    sum = 0\n    \n    for i in\
    \ N\n        sum += i\n    \n    return String(sum)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert solve(1) == \"1\"\n@assert solve(2) == \"10\"\n@assert solve(3) == \"\
    11\"\n@assert solve(4) == \"100\"\n@assert solve(5) == \"101\"\n@assert solve(6)\
    \ == \"110\"\n@assert solve(7) == \"111\"\n@assert solve(8) == \"1000\"\n@assert\
    \ solve(9) == \"1001\"\n@assert solve(10) == \"1010\"\n@assert solve(11) == \"\
    1011\"\n@assert solve(12) == \"1100\"\n@assert solve(13) == \"1101\"\n@assert\
    \ solve(14) == \"1110\"\n@assert solve(15) == \"1111\"\n@assert solve(16) == \"\
    10000\"\n@assert solve(17) == \"10001\"\n@assert solve(18) == \"10010\"\n@assert\
    \ solve(19) == \"10011\"\n@assert solve(20) == \"10100\"\n@assert solve(21) ==\
    \ \"10501\"\n@assert solve(22) == \"10110\"\n@assert solve(23) == \"10111\"\n\
    @assert solve(24) == \"11100\"\n@assert solve(25) == \"11101\"\n@assert solve(26)\
    \ == \"11110\"\n@assert solve(27) == \"11111\"\n@assert solve(28) == \"100001\"\
    \n@assert solve(29) == \"100010\"\n@assert solve(30) == \"100011\"\n@assert solve(31)\
    \ == \"100100\"\n@assert solve(32) == \"100101\"\n@assert solve(33) == \"100110\"\
    \n@assert solve(34) == \"100111\"\n@assert solve(35) == \"101000\"\n@assert solve(36)\
    \ == \"101001\"\n@assert solve(37) == \"101010\"\n@assert solve(38) == \"101011\"\
    \n@assert solve(39) == \"101100\"\n@assert solve(40) == \"101101\"\n@assert solve(41)\
    \ == \"101110\"\n@assert solve(42) == \"101111\"\n@assert solve(43) == \"111000\"\
    \n@assert solve(44) == \"111001\"\n@assert solve(45) == \"111010\"\n@assert solve(46)\
    \ == \"111011\"\n@assert solve(47) == \"111100\"\n@assert solve(48) == \"111101\"\
    \n@assert solve(49) == \"111110\"\n@assert solve(50) == \"111111\"\n@assert solve(51)\
    \ == \"1000000\"\n@assert solve(52) == \"1000001\"\n@assert solve(53\nusing Test\n\
    \n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000) == \"1\")\n\t\
    @test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333)\
    \ == \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4lty7ut_.jl:31\nin expression starting at\
    \ /tmp/tmp4lty7ut_.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    \n    if\
    \ N < 0\n        return \"0\"\n    \n    digits = zeros(Int, N)\n    \n    for\
    \ i = 1:N\n        digits[i] = digits[i-1] + N % 10\n        N = N / 10\n    end\n\
    \    \n    return join(digits, \"\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150) == \"110\"\
    )\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) == \"1001\")\n\t\
    @test(candidate(963) == \"10010\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpc4sa3ua6.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpc4sa3ua6.jl:1\n\
    in expression starting at /tmp/tmpc4sa3ua6.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N <\
    \ 0\n        return \"0\"\n    if N < 10\n        return string(\"1\",N)\n   \
    \ \n    digits = string(\"0\",N)\n    \n    digits = digits[2:end]\n    \n   \
    \ digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits =\
    \ digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n\
    \    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n  \
    \  digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits\
    \ = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n\
    \    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n  \
    \  digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits\
    \ = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n\
    \    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n  \
    \  digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits\
    \ = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n\
    \    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n  \
    \  digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits\
    \ = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n\
    \    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n  \
    \  digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits\
    \ = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n\
    \    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n  \
    \  digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits\
    \ = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n\
    \    \n    \nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000)\
    \ == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"\
    1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpklr33xo6.jl:1\nin expression starting at /tmp/tmpklr33xo6.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N <\
    \ 0\n        return \"-1\"\n    \n    digits = digits(N)\n    \n    if length(digits)\
    \ == 0\n        return \"0\"\n    \n    sum = 0\n    for i in digits\n       \
    \ sum += i\n    \n    return bin(sum)[2:]\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert solve(1) == \"1\"\n@assert solve(2) == \"10\"\n@assert solve(3) == \"\
    11\"\n@assert solve(4) == \"100\"\n@assert solve(5) == \"101\"\n@assert solve(6)\
    \ == \"110\"\n@assert solve(7) == \"111\"\n@assert solve(8) == \"1000\"\n@assert\
    \ solve(9) == \"1001\"\n@assert solve(10) == \"1010\"\n@assert solve(11) == \"\
    1011\"\n@assert solve(12) == \"1100\"\n@assert solve(13) == \"1101\"\n@assert\
    \ solve(14) == \"1110\"\n@assert solve(15) == \"1111\"\n@assert solve(16) == \"\
    10000\"\n@assert solve(17) == \"10001\"\n@assert solve(18) == \"10010\"\n@assert\
    \ solve(19) == \"10011\"\n@assert solve(20) == \"10100\"\n@assert solve(21) ==\
    \ \"10101\"\n@assert solve(22) == \"10110\"\n@assert solve(23) == \"10111\"\n\
    @assert solve(24) == \"11100\"\n@assert solve(25) == \"11101\"\n@assert solve(26)\
    \ == \"11110\"\n@assert solve(27) == \"11111\"\n@assert solve(28) == \"100000\"\
    \n@assert solve(29) == \"100001\"\n@assert solve(30) == \"100010\"\n@assert solve(31)\
    \ == \"100011\"\n@assert solve(32) == \"100100\"\n@assert solve(33) == \"100101\"\
    \n@assert solve(34) == \"100110\"\n@assert solve(35) == \"100111\"\n@assert solve(36)\
    \ == \"101000\"\n@assert solve(37) == \"101001\"\n@assert solve(38) == \"101010\"\
    \n@assert solve(39) == \"101011\"\n@assert solve(40) == \"101100\"\n@assert solve(41)\
    \ == \"101101\"\n@assert solve(42) == \"101110\"\n@assert solve(43) == \"101111\"\
    \n@assert solve(44) == \"111000\"\n@assert solve(45) == \"111001\"\n@assert solve(46)\
    \ == \"111010\"\n@assert solve(47) == \"111011\"\n@assert solve(48) == \"111100\"\
    \n@assert solve(49) == \"111101\"\n@assert solve(50) == \"111110\"\n@assert solve(51)\
    \ == \"111111\"\n@assert solve(52) == \"10000000\"\n@assert solve(\nusing Test\n\
    \n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000) == \"1\")\n\t\
    @test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333)\
    \ == \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpf8ppny8w.jl:27\nin expression\
    \ starting at /tmp/tmpf8ppny8w.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N <\
    \ 0\n        return \"0\"\n    \n    digits = N % 10\n    N = N / 10\n    \n \
    \   if N == 0\n        return \"0\"\n    \n    digits = digits + solve(N)\n  \
    \  \n    return digits\nend\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\
    \t@test(candidate(1000) == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147)\
    \ == \"1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) ==\
    \ \"10010\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjykjhuna.jl:1\nin expression starting at /tmp/tmpjykjhuna.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N ==\
    \ 0 \n        return \"0\"\n    if N < 0 \n        return \"0\"\n    \n    sum\
    \ = 0\n    \n    while N > 0 \n        sum += N % 2\n        N /= 2\n    \n  \
    \  return String(sum)\nend\n</cell>\n<code language=julia-1.5>\nsolve(1000)\n\
    </cell>\n<code language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\n\
    solve(147)\n</cell>\n<text>\nProblem 4\nWrite a Julia function named count_digits\
    \ that takes an integer N and returns the number of digits in N in binary.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000) == \"\
    1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"1100\")\n\
    \t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1vfynyq9.jl:28\nin expression starting at\
    \ /tmp/tmp1vfynyq9.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N <\
    \ 0\n        return \"Invalid input\"\n    if N == 0\n        return \"0\"\n \
    \   if N == 1\n        return \"1\"\n    \n    digits = zeros(Int, 10)\n    digits[1]\
    \ = 1\n    \n    digits[2] = 1\n    \n    digits[3] = 1\n    \n    digits[4] =\
    \ 1\n    \n    digits[5] = 1\n    \n    digits[6] = 1\n    \n    digits[7] = 1\n\
    \    \n    digits[8] = 1\n    \n    digits[9] = 1\n    \n    digits = digits[N]\n\
    \    \n    sum = 0\n    \n    for i in digits\n        sum += i\n    \n    return\
    \ show(sum)\nend\n</cell>\n<code language=julia-1.5>\nsolve(1000)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\nsolve(147)\n\
    </cell>\n<text>\nProblem 7\nGiven a positive integer N, return the number of trailing\
    \ zeroes in N's binary representation.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150) == \"110\"\
    )\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) == \"1001\")\n\t\
    @test(candidate(963) == \"10010\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpirt_l2e1.jl:50\nin expression starting at\
    \ /tmp/tmpirt_l2e1.jl:50\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N <\
    \ 0\n        return \"0\"\n    \n    sum = 0\n    \n    for i in N:\n        sum\
    \ += i\n    \n    binary = \"\"\n    \n    while sum > 0:\n        binary = binary\
    \ + str(sum % 2)\n        sum = int(sum / 2)\n    \n    return binary\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000) == \"\
    1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"1100\")\n\
    \t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt621hty7.jl:21\nin expression starting at\
    \ /tmp/tmpt621hty7.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N <\
    \ 0 \n        return \"-1\"\n    if N == 0 \n        return \"0\"\n    if N ==\
    \ 1 \n        return \"1\"\n    \n    digits = N % 10\n    N = N / 10\n    \n\
    \    sum = \"\"\n    while N > 0 \n        sum = sum + digits_to_binary(digits)\n\
    \        digits = digits * 2\n        N = N / 2\n    \n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nsolve(1)\n</cell>\n<code language=julia-1.5>\nsolve(10)\n\
    </cell>\n<code language=julia-1.5>\nsolve(100)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\n\
    solve(147)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</\nusing Test\n\
    \n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000) == \"1\")\n\t\
    @test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333)\
    \ == \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_xztl3nw.jl:33\nin expression starting at\
    \ /tmp/tmp_xztl3nw.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N <\
    \ 0\n        return \"0\"\n    \n    sum = 0\n    \n    for i in N:\n        sum\
    \ += i\n    \n    return sum.to_s(2)\nend\n</cell>\n<code language=julia-1.5>\n\
    solve(2)\n</cell>\n<code language=julia-1.5>\nsolve(10)\n</cell>\n<code language=julia-1.5>\n\
    solve(100)\n</cell>\n<code language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\n\
    solve(150)\n</cell>\n<code language=julia-1.5>\nsolve(147)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=julia-1.5>\nsolve(151)\n</cell>\n<code language=julia-1.5>\n\
    solve(152)\n</cell>\n<code language=julia-1.5>\nsolve(153)\n</cell>\n<code language=julia-1.5>\n\
    solve(154)\n</cell>\n<code language=julia-1.5>\nsolve(155)\n</cell>\n<code language=julia-1.5>\n\
    solve(156)\n</cell>\n<code language=julia-1.5>\nsolve(157)\n</cell>\n<code language=julia-1.5>\n\
    solve(158)\n</cell>\n<code language=julia-1.5>\nsolve(159)\n</cell>\n<code language=julia-1.5>\n\
    solve(160)\n</cell>\n<code language=julia-1.5>\nsolve(161)\n</cell>\n<code language=julia-1.5>\n\
    solve(162)\n</cell>\n<code language=julia-1.5>\nsolve(163)\n</cell>\n<code language=julia-1.5>\n\
    solve(164)\n</cell>\n<code language=julia-1.5>\nsolve(165)\n</cell>\n<code language=julia-1.5>\n\
    solve(166)\n</cell>\n<code language=julia-1.5>\nsolve(167)\n</cell>\n<code language=julia-1.5>\n\
    solve(168)\n</cell>\n<code language=julia-1.5>\nsolve(169)\n</cell>\n<code language=julia-1.5>\n\
    solve(170)\n</cell>\n<code language=julia-1.5>\nsolve(171)\n</cell>\n<code language=julia-1.5>\n\
    solve(172)\n</cell>\n<code language=julia-1.5>\nsolve(173)\n</cell>\n<code language=julia-1.5>\n\
    solve(174)\n</cell>\n<code language=julia-1.5>\nsolve(175)\n</cell>\n<code language=julia-1.5>\n\
    solve(176)\n</cell>\n<code language=julia-1.5>\nsolve(177)\n</cell>\n<code language=juli\n\
    using Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000) ==\
    \ \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"1100\"\
    )\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph00wpihl.jl:21\nin expression starting at\
    \ /tmp/tmph00wpihl.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N <\
    \ 0\n        return \"-1\"\n    if N == 0\n        return \"0\"\n    if N == 1\n\
    \        return \"1\"\n    \n    digits = zeros(Int, N)\n    digits[1] = 1\n \
    \   digits[2] = 1\n    digits[3] = 1\n    digits[4] = 1\n    digits[5] = 1\n \
    \   digits[6] = 1\n    digits[7] = 1\n    digits[8] = 1\n    digits[9] = 1\n \
    \   \n    sum = 0\n    for i in digits\n        sum += i\n    \n    return show(sum)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000)\
    \ == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"\
    1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp89aeh_pn.jl:1\nin expression starting at /tmp/tmp89aeh_pn.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    \n    if\
    \ N < 0 \n        return \"-1\"\n    \n    if N == 0 \n        return \"0\"\n\
    \    \n    if N == 1 \n        return \"1\"\n    \n    digits = N % 10\n    \n\
    \    binary = \"\"\n    \n    while N > 0 \n        \n        binary = digits_to_binary(digits,\
    \ binary)\n        \n        N = N / 10\n        \n        digits = N % 10\n \
    \   \n    return binary\nend\n</cell>\n<code language=julia-1.5>\n@assert solve(1)\
    \ == \"1\"\n@assert solve(2) == \"10\"\n@assert solve(3) == \"11\"\n@assert solve(4)\
    \ == \"100\"\n@assert solve(5) == \"101\"\n@assert solve(6) == \"110\"\n@assert\
    \ solve(7) == \"111\"\n@assert solve(8) == \"1000\"\n@assert solve(9) == \"1001\"\
    \n@assert solve(10) == \"1010\"\n@assert solve(11) == \"1011\"\n@assert solve(12)\
    \ == \"1100\"\n@assert solve(13) == \"1101\"\n@assert solve(14) == \"1110\"\n\
    @assert solve(15) == \"1111\"\n@assert solve(16) == \"10000\"\n@assert solve(17)\
    \ == \"10001\"\n@assert solve(18) == \"10010\"\n@assert solve(19) == \"10011\"\
    \n@assert solve(20) == \"10100\"\n@assert solve(21) == \"10101\"\n@assert solve(22)\
    \ == \"10110\"\n@assert solve(23) == \"10111\"\n@assert solve(24) == \"11100\"\
    \n@assert solve(25) == \"11101\"\n@assert solve(26) == \"11110\"\n@assert solve(27)\
    \ == \"11111\"\n@assert solve(28) == \"100001\"\n@assert solve(29) == \"100002\"\
    \n@assert solve(30) == \"100003\"\n@assert solve(31) == \"100004\"\n@assert solve(32)\
    \ == \"100005\"\n@assert solve(33) == \"100006\"\n@assert solve(34) == \"100007\"\
    \n@assert solve(35) == \"100008\"\n@assert solve(36) == \"100009\"\n@assert solve(37)\
    \ == \"100010\"\n@assert solve(38) == \"100011\"\n@assert solve(39) == \"100012\"\
    \n@assert solve(40) == \"100013\"\n@assert solve(41) == \"100014\"\n@assert solve(42)\
    \ == \"100015\"\n@assert solve(43) == \"100016\"\n@assert solve(44) == \"100017\"\
    \n@assert solve(45) == \"100018\"\n@assert solve(46) == \"100019\"\n@assert solve(47)\
    \ == \"100020\"\n@assert solve(48) == \"100021\"\n@assert solve(\nusing Test\n\
    \n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000) == \"1\")\n\t\
    @test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333)\
    \ == \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0wtsvtry.jl:39\nin expression starting at\
    \ /tmp/tmp0wtsvtry.jl:39\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N <\
    \ 0\n        return \"0\"\n    \n    digits = N % 10\n    \n    if N < 10\n  \
    \      return digits::String\n    \n    digits = solve(N / 10)\n    \n    return\
    \ digits + digits\nend\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t\
    @test(candidate(1000) == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147)\
    \ == \"1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) ==\
    \ \"10010\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc4a2g58w.jl:1\nin expression starting at /tmp/tmpc4a2g58w.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N <\
    \ 0\n        return \"0\"\n    if N < 10\n        return string(\"1\",N)\n   \
    \ if N < 100\n        return string(\"10\",N)\n    if N < 1000\n        return\
    \ string(\"11\",N)\n    if N < 10000\n        return string(\"100\",N)\n    if\
    \ N < 100000\n        return string(\"1000\",N)\n    if N < 1000000\n        return\
    \ string(\"10000\",N)\n    if N < 10000000\n        return string(\"100000\",N)\n\
    \    if N < 100000000\n        return string(\"1000000\",N)\n    if N < 1000000000\n\
    \        return string(\"10000000\",N)\n    if N < 10000000000\n        return\
    \ string(\"100000000\",N)\n    if N < 100000000000\n        return string(\"1000000000\"\
    ,N)\n    if N < 1000000000000\n        return string(\"10000000000\",N)\n    if\
    \ N < 10000000000000\n        return string(\"100000000000\",N)\n    if N < 100000000000000\n\
    \        return string(\"1000000000000\",N)\n    if N < 1000000000000000\n   \
    \     return string(\"10000000000000\",N)\n    if N < 10000000000000000\n    \
    \    return string(\"100000000000000\",N)\n    if N < 100000000000000000\n   \
    \     return string(\"1000000000000000\",N)\n    if N < 1000000000000000000\n\
    \        return string(\"10000000000000000\",N)\n    if N < 10000000000000000000\n\
    \        return string(\"100000000000000000\",N)\n    if N < 100000000000000000000\n\
    \        return string(\"1000000000000000000\",N)\n    if N < 1000000000000000000000\n\
    \        return string(\"10000000000000000000\",N)\n    if N < 10000000000000000000000\n\
    \        return string(\"100000000000000000000\",N)\n    if N < 100000000000000000000000\n\
    \        return string(\"1000000000000000000000\",N)\n    if N < 1000000000000000000000000\n\
    \        return string(\"10000000000000000000000\",N)\n    if N < 10000000000000000000000000\n\
    \        return string(\"100000000000000000000000\",N)\n    if N < 100000000000000000000000000\n\
    \        return string(\"1000000000000000000000000\",N)\n    if N < 1000000000000000000000000000\n\
    \        return string(\"10000000000000000000000000\",N)\n    if N < 10000000000000000000000000000\n\
    \        return string(\"100000000000000000000000000\",N)\n    if N < 100000000000000000000000000000\n\
    \        return string(\"1000000000000000000000000000\",N)\n    if N < 1000000000000000000000000000000\n\
    \        return string(\"10000000000000000000000000000\",N)\n    if N < 10000000000000000000000000000000\n\
    \        return string(\"100000000000000000000000000000\",N)\n    if N < 100000000000000000000000000000000\n\
    \        return string(\"1000000000000000000000000000000\",N)\n    if N < 1000000000000000000000000000000000\n\
    \        return string(\"10000000000000000000000000000000\",N)\n    if N < 1000000000000000000000000000000000\n\
    \        return string\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t\
    @test(candidate(1000) == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147)\
    \ == \"1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) ==\
    \ \"10010\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgfotc5le.jl:1\nin expression starting at /tmp/tmpgfotc5le.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N <\
    \ 0\n        return \"-1\"\n    \n    sum = 0\n    \n    for i in N:\n       \
    \ sum += i\n    \n    return bin(sum)[2:]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150)\
    \ == \"110\")\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) ==\
    \ \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpytm_vxm0.jl:21\nin expression starting at\
    \ /tmp/tmpytm_vxm0.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N <\
    \ 0\n        throw(DomainError(string(\"N must be positive\")))\n    \n    if\
    \ N == 0\n        return \"0\"\n    \n    digits = zeros(Int, N)\n    \n    for\
    \ i = 1:N\n        digits[i] = N % 2\n        N = N / 2\n    end\n    \n    sum\
    \ = 0\n    for i = 1:N\n        sum = sum + digits[i]\n    end\n    \n    return\
    \ string(digits, sum)\nend\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\
    \t@test(candidate(1000) == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147)\
    \ == \"1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) ==\
    \ \"10010\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsy3nib47.jl:1\nin expression starting at /tmp/tmpsy3nib47.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N <\
    \ 0\n        return \"0\"\n    \n    digits = N % 10\n    N = N / 10\n    \n \
    \   if N < 0\n        return \"0\"\n    \n    digits = digits + N % 10\n    N\
    \ = N / 10\n    \n    if N < 0\n        return \"0\"\n    \n    digits = digits\
    \ + N % 10\n    N = N / 10\n    \n    if N < 0\n        return \"0\"\n    \n \
    \   digits = digits + N % 10\n    N = N / 10\n    \n    if N < 0\n        return\
    \ \"0\"\n    \n    digits = digits + N % 10\n    N = N / 10\n    \n    if N <\
    \ 0\n        return \"0\"\n    \n    digits = digits + N % 10\n    N = N / 10\n\
    \    \n    if N < 0\n        return \"0\"\n    \n    digits = digits + N % 10\n\
    \    N = N / 10\n    \n    if N < 0\n        return \"0\"\n    \n    digits =\
    \ digits + N % 10\n    N = N / 10\n    \n    if N < 0\n        return \"0\"\n\
    \    \n    digits = digits + N % 10\n    N = N / 10\n    \n    if N < 0\n    \
    \    return \"0\"\n    \n    digits = digits + N % 10\n    N = N / 10\n    \n\
    \    if N < 0\n        return \"0\"\n    \n    digits = digits + N % 10\n    N\
    \ = N / 10\n    \n    if N < 0\n        return \"0\"\n    \n    digits = digits\
    \ + N % 10\n    N = N / 10\n    \n    if N < 0\n        return \"0\"\n    \n \
    \   digits = digits + N % 10\n    N = N / 10\n    \n    if N < 0\n        return\
    \ \"0\"\n    \n    digits = digits + N % 10\n    N = N / 10\n    \n    if N <\
    \ 0\n        return \"0\"\n    \n    digits = digits + N % 10\n    N = N / 10\n\
    \    \n    if N < 0\n        return \"0\"\n    \n    digits = digits + N % 10\n\
    \    N = N / 10\n    \n    if N < 0\n        return \"0\"\n    \n    digits =\
    \ digits + N % 10\n    N = N / 10\n    \n    if N < 0\n        return \"0\"\n\
    \    \n    digits = digits + N % 10\n    N = N / 10\n    \n    if N < 0\n    \
    \    return \"0\"\n    \n    digits = digits + N % 10\n    N = N / 10\n    \n\
    \    if \nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000)\
    \ == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"\
    1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing condition in \"if\" at /tmp/tmpcxsmb8xp.jl:129\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpcxsmb8xp.jl:130\nin expression\
    \ starting at /tmp/tmpcxsmb8xp.jl:130\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N <\
    \ 0 \n        return \"-1\"\n    \n    if N == 0 \n        return \"0\"\n    \n\
    \    if N == 1 \n        return \"1\"\n    \n    digits = N % 10\n    \n    sumDigits\
    \ = solve(N//10)\n    \n    return sumDigits + digits\nend\n</cell>\n<code language=julia-1.5>\n\
    solve(1)\n</cell>\n<code language=julia-1.5>\nsolve(10)\n</cell>\n<code language=julia-1.5>\n\
    solve(100)\n</cell>\n<code language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\n\
    solve(150)\n</cell>\n<code language=julia-1.5>\nsolve(147)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=julia-1.5>\nsolve(149)\n</cell>\n<code language=julia-1.5>\n\
    solve(151)\n</cell>\n<code language=julia-1.5>\nsolve(152)\n</cell>\n<code language=julia-1.5>\n\
    solve(153)\n</cell>\n<code language=julia-1.5>\nsolve(154)\n</cell>\n<code language=julia-1.5>\n\
    solve(155)\n</cell>\n<code language=julia-1.5>\nsolve(156)\n</cell>\n<code language=julia-1.5>\n\
    solve(157)\n</cell>\n<code language=julia-1.5>\nsolve(158)\n</cell>\n<code language=julia-1.5>\n\
    solve(159)\n</cell>\n<code language=julia-1.5>\nsolve(160)\n</cell>\n<code language=julia-1.5>\n\
    solve(161)\n</cell>\n<code language=julia-1.5>\nsolve(162)\n</cell>\n<code language=julia-1.5>\n\
    solve(163)\n</cell>\n<code language=julia-1.5>\nsolve(164)\n</cell>\n<code language=julia-1.5>\n\
    solve(165)\n</cell>\n<code language=julia-1.5>\nsolve(166)\n</cell>\n<code language=julia-1.5>\n\
    solve(167)\n</cell>\n<code language=julia-1.5>\nsolve(168)\n</cell>\n<code language=julia-1.5>\n\
    solve(169)\n</cell>\n<code language=julia-1.5>\nsolve(170)\n</cell>\n<code language=julia-1.5>\n\
    solve(171)\n</cell>\n<code language=julia-1.5>\nsolve(172)\n</cell>\n<code language=julia-1.5>\n\
    solve(173)\n</cell>\n<code language=julia-1.5>\nsolve(174)\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000) ==\
    \ \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"1100\"\
    )\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvcnnb_ev.jl:30\nin expression starting at\
    \ /tmp/tmpvcnnb_ev.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N <\
    \ 0\n        return \"0\"\n    \n    sum = 0\n    digits = \"\"\n    while N >\
    \ 0\n        digits = digits + str((N % 10).digits)\n        N = N / 10\n    \
    \    sum = sum + N % 10\n    end\n    return digits\nend\n</cell>\n<code language=julia-1.5>\n\
    solve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\n\
    solve(147)\n</cell>\n<text>\nProblem 3\nGiven a positive integer N, return the\
    \ number of trailing zeroes in N's binary representation.\n    \n    Example\n\
    \        For N = 1000, the trailing zeroes will be \"10\".\n        For N = 147,\
    \ the trailing zeroes will be \"11\".\n        For N = 15, the trailing zeroes\
    \ will be \"1\".\n    \n    Variables:\n        @N integer\n             Constraints:\
    \ 0 \u2264 N \u2264 10000.\n    Output:\n         an integer\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000) == \"\
    1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"1100\")\n\
    \t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbr6yktdc.jl:27\nin expression starting at\
    \ /tmp/tmpbr6yktdc.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    \n    if\
    \ N < 0\n        return \"0\"\n    \n    digits = zeros(Int, N)\n    \n    for\
    \ i = 1:N\n        digits[i] = digits[i-1] + N % 10\n        N = N / 10\n    end\n\
    \    \n    return join(digits, \"\")\nend\n</cell>\n<code language=julia-1.5>\n\
    solve(147)\n</cell>\n<code language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\n\
    solve(150)\n</cell>\n<text>\nProblem 7: Binary to Decimal\nGiven a binary number\
    \ represented as a string, convert it to decimal and return the decimal number.\n\
    using Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000) ==\
    \ \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"1100\"\
    )\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0ai1p6ko.jl:28\nin expression starting at\
    \ /tmp/tmp0ai1p6ko.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    \n    if\
    \ N < 0 \n        return \"0\"\n    \n    if N == 0 \n        return \"0\"\n \
    \   \n    if N == 1 \n        return \"1\"\n    \n    digits = \"\"\n    \n  \
    \  while N > 0 \n        digits = digits + string(N % 2)\n        N = floor(N\
    \ / 2)\n    \n    return digits\nend\n</cell>\n<code language=julia-1.5>\nsolve(1000)\n\
    </cell>\n<code language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\n\
    solve(147)\n</cell>\n<text>\nProblem 3\nWrite a Julia function called sumdigits(N)\
    \ that takes an integer N and returns the sum of its digits in binary.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000) == \"\
    1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"1100\")\n\
    \t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphxzmjb4f.jl:33\nin expression starting at\
    \ /tmp/tmphxzmjb4f.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N <\
    \ 0\n        return \"0\"\n    \n    if N == 0\n        return \"0\"\n    \n \
    \   if N == 1\n        return \"1\"\n    \n    digits = N % 10\n    \n    sum\
    \ = 0\n    \n    while N > 0\n        sum += digits\n        N /= 10\n       \
    \ \n    return sum.to_s(2)\nend\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\
    \t@test(candidate(1000) == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147)\
    \ == \"1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) ==\
    \ \"10010\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_bpowdvt.jl:1\nin expression starting at /tmp/tmp_bpowdvt.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N <\
    \ 0\n        return \"0\"\n    \n    if N == 0\n        return \"0\"\n    \n \
    \   if N == 1\n        return \"1\"\n    \n    digits = zeros(Int, N)\n    \n\
    \    for i = 1:N\n        digits[i] = N % 2\n        N = N / 2\n    end\n    \n\
    \    sum = 0\n    for i = 1:N\n        sum = sum + digits[i]\n    end\n    \n\
    \    return string(digits, sum)\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ solve(1) == \"1\"\n@assert solve(2) == \"10\"\n@assert solve(3) == \"11\"\n\
    @assert solve(4) == \"100\"\n@assert solve(5) == \"101\"\n@assert solve(6) ==\
    \ \"110\"\n@assert solve(7) == \"111\"\n@assert solve(8) == \"1000\"\n@assert\
    \ solve(9) == \"1001\"\n@assert solve(10) == \"1010\"\n@assert solve(11) == \"\
    1011\"\n@assert solve(12) == \"1100\"\n@assert solve(13) == \"1101\"\n@assert\
    \ solve(14) == \"1110\"\n@assert solve(15) == \"1111\"\n@assert solve(16) == \"\
    10000\"\n@assert solve(17) == \"10001\"\n@assert solve(18) == \"10010\"\n@assert\
    \ solve(19) == \"10011\"\n@assert solve(20) == \"10100\"\n@assert solve(21) ==\
    \ \"10101\"\n@assert solve(22) == \"10110\"\n@assert solve(23) == \"10111\"\n\
    @assert solve(24) == \"11100\"\n@assert solve(25) == \"11101\"\n@assert solve(26)\
    \ == \"11110\"\n@assert solve(27) == \"11111\"\n@assert solve(28) == \"100001\"\
    \n@assert solve(29) == \"100002\"\n@assert solve(30) == \"100003\"\n@assert solve(31)\
    \ == \"100004\"\n@assert solve(32) == \"100005\"\n@assert solve(33) == \"100006\"\
    \n@assert solve(34) == \"100007\"\n@assert solve(35) == \"100008\"\n@assert solve(36)\
    \ == \"100009\"\n@assert solve(37) == \"100010\"\n@assert solve(38) == \"100011\"\
    \n@assert solve(39) == \"100012\"\n@assert solve(40) == \"100013\"\n@assert solve(41)\
    \ == \"100014\"\n@assert solve(42) == \"100015\"\n@assert solve(43) == \"100016\"\
    \n@assert solve(44) == \"100017\"\n@assert solve(45) == \"100018\"\n@assert solve(46)\
    \ == \"100019\"\n@assert solve(47) == \"100020\"\n@assert solve(48) == \"100021\"\
    \n@assert solve(49) == \"\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\
    \t@test(candidate(1000) == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147)\
    \ == \"1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) ==\
    \ \"10010\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpemxliog3.jl:38\nin expression starting at\
    \ /tmp/tmpemxliog3.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N <\
    \ 0\n        return \"-1\"\n    \n    if N == 0\n        return \"0\"\n    \n\
    \    if N == 1\n        return \"1\"\n    \n    digits = N % 10\n    \n    binary\
    \ = \"\"\n    \n    while N > 0\n        N = N / 10\n        binary = binary +\
    \ digits_to_binary(digits)\n        digits = N % 10\n    \n    return binary\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000)\
    \ == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"\
    1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa49mgsyh.jl:1\nin expression starting at /tmp/tmpa49mgsyh.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N <\
    \ 0\n        return \"0\"\n    \n    digits = N % 10\n    \n    if N < 10\n  \
    \      return digits\n    \n    digits = solve(N / 10)\n    \n    return digits\
    \ + digits\nend\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000)\
    \ == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"\
    1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkiitft81.jl:1\nin expression starting at /tmp/tmpkiitft81.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N <\
    \ 0\n        return \"0\"\n    \n    sum = 0\n    \n    for i in N\n        sum\
    \ = sum + i\n    \n    sumstr = String(sum)\n    \n    return sumstr\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000) == \"\
    1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"1100\")\n\
    \t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgylxg72i.jl:1\nin expression starting at /tmp/tmpgylxg72i.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N <\
    \ 0\n        return \"0\"\n    \n    if N == 0\n        return \"0\"\n    \n \
    \   if N < 10\n        return tostring(N)\n    \n    digits = tostring(N)\n  \
    \  \n    sum = 0\n    \n    for i in digits\n        sum += tointeger(i)\n   \
    \ \n    return tostring(sum)\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ solve(1) == \"1\"\n@assert solve(2) == \"10\"\n@assert solve(3) == \"111\"\n\
    @assert solve(4) == \"1001\"\n@assert solve(5) == \"10010\"\n@assert solve(6)\
    \ == \"100110\"\n@assert solve(7) == \"1001110\"\n@assert solve(8) == \"10011110\"\
    \n@assert solve(9) == \"10011111\"\n@assert solve(10) == \"10101\"\n@assert solve(11)\
    \ == \"101010\"\n@assert solve(12) == \"1010111\"\n@assert solve(13) == \"10101110\"\
    \n@assert solve(14) == \"10101101\"\n@assert solve(15) == \"10101010\"\n@assert\
    \ solve(16) == \"101010111\"\n@assert solve(17) == \"1010101110\"\n@assert solve(18)\
    \ == \"1010111101\"\n@assert solve(19) == \"1010111110\"\n@assert solve(20) ==\
    \ \"10101111110\"\n@assert solve(21) == \"10101111111\"\n@assert solve(22) ==\
    \ \"10101101101\"\n@assert solve(23) == \"10101101011\"\n@assert solve(24) ==\
    \ \"101011011010\"\n@assert solve(25) == \"1010110110110\"\n@assert solve(26)\
    \ == \"1010110110111\"\n@assert solve(27) == \"10101101101101\"\n@assert solve(28)\
    \ == \"10101101101110\"\n@assert solve(29) == \"101011011011111\"\n@assert solve(30)\
    \ == \"101011011011010\"\n@assert solve(31) == \"1010110110110110\"\n@assert solve(32)\
    \ == \"1010110110111101\"\n@assert solve(33) == \"1010110110111110\"\n@assert\
    \ solve(34) == \"10101101101111110\"\n@assert solve(35) == \"10101101101111111\"\
    \n@assert solve(36) == \"10101101101101101\"\n@assert solve(37) == \"10101101101101011\"\
    \n@assert solve(38) == \"101011011011011010\"\n@assert solve(39) == \"1010110110110110110\"\
    \n@assert solve(40) == \"1010110110111111010\"\n@assert solve(41) == \"10101101101111110110\"\
    \n@assert solve(\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000)\
    \ == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"\
    1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9ecftz7r.jl:33\nin expression starting at\
    \ /tmp/tmp9ecftz7r.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N <\
    \ 0\n        return \"0\"\n    \n    digits = N % 10\n    \n    if N < 10\n  \
    \      return digits::String\n    \n    digits = solve(N / 10)\n    \n    digits\
    \ = digits + digits::String\n    \n    return digits\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150)\
    \ == \"110\")\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) ==\
    \ \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprn9vx0hu.jl:1\nin expression starting at /tmp/tmprn9vx0hu.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N <\
    \ 0\n        return \"0\"\n    if N == 0\n        return \"0\"\n    if N == 1\n\
    \        return \"1\"\n    \n    digits = zeros(Int, 10)\n    digits[1] = 1\n\
    \    digits[2] = 1\n    digits[3] = 1\n    digits[4] = 1\n    digits[5] = 1\n\
    \    digits[6] = 1\n    digits[7] = 1\n    digits[8] = 1\n    digits[9] = 1\n\
    \    \n    sum = 0\n    \n    for i in digits[N]\n        sum += i\n    \n   \
    \ return string(digits[N]) + string(sum)\nend\n</cell>\n<code language=julia-1.5>\n\
    solve(2)\n</cell>\n<code language=julia-1.5>\nsolve(10)\n</cell>\n<code language=julia-1.5>\n\
    solve(100)\n</cell>\n<code language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\n\
    solve(150)\n</cell>\n<code language=julia-1.5>\nsolve(147)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=julia-1.5>\nsolve(149)\n</cell>\n<code language=julia-1.5>\n\
    solve(151)\n</cell>\n<code language=julia-1.5>\nsolve(152)\n</cell>\n<code language=julia-1.5>\n\
    solve(153)\n</cell>\n<code language=julia-1.5>\nsolve(154)\n</cell>\n<code language=julia-1.5>\n\
    solve(155)\n</cell>\n<code language=julia-1.5>\nsolve(156)\n</cell>\n<code language=julia-1.5>\n\
    solve(157)\n</cell>\n<code language=julia-1.5>\nsolve(158)\n</cell>\n<code language=julia-1.5>\n\
    solve(159)\n</cell>\n<code language=julia-1.5>\nsolve(160)\n</cell>\n<code language=julia-1.5>\n\
    solve(161)\n</cell>\n<code language=julia-1.5>\nsolve(162)\n</cell>\n<code language=julia-1.5>\n\
    solve(163)\n</cell>\n<code language=julia-1.5>\nsolve(164)\n</cell>\n<code language=julia-1.5>\n\
    solve(165)\n</cell>\n<code language=julia-1.5>\nsolve(166)\n</cell>\n<code language=julia-1.5>\n\
    solve(167)\n</cell>\n<code language=julia-1.5>\nsolve(168)\n</cell>\n<code language=julia-1.5>\n\
    solve(169)\n</cell>\n<code language=julia-1.5>\nsolve(170)\n</cell>\n<code language=julia-\n\
    using Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000) ==\
    \ \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"1100\"\
    )\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_tvwd7ld.jl:40\nin expression starting at\
    \ /tmp/tmp_tvwd7ld.jl:40\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N <\
    \ 0\n        return \"-1\"\n    \n    digits = N % 10\n    \n    if N < 10\n \
    \       return digits::String\n    \n    digits = solve(N / 10)\n    \n    return\
    \ digits + digits::String\nend\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\
    \t@test(candidate(1000) == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147)\
    \ == \"1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) ==\
    \ \"10010\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6m17onmr.jl:1\nin expression starting at /tmp/tmp6m17onmr.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N <\
    \ 0 \n        return \"0\"\n    \n    sum = 0\n    digits = N % 10\n    \n   \
    \ while N > 0\n        sum += digits\n        N = N / 10\n        digits = N %\
    \ 10\n    \n    return String(sum)\nend\n</cell>\n<code language=julia-1.5>\n\
    solve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\n\
    solve(147)\n</cell>\n<text>\nProblem 3\nGiven a positive integer N, return the\
    \ sum of its digits in binary using only bit operations.\n    \n    Example\n\
    \        For N = 1000, the sum of digits will be 1 the output should be \"1\"\
    .\n        For N = 150, the sum of digits will be 6 the output should be \"110\"\
    .\n        For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264\
    \ N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\
    \nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000)\
    \ == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"\
    1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfrm3yxrn.jl:28\nin expression starting at\
    \ /tmp/tmpfrm3yxrn.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N <\
    \ 0\n        return \"0\"\n    \n    digits = N % 10\n    N = N / 10\n    \n \
    \   sum = \"\"\n    \n    while N > 0\n        sum = sum + digits_to_binary(digits)\n\
    \        digits = digits % 10\n        N = N / 10\n    end\n    \n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\n\
    solve(150)\n</cell>\n<code language=julia-1.5>\nsolve(147)\n</cell>\n<text>\n\
    Problem 3\nWrite a Julia function named digits_to_binary that takes an integer\
    \ N and returns the binary representation of N in string format.\nusing Test\n\
    \n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000) == \"1\")\n\t\
    @test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333)\
    \ == \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5jnj329o.jl:31\nin expression starting at\
    \ /tmp/tmp5jnj329o.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N <\
    \ 0 \n        return \"0\"\n    \n    digits = N % 10\n    \n    if N < 10 \n\
    \        return digits::String\n    \n    digits = solve(N / 10)\n    \n    return\
    \ digits + digits\nend\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t\
    @test(candidate(1000) == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147)\
    \ == \"1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) ==\
    \ \"10010\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn_vv4kta.jl:1\nin expression starting at /tmp/tmpn_vv4kta.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N <\
    \ 0\n        return \"0\"\n    \n    sum = 0\n    digits = N % 10\n    \n    while\
    \ N > 0\n        sum += digits\n        N /= 10\n        digits = N % 10\n   \
    \ \n    return to_string(sum)\nend\n</cell>\n<code language=julia-1.5>\nsolve(1000)\n\
    </cell>\n<code language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\n\
    solve(147)\n</cell>\n<text>\nProblem 7\nWrite a Julia function called sum_to_n_digits(N)\
    \ that returns the sum of its digits in binary.\nusing Test\n\n@testset begin\n\
    \ncandidate = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150)\
    \ == \"110\")\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) ==\
    \ \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp48rk65z5.jl:28\nin expression starting at\
    \ /tmp/tmp48rk65z5.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N <\
    \ 0\n        return \"-1\"\n    if N == 0\n        return \"0\"\n    \n    sum\
    \ = 0\n    \n    while N > 0\n        sum = sum + N % 10\n        N = N / 10\n\
    \    \n    return String(sum)\nend\n</cell>\n<code language=julia-1.5>\nsolve(1)\n\
    </cell>\n<code language=julia-1.5>\nsolve(10)\n</cell>\n<code language=julia-1.5>\n\
    solve(100)\n</cell>\n<code language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\n\
    solve(150)\n</cell>\n<code language=julia-1.5>\nsolve(147)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000)\
    \ == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"\
    1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe0pbw4ch.jl:28\nin expression starting at\
    \ /tmp/tmpe0pbw4ch.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    \n    if\
    \ N < 0\n        return \"-1\"\n    \n    if N == 0\n        return \"0\"\n  \
    \  \n    if N == 1\n        return \"1\"\n    \n    digits = String[1..N]\n  \
    \  \n    sum = 0\n    \n    for i in digits\n        sum += i\n    \n    return\
    \ String(sum)\nend\n</cell>\n<code language=julia-1.5>\nsolve(1)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(10)\n</cell>\n<code language=julia-1.5>\nsolve(100)\n\
    </cell>\n<code language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1480)\n</cell>\n<code language=julia-1.5>\n\
    solve(1480)\n</cell>\n<code language=julia-1.5>\nsolve(1480)\n</cell>\n<code language=julia-1.5>\n\
    solve(1480)\n</cell>\n<code language=julia-1.5>\nsolve(1480)\n</cell>\n<code language=julia-1.5>\n\
    solve(1480)\n</cell>\n<code language=julia-1.5>\nsolve(1480)\n</cell>\n<code language=julia-1.5>\n\
    solve(1480)\n</cell>\n<code language=julia-1.5>\nsolve(1480)\n</cell>\n<code language=julia-1.5>\n\
    solve(1480)\n</cell>\n<code language=julia-1.5>\nsolve(1480)\n</cell>\n<code language=julia-1.5>\n\
    solve(1480)\n</cell>\n<code language=julia-1.5>\nsolve(1480)\n</cell>\n<code language=julia-1.5>\n\
    solve(1480)\n</cell>\n<code language=julia-1.5>\nsolve(1480)\n</cell>\n<code language=julia-1.5>\n\
    solve(1480)\n</cell>\n<code language=julia-1.5>\nsolve(1480)\n</cell>\n<code language=julia-1.5>\n\
    solve(1480)\n</cell>\n<code language=julia-1.5>\nsolve(1480)\n</cell>\n<code language=julia-1.5>\n\
    solve(1480)\n</cell>\n<code language=julia-1.5>\nsolve(1480)\n</cell>\n<code language=julia-1.5>\n\
    solve(1480)\n</cell>\n<code language=julia-1.5>\nsolve(1480)\n</cell>\n<code language=julia-1.5>\n\
    solve(1480)\n</cell>\n<code language=julia-1.5>\nsolve(1480)\n</cell>\n<code language=julia-1.5>\n\
    solve(1480)\n</cell>\n<code language=julia-1.5>\nsolve(1480)\n</cell>\nusing Test\n\
    \n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000) == \"1\")\n\t\
    @test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333)\
    \ == \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdbpigae2.jl:34\nin expression starting at\
    \ /tmp/tmpdbpigae2.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    \n    if\
    \ N < 0 \n        return \"-1\"\n    \n    if N == 0 \n        return \"0\"\n\
    \    \n    if N == 1 \n        return \"1\"\n    \n    if N == 2 \n        return\
    \ \"10\"\n    \n    if N % 2 == 0 \n        return solve(N / 2::Int64) + solve(N\
    \ / 2::Int64) + \"0\"\n    \n    return solve(N / 2::Int64) + solve(N / 2::Int64)\
    \ + \"1\"\nend\n</cell>\n<code language=julia-1.5>\nsolve(N::Int64)\n</cell>\n\
    <text>\nProblem 3\nGiven a positive integer N, return the sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\
    \t@test(candidate(1000) == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147)\
    \ == \"1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) ==\
    \ \"10010\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe6xiaein.jl:33\nin expression starting at\
    \ /tmp/tmpe6xiaein.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    \n    digits\
    \ = \"\"\n    \n    for i in N:\n        digits = digits + bin(i)[2:]\n    \n\
    \    return digits\nend\n</cell>\n<code language=julia-1.5>\nsolve(2)\n</cell>\n\
    <code language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(150)\n\
    </cell>\n<code language=julia-1.5>\nsolve(147)\n</cell>\n<text>\nProblem 7: Find\
    \ the sum of all odd numbers from 1 to 100\nusing Test\n\n@testset begin\n\ncandidate\
    \ = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150) == \"110\"\
    )\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) == \"1001\")\n\t\
    @test(candidate(963) == \"10010\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7o0wqflt.jl:19\nin expression starting at\
    \ /tmp/tmp7o0wqflt.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N <\
    \ 0\n        throw(DomainError(\"N must be positive\"))\n    if N == 0\n     \
    \   return \"0\"\n    \n    digits = zeros(Int, N)\n    digits[1] = 1\n    \n\
    \    for i = 2 to N\n        digits[i] = digits[i-1] + digits[i-2]\n    end\n\
    \    \n    return string(digits)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150) == \"110\"\
    )\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) == \"1001\")\n\t\
    @test(candidate(963) == \"10010\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpbbaxknvp.jl:23 expected \"\
    end\", got \"N\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpbbaxknvp.jl:23\n\
    in expression starting at /tmp/tmpbbaxknvp.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    \n    if\
    \ N < 0\n        return \"-1\"\n    \n    sum = 0\n    \n    while N > 0\n   \
    \     sum = sum + N % 10\n        N = N / 10\n    \n    return string(sum)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000) ==\
    \ \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"1100\"\
    )\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdvz4yus4.jl:1\nin expression starting at /tmp/tmpdvz4yus4.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N <\
    \ 0\n        return \"0\"\n    \n    digits = N % 10\n    N = N / 10\n    \n \
    \   if N == 0\n        return \"0\"\n    \n    sum = \"\"\n    \n    while N >\
    \ 0\n        sum = sum + digits_to_binary(digits)\n        digits = digits * 2\n\
    \        N = N / 2\n    end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    solve(1)\n</cell>\n<code language=julia-1.5>\nsolve(100)\n</cell>\n<code language=julia-1.5>\n\
    solve(150)\n</cell>\n<code language=julia-1.5>\nsolve(147)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(10000)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(100000)\n</cell>\n<code language=julia-1.5>\nsolve(1000000)\n\
    </cell>\n<code language=julia-1.5>\nsolve(10000000)\n</cell>\n<code language=julia-1.5>\n\
    solve(100000000)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000)\n</cell>\n\
    <code language=julia-1.5>\nsolve(10000000000)\n</cell>\n<code language=julia-1.5>\n\
    solve(100000000000)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000000)\n\
    </cell>\n<code language=julia-1.5>\nsolve(10000000000000)\n</cell>\n<code language=julia-1.5>\n\
    solve(100000000000000)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nsolve(10000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    solve(100000000000000000)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nsolve(10000000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(100000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000000000000000000000)\n</cell>\n<code language=julia-1.5>\nsolve(10000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nsolve(100000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nsolve(1000000000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    solve(10000000000000000000000000)\n</cell>\n<code language=julia-1.5>\nsolve(100000000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nsolve(1000000000000000000000000000)\n</\n\
    using Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000) ==\
    \ \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"1100\"\
    )\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt2srad7v.jl:34\nin expression starting at\
    \ /tmp/tmpt2srad7v.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    \n    sum\
    \ = 0\n    \n    for i in N:\n        sum += i\n    \n    return sum.to_binary(digits=N)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000)\
    \ == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"\
    1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8u1o7uyc.jl:19\nin expression starting at\
    \ /tmp/tmp8u1o7uyc.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N <\
    \ 0\n        return \"0\"\n    \n    sum = 0\n    digits = \"\"\n    \n    while\
    \ N > 0\n        digits = digits + str((N % 10).digits)\n        N = N / 10\n\
    \        sum = sum + N % 10\n    \n    return digits + sum.to_s\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert solve(1) == \"1\"\n@assert solve(2) == \"10\"\
    \n@assert solve(3) == \"111\"\n@assert solve(4) == \"1010\"\n@assert solve(5)\
    \ == \"1011\"\n@assert solve(6) == \"11001\"\n@assert solve(7) == \"110011\"\n\
    @assert solve(8) == \"1100011\"\n@assert solve(9) == \"11000011\"\n@assert solve(10)\
    \ == \"110000011\"\n@assert solve(11) == \"1100000011\"\n@assert solve(12) ==\
    \ \"11000000011\"\n@assert solve(13) == \"110000000011\"\n@assert solve(14) ==\
    \ \"1100000000011\"\n@assert solve(15) == \"110000000000101\"\n@assert solve(16)\
    \ == \"110000000000010011\"\n@assert solve(17) == \"1100000000000010011\"\n@assert\
    \ solve(18) == \"11000000000000010011\"\n@assert solve(19) == \"110000000000000010011\"\
    \n@assert solve(20) == \"1100000000000000010011\"\n@assert solve(21) == \"110000000000000001010011\"\
    \n@assert solve(22) == \"1100000000000000010100101\"\n@assert solve(23) == \"\
    110000000000000001010010011\"\n@assert solve(24) == \"1100000000000000010100100011\"\
    \n@assert solve(25) == \"11000000000000000101001000011\"\n@assert solve(26) ==\
    \ \"110000000000000001010010000011\"\n@assert solve(27) == \"110000000000000001010000000011\"\
    \n@assert solve(28) == \"1100000000000000010100000000011\"\n@assert solve(29)\
    \ == \"11000000000000000101000000000011\"\n@assert solve(30) == \"11000000000000000101000000000001\"\
    \n@assert solve(31) == \"11000000000000000101000000000000\"\n@assert solve(32)\
    \ == \"110000000000000001010000000000000\"\n@assert solve(33) == \"1100000000000000010100000000000000\"\
    \n@assert solve(34) == \"11000000000000000101000000000000000\"\n@assert solve(35)\
    \ == \"110000000000000001010000000000000000\"\n@assert solve(36) == \"1100000000000000010100000000000000000\"\
    \n@assert solve(37) == \"11000000000000000101000000000000000000\"\n@assert solve(38)\
    \ == \"\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000)\
    \ == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"\
    1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplmv6_dlf.jl:28\nin expression starting at\
    \ /tmp/tmplmv6_dlf.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N <\
    \ 0\n        return \"0\"\n    \n    sum = 0\n    \n    for i in N\n        sum\
    \ += i\n    \n    return sum.to_binary(2)\nend\n</cell>\n<code language=julia-1.5>\n\
    solve(1)\n</cell>\n<code language=julia-1.5>\nsolve(10)\n</cell>\n<code language=julia-1.5>\n\
    solve(100)\n</cell>\n<code language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\n\
    solve(150)\n</cell>\n<code language=julia-1.5>\nsolve(147)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=julia-1.5>\nsolve(149)\n</cell>\n<code language=julia-1.5>\n\
    solve(151)\n</cell>\n<code language=julia-1.5>\nsolve(152)\n</cell>\n<code language=julia-1.5>\n\
    solve(153)\n</cell>\n<code language=julia-1.5>\nsolve(154)\n</cell>\n<code language=julia-1.5>\n\
    solve(155)\n</cell>\n<code language=julia-1.5>\nsolve(156)\n</cell>\n<code language=julia-1.5>\n\
    solve(157)\n</cell>\n<code language=julia-1.5>\nsolve(158)\n</cell>\n<code language=julia-1.5>\n\
    solve(159)\n</cell>\n<code language=julia-1.5>\nsolve(160)\n</cell>\n<code language=julia-1.5>\n\
    solve(161)\n</cell>\n<code language=julia-1.5>\nsolve(162)\n</cell>\n<code language=julia-1.5>\n\
    solve(163)\n</cell>\n<code language=julia-1.5>\nsolve(164)\n</cell>\n<code language=julia-1.5>\n\
    solve(165)\n</cell>\n<code language=julia-1.5>\nsolve(166)\n</cell>\n<code language=julia-1.5>\n\
    solve(167)\n</cell>\n<code language=julia-1.5>\nsolve(168)\n</cell>\n<code language=julia-1.5>\n\
    solve(169)\n</cell>\n<code language=julia-1.5>\nsolve(170)\n</cell>\n<code language=julia-1.5>\n\
    solve(171)\n</cell>\n<code language=julia-1.5>\nsolve(172)\n</cell>\n<code language=julia-1.5>\n\
    solve(173)\n</cell>\n<code language=julia-1.5>\nsolve(174)\n</cell>\n<code language=julia-1.5>\n\
    solve(175)\n</cell>\n<code language=julia-1.5>\nsolve(176)\n</cell>\n<code language=juli\n\
    using Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000) ==\
    \ \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"1100\"\
    )\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqkh43j4b.jl:25\nin expression starting at\
    \ /tmp/tmpqkh43j4b.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N <\
    \ 0\n        return \"-1\"\n    if N == 0\n        return \"0\"\n    if N == 1\n\
    \        return \"1\"\n    \n    digits = N % 10\n    N = N / 10\n    \n    sum\
    \ = \"\"\n    while N > 0\n        sum = sum + digits_to_binary(digits)\n    \
    \    digits = digits * 2\n        N = N / 2\n    end\n    \n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>\nsolve(1)\n</cell>\n<code language=julia-1.5>\n\
    solve(10)\n</cell>\n<code language=julia-1.5>\nsolve(100)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\n\
    solve(147)\n</cell>\n<code language=julia-1.5>\nsolve(148)\n</cell>\n<code language=julia-1.5>\n\
    solve(149)\n</cell>\n<code language=julia-1.5>\nsolve(151)\n</cell>\n<code language=julia-1.5>\n\
    solve(152)\n</cell>\n<code language=julia-1.5>\nsolve(153)\n</cell>\n<code language=julia-1.5>\n\
    solve(154)\n</cell>\n<code language=julia-1.5>\nsolve(155)\n</cell>\n<code language=julia-1.5>\n\
    solve(156)\n</cell>\n<code language=julia-1.5>\nsolve(157)\n</cell>\n<code language=julia-1.5>\n\
    solve(158)\n</cell>\n<code language=julia-1.5>\nsolve(159)\n</cell>\n<code language=julia-1.5>\n\
    solve(160)\n</cell>\n<code language=julia-1.5>\nsolve(161)\n</cell>\n<code language=julia-1.5>\n\
    solve(162)\n</cell>\n<code language=julia-1.5>\nsolve(163)\n</cell>\n<code language=julia-1.5>\n\
    solve(164)\n</cell>\n<code language=julia-1.5>\nsolve(165)\n</cell>\n<code language=julia-1.5>\n\
    solve(166)\n</cell>\n<code language=julia-1.5>\nsolve(167)\n</cell>\n<code language=julia-1.5>\n\
    solve(168)\n</cell>\n<code language=julia-1.5>\nsolve(169)\n</cell>\n<code language=julia-1.5>\n\
    solve(170)\n</cell>\n<code language=julia-1.5>\nsolve(171)\n</cell>\n<code language=julia-1.5>\n\
    solve(172)\n</cell>\n<code language=julia-1.5>\nsolve(173)\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150)\
    \ == \"110\")\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) ==\
    \ \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp58hxb6lr.jl:34\nin expression starting at\
    \ /tmp/tmp58hxb6lr.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N <\
    \ 0\n        return \"0\"\n    \n    digits = String[]\n    \n    push!(digits,\
    \ 0)\n    \n    while N > 0\n        push!(digits, N % 2)\n        N /= 2\n  \
    \  end\n    \n    digits = reverse(digits)\n    \n    return join(digits, \"\"\
    )\nend\n</cell>\n<code language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\n\
    solve(150)\n</cell>\n<code language=julia-1.5>\nsolve(147)\n</cell>\n<text>\n\
    Problem 7\nWrite a Julia function called sumdigits(N) that takes an integer N\
    \ and returns the sum of its digits in binary.\nusing Test\n\n@testset begin\n\
    \ncandidate = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150)\
    \ == \"110\")\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) ==\
    \ \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxzd4r5_v.jl:31\nin expression starting at\
    \ /tmp/tmpxzd4r5_v.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N <\
    \ 0\n        return \"0\"\n    \n    digits = zeros(Int, 10)\n    digits[1] =\
    \ 1\n    \n    for i = 2 to N\n        digits[i] = digits[i-1] + digits[i-2]\n\
    \    end\n    \n    return join(digits, \"\")\nend\n</cell>\n<code language=julia-1.5>\n\
    solve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\n\
    solve(147)\n</cell>\n<text>\nProblem 3\nWrite a Julia function called digitsum\
    \ that takes a positive integer N and returns the sum of its digits in binary.\n\
    using Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000) ==\
    \ \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"1100\"\
    )\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpl7xy4kx3.jl:21 expected \"\
    end\", got \"N\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpl7xy4kx3.jl:21\n\
    in expression starting at /tmp/tmpl7xy4kx3.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    if N <\
    \ 0\n        return \"-1\"\n    \n    sum = 0\n    \n    for i in N\n        sum\
    \ += i\n        \n    return sum.to_binary(2)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150)\
    \ == \"110\")\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) ==\
    \ \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd04vg1hg.jl:1\nin expression starting at /tmp/tmpd04vg1hg.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n        For N = 1000, the sum of digits will be\
    \ 1 the output should be \"1\".\n        For N = 150, the sum of digits will be\
    \ 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n    \n    if\
    \ N < 0\n        return \"0\"\n    \n    digits = N % 10\n    \n    if N < 10\n\
    \        return digits\n    \n    digits = digits + solve(N / 10)\n    \n    return\
    \ digits\nend\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000)\
    \ == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"\
    1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsb806op_.jl:1\nin expression starting at /tmp/tmpsb806op_.jl:1\n"
  exit_code: 1
  status: SyntaxError
