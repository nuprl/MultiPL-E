name: HumanEval_18_how_many_times
language: julia
results:
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0 \n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return 1 + how_many_times(string[1:], substring)\nend\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the number of times\
    \ each character appears in the string.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzc449vkk.jl:12\nin expression starting at\
    \ /tmp/tmpzc449vkk.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    count\
    \ = 0\n    \n    for char in string\n        if char == substring[0]\n       \
    \     count = count + 1\n            \n            if char == substring[1]\n \
    \               count = count + 1\n                \n            if char == substring[2]\n\
    \                count = count + 1\n                \n            if char == substring[3]\n\
    \                count = count + 1\n                \n            if char == substring[4]\n\
    \                count = count + 1\n                \n            if char == substring[5]\n\
    \                count = count + 1\n                \n            if char == substring[6]\n\
    \                count = count + 1\n                \n            if char == substring[7]\n\
    \                count = count + 1\n                \n            if char == substring[8]\n\
    \                count = count + 1\n                \n            if char == substring[9]\n\
    \                count = count + 1\n                \n            if char == substring[10]\n\
    \                count = count + 1\n                \n            if char == substring[11]\n\
    \                count = count + 1\n                \n            if char == substring[12]\n\
    \                count = count + 1\n                \n            if char == substring[13]\n\
    \                count = count + 1\n                \n            if char == substring[14]\n\
    \                count = count + 1\n                \n            if char == substring[15]\n\
    \                count = count + 1\n                \n            if char == substring[16]\n\
    \                count = count + 1\n                \n            if char == substring[17]\n\
    \                count = count + 1\n                \n            if char == substring[18]\n\
    \                count = count + 1\n                \n            if char == substring[19]\n\
    \                count = count + 1\n                \n            if char == substring[20]\n\
    \                count = count + 1\n                \n            if char == substring[21]\n\
    \                count = count + 1\n                \n            if char == substring[22]\n\
    \                count = count + 1\n                \n            if char == substring[23]\n\
    \                count = count + 1\n                \n            if char == substring[24]\n\
    \                count = count + 1\n                \n            if char == substring[25]\n\
    \                count = count + 1\n                \n            if char == substring[26]\n\
    \                count = count + 1\n                \n            if char == substring[27]\n\
    \                count = count + 1\n                \n            if char == substring[28]\n\
    \                count = count + 1\n                \n            if char == substring[29]\n\
    \                count = count + 1\n                \n            if char == substring[30]\n\
    \                count = count + 1\n                \n            if char == substring[31]\n\
    \                count = count + 1\n                \n            if char == substring[32]\n\
    \                count = count + 1\n                \n            if char == substring[33]\n\
    \                count = count + 1\n                \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\
    \t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\",\
    \ \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxswfmrhc.jl:1\nin expression starting at /tmp/tmpxswfmrhc.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring) + how_many_times(string,\
    \ substring[1:])\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\"\
    , \"a\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string and\
    \ a substring and returns the number of times the substring appears in the string.\n\
    using Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv7yifpmi.jl:12\nin expression starting at\
    \ /tmp/tmpv7yifpmi.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0 \n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring)\nend\n</cell>\n\
    <text>\nExercise 4\nWrite a function that takes a string and returns the number\
    \ of times the string \"ab\" appears in the string. \n>>> how_many_times('ab',\
    \ 'ab')\n2\n>>> how_many_times('ab', 'ba')\n1\n>>> how_many_times('ab', 'abb')\n\
    0\n>>> how_many_times('ab', 'aba')\n1\n>>> how_many_times('ab', 'abba')\n1\n>>>\
    \ how_many_times('ab', 'abbb')\n2\n>>> how_many_times('ab', 'abbbb')\n3\n>>> how_many_times('ab',\
    \ 'abbbba')\n3\n>>> how_many_times('ab', 'abbbbba')\n4\n>>> how_many_times('ab',\
    \ 'abbbbbac')\n4\n>>> how_many_times('ab', 'abbbbbacab')\n4\n>>> how_many_times('ab',\
    \ 'abbbbbacabc')\n4\n>>> how_many_times('ab', 'abbbbbacabcba')\n4\n>>> how_many_times('ab',\
    \ 'abbbbbacabcbac')\n4\n>>> how_many_times('ab', 'abbbbbacabcbacab')\n4\n>>> how_many_times('ab',\
    \ 'abbbbbacabcbacabc')\n4\n>>> how_many_times('ab', 'abbbbbacabcbacabcba')\n4\n\
    >>> how_many_times('ab', 'abbbbbacabcbacabcbac')\n4\n>>> how_many_times('ab',\
    \ 'abbbbbacabcbacabcbacab')\n4\n>>> how_many_times('ab', 'abbbbbacabcbacabcbacabc')\n\
    4\n>>> how_many_times('ab', 'abbbbbacabcbacabcbacabcba')\n4\n>>> how_many_times('ab',\
    \ 'abbbbbacabcbacabcbacabcbac')\n4\n>>> how_many_times('ab', 'abbbbbacabcba\n\
    using Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbe_3omok.jl:12\nin expression starting at\
    \ /tmp/tmpbe_3omok.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    count\
    \ = 0\n    \n    for c in string\n        if c == substring\n            count\
    \ += 1\n        else\n            count = 0\n    end\n    \n    return count\n\
    end\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a string and returns the number\
    \ of times the string \"aaa\" appears in the string. \n>>> how_many_times(\"aaa\"\
    , \"a\")\n3\n>>> how_many_times(\"aaa\", \"b\")\n0\n>>> how_many_times(\"aaa\"\
    , \"c\")\n0\n>>> how_many_times(\"aaa\", \"d\")\n0\n>>> how_many_times(\"aaa\"\
    , \"e\")\n0\n>>> how_many_times(\"aaa\", \"f\")\n0\n>>> how_many_times(\"aaa\"\
    , \"g\")\n0\n>>> how_many_times(\"aaa\", \"h\")\n0\n>>> how_many_times(\"aaa\"\
    , \"i\")\n0\n>>> how_many_times(\"aaa\", \"j\")\n0\n>>> how_many_times(\"aaa\"\
    , \"k\")\n0\n>>> how_many_times(\"aaa\", \"l\")\n0\n>>> how_many_times(\"aaa\"\
    , \"m\")\n0\n>>> how_many_times(\"aaa\", \"n\")\n0\n>>> how_many_times(\"aaa\"\
    , \"o\")\n0\n>>> how_many_times(\"aaa\", \"p\")\n0\n>>> how_many_times(\"aaa\"\
    , \"q\")\n0\n>>> how_many_times(\"aaa\", \"r\")\n0\n>>> how_many_times(\"aaa\"\
    , \"s\")\n0\n>>> how_many_times(\"aaa\", \"t\")\n0\n>>> how_many_times(\"aaa\"\
    , \"u\")\n0\n>>> how_many_times(\"aaa\", \"v\")\n0\n>>> how_many_times(\"aaa\"\
    , \"w\")\n0\n>>> how_many_times(\"aaa\", \"x\")\n0\n>>> how_many_times(\"aaa\"\
    , \"y\")\n0\n>>> how_many_times(\"aaa\", \"z\")\n0\n>>> how_many_times(\"aaa\"\
    , \"aa\")\n3\n>>> how_many_times(\"aaa\", \"ab\")\n0\n>>> how_many_times(\"aaa\"\
    , \"ac\")\n0\n>>> how_many_times(\"aaa\", \"ad\")\n0\n>>> how_man\nusing Test\n\
    \n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\"\
    ) == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\"\
    , \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphppre3sp.jl:24\nin expression starting at\
    \ /tmp/tmphppre3sp.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    count\
    \ = 0\n    \n    for c in string\n        if c == substring[0]\n            count\
    \ = count + 1\n        else\n            count = 0\n    end\n    \n    return\
    \ count\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"\
    aa\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string and returns\
    \ the number of times the substring \"ab\" appears in the string. Case insensitive.\n\
    using Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8582379o.jl:24\nin expression starting at\
    \ /tmp/tmp8582379o.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring) + how_many_times(string,\
    \ substring[1:])\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\"\
    , \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaa\", \"aaa\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaaaa\", \"aaa\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"aaaaaaa\", \"aaa\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaaaaa\", \"aa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaaaaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaaaa\"\
    , \"aa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaaaa\", \"\
    a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaaaa\", \"a\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaaaa\", \"a\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaaaaa\", \"a\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"aaaaaaa\", \"a\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaaaaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaaaaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaaaa\"\
    , \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaaaa\", \"a\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaaaa\", \"a\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaaaaa\", \"a\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"aaaaaaa\", \"a\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaaaaa\", \"a\")\n</cell>\n<code language=julia-1.5\nusing Test\n\
    \n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\"\
    ) == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\"\
    , \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphyll3uvt.jl:12\nin expression starting at\
    \ /tmp/tmphyll3uvt.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    count\
    \ = 0\n    \n    for char in string\n        if char == substring\n          \
    \  count += 1\n        else\n            count = 0\n    end\n    \n    return\
    \ count\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaa\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"aaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aaaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\"\
    , \"aaaaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"\
    aaaaaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaab\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabb\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbb\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbb\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbb\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbba\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbbaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbbaaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbbaaaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbbaaaaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbbaaaaaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbbaaaaaaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_\nusing Test\n\n@testset begin\n\n\
    candidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptq1e8mu_.jl:24\nin expression starting at\
    \ /tmp/tmptq1e8mu_.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    count\
    \ = 0\n    \n    for c in string\n        if c == substring\n            count\
    \ += 1\n        else\n            count = 0\n    end\n    \n    return count\n\
    end\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of times each character appears in the string.\nusing Test\n\n@testset begin\n\
    \ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpun5m182v.jl:24\nin expression starting at\
    \ /tmp/tmpun5m182v.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0 \n    else if\
    \ substring[0] == string[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return 1 + how_many_times(string[1:], substring)\nend\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of times a given substring\
    \ can be found in the original string. Count overlaping cases.\n    >>> how_many_times_2('',\
    \ 'a')\n    0\n    >>> how_many_times_2('aaa', 'a')\n    3\n    >>> how_many_times_2('aaaa',\
    \ 'aa')\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\
    \t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") ==\
    \ 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john\
    \ doe\", \"john\") == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyxitdkk9.jl:12\nin expression starting at\
    \ /tmp/tmpyxitdkk9.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring)\nend\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"aaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\"\
    , \"aaaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"\
    aaaaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaab\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaaba\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabaa\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabaaa\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabaaab\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabaaaba\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabaaabaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabaaabaaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabaaabaaab\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabaaabaaaba\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabaaabaaabaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabaaabaaabaaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabaaabaaabaaab\n\
    using Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt2fy0zz1.jl:12\nin expression starting at\
    \ /tmp/tmpt2fy0zz1.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabcbb\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"abcabcbb\", \"bc\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"abcabcbb\", \"bb\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"abcabcbb\", \"c\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abcabcbb\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabcbb\"\
    , \"bc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabcbb\", \"\
    bb\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabcbb\", \"c\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabcbb\", \"a\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"abcabcbb\", \"bc\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"abcabcbb\", \"bb\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"abcabcbb\", \"c\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abcabcbb\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabcbb\"\
    , \"bc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabcbb\", \"\
    bb\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabcbb\", \"c\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabcbb\", \"a\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"abcabcbb\", \"bc\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"abcabcbb\", \"bb\")\n</cell>\n<code language=julia-1.5>\n\
    ho\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpiar_it93.jl:12\nin expression starting at\
    \ /tmp/tmpiar_it93.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times('', 'a')\n</cell>\n<code language=julia-1.5>\n\
    how_many_times('aaa', 'a')\n</cell>\n<code language=julia-1.5>\nhow_many_times('aaaa',\
    \ 'aa')\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and\
    \ a substring and returns the number of times the substring appears in the string.\
    \ Case insensitive.\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\
    \t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") ==\
    \ 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john\
    \ doe\", \"john\") == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp77nobf18.jl:12\nin expression starting at\
    \ /tmp/tmp77nobf18.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    len_string\
    \ = length(string)\n    len_substring = length(substring)\n    \n    if len_string\
    \ == 0 || len_substring == 0\n        return 0\n    \n    substring = substring(len_substring)\n\
    \    \n    if substring.length == len_string\n        return substring.length\n\
    \    \n    substring = substring(len_substring)\n    \n    if substring.length\
    \ == len_string\n        return substring.length\n    \n    substring = substring(len_substring)\n\
    \    \n    if substring.length == len_string\n        return substring.length\n\
    \    \n    substring = substring(len_substring)\n    \n    if substring.length\
    \ == len_string\n        return substring.length\n    \n    substring = substring(len_substring)\n\
    \    \n    if substring.length == len_string\n        return substring.length\n\
    \    \n    substring = substring(len_substring)\n    \n    if substring.length\
    \ == len_string\n        return substring.length\n    \n    substring = substring(len_substring)\n\
    \    \n    if substring.length == len_string\n        return substring.length\n\
    \    \n    substring = substring(len_substring)\n    \n    if substring.length\
    \ == len_string\n        return substring.length\n    \n    substring = substring(len_substring)\n\
    \    \n    if substring.length == len_string\n        return substring.length\n\
    \    \n    substring = substring(len_substring)\n    \n    if substring.length\
    \ == len_string\n        return substring.length\n    \n    substring = substring(len_substring)\n\
    \    \n    if substring.length == len_string\n        return substring.length\n\
    \    \n    substring = substring(len_substring)\n    \n    if substring.length\
    \ == len_string\n        return substring.length\n    \n    substring = substring(len_substring)\n\
    \    \n    if substring.length == len_string\n        return substring.length\n\
    \    \n    substring = substring(len_substring)\n    \n    if substring.length\
    \ == len_string\n        return substring.length\n    \n    substring = substring(len_substring)\n\
    \    \n    if substring.length == len_string\n        return substring.length\n\
    \    \n    substring = substring(len_substring)\n    \n    if substring.length\
    \ == len_string\n        return substring.length\n    \n    substring = substring(len_substring)\n\
    \    \n    if substring.length == len_string\n        return substring.length\n\
    \    \n    substring = substring(len_substring)\n    \n    if substring.length\
    \ == len_string\n        return substring.length\n    \n    substring = substring(len_substring)\n\
    \    \n    if substring.length == len_string\n        return substring.length\n\
    \    \n    substring = substring(len_substring)\n    \n    if substring.length\
    \ == len_string\n        return substring.length\n    \n    substring = substring(len_substring\n\
    using Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqpzp9kvr.jl:120\nin expression starting at\
    \ /tmp/tmpqpzp9kvr.jl:120\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    count\
    \ = 0\n    \n    for c in string\n        if c == substring\n            count\
    \ += 1\n        end\n    end\n    \n    return count\nend\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaa\", \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and returns the number of times a substring appears within\
    \ that string. Count overlaping cases.\n>>> how_many_times('', 'a')\n0\n>>> how_many_times('aaa',\
    \ 'a')\n3\n>>> how_many_times('aaaa', 'aa')\n3\n>>> how_many_times('aaaa', 'aaa')\n\
    2\n>>> how_many_times('aaaa', 'aaaa')\n2\n>>> how_many_times('aaaa', 'aaaaa')\n\
    1\n>>> how_many_times('aaaa', 'aaaaaa')\n1\n>>> how_many_times('aaaa', 'aaaaaaa')\n\
    0\n>>> how_many_times('aaaa', 'aaaaaaab')\n0\n>>> how_many_times('aaaa', 'aaaaaaaba')\n\
    0\n>>> how_many_times('aaaa', 'aaaaaaabaa')\n0\n>>> how_many_times('aaaa', 'aaaaaaabaaa')\n\
    0\n>>> how_many_times('aaaa', 'aaaaaaabaaaa')\n0\n>>> how_many_times('aaaa', 'aaaaaaabaaaaa')\n\
    0\n>>> how_many_times('aaaa', 'aaaaaaabaaaaaa')\n0\n>>> how_many_times('aaaa',\
    \ 'aaaaaaabaaaaaaa')\n0\n>>> how_many_times('aaaa', 'aaaaaaabaaaaaaab')\n0\n>>>\
    \ how_many_times('aaaa', 'aaaaaaabaaaaaaaba')\n0\n>>> how_many_times('aaaa', 'aaaaaaabaaaaaaabaa')\n\
    0\n>>> how_many_times('aaaa', 'aaaaaaabaaaaaaabaaa')\n0\n>>> how_many_times('aaaa',\
    \ 'aaaaaaabaaaaaaabaaaa')\n0\n>>> how_many_times('aaaa', 'aaaaaaabaaaaaaabaaaaa')\n\
    0\n>>> how_many_times('aaaa', 'aaaaaaabaaaaaaabaaaaaa')\n0\n>>> how_many_times('aaaa',\
    \ 'aaaaaaabaaaaaaabaaaaaaa')\n0\n>>> how_many_times('aaaa', 'aaaaaa\nusing Test\n\
    \n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\"\
    ) == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\"\
    , \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq0nbgay0.jl:23\nin expression starting at\
    \ /tmp/tmpq0nbgay0.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    count\
    \ = 0\n    \n    for char in string\n        if char == substring[0]\n       \
    \     count = count + 1\n            \n            if char == substring[1]\n \
    \               count = count + 1\n                \n            if char == substring[2]\n\
    \                count = count + 1\n                \n            if char == substring[3]\n\
    \                count = count + 1\n                \n            if char == substring[4]\n\
    \                count = count + 1\n                \n            if char == substring[5]\n\
    \                count = count + 1\n                \n            if char == substring[6]\n\
    \                count = count + 1\n                \n            if char == substring[7]\n\
    \                count = count + 1\n                \n            if char == substring[8]\n\
    \                count = count + 1\n                \n            if char == substring[9]\n\
    \                count = count + 1\n                \n            if char == substring[10]\n\
    \                count = count + 1\n                \n            if char == substring[11]\n\
    \                count = count + 1\n                \n            if char == substring[12]\n\
    \                count = count + 1\n                \n            if char == substring[13]\n\
    \                count = count + 1\n                \n            if char == substring[14]\n\
    \                count = count + 1\n                \n            if char == substring[15]\n\
    \                count = count + 1\n                \n            if char == substring[16]\n\
    \                count = count + 1\n                \n            if char == substring[17]\n\
    \                count = count + 1\n                \n            if char == substring[18]\n\
    \                count = count + 1\n                \n            if char == substring[19]\n\
    \                count = count + 1\n                \n            if char == substring[20]\n\
    \                count = count + 1\n                \n            if char == substring[21]\n\
    \                count = count + 1\n                \n            if char == substring[22]\n\
    \                count = count + 1\n                \n            if char == substring[23]\n\
    \                count = count + 1\n                \n            if char == substring[24]\n\
    \                count = count + 1\n                \n            if char == substring[25]\n\
    \                count = count + 1\n                \n            if char == substring[26]\n\
    \                count = count + 1\n                \n            if char == substring[27]\n\
    \                count = count + 1\n                \n            if char == substring[28]\n\
    \                count = count + 1\n                \n            if char == substring[29]\n\
    \                count = count + 1\n                \n            if char == substring[30]\n\
    \                count = count + 1\n                \n            if char == substring[31]\n\
    \                count = count + 1\n                \n            if char == substring[32]\n\
    \                count = count + 1\n                \n            if char == substring[33]\n\
    \                count = count + 1\n                \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\
    \t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\",\
    \ \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppf8s15wq.jl:1\nin expression starting at /tmp/tmppf8s15wq.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    count\
    \ = 0\n    \n    for i in string.chars\n        if substring == i\n          \
    \  count += 1\n            \n    return count\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and returns the number of times each character appears in\
    \ the string. \nFor example the string \"abcabc\" should return [('a', 3), ('b',\
    \ 2), ('c', 3)]\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\
    \t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") ==\
    \ 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john\
    \ doe\", \"john\") == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp44bm5vyl.jl:20\nin expression starting at\
    \ /tmp/tmp44bm5vyl.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    string::Char\n\
    \    substring::Char\n    \n    string::Int64 = 0\n    substring::Int64 = 0\n\
    \    \n    for char in string\n        if char == substring\n            string\
    \ += 1\n        else\n            substring = 0\n    end\n    \n    return string\n\
    end\n</cell>\n<code language=julia-1.5>\nhow_many_times('', 'a')\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times('aaa', 'a')\n</cell>\n<code language=julia-1.5>\n\
    how_many_times('aaaa', 'aa')\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a string and a substring and returns the number of times the substring\
    \ appears in the string. Count overlaping cases.\n>>> how_many_times('', 'a')\n\
    0\n>>> how_many_times('aaa', 'a')\n3\n>>> how_many_times('aaaa', 'aa')\n3\n>>>\
    \ how_many_times('', 'aa')\n0\n>>> how_many_times('aa', 'a')\n2\n>>> how_many_times('aaa',\
    \ 'aa')\n3\n>>> how_many_times('aaaa', 'aaa')\n4\n>>> how_many_times('aaaaa',\
    \ 'aaaa')\n4\n>>> how_many_times('aaaaaa', 'aaaaa')\n4\n>>> how_many_times('aaaaaaa',\
    \ 'aaaaaa')\n4\n>>> how_many_times('aaaaaaa', 'aaaaaaa')\n4\n>>> how_many_times('aaaaaaa',\
    \ 'aaaaaaa')\n4\n>>> how_many_times('aaaaaaa', 'aaaaaaa')\n4\n>>> how_many_times('aaaaaaa',\
    \ 'aaaaaaa')\n4\n>>> how_many_times('aaaaaaa', 'aaaaaaa')\n4\n>>> how_many_times('aaaaaaa',\
    \ 'aaaaaaa')\n4\n>>> how_many_times('aaaaaaa', 'aaaaaaa')\n4\n>>> how_many_times('aaaaaaa',\
    \ 'aaaaaaa')\n4\n>>> how_many_times('aaaaaaa', 'aaaaaaa')\n4\n>>> how_many_times('aaaaaaa',\
    \ 'aaaaaaa')\n4\n>>> how_many_times('aaaaaaa', 'aaaaaaa')\n4\n>>> how_many_times('aaaaaaa',\
    \ 'aaaaaaa')\n4\n>>> how_many_times('aaaaaaa', 'aaaaaaa')\n4\n>>> ho\nusing Test\n\
    \n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\"\
    ) == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\"\
    , \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9fshi8lb.jl:28\nin expression starting at\
    \ /tmp/tmp9fshi8lb.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    len_string\
    \ = length(string)\n    len_substring = length(substring)\n    \n    if len_string\
    \ == 0 || len_substring == 0\n        return 0\n    \n    if len_string == len_substring\n\
    \        return 1\n    \n    i = 0\n    j = len_string\n    \n    while i < j\n\
    \        if string[i] == substring[j]\n            i += 1\n            j += 1\n\
    \        else\n            if string[i] == substring[j - 1]\n                i\
    \ += 1\n            else\n                if string[i] == substring[j + 1]\n \
    \                   i += 1\n                else\n                    if string[i]\
    \ == substring[j - 2]\n                        i += 1\n                    else\n\
    \                        j += 1\n                end\n            end\n      \
    \  end\n    end\n    \n    return j\nend\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and returns the number of times each character appears in\
    \ the string. \nFor example, if the input string is \"abcabc\", the output should\
    \ be [('a', 3), ('b', 2), ('c', 3)]\nusing Test\n\n@testset begin\n\ncandidate\
    \ = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbp3i5q6x.jl:47\nin expression starting at\
    \ /tmp/tmpbp3i5q6x.jl:47\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    i\
    \ = 0\n    \n    while i < length(substring)\n        if substring(i, 1) == string\n\
    \            i += 1\n        else\n            i += 1\n        end\n    end\n\
    \    \n    return i\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\",\
    \ \"aaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"a\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaa\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\",\
    \ \"aaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"a\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaa\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\",\
    \ \"aaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"a\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaa\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\",\
    \ \"aaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"a\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <code language=julia-\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\
    \t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") ==\
    \ 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john\
    \ doe\", \"john\") == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjhd9muex.jl:25\nin expression starting at\
    \ /tmp/tmpjhd9muex.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    count\
    \ = 0\n    \n    for i in string.chars()\n        if substring == i\n        \
    \    count += 1\n        end\n    end\n    \n    return count\nend\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the number of times\
    \ a substring appears within that string. Count overlaping cases.\ne.g. \"aaaa\"\
    \ appears 3 times in the string\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\
    \t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") ==\
    \ 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john\
    \ doe\", \"john\") == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb0s14u1s.jl:23\nin expression starting at\
    \ /tmp/tmpb0s14u1s.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return 1 + how_many_times(string[1:], substring)\nend\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and a substring as arguments and returns\
    \ the number of times the substring appears in the string. Case insensitive.\n\
    using Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphwj02cag.jl:12\nin expression starting at\
    \ /tmp/tmphwj02cag.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ substring == string\n        return 1\n    else\n        return 1 + how_many_times(string[1..end-1],\
    \ substring)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\
    \t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\",\
    \ \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuj6qqylh.jl:12\nin expression starting at\
    \ /tmp/tmpuj6qqylh.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    count\
    \ = 0\n    \n    for c in string\n        if c == substring[0]\n            count\
    \ = count + 1\n            \n            if substring[1] == c\n              \
    \  count = count + 1\n            \n            if substring[2] == c\n       \
    \         count = count + 1\n            \n            if substring[3] == c\n\
    \                count = count + 1\n            \n            if substring[4]\
    \ == c\n                count = count + 1\n            \n            if substring[5]\
    \ == c\n                count = count + 1\n            \n            if substring[6]\
    \ == c\n                count = count + 1\n            \n            if substring[7]\
    \ == c\n                count = count + 1\n            \n            if substring[8]\
    \ == c\n                count = count + 1\n            \n            if substring[9]\
    \ == c\n                count = count + 1\n            \n            if substring[10]\
    \ == c\n                count = count + 1\n            \n            if substring[11]\
    \ == c\n                count = count + 1\n            \n            if substring[12]\
    \ == c\n                count = count + 1\n            \n            if substring[13]\
    \ == c\n                count = count + 1\n            \n            if substring[14]\
    \ == c\n                count = count + 1\n            \n            if substring[15]\
    \ == c\n                count = count + 1\n            \n            if substring[16]\
    \ == c\n                count = count + 1\n            \n            if substring[17]\
    \ == c\n                count = count + 1\n            \n            if substring[18]\
    \ == c\n                count = count + 1\n            \n            if substring[19]\
    \ == c\n                count = count + 1\n            \n            if substring[20]\
    \ == c\n                count = count + 1\n            \n            if substring[21]\
    \ == c\n                count = count + 1\n            \n            if substring[22]\
    \ == c\n                count = count + 1\n            \n            if substring[23]\
    \ == c\n                count = count + 1\n            \n            if substring[24]\
    \ == c\n                count = count + 1\n            \n            if substring[25]\
    \ == c\n                count = count + 1\n            \n            if substring[26]\
    \ == c\n                count = count + 1\n            \n            if substring[27]\
    \ == c\n                count = count + 1\n            \n            if substring[28]\
    \ == c\n                count = count + 1\n            \n            if substring[29]\
    \ == c\n                count = count + 1\n            \n            if substring[30]\
    \ == c\n                count = count + 1\n            \n            if substring[31]\
    \ == c\n                count = count + 1\n            \n            if substring[32]\
    \ == c\n                count = count + 1\n            \n            if substring[33]\
    \ == c\n                count = count + 1\n            \n            if substring[34]\
    \ == c\n                count = count + 1\n            \n            if substring[35]\
    \ == c\n                count = count + 1\n            \nusing Test\n\n@testset\
    \ begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\
    \t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\",\
    \ \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpciqsfmis.jl:1\nin expression starting at /tmp/tmpciqsfmis.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return 1 + how_many_times(string[1:], substring)\nend\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"aa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\"\
    , \"aaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaa\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaa\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaab\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabb\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbb\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbb\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbb\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbba\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbbaa\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbbaaa\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbbaaaa\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbbaaaaa\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbbaaaaaa\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbbaaaaaaa\"\
    )\n</cell>\n<code language=\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\
    \t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") ==\
    \ 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john\
    \ doe\", \"john\") == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmj_jhbem.jl:12\nin expression starting at\
    \ /tmp/tmpmj_jhbem.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    count\
    \ = 0\n    \n    for char in string\n        if char == substring[0]\n       \
    \     count += 1\n            \n            if char == substring[1]\n        \
    \        count += 1\n                \n                if char == substring[2]\n\
    \                    count += 1\n                    \n                    if\
    \ char == substring[3]\n                        count += 1\n                 \
    \       \n                        if char == substring[4]\n                  \
    \          count += 1\n                            \n                        \
    \    if char == substring[5]\n                                count += 1\n   \
    \                             \n                                if char == substring[6]\n\
    \                                    count += 1\n                            \
    \        \n                                    if char == substring[7]\n     \
    \                                   count += 1\n                             \
    \           \n                                        if char == substring[8]\n\
    \                                            count += 1\n                    \
    \                        \n                                            if char\
    \ == substring[9]\n                                                count += 1\n\
    \                                                \n                          \
    \                      if char == substring[10]\n                            \
    \                        count += 1\n                                        \
    \            \n                                                    if char ==\
    \ substring[11]\n                                                        count\
    \ += 1\n                                                        \n           \
    \                                             if char == substring[12]\n     \
    \                                                       count += 1\n         \
    \                                                   \n                       \
    \                                     if char == substring[13]\n             \
    \                                                   count += 1\n             \
    \                                                   \n                       \
    \                                         if char == substring[14]\n         \
    \                                                           count += 1\n     \
    \                                                               \n           \
    \                                                         if char == substring[15]\n\
    \                                                                        count\
    \ += 1\n                                                                     \
    \   \n                                                        if char == substring[16]\n\
    \                                                            count += 1\n    \
    \                                                        \n                  \
    \                                          if char == substring[17]\n        \
    \                                                        count += 1\n        \
    \                                                        \n                  \
    \                                              if char == substring[18]\n    \
    \                                                                count += 1\n\
    \                                                                    \n      \
    \                                                              if char == substring[19]\n\
    \                                                                        count\
    \ += 1\n                                                                     \
    \   \n                                                        if char == substring[20]\n\
    \                                                            count += 1\n    \
    \                                                        \n                  \
    \                                          if char == substring[21]\n        \
    \                                                        count += 1\n        \
    \                                                        \n                  \
    \                                              if char == substring[22]\n    \
    \                                                                count += 1\n\
    \                                                                    \n      \
    \                                                              if char == substring[23]\n\
    \                                                                        count\
    \ += 1\n                                                                     \
    \   \n                                                        if char == substring[24]\n\
    \                                                            count += 1\n    \
    \                                                        \n                  \
    \                                          if char == substring[25]\n        \
    \                                                        count += 1\n        \
    \                                                        \n                  \
    \                                              if char == substring[26]\n    \
    \                                                                count += 1\n\
    \                                                                    \n      \
    \                                                              if char == substring[27]\n\
    \                                                                        count\
    \ += 1\n                                                                     \
    \   \n                                                        if char == substring[28]\n\
    \                                                            count += 1\n    \
    \                                                        \n                  \
    \                                          if char == substring[29]\n        \
    \                                                        count += 1\n        \
    \                                                        \n                  \
    \                                              if char == substring[30]\n    \
    \                                                                count += 1\n\
    \                                                                    \n      \
    \                                                              if char == substring[31]\n\
    \                                                                        count\
    \ += 1\n                                                                     \
    \   \n                                                        if char == substring[32]\n\
    \                                                            count += 1\n    \
    \                                                        \n                  \
    \                                          if char == substring[33]\n        \
    \                                                        count += 1\n        \
    \                                                        \n                  \
    \                                              if char == substring[34]\n    \
    \                                                                count += 1\n\
    \                                                                    \n\nusing\
    \ Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\"\
    , \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnlcf0r7e.jl:1\nin expression starting at /tmp/tmpnlcf0r7e.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    len_string\
    \ = length(string)\n    len_substring = length(substring)\n    \n    if len_string\
    \ == 0 || len_substring == 0\n        return 0\n    \n    if len_string == len_substring\n\
    \        return count_overlaping_cases(string, substring)\n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3fok4ofi.jl:1\nin expression starting at /tmp/tmp3fok4ofi.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return 1 + how_many_times(string[1:], substring)\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a string and returns the number\
    \ of times a substring appears in the string. Case insensitive.\nusing Test\n\n\
    @testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\")\
    \ == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\"\
    , \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbabws1n3.jl:12\nin expression starting at\
    \ /tmp/tmpbabws1n3.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    count\
    \ = 0\n    \n    for char in string\n        if char == substring[0]\n       \
    \     count = count + 1\n            \n            if char == substring[1]\n \
    \               count = count + 1\n                \n            if char == substring[2]\n\
    \                count = count + 1\n                \n            if char == substring[3]\n\
    \                count = count + 1\n                \n            if char == substring[4]\n\
    \                count = count + 1\n                \n            if char == substring[5]\n\
    \                count = count + 1\n                \n            if char == substring[6]\n\
    \                count = count + 1\n                \n            if char == substring[7]\n\
    \                count = count + 1\n                \n            if char == substring[8]\n\
    \                count = count + 1\n                \n            if char == substring[9]\n\
    \                count = count + 1\n                \n            if char == substring[10]\n\
    \                count = count + 1\n                \n            if char == substring[11]\n\
    \                count = count + 1\n                \n            if char == substring[12]\n\
    \                count = count + 1\n                \n            if char == substring[13]\n\
    \                count = count + 1\n                \n            if char == substring[14]\n\
    \                count = count + 1\n                \n            if char == substring[15]\n\
    \                count = count + 1\n                \n            if char == substring[16]\n\
    \                count = count + 1\n                \n            if char == substring[17]\n\
    \                count = count + 1\n                \n            if char == substring[18]\n\
    \                count = count + 1\n                \n            if char == substring[19]\n\
    \                count = count + 1\n                \n            if char == substring[20]\n\
    \                count = count + 1\n                \n            if char == substring[21]\n\
    \                count = count + 1\n                \n            if char == substring[22]\n\
    \                count = count + 1\n                \n            if char == substring[23]\n\
    \                count = count + 1\n                \n            if char == substring[24]\n\
    \                count = count + 1\n                \n            if char == substring[25]\n\
    \                count = count + 1\n                \n            if char == substring[26]\n\
    \                count = count + 1\n                \n            if char == substring[27]\n\
    \                count = count + 1\n                \n            if char == substring[28]\n\
    \                count = count + 1\n                \n            if char == substring[29]\n\
    \                count = count + 1\n                \n            if char == substring[30]\n\
    \                count = count + 1\n                \n            if char == substring[31]\n\
    \                count = count + 1\n                \n            if char == substring[32]\n\
    \                count = count + 1\n                \n            if char == substring[33]\n\
    \                count = count + 1\n                \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\
    \t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\",\
    \ \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkf20qtu7.jl:1\nin expression starting at /tmp/tmpkf20qtu7.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    len_string\
    \ = length(string)\n    len_substring = length(substring)\n    \n    if len_string\
    \ == 0 || len_substring == 0\n        return 0\n    \n    if len_string == len_substring\n\
    \        return count_overlaping_cases(string, substring)\n    \n    if len_string\
    \ > len_substring\n        return how_many_times(substring(string, 1, len_substring),\
    \ substring)\n    \n    return how_many_times(substring(string, 0, len_string),\
    \ substring)\nend\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\
    \t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") ==\
    \ 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john\
    \ doe\", \"john\") == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpml32yfah.jl:1\nin expression starting at /tmp/tmpml32yfah.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return 1 + how_many_times(string[1:], substring)\nend\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns the number of times it appears\
    \ in the string and in the reverse of the string.\nusing Test\n\n@testset begin\n\
    \ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5gefeayi.jl:12\nin expression starting at\
    \ /tmp/tmp5gefeayi.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    count = 0\n    for char in string:\n        if char == substring:\n  \
    \          count += 1\n    return count\n</code>\n<|/ a tags=string,julia |>\n\
    <| c |>\nThanks for your answer. Your code works, but it takes too much time for\
    \ my case. My string is about 10^6 characters and my substring is about 10^3 characters.\
    \ I guess it takes too much time for my case.\n<|/ c |>\n<| c |>\nI tested it\
    \ on 10^6 characters and 10^3 characters. I guess it takes too much time for my\
    \ case.\n<|/ c |>\n<| c |>\nI guess it takes too much time for my case. My string\
    \ is about 10^6 characters and my substring is about 10^3 characters. I guess\
    \ it takes too much time for my case.\n<|/ c |>\n<| c |>\nI tested it on 10^6\
    \ characters and 10^3 characters. I guess it takes too much time for my case.\n\
    <|/ c |>\n<| c |>\nI guess it takes too much time for my case. My string is about\
    \ 10^6 characters and my substring is about 10^3 characters. I guess it takes\
    \ too much time for my case.\n<|/ c |>\n<| a tags=string,julia |>\nI guess it\
    \ takes too much time for my case.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi0wgpmew.jl:12\nin expression starting at\
    \ /tmp/tmpi0wgpmew.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ substring.length() == 0\n        return 1\n    else if string.length() == 0\n\
    \        return 0\n    else if substring.length() == 1\n        if string.substring(0,substring.length())\
    \ == substring\n            return 1\n        else\n            return 0\n   \
    \ else if substring.length() == string.length()\n        if string.substring(0,substring.length())\
    \ == substring\n            return 1\n        else\n            return 0\n   \
    \ else if substring.length() > string.length()\n        if string.substring(0,substring.length())\
    \ == substring\n            return how_many_times(string.substring(substring.length()),\
    \ substring)\n        else\n            return 0\n    else if substring.length()\
    \ < string.length()\n        if string.substring(0,substring.length()) == substring\n\
    \            return how_many_times(string.substring(substring.length()), substring)\n\
    \        else\n            return 0\n    else if substring.length() == string.length()\n\
    \        if string.substring(0,substring.length()) == substring\n            return\
    \ 1\n        else\n            return 0\n    else if substring.length() > string.length()\n\
    \        if string.substring(0,substring.length()) == substring\n            return\
    \ how_many_times(string.substring(substring.length()), substring)\n        else\n\
    \            return 0\n    else if substring.length() < string.length()\n    \
    \    if string.substring(0,substring.length()) == substring\n            return\
    \ how_many_times(string.substring(substring.length()), substring)\n        else\n\
    \            return 0\n    else if substring.length() == string.length()\n   \
    \     if string.substring(0,substring.length()) == substring\n            return\
    \ 1\n        else\n            return 0\n    else if substring.length() > string.length()\n\
    \        if string.substring(0,substring.length()) == substring\n            return\
    \ how_many_times(string.substring(substring.length()), substring)\n        else\n\
    \            return 0\n    else if substring.length() < string.length()\n    \
    \    if string.substring(0,substring.length()) == substring\n            return\
    \ how_many_times(string.substring(substring.length()), substring)\n        else\n\
    \            return 0\n    else if substring.length() == string.length()\n   \
    \     if string.substring(0,substring.length()) == substring\n            return\
    \ 1\n        else\n            return 0\n    else if substring.length() > string.length()\n\
    \        if string.substring(0,substring.length()) == substring\n            return\
    \ how_many_times(string.substring(substring.length()), substring)\n        else\n\
    \            return 0\n    else if substring.length() < string.length()\n    \
    \    if string.substring(0,substring.length()) == substring\n            return\
    \ how_many_times(string.substring(substring.length()), substring)\n        else\n\
    \            return 0\n    else if substring.length() == string.length()\n   \
    \     if string.substring(0,substring.length()) == substring\n            return\
    \ 1\n        else\n            return 0\n    else if substring.length() > string.length\n\
    using Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphd_eztln.jl:12\nin expression starting at\
    \ /tmp/tmphd_eztln.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    len_string\
    \ = length(string)\n    len_substring = length(substring)\n    \n    if len_string\
    \ == 0 || len_substring == 0\n        return 0\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \nusing Test\n\n@testset begin\n\
    \ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6xo0ru4f.jl:1\nin expression starting at /tmp/tmp6xo0ru4f.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    count\
    \ = 0\n    \n    for c in string\n        if c == substring\n            count\
    \ += 1\n        else\n            count = 0\n    end\n    \n    return count\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwtbgueh3.jl:24\nin expression starting at\
    \ /tmp/tmpwtbgueh3.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    count = 0\n    pos = string.find(substring)\n    while pos != nothing\n\
    \        count += 1\n        pos = string.find(substring, pos + 1)\n    end\n\
    \    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\
    \t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") ==\
    \ 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john\
    \ doe\", \"john\") == 1)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmppujv7tiv.jl:23\n  Test threw exception\n\
    \  Expression: candidate(\"\", \"x\") == 0\n  type String has no field find\n\
    \  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] how_many_times(string::String,\
    \ substring::String)\n     @ Main /tmp/tmppujv7tiv.jl:11\n   [3] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmppujv7tiv.jl:23 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmppujv7tiv.jl:22\ntest set:\
    \ Error During Test at /tmp/tmppujv7tiv.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"xyxyxyx\", \"x\") == 4\n  type String has no field find\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] how_many_times(string::String,\
    \ substring::String)\n     @ Main /tmp/tmppujv7tiv.jl:11\n   [3] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmppujv7tiv.jl:24 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmppujv7tiv.jl:22\ntest set:\
    \ Error During Test at /tmp/tmppujv7tiv.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"cacacacac\", \"cac\") == 4\n  type String has no field find\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] how_many_times(string::String,\
    \ substring::String)\n     @ Main /tmp/tmppujv7tiv.jl:11\n   [3] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmppujv7tiv.jl:25 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmppujv7tiv.jl:22\ntest set:\
    \ Error During Test at /tmp/tmppujv7tiv.jl:26\n  Test threw exception\n  Expression:\
    \ cand"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppujv7tiv.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return 1 + how_many_times(string[1:], substring)\nend\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a string and returns the number of times\
    \ the string \"a\" appears in the string. \nWrite a function that takes a string\
    \ and returns the number of times the string \"a\" appears in the string. \nWrite\
    \ a function that takes a string and returns the number of times the string \"\
    a\" appears in the string. \nWrite a function that takes a string and returns\
    \ the number of times the string \"a\" appears in the string. \nWrite a function\
    \ that takes a string and returns the number of times the string \"a\" appears\
    \ in the string. \nWrite a function that takes a string and returns the number\
    \ of times the string \"a\" appears in the string. \nWrite a function that takes\
    \ a string and returns the number of times the string \"a\" appears in the string.\
    \ \nWrite a function that takes a string and returns the number of times the string\
    \ \"a\" appears in the string. \nWrite a function that takes a string and returns\
    \ the number of times the string \"a\" appears in the string. \nWrite a function\
    \ that takes a string and returns the number of times the string \"a\" appears\
    \ in the string. \nWrite a function that takes a string and returns the number\
    \ of times the string \"a\" appears in the string. \nWrite a function that takes\
    \ a string and returns the number of times the string \"a\" appears in the string.\
    \ \nWrite a function that takes a string and returns the number of times the string\
    \ \"a\" appears in the string. \nWrite a function that takes a string and returns\
    \ the number of times the string \"a\" appears in the string. \nWrite a function\
    \ that takes a string and returns the number of times the string \"a\" appears\
    \ in the string. \nWrite a function that takes a string and returns the number\
    \ of times the string \"a\" appears in the string. \nWrite a function that takes\
    \ a string and returns the number of times the string \"a\" appears in the string.\
    \ \nWrite a function that takes a string and returns the number of times the string\
    \ \"a\" appears in the string. \nWrite a function that takes a string and returns\
    \ the number of times the string \"a\" appears in the string. \nWrite a function\
    \ that takes a string and returns the number of times the string \"a\" appears\
    \ in the string. \nWrite a function that takes a string and returns the number\
    \ of times the string \"a\" appears in the string. \nWrite a function that takes\
    \ a string and returns the number of times the string \"a\" appears in the string.\
    \ \nWrite a function that takes a string and returns the number of times the string\
    \ \nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpym0ohidb.jl:12\nin expression starting at\
    \ /tmp/tmpym0ohidb.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    count = 0\n    for char in string\n        if char == substring\n    \
    \        count += 1\n        end\n    end\n    return count\nend\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times('aaaa', 'aa')\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns the number of times a substring\
    \ appears in the string. Count overlaping cases.\n>>> how_many_times('', 'a')\n\
    0\n>>> how_many_times('aaa', 'a')\n3\n>>> how_many_times('aaaa', 'aa')\n3\n>>>\
    \ how_many_times('aaaa', 'aaa')\n4\n>>> how_many_times('aaaa', 'aaaa')\n4\n>>>\
    \ how_many_times('aaaa', 'aaaaa')\n5\n>>> how_many_times('aaaa', 'aaaaaa')\n5\n\
    >>> how_many_times('aaaa', 'aaaaaaa')\n6\n>>> how_many_times('aaaa', 'aaaaaaab')\n\
    6\n>>> how_many_times('aaaa', 'aaaaaaabb')\n6\n>>> how_many_times('aaaa', 'aaaaaaabbb')\n\
    6\n>>> how_many_times('aaaa', 'aaaaaaabbbb')\n6\n>>> how_many_times('aaaa', 'aaaaaaabbbbb')\n\
    6\n>>> how_many_times('aaaa', 'aaaaaaabbbbbb')\n6\n>>> how_many_times('aaaa',\
    \ 'aaaaaaabbbbbbb')\n6\n>>> how_many_times('aaaa', 'aaaaaaabbbbbbbb')\n6\n>>>\
    \ how_many_times('aaaa', 'aaaaaaabbbbbbbbb')\n6\n>>> how_many_times('aaaa', 'aaaaaaabbbbbbbbbb')\n\
    6\n>>> how_many_times('aaaa', 'aaaaaaabbbbbbbbbbb')\n6\n>>> how_many_times('aaaa',\
    \ 'aaaaaaabbbbbbbbbbbb')\n6\n>>> how_many_times('aaaa', 'aaaaaaabbbbbbbbbbbbb')\n\
    6\n>>> how_many_times('aaaa', 'aaaaaaabbbbbbbbbbbbbb')\n6\n>>> how_many_times('aaaa',\
    \ 'aaaaaaabbbbbbbbbbbbbbb')\n6\n>>> how_many_times('aaaa', 'aaaaaaabbbbbbbbbbbbbbbb')\n\
    6\n>>> how_many_times('aaaa', 'aaaaaaabbbbbbbbbbbbbbbbb')\n6\n>>> how_many_times('aaaa',\
    \ 'aaaaaaabbbbbbbbbbbbbbbbbb')\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\
    \t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") ==\
    \ 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john\
    \ doe\", \"john\") == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0pjriuur.jl:18\nin expression starting at\
    \ /tmp/tmp0pjriuur.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    count\
    \ = 0\n    \n    for char in string\n        if char == substring[0]\n       \
    \     count = count + 1\n            \n            if char == substring[1]\n \
    \               count = count + 1\n                \n            if char == substring[2]\n\
    \                count = count + 1\n                \n            if char == substring[3]\n\
    \                count = count + 1\n                \n            if char == substring[4]\n\
    \                count = count + 1\n                \n            if char == substring[5]\n\
    \                count = count + 1\n                \n            if char == substring[6]\n\
    \                count = count + 1\n                \n            if char == substring[7]\n\
    \                count = count + 1\n                \n            if char == substring[8]\n\
    \                count = count + 1\n                \n            if char == substring[9]\n\
    \                count = count + 1\n                \n            if char == substring[10]\n\
    \                count = count + 1\n                \n            if char == substring[11]\n\
    \                count = count + 1\n                \n            if char == substring[12]\n\
    \                count = count + 1\n                \n            if char == substring[13]\n\
    \                count = count + 1\n                \n            if char == substring[14]\n\
    \                count = count + 1\n                \n            if char == substring[15]\n\
    \                count = count + 1\n                \n            if char == substring[16]\n\
    \                count = count + 1\n                \n            if char == substring[17]\n\
    \                count = count + 1\n                \n            if char == substring[18]\n\
    \                count = count + 1\n                \n            if char == substring[19]\n\
    \                count = count + 1\n                \n            if char == substring[20]\n\
    \                count = count + 1\n                \n            if char == substring[21]\n\
    \                count = count + 1\n                \n            if char == substring[22]\n\
    \                count = count + 1\n                \n            if char == substring[23]\n\
    \                count = count + 1\n                \n            if char == substring[24]\n\
    \                count = count + 1\n                \n            if char == substring[25]\n\
    \                count = count + 1\n                \n            if char == substring[26]\n\
    \                count = count + 1\n                \n            if char == substring[27]\n\
    \                count = count + 1\n                \n            if char == substring[28]\n\
    \                count = count + 1\n                \n            if char == substring[29]\n\
    \                count = count + 1\n                \n            if char == substring[30]\n\
    \                count = count + 1\n                \n            if char == substring[31]\n\
    \                count = count + 1\n                \n            if char == substring[32]\n\
    \                count = count + 1\n                \n            if char == substring[33]\n\
    \                count = count + 1\n                \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\
    \t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\",\
    \ \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8uxerwda.jl:1\nin expression starting at /tmp/tmp8uxerwda.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    \n    if string[0] == substring[1]\n        return 1 + how_many_times(string[1:],\
    \ substring[2:])\n    \n    if string[1] == substring[0]\n        return 1 + how_many_times(string[2:],\
    \ substring[1:])\n    \n    if string[1] == substring[1]\n        return 1 + how_many_times(string[2:],\
    \ substring[2:])\n    \n    return 0\nend\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and returns the number of times the string \"aa\" appears\
    \ in the string. \n>>> how_many_times(\"aaaa\", \"aa\")\n3\n>>> how_many_times(\"\
    aaaa\", \"bb\")\n0\n>>> how_many_times(\"aaaa\", \"aaa\")\n0\n>>> how_many_times(\"\
    aaaa\", \"aaaa\")\n0\n>>> how_many_times(\"aaaa\", \"aaaaa\")\n0\n>>> how_many_times(\"\
    aaaa\", \"aaaaaa\")\n0\n>>> how_many_times(\"aaaa\", \"aaaaaaa\")\n0\n>>> how_many_times(\"\
    aaaa\", \"aaaaaaab\")\n0\n>>> how_many_times(\"aaaa\", \"aaaaaaabb\")\n0\n>>>\
    \ how_many_times(\"aaaa\", \"aaaaaaabbb\")\n0\n>>> how_many_times(\"aaaa\", \"\
    aaaaaaabbbb\")\n0\n>>> how_many_times(\"aaaa\", \"aaaaaaabbbbba\")\n0\n>>> how_many_times(\"\
    aaaa\", \"aaaaaaabbbbbaa\")\n0\n>>> how_many_times(\"aaaa\", \"aaaaaaabbbbbaaa\"\
    )\n0\n>>> how_many_times(\"aaaa\", \"aaaaaaabbbbbaaaa\")\n0\n>>> how_many_times(\"\
    aaaa\", \"aaaaaaabbbbbaaaaa\")\n0\n>>> how_many_times(\"aaaa\", \"aaaaaaabbbbbaaaaaa\"\
    )\n0\n>>> how_many_times(\"aaaa\", \"aaaaaaabbbbbaaaaaaa\")\n0\n>>> how_many_times(\"\
    aaaa\", \"aaaaaaabbbbbaaaaaaaa\")\n0\n>>> how_many_times(\"aaaa\", \"aaaaaaabbbbbaaaaaaaab\"\
    )\n0\n>>> how_many_\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\
    \t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") ==\
    \ 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john\
    \ doe\", \"john\") == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpn2_ygi85.jl:14\nin expression\
    \ starting at /tmp/tmpn2_ygi85.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    count = 0\n    for c in string:\n        if c == substring:\n        \
    \    count += 1\n    return count\n</code>\n<|/ a tags=string,julia |>\n<| c |>\n\
    This doesn't work for `how_many_times('aaaa', 'aa')` which should return 2.\n\
    <|/ c |>\n<| c |>\nI see what you mean. I've updated my answer to account for\
    \ that case.\n<|/ c |>\n<| a dscore=2 |>\nHere's a solution that uses no loops\
    \ and no mutable variables:\n<code>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv01owro2.jl:12\nin expression starting at\
    \ /tmp/tmpv01owro2.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    count\
    \ = 0\n    \n    for char in string\n        if char == substring[0]\n       \
    \     count = count + 1\n            \n            if char == substring[1]\n \
    \               count = count + 1\n                \n            if char == substring[2]\n\
    \                count = count + 1\n                \n            if char == substring[3]\n\
    \                count = count + 1\n                \n            if char == substring[4]\n\
    \                count = count + 1\n                \n            if char == substring[5]\n\
    \                count = count + 1\n                \n            if char == substring[6]\n\
    \                count = count + 1\n                \n            if char == substring[7]\n\
    \                count = count + 1\n                \n            if char == substring[8]\n\
    \                count = count + 1\n                \n            if char == substring[9]\n\
    \                count = count + 1\n                \n            if char == substring[10]\n\
    \                count = count + 1\n                \n            if char == substring[11]\n\
    \                count = count + 1\n                \n            if char == substring[12]\n\
    \                count = count + 1\n                \n            if char == substring[13]\n\
    \                count = count + 1\n                \n            if char == substring[14]\n\
    \                count = count + 1\n                \n            if char == substring[15]\n\
    \                count = count + 1\n                \n            if char == substring[16]\n\
    \                count = count + 1\n                \n            if char == substring[17]\n\
    \                count = count + 1\n                \n            if char == substring[18]\n\
    \                count = count + 1\n                \n            if char == substring[19]\n\
    \                count = count + 1\n                \n            if char == substring[20]\n\
    \                count = count + 1\n                \n            if char == substring[21]\n\
    \                count = count + 1\n                \n            if char == substring[22]\n\
    \                count = count + 1\n                \n            if char == substring[23]\n\
    \                count = count + 1\n                \n            if char == substring[24]\n\
    \                count = count + 1\n                \n            if char == substring[25]\n\
    \                count = count + 1\n                \n            if char == substring[26]\n\
    \                count = count + 1\n                \n            if char == substring[27]\n\
    \                count = count + 1\n                \n            if char == substring[28]\n\
    \                count = count + 1\n                \n            if char == substring[29]\n\
    \                count = count + 1\n                \n            if char == substring[30]\n\
    \                count = count + 1\n                \n            if char == substring[31]\n\
    \                count = count + 1\n                \n            if char == substring[32]\n\
    \                count = count + 1\n                \n            if char == substring[33]\n\
    \                count = count + 1\n                \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\
    \t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\",\
    \ \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkz4iim58.jl:1\nin expression starting at /tmp/tmpkz4iim58.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return 1 + how_many_times(string[1:], substring)\nend\n</cell>\n\
    <code language=julia-1.3>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns the number of times a substring\
    \ appears within the string. Count overlaping cases.\nusing Test\n\n@testset begin\n\
    \ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpui1fbz57.jl:12\nin expression starting at\
    \ /tmp/tmpui1fbz57.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    count\
    \ = 0\n    \n    for char in string\n        if char == substring\n          \
    \  count += 1\n        else\n            count = 0\n    end\n    return count\n\
    end\n</cell>\n<code language=julia-1.3>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of times a substring appears in the string. \nFor example, if the string is\
    \ \"aaabbccc\" and substring is \"b\", the function should return 3.\nusing Test\n\
    \n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\"\
    ) == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\"\
    , \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp54v9mqzm.jl:23\nin expression starting at\
    \ /tmp/tmp54v9mqzm.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    string::String\
    \ = string.lower()\n    substring::String = substring.lower()\n    \n    i = 0\n\
    \    \n    while i < length(string)\n        if string[i] == substring[0]\n  \
    \          i += 1\n        else\n            if string[i] == substring[1]\n  \
    \              i += 1\n            else\n                if string[i] == substring[2]\n\
    \                    i += 1\n                else\n                    if string[i]\
    \ == substring[3]\n                        i += 1\n                    else\n\
    \                        if string[i] == substring[4]\n                      \
    \      i += 1\n                        else\n                            if string[i]\
    \ == substring[5]\n                                i += 1\n                  \
    \          else\n                                if string[i] == substring[6]\n\
    \                                    i += 1\n                                else\n\
    \                                    if string[i] == substring[7]\n          \
    \                              i += 1\n                                    else\n\
    \                                        if string[i] == substring[8]\n      \
    \                                      i += 1\n                              \
    \          else\n                                            if string[i] == substring[9]\n\
    \                                                i += 1\n                    \
    \                        else\n                                              \
    \  if string[i] == substring[10]\n                                           \
    \         i += 1\n                                                else\n     \
    \                                               if string[i] == substring[11]\n\
    \                                                        i += 1\n            \
    \                                        else\n                              \
    \                          if string[i] == substring[12]\n                   \
    \                                         i += 1\n                           \
    \                             else\n                                         \
    \                   if string[i] == substring[13]\n                          \
    \                                      i += 1\n                              \
    \                              else\n                                        \
    \                        if string[i] == substring[14]\n                     \
    \                                               i += 1\n                     \
    \                                           else\n                           \
    \                                         if string[i] == substring[15]\n    \
    \                                                                    i += 1\n\
    \                                                                    else\n  \
    \                                                                      i += 1\n\
    \    return i\nend\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"aaa\"\
    , \"a\")\n</cell>\n<text>\nExercise 3\nWrite a function that counts the number\
    \ of times a substring appears in a string. Count overlaping cases.\n>>> count_substring(\"\
    aaa\", \"a\")\n2\n>>> count_substring(\"aaa\", \"b\")\n0\n>>> count_substring(\"\
    aaa\", \"ab\")\n1\n>>> count_substring(\"aaa\", \"aba\")\n1\n>>> count_substring(\"\
    aaa\", \"abaa\")\n2\n>>> count_substring(\"aaa\", \"abaaa\")\n3\n>>> count_substring(\"\
    aaa\", \"abaaab\")\n4\n>>> count_substring(\"aaa\", \"abaaaba\")\n5\n>>> count_substring(\"\
    aaa\", \"abaaabaa\")\n6\n>>> count_substring(\"aaa\", \"abaaabaaa\")\n7\n>>> count_substring(\"\
    aaa\", \"abaaabaaab\")\n8\n>>> count_substring(\"aaa\", \"abaaabaaaba\")\n9\n\
    >>> count_substring(\"aaa\", \"abaaabaaabaa\")\n10\n>>> count_substring(\"aaa\"\
    , \"abaaabaaabaaa\")\n11\n>>> count_substring(\"aaa\", \"abaaabaaabaa\nusing Test\n\
    \n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\"\
    ) == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\"\
    , \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz2dr470q.jl:70\nin expression starting at\
    \ /tmp/tmpz2dr470q.jl:70\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    count\
    \ = 0\n    \n    for char in string\n        if char == substring\n          \
    \  count += 1\n        else\n            count = 0\n    end\n    return count\n\
    end\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"aaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aaab\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\"\
    , \"aaaba\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"\
    aaabaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaabaaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaabaaab\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaabaaaba\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaabaaabaa\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaabaaabaaa\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaabaaabaaab\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaabaaabaaaba\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaabaaabaaabaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaabaaabaaabaaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaabaaabaaabaaab\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaabaaabaaabaaaba\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaabaaabaaabaaabaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaabaaabaaabaaabaaa\"\
    )\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8avwp038.jl:23\nin expression starting at\
    \ /tmp/tmp8avwp038.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ substring == string\n        return 1\n    else\n        return 1 + how_many_times(string[1:],\
    \ substring)\nend\n</cell>\n<code language=julia-1.0>\nhow_many_times(\"aaaa\"\
    , \"aa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and\
    \ returns a new string where all occurrences of \"a\" have been replaced with\
    \ \"b\".\n>>> replace_all(\"aaa\", \"a\", \"b\")\n\"bbb\"\n>>> replace_all(\"\
    aaaa\", \"a\", \"b\")\n\"bbbb\"\n>>> replace_all(\"aaaaa\", \"a\", \"b\")\n\"\
    bbbbb\"\n>>> replace_all(\"aaaaaa\", \"a\", \"b\")\n\"bbbbbb\"\n>>> replace_all(\"\
    aaaaaaa\", \"a\", \"b\")\n\"bbbbbbb\"\n>>> replace_all(\"aaaaaaab\", \"a\", \"\
    b\")\n\"bbbbbbbb\"\n>>> replace_all(\"aaaaaaabb\", \"a\", \"b\")\n\"bbbbbbbba\"\
    \n>>> replace_all(\"aaaaaaabbb\", \"a\", \"b\")\n\"bbbbbbbbaa\"\n>>> replace_all(\"\
    aaaaaaabbbb\", \"a\", \"b\")\n\"bbbbbbbbaaa\"\n>>> replace_all(\"aaaaaaabbbbba\"\
    , \"a\", \"b\")\n\"bbbbbbbbaaaa\"\n>>> replace_all(\"aaaaaaabbbbbaa\", \"a\",\
    \ \"b\")\n\"bbbbbbbbaaaab\"\n>>> replace_all(\"aaaaaaabbbbbaaa\", \"a\", \"b\"\
    )\n\"bbbbbbbbaaaabb\"\n>>> replace_all(\"aaaaaaabbbbbaaaa\", \"a\", \"b\")\n\"\
    bbbbbbbbaaaabbb\"\n>>> replace_all(\"aaaaaaabbbbbaaaab\", \"a\", \"b\")\n\"bbbbbbbbaaaabbbb\"\
    \n>>> replace_all(\"aaaaaaabbbbbaaaabb\", \"a\", \"b\")\n\"bbbbbbbbaaaabbbbba\"\
    \n>>> replace_all(\"aaaaaaabbbbbaaaabbb\", \"a\", \"b\")\n\"bbbbbbbbaaaabbbbbaa\"\
    \n>>> replace_all(\"aaaaaaabbbbbaaaabbbb\", \"a\", \"b\")\n\"bbbbbbbbaaaabbbbbaaa\"\
    \n>>> replace_all(\"aaaaaaabbbbbaaaabbbbba\", \"a\", \"b\")\n\"bbbbbbbbaaaabbbbbaaaab\"\
    \n>>> replace_all(\"aaaaaaabbbbbaaaabbbbbaa\", \"a\", \"b\")\n\"bbbbbbbbaaaabbbbbaaaabb\"\
    \n>>> replace_\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t\
    @test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\
    \t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\"\
    , \"john\") == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_hxzfixo.jl:12\nin expression starting at\
    \ /tmp/tmp_hxzfixo.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring) + how_many_times(string[1:],\
    \ substring[1:])\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\"\
    , \"aa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and\
    \ returns the number of times each character appears in the string. Ignore case\
    \ when counting.\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\
    \t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") ==\
    \ 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john\
    \ doe\", \"john\") == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmv8m8r_n.jl:12\nin expression starting at\
    \ /tmp/tmpmv8m8r_n.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring) + how_many_times(string,\
    \ substring[1:])\nend\n</cell>\n<code language=julia-1.3>\nhow_many_times(\"aaa\"\
    , \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and\
    \ a substring and returns the number of times the substring appears in the string.\n\
    using Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc41as895.jl:12\nin expression starting at\
    \ /tmp/tmpc41as895.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ substring == string\n        return 1\n    else if string[1..] == substring\n\
    \        return 1 + how_many_times(string[2..], substring)\n    else\n       \
    \ return how_many_times(string[2..], substring) + how_many_times(string[1..],\
    \ substring)\nend\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"aaaa\"\
    , \"aa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and\
    \ a substring and returns the number of times the substring appears in the string.\n\
    using Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphshsdmrm.jl:12\nin expression starting at\
    \ /tmp/tmphshsdmrm.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    len_string\
    \ = length(string)\n    len_substring = length(substring)\n    \n    if len_string\
    \ == 0 || len_substring == 0\n        return 0\n    \n    if len_string == len_substring\n\
    \        return 1\n    \n    if len_string > len_substring\n        return how_many_times(substring(string,\
    \ 1, len_substring), substring)\n    \n    return how_many_times(substring(string,\
    \ 0, len_substring), substring)\nend\n</cell>\n<code language=julia-1.3>\nhow_many_times(\"\
    aaaa\", \"aa\")\n</cell>\n<code language=julia-1.3>\nhow_many_times(\"aaaa\",\
    \ \"a\")\n</cell>\n<code language=julia-1.3>\nhow_many_times(\"aaaa\", \"aaa\"\
    )\n</cell>\n<code language=julia-1.3>\nhow_many_times(\"aaaa\", \"aaaa\")\n</cell>\n\
    <code language=julia-1.3>\nhow_many_times(\"aaaa\", \"aaaaa\")\n</cell>\n<code\
    \ language=julia-1.3>\nhow_many_times(\"aaaa\", \"aaaaaa\")\n</cell>\n<code language=julia-1.3>\n\
    how_many_times(\"aaaa\", \"aaaaaaa\")\n</cell>\n<code language=julia-1.3>\nhow_many_times(\"\
    aaaa\", \"aaaaaaab\")\n</cell>\n<code language=julia-1.3>\nhow_many_times(\"aaaa\"\
    , \"aaaaaaabb\")\n</cell>\n<code language=julia-1.3>\nhow_many_times(\"aaaa\"\
    , \"aaaaaaabbb\")\n</cell>\n<code language=julia-1.3>\nhow_many_times(\"aaaa\"\
    , \"aaaaaaabbbb\")\n</cell>\n<code language=julia-1.3>\nhow_many_times(\"aaaa\"\
    , \"aaaaaaabbbbba\")\n</cell>\n<code language=julia-1.3>\nhow_many_times(\"aaaa\"\
    , \"aaaaaaabbbbbaa\")\n</cell>\n<code language=julia-1.3>\nhow_many_times(\"aaaa\"\
    , \"aaaaaaabbbbbaaa\")\n</cell>\n<code language=julia-1.3>\nhow_many_times(\"\
    aaaa\", \"aaaaaaabbbbbaaaa\")\n</cell>\n<code language=julia-1.3>\nhow_many_times(\"\
    aaaa\", \"aaaaaaabbbbbaaaaa\")\n</cell>\n<code language=julia-1.3>\nhow_many_times(\"\
    aaaa\", \"aaaaaaabbbbbaaaaaa\")\n</cell>\n<code language=julia-1.3>\nusing Test\n\
    \n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\"\
    ) == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\"\
    , \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplg0ds3ru.jl:27\nin expression starting at\
    \ /tmp/tmplg0ds3ru.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    len_string\
    \ = length(string)\n    len_substring = length(substring)\n    \n    if len_string\
    \ == 0 || len_substring == 0\n        return 0\n    \n    if len_string == len_substring\n\
    \        return count_substring(string, substring)\n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmofd6flp.jl:1\nin expression starting at /tmp/tmpmofd6flp.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    count\
    \ = 0\n    \n    for c in string\n        if c == substring\n            count\
    \ += 1\n        else\n            count = 0\n    end\n    \n    return count\n\
    end\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and a substring and returns\
    \ the number of times the substring appears in the string. Ignore case. \nHint:\
    \ Use a for loop and a counter.\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\
    \t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") ==\
    \ 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john\
    \ doe\", \"john\") == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpec5anlo2.jl:24\nin expression starting at\
    \ /tmp/tmpec5anlo2.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the longest common prefix of\
    \ two strings. \nThe function should return the empty string if either of the\
    \ strings is empty.\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\
    \t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") ==\
    \ 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john\
    \ doe\", \"john\") == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf_5v_fv8.jl:12\nin expression starting at\
    \ /tmp/tmpf_5v_fv8.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring) + how_many_times(string,\
    \ substring[1:])\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\"\
    , \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\"\
    )\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and a substring\
    \ and returns the number of times the substring appears in the string. Case insensitive.\n\
    using Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi8z82ra8.jl:12\nin expression starting at\
    \ /tmp/tmpi8z82ra8.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring)\nend\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\n\
    Exercise 4\nWrite a function that takes a string and returns the number of times\
    \ each character appears in the string. \nFor example, for the string \"abcabc\"\
    , your function should return [('a', 3), ('b', 2), ('c', 3)]\nusing Test\n\n@testset\
    \ begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\
    \t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\",\
    \ \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpocrtt45t.jl:12\nin expression starting at\
    \ /tmp/tmpocrtt45t.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring) + how_many_times(string[1:],\
    \ substring[1:])\nend\n</cell>\n<code language=julia-1.3>\nhow_many_times(\"aaa\"\
    , \"a\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string and\
    \ returns the number of times a substring appears in the string. Count overlaping\
    \ cases.\n>>> how_many_times('', 'a')\n0\n>>> how_many_times('aaa', 'a')\n3\n\
    >>> how_many_times('aaaa', 'aa')\n3\n>>> how_many_times('aaaa', 'ab')\n2\n>>>\
    \ how_many_times('aaaa', 'aba')\n2\n>>> how_many_times('aaaa', 'abaa')\n2\n>>>\
    \ how_many_times('aaaa', 'abaaa')\n2\n>>> how_many_times('aaaa', 'abaaab')\n2\n\
    >>> how_many_times('aaaa', 'abaaaba')\n2\n>>> how_many_times('aaaa', 'abaaabaa')\n\
    2\n>>> how_many_times('aaaa', 'abaaabaaa')\n2\n>>> how_many_times('aaaa', 'abaaabaaab')\n\
    2\n>>> how_many_times('aaaa', 'abaaabaaaba')\n2\n>>> how_many_times('aaaa', 'abaaabaaabaa')\n\
    2\n>>> how_many_times('aaaa', 'abaaabaaabaaa')\n2\n>>> how_many_times('aaaa',\
    \ 'abaaabaaabaaab')\n2\n>>> how_many_times('aaaa', 'abaaabaaabaaaba')\n2\n>>>\
    \ how_many_times('aaaa', 'abaaabaaabaaabaa')\n2\n>>> how_many_times('aaaa', 'abaaabaaabaaabaaa')\n\
    2\n>>> how_many_times('aaaa', 'abaaabaaabaaabaaab')\n2\n>>> how_many_times('aaaa',\
    \ 'abaaabaaabaaabaaaba')\n2\n>>> how_many_times('aaaa', 'abaaabaaabaaabaaabaa')\n\
    2\n>>> how_many_times('aaaa', 'abaaabaa\nusing Test\n\n@testset begin\n\ncandidate\
    \ = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdpcv0tj7.jl:12\nin expression starting at\
    \ /tmp/tmpdpcv0tj7.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    len_string\
    \ = length(string)\n    len_substring = length(substring)\n    \n    if len_string\
    \ == 0 || len_substring == 0\n        return 0\n    \n    i = 0\n    j = 0\n \
    \   \n    while i < len_string && j < len_substring\n        if string[i] == substring[j]\n\
    \            i += 1\n            j += 1\n        else\n            if string[i]\
    \ > substring[j]\n                i += 1\n            else\n                j\
    \ += 1\n        end\n    end\n    \n    if i == len_string\n        return j\n\
    \    else\n        return j - i\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\"\
    , \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz02_olj2.jl:39\nin expression starting at\
    \ /tmp/tmpz02_olj2.jl:39\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0 \n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else if string[-1] == substring[-1]\n        return 1 + how_many_times(string[1..-1],\
    \ substring[1..-1])\n    else\n        return how_many_times(string[1:], substring)\
    \ + how_many_times(string[1..-1], substring[1..-1])\nend\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"aa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\"\
    , \"aaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaa\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaa\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaab\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabb\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbb\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbb\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbb\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbba\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbbaa\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbbaaa\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbbaaaa\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbbaaaaa\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbbaaaaaa\")\n\
    </cell>\n<code language=julia-\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\
    \t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") ==\
    \ 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john\
    \ doe\", \"john\") == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph_zgkugk.jl:12\nin expression starting at\
    \ /tmp/tmph_zgkugk.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    count\
    \ = 0\n    \n    for i in string\n        if i == substring\n            count\
    \ += 1\n        else\n            count = 0\n    end\n    return count\nend\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and a substring and returns\
    \ the number of times the substring appears in the string. Case insensitive.\n\
    using Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdln_kqj1.jl:23\nin expression starting at\
    \ /tmp/tmpdln_kqj1.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ substring == string\n        return 1\n    else\n        return 1 + how_many_times(string[1:end-1],\
    \ substring) + how_many_times(string[end+1:end-1], substring)\nend\n</cell>\n\
    <text>\nExercise 4\nWrite a function that takes a string and returns the number\
    \ of times a substring appears in the string. Count overlaping cases.\n>>> how_many_times('',\
    \ 'a')\n0\n>>> how_many_times('aaa', 'a')\n3\n>>> how_many_times('aaaa', 'aa')\n\
    3\n>>> how_many_times('aaaa', 'aaa')\n3\n>>> how_many_times('aaaa', 'aaaa')\n\
    3\n>>> how_many_times('aaaaa', 'aaaa')\n3\n>>> how_many_times('aaaaa', 'aaaaa')\n\
    3\n>>> how_many_times('aaaaa', 'aaaaaa')\n3\n>>> how_many_times('aaaaaa', 'aaaaa')\n\
    3\n>>> how_many_times('aaaaaa', 'aaaaaa')\n3\n>>> how_many_times('aaaaaa', 'aaaaaaa')\n\
    3\n>>> how_many_times('aaaaaaa', 'aaaaaa')\n3\n>>> how_many_times('aaaaaaa', 'aaaaaaa')\n\
    3\n>>> how_many_times('aaaaaaa', 'aaaaaaab')\n3\n>>> how_many_times('aaaaaaab',\
    \ 'aaaaaaa')\n3\n>>> how_many_times('aaaaaaab', 'aaaaaaab')\n3\n>>> how_many_times('aaaaaaab',\
    \ 'aaaaaaac')\n3\n>>> how_many_times('aaaaaaac', 'aaaaaaab')\n3\n>>> how_many_times('aaaaaaac',\
    \ 'aaaaaaac')\n3\n>>> how_many_times('aaaaaaac', 'aaaaaaaca')\n3\n>>> how_many_times('aaaaaaaca',\
    \ 'aaaaaaac')\n3\n>>> how_many_times('aaaaaaaca', 'aaaaaaaca')\n3\n>>> how_many_times('aaaaaaaca',\
    \ 'aaaaaaacab')\n3\n>>> how_many_times('aaaaaaacab', 'aaaaaaaca')\n3\n>>> how_many_times('aaaaaaacab',\
    \ 'aaaaaaacab')\n3\n>>> how_many_times('aaaaaaacab', 'aaaaaaacac\nusing Test\n\
    \n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\"\
    ) == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\"\
    , \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcaj0oe_e.jl:12\nin expression starting at\
    \ /tmp/tmpcaj0oe_e.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    len_string\
    \ = length(string)\n    len_substring = length(substring)\n    \n    if len_string\
    \ == 0 || len_substring == 0\n        return 0\n    \n    if len_string == len_substring\n\
    \        return count_overlaping_cases(string, substring)\n    \n    if len_string\
    \ > len_substring\n        return how_many_times(substring(string, 1, len_substring),\
    \ substring)\n    \n    return how_many_times(substring(string, 1, len_string),\
    \ substring)\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\"\
    , \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaa\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaab\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaba\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"aaabaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aaabaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\"\
    , \"aaabaaab\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\",\
    \ \"aaabaaaba\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\"\
    , \"aaabaaabaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\"\
    , \"aaabaaabaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\"\
    , \"aaabaaabaaab\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\"\
    , \"aaabaaabaaaba\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\"\
    , \"aaabaaabaaabaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\"\
    , \"aaabaaabaaabaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aaabaaabaaabaaab\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aa\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t\
    @test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\
    \t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\"\
    , \"john\") == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi3udwufe.jl:27\nin expression starting at\
    \ /tmp/tmpi3udwufe.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    string::String\
    \ = string.lower()\n    substring::String = substring.lower()\n    \n    count::Int64\
    \ = 0\n    \n    for c in string.lower()\n        if c == substring[0]\n     \
    \       count += 1\n            \n            if count > substring.length\n  \
    \              return substring.length\n            \n            substring =\
    \ substring[1:substring.length]\n        else\n            count = 0\n    end\n\
    \    \n    return count\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns the number of times a substring appears in the string. Count overlaping\
    \ cases.\n>>> how_many_times('', 'a')\n0\n>>> how_many_times('aaa', 'a')\n3\n\
    >>> how_many_times('aaaa', 'aa')\n3\n>>> how_many_times('aaaa', 'ab')\n2\n>>>\
    \ how_many_times('aaaa', 'aba')\n2\n>>> how_many_times('aaaa', 'abaa')\n2\n>>>\
    \ how_many_times('aaaa', 'abaaa')\n2\n>>> how_many_times('aaaa', 'abaaaa')\n2\n\
    >>> how_many_times('aaaa', 'abaaaaa')\n2\n>>> how_many_times('aaaa', 'abaaaaaa')\n\
    2\n>>> how_many_times('aaaa', 'abaaaaaaa')\n2\n>>> how_many_times('aaaa', 'abaaaaaaab')\n\
    2\n>>> how_many_times('aaaa', 'abaaaaaaaba')\n2\n>>> how_many_times('aaaa', 'abaaaaaaabaa')\n\
    2\n>>> how_many_times('aaaa', 'abaaaaaaabaaa')\n2\n>>> how_many_times('aaaa',\
    \ 'abaaaaaaabaaaa')\n2\n>>> how_many_times('aaaa', 'abaaaaaaabaaaaa')\n2\n>>>\
    \ how_many_times('aaaa', 'abaaaaaaabaaaaaa')\n2\n>>> how_many_times('aaaa', 'abaaaaaaabaaaaaaa')\n\
    2\n>>> how_many_times('aaaa', 'abaaaaaaabaaaaaaab')\n2\n>>> how_many_times('aaaa',\
    \ 'abaaaaaaabaaaaaaaba')\n2\n>>> how_many_times('aaaa', 'abaaaaaaabaaaaaaabaa')\n\
    2\n>>> how_many_time\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\
    \t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") ==\
    \ 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john\
    \ doe\", \"john\") == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx5b06gpf.jl:32\nin expression starting at\
    \ /tmp/tmpx5b06gpf.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring) + how_many_times(string,\
    \ substring[1:])\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\"\
    , \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\"\
    )\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string and returns\
    \ the number of times a substring appears in the string. Case insensitive.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\"\
    , \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnfj6es48.jl:12\nin expression starting at\
    \ /tmp/tmpnfj6es48.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring)\nend\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns a new string where\
    \ all characters have been converted to lowercase.\nusing Test\n\n@testset begin\n\
    \ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5sc6n1yj.jl:12\nin expression starting at\
    \ /tmp/tmp5sc6n1yj.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    count\
    \ = 0\n    \n    for c in string\n        if c == substring\n            count\
    \ += 1\n        else\n            count = 0\n    end\n    return count\nend\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a string and returns the number\
    \ of times each character appears in the string. \n>>> count_characters(\"hello\"\
    )\n{'h': 2, 'e': 2, 'l': 2, 'o': 1}\n>>> count_characters(\"hello\")\n{'h': 2,\
    \ 'e': 2, 'l': 2, 'o': 1}\n>>> count_characters(\"hello\")\n{'h': 2, 'e': 2, 'l':\
    \ 2, 'o': 1}\n>>> count_characters(\"hello\")\n{'h': 2, 'e': 2, 'l': 2, 'o': 1}\n\
    >>> count_characters(\"hello\")\n{'h': 2, 'e': 2, 'l': 2, 'o': 1}\n>>> count_characters(\"\
    hello\")\n{'h': 2, 'e': 2, 'l': 2, 'o': 1}\n>>> count_characters(\"hello\")\n\
    {'h': 2, 'e': 2, 'l': 2, 'o': 1}\n>>> count_characters(\"hello\")\n{'h': 2, 'e':\
    \ 2, 'l': 2, 'o': 1}\n>>> count_characters(\"hello\")\n{'h': 2, 'e': 2, 'l': 2,\
    \ 'o': 1}\n>>> count_characters(\"hello\")\n{'h': 2, 'e': 2, 'l': 2, 'o': 1}\n\
    >>> count_characters(\"hello\")\n{'h': 2, 'e': 2, 'l': 2, 'o': 1}\n>>> count_characters(\"\
    hello\")\n{'h': 2, 'e': 2, 'l': 2, 'o': 1}\n>>> count_characters(\"hello\")\n\
    {'h': 2, 'e': 2, 'l': 2, 'o': 1}\n>>> count_characters(\"hello\")\n{'h': 2, 'e':\
    \ 2, 'l': 2, 'o': 1}\n>>> count_characters(\"hello\")\n{'h': 2, 'e': 2, 'l': 2,\
    \ 'o': 1}\n>>> count_characters(\"hello\")\n{'h': 2, 'e': 2, 'l': 2, 'o': 1}\n\
    >>> count_characters(\"hello\")\n{'h': 2, 'e': 2, 'l': 2, 'o': 1}\n>>> count_characters(\"\
    hello\")\n{'h': 2, 'e': 2, 'l': 2, 'o': 1}\n>>> count_characters(\"hello\")\n\
    {'h': 2, 'e': 2, 'l': 2, 'o': 1}\n>>> count_characters(\"hello\")\n{'h': 2, 'e':\
    \ 2, 'l': 2, 'o': 1}\n>>> count_character\nusing Test\n\n@testset begin\n\ncandidate\
    \ = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvxyno97n.jl:23\nin expression starting at\
    \ /tmp/tmpvxyno97n.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    count\
    \ = 0\n    \n    for c in string\n        if c == substring\n            count\
    \ += 1\n        else\n            count = 0\n    end\n    return count\nend\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of times each character appears in the string. \nFor example the string \"abbccc\"\
    \ would return {\"a\":2, \"b\":2, \"c\":3}.\nHint: Use a dictionary to store the\
    \ counts. \nHint: Use a for loop to iterate over the characters in the string.\n\
    using Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk1ni6xe3.jl:23\nin expression starting at\
    \ /tmp/tmpk1ni6xe3.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    count\
    \ = 0\n    \n    for char in string\n        if char == substring[0]\n       \
    \     count = count + 1\n            \n            if char == substring[1]\n \
    \               count = count + 1\n                \n            if char == substring[2]\n\
    \                count = count + 1\n                \n            if char == substring[3]\n\
    \                count = count + 1\n                \n            if char == substring[4]\n\
    \                count = count + 1\n                \n            if char == substring[5]\n\
    \                count = count + 1\n                \n            if char == substring[6]\n\
    \                count = count + 1\n                \n            if char == substring[7]\n\
    \                count = count + 1\n                \n            if char == substring[8]\n\
    \                count = count + 1\n                \n            if char == substring[9]\n\
    \                count = count + 1\n                \n            if char == substring[10]\n\
    \                count = count + 1\n                \n            if char == substring[11]\n\
    \                count = count + 1\n                \n            if char == substring[12]\n\
    \                count = count + 1\n                \n            if char == substring[13]\n\
    \                count = count + 1\n                \n            if char == substring[14]\n\
    \                count = count + 1\n                \n            if char == substring[15]\n\
    \                count = count + 1\n                \n            if char == substring[16]\n\
    \                count = count + 1\n                \n            if char == substring[17]\n\
    \                count = count + 1\n                \n            if char == substring[18]\n\
    \                count = count + 1\n                \n            if char == substring[19]\n\
    \                count = count + 1\n                \n            if char == substring[20]\n\
    \                count = count + 1\n                \n            if char == substring[21]\n\
    \                count = count + 1\n                \n            if char == substring[22]\n\
    \                count = count + 1\n                \n            if char == substring[23]\n\
    \                count = count + 1\n                \n            if char == substring[24]\n\
    \                count = count + 1\n                \n            if char == substring[25]\n\
    \                count = count + 1\n                \n            if char == substring[26]\n\
    \                count = count + 1\n                \n            if char == substring[27]\n\
    \                count = count + 1\n                \n            if char == substring[28]\n\
    \                count = count + 1\n                \n            if char == substring[29]\n\
    \                count = count + 1\n                \n            if char == substring[30]\n\
    \                count = count + 1\n                \n            if char == substring[31]\n\
    \                count = count + 1\n                \n            if char == substring[32]\n\
    \                count = count + 1\n                \n            if char == substring[33]\n\
    \                count = count + 1\n                \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\
    \t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\",\
    \ \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphgot5y9e.jl:1\nin expression starting at /tmp/tmphgot5y9e.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0 \n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring)\nend\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"aa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaaa\", \"aaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaaa\"\
    , \"aaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaaaa\", \"\
    aaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaaaab\", \"aaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaaaabb\", \"aaa\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaaaabbb\", \"aaa\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaaaabbbb\", \"aaa\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaaaabbbbba\", \"aaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaaaabbbbbaa\", \"aaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaaaabbbbbaaa\", \"\
    aaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaaaabbbbbaaaa\"\
    , \"aaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaaaabbbbbaaaaa\"\
    , \"aaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaaaabbbbbaaaaaa\"\
    , \"aaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaaaabbbbbaaaaaaa\"\
    , \"aaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaaaabbbbbaaaaaaaa\"\
    , \"aaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaaaabbbbbaaaaaaaab\"\
    , \"aaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_time\nusing Test\n\n\
    @testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\")\
    \ == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\"\
    , \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe3zr9u42.jl:12\nin expression starting at\
    \ /tmp/tmpe3zr9u42.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0 \n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring)\nend\n</cell>\n\
    <code language=julia-1.1>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a string and returns the number of times\
    \ each character appears in the string.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp93ojwwgo.jl:12\nin expression starting at\
    \ /tmp/tmp93ojwwgo.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <text>\nExercise\nWrite a function that takes a string and returns the number\
    \ of times each character appears in the string. \nFor example, the string \"\
    aba\" would return [('a', 2), ('b', 1), ('a', 1)].\nusing Test\n\n@testset begin\n\
    \ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvugx817u.jl:12\nin expression starting at\
    \ /tmp/tmpvugx817u.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return 1 + how_many_times(string[1:], substring)\nend\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a string and returns the number of times each\
    \ character appears in the string. Case insensitive.\nusing Test\n\n@testset begin\n\
    \ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4w5olpj8.jl:12\nin expression starting at\
    \ /tmp/tmp4w5olpj8.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    count\
    \ = 0\n    \n    for char in string\n        if char == substring[0]\n       \
    \     count += 1\n            \n            if char == substring[1]\n        \
    \        count += 1\n                \n                if char == substring[2]\n\
    \                    count += 1\n                    \n                    if\
    \ char == substring[3]\n                        count += 1\n                 \
    \       \n                        if char == substring[4]\n                  \
    \          count += 1\n                            \n                        \
    \    if char == substring[5]\n                                count += 1\n   \
    \                             \n                                if char == substring[6]\n\
    \                                    count += 1\n                            \
    \        \n                                    if char == substring[7]\n     \
    \                                   count += 1\n                             \
    \           \n                                        if char == substring[8]\n\
    \                                            count += 1\n                    \
    \                        \n                                            if char\
    \ == substring[9]\n                                                count += 1\n\
    \                                                \n                          \
    \                      if char == substring[10]\n                            \
    \                        count += 1\n                                        \
    \            \n                                                    if char ==\
    \ substring[11]\n                                                        count\
    \ += 1\n                                                        \n           \
    \                                             if char == substring[12]\n     \
    \                                                       count += 1\n         \
    \                                                   \n                       \
    \                                     if char == substring[13]\n             \
    \                                                   count += 1\n             \
    \                                                   \n                       \
    \                                         if char == substring[14]\n         \
    \                                                           count += 1\n     \
    \                                                               \n           \
    \                                                         if char == substring[15]\n\
    \                                                                        count\
    \ += 1\n                                                                     \
    \   \n                                                        if char == substring[16]\n\
    \                                                            count += 1\n    \
    \                                                        \n                  \
    \                                          if char == substring[17]\n        \
    \                                                        count += 1\n        \
    \                                                        \n                  \
    \                                              if char == substring[18]\n    \
    \                                                                count += 1\n\
    \                                                                    \n      \
    \                                                              if char == substring[19]\n\
    \                                                                        count\
    \ += 1\n                                                                     \
    \   \n                                                        if char == substring[20]\n\
    \                                                            count += 1\n    \
    \                                                        \n                  \
    \                                          if char == substring[21]\n        \
    \                                                        count += 1\n        \
    \                                                        \n                  \
    \                                              if char == substring[22]\n    \
    \                                                                count += 1\n\
    \                                                                    \n      \
    \                                                              if char == substring[23]\n\
    \                                                                        count\
    \ += 1\n                                                                     \
    \   \n                                                        if char == substring[24]\n\
    \                                                            count += 1\n    \
    \                                                        \n                  \
    \                                          if char == substring[25]\n        \
    \                                                        count += 1\n        \
    \                                                        \n                  \
    \                                              if char == substring[26]\n    \
    \                                                                count += 1\n\
    \                                                                    \n      \
    \                                                              if char == substring[27]\n\
    \                                                                        count\
    \ += 1\n                                                                     \
    \   \n                                                        if char == substring[28]\n\
    \                                                            count += 1\n    \
    \                                                        \n                  \
    \                                          if char == substring[29]\n        \
    \                                                        count += 1\n        \
    \                                                        \n                  \
    \                                              if char == substring[30]\n    \
    \                                                                count += 1\n\
    \                                                                    \n      \
    \                                                              if char == substring[31]\n\
    \                                                                        count\
    \ += 1\n                                                                     \
    \   \n                                                        if char == substring[32]\n\
    \                                                            count += 1\n    \
    \                                                        \n                  \
    \                                          if char == substring[33]\n        \
    \                                                        count += 1\n        \
    \                                                        \n                  \
    \                                              if char == substring[34]\n    \
    \                                                                count += 1\n\
    \                                                                    \n\nusing\
    \ Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\"\
    , \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmu0hmpas.jl:1\nin expression starting at /tmp/tmpmu0hmpas.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    count\
    \ = 0\n    \n    for c in string\n        if c == substring\n            count\
    \ += 1\n        else\n            count = 0\n    end\n    return count\nend\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns a new string\
    \ with all the characters in lowercase and uppercase.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\
    \t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\",\
    \ \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0kitiscu.jl:23\nin expression starting at\
    \ /tmp/tmp0kitiscu.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    count\
    \ = 0\n    \n    for char in string\n        if char == substring[0]\n       \
    \     count = count + 1\n            \n            if char == substring[1]\n \
    \               count = count + 1\n                \n            if char == substring[2]\n\
    \                count = count + 1\n                \n            if char == substring[3]\n\
    \                count = count + 1\n                \n            if char == substring[4]\n\
    \                count = count + 1\n                \n            if char == substring[5]\n\
    \                count = count + 1\n                \n            if char == substring[6]\n\
    \                count = count + 1\n                \n            if char == substring[7]\n\
    \                count = count + 1\n                \n            if char == substring[8]\n\
    \                count = count + 1\n                \n            if char == substring[9]\n\
    \                count = count + 1\n                \n            if char == substring[10]\n\
    \                count = count + 1\n                \n            if char == substring[11]\n\
    \                count = count + 1\n                \n            if char == substring[12]\n\
    \                count = count + 1\n                \n            if char == substring[13]\n\
    \                count = count + 1\n                \n            if char == substring[14]\n\
    \                count = count + 1\n                \n            if char == substring[15]\n\
    \                count = count + 1\n                \n            if char == substring[16]\n\
    \                count = count + 1\n                \n            if char == substring[17]\n\
    \                count = count + 1\n                \n            if char == substring[18]\n\
    \                count = count + 1\n                \n            if char == substring[19]\n\
    \                count = count + 1\n                \n            if char == substring[20]\n\
    \                count = count + 1\n                \n            if char == substring[21]\n\
    \                count = count + 1\n                \n            if char == substring[22]\n\
    \                count = count + 1\n                \n            if char == substring[23]\n\
    \                count = count + 1\n                \n            if char == substring[24]\n\
    \                count = count + 1\n                \n            if char == substring[25]\n\
    \                count = count + 1\n                \n            if char == substring[26]\n\
    \                count = count + 1\n                \n            if char == substring[27]\n\
    \                count = count + 1\n                \n            if char == substring[28]\n\
    \                count = count + 1\n                \n            if char == substring[29]\n\
    \                count = count + 1\n                \n            if char == substring[30]\n\
    \                count = count + 1\n                \n            if char == substring[31]\n\
    \                count = count + 1\n                \n            if char == substring[32]\n\
    \                count = count + 1\n                \n            if char == substring[33]\n\
    \                count = count + 1\n                \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\
    \t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\",\
    \ \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp432ctndk.jl:1\nin expression starting at /tmp/tmp432ctndk.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return 1 + how_many_times(string[1:], substring)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of times each character appears in the string. \nFor example, \n>>> count_chars(\"\
    abcabcbb\")\n{'a': 3, 'b': 3, 'c': 3, 'd': 2, 'e': 2, 'f': 1}\n>>> count_chars(\"\
    The quick brown fox jumps over the lazy dog\")\n{'T': 11, 'h': 8, 'e': 6, 'q':\
    \ 5, 'r': 5, 'n': 5, 'o': 4, 'g': 3, 'f': 3, 's': 3, 'y': 3, 'x': 3, 'u': 2, 'v':\
    \ 2, 'j': 2, 'k': 2, 'b': 2, 'm': 2, 'l': 2, 'i': 2, 'z': 1}\n>>> count_chars(\"\
    The quick brown fox jumps over the lazy dog\")\n{'T': 11, 'h': 8, 'e': 6, 'q':\
    \ 5, 'r': 5, 'n': 5, 'o': 4, 'g': 3, 'f': 3, 's': 3, 'y': 3, 'x': 3, 'u': 2, 'v':\
    \ 2, 'j': 2, 'k': 2, 'b': 2, 'm': 2, 'l': 2, 'i': 2, 'z': 1}\n>>> count_chars(\"\
    The quick brown fox jumps over the lazy dog\")\n{'T': 11, 'h': 8, 'e': 6, 'q':\
    \ 5, 'r': 5, 'n': 5, 'o': 4, 'g': 3, 'f': 3, 's': 3, 'y': 3, 'x': 3, 'u': 2, 'v':\
    \ 2, 'j': 2, 'k': 2, 'b': 2, 'm': 2, 'l': 2, 'i': 2, 'z': 1}\n>>> count_chars(\"\
    The quick brown fox jumps over the lazy dog\")\n{'T': 11, 'h': 8, 'e': 6, 'q':\
    \ 5, 'r': 5, 'n': 5, 'o': 4, 'g': 3, 'f': 3, 's': 3, 'y': 3, 'x': 3, 'u': 2, 'v':\
    \ 2, 'j': 2, 'k': 2, 'b': 2, 'm': 2, 'l': 2, 'i': 2, 'z': 1}\n>>> count_chars(\"\
    The quick brown fox jumps over the lazy dog\")\n{'T': 11, 'h': 8, 'e': 6, 'q':\
    \ 5, 'r': 5, 'n': 5, 'o': 4, 'g': 3, 'f': 3, 's': 3, 'y': 3, 'x': 3, 'u': 2, 'v':\
    \ 2, 'j': 2, '\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t\
    @test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\
    \t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\"\
    , \"john\") == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppmr2rp8h.jl:12\nin expression starting at\
    \ /tmp/tmppmr2rp8h.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    count\
    \ = 0\n    \n    for char in string\n        if char == substring[0]\n       \
    \     count = count + 1\n            \n            if char == substring[1]\n \
    \               count = count + 1\n                \n            if char == substring[2]\n\
    \                count = count + 1\n                \n            if char == substring[3]\n\
    \                count = count + 1\n                \n            if char == substring[4]\n\
    \                count = count + 1\n                \n            if char == substring[5]\n\
    \                count = count + 1\n                \n            if char == substring[6]\n\
    \                count = count + 1\n                \n            if char == substring[7]\n\
    \                count = count + 1\n                \n            if char == substring[8]\n\
    \                count = count + 1\n                \n            if char == substring[9]\n\
    \                count = count + 1\n                \n            if char == substring[10]\n\
    \                count = count + 1\n                \n            if char == substring[11]\n\
    \                count = count + 1\n                \n            if char == substring[12]\n\
    \                count = count + 1\n                \n            if char == substring[13]\n\
    \                count = count + 1\n                \n            if char == substring[14]\n\
    \                count = count + 1\n                \n            if char == substring[15]\n\
    \                count = count + 1\n                \n            if char == substring[16]\n\
    \                count = count + 1\n                \n            if char == substring[17]\n\
    \                count = count + 1\n                \n            if char == substring[18]\n\
    \                count = count + 1\n                \n            if char == substring[19]\n\
    \                count = count + 1\n                \n            if char == substring[20]\n\
    \                count = count + 1\n                \n            if char == substring[21]\n\
    \                count = count + 1\n                \n            if char == substring[22]\n\
    \                count = count + 1\n                \n            if char == substring[23]\n\
    \                count = count + 1\n                \n            if char == substring[24]\n\
    \                count = count + 1\n                \n            if char == substring[25]\n\
    \                count = count + 1\n                \n            if char == substring[26]\n\
    \                count = count + 1\n                \n            if char == substring[27]\n\
    \                count = count + 1\n                \n            if char == substring[28]\n\
    \                count = count + 1\n                \n            if char == substring[29]\n\
    \                count = count + 1\n                \n            if char == substring[30]\n\
    \                count = count + 1\n                \n            if char == substring[31]\n\
    \                count = count + 1\n                \n            if char == substring[32]\n\
    \                count = count + 1\n                \n            if char == substring[33]\n\
    \                count = count + 1\n                \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\
    \t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\",\
    \ \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn5j92ut_.jl:1\nin expression starting at /tmp/tmpn5j92ut_.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    count = 0\n    for c in string:\n        if c == substring:\n        \
    \    count += 1\n    return count\n</code>\n<|/ a tags=string,julia |>\n<| a tags=string,julia\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t\
    @test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\
    \t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\"\
    , \"john\") == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdk2c7rtg.jl:12\nin expression starting at\
    \ /tmp/tmpdk2c7rtg.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0 \n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else if string[0] == substring[1]\n        return 1 + how_many_times(string[1:],\
    \ substring[2:])\n    else\n        return how_many_times(string[1:], substring)\n\
    end\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaa\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"aaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aaaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\"\
    , \"aaaaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"\
    aaaaaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaab\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabb\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbb\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbb\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbb\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbba\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbbaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbbaaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbbaaaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbbaaaaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbbaaaaaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbbaaaaaaa\"\
    )\n</cell\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplh6vmi2x.jl:12\nin expression starting at\
    \ /tmp/tmplh6vmi2x.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    count\
    \ = 0\n    \n    for c in string\n        if c == substring[0]\n            count\
    \ = count + 1\n            \n            if substring[1] == c\n              \
    \  count = count + 1\n                \n            if substring[2] == c\n   \
    \             count = count + 1\n                \n            if substring[3]\
    \ == c\n                count = count + 1\n                \n            if substring[4]\
    \ == c\n                count = count + 1\n                \n            if substring[5]\
    \ == c\n                count = count + 1\n                \n            if substring[6]\
    \ == c\n                count = count + 1\n                \n            if substring[7]\
    \ == c\n                count = count + 1\n                \n            if substring[8]\
    \ == c\n                count = count + 1\n                \n            if substring[9]\
    \ == c\n                count = count + 1\n                \n            if substring[10]\
    \ == c\n                count = count + 1\n                \n            if substring[11]\
    \ == c\n                count = count + 1\n                \n            if substring[12]\
    \ == c\n                count = count + 1\n                \n            if substring[13]\
    \ == c\n                count = count + 1\n                \n            if substring[14]\
    \ == c\n                count = count + 1\n                \n            if substring[15]\
    \ == c\n                count = count + 1\n                \n            if substring[16]\
    \ == c\n                count = count + 1\n                \n            if substring[17]\
    \ == c\n                count = count + 1\n                \n            if substring[18]\
    \ == c\n                count = count + 1\n                \n            if substring[19]\
    \ == c\n                count = count + 1\n                \n            if substring[20]\
    \ == c\n                count = count + 1\n                \n            if substring[21]\
    \ == c\n                count = count + 1\n                \n            if substring[22]\
    \ == c\n                count = count + 1\n                \n            if substring[23]\
    \ == c\n                count = count + 1\n                \n            if substring[24]\
    \ == c\n                count = count + 1\n                \n            if substring[25]\
    \ == c\n                count = count + 1\n                \n            if substring[26]\
    \ == c\n                count = count + 1\n                \n            if substring[27]\
    \ == c\n                count = count + 1\n                \n            if substring[28]\
    \ == c\n                count = count + 1\n                \n            if substring[29]\
    \ == c\n                count = count + 1\n                \n            if substring[30]\
    \ == c\n                count = count + 1\n                \n            if substring[31]\
    \ == c\n                count = count + 1\n                \n            if substring[32]\
    \ == c\n                count = count + 1\n                \n            if substring[33]\
    \ == c\n                count = count + 1\n                \n            if substring[34]\
    \ == c\n                count = count + 1\n                \n            if substring[35]\
    \ == c\n                count = count + 1\n                \nusing Test\n\n@testset\
    \ begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\
    \t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\",\
    \ \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8io6do8y.jl:1\nin expression starting at /tmp/tmp8io6do8y.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    count = 0\n    for c in string:\n        if c == substring:\n        \
    \    count += 1\n    return count\n</code>\n<|/ a tags=string,julia |>\n<| c |>\n\
    This doesn't answer the question. The question asks how to count the number of\
    \ times a substring appears in a string. Your answer counts how many times a substring\
    \ appears in a string. That's not the same thing.\n<|/ c |>\n<| c |>\nI agree,\
    \ my answer doesn't answer the question. My answer counts how many times a substring\
    \ appears in a string. That's not the same thing.\n<|/ c |>\n<| c |>\nI agree,\
    \ my answer doesn't answer the question. My answer counts how many times a substring\
    \ appears in a string. That's not the same thing.\n<|/ c |>\n<| c |>\nI agree,\
    \ my answer doesn't answer the question. My answer counts how many times a substring\
    \ appears in a string. That's not the same thing.\n<|/ c |>\n<| c |>\nI agree,\
    \ my answer doesn't answer the question. My answer counts how many times a substring\
    \ appears in a string. That's not the same thing.\n<|/ c |>\n<| a dscore=4 |>\n\
    The simplest way is to use count\n<code>\njulia> count(\"aaa\", \"a\")\n3\n</code>\n\
    <|/ a tags=string,julia |>\n<| c |>\nThis doesn't answer the question. The question\
    \ asks how to count the number of times a substring appears in a string. Your\
    \ answer counts how many times a substring appears in a string. That's not the\
    \ same thing.\n<|/ c |>\n<| a |>\nThe simplest way is to use count\n<code>\njulia>\
    \ count(\"aaa\", \"a\")\n3\n</code>\n<|/ a dscore=4 tags=string,julia |>\n<| c\
    \ |>\nThis doesn't answer the question. The question asks how to count the number\
    \ of times a substring appears in a string. Your answer counts how many times\
    \ a substring appears in a string. That's not the same thing.\n<|/ c |>\n<| a\
    \ tags=string,julia |>\nThe simplest way is to use count\n<code>\njulia> count(\"\
    aaa\", \"a\")\n3\n</code>\n<|/ a dscore=4 |>\n<| a tags=string,julia |>\n<code>\n\
    julia> count(\"aaa\", \"a\")\n3\n</code>\n<|/ a dscore=4 |>\n<| a tags=string,julia\
    \ |>\n<code>\njulia> count(\"aaa\", \"a\")\n3\n</code>\n<|/ a dscore=3 |>\n<|\
    \ a d\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphbvbnail.jl:12\nin expression starting at\
    \ /tmp/tmphbvbnail.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    count = 0\n    for c in string:\n        if c == substring:\n        \
    \    count += 1\n    return count\n</code>\n<|/ a tags=string,julia |>\n<| a dscore=1\
    \ |>\nI came up with a solution that is more efficient than using count. \n<code>\n\
    using Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppncha7jy.jl:12\nin expression starting at\
    \ /tmp/tmppncha7jy.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring) + how_many_times(string[1:],\
    \ substring[1:])\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\"\
    , \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number\
    \ of times a given substring appears in a given string.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\
    \t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\",\
    \ \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz0v_wnqh.jl:12\nin expression starting at\
    \ /tmp/tmpz0v_wnqh.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring)\nend\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\nExercise: Write a function\
    \ that returns the number of times a substring appears in a string.\nusing Test\n\
    \n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\"\
    ) == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\"\
    , \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1ljuj8pv.jl:12\nin expression starting at\
    \ /tmp/tmp1ljuj8pv.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0 \n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring)\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a string and a substring and returns\
    \ the number of times the substring appears in the string. Ignore case when searching.\n\
    using Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwphwaaer.jl:12\nin expression starting at\
    \ /tmp/tmpwphwaaer.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    count = 0\n    for c in string:\n        if c == substring[0]:\n     \
    \       count += 1\n            if substring[1:] == c:\n                count\
    \ += 1\n        else:\n            count = 0\n            break\n    return count\n\
    </cell>\n<code language=julia-1.4>\nhow_many_times('', 'a')\n</cell>\n<code language=julia-1.4>\n\
    how_many_times('aaa', 'a')\n</cell>\n<code language=julia-1.4>\nhow_many_times('aaaa',\
    \ 'aa')\n</cell>\n<text>\nExercise: Write a function that takes a string and returns\
    \ the number of times a substring appears within it\nusing Test\n\n@testset begin\n\
    \ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptyl9bwfi.jl:12\nin expression starting at\
    \ /tmp/tmptyl9bwfi.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    i\
    \ = 0\n    \n    while i < length(substring)\n        if substring(i, 1) == string\n\
    \            i += 1\n        else\n            i += 1\n        end\n    end\n\
    \    \n    return i\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\",\
    \ \"aaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"a\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"aa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\"\
    , \"aaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"a\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"aaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\"\
    , \"aa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"a\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaa\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"aaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\",\
    \ \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaa\")\n</cell>\n\
    \nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfssby_5c.jl:25\nin expression starting at\
    \ /tmp/tmpfssby_5c.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    string_length\
    \ = len(string)\n    substring_index = 0\n    \n    while substring_index < string_length\n\
    \        if string[substring_index] == substring[substring_index]\n          \
    \  substring_index += 1\n        else\n            if substring_index > 0\n  \
    \              substring_index -= 1\n            else\n                return\
    \ substring_index\n        end\n    end\n    return substring_index\nend\n</cell>\n\
    <code language=julia-1.3>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and a substring and returns the number\
    \ of times the substring appears in the string. Count overlaping cases.\n>>> how_many_times('',\
    \ 'a')\n0\n>>> how_many_times('aaa', 'a')\n3\n>>> how_many_times('aaaa', 'aa')\n\
    3\n>>> how_many_times('aaa', 'aa')\n3\n>>> how_many_times('aaaa', 'aaa')\n3\n\
    >>> how_many_times('aaaa', 'aaaa')\n3\n>>> how_many_times('aaaa', 'aaaaa')\n3\n\
    >>> how_many_times('aaaa', 'aaaaaa')\n3\n>>> how_many_times('aaaa', 'aaaaaaa')\n\
    3\n>>> how_many_times('aaaa', 'aaaaaaab')\n3\n>>> how_many_times('aaaa', 'aaaaaaaba')\n\
    3\n>>> how_many_times('aaaa', 'aaaaaaabaa')\n3\n>>> how_many_times('aaaa', 'aaaaaaabaaa')\n\
    3\n>>> how_many_times('aaaa', 'aaaaaaabaaaa')\n3\n>>> how_many_times('aaaa', 'aaaaaaabaaaaa')\n\
    3\n>>> how_many_times('aaaa', 'aaaaaaabaaaaaa')\n3\n>>> how_many_times('aaaa',\
    \ 'aaaaaaabaaaaaaa')\n3\n>>> how_many_times('aaaa', 'aaaaaaabaaaaaaab')\n3\n>>>\
    \ how_many_times('aaaa', 'aaaaaaabaaaaaaaba')\n3\n>>> how_many_times('aaaa', 'aaaaaaabaaaaaaabaa')\n\
    3\n>>> how_many_times('aaaa', 'aaaaaaabaaaaaaabaaa')\n3\n>>> how_many_times('aaaa',\
    \ 'aaaaaaabaaaaaaabaaaa')\n3\n>>> how_many_times('aaaa', 'aaaaaaabaaaaaaabaaaaa')\n\
    3\n\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyljdgkcy.jl:28\nin expression starting at\
    \ /tmp/tmpyljdgkcy.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    count\
    \ = 0\n    \n    for c in string\n        if c == substring\n            count\
    \ += 1\n        end\n    end\n    \n    return count\nend\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaa\", \"a\")\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a string and returns the number of times the substring appears in\
    \ the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n\
    \    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa',\
    \ 'aa')\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\
    \t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") ==\
    \ 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john\
    \ doe\", \"john\") == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp5dxo6mc.jl:23\nin expression starting at\
    \ /tmp/tmpp5dxo6mc.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0 \n    \n    count\
    \ = 0\n    \n    for c in string\n        if c == substring\n            count\
    \ += 1\n        else\n            count = 0\n    end\n    return count\nend\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a string and returns the number of times\
    \ each character appears in the string. \nFor example, \n>>> count_characters(\"\
    hello\")\n{'h':1, 'e':1, 'l':2, 'o':1}\n>>> count_characters(\"hello\")\n{'h':1,\
    \ 'e':1, 'l':2, 'o':1}\n>>> count_characters(\"hello\")\n{'h':1, 'e':1, 'l':2,\
    \ 'o':1}\n>>> count_characters(\"hello\")\n{'h':1, 'e':1, 'l':2, 'o':1}\n>>> count_characters(\"\
    hello\")\n{'h':1, 'e':1, 'l':2, 'o':1}\n>>> count_characters(\"hello\")\n{'h':1,\
    \ 'e':1, 'l':2, 'o':1}\n>>> count_characters(\"hello\")\n{'h':1, 'e':1, 'l':2,\
    \ 'o':1}\n>>> count_characters(\"hello\")\n{'h':1, 'e':1, 'l':2, 'o':1}\n>>> count_characters(\"\
    hello\")\n{'h':1, 'e':1, 'l':2, 'o':1}\n>>> count_characters(\"hello\")\n{'h':1,\
    \ 'e':1, 'l':2, 'o':1}\n>>> count_characters(\"hello\")\n{'h':1, 'e':1, 'l':2,\
    \ 'o':1}\n>>> count_characters(\"hello\")\n{'h':1, 'e':1, 'l':2, 'o':1}\n>>> count_characters(\"\
    hello\")\n{'h':1, 'e':1, 'l':2, 'o':1}\n>>> count_characters(\"hello\")\n{'h':1,\
    \ 'e':1, 'l':2, 'o':1}\n>>> count_characters(\"hello\")\n{'h':1, 'e':1, 'l':2,\
    \ 'o':1}\n>>> count_characters(\"hello\")\n{'h':1, 'e':1, 'l':2, 'o':1}\n>>> count_characters(\"\
    hello\")\n{'h':1, 'e':1, 'l':2, 'o':1}\n>>> count_characters(\"hello\")\n{'h':1,\
    \ 'e':1, 'l':2, 'o':1}\n>>> count_characters(\"hello\")\n{'h':1, 'e':1, 'l':2,\
    \ 'o':1}\n>>> \nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t\
    @test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\
    \t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\"\
    , \"john\") == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7qvjihiq.jl:23\nin expression starting at\
    \ /tmp/tmp7qvjihiq.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    count\
    \ = 0\n    \n    for char in string\n        if char == substring\n          \
    \  count += 1\n        else\n            count = 0\n    end\n    \n    return\
    \ count\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"\
    aa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"a\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaa\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"aaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aaaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\"\
    , \"aaaaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"\
    aaaaaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaab\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabb\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbb\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbb\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbb\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbba\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbbaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbbaaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbbaaaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbbaaaaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbbaaaaaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbbaaaaaaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_\nusing Test\n\n@testset begin\n\n\
    candidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2e4uo50u.jl:24\nin expression starting at\
    \ /tmp/tmp2e4uo50u.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    count = 0\n    for c in string:\n        if c == substring:\n        \
    \    count += 1\n    return count\n</code>\n<|/ a tags=string,julia |>\n<| a |>\n\
    <code>\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpluxidtdu.jl:12\nin expression starting at\
    \ /tmp/tmpluxidtdu.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0 \n    \n    len_string\
    \ = length(string)\n    len_substring = length(substring)\n    \n    if len_string\
    \ == 0 || len_substring == 0\n        return 0 \n    \n    if len_string == len_substring\n\
    \        return 1 \n    \n    \n    if string[len_substring-1] == substring[0]\n\
    \        return 1 + how_many_times(string[1:len_substring], substring) \n    \n\
    \    if substring[len_substring-1] == string[0]\n        return 1 + how_many_times(string[1:len_substring],\
    \ substring) \n    \n    if string[len_substring-1] == substring[len_substring-1]\n\
    \        return 1 + how_many_times(string[1:len_substring], substring) \n    \n\
    \    if substring[len_substring-1] == string[len_substring-1]\n        return\
    \ 1 + how_many_times(string[1:len_substring], substring) \n    \n    if string[len_substring-1]\
    \ == substring[0]\n        return 1 + how_many_times(string[1:len_substring],\
    \ substring) \n    \n    if substring[len_substring-1] == string[0]\n        return\
    \ 1 + how_many_times(string[1:len_substring], substring) \n    \n    if string[len_substring-1]\
    \ == substring[len_substring-1]\n        return 1 + how_many_times(string[1:len_substring],\
    \ substring) \n    \n    if substring[len_substring-1] == string[len_substring-1]\n\
    \        return 1 + how_many_times(string[1:len_substring], substring) \n    \n\
    \    if string[len_substring-1] == substring[0]\n        return 1 + how_many_times(string[1:len_substring],\
    \ substring) \n    \n    if substring[len_substring-1] == string[0]\n        return\
    \ 1 + how_many_times(string[1:len_substring], substring) \n    \n    if string[len_substring-1]\
    \ == substring[len_substring-1]\n        return 1 + how_many_times(string[1:len_substring],\
    \ substring) \n    \n    if substring[len_substring-1] == string[len_substring-1]\n\
    \        return 1 + how_many_times(string[1:len_substring], substring) \n    \n\
    \    if string[len_substring-1] == substring[0]\n        return 1 + how_many_times(string[1:len_substring],\
    \ substring) \n    \n    if substring[len_substring-1] == string[0]\n        return\
    \ 1 + how_many_times(string[1:len_substring], substring) \n    \n    if string[len_substring-1]\
    \ == substring[len_substring-1]\n        return 1 + how_many_times(string[1:len_substring],\
    \ substring) \n    \n    if substring[len_substring-1] == string\nusing Test\n\
    \n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\"\
    ) == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\"\
    , \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxve6s9s3.jl:1\nin expression starting at /tmp/tmpxve6s9s3.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    count\
    \ = 0\n    \n    for char in string\n        if char == substring\n          \
    \  count += 1\n        else\n            count = 0\n    end\n    \n    return\
    \ count\nend\n</cell>\n<code language=julia-1.4>\nhow_many_times('', 'a')\n</cell>\n\
    <code language=julia-1.4>\nhow_many_times('aaa', 'a')\n</cell>\n<code language=julia-1.4>\n\
    how_many_times('aaaa', 'aa')\n</cell>\n<text>\nExercise: Write a function that\
    \ counts the number of times a given substring can be found in the original string.\
    \ Count overlaping cases.\nHint: Use a for loop and a counter variable.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\"\
    , \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq_kqb0p1.jl:24\nin expression starting at\
    \ /tmp/tmpq_kqb0p1.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    count\
    \ = 0\n    \n    for c in string\n        if c == substring\n            count\
    \ += 1\n        else\n            count = 0\n    end\n    \n    return count\n\
    end\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of times each character appears in the string.\nusing Test\n\n@testset begin\n\
    \ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg1i5it0v.jl:24\nin expression starting at\
    \ /tmp/tmpg1i5it0v.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    len_string\
    \ = length(string)\n    len_substring = length(substring)\n    \n    if len_string\
    \ == 0 || len_substring == 0\n        return 0\n    \n    i = 0\n    j = len_string\n\
    \    \n    while i < len_substring && j > 0\n        if string[i] == substring[j]\n\
    \            i += 1\n            j -= 1\n        else\n            if string[i]\
    \ > substring[j]\n                j -= 1\n            else\n                i\
    \ += 1\n    \n    return j\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\",\
    \ \"ab\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"ba\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aba\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"abaa\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"aaaa\", \"abaaa\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"abaaab\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"abaaaba\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\"\
    , \"abaaabaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\",\
    \ \"abaaabaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\"\
    , \"abaaabaaab\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\"\
    , \"abaaabaaaba\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\"\
    , \"abaaabaaabaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\"\
    , \"abaaabaaabaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\"\
    , \"abaaabaaabaaab\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\"\
    , \"abaaabaaabaaaba\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"abaaabaaabaaabaa\")\n</\nusing Test\n\n@testset begin\n\ncandidate =\
    \ how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptp89fdqb.jl:34\nin expression starting at\
    \ /tmp/tmptp89fdqb.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ substring == string\n        return 1\n    else\n        return 1 + how_many_times(string[1:end],\
    \ substring) + how_many_times(string[end-1:end], substring)\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a string and returns a new string where\
    \ all occurrences of 'a' have been replaced with 'A'.\n>>> replace_a('aaa')\n\
    'Aaa'\n>>> replace_a('aaaa')\n'Aaaa'\n>>> replace_a('aaaaa')\n'AaaaA'\n>>> replace_a('aaaaaa')\n\
    'AaaaAaa'\n>>> replace_a('aaaaaaa')\n'AaaaAaaA'\n>>> replace_a('aaaaaaab')\n'AaaaAaaAb'\n\
    >>> replace_a('aaaaaaabb')\n'AaaaAaaAbb'\n>>> replace_a('aaaaaaabbb')\n'AaaaAaaAbbb'\n\
    >>> replace_a('aaaaaaabbbb')\n'AaaaAaaAbbbb'\n>>> replace_a('aaaaaaabbbbba')\n\
    'AaaaAaaAbbbbba'\n>>> replace_a('aaaaaaabbbbbaa')\n'AaaaAaaAbbbbbaA'\n>>> replace_a('aaaaaaabbbbbaaa')\n\
    'AaaaAaaAbbbbbaAaa'\n>>> replace_a('aaaaaaabbbbbaaaa')\n'AaaaAaaAbbbbbaAaaa'\n\
    >>> replace_a('aaaaaaabbbbbaaaaa')\n'AaaaAaaAbbbbbaAaaaa'\n>>> replace_a('aaaaaaabbbbbaaaaaa')\n\
    'AaaaAaaAbbbbbaAaaaaa'\n>>> replace_a('aaaaaaabbbbbaaaaaaa')\n'AaaaAaaAbbbbbaAaaaaaa'\n\
    >>> replace_a('aaaaaaabbbbbaaaaaaaa')\n'AaaaAaaAbbbbbaAaaaaaaa'\n>>> replace_a('aaaaaaabbbbbaaaaaaaab')\n\
    'AaaaAaaAbbbbbaAaaaaaaAb'\n>>> replace_a('aaaaaaabbbbbaaaaaaaabb')\n'AaaaAaaAbbbbbaAaaaaaaAbb'\n\
    \nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpju6k60tt.jl:12\nin expression starting at\
    \ /tmp/tmpju6k60tt.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    count\
    \ = 0\n    \n    for c in string\n        if c == substring\n            count\
    \ += 1\n        else\n            count = 0\n    end\n    return count\nend\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and a substring and returns\
    \ the number of times the substring appears in the string. Count overlaping cases.\n\
    >>> how_many_times('', 'a')\n0\n>>> how_many_times('aaa', 'a')\n3\n>>> how_many_times('aaaa',\
    \ 'aa')\n3\n>>> how_many_times('aaaa', 'aaa')\n3\n>>> how_many_times('aaaaa',\
    \ 'aa')\n3\n>>> how_many_times('aaaaa', 'aaa')\n3\n>>> how_many_times('aaaaaa',\
    \ 'aa')\n3\n>>> how_many_times('aaaaaa', 'aaa')\n3\n>>> how_many_times('aaaaaaa',\
    \ 'aa')\n3\n>>> how_many_times('aaaaaaa', 'aaa')\n3\n>>> how_many_times('aaaaaaa',\
    \ 'aaaa')\n3\n>>> how_many_times('aaaaaaa', 'aaaaa')\n3\n>>> how_many_times('aaaaaaa',\
    \ 'aaaaaa')\n3\n>>> how_many_times('aaaaaaa', 'aaaaaaa')\n3\n>>> how_many_times('aaaaaaa',\
    \ 'aaaaaaa')\n3\n>>> how_many_times('aaaaaaa', 'aaaaaaa')\n3\n>>> how_many_times('aaaaaaa',\
    \ 'aaaaaaa')\n3\n>>> how_many_times('aaaaaaa', 'aaaaaaa')\n3\n>>> how_many_times('aaaaaaa',\
    \ 'aaaaaaa')\n3\n>>> how_many_times('aaaaaaa', 'aaaaaaa')\n3\n>>> how_many_times('aaaaaaa',\
    \ 'aaaaaaa')\n3\n>>> how_many_times('aaaaaaa', 'aaaaaaa')\n3\n>>> how_many_times('aaaaaaa',\
    \ 'aaaaaaa')\n3\n>>> how_many_times('aaaaaaa', 'aaaaaaa')\n3\n>>> how_many_times('aaaaaaa',\
    \ 'aaaaaaa')\n3\n>>> how_many_times('aaaaaaa', 'aaaaaaa')\n3\n>>> how_many_times('aaaaaaa',\
    \ 'aaaaaaa')\n3\n>>> how_man\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\
    \t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") ==\
    \ 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john\
    \ doe\", \"john\") == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplweovad0.jl:23\nin expression starting at\
    \ /tmp/tmplweovad0.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring) + how_many_times(string,\
    \ substring[1:])\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\"\
    , \"aa\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string and\
    \ a substring and returns the number of times the substring appears in the string.\
    \ \nFor example, how_many_times(\"aaaa\", \"aa\") should return 3.\nusing Test\n\
    \n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\"\
    ) == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\"\
    , \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkx370r7w.jl:12\nin expression starting at\
    \ /tmp/tmpkx370r7w.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0 \n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a string and returns the number\
    \ of times the string \"a\" appears anywhere in the string. Case insensitive.\n\
    using Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdwpzerd8.jl:12\nin expression starting at\
    \ /tmp/tmpdwpzerd8.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    count\
    \ = 0\n    \n    for i in string.chars\n        if i == substring[0]\n       \
    \     count += 1\n            \n            for i in substring\n             \
    \   if i == string.chars[count]\n                    count += 1\n            \
    \    else\n                    count = 0\n        end\n    end\n    \n    return\
    \ count\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpen54jvj1.jl:29\nin expression starting at\
    \ /tmp/tmpen54jvj1.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    count\
    \ = 0\n    \n    for char in string\n        if char == substring\n          \
    \  count += 1\n        end\n    end\n    \n    return count\nend\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns the number of times each\
    \ character appears in the string.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9ia7wsk9.jl:23\nin expression starting at\
    \ /tmp/tmp9ia7wsk9.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    len_string\
    \ = length(string)\n    len_substring = length(substring)\n    \n    if len_string\
    \ == 0 || len_substring == 0\n        return 0\n    \n    i = 0\n    j = 0\n \
    \   \n    while i < len_string && j < len_substring\n        if string[i] == substring[j]\n\
    \            i += 1\n            j += 1\n        else\n            if string[i]\
    \ > substring[j]\n                i += 1\n            else\n                j\
    \ += 1\n        end\n    end\n    \n    if i == len_string\n        return j\n\
    \    else\n        return i - j\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_6t09vs8.jl:40\nin expression starting at\
    \ /tmp/tmp_6t09vs8.jl:40\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0 \n    else if\
    \ substring[0] == string[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring) + how_many_times(string,\
    \ substring[1:])\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\"\
    , \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and\
    \ returns the number of times the substring appears in the string. Count overlaping\
    \ cases.\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy8dk7mxe.jl:12\nin expression starting at\
    \ /tmp/tmpy8dk7mxe.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    count = 0\n    i = 0\n    while i < length(string)\n        if substring(i,\
    \ length(string)) in string\n            count += 1\n        i += 1\n    return\
    \ count\nend\n</cell>\n<code language=julia-1.3>\nhow_many_times('', 'a')\n</cell>\n\
    <code language=julia-1.3>\nhow_many_times('aaa', 'a')\n</cell>\n<code language=julia-1.3>\n\
    how_many_times('aaaa', 'aa')\n</cell>\n<text>\nExercise: Write a function that\
    \ counts how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\
    \t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") ==\
    \ 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john\
    \ doe\", \"john\") == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprpybvp5g.jl:18\nin expression starting at\
    \ /tmp/tmprpybvp5g.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    count\
    \ = 0\n    \n    for char in string\n        if char == substring\n          \
    \  count += 1\n        else\n            count = 0\n    end\n    \n    return\
    \ count\nend\n</cell>\n<code language=julia-1.4>\nhow_many_times('', 'a')\n</cell>\n\
    <code language=julia-1.4>\nhow_many_times('aaa', 'a')\n</cell>\n<code language=julia-1.4>\n\
    how_many_times('aaaa', 'aa')\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a string and returns the number of times a substring appears in the string.\
    \ Count overlaping cases.\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\
    \t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") ==\
    \ 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john\
    \ doe\", \"john\") == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx2yc0ryj.jl:24\nin expression starting at\
    \ /tmp/tmpx2yc0ryj.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    len_string\
    \ = length(string)\n    len_substring = length(substring)\n    \n    if len_string\
    \ == 0 || len_substring == 0\n        return 0\n    \n    count = 0\n    \n  \
    \  for index in 0..len_substring-1\n        if string[index] == substring[index]\n\
    \            count += 1\n        else\n            count = 0\n        end\n  \
    \  end\n    \n    return count\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\"\
    , \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw0zlvnn1.jl:31\nin expression starting at\
    \ /tmp/tmpw0zlvnn1.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring) + how_many_times(string,\
    \ substring[1:])\nend\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"aaaa\"\
    , \"aa\")\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number\
    \ of times a substring appears in a string. \nFor example, how_many_times(\"aaaa\"\
    , \"aa\") should return 3.\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\
    \t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") ==\
    \ 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john\
    \ doe\", \"john\") == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjgqi5jct.jl:12\nin expression starting at\
    \ /tmp/tmpjgqi5jct.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring)\nend\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"aaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\"\
    , \"aaaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"\
    aaaaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaab\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabb\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbb\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbb\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbb\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbba\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbbaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbbaaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbbaaaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbbaaaaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbbaaaaaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbbaaaaaaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbbaaaaaaa\n\
    using Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0j0kfjc2.jl:12\nin expression starting at\
    \ /tmp/tmp0j0kfjc2.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    count = 0\n    i = 0\n    while i < length(string)\n        if substring(i,\
    \ length(string)) in string\n            count += 1\n        i += 1\n    end\n\
    \    return count\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\",\
    \ \"aaa\")\n</cell>\n<text>\nExercise: Write a function that returns the number\
    \ of times a given substring can be found in the original string. Count overlaping\
    \ cases.\nHint: Use how_many_times(string, substring).\nusing Test\n\n@testset\
    \ begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\
    \t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\",\
    \ \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbqr0669e.jl:19\nin expression starting at\
    \ /tmp/tmpbqr0669e.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    count\
    \ = 0\n    \n    for char in string\n        if char == substring\n          \
    \  count += 1\n        else\n            count = 0\n    end\n    \n    return\
    \ count\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times('', 'a')\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times('aaa', 'a')\n</cell>\n<code language=julia-1.5>\n\
    how_many_times('aaaa', 'aa')\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a string and returns the number of times the substring appears in the\
    \ string. Case insensitive.\n>>> count_substring('', 'a')\n0\n>>> count_substring('aaa',\
    \ 'a')\n3\n>>> count_substring('aaaa', 'aa')\n3\n>>> count_substring('aaaa', 'aaa')\n\
    3\n>>> count_substring('aaaa', 'aaaa')\n3\n>>> count_substring('aaaa', 'aaaaa')\n\
    3\n>>> count_substring('aaaa', 'aaaaaa')\n3\n>>> count_substring('aaaa', 'aaaaaaa')\n\
    3\n>>> count_substring('aaaa', 'aaaaaaab')\n3\n>>> count_substring('aaaa', 'aaaaaaaba')\n\
    3\n>>> count_substring('aaaa', 'aaaaaaabaa')\n3\n>>> count_substring('aaaa', 'aaaaaaabaaa')\n\
    3\n>>> count_substring('aaaa', 'aaaaaaabaaaa')\n3\n>>> count_substring('aaaa',\
    \ 'aaaaaaabaaaaa')\n3\n>>> count_substring('aaaa', 'aaaaaaabaaaaaa')\n3\n>>> count_substring('aaaa',\
    \ 'aaaaaaabaaaaaaa')\n3\n>>> count_substring('aaaa', 'aaaaaaabaaaaaaab')\n3\n\
    >>> count_substring('aaaa', 'aaaaaaabaaaaaaaba')\n3\n>>> count_substring('aaaa',\
    \ 'aaaaaaabaaaaaaabaa')\n3\n>>> count_substring('aaaa', 'aaaaaaabaaaaaaabaaa')\n\
    3\n>>> count_substring('aaaa', 'aaaaaaabaaaaaaabaaaa')\n3\n>>> count_substring('aaaa',\
    \ 'aaaaaaabaaaaaaabaaaaa')\n3\n>>> count_substring('aaaa', 'aaaaaaabaaaaaaabaaaaaa')\n\
    3\n>>> count_substring('aaaa', 'aaaaaaabaaaaaaabaaaaaaa')\n3\n>>> count_substring('aaaa',\
    \ 'aaaaaaabaaaaaaabaaaaaaab')\n3\n>>> count_substring('aaaa', 'aaaaaaabaaaaaaabaaaaaaaba')\n\
    3\n>>> count_substring\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\
    \t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") ==\
    \ 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john\
    \ doe\", \"john\") == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphg3auzy4.jl:24\nin expression starting at\
    \ /tmp/tmphg3auzy4.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    count\
    \ = 0\n    \n    for char in string\n        if char == substring\n          \
    \  count += 1\n        else\n            count = 0\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4nab9402.jl:1\nin expression starting at /tmp/tmp4nab9402.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0 \n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring)\nend\n</cell>\n\
    <code language=julia-1.3>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n<code language=julia-1.3>\n\
    how_many_times(\"aaaa\", \"aaa\")\n</cell>\n<code language=julia-1.3>\nhow_many_times(\"\
    aaaa\", \"aaab\")\n</cell>\n<code language=julia-1.3>\nhow_many_times(\"aaaa\"\
    , \"aaaba\")\n</cell>\n<code language=julia-1.3>\nhow_many_times(\"aaaa\", \"\
    aaabaa\")\n</cell>\n<code language=julia-1.3>\nhow_many_times(\"aaaa\", \"aaabaaa\"\
    )\n</cell>\n<code language=julia-1.3>\nhow_many_times(\"aaaa\", \"aaabaaab\")\n\
    </cell>\n<code language=julia-1.3>\nhow_many_times(\"aaaa\", \"aaabaaaba\")\n\
    </cell>\n<code language=julia-1.3>\nhow_many_times(\"aaaa\", \"aaabaaabaa\")\n\
    </cell>\n<code language=julia-1.3>\nhow_many_times(\"aaaa\", \"aaabaaabaaa\")\n\
    </cell>\n<code language=julia-1.3>\nhow_many_times(\"aaaa\", \"aaabaaabaaab\"\
    )\n</cell>\n<code language=julia-1.3>\nhow_many_times(\"aaaa\", \"aaabaaabaaaba\"\
    )\n</cell>\n<code language=julia-1.3>\nhow_many_times(\"aaaa\", \"aaabaaabaaabaa\"\
    )\n</cell>\n<code language=julia-1.3>\nhow_many_times(\"aaaa\", \"aaabaaabaaabaaa\"\
    )\n</cell>\n<code language=julia-1.3>\nhow_many_times(\"aaaa\", \"aaabaaabaaabaaab\"\
    )\n</cell>\n<code language=julia-1.3>\nhow_many_times(\"aaaa\", \"aaabaaabaaabaaaba\"\
    )\n</cell>\n<code language=julia-1.3>\nhow_many_times(\"aaaa\", \"aaabaaabaaabaaabaa\"\
    )\n</cell>\n<code language=julia-1.3>\nhow_many_times(\"aaaa\", \"aaabaaabaaabaaabaaa\"\
    )\n</cell>\n<code language=julia-1.3>\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjmgad5p9.jl:12\nin expression starting at\
    \ /tmp/tmpjmgad5p9.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    len_string\
    \ = length(string)\n    len_substring = length(substring)\n    \n    i = 0\n \
    \   j = 0\n    \n    while i < len_string && j < len_substring\n        if string[i]\
    \ == substring[j]\n            i += 1\n            j += 1\n        else\n    \
    \        if string[i] > substring[j]\n                i += 1\n            else\n\
    \                j += 1\n        end\n    end\n    \n    return j - i\nend\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"aa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaaa\", \"aa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaa\"\
    , \"aaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaa\", \"aaaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaa\", \"aaaaa\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaa\", \"aaaaaa\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaaa\", \"aaaaaaa\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"aaaaa\", \"aaaaaaab\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"aaaaa\", \"aaaaaaabb\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"aaaaa\", \"aaaaaaabbb\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"aaaaa\", \"aaaaaaabbbb\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"aaaaa\", \"aaaaaaabbbbb\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaaa\", \"aaaaaaabbbbba\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaaa\", \"aaaaaaabbbbbaa\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaaa\", \"aaaaaaabbbbbaaa\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaaa\", \"aaaaaaabbbbbaaaa\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaaa\", \"aaaaaaabbbbba\nusing Test\n\
    \n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\"\
    ) == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\"\
    , \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpih9pizvc.jl:33\nin expression starting at\
    \ /tmp/tmpih9pizvc.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    \n    if string[-1] == substring[-1]\n        return 1 + how_many_times(string[1..-1],\
    \ substring[1..-1])\n    \n    return how_many_times(string[1..-1], substring[1..-1])\
    \ + how_many_times(string[1:], substring[1:])\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp5_vehm6g.jl:14\nin expression\
    \ starting at /tmp/tmp5_vehm6g.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring)\nend\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"ab\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"ab\", \"ba\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    ab\", \"aba\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"ab\", \"\
    abb\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"ab\", \"abbb\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"ab\", \"abbbb\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"ab\", \"abbbba\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"ab\", \"abbbbba\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"ab\", \"abbbbbac\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    ab\", \"abbbbbacab\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"ab\"\
    , \"abbbbbacabc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"ab\"\
    , \"abbbbbacabcba\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"ab\"\
    , \"abbbbbacabcbac\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"ab\"\
    , \"abbbbbacabcbacab\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    ab\", \"abbbbbacabcbacabc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    ab\", \"abbbbbacabcbacabcba\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    ab\", \"abbbbbacabcbacabcbac\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    ab\", \"abbbbbacabcbacabcbacab\")\n</cell>\n<code language=julia-1.5>\nho\nusing\
    \ Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\"\
    , \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprpro3q5c.jl:12\nin expression starting at\
    \ /tmp/tmprpro3q5c.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    count\
    \ = 0\n    \n    for c in string\n        if c == substring\n            count\
    \ += 1\n        else\n            count = 0\n    end\n    return count\nend\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and a substring and returns the\
    \ number of times the substring appears in the string. Count overlaping cases.\n\
    using Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptv68uwyu.jl:23\nin expression starting at\
    \ /tmp/tmptv68uwyu.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    count\
    \ = 0\n    \n    for c in string\n        if c == substring\n            count\
    \ += 1\n        else\n            count = 0\n    end\n    return count\nend\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of times each character appears in the string.\nusing Test\n\n@testset begin\n\
    \ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbu2j4cxq.jl:23\nin expression starting at\
    \ /tmp/tmpbu2j4cxq.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    count\
    \ = 0\n    \n    for char in string\n        if char == substring[0]\n       \
    \     count = count + 1\n            \n            if char == substring[1]\n \
    \               count = count + 1\n                \n            if char == substring[2]\n\
    \                count = count + 1\n                \n            if char == substring[3]\n\
    \                count = count + 1\n                \n            if char == substring[4]\n\
    \                count = count + 1\n                \n            if char == substring[5]\n\
    \                count = count + 1\n                \n            if char == substring[6]\n\
    \                count = count + 1\n                \n            if char == substring[7]\n\
    \                count = count + 1\n                \n            if char == substring[8]\n\
    \                count = count + 1\n                \n            if char == substring[9]\n\
    \                count = count + 1\n                \n            if char == substring[10]\n\
    \                count = count + 1\n                \n            if char == substring[11]\n\
    \                count = count + 1\n                \n            if char == substring[12]\n\
    \                count = count + 1\n                \n            if char == substring[13]\n\
    \                count = count + 1\n                \n            if char == substring[14]\n\
    \                count = count + 1\n                \n            if char == substring[15]\n\
    \                count = count + 1\n                \n            if char == substring[16]\n\
    \                count = count + 1\n                \n            if char == substring[17]\n\
    \                count = count + 1\n                \n            if char == substring[18]\n\
    \                count = count + 1\n                \n            if char == substring[19]\n\
    \                count = count + 1\n                \n            if char == substring[20]\n\
    \                count = count + 1\n                \n            if char == substring[21]\n\
    \                count = count + 1\n                \n            if char == substring[22]\n\
    \                count = count + 1\n                \n            if char == substring[23]\n\
    \                count = count + 1\n                \n            if char == substring[24]\n\
    \                count = count + 1\n                \n            if char == substring[25]\n\
    \                count = count + 1\n                \n            if char == substring[26]\n\
    \                count = count + 1\n                \n            if char == substring[27]\n\
    \                count = count + 1\n                \n            if char == substring[28]\n\
    \                count = count + 1\n                \n            if char == substring[29]\n\
    \                count = count + 1\n                \n            if char == substring[30]\n\
    \                count = count + 1\n                \n            if char == substring[31]\n\
    \                count = count + 1\n                \n            if char == substring[32]\n\
    \                count = count + 1\n                \n            if char == substring[33]\n\
    \                count = count + 1\n                \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\
    \t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\",\
    \ \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpafcm9is9.jl:1\nin expression starting at /tmp/tmpafcm9is9.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    string::String\
    \ = string.lower()\n    substring::String = substring.lower()\n    \n    i = 0\n\
    \    \n    while i < length(substring)\n        if string[i + length(substring)]\
    \ == substring[i]\n            i += 1\n        else\n            i += 1\n    \
    \    end\n    end\n    \n    return i\nend\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaa\", \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and returns the number of times a substring appears within\
    \ that string. \nFor example, \"hello world\" would return 2 because \"hello\"\
    \ appears twice and \"world\" appears once.\nusing Test\n\n@testset begin\n\n\
    candidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn6a690uh.jl:28\nin expression starting at\
    \ /tmp/tmpn6a690uh.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring) + how_many_times(string,\
    \ substring[1:])\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a string and returns the number of times a substring appears within that string.\n\
    using Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjla0tyaw.jl:12\nin expression starting at\
    \ /tmp/tmpjla0tyaw.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    i\
    \ = 0\n    \n    while i < length(string)\n        if substring(i, 1) == string(i,\
    \ 1)\n            i += 1\n        else\n            i += 1\n    end\n    \n  \
    \  return i\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\",\
    \ \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number\
    \ of times a substring appears in a string. Count overlaping cases.\n    >>> how_many_times('',\
    \ 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa',\
    \ 'aa')\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\
    \t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") ==\
    \ 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john\
    \ doe\", \"john\") == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpod0nt2ml.jl:24\nin expression starting at\
    \ /tmp/tmpod0nt2ml.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    count\
    \ = 0\n    \n    for char in string\n        if char == substring[0]\n       \
    \     count = count + 1\n            \n            if char == substring[1]\n \
    \               count = count + 1\n                \n            if char == substring[2]\n\
    \                count = count + 1\n                \n            if char == substring[3]\n\
    \                count = count + 1\n                \n            if char == substring[4]\n\
    \                count = count + 1\n                \n            if char == substring[5]\n\
    \                count = count + 1\n                \n            if char == substring[6]\n\
    \                count = count + 1\n                \n            if char == substring[7]\n\
    \                count = count + 1\n                \n            if char == substring[8]\n\
    \                count = count + 1\n                \n            if char == substring[9]\n\
    \                count = count + 1\n                \n            if char == substring[10]\n\
    \                count = count + 1\n                \n            if char == substring[11]\n\
    \                count = count + 1\n                \n            if char == substring[12]\n\
    \                count = count + 1\n                \n            if char == substring[13]\n\
    \                count = count + 1\n                \n            if char == substring[14]\n\
    \                count = count + 1\n                \n            if char == substring[15]\n\
    \                count = count + 1\n                \n            if char == substring[16]\n\
    \                count = count + 1\n                \n            if char == substring[17]\n\
    \                count = count + 1\n                \n            if char == substring[18]\n\
    \                count = count + 1\n                \n            if char == substring[19]\n\
    \                count = count + 1\n                \n            if char == substring[20]\n\
    \                count = count + 1\n                \n            if char == substring[21]\n\
    \                count = count + 1\n                \n            if char == substring[22]\n\
    \                count = count + 1\n                \n            if char == substring[23]\n\
    \                count = count + 1\n                \n            if char == substring[24]\n\
    \                count = count + 1\n                \n            if char == substring[25]\n\
    \                count = count + 1\n                \n            if char == substring[26]\n\
    \                count = count + 1\n                \n            if char == substring[27]\n\
    \                count = count + 1\n                \n            if char == substring[28]\n\
    \                count = count + 1\n                \n            if char == substring[29]\n\
    \                count = count + 1\n                \n            if char == substring[30]\n\
    \                count = count + 1\n                \n            if char == substring[31]\n\
    \                count = count + 1\n                \n            if char == substring[32]\n\
    \                count = count + 1\n                \n            if char == substring[33]\n\
    \                count = count + 1\n                \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\
    \t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\",\
    \ \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf1zqerz9.jl:1\nin expression starting at /tmp/tmpf1zqerz9.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring)\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of times a substring appears in the string. Case insensitive.\n>>> how_many_times('',\
    \ 'a')\n0\n>>> how_many_times('aaa', 'a')\n3\n>>> how_many_times('aaaa', 'aa')\n\
    3\n>>> how_many_times('aaaa', 'aaa')\n4\n>>> how_many_times('aaaa', 'aaaa')\n\
    4\n>>> how_many_times('aaaa', 'aaaaa')\n5\n>>> how_many_times('aaaa', 'aaaaaa')\n\
    5\n>>> how_many_times('aaaa', 'aaaaaaa')\n6\n>>> how_many_times('aaaa', 'aaaaaaab')\n\
    6\n>>> how_many_times('aaaa', 'aaaaaaaba')\n7\n>>> how_many_times('aaaa', 'aaaaaaabaa')\n\
    7\n>>> how_many_times('aaaa', 'aaaaaaabaaa')\n8\n>>> how_many_times('aaaa', 'aaaaaaabaaaa')\n\
    8\n>>> how_many_times('aaaa', 'aaaaaaabaaaaa')\n9\n>>> how_many_times('aaaa',\
    \ 'aaaaaaabaaaaaa')\n9\n>>> how_many_times('aaaa', 'aaaaaaabaaaaaaa')\n10\n>>>\
    \ how_many_times('aaaa', 'aaaaaaabaaaaaaab')\n10\n>>> how_many_times('aaaa', 'aaaaaaabaaaaaaaba')\n\
    11\n>>> how_many_times('aaaa', 'aaaaaaabaaaaaaabaa')\n11\n>>> how_many_times('aaaa',\
    \ 'aaaaaaabaaaaaaabaaa')\n12\n>>> how_many_times('aaaa', 'aaaaaaabaaaaaaabaaaa')\n\
    12\n>>> how_many_times('aaaa', 'aaaaaaabaaaaaaabaaaaa')\n13\n>>> how_many_times('aaaa',\
    \ 'aaaaaaabaaaaaaabaaaaaa')\n13\n>>> how_many_times('aaaa', 'aaaaaaabaaaaaaabaaaaaaa')\n\
    14\n>>> how_many_times('aaaa', 'aaaaaaabaaaaaaabaaaaaaab')\n14\n>>> \nusing Test\n\
    \n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\"\
    ) == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\"\
    , \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphc57je6r.jl:12\nin expression starting at\
    \ /tmp/tmphc57je6r.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    count = 0\n    for c in string:\n        if c == substring:\n        \
    \    count += 1\n    return count\n</code>\n<|/ a dscore=2 |>\n<| a tags=string,julia\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t\
    @test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\
    \t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\"\
    , \"john\") == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq19jdxrq.jl:12\nin expression starting at\
    \ /tmp/tmpq19jdxrq.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    i\
    \ = 0\n    \n    while i < length(string)\n        if substring(i, length(string))\
    \ == string\n            i += 1\n        else\n            i += 1\n    end\n \
    \   \n    return i\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aa\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string\
    \ and returns the number of times the substring \"aa\" appears in the string.\
    \ Case insensitive.\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\
    \t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") ==\
    \ 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john\
    \ doe\", \"john\") == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn74_tgl0.jl:24\nin expression starting at\
    \ /tmp/tmpn74_tgl0.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    len_string\
    \ = length(string)\n    len_substring = length(substring)\n    \n    if len_string\
    \ == 0 || len_substring == 0\n        return 0\n    \n    if len_string == len_substring\n\
    \        return len_string\n    \n    len_substring = len_substring - 1\n    \n\
    \    if substring(len_string, len_substring) == substring\n        return len_string\n\
    \    \n    len_string = len_string - 1\n    \n    if substring(len_string, len_substring)\
    \ == substring\n        return len_string\n    \n    len_string = len_string -\
    \ 1\n    \n    if substring(len_string, len_substring) == substring\n        return\
    \ len_string\n    \n    len_string = len_string - 1\n    \n    if substring(len_string,\
    \ len_substring) == substring\n        return len_string\n    \n    len_string\
    \ = len_string - 1\n    \n    if substring(len_string, len_substring) == substring\n\
    \        return len_string\n    \n    len_string = len_string - 1\n    \n    if\
    \ substring(len_string, len_substring) == substring\n        return len_string\n\
    \    \n    len_string = len_string - 1\n    \n    if substring(len_string, len_substring)\
    \ == substring\n        return len_string\n    \n    len_string = len_string -\
    \ 1\n    \n    if substring(len_string, len_substring) == substring\n        return\
    \ len_string\n    \n    len_string = len_string - 1\n    \n    if substring(len_string,\
    \ len_substring) == substring\n        return len_string\n    \n    len_string\
    \ = len_string - 1\n    \n    if substring(len_string, len_substring) == substring\n\
    \        return len_string\n    \n    len_string = len_string - 1\n    \n    if\
    \ substring(len_string, len_substring) == substring\n        return len_string\n\
    \    \n    len_string = len_string - 1\n    \n    if substring(len_string, len_substring)\
    \ == substring\n        return len_string\n    \n    len_string = len_string -\
    \ 1\n    \n    if substring(len_string, len_substring) == substring\n        return\
    \ len_string\n    \n    len_string = len_string - 1\n    \n    if substring(len_string,\
    \ len_substring) == substring\n        return len_string\n    \n    len_string\
    \ = len_string - 1\n    \n    if substring(len_string, len_substring) == substring\n\
    \        return len_string\n    \n    len_string = len_string - 1\n    \n    if\
    \ substring(len_string, len_substring) == substring\n        return len_string\n\
    \    \n    len_string = len_string - 1\n    \n    if substring(len_string, len_substring)\
    \ == substring\n        return len_string\n    \n    len_string = len_string -\
    \ 1\n    \nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4c84u_9o.jl:1\nin expression starting at /tmp/tmp4c84u_9o.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    count = 0\n    for c in string:\n        if c == substring:\n        \
    \    count += 1\n    return count\n</code>\n<|/ a tags=string,julia |>\n<| a |>\n\
    The function below will count the number of occurrences of substring in string\
    \ and return the count as a tuple:\n<code>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp42_dkuk8.jl:12\nin expression starting at\
    \ /tmp/tmp42_dkuk8.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and a substring and returns\
    \ the number of times the substring appears in the string. \nFor example, how_many_times(\"\
    aaaa\", \"aa\") should return 3.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm7rt0xfi.jl:12\nin expression starting at\
    \ /tmp/tmpm7rt0xfi.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring) + how_many_times(string,\
    \ substring[1:])\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a string and returns the number of times each character appears in the string.\n\
    using Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppik598fd.jl:12\nin expression starting at\
    \ /tmp/tmppik598fd.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    len_string\
    \ = length(string)\n    len_substring = length(substring)\n    \n    i = 0\n \
    \   j = 0\n    \n    while i < len_string && j < len_substring\n        if string[i]\
    \ == substring[j]\n            i += 1\n            j += 1\n        else\n    \
    \        if string[i] > substring[j]\n                i += 1\n            else\n\
    \                j += 1\n        end\n    end\n    \n    return j - i\nend\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and a substring and returns the number\
    \ of times the substring appears in the string. Case sensitivity is not important.\
    \ \nWrite a function that takes a string and a substring and returns the number\
    \ of times the substring appears in the string. Case sensitivity is important.\
    \ \nWrite a function that takes a string and a substring and returns the number\
    \ of times the substring appears in the string. Case sensitivity is important.\
    \ \nWrite a function that takes a string and a substring and returns the number\
    \ of times the substring appears in the string. Case sensitivity is important.\
    \ \nWrite a function that takes a string and a substring and returns the number\
    \ of times the substring appears in the string. Case sensitivity is important.\
    \ \nWrite a function that takes a string and a substring and returns the number\
    \ of times the substring appears in the string. Case sensitivity is important.\
    \ \nWrite a function that takes a string and a substring and returns the number\
    \ of times the substring appears in the string. Case sensitivity is important.\
    \ \nWrite a function that takes a string and a substring and returns the number\
    \ of times the substring appears in the string. Case sensitivity is important.\
    \ \nWrite a function that takes a string and a substring and returns the number\
    \ of times the substring appears in the string. Case sensitivity is important.\
    \ \nWrite a function that takes a string and a substring and returns the number\
    \ of times the substring appears in the string. Case sensitivity is important.\
    \ \nWrite a function that takes a string and a substring and returns the number\
    \ of times the substring appears in the string. Case sensitivity is important.\
    \ \nWrite a function that takes a string and a substring and returns the number\
    \ of times the substring appears in the string. Case sensitivity is important.\
    \ \nWrite a function that takes a string and a substring and returns the number\
    \ of times the substring appears in the string. Case sensitivity is important.\
    \ \nWrite a function that takes a string and a substring and returns the number\
    \ of times the substring appears in the string. Case sensitivity is important.\
    \ \nWrite a function that takes a string and a substring and returns the number\
    \ of times the substring appears in the string. Case sensitivity is important\n\
    using Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpws7d2voj.jl:33\nin expression starting at\
    \ /tmp/tmpws7d2voj.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    i\
    \ = 0\n    \n    while i < length(string)\n        if substring(i, 1) == string[i]\n\
    \            i += 1\n        else\n            i += 1\n        end\n    end\n\
    \    \n    return i\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaa\", \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ first index of a given substring in a given string. Return 0 if the substring\
    \ is not found.\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\
    \t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") ==\
    \ 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john\
    \ doe\", \"john\") == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm0daa079.jl:25\nin expression starting at\
    \ /tmp/tmpm0daa079.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    len_string\
    \ = length(string)\n    len_substring = length(substring)\n    \n    if len_string\
    \ == 0 || len_substring == 0\n        return 0\n    \n    if len_string == len_substring\n\
    \        return count_overlaping_cases(string, substring)\n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2tc2063q.jl:1\nin expression starting at /tmp/tmp2tc2063q.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    string::String\
    \ = string.lower()\n    substring::String = substring.lower()\n    \n    i = 0\n\
    \    \n    while i < length(string)\n        if string[i] == substring[0]\n  \
    \          i += 1\n        elseif string[i] == substring[1]\n            i +=\
    \ 1\n        elseif string[i] == substring[2]\n            i += 1\n        elseif\
    \ string[i] == substring[3]\n            i += 1\n        elseif string[i] == substring[4]\n\
    \            i += 1\n        elseif string[i] == substring[5]\n            i +=\
    \ 1\n        elseif string[i] == substring[6]\n            i += 1\n        elseif\
    \ string[i] == substring[7]\n            i += 1\n        elseif string[i] == substring[8]\n\
    \            i += 1\n        elseif string[i] == substring[9]\n            i +=\
    \ 1\n        elseif string[i] == substring[10]\n            i += 1\n        elseif\
    \ string[i] == substring[11]\n            i += 1\n        elseif string[i] ==\
    \ substring[12]\n            i += 1\n        elseif string[i] == substring[13]\n\
    \            i += 1\n        elseif string[i] == substring[14]\n            i\
    \ += 1\n        elseif string[i] == substring[15]\n            i += 1\n      \
    \  elseif string[i] == substring[16]\n            i += 1\n        elseif string[i]\
    \ == substring[17]\n            i += 1\n        elseif string[i] == substring[18]\n\
    \            i += 1\n        elseif string[i] == substring[19]\n            i\
    \ += 1\n        elseif string[i] == substring[20]\n            i += 1\n      \
    \  elseif string[i] == substring[21]\n            i += 1\n        elseif string[i]\
    \ == substring[22]\n            i += 1\n        elseif string[i] == substring[23]\n\
    \            i += 1\n        elseif string[i] == substring[24]\n            i\
    \ += 1\n        elseif string[i] == substring[25]\n            i += 1\n      \
    \  elseif string[i] == substring[26]\n            i += 1\n        elseif string[i]\
    \ == substring[27]\n            i += 1\n        elseif string[i] == substring[28]\n\
    \            i += 1\n        elseif string[i] == substring[29]\n            i\
    \ += 1\n        elseif string[i] == substring[30]\n            i += 1\n      \
    \  elseif string[i] == substring[31]\n            i += 1\n        elseif string[i]\
    \ == substring[32]\n            i += 1\n        elseif string[i] == substring[33]\n\
    \            i += 1\n        elseif string[i] == substring[34]\n            i\
    \ += 1\n        elseif string[i] == substring[35]\n            i += 1\n      \
    \  elseif string[i] == substring[36]\n            i += 1\n        elseif string[i]\
    \ == substring[37]\n            i += 1\n        elseif string[i] == substring[38]\n\
    \            i += 1\n        elseif string[i] == substring[39]\n            i\
    \ += 1\n        elseif string[i] == substring[40]\n            i += 1\n      \
    \  else\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmpppitrj92.jl:99\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpppitrj92.jl:1\n\
    in expression starting at /tmp/tmpppitrj92.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    count\
    \ = 0\n    \n    for c in string\n        if c == substring\n            count\
    \ += 1\n        else\n            count = 0\n    end\n    \n    return count\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4c20k5th.jl:24\nin expression starting at\
    \ /tmp/tmp4c20k5th.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    count = 0\n    for c in string:\n        if c == substring:\n        \
    \    count += 1\n    return count\nend\n</cell>\n<code language=julia-1.4>\nhow_many_times('aaaa',\
    \ 'aa')\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and\
    \ returns the number of times the string \"aaa\" appears in the string. \nWrite\
    \ a function that takes a string and returns the number of times the string \"\
    aa\" appears in the string. \nWrite a function that takes a string and returns\
    \ the number of times the string \"a\" appears in the string. \nWrite a function\
    \ that takes a string and returns the number of times the string \"aa\" appears\
    \ in the string. \nWrite a function that takes a string and returns the number\
    \ of times the string \"a\" appears in the string. \nWrite a function that takes\
    \ a string and returns the number of times the string \"aaa\" appears in the string.\
    \ \nWrite a function that takes a string and returns the number of times the string\
    \ \"aaaa\" appears in the string. \nWrite a function that takes a string and returns\
    \ the number of times the string \"aaaaa\" appears in the string. \nWrite a function\
    \ that takes a string and returns the number of times the string \"aaaaaa\" appears\
    \ in the string. \nWrite a function that takes a string and returns the number\
    \ of times the string \"aaaaaaa\" appears in the string. \nWrite a function that\
    \ takes a string and returns the number of times the string \"aaaaaaa\" appears\
    \ in the string. \nWrite a function that takes a string and returns the number\
    \ of times the string \"aaaaaaa\" appears in the string. \nWrite a function that\
    \ takes a string and returns the number of times the string \"aaaaaaa\" appears\
    \ in the string. \nWrite a function that takes a string and returns the number\
    \ of times the string \"aaaaaaa\" appears in the string. \nWrite a function that\
    \ takes a string and returns the number of times the string \"aaaaaaa\" appears\
    \ in the string. \nWrite a function that takes a string and returns the number\
    \ of times the string \"aaaaaaa\" appears in the string. \nWrite a function that\
    \ takes a string and returns the number of times the string \"aaaaaaa\" appears\
    \ in the string. \nWrite a function that takes a string and returns the number\
    \ of times the string \"aaaaaaa\" appears in the string. \nWrite a function that\
    \ takes a string and returns the number of times the string \"aaaaaaa\" appears\
    \ in the string. \nWrite a function that takes a string and returns the number\
    \ of times the string \"aaaaaaa\" appears in the string. \nWrite a function that\
    \ takes a string and returns the number of times the string \"aaaaaaa\" appears\
    \ in the string. \nWrite a function that takes a string and returns the number\
    \ of times the string \"aaaaaaa\" appears in the string. \nWrite a function that\
    \ takes a string and returns the number of times the string \"aaaa\nusing Test\n\
    \n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\"\
    ) == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\"\
    , \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz10xzaxz.jl:12\nin expression starting at\
    \ /tmp/tmpz10xzaxz.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    count\
    \ = 0\n    \n    for char in string\n        if char == substring[0]\n       \
    \     count = count + 1\n        else\n            count = 0\n    end\n    \n\
    \    return count\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\",\
    \ \"aaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"a\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"a\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"aa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"\
    aa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"a\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\",\
    \ \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"a\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\",\
    \ \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"a\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n<code language=julia-1.5>\n\
    how_\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcw6j4tq1.jl:24\nin expression starting at\
    \ /tmp/tmpcw6j4tq1.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    i\
    \ = 0\n    \n    while i < length(string)\n        if substring(i, 1) == string[i]\n\
    \            i += 1\n        else\n            i += 1\n    end\n    \n    return\
    \ i\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\n\
    candidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx4p42jo4.jl:24\nin expression starting at\
    \ /tmp/tmpx4p42jo4.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    i\
    \ = 0\n    \n    while i < length(string)\n        if substring(i, string) ==\
    \ string\n            i += 1\n        else\n            i = 0\n        end\n \
    \   end\n    \n    return i\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns the number of times a substring appears in the string. Count overlaping\
    \ cases.\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpit9sayyt.jl:25\nin expression starting at\
    \ /tmp/tmpit9sayyt.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    count\
    \ = 0\n    \n    for char in string\n        if char == substring[0]\n       \
    \     count += 1\n            \n            if char == substring[1]\n        \
    \        count += 1\n                \n            if char == substring[2]\n \
    \               count += 1\n                \n            if char == substring[3]\n\
    \                count += 1\n                \n            if char == substring[4]\n\
    \                count += 1\n                \n            if char == substring[5]\n\
    \                count += 1\n                \n            if char == substring[6]\n\
    \                count += 1\n                \n            if char == substring[7]\n\
    \                count += 1\n                \n            if char == substring[8]\n\
    \                count += 1\n                \n            if char == substring[9]\n\
    \                count += 1\n                \n            if char == substring[10]\n\
    \                count += 1\n                \n            if char == substring[11]\n\
    \                count += 1\n                \n            if char == substring[12]\n\
    \                count += 1\n                \n            if char == substring[13]\n\
    \                count += 1\n                \n            if char == substring[14]\n\
    \                count += 1\n                \n            if char == substring[15]\n\
    \                count += 1\n                \n            if char == substring[16]\n\
    \                count += 1\n                \n            if char == substring[17]\n\
    \                count += 1\n                \n            if char == substring[18]\n\
    \                count += 1\n                \n            if char == substring[19]\n\
    \                count += 1\n                \n            if char == substring[20]\n\
    \                count += 1\n                \n            if char == substring[21]\n\
    \                count += 1\n                \n            if char == substring[22]\n\
    \                count += 1\n                \n            if char == substring[23]\n\
    \                count += 1\n                \n            if char == substring[24]\n\
    \                count += 1\n                \n            if char == substring[25]\n\
    \                count += 1\n                \n            if char == substring[26]\n\
    \                count += 1\n                \n            if char == substring[27]\n\
    \                count += 1\n                \n            if char == substring[28]\n\
    \                count += 1\n                \n            if char == substring[29]\n\
    \                count += 1\n                \n            if char == substring[30]\n\
    \                count += 1\n                \n            if char == substring[31]\n\
    \                count += 1\n                \n            if char == substring[32]\n\
    \                count += 1\n                \n            if char == substring[33]\n\
    \                count += 1\n                \n            if char == substring[34]\n\
    \                count += 1\n                \n            if char == substring[35]\n\
    \                count += 1\n                \n            if char == substring[36]\n\
    \                count += 1\n                \n            if char == substring[37]\n\
    \                count += 1\n                \n            if char == substring[38]\n\
    \                count += 1\n                \n            if char == \nusing\
    \ Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\"\
    , \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqgbrjuwz.jl:1\nin expression starting at /tmp/tmpqgbrjuwz.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    count\
    \ = 0\n    \n    for char in string\n        if char == substring\n          \
    \  count += 1\n        else\n            count = 0\n    end\n    \n    return\
    \ count\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"\
    aa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and a\
    \ substring and returns the number of times the substring appears in the string.\
    \ Count overlaping cases.\n>>> how_many_times('', 'a')\n0\n>>> how_many_times('aaa',\
    \ 'a')\n3\n>>> how_many_times('aaaa', 'aa')\n3\n>>> how_many_times('aaaa', 'aaa')\n\
    3\n>>> how_many_times('aaaa', 'aaaa')\n3\n>>> how_many_times('aaaa', 'aaaaa')\n\
    3\n>>> how_many_times('aaaaa', 'aaaa')\n3\n>>> how_many_times('aaaaa', 'aaaaa')\n\
    3\n>>> how_many_times('aaaaaa', 'aaaa')\n3\n>>> how_many_times('aaaaaa', 'aaaaa')\n\
    3\n>>> how_many_times('aaaaaa', 'aaaaaa')\n3\n>>> how_many_times('aaaaaaa', 'aaaa')\n\
    3\n>>> how_many_times('aaaaaaa', 'aaaaa')\n3\n>>> how_many_times('aaaaaaa', 'aaaaaa')\n\
    3\n>>> how_many_times('aaaaaaa', 'aaaaaaa')\n3\n>>> how_many_times('aaaaaaa',\
    \ 'aaaaaaab')\n3\n>>> how_many_times('aaaaaaab', 'aaaa')\n3\n>>> how_many_times('aaaaaaab',\
    \ 'aaaaa')\n3\n>>> how_many_times('aaaaaaab', 'aaaaaa')\n3\n>>> how_many_times('aaaaaaab',\
    \ 'aaaaaaa')\n3\n>>> how_many_times('aaaaaaab', 'aaaaaaab')\n3\n>>> how_many_times('aaaaaaab',\
    \ 'aaaaaaac')\n3\n>>> how_many_times('aaaaaaab', 'aaaaaaac')\n3\n>>> how_many_times('aaaaaaab',\
    \ 'aaaaaaac')\n3\n>>> how_many_times('aaaaaaab', 'aaaaaaac')\n3\n>>> how_many_times('aaaaaaab',\
    \ 'aaaaaaac')\n3\n>>> how_man\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\
    \t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") ==\
    \ 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john\
    \ doe\", \"john\") == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg3cznj4e.jl:24\nin expression starting at\
    \ /tmp/tmpg3cznj4e.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    \n    if string[-1] == substring[-1]\n        return 1 + how_many_times(string[1..-1],\
    \ substring[1..-1])\n    \n    if string[1] == substring[1]\n        return 1\
    \ + how_many_times(string[2:], substring[2:])\n    \n    if string[2] == substring[2]\n\
    \        return 1 + how_many_times(string[3..-1], substring[3..-1])\n    \n  \
    \  return how_many_times(string[1..-1], substring[1..-1]) + how_many_times(string[2:],\
    \ substring[2:])\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\"\
    , \"aa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaab\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaba\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaabaa\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"aaabaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aaabaaab\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\"\
    , \"aaabaaaba\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\"\
    , \"aaabaaabaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\"\
    , \"aaabaaabaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\"\
    , \"aaabaaabaaab\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\"\
    , \"aaabaaabaaaba\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\"\
    , \"aaabaaabaaabaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\"\
    , \"aaabaaabaaabaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aaabaaabaaabaaab\")\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\
    \t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") ==\
    \ 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john\
    \ doe\", \"john\") == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3bzs2a8w.jl:14\nin expression\
    \ starting at /tmp/tmp3bzs2a8w.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ substring == string\n        return 1\n    else\n        return 1 + how_many_times(string[1:end-1],\
    \ substring)\nend\n</cell>\n<code language=julia-1.3>\nhow_many_times(\"aaaa\"\
    , \"aa\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string and\
    \ returns the number of times each character appears in the string. Case insensitive.\n\
    using Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo1ceczgw.jl:12\nin expression starting at\
    \ /tmp/tmpo1ceczgw.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring)\nend\n</cell>\n\
    <code language=julia-1.1>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the number of times\
    \ each character appears in the string. Ignore case. For example, the string \"\
    abBc\" should return [('a', 1), ('b', 1), ('c', 2)]\nusing Test\n\n@testset begin\n\
    \ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpppwgwhpu.jl:12\nin expression starting at\
    \ /tmp/tmpppwgwhpu.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns a new string\
    \ where all occurrences of \"a\" have been replaced with \"b\".\nusing Test\n\n\
    @testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\")\
    \ == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\"\
    , \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpauiutxe_.jl:12\nin expression starting at\
    \ /tmp/tmpauiutxe_.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    count\
    \ = 0\n    \n    for char in string\n        if char == substring\n          \
    \  count += 1\n        else\n            count = 0\n    end\n    \n    return\
    \ count\nend\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t\
    @test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\
    \t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\"\
    , \"john\") == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmq2vbc6d.jl:1\nin expression starting at /tmp/tmpmq2vbc6d.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    count\
    \ = 0\n    \n    for char in string\n        if char == substring[0]\n       \
    \     count = count + 1\n        else\n            count = 0\n    end\n    \n\
    \    return count\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns the number of times each character appears in the string.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\"\
    , \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg7w1d3s3.jl:24\nin expression starting at\
    \ /tmp/tmpg7w1d3s3.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of times each character appears in the string. Ignore case when counting.\n\
    using Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr9h1icsj.jl:12\nin expression starting at\
    \ /tmp/tmpr9h1icsj.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ substring == string\n        return 1\n    else\n        return 1 + how_many_times(string[1:end],\
    \ substring)\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\"\
    , \"aa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and\
    \ a substring and returns the number of times the substring appears in the string.\
    \ Count overlaping cases.\n>>> how_many_times('', 'a')\n0\n>>> how_many_times('aaa',\
    \ 'a')\n3\n>>> how_many_times('aaaa', 'aa')\n3\n>>> how_many_times('aaaa', 'ab')\n\
    2\n>>> how_many_times('aaaa', 'aaa')\n3\n>>> how_many_times('aaaa', 'aaaa')\n\
    3\n>>> how_many_times('aaaa', 'aaaaa')\n4\n>>> how_many_times('aaaa', 'aaaaaa')\n\
    4\n>>> how_many_times('aaaa', 'aaaaaaa')\n5\n>>> how_many_times('aaaa', 'aaaaaaab')\n\
    5\n>>> how_many_times('aaaa', 'aaaaaaaba')\n5\n>>> how_many_times('aaaa', 'aaaaaaabaa')\n\
    5\n>>> how_many_times('aaaa', 'aaaaaaabaaa')\n5\n>>> how_many_times('aaaa', 'aaaaaaabaaaa')\n\
    5\n>>> how_many_times('aaaa', 'aaaaaaabaaaaa')\n5\n>>> how_many_times('aaaa',\
    \ 'aaaaaaabaaaaaa')\n5\n>>> how_many_times('aaaa', 'aaaaaaabaaaaaaa')\n5\n>>>\
    \ how_many_times('aaaa', 'aaaaaaabaaaaaaab')\n5\n>>> how_many_times('aaaa', 'aaaaaaabaaaaaaaba')\n\
    5\n>>> how_many_times('aaaa', 'aaaaaaabaaaaaaabaa')\n5\n>>> how_many_times('aaaa',\
    \ 'aaaaaaabaaaaaaabaaa')\n5\n>>> how_many_times('aaaa', 'aaaaaaabaaaaaaabaaaa')\n\
    5\n>>> how_many_times('aaaa', 'aaaaaaabaaaaaaabaaaaa')\n5\n>>> how_many_times('aaaa',\
    \ 'aaaaaaabaaaaaaabaaaaaa')\n5\n>>> how_many_times('aaaa', 'aaaaaaabaaaaaaabaaaa\n\
    using Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp64svvbhq.jl:12\nin expression starting at\
    \ /tmp/tmp64svvbhq.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ substring == string\n        return 1\n    else\n        return 1 + how_many_times(string[1:end-1],\
    \ substring)\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\"\
    , \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aba\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"abaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"abaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\"\
    , \"abaaab\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"\
    abaaaba\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"abaaabaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"abaaabaaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"abaaabaaab\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"abaaabaaaba\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"abaaabaaabaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"abaaabaaabaaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"abaaabaaabaaab\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"abaaabaaabaaaba\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"abaaabaaabaaabaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"abaaabaaabaaabaaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"abaaabaaabaaabaaab\"\
    )\n</cell>\n<code language=julia-1.5\nusing Test\n\n@testset begin\n\ncandidate\
    \ = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpojdvplc3.jl:12\nin expression starting at\
    \ /tmp/tmpojdvplc3.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ substring in string\n        return 1 + how_many_times(string[end], substring)\n\
    \    else\n        return how_many_times(string[end], substring) + how_many_times(string,\
    \ substring[end])\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"\
    aa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and a\
    \ substring and returns the number of times the substring appears in the string.\n\
    using Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfn06lxa_.jl:12\nin expression starting at\
    \ /tmp/tmpfn06lxa_.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ substring == string\n        return 1\n    else\n        return 1 + how_many_times(string[1:end-1],\
    \ substring)\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a\
    \ string and returns the number of times each character appears in the string.\
    \ \nFor example, the string \"abracadabra\" would return {\"a\":2, \"b\":1, \"\
    c\":1, \"d\":1, \"r\":2}.\nHint: Use a dictionary to store the counts. \nHint:\
    \ Use a for loop to iterate over the string.\nusing Test\n\n@testset begin\n\n\
    candidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnd4jw4hh.jl:12\nin expression starting at\
    \ /tmp/tmpnd4jw4hh.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return 1 + how_many_times(string[1:], substring)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a string and returns the number\
    \ of times a substring appears in the string. Count overlaping cases.\nusing Test\n\
    \n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\"\
    ) == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\"\
    , \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptzlocn5q.jl:12\nin expression starting at\
    \ /tmp/tmptzlocn5q.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    count\
    \ = 0\n    \n    for char in string\n        if char == substring[0]\n       \
    \     count = count + 1\n            \n            if char == substring[1]\n \
    \               count = count + 1\n                \n                if char ==\
    \ substring[2]\n                    count = count + 1\n                    \n\
    \                    if char == substring[3]\n                        count =\
    \ count + 1\n                        \n                        if char == substring[4]\n\
    \                            count = count + 1\n                            \n\
    \                            if char == substring[5]\n                       \
    \         count = count + 1\n                                \n              \
    \                  if char == substring[6]\n                                 \
    \   count = count + 1\n                                    \n                \
    \                    if char == substring[7]\n                               \
    \         count = count + 1\n                                        \n      \
    \                                  if char == substring[8]\n                 \
    \                           count = count + 1\n                              \
    \              \n                                            if char == substring[9]\n\
    \                                                count = count + 1\n         \
    \                                       \n                                   \
    \             if char == substring[10]\n                                     \
    \               count = count + 1\n                                          \
    \          \n                                                    if char == substring[11]\n\
    \                                                        count = count + 1\n \
    \                                                       \n                   \
    \                                     if char == substring[12]\n             \
    \                                               count = count + 1\n          \
    \                                                  \n                        \
    \                                    if char == substring[13]\n              \
    \                                                  count = count + 1\n       \
    \                                                         \n                 \
    \                                               if char == substring[14]\n   \
    \                                                                 count = count\
    \ + 1\n                                                                    \n\
    \                                                    if char == substring[15]\n\
    \                                                        count = count + 1\n \
    \                                                       \n                   \
    \                                     if char == substring[16]\n             \
    \                                               count = count + 1\n          \
    \                                                  \n                        \
    \                                    if char == substring[17]\n              \
    \                                                  count = count + 1\n       \
    \                                                         \n                 \
    \                               if char == substring[18]\n                   \
    \                                 count = count + 1\n                        \
    \                            \n                                              \
    \      if char == substring[19]\n                                            \
    \            count = count + 1\n                                             \
    \           \n                                                        if char\
    \ == substring[20]\n                                                         \
    \   count = count + 1\n                                                      \
    \      \n                                                            if char ==\
    \ substring[21]\n                                                            \
    \    count = count + 1\n                                                     \
    \           \n                                                if char == substring[22]\n\
    \                                                    count = count + 1\n     \
    \                                               \n                           \
    \                         if char == substring[23]\n                         \
    \                               count = count + 1\n                          \
    \                              \n                                            \
    \            if char == substring[24]\n                                      \
    \                      count = count + 1\n                                   \
    \                         \n                                                 \
    \           if char == substring[25]\n                                       \
    \                         count = count + 1\n                                \
    \                                \n                                          \
    \      if char == substring[26]\n                                            \
    \        count = count + 1\n                                                 \
    \   \n                                                    if char == substring[27]\n\
    \                                                        count = count + 1\n \
    \                                                       \n                   \
    \                                     if char == substring[28]\n             \
    \                                               count = count + 1\n          \
    \                                                  \n                        \
    \                                    if char == substring[29]\n              \
    \                                                  count = count + 1\n       \
    \                                                         \n                 \
    \                               if char == substring[30]\n                   \
    \                                 count = count + 1\n                        \
    \                            \n                                              \
    \      if char == substring[31]\n                                            \
    \            count = count + 1\n                                             \
    \           \n                                                        if char\n\
    using Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwa9mapo4.jl:1\nin expression starting at /tmp/tmpwa9mapo4.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0 \n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else if string[0] == substring[1]\n        return 1 + how_many_times(string[1:],\
    \ substring[2:])\n    else\n        return how_many_times(string[1:], substring)\n\
    end\n</cell>\n<code language=julia-1.0>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <code language=julia-1.0>\nhow_many_times(\"aaaa\", \"aaa\")\n</cell>\n<code language=julia-1.0>\n\
    how_many_times(\"aaaa\", \"aaaa\")\n</cell>\n<code language=julia-1.0>\nhow_many_times(\"\
    aaaa\", \"aaaaa\")\n</cell>\n<code language=julia-1.0>\nhow_many_times(\"aaaa\"\
    , \"aaaaaa\")\n</cell>\n<code language=julia-1.0>\nhow_many_times(\"aaaa\", \"\
    aaaaaaa\")\n</cell>\n<code language=julia-1.0>\nhow_many_times(\"aaaa\", \"aaaaaaab\"\
    )\n</cell>\n<code language=julia-1.0>\nhow_many_times(\"aaaa\", \"aaaaaaabb\"\
    )\n</cell>\n<code language=julia-1.0>\nhow_many_times(\"aaaa\", \"aaaaaaabbb\"\
    )\n</cell>\n<code language=julia-1.0>\nhow_many_times(\"aaaa\", \"aaaaaaabbbb\"\
    )\n</cell>\n<code language=julia-1.0>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbb\"\
    )\n</cell>\n<code language=julia-1.0>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbba\"\
    )\n</cell>\n<code language=julia-1.0>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbbaa\"\
    )\n</cell>\n<code language=julia-1.0>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbbaaa\"\
    )\n</cell>\n<code language=julia-1.0>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbbaaaa\"\
    )\n</cell>\n<code language=julia-1.0>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbbaaaaa\"\
    )\n</cell>\n<code language=julia-1.0>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbbaaaaaa\"\
    )\n</cell>\n<code language=julia-1.0>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbbaaaaaaa\"\
    )\n</cell\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppovaxbfh.jl:12\nin expression starting at\
    \ /tmp/tmppovaxbfh.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    \n    if string[-1] == substring[-1]\n        return 1 + how_many_times(string[1..-1],\
    \ substring[1..-1])\n    \n    if string[0] == substring[0]\n        return 1\
    \ + how_many_times(string[1:], substring[1:])\n    \n    if string[-1] == substring[-1]\n\
    \        return 1 + how_many_times(string[1..-1], substring[1..-1])\n    \n  \
    \  if string[0] == substring[0]\n        return 1 + how_many_times(string[1:],\
    \ substring[1:])\n    \n    if string[-1] == substring[-1]\n        return 1 +\
    \ how_many_times(string[1..-1], substring[1..-1])\n    \n    if string[0] == substring[0]\n\
    \        return 1 + how_many_times(string[1:], substring[1:])\n    \n    if string[-1]\
    \ == substring[-1]\n        return 1 + how_many_times(string[1..-1], substring[1..-1])\n\
    \    \n    if string[0] == substring[0]\n        return 1 + how_many_times(string[1:],\
    \ substring[1:])\n    \n    if string[-1] == substring[-1]\n        return 1 +\
    \ how_many_times(string[1..-1], substring[1..-1])\n    \n    if string[0] == substring[0]\n\
    \        return 1 + how_many_times(string[1:], substring[1:])\n    \n    if string[-1]\
    \ == substring[-1]\n        return 1 + how_many_times(string[1..-1], substring[1..-1])\n\
    \    \n    if string[0] == substring[0]\n        return 1 + how_many_times(string[1:],\
    \ substring[1:])\n    \n    if string[-1] == substring[-1]\n        return 1 +\
    \ how_many_times(string[1..-1], substring[1..-1])\n    \n    if string[0] == substring[0]\n\
    \        return 1 + how_many_times(string[1:], substring[1:])\n    \n    if string[-1]\
    \ == substring[-1]\n        return 1 + how_many_times(string[1..-1], substring[1..-1])\n\
    \    \n    if string[0] == substring[0]\n        return 1 + how_many_times(string[1:],\
    \ substring[1:])\n    \n    if string[-1] == substring[-1]\n        return 1 +\
    \ how_many_times(string[1..-1], substring[1..-1])\n    \n    if string[0] == substring[0]\n\
    \        return 1 + how_many_times(string[1:], substring[1:])\n    \n    if string[-1]\
    \ == substring[-1]\n        return 1 + how_many_times(string[\nusing Test\n\n\
    @testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\")\
    \ == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\"\
    , \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmwvfk_0o.jl:14\nin expression\
    \ starting at /tmp/tmpmwvfk_0o.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0 \n    \n    len_string\
    \ = length(string)\n    len_substring = length(substring)\n    \n    if len_string\
    \ == 0 || len_substring == 0\n        return 0 \n    \n    if len_string == len_substring\n\
    \        return 1 \n    \n    count = 0\n    \n    for index in 0..len_substring-1\n\
    \        if substring(index) == string[index]\n            count += 1\n      \
    \  end\n    end\n    \n    return count\nend\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"aa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"ab\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\",\
    \ \"aba\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"abaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"abaaa\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"abaaab\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"aaaa\", \"abaaaba\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"abaaabaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"abaaabaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"abaaabaaab\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"abaaabaaaba\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"abaaabaaabaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"abaaabaaabaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"abaaabaaabaaab\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"abaaabaaabaaaba\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"abaaabaaabaaabaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"abaaabaaabaaabaaa\")\n</cell>\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw4btx4gc.jl:32\nin expression starting at\
    \ /tmp/tmpw4btx4gc.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return 1 + how_many_times(string[1:], substring)\nend\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and a substring and returns the number\
    \ of times the substring appears in the string. Case sensitivity is not considered.\n\
    using Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcrwlwvjj.jl:12\nin expression starting at\
    \ /tmp/tmpcrwlwvjj.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    count\
    \ = 0\n    \n    for c in string\n        if c == substring\n            count\
    \ += 1\n        else\n            count = 0\n    end\n    \n    return count\n\
    end\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"aaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\"\
    , \"aaaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"\
    aaaaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaab\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaaba\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabaa\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabaaa\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabaaab\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabaaaba\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabaaabaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabaaabaaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabaaabaaab\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabaaabaaaba\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabaaabaaabaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabaaabaaabaaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_\nusing Test\n\n@testset begin\n\
    \ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpaqyy2mfq.jl:24\nin expression starting at\
    \ /tmp/tmpaqyy2mfq.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return 1 + how_many_times(string[1:], substring)\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of times a substring appears within that string.\nusing Test\n\n@testset begin\n\
    \ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_poorc3x.jl:12\nin expression starting at\
    \ /tmp/tmp_poorc3x.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    count = 0\n    for c in string:\n        if c == substring:\n        \
    \    count += 1\n    return count\n</cell>\n<code language=julia-1.5>\nhow_many_times('',\
    \ 'a')\n</cell>\n<code language=julia-1.5>\nhow_many_times('aaa', 'a')\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times('aaaa', 'aa')\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the number of times a substring appears in\
    \ a string.\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyq5rn6mi.jl:12\nin expression starting at\
    \ /tmp/tmpyq5rn6mi.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    i\
    \ = 0\n    \n    while i < length(string)\n        if substring(i, length(string))\
    \ in string\n            i += 1\n        else\n            i = 0\n        end\n\
    \    end\n    \n    return i\nend\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"\
    abba\", \"ab\")\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"abba\",\
    \ \"ba\")\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"abba\", \"aba\"\
    )\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"abba\", \"abba\")\n</cell>\n\
    <code language=julia-1.4>\nhow_many_times(\"abba\", \"abbb\")\n</cell>\n<code\
    \ language=julia-1.4>\nhow_many_times(\"abba\", \"abbbb\")\n</cell>\n<code language=julia-1.4>\n\
    how_many_times(\"abba\", \"abbbba\")\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"\
    abba\", \"abbbbba\")\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"abba\"\
    , \"abbbbbaa\")\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"abba\",\
    \ \"abbbbbaaa\")\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"abba\"\
    , \"abbbbbaaaa\")\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"abba\"\
    , \"abbbbbaaaaa\")\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"abba\"\
    , \"abbbbbaaaaaa\")\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"abba\"\
    , \"abbbbbaaaaaaa\")\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"abba\"\
    , \"abbbbbaaaaaaaa\")\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"abba\"\
    , \"abbbbbaaaaaaaab\")\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"\
    abba\", \"abbbbbaaaaaaaabb\")\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"\
    abba\", \"abbbbbaaaaaaaabbb\")\n</cell>\n<code language=julia-\nusing Test\n\n\
    @testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\")\
    \ == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\"\
    , \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqiiemra_.jl:25\nin expression starting at\
    \ /tmp/tmpqiiemra_.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    \n    if string[-1] == substring[-1]\n        return 1 + how_many_times(string[1..-1],\
    \ substring[1..-1])\n    \n    if string[0] == substring[-1]\n        return 1\
    \ + how_many_times(string[1:], substring[1..-1])\n    \n    if string[-1] == substring[0]\n\
    \        return 1 + how_many_times(string[1..-1], substring[1:])\n    \n    return\
    \ how_many_times(string[1:], substring[1..-1]) + how_many_times(string[1..-1],\
    \ substring[1:])\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times('',\
    \ 'a')\n</cell>\n<code language=julia-1.5>\nhow_many_times('aaa', 'a')\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times('aaaa', 'aa')\n</cell>\n<code language=julia-1.5>\n\
    how_many_times('aaaa', 'aaa')\n</cell>\n<code language=julia-1.5>\nhow_many_times('aaaa',\
    \ 'aaaa')\n</cell>\n<code language=julia-1.5>\nhow_many_times('aaaa', 'aaaaa')\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times('aaaa', 'aaaaaa')\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times('aaaa', 'aaaaaaa')\n</cell>\n<code language=julia-1.5>\n\
    how_many_times('aaaa', 'aaaaaaab')\n</cell>\n<code language=julia-1.5>\nhow_many_times('aaaa',\
    \ 'aaaaaaaba')\n</cell>\n<code language=julia-1.5>\nhow_many_times('aaaa', 'aaaaaaabaa')\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times('aaaa', 'aaaaaaabaaa')\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times('aaaa', 'aaaaaaabaaaa')\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times('aaaa', 'aaaaaaabaaaaa')\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times('aaaa', 'aaaaaaabaaaaaa')\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times('aaaa', 'aaaaaaabaaaaaaa')\n</cell>\n\n\
    using Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8jt1xx5w.jl:14\nin expression\
    \ starting at /tmp/tmp8jt1xx5w.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    len_string\
    \ = length(string)\n    len_substring = length(substring)\n    \n    if len_string\
    \ == 0 || len_substring == 0\n        return 0\n    \n    \n    \n    if string[len_string\
    \ - 1] == substring[0]\n        return 1 + how_many_times(string[1:len_string\
    \ - 1], substring[1:])\n    \n    if substring[len_substring - 1] == string[0]\n\
    \        return 1 + how_many_times(string[1:len_string - 1], substring[1:len_substring\
    \ - 1])\n    \n    if string[len_string - 1] == substring[len_substring - 1]\n\
    \        return 1 + how_many_times(string[1:len_string - 1], substring[1:len_substring\
    \ - 1])\n    \n    if substring[len_substring - 1] == string[len_string - 1]\n\
    \        return 1 + how_many_times(string[1:len_string - 1], substring[1:len_substring\
    \ - 1])\n    \n    if string[len_string - 1] == substring[0]\n        return 1\
    \ + how_many_times(string[1:len_string - 1], substring[1:])\n    \n    if substring[len_substring\
    \ - 1] == string[len_string - 1]\n        return 1 + how_many_times(string[1:len_string\
    \ - 1], substring[1:len_substring - 1])\n    \n    if string[len_string - 1] ==\
    \ substring[len_substring - 1]\n        return 1 + how_many_times(string[1:len_string\
    \ - 1], substring[1:len_substring - 1])\n    \n    if substring[len_substring\
    \ - 1] == string[0]\n        return 1 + how_many_times(string[1:len_string - 1],\
    \ substring[1:len_substring - 1])\n    \n    if substring[len_substring - 1] ==\
    \ string[len_string - 1]\n        return 1 + how_many_times(string[1:len_string\
    \ - 1], substring[1:len_substring - 1])\n    \n    if string[len_string - 1] ==\
    \ substring[0]\n        return 1 + how_many_times(string[1:len_string - 1], substring[1:])\n\
    \    \n    if substring[len_substring - 1] == string[0]\n        return 1 + how_many_times(string[1:len_string\
    \ - 1], substring[1:len_substring - 1])\n    \n    if string[len_string - 1] ==\
    \ substring[len_substring - 1]\n        return 1 + how_many_times(string[1:len_string\
    \ - 1], substring[1:len_substring - 1])\n    \n    if substring[len_substring\
    \ - 1] == string[len_string - 1]\n        return 1 + how_many_time\nusing Test\n\
    \n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\"\
    ) == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\"\
    , \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6fc70ypr.jl:22\nin expression\
    \ starting at /tmp/tmp6fc70ypr.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    count\
    \ = 0\n    \n    for char in string\n        if char == substring[0]\n       \
    \     count = count + 1\n            \n            if char == substring[1]\n \
    \               count = count + 1\n                \n            if char == substring[2]\n\
    \                count = count + 1\n                \n            if char == substring[3]\n\
    \                count = count + 1\n                \n            if char == substring[4]\n\
    \                count = count + 1\n                \n            if char == substring[5]\n\
    \                count = count + 1\n                \n            if char == substring[6]\n\
    \                count = count + 1\n                \n            if char == substring[7]\n\
    \                count = count + 1\n                \n            if char == substring[8]\n\
    \                count = count + 1\n                \n            if char == substring[9]\n\
    \                count = count + 1\n                \n            if char == substring[10]\n\
    \                count = count + 1\n                \n            if char == substring[11]\n\
    \                count = count + 1\n                \n            if char == substring[12]\n\
    \                count = count + 1\n                \n            if char == substring[13]\n\
    \                count = count + 1\n                \n            if char == substring[14]\n\
    \                count = count + 1\n                \n            if char == substring[15]\n\
    \                count = count + 1\n                \n            if char == substring[16]\n\
    \                count = count + 1\n                \n            if char == substring[17]\n\
    \                count = count + 1\n                \n            if char == substring[18]\n\
    \                count = count + 1\n                \n            if char == substring[19]\n\
    \                count = count + 1\n                \n            if char == substring[20]\n\
    \                count = count + 1\n                \n            if char == substring[21]\n\
    \                count = count + 1\n                \n            if char == substring[22]\n\
    \                count = count + 1\n                \n            if char == substring[23]\n\
    \                count = count + 1\n                \n            if char == substring[24]\n\
    \                count = count + 1\n                \n            if char == substring[25]\n\
    \                count = count + 1\n                \n            if char == substring[26]\n\
    \                count = count + 1\n                \n            if char == substring[27]\n\
    \                count = count + 1\n                \n            if char == substring[28]\n\
    \                count = count + 1\n                \n            if char == substring[29]\n\
    \                count = count + 1\n                \n            if char == substring[30]\n\
    \                count = count + 1\n                \n            if char == substring[31]\n\
    \                count = count + 1\n                \n            if char == substring[32]\n\
    \                count = count + 1\n                \n            if char == substring[33]\n\
    \                count = count + 1\n                \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\
    \t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\",\
    \ \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp67l12dvr.jl:1\nin expression starting at /tmp/tmp67l12dvr.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0 \n    else \n\
    \        count = 0\n        for char in string\n            if char == substring\n\
    \                count += 1\n            else\n                if count > 0\n\
    \                    return count\n                else\n                    count\
    \ = 0\n        end\n        return count\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi_9k3btc.jl:25\nin expression starting at\
    \ /tmp/tmpi_9k3btc.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    count\
    \ = 0\n    \n    for c in string\n        if c == substring\n            count\
    \ += 1\n        else\n            count = 0\n    end\n    \n    return count\n\
    end\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and a substring and returns\
    \ the number of times the substring appears in the string. Count overlaping cases.\n\
    \    >>> how_many_times_2('', 'a')\n    0\n    >>> how_many_times_2('aaa', 'a')\n\
    \    2\n    >>> how_many_times_2('aaaa', 'aa')\n    2\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\"\
    ) == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\"\
    , \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9_57vc0f.jl:24\nin expression starting at\
    \ /tmp/tmp9_57vc0f.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    count\
    \ = 0\n    \n    for char in string\n        if char == substring[0]\n       \
    \     count = count + 1\n            \n            if char == substring[1]\n \
    \               count = count + 1\n                \n                if char ==\
    \ substring[2]\n                    count = count + 1\n                    \n\
    \                    if char == substring[3]\n                        count =\
    \ count + 1\n                        \n                        if char == substring[4]\n\
    \                            count = count + 1\n                            \n\
    \                            if char == substring[5]\n                       \
    \         count = count + 1\n                                \n              \
    \                  if char == substring[6]\n                                 \
    \   count = count + 1\n                                    \n                \
    \                    if char == substring[7]\n                               \
    \         count = count + 1\n                                        \n      \
    \                                  if char == substring[8]\n                 \
    \                           count = count + 1\n                              \
    \              \n                                            if char == substring[9]\n\
    \                                                count = count + 1\n         \
    \                                       \n                                   \
    \             if char == substring[10]\n                                     \
    \               count = count + 1\n                                          \
    \          \n                                                    if char == substring[11]\n\
    \                                                        count = count + 1\n \
    \                                                       \n                   \
    \                                     if char == substring[12]\n             \
    \                                               count = count + 1\n          \
    \                                                  \n                        \
    \                                    if char == substring[13]\n              \
    \                                                  count = count + 1\n       \
    \                                                         \n                 \
    \                                               if char == substring[14]\n   \
    \                                                                 count = count\
    \ + 1\n                                                                    \n\
    \                                                                    if char ==\
    \ substring[15]\n                                                            \
    \            count = count + 1\n                                             \
    \                           \n                                               \
    \         if char == substring[16]\n                                         \
    \                   count = count + 1\n                                      \
    \                      \n                                                    \
    \        if char == substring[17]\n                                          \
    \                      count = count + 1\n                                   \
    \                             \n                                             \
    \                   if char == substring[18]\n                               \
    \                                     count = count + 1\n                    \
    \                                                \n                          \
    \                                          if char == substring[19]\n        \
    \                                                                count = count\
    \ + 1\n                                                                      \
    \  \n                                                        if char == substring[20]\n\
    \                                                            count = count + 1\n\
    \                                                            \n              \
    \                                              if char == substring[21]\n    \
    \                                                            count = count + 1\n\
    \                                                                \n          \
    \                                                      if char == substring[22]\n\
    \                                                                    count = count\
    \ + 1\n                                                                    \n\
    \                                                                    if char ==\
    \ substring[23]\n                                                            \
    \            count = count + 1\n                                             \
    \                           \n                                               \
    \         if char == substring[24]\n                                         \
    \                   count = count + 1\n                                      \
    \                      \n                                                    \
    \        if char == substring[25]\n                                          \
    \                      count = count + 1\n                                   \
    \                             \n                                             \
    \                   if char == substring[26]\n                               \
    \                                     count = count + 1\n                    \
    \                                                \n                          \
    \                                          if char == substring[27]\n        \
    \                                                                count = count\
    \ + 1\n                                                                      \
    \  \n                                                        if char == substring[28]\n\
    \                                                            count = count + 1\n\
    \                                                            \n              \
    \                                              if char == substring[29]\n    \
    \                                                            count = count + 1\n\
    \                                                                \n          \
    \                                                      if char == substring[30]\n\
    \                                                                    count = count\
    \ + 1\n                                \nusing Test\n\n@testset begin\n\ncandidate\
    \ = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppt0yy14t.jl:1\nin expression starting at /tmp/tmppt0yy14t.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    count\
    \ = 0\n    \n    for c in string\n        if c == substring\n            count\
    \ += 1\n        else\n            count = 0\n    end\n    \n    return count\n\
    end\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"a\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"aa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\"\
    , \"aaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaa\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaa\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaab\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabb\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbb\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbb\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbb\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbba\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbbaa\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbbaaa\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbbaaaa\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbbaaaaa\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbbaaaaaa\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaab\nusing\
    \ Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\"\
    , \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpidml5dl1.jl:24\nin expression starting at\
    \ /tmp/tmpidml5dl1.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    count\
    \ = 0\n    \n    for c in string\n        if c == substring[0]\n            count\
    \ = count + 1\n            \n            if substring[1] == c\n              \
    \  count = count + 1\n            \n            if substring[2] == c\n       \
    \         count = count + 1\n            \n            if substring[3] == c\n\
    \                count = count + 1\n            \n            if substring[4]\
    \ == c\n                count = count + 1\n            \n            if substring[5]\
    \ == c\n                count = count + 1\n            \n            if substring[6]\
    \ == c\n                count = count + 1\n            \n            if substring[7]\
    \ == c\n                count = count + 1\n            \n            if substring[8]\
    \ == c\n                count = count + 1\n            \n            if substring[9]\
    \ == c\n                count = count + 1\n            \n            if substring[10]\
    \ == c\n                count = count + 1\n            \n            if substring[11]\
    \ == c\n                count = count + 1\n            \n            if substring[12]\
    \ == c\n                count = count + 1\n            \n            if substring[13]\
    \ == c\n                count = count + 1\n            \n            if substring[14]\
    \ == c\n                count = count + 1\n            \n            if substring[15]\
    \ == c\n                count = count + 1\n            \n            if substring[16]\
    \ == c\n                count = count + 1\n            \n            if substring[17]\
    \ == c\n                count = count + 1\n            \n            if substring[18]\
    \ == c\n                count = count + 1\n            \n            if substring[19]\
    \ == c\n                count = count + 1\n            \n            if substring[20]\
    \ == c\n                count = count + 1\n            \n            if substring[21]\
    \ == c\n                count = count + 1\n            \n            if substring[22]\
    \ == c\n                count = count + 1\n            \n            if substring[23]\
    \ == c\n                count = count + 1\n            \n            if substring[24]\
    \ == c\n                count = count + 1\n            \n            if substring[25]\
    \ == c\n                count = count + 1\n            \n            if substring[26]\
    \ == c\n                count = count + 1\n            \n            if substring[27]\
    \ == c\n                count = count + 1\n            \n            if substring[28]\
    \ == c\n                count = count + 1\n            \n            if substring[29]\
    \ == c\n                count = count + 1\n            \n            if substring[30]\
    \ == c\n                count = count + 1\n            \n            if substring[31]\
    \ == c\n                count = count + 1\n            \n            if substring[32]\
    \ == c\n                count = count + 1\n            \n            if substring[33]\
    \ == c\n                count = count + 1\n            \n            if substring[34]\
    \ == c\n                count = count + 1\n            \n            if substring[35]\
    \ == c\n                count = count + 1\n            \nusing Test\n\n@testset\
    \ begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\
    \t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\",\
    \ \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3f6h4pis.jl:1\nin expression starting at /tmp/tmp3f6h4pis.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    len_string\
    \ = length(string)\n    len_substring = length(substring)\n    \n    if len_string\
    \ == 0 || len_substring == 0\n        return 0\n    \n    if len_string == len_substring\n\
    \        return count_substring(string, substring)\n    \n    if len_string >\
    \ len_substring\n        return how_many_times(substring(string, 1, len_substring),\
    \ substring)\n    \n    return how_many_times(substring(string, 0, len_string),\
    \ substring)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\
    \t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\",\
    \ \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpweizp3u7.jl:27\nin expression starting at\
    \ /tmp/tmpweizp3u7.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return 1 + how_many_times(string[1:], substring)\nend\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"abba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"abba\", \"ba\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abba\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abba\", \"\
    bb\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abba\", \"bbb\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"abba\", \"bbba\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"abba\", \"abba\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"abba\", \"abbb\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"abba\", \"abbbb\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abba\", \"abbbba\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abba\"\
    , \"abbbab\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abba\", \"\
    abbbbac\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abba\", \"abbbbac\"\
    ) # no overlap\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abba\", \"\
    abbbbaca\") # no overlap\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abba\", \"abbbbaca\") # no overlap\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abba\", \"abbbbaca\") # no overlap\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abba\", \"abbbbaca\") # no overlap\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abba\", \"abbbbaca\") # no overlap\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abba\", \"ab\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t\
    @test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\
    \t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\"\
    , \"john\") == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbq4gj0q3.jl:12\nin expression starting at\
    \ /tmp/tmpbq4gj0q3.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return 1 + how_many_times(string[1:], substring)\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a string and returns the number\
    \ of times a substring appears within it. The substring may appear anywhere within\
    \ the string. For example, if the string is 'abcabcbb', the substring 'abc' appears\
    \ three times in the string. The function should return the number 3.\nusing Test\n\
    \n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\"\
    ) == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\"\
    , \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7ob6ge2b.jl:12\nin expression starting at\
    \ /tmp/tmp7ob6ge2b.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    count\
    \ = 0\n    \n    for char in string\n        if char == substring\n          \
    \  count += 1\n        else\n            count = 0\n    end\n    return count\n\
    end\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of times a substring appears in the string. Count overlaping cases.\nusing Test\n\
    \n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\"\
    ) == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\"\
    , \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxgawqwly.jl:23\nin expression starting at\
    \ /tmp/tmpxgawqwly.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    count\
    \ = 0\n    \n    for char in string\n        if char == substring\n          \
    \  count += 1\n        end\n    end\n    \n    return count\nend\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns the number of times a substring\
    \ appears within the string. \nFor example, how_many_times(\"aaaa\", \"aa\") should\
    \ return 3.\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6eussi1q.jl:23\nin expression starting at\
    \ /tmp/tmp6eussi1q.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    len_string\
    \ = length(string)\n    len_substring = length(substring)\n    \n    if len_string\
    \ == 0 || len_substring == 0\n        return 0\n    \n    i = 0\n    j = 0\n \
    \   \n    while i < len_string && j < len_substring\n        if string[i] == substring[j]\n\
    \            i += 1\n            j += 1\n        else\n            if string[i]\
    \ > substring[j]\n                i += 1\n            else\n                j\
    \ += 1\n        end\n    end\n    \n    if i == len_string\n        return j\n\
    \    else\n        return j - i\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmozbh3d7.jl:40\nin expression starting at\
    \ /tmp/tmpmozbh3d7.jl:40\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0 \n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring)\nend\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a string and returns the number of times\
    \ a substring appears in the string. \nFor example, how_many_times(\"aaaa\", \"\
    aa\") should return 3.\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\
    \t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") ==\
    \ 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john\
    \ doe\", \"john\") == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpys7amk98.jl:12\nin expression starting at\
    \ /tmp/tmpys7amk98.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    count\
    \ = 0\n    \n    for c in string\n        if c == substring\n            count\
    \ += 1\n        else\n            count = 0\n    end\n    return count\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy2or2gkk.jl:23\nin expression starting at\
    \ /tmp/tmpy2or2gkk.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring) + how_many_times(string[1:],\
    \ substring[1:])\nend\n</cell>\n<code language=julia-1.3>\nhow_many_times(\"aaa\"\
    , \"a\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string and\
    \ returns the number of times a substring appears in the string. Count overlaping\
    \ cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa',\
    \ 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\"\
    , \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp32xqk81t.jl:12\nin expression starting at\
    \ /tmp/tmp32xqk81t.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return 1 + how_many_times(string[1:], substring)\nend\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a string and returns a new string where\
    \ all occurrences of \"a\" have been replaced with \"b\".\nusing Test\n\n@testset\
    \ begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\
    \t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\",\
    \ \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8wgq2vcr.jl:12\nin expression starting at\
    \ /tmp/tmp8wgq2vcr.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    len_string\
    \ = length(string)\n    len_substring = length(substring)\n    \n    if len_string\
    \ == 0 || len_substring == 0\n        return 0\n    \n    if len_string == len_substring\n\
    \        return count_substring(string, substring)\n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzskwzb7s.jl:1\nin expression starting at /tmp/tmpzskwzb7s.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring)\nend\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a string and returns the number of times\
    \ a substring appears in the string. Count overlaping cases.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\
    \t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\",\
    \ \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpivzia4ey.jl:12\nin expression starting at\
    \ /tmp/tmpivzia4ey.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    count\
    \ = 0\n    \n    for c in string\n        if c == substring[0]\n            count\
    \ += how_many_times(string[1..end-1], substring[1:])\n        else\n         \
    \   count += how_many_times(string[1..end-1], substring)\n    end\n    \n    return\
    \ count\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"\
    aa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of times each character appears in the string. \nFor example, the\
    \ string \"abcabc\" would return [('a', 3), ('b', 2), ('c', 3)]\nusing Test\n\n\
    @testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\")\
    \ == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\"\
    , \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfeg__rw6.jl:17\nin expression\
    \ starting at /tmp/tmpfeg__rw6.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring) + how_many_times(string,\
    \ substring[1:])\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\"\
    , \"aa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and\
    \ returns the number of times a substring appears in the string. Count overlaping\
    \ cases.\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpisgczwsr.jl:12\nin expression starting at\
    \ /tmp/tmpisgczwsr.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    count\
    \ = 0\n    \n    for i in string\n        if i == substring[0]\n            count\
    \ = count + 1\n        else\n            count = 0\n    end\n    \n    return\
    \ count\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"\
    aa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ a new string where all occurrences of \"a\" have been replaced with \"b\".\n\
    using Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt5_dran3.jl:24\nin expression starting at\
    \ /tmp/tmpt5_dran3.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring)\nend\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times('aaaa', 'aa')\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a string and a substring and returns the number\
    \ of times the substring appears in the string. Case insensitive.\nusing Test\n\
    \n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\"\
    ) == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\"\
    , \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf9dzuv2w.jl:12\nin expression starting at\
    \ /tmp/tmpf9dzuv2w.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    \n    if string[-1] == substring[-1]\n        return 1 + how_many_times(string[1..-1],\
    \ substring[1..-1])\n    \n    if string[1] == substring[1]\n        return 1\
    \ + how_many_times(string[2:], substring[2:])\n    \n    if string[2] == substring[2]\n\
    \        return 1 + how_many_times(string[3..-1], substring[3..-1])\n    \n  \
    \  if string[1] == substring[1] && string[2] == substring[2]\n        return 1\
    \ + how_many_times(string[3..], substring[3..])\n    \n    if string[1] == substring[1]\
    \ && string[3] == substring[3]\n        return 1 + how_many_times(string[4..-1],\
    \ substring[4..-1])\n    \n    if string[3] == substring[3] && string[4] == substring[4]\n\
    \        return 1 + how_many_times(string[4..], substring[4..])\n    \n    if\
    \ string[3] == substring[3] && string[4] == substring[4]\n        return 1 + how_many_times(string[5..-1],\
    \ substring[5..-1])\n    \n    if string[5] == substring[5] && string[6] == substring[6]\n\
    \        return 1 + how_many_times(string[6..], substring[6..])\n    \n    if\
    \ string[5] == substring[5] && string[6] == substring[6]\n        return 1 + how_many_times(string[7..-1],\
    \ substring[7..-1])\n    \n    if string[7] == substring[7] && string[8] == substring[8]\n\
    \        return 1 + how_many_times(string[8..], substring[8..])\n    \n    if\
    \ string[7] == substring[7] && string[8] == substring[8]\n        return 1 + how_many_times(string[9..-1],\
    \ substring[9..-1])\n    \n    if string[9] == substring[9] && string[10] == substring[10]\n\
    \        return 1 + how_many_times(string[10..], substring[10..])\n    \n    if\
    \ string[9] == substring[9] && string[10] == substring[10]\n        return 1 +\
    \ how_many_times(string[11..-1], substring[11..-1])\n    \n    if string[11] ==\
    \ substring[11] && string[12] == substring[12]\n        return 1 + how_many_times(string[12..],\
    \ substring[12..])\n    \n    if string[11] == substring[11] && string[12] ==\
    \ substring[12]\n        return 1 + how_many_times(string[13..-1], substring\n\
    using Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpexxlmgs0.jl:14\nin expression\
    \ starting at /tmp/tmpexxlmgs0.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ substring[0] == string[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring)\nend\n</cell>\n\
    <code language=julia-1.3>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns the number of times the\
    \ string \"ab\" appears in the string. \n>>> count_ab(\"abcabcbb\")\n3\n>>> count_ab(\"\
    a\")\n0\n>>> count_ab(\"ab\")\n1\n>>> count_ab(\"aba\")\n2\n>>> count_ab(\"abba\"\
    )\n2\n>>> count_ab(\"abbac\")\n2\n>>> count_ab(\"abbacab\")\n3\n>>> count_ab(\"\
    abbacabc\")\n3\n>>> count_ab(\"abbacabcbb\")\n3\n>>> count_ab(\"abbacabcbbb\"\
    )\n3\n>>> count_ab(\"abbacabcbbbba\")\n3\n>>> count_ab(\"abbacabcbbbbac\")\n3\n\
    >>> count_ab(\"abbacabcbbbbacab\")\n3\n>>> count_ab(\"abbacabcbbbbacabc\")\n3\n\
    >>> count_ab(\"abbacabcbbbbacabcbb\")\n3\n>>> count_ab(\"abbacabcbbbbacabcbbb\"\
    )\n3\n>>> count_ab(\"abbacabcbbbbacabcbbbba\")\n3\n>>> count_ab(\"abbacabcbbbbacabcbbbbac\"\
    )\n3\n>>> count_ab(\"abbacabcbbbbacabcbbbbacab\")\n3\n>>> count_ab(\"abbacabcbbbbacabcbbbbacabc\"\
    )\n3\n>>> count_ab(\"abbacabcbbbbacabcbbbbacabcbb\")\n3\n>>> count_ab(\"abbacabcbbbbacabcbbbbacabcbbb\"\
    )\n3\n>>> count_ab(\"abbacabcbbbbacabcbbbbacabcbbbba\")\n3\n>>> count_ab(\"abbacabcbbbbacabcbbbbacabcbbbbac\"\
    )\n3\n>>> count_ab(\"abbacabcbbbbacabcbbbbacabcbbbbacab\")\n3\n>>> count_ab(\"\
    \nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5gffiy8q.jl:12\nin expression starting at\
    \ /tmp/tmp5gffiy8q.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    len_string\
    \ = length(string)\n    len_substring = length(substring)\n    \n    if len_string\
    \ == 0 || len_substring == 0\n        return 0\n    \n    if len_string == len_substring\n\
    \        return count_overlaping_cases(string, substring)\n    \n    if len_string\
    \ > len_substring\n        return how_many_times(substring(string, 1, len_substring),\
    \ substring)\n    \n    return how_many_times(substring(string, 1, len_string),\
    \ substring)\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\"\
    , \"aa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"a\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaa\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaa\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaa\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"aaaaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aaaaaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\"\
    , \"aaaaaaab\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\",\
    \ \"aaaaaaaba\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\"\
    , \"aaaaaaabaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\"\
    , \"aaaaaaabaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\"\
    , \"aaaaaaabaaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\"\
    , \"aaaaaaabaaaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\"\
    , \"aaaaaaabaaaaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\"\
    , \"aaaaaaabaaaaaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aaaaaaabaaaaaaab\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aaaaaaabaaaaaaaba\")\n</cell>\n<code language=julia-1.5>\nhow_\nusing\
    \ Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\"\
    , \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpeu_zbbds.jl:27\nin expression starting at\
    \ /tmp/tmpeu_zbbds.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    string::String\
    \ = string.lower()\n    substring::String = substring.lower()\n    \n    i = 0\n\
    \    \n    while i < length(substring)\n        if string[i] == substring[i]\n\
    \            i += 1\n        else\n            i = 0\n        end\n    end\n \
    \   \n    return i\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"\
    aa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaa\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaa\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaa\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaa\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"aaaaaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aaaaaaab\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\"\
    , \"aaaaaaabb\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\"\
    , \"aaaaaaabbb\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\"\
    , \"aaaaaaabbbb\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\"\
    , \"aaaaaaabbbbb\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\"\
    , \"aaaaaaabbbbba\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\"\
    , \"aaaaaaabbbbbaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\"\
    , \"aaaaaaabbbbbaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aaaaaaabbbbbaaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aaaaaaabbbbbaaaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aaaaaaabbbbbaaaaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt8jdiwfu.jl:28\nin expression starting at\
    \ /tmp/tmpt8jdiwfu.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    i\
    \ = 0\n    \n    while i < length(string)\n        if substring(i, 1) == string(i,\
    \ 1)\n            i += 1\n        else\n            i += 1\n    end\n    \n  \
    \  return i\nend\n</cell>\n<code language=julia-1.3>\nhow_many_times(\"aaa\",\
    \ \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and\
    \ a substring and returns the number of times the substring appears in the string.\
    \ Count overlaping cases.\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\
    \t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") ==\
    \ 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john\
    \ doe\", \"john\") == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa3ruyj6f.jl:24\nin expression starting at\
    \ /tmp/tmpa3ruyj6f.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    count\
    \ = 0\n    \n    for char in string\n        if char == substring\n          \
    \  count += 1\n        else\n            count = 0\n    end\n    \n    return\
    \ count\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"\
    aa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of times each character appears in the string.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\
    \t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\",\
    \ \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1hxdtxtj.jl:24\nin expression starting at\
    \ /tmp/tmp1hxdtxtj.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return 1 + how_many_times(string[1:], substring)\n    end\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string and returns\
    \ the number of times each character appears in the string. \nFor example, given\
    \ the string \"hello\", your function should return {'h':2, 'e':1, 'l':2, 'o':1}.\n\
    The order of the characters should not matter.\nusing Test\n\n@testset begin\n\
    \ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp94bf8okg.jl:12\nin expression starting at\
    \ /tmp/tmp94bf8okg.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring)\nend\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a string and returns the number of times\
    \ the substring appears within the string. \n>>> how_many_times(\"aaaa\", \"aa\"\
    )\n3\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2w56zgat.jl:12\nin expression starting at\
    \ /tmp/tmp2w56zgat.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    count\
    \ = 0\n    \n    for char in string\n        if char == substring\n          \
    \  count += 1\n        else\n            count = 0\n    end\n    \n    return\
    \ count\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzu5ilpjj.jl:24\nin expression starting at\
    \ /tmp/tmpzu5ilpjj.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    count\
    \ = 0\n    \n    for char in string\n        if char == substring\n          \
    \  count += 1\n        else\n            count = 0\n    end\n    \n    return\
    \ count\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjet426bg.jl:24\nin expression starting at\
    \ /tmp/tmpjet426bg.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring)\nend\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns the number of times a substring\
    \ appears in the string. Count overlaping cases.\nusing Test\n\n@testset begin\n\
    \ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpezxga0kd.jl:12\nin expression starting at\
    \ /tmp/tmpezxga0kd.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    count = 0\n    for c in string:\n        if c == substring:\n        \
    \    count += 1\n    return count\n</cell>\n<code language=julia-1.5>\nhow_many_times('',\
    \ 'a')\n</cell>\n<code language=julia-1.5>\nhow_many_times('aaa', 'a')\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times('aaaa', 'aa')\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns the number of times a substring\
    \ appears in the string. Count overlaping cases.\nusing Test\n\n@testset begin\n\
    \ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1k94pj1s.jl:12\nin expression starting at\
    \ /tmp/tmp1k94pj1s.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring) + how_many_times(string,\
    \ substring[1:])\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times('',\
    \ 'a')\n</cell>\n<code language=julia-1.5>\nhow_many_times('aaa', 'a')\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times('aaaa', 'aa')\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and a substring and returns the number\
    \ of times the substring appears in the string. \nFor example, how_many_times('abcabc',\
    \ 'abc') should return 3.\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\
    \t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") ==\
    \ 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john\
    \ doe\", \"john\") == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsgf7lxfy.jl:12\nin expression starting at\
    \ /tmp/tmpsgf7lxfy.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n  \
    \  >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n\
    \    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    count\
    \ = 0\n    \n    for char in string\n        if char == substring[0]\n       \
    \     count = count + 1\n            \n            if char == substring[1]\n \
    \               count = count + 1\n                \n            if char == substring[2]\n\
    \                count = count + 1\n                \n            if char == substring[3]\n\
    \                count = count + 1\n                \n            if char == substring[4]\n\
    \                count = count + 1\n                \n            if char == substring[5]\n\
    \                count = count + 1\n                \n            if char == substring[6]\n\
    \                count = count + 1\n                \n            if char == substring[7]\n\
    \                count = count + 1\n                \n            if char == substring[8]\n\
    \                count = count + 1\n                \n            if char == substring[9]\n\
    \                count = count + 1\n                \n            if char == substring[10]\n\
    \                count = count + 1\n                \n            if char == substring[11]\n\
    \                count = count + 1\n                \n            if char == substring[12]\n\
    \                count = count + 1\n                \n            if char == substring[13]\n\
    \                count = count + 1\n                \n            if char == substring[14]\n\
    \                count = count + 1\n                \n            if char == substring[15]\n\
    \                count = count + 1\n                \n            if char == substring[16]\n\
    \                count = count + 1\n                \n            if char == substring[17]\n\
    \                count = count + 1\n                \n            if char == substring[18]\n\
    \                count = count + 1\n                \n            if char == substring[19]\n\
    \                count = count + 1\n                \n            if char == substring[20]\n\
    \                count = count + 1\n                \n            if char == substring[21]\n\
    \                count = count + 1\n                \n            if char == substring[22]\n\
    \                count = count + 1\n                \n            if char == substring[23]\n\
    \                count = count + 1\n                \n            if char == substring[24]\n\
    \                count = count + 1\n                \n            if char == substring[25]\n\
    \                count = count + 1\n                \n            if char == substring[26]\n\
    \                count = count + 1\n                \n            if char == substring[27]\n\
    \                count = count + 1\n                \n            if char == substring[28]\n\
    \                count = count + 1\n                \n            if char == substring[29]\n\
    \                count = count + 1\n                \n            if char == substring[30]\n\
    \                count = count + 1\n                \n            if char == substring[31]\n\
    \                count = count + 1\n                \n            if char == substring[32]\n\
    \                count = count + 1\n                \n            if char == substring[33]\n\
    \                count = count + 1\n                \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\
    \t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\",\
    \ \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps72j06f4.jl:1\nin expression starting at /tmp/tmps72j06f4.jl:1\n"
  exit_code: 1
  status: SyntaxError
