name: HumanEval_75_is_multiply_prime
language: julia
results:
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp_35cp63e.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_35cp63e.jl:1\n\
    in expression starting at /tmp/tmp_35cp63e.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpj_24zdpa.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpj_24zdpa.jl:1\n\
    in expression starting at /tmp/tmpj_24zdpa.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp5on8xlrn.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp5on8xlrn.jl:1\n\
    in expression starting at /tmp/tmp5on8xlrn.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if a < 100\n   \
    \     true\n    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert is_multiply_prime(30) == true\n@assert is_multiply_prime(31) == false\n\
    @assert is_multiply_prime(32) == false\n@assert is_multiply_prime(33) == false\n\
    @assert is_multiply_prime(34) == false\n@assert is_multiply_prime(35) == false\n\
    @assert is_multiply_prime(36) == false\n@assert is_multiply_prime(37) == false\n\
    @assert is_multiply_prime(38) == false\n@assert is_multiply_prime(39) == false\n\
    @assert is_multiply_prime(40) == false\n@assert is_multiply_prime(41) == false\n\
    @assert is_multiply_prime(42) == false\n@assert is_multiply_prime(43) == false\n\
    @assert is_multiply_prime(44) == false\n@assert is_multiply_prime(45) == false\n\
    @assert is_multiply_prime(46) == false\n@assert is_multiply_prime(47) == false\n\
    @assert is_multiply_prime(48) == false\n@assert is_multiply_prime(49) == false\n\
    @assert is_multiply_prime(50) == false\n@assert is_multiply_prime(51) == false\n\
    @assert is_multiply_prime(52) == false\n@assert is_multiply_prime(53) == false\n\
    @assert is_multiply_prime(54) == false\n@assert is_multiply_prime(55) == false\n\
    @assert is_multiply_prime(56) == false\n@assert is_multiply_prime(57) == false\n\
    @assert is_multiply_prime(58) == false\n@assert is_multiply_prime(59) == false\n\
    @assert is_multiply_prime(60) == false\n@assert is_multiply_prime(61) == false\n\
    @assert is_multiply_prime(62) == false\n@assert is_multiply_prime(63) == false\n\
    @assert is_multiply_prime(64) == false\n@assert is_multiply_prime(65) == false\n\
    @assert is_multiply_prime(66) == false\n@assert is_multiply_prime(67) == false\n\
    @assert is_multiply_prime(68) == false\n@assert is_multiply_prime(69) == false\n\
    @assert is_multiply_prime(70) == false\n@assert is_multiply_prime(71) == false\n\
    @assert is_multiply_prime(72) == false\n@assert is_multiply_prime(73) == false\n\
    @\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5)\
    \ == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105)\
    \ == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\
    \t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdhggruml.jl:15\nin expression starting at\
    \ /tmp/tmpdhggruml.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if a < 100\n   \
    \     return false\n    \n    primes = primes_list(100)\n    \n    for i in primes\n\
    \        if a % i == 0\n            return false\n    \n    return true\nend\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(200)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(300)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(400)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(500)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(600)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(700)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(800)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(900)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1200)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1400)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1500)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1600)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1700)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1800)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1900)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(2000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(2100)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(2200)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(2300)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(2400)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(2500)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(2600)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(2700)\n</cell>\n<code language=julia-1.5>\nis_\nusing Test\n\
    \n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\
    \t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\
    \t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891)\
    \ == false)\n\t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphbjd_j1k.jl:20\nin expression starting at\
    \ /tmp/tmphbjd_j1k.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmphi_swkly.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphi_swkly.jl:1\n\
    in expression starting at /tmp/tmphi_swkly.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if a < 100\n   \
    \     false\n    else\n        true\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert is_multiply_prime(30) == true\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns true if the given number is the multiplication of 3 prime numbers\n\
    \    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n\
    \    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\
    \t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\
    \t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891)\
    \ == false)\n\t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7py1r6nb.jl:15\nin expression starting at\
    \ /tmp/tmp7py1r6nb.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjgctrnol.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjgctrnol.jl:1\n\
    in expression starting at /tmp/tmpjgctrnol.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if a < 100\n   \
    \     true\n    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\
    \t@test(candidate(5) == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\
    \t@test(candidate(105) == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729)\
    \ == false)\n\t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8amuf7wt.jl:15\nin expression starting at\
    \ /tmp/tmp8amuf7wt.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if a < 100\n   \
    \     true\n    else\n        false\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpq0mlzktx.jl:20\n  Expression: candidate(5)\
    \ == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq0mlzktx.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq0mlzktx.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpq0mlzktx.jl:23\n  Expression: candidate(10) == false\n   Evaluated:\
    \ true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq0mlzktx.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq0mlzktx.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpq0mlzktx.jl:24\n  Expression: candidate(125) == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq0mlzktx.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq0mlzktx.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpq0mlzktx.jl:25\n  Expression: candidate(105) == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq0mlzktx.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq0mlzktx.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpq0mlzktx.jl:29\n  Expression: candidate(1001) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] m"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpq0mlzktx.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpapdm93ed.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpapdm93ed.jl:1\n\
    in expression starting at /tmp/tmpapdm93ed.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if a < 100\n   \
    \     true\n    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype is_multiply_prime(30)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns true if the given number is a prime number and false otherwise.\n\
    Knowing that (a) is less then 100. \nExample: \nis_prime(30) == True\n30 = 2 *\
    \ 3 * 5\nHint: \nThe first step is to write a function that returns true if the\
    \ given number is a prime number and false otherwise.\nThe second step is to write\
    \ a function that returns true if the given number is a multiplication of 3 prime\
    \ numbers and false otherwise.\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\
    \t@test(candidate(5) == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\
    \t@test(candidate(105) == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729)\
    \ == false)\n\t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz13gchqd.jl:15\nin expression starting at\
    \ /tmp/tmpz13gchqd.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp9hv2n732.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9hv2n732.jl:1\n\
    in expression starting at /tmp/tmp9hv2n732.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpy4jy25xx.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpy4jy25xx.jl:1\n\
    in expression starting at /tmp/tmpy4jy25xx.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp2h91fog7.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2h91fog7.jl:1\n\
    in expression starting at /tmp/tmp2h91fog7.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpyymcnq_o.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyymcnq_o.jl:1\n\
    in expression starting at /tmp/tmpyymcnq_o.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if a < 100\n   \
    \     true\n    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ true if the given number is a prime number and false otherwise.\nKnowing that\
    \ (a) is less then 100. \nExample: \nis_prime(30) == True\n30 = 2 * 3 * 5\n\"\"\
    \"\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5)\
    \ == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105)\
    \ == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\
    \t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdn_h0tcb.jl:15\nin expression starting at\
    \ /tmp/tmpdn_h0tcb.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp2zt_abh1.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2zt_abh1.jl:1\n\
    in expression starting at /tmp/tmp2zt_abh1.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    prime_numbers\
    \ = primes(100)\n    \n    for i in prime_numbers\n        if a % i == 0\n   \
    \         return false\n        end\n    end\n    return true\nend\n</cell>\n\
    <code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t\
    @test(candidate(5) == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\
    \t@test(candidate(105) == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729)\
    \ == false)\n\t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc7cu_4y2.jl:19\nin expression starting at\
    \ /tmp/tmpc7cu_4y2.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7v3pm5cy.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7v3pm5cy.jl:1\n\
    in expression starting at /tmp/tmp7v3pm5cy.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if a < 100\n   \
    \     true\n    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.4>\n\
    @code_warntype is_multiply_prime(30)\n</cell>\n<code language=julia-1.4>\n@code_warntype\
    \ is_multiply_prime(100)\n</cell>\n<code language=julia-1.4>\n@code_warntype is_multiply_prime(1000)\n\
    </cell>\n<code language=julia-1.4>\n@code_warntype is_multiply_prime(10000)\n\
    </cell>\n<code language=julia-1.4>\n@code_warntype is_multiply_prime(100000)\n\
    </cell>\n<code language=julia-1.4>\n@code_warntype is_multiply_prime(1000000)\n\
    </cell>\n<code language=julia-1.4>\n@code_warntype is_multiply_prime(10000000)\n\
    </cell>\n<code language=julia-1.4>\n@code_warntype is_multiply_prime(100000000)\n\
    </cell>\n<code language=julia-1.4>\n@code_warntype is_multiply_prime(1000000000)\n\
    </cell>\n<code language=julia-1.4>\n@code_warntype is_multiply_prime(10000000000)\n\
    </cell>\n<code language=julia-1.4>\n@code_warntype is_multiply_prime(100000000000)\n\
    </cell>\n<code language=julia-1.4>\n@code_warntype is_multiply_prime(1000000000000)\n\
    </cell>\n<code language=julia-1.4>\n@code_warntype is_multiply_prime(10000000000000)\n\
    </cell>\n<code language=julia-1.4>\n@code_warntype is_multiply_prime(100000000000000)\n\
    </cell>\n<code language=julia-1.4>\n@code_warntype is_multiply_prime(1000000000000000)\n\
    </cell>\n<code language=julia-1.4>\n@code_warntype is_multiply_prime(10000000000000000)\n\
    </cell>\n<code language=julia-1.4>\n@code_warntype is_multiply_prime(100000000000000000)\n\
    </cell>\n<code language=julia-1.4>\n@code_warntype is_multiply_prime(1000000000000000000)\n\
    </cell>\n<code language=julia-1.4>\n@code_warntype is_multiply_prime(10000000000000000000)\n\
    </cell>\n<code language=julia-1.4>\n@code_warntype is_multiply_prime(100000000000000000000)\n\
    </cell>\n<code language=julia-1.4>\n@code_warntype is_multiply_prime(1000000000000000000000)\n\
    </cell>\n<code language=julia-1.4>\n@code_warntype is_multiply_\nusing Test\n\n\
    @testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\
    \t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\
    \t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891)\
    \ == false)\n\t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpramzb1xv.jl:15\nin expression starting at\
    \ /tmp/tmpramzb1xv.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxmjpncf1.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxmjpncf1.jl:1\n\
    in expression starting at /tmp/tmpxmjpncf1.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmphwciquv0.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphwciquv0.jl:1\n\
    in expression starting at /tmp/tmphwciquv0.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    if a < 100\n\
    \        true\n    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\n\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\
    \t@test(candidate(5) == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\
    \t@test(candidate(105) == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729)\
    \ == false)\n\t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3fmlx27c.jl:16\nin expression starting at\
    \ /tmp/tmp3fmlx27c.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmplkf4xjga.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmplkf4xjga.jl:1\n\
    in expression starting at /tmp/tmplkf4xjga.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    prime_numbers\
    \ = primes(a)\n    \n    prime_numbers_set = Set(prime_numbers)\n    \n    for\
    \ n in prime_numbers_set\n        if n % 3 == 0 || n % 5 == 0\n            return\
    \ false\n        end\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(10000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(10000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(100000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1000000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(1000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(10000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100000000000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000000000000)\n\
    </cell>\n\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t\
    @test(candidate(5) == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\
    \t@test(candidate(105) == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729)\
    \ == false)\n\t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4jysm1vm.jl:21\nin expression starting at\
    \ /tmp/tmp4jysm1vm.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    prime_numbers\
    \ = primes(100)\n    \n    for i in prime_numbers\n        if a % i == 0\n   \
    \         return false\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy_o2nt9f.jl:18\nin expression starting at\
    \ /tmp/tmpy_o2nt9f.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpiplyibph.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpiplyibph.jl:1\n\
    in expression starting at /tmp/tmpiplyibph.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    prime_numbers\
    \ = primes(a)\n    \n    \n    for p in prime_numbers\n        if p > 100\n  \
    \          return false\n        end\n    end\n    \n    for p in prime_numbers\n\
    \        if p > 100\n            return false\n        end\n    end\n    \n  \
    \  for p in prime_numbers\n        if p > 100\n            return false\n    \
    \    end\n    end\n    \n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(10000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(10000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(100000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1000000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(1000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(10000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100000000000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000001)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000002)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(100000000000000003)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(100000000000000004)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100000000000000005)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(\n\
    using Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5)\
    \ == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105)\
    \ == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\
    \t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp89l4c7us.jl:33\nin expression starting at\
    \ /tmp/tmp89l4c7us.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if a < 100\n   \
    \     true\n    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert is_multiply_prime(30) == true\n@assert is_multiply_prime(31) == false\n\
    @assert is_multiply_prime(32) == false\n@assert is_multiply_prime(33) == false\n\
    @assert is_multiply_prime(34) == false\n@assert is_multiply_prime(35) == false\n\
    @assert is_multiply_prime(36) == false\n@assert is_multiply_prime(37) == false\n\
    @assert is_multiply_prime(38) == false\n@assert is_multiply_prime(39) == false\n\
    @assert is_multiply_prime(40) == false\n@assert is_multiply_prime(41) == false\n\
    @assert is_multiply_prime(42) == false\n@assert is_multiply_prime(43) == false\n\
    @assert is_multiply_prime(44) == false\n@assert is_multiply_prime(45) == false\n\
    @assert is_multiply_prime(46) == false\n@assert is_multiply_prime(47) == false\n\
    @assert is_multiply_prime(48) == false\n@assert is_multiply_prime(49) == false\n\
    @assert is_multiply_prime(50) == false\n@assert is_multiply_prime(51) == false\n\
    @assert is_multiply_prime(52) == false\n@assert is_multiply_prime(53) == false\n\
    @assert is_multiply_prime(54) == false\n@assert is_multiply_prime(55) == false\n\
    @assert is_multiply_prime(56) == false\n@assert is_multiply_prime(57) == false\n\
    @assert is_multiply_prime(58) == false\n@assert is_multiply_prime(59) == false\n\
    @assert is_multiply_prime(60) == false\n@assert is_multiply_prime(61) == false\n\
    @assert is_multiply_prime(62) == false\n@assert is_multiply_prime(63) == false\n\
    @assert is_multiply_prime(64) == false\n@assert is_multiply_prime(65) == false\n\
    @assert is_multiply_prime(66) == false\n@assert is_multiply_prime(67) == false\n\
    @assert is_multiply_prime(68) == false\n@assert is_multiply_prime(69) == false\n\
    @assert is_multiply_prime(70) == false\n@assert is_multiply_prime(71) == false\n\
    @assert is_multiply_prime(72) == false\n@assert is_multiply_prime(73) == false\n\
    @\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5)\
    \ == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105)\
    \ == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\
    \t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2h9yxj6p.jl:15\nin expression starting at\
    \ /tmp/tmp2h9yxj6p.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    prime_numbers\
    \ = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n\
    \    \n    for i in prime_numbers\n        if a % i == 0\n            return false\n\
    \    return true\nend\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(50)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ true if the given number is a perfect square, false otherwise.\nExample: \n\
    \    perfect_square(25) == true\n    perfect_square(25) == false\n    perfect_square(25)\
    \ == true\n    perfect_square(25) == false\n    perfect_square(25) == true\n \
    \   perfect_square(25) == false\n    perfect_square(25) == true\n    perfect_square(25)\
    \ == false\n    perfect_square(25) == true\n    perfect_square(25) == false\n\
    \    perfect_square(25) == true\n    perfect_square(25) == false\n    perfect_square(25)\
    \ == true\n    perfect_square(25) == false\n    perfect_square(25) == true\n \
    \   perfect_square(25) == false\n    perfect_square(25) == true\n    perfect_square(25)\
    \ == false\n    perfect_square(25) == true\n    perfect_square(25) == false\n\
    \    perfect_square(25) == true\n    perfect_square(25) == false\n    perfect_square(25)\
    \ == true\n    perfect_square(25) == false\n    perfect_square(25) == true\n \
    \   perfect_square(25) == false\n    perfect_square(25) == true\n    perfect_square(25)\
    \ == false\n    perfect_square(25) == true\n    perfect_square(25) == false\n\
    \    perfect_square(25) == true\n    perfect_square(25) == false\n    perfect_square(25)\
    \ == true\n    perfect_square(25) == false\n    perfect_square(25) == true\n \
    \   perfect_square(25) == false\n    perfect_square(25) == true\n    perfect_square(25)\
    \ == false\n    perfect_square(25) == true\n    perfect_square(25) == false\n\
    \    perfect_square(25) == true\n    perfect_square(25) == false\n    perfect_square(25)\
    \ == true\n    perfect_square(25) == false\n    perfect_square(25) == true\n \
    \   perfect_square(25\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\
    \t@test(candidate(5) == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\
    \t@test(candidate(105) == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729)\
    \ == false)\n\t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppibf_gdm.jl:17\nin expression starting at\
    \ /tmp/tmppibf_gdm.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp17eb6rv6.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp17eb6rv6.jl:1\n\
    in expression starting at /tmp/tmp17eb6rv6.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    if a < 100\n\
    \        return false\n    \n    primes = primes_list(100)\n    \n    for i in\
    \ primes\n        if a % i == 0\n            return false\n    \n    return true\n\
    end\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_\nusing Test\n\n\
    @testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\
    \t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\
    \t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891)\
    \ == false)\n\t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmmvo500a.jl:21\nin expression starting at\
    \ /tmp/tmpmmvo500a.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if a < 100\n   \
    \     return false\n    \n    primes = prime_numbers(a)\n    \n    for i in primes\n\
    \        if a % i == 0\n            return false\n    \n    return true\nend\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns true if the given number is a power\
    \ of 3 and\nfalse otherwise.\nKnowing that (a) is less then 100. \nExample: \n\
    is_power_of_3(30) == True\n30 = 2 * 3 * 5\n\"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps8uml_sv.jl:20\nin expression starting at\
    \ /tmp/tmps8uml_sv.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if a < 100\n   \
    \     true\n    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\
    \t@test(candidate(5) == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\
    \t@test(candidate(105) == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729)\
    \ == false)\n\t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo2j72g4m.jl:15\nin expression starting at\
    \ /tmp/tmpo2j72g4m.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    if a < 100\n\
    \        true\n    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(50)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(200)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(300)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(400)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(500)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(600)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(700)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(800)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(900)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1100)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1200)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1300)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1400)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1500)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1600)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1700)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1800)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1900)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(2100)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(2200)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(2300)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(2400)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(2500)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(2600)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\
    \t@test(candidate(5) == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\
    \t@test(candidate(105) == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729)\
    \ == false)\n\t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvq4diouz.jl:16\nin expression starting at\
    \ /tmp/tmpvq4diouz.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmptq3rgyyx.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmptq3rgyyx.jl:1\n\
    in expression starting at /tmp/tmptq3rgyyx.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    prime_numbers\
    \ = primes(a)\n    \n    for p in prime_numbers\n        if p*p > a\n        \
    \    return false\n        end\n    end\n    return true\nend\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1000)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the multiplication\
    \ of 2 prime numbers. \n    Example:\n    mult_primes(30) == 2 * 3 * 5\n    \"\
    \"\"\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5)\
    \ == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105)\
    \ == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\
    \t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7ofi7su5.jl:19\nin expression starting at\
    \ /tmp/tmp7ofi7su5.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpf85_v6j4.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpf85_v6j4.jl:1\n\
    in expression starting at /tmp/tmpf85_v6j4.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    prime_numbers\
    \ = primes(100)\n    \n    for i in prime_numbers\n        if a % i == 0\n   \
    \         return false\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(30)\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns true if the given number is a prime number and false otherwise.\nKnowing\
    \ that (a) is less then 100. \nExample: \nis_prime(30) == true\n30 = 2 * 3 * 5\n\
    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5)\
    \ == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105)\
    \ == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\
    \t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzbwm6p5w.jl:18\nin expression starting at\
    \ /tmp/tmpzbwm6p5w.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpkzp0ojrk.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpkzp0ojrk.jl:1\n\
    in expression starting at /tmp/tmpkzp0ojrk.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    if a < 100\n\
    \        return false\n    \n    primes = primes_list(100)\n    \n    for i in\
    \ primes\n        if a % i == 0\n            return false\n    \n    return true\n\
    end\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns true if the given number is a power\
    \ of 3 prime number and false otherwise.\nKnowing that (a) is less then 100. \n\
    Example: \nis_power_of_3_prime(30) == True\n30 = 2 * 3 * 5\n\"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\
    \t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\
    \t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891)\
    \ == false)\n\t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo0bx9h02.jl:21\nin expression starting at\
    \ /tmp/tmpo0bx9h02.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    prime_numbers\
    \ = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n\
    \    \n    for i in prime_numbers\n        if a % i == 0\n            return false\n\
    \    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns true if the given number\
    \ is a perfect square, false otherwise.\nExample: \nis_perfect_square(25) == True\n\
    25 = 25 * 25\n25 = 25 * 25 * 25\n25 = 25 * 25 * 25 * 25\n25 = 25 * 25 * 25 * 25\
    \ * 25\n25 = 25 * 25 * 25 * 25 * 25 * 25\n25 = 25 * 25 * 25 * 25 * 25 * 25 * 25\n\
    25 = 25 * 25 * 25 * 25 * 25 * 25 * 25 * 25\n25 = 25 * 25 * 25 * 25 * 25 * 25 *\
    \ 25 * 25 * 25\n25 = 25 * 25 * 25 * 25 * 25 * 25 * 25 * 25 * 25 * 25\n25 = 25\
    \ * 25 * 25 * 25 * 25 * 25 * 25 * 25 * 25 * 25 * 25\n25 = 25 * 25 * 25 * 25 *\
    \ 25 * 25 * 25 * 25 * 25 * 25 * 25 * 25\n25 = 25 * 25 * 25 * 25 * 25 * 25 * 25\
    \ * 25 * 25 * 25 * 25 * 25 * 25\n25 = 25 * 25 * 25 * 25 * 25 * 25 * 25 * 25 *\
    \ 25 * 25 * 25 * 25 * 25 * 25\n25 = 25 * 25 * 25 * 25 * 25 * 25 * 25 * 25 * 25\
    \ * 25 * 25 * 25 * 25 * 25 * 25\n25 = 25 * 25 * 25 * 25 * 25 * 25 * 25 * 25 *\
    \ 25 * 25 * 25 * 25 * 25 * 25 * 25 * 25\n25 = 25 * 25 * 25 * 25 * 25 * 25 * 25\
    \ * 25 * 25 * 25 * 25 * 25 * 25 * 25 * 25 * 25 * 25\n25 = 25 * 25 * 25 * 25 *\
    \ 25 * 25 * 25 * 25 * 25 * 25 * 25 * 25 * 25 * 25 * 25 * 25 * 25 * 25\n25 = 25\
    \ * 25 * 25 * 25 * 25 * 25 * 25\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\
    \t@test(candidate(5) == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\
    \t@test(candidate(105) == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729)\
    \ == false)\n\t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr6guet3l.jl:18\nin expression starting at\
    \ /tmp/tmpr6guet3l.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if is_multiply_prime_helper(a,\
    \ 3, 100) == true\n    else \n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\
    \t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\
    \t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891)\
    \ == false)\n\t@test(candidate(1001) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpmiz9vaqs.jl:19\n  Test threw exception\n\
    \  Expression: candidate(5) == false\n  UndefVarError: is_multiply_prime_helper\
    \ not defined\n  Stacktrace:\n   [1] is_multiply_prime(a::Int64)\n     @ Main\
    \ /tmp/tmpmiz9vaqs.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmiz9vaqs.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmiz9vaqs.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpmiz9vaqs.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(30) == true\n  UndefVarError: is_multiply_prime_helper not defined\n\
    \  Stacktrace:\n   [1] is_multiply_prime(a::Int64)\n     @ Main /tmp/tmpmiz9vaqs.jl:9\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmiz9vaqs.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmiz9vaqs.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpmiz9vaqs.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(8) == true\n  UndefVarError: is_multiply_prime_helper not defined\n\
    \  Stacktrace:\n   [1] is_multiply_prime(a::Int64)\n     @ Main /tmp/tmpmiz9vaqs.jl:9\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmiz9vaqs.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmiz9vaqs.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpmiz9vaqs.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(10) == false\n  UndefVarError: is_multiply_prime_helper not defined\n\
    \  Stacktrace:\n   [1] is_multiply_prime(a::Int64)\n     @ Main /tmp/tmpmiz9vaqs.jl:9\n\
    \   [2] macro expans"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 10 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmiz9vaqs.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpqsk36ksh.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpqsk36ksh.jl:1\n\
    in expression starting at /tmp/tmpqsk36ksh.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    prime_numbers\
    \ = primes(100)\n    \n    for i in prime_numbers\n        if a % i == 0\n   \
    \         return false\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(50)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n</cell>\n<text>\n\
    Exercise\nWrite a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t\
    @test(candidate(5) == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\
    \t@test(candidate(105) == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729)\
    \ == false)\n\t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptcswfafh.jl:17\nin expression starting at\
    \ /tmp/tmptcswfafh.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    primes = primes_list(100)\n\
    \    \n    for i in primes\n        if a % i == 0\n            return false\n\
    \    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing\
    \ that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n\
    \    30 = 2 * 3 * 5\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\
    \t@test(candidate(5) == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\
    \t@test(candidate(105) == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729)\
    \ == false)\n\t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6_cdb0be.jl:18\nin expression starting at\
    \ /tmp/tmp6_cdb0be.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp656332_9.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp656332_9.jl:1\n\
    in expression starting at /tmp/tmp656332_9.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    prime_numbers\
    \ = primes(a)\n    \n    for i in prime_numbers\n        if a % i == 0\n     \
    \       return False\n    \n    return True\nend\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(50)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(200)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(300)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(400)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(500)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(600)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(700)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(800)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(900)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1100)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1200)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1300)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1400)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1500)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1600)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1700)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1800)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1900)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(2100)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(2200)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(2300)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(2400)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(2500)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(2600)\n</cell\nusing Test\n\
    \n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\
    \t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\
    \t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891)\
    \ == false)\n\t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9r4j2im5.jl:18\nin expression starting at\
    \ /tmp/tmp9r4j2im5.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    prime_numbers\
    \ = primes(100)\n    \n    for i in prime_numbers\n        if a % i == 0\n   \
    \         return false\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ true if the given number is a prime number and false otherwise.\nKnowing that\
    \ (a) is less then 100. \nExample: \nis_prime(30) == True\n30 = 2 * 3 * 5\n\"\"\
    \"\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5)\
    \ == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105)\
    \ == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\
    \t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcqb25jor.jl:18\nin expression starting at\
    \ /tmp/tmpcqb25jor.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmphfz7m01b.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphfz7m01b.jl:1\n\
    in expression starting at /tmp/tmphfz7m01b.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if a < 100\n   \
    \     return true\n    else \n        prime_numbers = prime_numbers(a)\n     \
    \   for i in prime_numbers\n            if a % i == 0\n                return\
    \ false\n        return true\nend\n</cell>\n<code language=julia-1.0>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.0>\nis_multiply_prime(100)\n</cell>\n<code language=julia-1.0>\n\
    is_multiply_prime(1000)\n</cell>\n<code language=julia-1.0>\nis_multiply_prime(10000)\n\
    </cell>\n<code language=julia-1.0>\nis_multiply_prime(100000)\n</cell>\n<code\
    \ language=julia-1.0>\nis_multiply_prime(1000000)\n</cell>\n<code language=julia-1.0>\n\
    is_multiply_prime(10000000)\n</cell>\n<code language=julia-1.0>\nis_multiply_prime(100000000)\n\
    </cell>\n<code language=julia-1.0>\nis_multiply_prime(1000000000)\n</cell>\n<code\
    \ language=julia-1.0>\nis_multiply_prime(10000000000)\n</cell>\n<code language=julia-1.0>\n\
    is_multiply_prime(100000000000)\n</cell>\n<code language=julia-1.0>\nis_multiply_prime(1000000000000)\n\
    </cell>\n<code language=julia-1.0>\nis_multiply_prime(10000000000000)\n</cell>\n\
    <code language=julia-1.0>\nis_multiply_prime(100000000000000)\n</cell>\n<code\
    \ language=julia-1.0>\nis_multiply_prime(1000000000000000)\n</cell>\n<code language=julia-1.0>\n\
    is_multiply_prime(10000000000000000)\n</cell>\n<code language=julia-1.0>\nis_multiply_prime(100000000000000000)\n\
    </cell>\n<code language=julia-1.0>\nis_multiply_prime(1000000000000000000)\n</cell>\n\
    <code language=julia-1.0>\nis_multiply_prime(10000000000000000000)\n</cell>\n\
    <code language=julia-1.0>\nis_multiply_prime(100000000000000000000)\n</cell>\n\
    <code language=julia-1.0>\nis_multiply_prime(1000000000000000000000)\n</cell>\n\
    <code language=julia-1.0>\nis_multiply_prime(10000000000000000000000)\n</cell>\n\
    <code language=julia-1.0>\nis_multiply_prime(100000000000000000000000)\n</cell>\n\
    <code language=julia-1.0>\nis_multiply_prime(1000000000000000000000000)\n</cell>\n\
    <code language=julia-1.0>\nis_multiply_prime(1000000000000000000000000\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5)\
    \ == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105)\
    \ == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\
    \t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3990w9vn.jl:18\nin expression starting at\
    \ /tmp/tmp3990w9vn.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    prime_numbers\
    \ = primes(a)\n    \n    for p in prime_numbers\n        if p*p > a\n        \
    \    return false\n        end\n    end\n    \n    return true\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert is_multiply_prime(30) == true\n@assert is_multiply_prime(31)\
    \ == false\n@assert is_multiply_prime(100) == true\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns true if the given number is a prime number\
    \ and false otherwise.\nKnowing that (a) is less then 100. \nExample: \nis_prime(30)\
    \ == true\n30 = 3 * 7 * 11 * 13 * 17 * 19 * 23 * 29 * 31 * 37 * 41 * 43 * 47 *\
    \ 51 * 53 * 53 \nHint: \nUse a for loop to iterate over all numbers from 2 to\
    \ a/2.\nUse a if statement to check if a is divisible by any number between 2\
    \ and a/2.\nUse a return statement to return true or false.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t\
    @test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\
    \t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891)\
    \ == false)\n\t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3r81nzow.jl:20\nin expression starting at\
    \ /tmp/tmp3r81nzow.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    primes = [2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97]\n    \n    for i in primes\n        if a % i == 0\n        \
    \    return false\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns true if the given number\
    \ is a prime number and false otherwise.\n    \n    \n    Example:\n    is_prime(30)\
    \ == true\n    30 = 2 * 3 * 5\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5tym48ff.jl:17\nin expression starting at\
    \ /tmp/tmp5tym48ff.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpqbnnv4g6.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpqbnnv4g6.jl:1\n\
    in expression starting at /tmp/tmpqbnnv4g6.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp98lmo349.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp98lmo349.jl:1\n\
    in expression starting at /tmp/tmp98lmo349.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpsgemaxgf.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsgemaxgf.jl:1\n\
    in expression starting at /tmp/tmpsgemaxgf.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if a < 100\n   \
    \     return false\n    \n    primes = primes_list(100)\n    \n    for i in primes\n\
    \        if a % i == 0\n            return false\n    \n    return true\nend\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(200)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(300)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(400)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(500)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(600)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(700)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(800)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(900)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1100)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1200)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1300)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1400)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1500)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1600)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1700)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1800)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1900)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(2000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(2100)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(2200)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(2300)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(2400)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(2500)\n</cell>\n<code language=julia-1.5>\nis_\nusing Test\n\
    \n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\
    \t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\
    \t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891)\
    \ == false)\n\t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzwun_3yb.jl:20\nin expression starting at\
    \ /tmp/tmpzwun_3yb.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if is_multiply_prime_helper(a)\
    \ == true\n    else \n        false\n    end\nend\n\"\"\"\n    Write a function\
    \ that returns true if the given number is the multiplication of 3 prime numbers\n\
    \    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n\
    \    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\
    \t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\
    \t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891)\
    \ == false)\n\t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpuvlj2x9s.jl:14\nin expression starting at /tmp/tmpuvlj2x9s.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp8e0j5ld0.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8e0j5ld0.jl:1\n\
    in expression starting at /tmp/tmp8e0j5ld0.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if a < 100\n   \
    \     true\n    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5)\
    \ == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105)\
    \ == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\
    \t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpma4apztl.jl:15\nin expression starting at\
    \ /tmp/tmpma4apztl.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if is_multiply_prime_helper(a,\
    \ 3, 100) == true\n    else \n        false\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t\
    @test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\
    \t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891)\
    \ == false)\n\t@test(candidate(1001) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpnu_vuxka.jl:19\n  Test threw exception\n\
    \  Expression: candidate(5) == false\n  UndefVarError: is_multiply_prime_helper\
    \ not defined\n  Stacktrace:\n   [1] is_multiply_prime(a::Int64)\n     @ Main\
    \ /tmp/tmpnu_vuxka.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnu_vuxka.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnu_vuxka.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpnu_vuxka.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(30) == true\n  UndefVarError: is_multiply_prime_helper not defined\n\
    \  Stacktrace:\n   [1] is_multiply_prime(a::Int64)\n     @ Main /tmp/tmpnu_vuxka.jl:9\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnu_vuxka.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnu_vuxka.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpnu_vuxka.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(8) == true\n  UndefVarError: is_multiply_prime_helper not defined\n\
    \  Stacktrace:\n   [1] is_multiply_prime(a::Int64)\n     @ Main /tmp/tmpnu_vuxka.jl:9\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnu_vuxka.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnu_vuxka.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpnu_vuxka.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(10) == false\n  UndefVarError: is_multiply_prime_helper not defined\n\
    \  Stacktrace:\n   [1] is_multiply_prime(a::Int64)\n     @ Main /tmp/tmpnu_vuxka.jl:9\n\
    \   [2] macro expans"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 10 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnu_vuxka.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    prime_numbers\
    \ = primes(100)\n    \n    prime_numbers_set = Set(prime_numbers)\n    \n    prime_numbers_set.add(a)\n\
    \    \n    prime_numbers_set = Set(prime_numbers_set)\n    \n    for element in\
    \ prime_numbers_set\n        if element == a\n            return true\n      \
    \  end\n    end\n    return false\nend\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(50)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(200)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(300)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(400)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(500)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(600)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(700)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(800)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(900)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1100)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1200)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1300)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1400)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1500)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1600)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1700)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1800)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1900)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(2000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(2100)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(2200)\n</cell>\n<code language=julia-1.5>\n\nusing Test\n\n\
    @testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\
    \t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\
    \t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891)\
    \ == false)\n\t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6f83yzzr.jl:25\nin expression starting at\
    \ /tmp/tmp6f83yzzr.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if a < 100\n   \
    \     return true\n    \n    primes = prime_numbers(a)\n    \n    for p in primes\n\
    \        if p * 3 == a\n            return true\n        end\n    end\n    return\
    \ false\nend\n</cell>\n<code language=julia-1.5>\n@assert is_multiply_prime(30)\
    \ == true\n@assert is_multiply_prime(31) == false\n@assert is_multiply_prime(33)\
    \ == true\n</cell>\n<code language=julia-1.5>\n\"\"\"Write a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpycmd30aa.jl:21\nin expression starting at\
    \ /tmp/tmpycmd30aa.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    prime_numbers\
    \ = primes(a)\n    \n    for n in prime_numbers\n        if n % 3 == 0\n     \
    \       return false\n        end\n    end\n    \n    return true\nend\n</cell>\n\
    <code language=julia-1.3>\nis_multiply_prime(30)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns true if the given number is a prime number and false\
    \ otherwise.\nKnowing that (a) is less then 100. \nExample: \nis_prime(30) ==\
    \ True\n30 = 2 * 3 * 5\nHint: \nUse a for loop to iterate through the prime numbers\
    \ and test each one to see if it divides your number.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t\
    @test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\
    \t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891)\
    \ == false)\n\t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw5ov6whu.jl:20\nin expression starting at\
    \ /tmp/tmpw5ov6whu.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    prime_numbers\
    \ = primes(100)\n    \n    prime_numbers_array = [prime_numbers[i] | i <- 1:100]\n\
    \    \n    prime_numbers_array = [prime_numbers[i] | i <- 1:100]\n    \n    prime_numbers_array\
    \ = [prime_numbers[i] | i <- 1:100]\n    \n    prime_numbers_array = [prime_numbers[i]\
    \ | i <- 1:100]\n    \n    prime_numbers_array = [prime_numbers[i] | i <- 1:100]\n\
    \    \n    prime_numbers_array = [prime_numbers[i] | i <- 1:100]\n    \n    prime_numbers_array\
    \ = [prime_numbers[i] | i <- 1:100]\n    \n    prime_numbers_array = [prime_numbers[i]\
    \ | i <- 1:100]\n    \n    prime_numbers_array = [prime_numbers[i] | i <- 1:100]\n\
    \    \n    prime_numbers_array = [prime_numbers[i] | i <- 1:100]\n    \n    prime_numbers_array\
    \ = [prime_numbers[i] | i <- 1:100]\n    \n    prime_numbers_array = [prime_numbers[i]\
    \ | i <- 1:100]\n    \n    prime_numbers_array = [prime_numbers[i] | i <- 1:100]\n\
    \    \n    prime_numbers_array = [prime_numbers[i] | i <- 1:100]\n    \n    prime_numbers_array\
    \ = [prime_numbers[i] | i <- 1:100]\n    \n    prime_numbers_array = [prime_numbers[i]\
    \ | i <- 1:100]\n    \n    prime_numbers_array = [prime_numbers[i] | i <- 1:100]\n\
    \    \n    prime_numbers_array = [prime_numbers[i] | i <- 1:100]\n    \n    prime_numbers_array\
    \ = [prime_numbers[i] | i <- 1:100]\n    \n    prime_numbers_array = [prime_numbers[i]\
    \ | i <- 1:100]\n    \n    prime_numbers_array = [prime_numbers[i] | i <- 1:100]\n\
    \    \n    prime_numbers_array = [prime_numbers[i] | i <- 1:100]\n    \n    prime_numbers_array\
    \ = [prime_numbers[i] | i <- 1:100]\n    \n    prime_numbers_array = [prime_numbers[i]\
    \ | i <- 1:100]\n    \n    prime_numbers_array = [prime_numbers[i] | i <- 1:100]\n\
    \    \nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5)\
    \ == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105)\
    \ == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\
    \t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpz2qzabp5.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpz2qzabp5.jl:1\n\
    in expression starting at /tmp/tmpz2qzabp5.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if is_multiply_prime_helper(a,\
    \ 3, 100) == true\n    else false\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmptrq5xzve.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmptrq5xzve.jl:1\n\
    in expression starting at /tmp/tmptrq5xzve.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    prime_numbers\
    \ = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n\
    \    \n    for i in prime_numbers\n        if a % i == 0\n            return false\n\
    \    return true\nend\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns true if the given number is a power\
    \ of 3 \n    and false otherwise.\n    Example:\n    is_power_of_3(3) == true\n\
    \    3 = 2 * 3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\
    \t@test(candidate(5) == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\
    \t@test(candidate(105) == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729)\
    \ == false)\n\t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyi8lcd23.jl:17\nin expression starting at\
    \ /tmp/tmpyi8lcd23.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    if a < 100\n\
    \        \n        prime_numbers = prime_numbers(a)\n        \n        for p in\
    \ prime_numbers\n            \n            if p * 3 == a\n                \n \
    \               return true\n            \n            end\n        end\n    end\n\
    \    \n    return false\nend\n</cell>\n<code language=julia-1.3>\nis_multiply_prime(30)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns true if the given number\
    \ is a prime number and false otherwise.\nKnowing that (a) is less then 100. \n\
    Example: \nis_prime(30) == True\n30 = 2 * 3 * 5\n\"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t\
    @test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\
    \t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891)\
    \ == false)\n\t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6fxryohu.jl:26\nin expression starting at\
    \ /tmp/tmp6fxryohu.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    prime_numbers\
    \ = primes(100)\n    \n    for i in prime_numbers\n        if a % i == 0\n   \
    \         return false\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(30)\n</cell>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc90yfn_c.jl:18\nin expression starting at\
    \ /tmp/tmpc90yfn_c.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    primes = primes_list(100)\n\
    \    \n    for i in primes\n        if a % i == 0\n            return false\n\
    \    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(50)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(100000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(1000000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(10000000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(10000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(100000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1000000000000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8f_199v8.jl:18\nin expression starting at\
    \ /tmp/tmp8f_199v8.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if is_prime(a) ==\
    \ False \n        return false \n    else \n        for b in primes \n       \
    \     if a % b == 0 \n                return false \n        return true \nend\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns true if the given number is a power of 3 prime\
    \ number and false otherwise.\nKnowing that (a) is less then 100. \nExample: \n\
    is_power_of_3_prime(30) == True\n30 = 3^2 * 5\n30 = 3^2 * 3^1\n30 = 3^2 * 3^0\n\
    30 = 3^0 * 3^0\n30 = 3^0 * 3^1\n30 = 3^0 * 3^2\n30 = 3^0 * 3^3\n30 = 3^1 * 3^0\n\
    30 = 3^1 * 3^1\n30 = 3^1 * 3^2\n30 = 3^1 * 3^3\n30 = 3^2 * 3^0\n30 = 3^2 * 3^1\n\
    30 = 3^2 * 3^2\n30 = 3^2 * 3^3\n30 = 3^3 * 3^0\n30 = 3^3 * 3^1\n30 = 3^3 * 3^2\n\
    30 = 3^3 * 3^3\n30 = 3^4 * 3^0\n30 = 3^4 * 3^1\n30 = 3^4 * 3^2\n30 = 3^4 * 3^3\n\
    30 = 3^5 * 3^0\n30 = 3^5 * 3^1\n30 = 3^5 * 3^2\n30 = 3^5 * 3^3\n30 = 3^6 * 3^0\n\
    30 = 3^6 * 3^1\n30 = 3^6 * 3^2\n30 = 3^6 * 3^3\n30 = 3^7 * 3^0\n30 = 3^7 * 3^1\n\
    30 = 3^7 * 3^2\n30 = 3^7 * 3^3\n30 = 3^8 * 3^0\n30 = 3^8 * 3^1\n30 = 3^8 * 3^2\n\
    30 = 3^8 * 3^3\n30 = 3^9 * 3^0\n30 = 3^9 * 3^1\n30 = 3^9 * 3^2\n30 = 3^9 * 3^3\n\
    30 = 3^10 * 3^0\n30 = 3^10 * 3^1\n30 = 3^10 * 3^2\n30 = 3^10 * 3^3\n30 = 3^11\
    \ * 3^0\n30 = 3^11 * 3^1\n30 = 3^11 * 3^2\n30 = 3^11 * 3\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t\
    @test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\
    \t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891)\
    \ == false)\n\t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfq2r97sv.jl:17\nin expression starting at\
    \ /tmp/tmpfq2r97sv.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if is_multiply_prime_helper(a,\
    \ 3, 100) == true\n    else \n        false\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t\
    @test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\
    \t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891)\
    \ == false)\n\t@test(candidate(1001) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmphenjsei2.jl:19\n  Test threw exception\n\
    \  Expression: candidate(5) == false\n  UndefVarError: is_multiply_prime_helper\
    \ not defined\n  Stacktrace:\n   [1] is_multiply_prime(a::Int64)\n     @ Main\
    \ /tmp/tmphenjsei2.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphenjsei2.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphenjsei2.jl:18\ntest set:\
    \ Error During Test at /tmp/tmphenjsei2.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(30) == true\n  UndefVarError: is_multiply_prime_helper not defined\n\
    \  Stacktrace:\n   [1] is_multiply_prime(a::Int64)\n     @ Main /tmp/tmphenjsei2.jl:9\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphenjsei2.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphenjsei2.jl:18\ntest set:\
    \ Error During Test at /tmp/tmphenjsei2.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(8) == true\n  UndefVarError: is_multiply_prime_helper not defined\n\
    \  Stacktrace:\n   [1] is_multiply_prime(a::Int64)\n     @ Main /tmp/tmphenjsei2.jl:9\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphenjsei2.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphenjsei2.jl:18\ntest set:\
    \ Error During Test at /tmp/tmphenjsei2.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(10) == false\n  UndefVarError: is_multiply_prime_helper not defined\n\
    \  Stacktrace:\n   [1] is_multiply_prime(a::Int64)\n     @ Main /tmp/tmphenjsei2.jl:9\n\
    \   [2] macro expans"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 10 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphenjsei2.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp69clqc21.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp69clqc21.jl:1\n\
    in expression starting at /tmp/tmp69clqc21.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    if a < 100\n\
    \        false\n    else\n        true\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    \nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5)\
    \ == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105)\
    \ == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\
    \t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpczwz0zh7.jl:16\nin expression starting at\
    \ /tmp/tmpczwz0zh7.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    if a < 100\n\
    \        true\n    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype is_multiply_prime(30)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns true if the given number is a prime number and false otherwise.\n\
    Knowing that (a) is less then 100. \nExample: \nis_prime(30) == True\n30 = 2 *\
    \ 3 * 5\nHint: \nUse a for loop to iterate over all numbers from 2 to 100.\nUse\
    \ a if statement to check if a number is prime or not.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t\
    @test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\
    \t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891)\
    \ == false)\n\t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvlyh5kd8.jl:16\nin expression starting at\
    \ /tmp/tmpvlyh5kd8.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    prime_numbers\
    \ = primes(a)\n    \n    for i in prime_numbers\n        if a % i == 0\n     \
    \       return false\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(10000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(10000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(100000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1000000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(1000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(10000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100000000000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000000000000000)\n\
    </cell>\n<code language=julia-\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\
    \t@test(candidate(5) == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\
    \t@test(candidate(105) == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729)\
    \ == false)\n\t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsw66k0mk.jl:17\nin expression starting at\
    \ /tmp/tmpsw66k0mk.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    if a < 100\n\
    \        true\n    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\n\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\
    \t@test(candidate(5) == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\
    \t@test(candidate(105) == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729)\
    \ == false)\n\t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9qjgq31l.jl:16\nin expression starting at\
    \ /tmp/tmp9qjgq31l.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if a < 100\n   \
    \     false\n    else\n        true\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    is_multiply_prime(30)\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3o6pfyhr.jl:15\nin expression starting at\
    \ /tmp/tmp3o6pfyhr.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    if a < 100\n\
    \        return false\n    \n    primes = primes(a)\n    \n    for p in primes\n\
    \        if a % p == 0\n            return false\n    \n    return true\nend\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ true if the given number is a prime number and false otherwise.\nKnowing that\
    \ (a) is less then 100. \nExample: \nis_prime(30) == True\n30 = 2 * 3 * 5\n\"\"\
    \"\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5)\
    \ == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105)\
    \ == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\
    \t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5_6x4y_y.jl:21\nin expression starting at\
    \ /tmp/tmp5_6x4y_y.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp9zb30ps6.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9zb30ps6.jl:1\n\
    in expression starting at /tmp/tmp9zb30ps6.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if a < 100\n   \
    \     false\n    else\n        true\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    is_multiply_prime(30)\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ true if the given number is a prime number and false otherwise.\nKnowing that\
    \ (a) is less then 100. \nExample: \nis_prime(30) == True\n30 = 2 * 3 * 5\n\"\"\
    \"\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5)\
    \ == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105)\
    \ == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\
    \t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbis3kw65.jl:15\nin expression starting at\
    \ /tmp/tmpbis3kw65.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpwefqxe4j.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwefqxe4j.jl:1\n\
    in expression starting at /tmp/tmpwefqxe4j.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    if a < 100\n\
    \        return true\n    \n    primes = primes_list(100)\n    \n    for i in\
    \ primes\n        if a % i == 0\n            return false\n    \n    return true\n\
    end\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t\
    @test(candidate(5) == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\
    \t@test(candidate(105) == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729)\
    \ == false)\n\t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp24g5exf_.jl:21\nin expression starting at\
    \ /tmp/tmp24g5exf_.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpg9le4i_6.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpg9le4i_6.jl:1\n\
    in expression starting at /tmp/tmpg9le4i_6.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if a < 100\n   \
    \     return false\n    \n    primes = primes_list(100)\n    \n    for i in primes\n\
    \        if a % i == 0\n            return false\n    \n    return true\nend\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns true if the given number is a prime\
    \ number and false otherwise.\nKnowing that (a) is less then 100. \nExample: \n\
    is_prime(30) == True\n30 = 3 * 7 * 11\nHint: \nThe first thing you should do is\
    \ to write a function that returns true if the given number is a prime number\
    \ and false otherwise.\nThe second thing you should do is to write a function\
    \ that returns true if the given number is a multiply of 3 prime numbers and false\
    \ otherwise.\nThe third thing you should do is to write a function that returns\
    \ true if the given number is a multiply of 5 prime numbers and false otherwise.\n\
    The fourth thing you should do is to write a function that returns true if the\
    \ given number is a multiply of 7 prime numbers and false otherwise.\nThe fifth\
    \ thing you should do is to write a function that returns true if the given number\
    \ is a multiply of 11 prime numbers and false otherwise.\nThe sixth thing you\
    \ should do is to write a function that returns true if the given number is a\
    \ multiply of 13 prime numbers and false otherwise.\nThe seventh thing you should\
    \ do is to write a function that returns true if the given number is a multiply\
    \ of 17 prime numbers and false otherwise.\nThe eighth thing you should do is\
    \ to write a function that returns true if the given number is a multiply of 19\
    \ prime numbers and false otherwise.\nThe ninth thing you should do is to write\
    \ a function that returns true if the given number is a multiply of 23 prime numbers\
    \ and false otherwise.\nThe tenth thing you should do is to write a function that\
    \ returns true if the given number is a multiply of 29 prime numbers and false\
    \ otherwise.\nThe eleventh thing you should do is to write a function that returns\
    \ true if the given number is a multiply of 31 prime numbers and false otherwise.\n\
    The twelfth thing you should do is to write a function that returns true if the\
    \ given number is a multiply of 37 prime numbers and false otherwise.\nThe thirteenth\
    \ thing you should do is to write a function that returns true if the given number\
    \ is a multiply of 41 prime numbers and false otherwise.\nThe fourteenth thing\
    \ you should do is to write a function that returns true if the given number is\
    \ a multiply of 43 prime numbers and false otherwise.\nThe fifteenth thing you\
    \ should do is to write a function that returns true if the given number is a\
    \ multiply of 47 prime numbers and false otherwise.\nThe sixteenth thing you should\
    \ do is to write a function that returns true if the given number is a multiply\
    \ \nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5)\
    \ == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105)\
    \ == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\
    \t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg_unzyp9.jl:20\nin expression starting at\
    \ /tmp/tmpg_unzyp9.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    prime_numbers\
    \ = primes(a)\n    \n    for i in prime_numbers\n        if a % i == 0\n     \
    \       return false\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(30)\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns true if the given number is a perfect square, false otherwise.\nExample:\n\
    is_perfect_square(25) == true\n25 = 4 * 7\n25 = 2 * 3 * 5\n25 = 2 * 3 * 5 * 7\n\
    25 = 2 * 3 * 5 * 7 * 11\n25 = 2 * 3 * 5 * 7 * 11 * 13\n25 = 2 * 3 * 5 * 7 * 11\
    \ * 13 * 17\n25 = 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19\n25 = 2 * 3 * 5 * 7 * 11 *\
    \ 13 * 17 * 19 * 23\n25 = 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29\n25 = 2\
    \ * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29 * 31\n25 = 2 * 3 * 5 * 7 * 11 * 13\
    \ * 17 * 19 * 23 * 29 * 31 * 37\n25 = 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 *\
    \ 29 * 31 * 37 * 41\n25 = 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29 * 31 * 37\
    \ * 41 * 43\n25 = 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29 * 31 * 37 * 41 *\
    \ 43 * 47\n25 = 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29 * 31 * 37 * 41 * 43\
    \ * 47 * 53\n25 = 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29 * 31 * 37 * 41 *\
    \ 43 * 47 * 53 * 59\n25 = 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29 * 31 * 37\
    \ * 41 * 43 * 47 * 53 * 59 * 61\n25 = 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 *\
    \ 29 * 31 * 37 * 41 * 43 * 47 * 53 * 59 * 61 * 67\n25 = 2 * 3 * 5 * 7 * 11 * 13\
    \ * 17 * 19 * 23 * 29 * 31 * 37 * 41 * 43 * 47 * 53 * 59 * 61 * 67 * 71\n25 =\
    \ 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29 * 31 * 37 * \nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t\
    @test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\
    \t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891)\
    \ == false)\n\t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvdbyo4kr.jl:17\nin expression starting at\
    \ /tmp/tmpvdbyo4kr.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    if a < 100\n\
    \        \n        for n in 2..a\n            if a % n == 0\n                return\
    \ false\n        end\n        return true\n    end\n    return false\nend\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns true if the given number is the multiplication of\
    \ 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t\
    @test(candidate(5) == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\
    \t@test(candidate(105) == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729)\
    \ == false)\n\t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwmvzluz0.jl:20\nin expression starting at\
    \ /tmp/tmpwmvzluz0.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpo_ngejsx.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpo_ngejsx.jl:1\n\
    in expression starting at /tmp/tmpo_ngejsx.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmptqrcar9r.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmptqrcar9r.jl:1\n\
    in expression starting at /tmp/tmptqrcar9r.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    prime_numbers\
    \ = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n\
    \    \n    \n    for i in prime_numbers\n        if a % i == 0\n            return\
    \ false\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns true if the given number\
    \ is a prime number and false otherwise.\nKnowing that (a) is less then 100. \n\
    Example: \nis_prime(30) == True\n30 = 2 * 3 * 5\n\"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t\
    @test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\
    \t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891)\
    \ == false)\n\t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq8uecrfs.jl:19\nin expression starting at\
    \ /tmp/tmpq8uecrfs.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpt08g_hgt.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpt08g_hgt.jl:1\n\
    in expression starting at /tmp/tmpt08g_hgt.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpunq1_3d8.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpunq1_3d8.jl:1\n\
    in expression starting at /tmp/tmpunq1_3d8.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if a < 100\n   \
    \     return false\n    else if a % 3 == 0 && a % 5 == 0\n        return true\n\
    \    else\n        return false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(50)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(200)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(300)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(400)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(500)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(600)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(700)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(800)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(900)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1100)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1200)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1300)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1400)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1500)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1600)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1700)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1800)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1900)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(2100)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(2200)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(2300)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(2400)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(2500)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(2600)\n</cell>\nusing Test\n\
    \n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\
    \t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\
    \t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891)\
    \ == false)\n\t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg_bx5ob0.jl:11\nin expression starting at\
    \ /tmp/tmpg_bx5ob0.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if a < 100\n   \
    \     true\n    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\
    \t@test(candidate(5) == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\
    \t@test(candidate(105) == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729)\
    \ == false)\n\t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptuug_be7.jl:15\nin expression starting at\
    \ /tmp/tmptuug_be7.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    prime_numbers\
    \ = primes(100)\n    \n    for i in prime_numbers\n        if a % i == 0\n   \
    \         return false\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\
    \t@test(candidate(5) == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\
    \t@test(candidate(105) == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729)\
    \ == false)\n\t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc15b6m9j.jl:18\nin expression starting at\
    \ /tmp/tmpc15b6m9j.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    if a < 100\n\
    \        \n        primes = primes(a)\n        \n        for p in primes\n   \
    \         if p*p > a\n                return false\n            end\n        end\n\
    \        return true\n    end\n    return false\nend\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(30)\n</cell>\n<text>\nExercise\nWrite a function that\
    \ returns true if the given number is a prime number and false otherwise.\nKnowing\
    \ that (a) is less then 100. \nExample: \nis_prime(30) == True\n30 = 2 * 3 * 5\n\
    Hint: \nThe first number that does not divide 3 is a prime number. \nThe second\
    \ number that does not divide 5 is a prime number. \nThe third number that does\
    \ not divide 7 is a prime number. \nThe fourth number that does not divide 11\
    \ is a prime number. \nThe fifth number that does not divide 13 is a prime number.\
    \ \nThe sixth number that does not divide 17 is a prime number. \nThe seventh\
    \ number that does not divide 19 is a prime number. \nThe eighth number that does\
    \ not divide 21 is a prime number. \nThe ninth number that does not divide 23\
    \ or a prime number. \nThe tenth number that does not divide 25 is a prime number.\
    \ \nThe eleventh number that does not divide 27 is a prime number. \nThe twelfth\
    \ number that does not divide 29 is a prime number. \nThe thirteenth number that\
    \ does not divide 31 is a prime number. \nThe fourteenth number that does not\
    \ divide 33 is a prime number. \nThe fifteenth number that does not divide 35\
    \ is a prime number. \nThe sixteenth number that does not divide 37 is a prime\
    \ number. \nThe seventeenth number that does not divide 39 is a prime number.\
    \ \nThe eighteenth number that does not divide 41 is a prime number. \nThe nineteenth\
    \ number that does not divide 43 is a prime number. \nThe twentieth number that\
    \ does not divide 45 is a prime number. \nThe thirtieth number that does not divide\
    \ 47 is a prime number. \nThe fortieth number that does not divide 49 is a prime\
    \ number. \nThe fiftieth number that does not divide 51 is a prime number. \n\
    The sixtieth number that does not divide 53 is a prime number. \nThe seventieth\
    \ number that does not divide 55 is a prime number. \nThe eightieth number that\
    \ does not divide 57 is a prime number. \nThe ninetieth number that does not divide\
    \ 59 is a prime number. \nThe twentyeth number that does not divide 61 is a \n\
    using Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5)\
    \ == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105)\
    \ == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\
    \t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdftboem2.jl:23\nin expression starting at\
    \ /tmp/tmpdftboem2.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp_72_inj_.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_72_inj_.jl:1\n\
    in expression starting at /tmp/tmp_72_inj_.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    prime_numbers\
    \ = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97]\n    \n    \n    for i in prime_numbers\n        if a %\
    \ i == 0\n            return false\n    end\n    return true\nend\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(100000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(1000000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(10000000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(10000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(100000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1000000000000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t\
    @test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\
    \t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891)\
    \ == false)\n\t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy33wb_dh.jl:19\nin expression starting at\
    \ /tmp/tmpy33wb_dh.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if a < 100\n   \
    \     return false\n    else \n        primes = primes(a)\n        primes_count\
    \ = length(primes)\n        if primes_count > 3\n            return false\n  \
    \      else\n            primes_count = length(primes)\n            primes_count\
    \ = primes_count - 1\n            primes_count = primes_count - 1\n          \
    \  primes_count = primes_count - 1\n            primes_count = primes_count -\
    \ 1\n            primes_count = primes_count - 1\n            primes_count = primes_count\
    \ - 1\n            primes_count = primes_count - 1\n            primes_count =\
    \ primes_count - 1\n            primes_count = primes_count - 1\n            primes_count\
    \ = primes_count - 1\n            primes_count = primes_count - 1\n          \
    \  primes_count = primes_count - 1\n            primes_count = primes_count -\
    \ 1\n            primes_count = primes_count - 1\n            primes_count = primes_count\
    \ - 1\n            primes_count = primes_count - 1\n            primes_count =\
    \ primes_count - 1\n            primes_count = primes_count - 1\n            primes_count\
    \ = primes_count - 1\n            primes_count = primes_count - 1\n          \
    \  primes_count = primes_count - 1\n            primes_count = primes_count -\
    \ 1\n            primes_count = primes_count - 1\n            primes_count = primes_count\
    \ - 1\n            primes_count = primes_count - 1\n            primes_count =\
    \ primes_count - 1\n            primes_count = primes_count - 1\n            primes_count\
    \ = primes_count - 1\n            primes_count = primes_count - 1\n          \
    \  primes_count = primes_count - 1\n            primes_count = primes_count -\
    \ 1\n            primes_count = primes_count - 1\n            primes_count = primes_count\
    \ - 1\n            primes_count = primes_count - 1\n            primes_count =\
    \ primes_count - 1\n            primes_count = primes_count - 1\n            primes_count\
    \ = primes_count - 1\n            primes_count = primes_count - 1\n          \
    \  primes_count = primes_count - 1\n            primes_count = primes_count -\
    \ 1\n            primes_count = primes_count - 1\n            primes_count = primes_count\
    \ - 1\n            primes_count = primes_count - 1\n            primes_count =\
    \ primes_count - 1\n            primes_count = primes_count - 1\n            primes_count\
    \ = primes_count - 1\n            primes_count = primes_count - 1\n          \
    \  primes_count = primes_count - 1\n            primes_count = primes_count -\
    \ 1\n            primes_count = primes_count - 1\n            primes_count = primes_count\
    \ - 1\n            primes_count = primes_count \nusing Test\n\n@testset begin\n\
    \ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmp_4_ibfzt.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_4_ibfzt.jl:1\n\
    in expression starting at /tmp/tmp_4_ibfzt.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp9r0ycv0r.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9r0ycv0r.jl:1\n\
    in expression starting at /tmp/tmp9r0ycv0r.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpgu0p3203.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpgu0p3203.jl:1\n\
    in expression starting at /tmp/tmpgu0p3203.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if a < 100\n   \
    \     false\n    else\n        true\n    end\nend\n</cell>\n<code language=julia-1.1>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.1>\nis_multiply_prime(100)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns true if the given number\
    \ is a prime number and false otherwise.\nKnowing that (a) is less then 100. \n\
    Example: \nis_prime(30) == True\n30 = 2 * 3 * 5\n\"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t\
    @test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\
    \t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891)\
    \ == false)\n\t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc9ez7jsc.jl:15\nin expression starting at\
    \ /tmp/tmpc9ez7jsc.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    prime_numbers\
    \ = prime_numbers(a)\n    \n    for n in prime_numbers\n        if n % 3 == 0\n\
    \            return false\n        end\n    end\n    return true\nend\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(100000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(1000000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(10000000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(10000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(100000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1000000000000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000000000000000)\n\
    </\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5)\
    \ == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105)\
    \ == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\
    \t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2294nclr.jl:19\nin expression starting at\
    \ /tmp/tmp2294nclr.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpmpmbcyaq.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmpmbcyaq.jl:1\n\
    in expression starting at /tmp/tmpmpmbcyaq.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpunsj819p.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpunsj819p.jl:1\n\
    in expression starting at /tmp/tmpunsj819p.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if a < 100\n   \
    \     return false\n    else if a == 2\n        return true\n    else if a ==\
    \ 3\n        return true\n    else if a == 5\n        return true\n    else if\
    \ a == 7\n        return true\n    else if a == 11\n        return true\n    else\
    \ if a == 13\n        return true\n    else if a == 17\n        return true\n\
    \    else if a == 19\n        return true\n    else if a == 23\n        return\
    \ true\n    else if a == 29\n        return true\n    else if a == 31\n      \
    \  return true\n    else if a == 37\n        return true\n    else if a == 41\n\
    \        return true\n    else if a == 43\n        return true\n    else if a\
    \ == 47\n        return true\n    else if a == 53\n        return true\n    else\
    \ if a == 59\n        return true\n    else if a == 61\n        return true\n\
    \    else if a == 67\n        return true\n    else if a == 71\n        return\
    \ true\n    else if a == 73\n        return true\n    else if a == 79\n      \
    \  return true\n    else if a == 83\n        return true\n    else if a == 89\n\
    \        return true\n    else if a == 97\n        return true\n    else\n   \
    \     return false\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"Write a function\
    \ that returns true if the given number is the multiplication of 5 prime numbers\n\
    \    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n\
    \    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\
    \t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\
    \t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891)\
    \ == false)\n\t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo2qktv1a.jl:11\nin expression starting at\
    \ /tmp/tmpo2qktv1a.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    primes = prime_numbers(a)\n\
    \    \n    for i in primes\n        if a % i == 0\n            return false\n\
    \        end\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(10000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(10000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(100000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1000000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(1000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(10000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100000000000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000000000000000)\n\
    </cell>\n\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t\
    @test(candidate(5) == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\
    \t@test(candidate(105) == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729)\
    \ == false)\n\t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp50y3kvkh.jl:19\nin expression starting at\
    \ /tmp/tmp50y3kvkh.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if is_multiply_prime_helper(a,\
    \ 3, 100) == true\n    else \n        false\n    end\nend\n\"\"\"\nWrite a function\
    \ that returns true if the given number is the multiplication of 5 prime numbers\n\
    \    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n\
    \    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5 * 7\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5)\
    \ == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105)\
    \ == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\
    \t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmp_cabbgqo.jl:14\nin expression starting at /tmp/tmp_cabbgqo.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpmqhw4dzr.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmqhw4dzr.jl:1\n\
    in expression starting at /tmp/tmpmqhw4dzr.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    if a < 100\n\
    \        return false\n    \n    primes = prime_numbers(a)\n    \n    for p in\
    \ primes\n        if p * 3 == a\n            return true\n        end\n    end\n\
    \    return false\nend\n</cell>\n<code language=julia-1.5>\n@assert is_multiply_prime(30)\
    \ == true\n@assert is_multiply_prime(31) == false\n@assert is_multiply_prime(100)\
    \ == false\n</cell>\n<text>\nExercise 2\nWrite a function that returns true if\
    \ the given number is divisible by 3 prime numbers and false otherwise.\nKnowing\
    \ that (a) is less then 100. \nExample: \nis_divisible_prime(30) == true\n30 =\
    \ 2 * 3 * 5\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\
    \t@test(candidate(5) == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\
    \t@test(candidate(105) == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729)\
    \ == false)\n\t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpze3punyg.jl:22\nin expression starting at\
    \ /tmp/tmpze3punyg.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if a < 100\n   \
    \     return false\n    \n    primes = prime_numbers(a)\n    \n    for p in primes\n\
    \        if p * 3 == a\n            return true\n        end\n    end\n    return\
    \ false\nend\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n\
    <code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns true if the given number is a prime number\
    \ and false otherwise.\nKnowing that (a) is less then 100. \nExample: \nis_prime(30)\
    \ == true\n30 = 2 * 3 * 5\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate =\
    \ is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30) ==\
    \ true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t@test(candidate(125)\
    \ == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126) == false)\n\
    \t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\t@test(candidate(1001)\
    \ == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg7x1knct.jl:21\nin expression starting at\
    \ /tmp/tmpg7x1knct.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if is_multiply_prime_helper(a,\
    \ 3, 100) == true\n    else false\nend\n\"\"\"\n    Write a function that returns\
    \ true if the given number is the multiplication of 5 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5 * 7\n    \"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpd7w12sm_.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpd7w12sm_.jl:1\n\
    in expression starting at /tmp/tmpd7w12sm_.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if a < 100\n   \
    \     true\n    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.3>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.3>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.3>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.3>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.3>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.3>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.3>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.3>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.3>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.3>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.3>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.3>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.3>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.3>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.3>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.3>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.3>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.3>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.3>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.3>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.3>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.3>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.3>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.3>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.3>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.3>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.3>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.3>\nis_multiply_prime(30)\n\
    </cell\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5)\
    \ == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105)\
    \ == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\
    \t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpftsk6s7y.jl:15\nin expression starting at\
    \ /tmp/tmpftsk6s7y.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp667w5csh.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp667w5csh.jl:1\n\
    in expression starting at /tmp/tmp667w5csh.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    prime_numbers\
    \ = primes(100)\n    \n    for i in prime_numbers\n        if a % i == 0\n   \
    \         return false\n    \n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\
    \t@test(candidate(5) == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\
    \t@test(candidate(105) == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729)\
    \ == false)\n\t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpikom52u5.jl:18\nin expression starting at\
    \ /tmp/tmpikom52u5.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    prime_numbers\
    \ = primes(a)\n    \n    prime_numbers.is_empty()\n    \n    prime_numbers.head\
    \ == 3\n    \n    prime_numbers.tail == prime_numbers.tail.tail\n    \n    prime_numbers.tail.head\
    \ == 5\n    \n    prime_numbers.tail.tail == prime_numbers.tail.tail.tail\n  \
    \  \n    prime_numbers.tail.tail.head == 7\n    \n    prime_numbers.tail.tail.tail\
    \ == prime_numbers.tail.tail.tail.tail\n    \n    prime_numbers.tail.tail.tail.head\
    \ == 11\n    \n    prime_numbers.tail.tail.tail.tail == prime_numbers.tail.tail.tail.tail.tail\n\
    \    \n    prime_numbers.tail.tail.tail.tail.head == 13\n    \n    prime_numbers.tail.tail.tail.tail.tail\
    \ == prime_numbers.tail.tail.tail.tail.tail.tail\n    \n    prime_numbers.tail.tail.tail.tail.tail.head\
    \ == 17\n    \n    prime_numbers.tail.tail.tail.tail.tail.tail == prime_numbers.tail.tail.tail.tail.tail.tail.tail\n\
    \    \n    prime_numbers.tail.tail.tail.tail.tail.tail.head == 19\n    \n    prime_numbers.tail.tail.tail.tail.tail.tail.tail\
    \ == prime_numbers.tail.tail.tail.tail.tail.tail.tail.tail\n    \n    prime_numbers.tail.tail.tail.tail.tail.tail.tail.head\
    \ == 23\n    \n    prime_numbers.tail.tail.tail.tail.tail.tail.tail == prime_numbers.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \    \n    prime_numbers.tail.tail.tail.tail.tail.tail.tail.tail.head == 29\n\
    \    \n    prime_numbers.tail.tail.tail.tail.tail.tail.tail.tail.tail == prime_numbers.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \    \n    prime_numbers.tail.tail.tail.tail.tail.tail.tail.tail.tail.head ==\
    \ 31\n    \n    prime_numbers.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\
    \ == 37\n\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t\
    @test(candidate(5) == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\
    \t@test(candidate(105) == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729)\
    \ == false)\n\t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxt0peyht.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxt0peyht.jl:1\n\
    in expression starting at /tmp/tmpxt0peyht.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    primes = [2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97]\n    \n    for i in primes\n        if a % i == 0\n        \
    \    return False\n    \n    for i in primes\n        if a % i == 0\n        \
    \    return True\n    \n    return false\nend\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(50)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(10000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(1000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(10000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(10000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(100000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(1000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(10000000000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(10000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(100000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(1000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(10000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\
    \t@test(candidate(5) == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\
    \t@test(candidate(105) == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729)\
    \ == false)\n\t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyjxoy6ib.jl:22\nin expression starting at\
    \ /tmp/tmpyjxoy6ib.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppb5ubnmz.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppb5ubnmz.jl:1\n\
    in expression starting at /tmp/tmppb5ubnmz.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    if a < 100\n\
    \        return false\n    \n    primes = prime_numbers(a)\n    \n    for i in\
    \ primes\n        if a % i == 0\n            return false\n    \n    return true\n\
    end\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(100)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(10000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(1000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(10000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(10000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(100000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(1000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(10000000000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(10000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(100000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(1000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(10000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(100000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(1000000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(100\nusing Test\n\n@testset begin\n\
    \ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg5_sz16_.jl:21\nin expression starting at\
    \ /tmp/tmpg5_sz16_.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    if a < 100\n\
    \        return false\n    \n    primes = prime_numbers(a)\n    \n    for p in\
    \ primes\n        if p % 3 == 0\n            return false\n    \n    return true\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert is_multiply_prime(30) == true\n\
    @assert is_multiply_prime(31) == false\n@assert is_multiply_prime(99) == false\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns true if the given number\
    \ is a perfect square, false otherwise.\n    \n    Example:\n    is_perfect_square(25)\
    \ == true\n    25 = 2 * 3 * 5\n    25 = 2 * 3 * 5 * 7\n    25 = 2 * 3 * 5 * 7\
    \ * 11\n    25 = 2 * 3 * 5 * 7 * 11 * 13\n    25 = 2 * 3 * 5 * 7 * 11 * 13 * 17\n\
    \    25 = 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19\n    25 = 2 * 3 * 5 * 7 * 11 * 13\
    \ * 17 * 19 * 23\n    25 = 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29\n    25\
    \ = 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29 * 31\n    25 = 2 * 3 * 5 * 7 *\
    \ 11 * 13 * 17 * 19 * 23 * 29 * 31 * 37\n    25 = 2 * 3 * 5 * 7 * 11 * 13 * 17\
    \ * 19 * 23 * 29 * 31 * 37 * 41\n    25 = 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 *\
    \ 23 * 29 * 31 * 37 * 41 * 43\n    25 = 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23\
    \ * 29 * 31 * 37 * 41 * 43 * 47\n    25 = 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 *\
    \ 23 * 29 * 31 * 37 * 41 * 43 * 47 * 53\n    25 = 2 * 3 * 5 * 7 * 11 * 13 * 17\
    \ * 19 * 23 * 29 * 31 * 37 * 41 * 43 * 47 * 53 * 59\n    25 = 2 * 3 * 5 * 7 *\
    \ 11 * 13 * 17 * 19 * 23 * 29 * 31 * 37 * 41 * 43 * 47 * 53 * 59 * 61\n    25\
    \ = 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29 * 31 * 37 * 41 * 43 * 47 * 53\
    \ * 59 * 61 * 67\n    25 = 2 * 3 * 5 * 7 * 11 * 13\nusing Test\n\n@testset begin\n\
    \ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpduny4327.jl:21\nin expression starting at\
    \ /tmp/tmpduny4327.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpwkb8spe4.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwkb8spe4.jl:1\n\
    in expression starting at /tmp/tmpwkb8spe4.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    if a < 100\n\
    \        true\n    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert is_multiply_prime(30) == true\n@assert is_multiply_prime(10) == false\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns true if the given number\
    \ is a prime number and false otherwise.\n    \n    Example:\n    is_prime(30)\
    \ == true\n    30 = 3 * 7 * 11\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprlmxt4ob.jl:16\nin expression starting at\
    \ /tmp/tmprlmxt4ob.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if a < 100\n   \
    \     true\n    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ true if the given number is a prime number and false otherwise.\nKnowing that\
    \ (a) is less then 100. \nExample: \nis_prime(30) == True\n30 = 2 * 3 * 5\n\"\"\
    \"\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5)\
    \ == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105)\
    \ == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\
    \t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpksef1cfy.jl:15\nin expression starting at\
    \ /tmp/tmpksef1cfy.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    if a < 100\n\
    \        return false\n    \n    prime_numbers = prime_numbers(a)\n    \n    for\
    \ i in prime_numbers\n        if a % i == 0\n            return false\n    \n\
    \    return true\nend\n</cell>\n<code language=julia-1.5>\n@assert is_multiply_prime(30)\
    \ == true\n@assert is_multiply_prime(31) == false\n@assert is_multiply_prime(100)\
    \ == false\n</cell>\n<text>\nExercise 2\nWrite a function that returns the multiplication\
    \ of 3 prime numbers. \n    Example:\n    mult_3_primes(30) == 60\n    30 = 2\
    \ * 3 * 5\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\
    \t@test(candidate(5) == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\
    \t@test(candidate(105) == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729)\
    \ == false)\n\t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvamkugcd.jl:21\nin expression starting at\
    \ /tmp/tmpvamkugcd.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    if a < 100\n\
    \        true\n    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb3kjqemd.jl:16\nin expression starting at\
    \ /tmp/tmpb3kjqemd.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    if a < 100\n\
    \        return false\n    \n    primes = primes_list(100)\n    \n    for p in\
    \ primes\n        if p*p > a\n            return false\n    \n    return true\n\
    end\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(100)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(200)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(300)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(400)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(500)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(600)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(700)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(800)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(900)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1100)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1200)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1300)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1400)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1500)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1600)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1700)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1800)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1900)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(2000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(2100)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(2200)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(2300)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(2400)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(2500)\n</cell>\n<code language=julia-\n\
    using Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5)\
    \ == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105)\
    \ == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\
    \t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpizfhwqv3.jl:21\nin expression starting at\
    \ /tmp/tmpizfhwqv3.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    primes = prime_numbers(a)\n\
    \    \n    for prime in primes\n        if prime == 3\n            return true\n\
    \        else\n            return false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the multiplication\
    \ of 2 prime numbers. \n    Example:\n    multiply_primes(30) == 30 * 2\n    \"\
    \"\"\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5)\
    \ == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105)\
    \ == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\
    \t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi371p_th.jl:19\nin expression starting at\
    \ /tmp/tmpi371p_th.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpro4_g94u.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpro4_g94u.jl:1\n\
    in expression starting at /tmp/tmpro4_g94u.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    prime_numbers\
    \ = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n\
    \    \n    for i in prime_numbers\n        if a % i == 0\n            return false\n\
    \    return true\nend\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns true if the given number is a power\
    \ of 3 or false otherwise.\n    Example:\n    is_power_of_3(3) == true\n    is_power_of_3(5)\
    \ == false\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\
    \t@test(candidate(5) == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\
    \t@test(candidate(105) == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729)\
    \ == false)\n\t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5vfjz7ov.jl:17\nin expression starting at\
    \ /tmp/tmp5vfjz7ov.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpe3lw4v8r.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpe3lw4v8r.jl:1\n\
    in expression starting at /tmp/tmpe3lw4v8r.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if a < 100\n   \
    \     true\n    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(10000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(10000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(100000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1000000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(1000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(10000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100000000000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000000000000000)\n\
    </cell\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5)\
    \ == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105)\
    \ == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\
    \t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppuhzmfh_.jl:15\nin expression starting at\
    \ /tmp/tmppuhzmfh_.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    prime_numbers\
    \ = prime_numbers(a)\n    \n    for prime in prime_numbers\n        if a % prime\
    \ == 0\n            return false\n        end\n    end\n    return true\nend\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(100000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(1000000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(10000000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(10000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(100000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1000000000000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000000000000\n\
    using Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5)\
    \ == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105)\
    \ == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\
    \t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxxtsfe47.jl:19\nin expression starting at\
    \ /tmp/tmpxxtsfe47.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    prime_numbers\
    \ = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n\
    \    \n    for i in prime_numbers\n        if a % i == 0\n            return false\n\
    \    return true\nend\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns true if the given number\
    \ is a prime number and false otherwise.\nKnowing that (a) is less then 100. \n\
    Example: \nis_prime(30) == True\n30 = 2 * 3 * 5\n\"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t\
    @test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\
    \t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891)\
    \ == false)\n\t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprraaevdi.jl:17\nin expression starting at\
    \ /tmp/tmprraaevdi.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp4wwukiw9.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4wwukiw9.jl:1\n\
    in expression starting at /tmp/tmp4wwukiw9.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    prime_numbers\
    \ = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n\
    \    \n    for i in prime_numbers\n        if a % i == 0\n            return false\n\
    \    return true\nend\n</cell>\n<code language=julia-1.0>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.0>\nis_multiply_prime(100)\n</cell>\n<code language=julia-1.0>\n\
    is_multiply_prime(1000)\n</cell>\n<code language=julia-1.0>\nis_multiply_prime(10000)\n\
    </cell>\n<code language=julia-1.0>\nis_multiply_prime(100000)\n</cell>\n<code\
    \ language=julia-1.0>\nis_multiply_prime(1000000)\n</cell>\n<code language=julia-1.0>\n\
    is_multiply_prime(10000000)\n</cell>\n<code language=julia-1.0>\nis_multiply_prime(100000000)\n\
    </cell>\n<code language=julia-1.0>\nis_multiply_prime(1000000000)\n</cell>\n<code\
    \ language=julia-1.0>\nis_multiply_prime(10000000000)\n</cell>\n<code language=julia-1.0>\n\
    is_multiply_prime(100000000000)\n</cell>\n<code language=julia-1.0>\nis_multiply_prime(1000000000000)\n\
    </cell>\n<code language=julia-1.0>\nis_multiply_prime(10000000000000)\n</cell>\n\
    <code language=julia-1.0>\nis_multiply_prime(100000000000000)\n</cell>\n<code\
    \ language=julia-1.0>\nis_multiply_prime(1000000000000000)\n</cell>\n<code language=julia-1.0>\n\
    is_multiply_prime(10000000000000000)\n</cell>\n<code language=julia-1.0>\nis_multiply_prime(100000000000000000)\n\
    </cell>\n<code language=julia-1.0>\nis_multiply_prime(1000000000000000000)\n</cell>\n\
    <code language=julia-1.0>\nis_multiply_prime(10000000000000000000)\n</cell>\n\
    <code language=julia-1.0>\nis_multiply_prime(100000000000000000000)\n</cell>\n\
    <code language=julia-1.0>\nis_multiply_prime(1000000000000000000000)\n</cell>\n\
    <code language=julia-1.0>\nis_multiply_prime(10000000000000000000000)\n</cell>\n\
    <code language=julia-1.0>\nis_multiply_prime(100000000000000000000000)\n</cell>\n\
    <code language=julia-1.0>\nis_multi\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvys_7ksk.jl:17\nin expression starting at\
    \ /tmp/tmpvys_7ksk.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    primes = primes_list(100)\n\
    \    \n    primes_set = Set(primes)\n    \n    primes_set = primes_set - Set(primes_list(a\
    \ % primes_set))\n    \n    return primes_set == Set(primes)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns true if the given number is a prime number and false\
    \ otherwise.\nKnowing that (a) is less then 100. \nExample: \nis_prime(30) ==\
    \ True\n30 = 2 * 3 * 5\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\
    \t@test(candidate(5) == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\
    \t@test(candidate(105) == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729)\
    \ == false)\n\t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgk20hs_d.jl:18\nin expression starting at\
    \ /tmp/tmpgk20hs_d.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp_enhgc2t.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_enhgc2t.jl:1\n\
    in expression starting at /tmp/tmp_enhgc2t.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if a < 100\n   \
    \     true\n    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ is_multiply_prime(100)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ true if the given number is a prime number and false otherwise.\n    \n    Example:\n\
    \    is_prime(30) == True\n    30 = 3 * 7 * 11 * 13 * 17 * 19\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5)\
    \ == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105)\
    \ == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\
    \t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjza4ms91.jl:15\nin expression starting at\
    \ /tmp/tmpjza4ms91.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    prime_numbers\
    \ = primes(100)\n    \n    for num in prime_numbers\n        if a % num == 0\n\
    \            return false\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\
    \t@test(candidate(5) == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\
    \t@test(candidate(105) == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729)\
    \ == false)\n\t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk8gl8nnd.jl:18\nin expression starting at\
    \ /tmp/tmpk8gl8nnd.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    prime_numbers\
    \ = primes(a)\n    \n    prime_numbers_product = prod(prime_numbers)\n    \n \
    \   return prime_numbers_product == a\nend\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(10000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(10000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(100000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1000000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(1000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(10000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100000000000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000000000000000)\n\
    \nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5)\
    \ == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105)\
    \ == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\
    \t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1ze3ojka.jl:16\nin expression starting at\
    \ /tmp/tmp1ze3ojka.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    if a < 100\n\
    \        return false\n    \n    primes = prime_numbers(a)\n    \n    for i in\
    \ primes\n        if a % i == 0\n            return false\n    \n    return true\n\
    end\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n\
    <code language=julia-1.5>\n@time is_multiply_prime(100)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns true if the given number is a prime number\
    \ and false otherwise.\nKnowing that (a) is less then 100. \nExample: \nis_prime(30)\
    \ == true\n30 = 2 * 3 * 5\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate =\
    \ is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30) ==\
    \ true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t@test(candidate(125)\
    \ == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126) == false)\n\
    \t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\t@test(candidate(1001)\
    \ == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmporljyr7w.jl:21\nin expression starting at\
    \ /tmp/tmporljyr7w.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    prime_numbers\
    \ = primes(a)\n    \n    prime_numbers_2 = primes(a)\n    \n    prime_numbers_3\
    \ = primes(a)\n    \n    prime_numbers_4 = primes(a)\n    \n    prime_numbers_5\
    \ = primes(a)\n    \n    prime_numbers_6 = primes(a)\n    \n    prime_numbers_7\
    \ = primes(a)\n    \n    prime_numbers_8 = primes(a)\n    \n    prime_numbers_9\
    \ = primes(a)\n    \n    prime_numbers_10 = primes(a)\n    \n    prime_numbers_11\
    \ = primes(a)\n    \n    prime_numbers_12 = primes(a)\n    \n    prime_numbers_13\
    \ = primes(a)\n    \n    prime_numbers_14 = primes(a)\n    \n    prime_numbers_15\
    \ = primes(a)\n    \n    prime_numbers_16 = primes(a)\n    \n    prime_numbers_17\
    \ = primes(a)\n    \n    prime_numbers_18 = primes(a)\n    \n    prime_numbers_19\
    \ = primes(a)\n    \n    prime_numbers_20 = primes(a)\n    \n    prime_numbers_21\
    \ = primes(a)\n    \n    prime_numbers_22 = primes(a)\n    \n    prime_numbers_23\
    \ = primes(a)\n    \n    prime_numbers_24 = primes(a)\n    \n    prime_numbers_25\
    \ = primes(a)\n    \n    prime_numbers_26 = primes(a)\n    \n    prime_numbers_27\
    \ = primes(a)\n    \n    prime_numbers_28 = primes(a)\n    \n    prime_numbers_29\
    \ = primes(a)\n    \n    prime_numbers_30 = primes(a)\n    \n    prime_numbers_31\
    \ = primes(a)\n    \n    prime_numbers_32 = primes(a)\n    \n    prime_numbers_33\
    \ = primes(a)\n    \n    prime_numbers_34 = primes(a)\n    \n    prime_numbers_35\
    \ = primes(a)\n    \n    prime_numbers_36 = primes(a)\n    \n    prime_numbers_37\
    \ = primes(a)\n    \n    prime_numbers_38 = primes(a)\n    \n    prime_numbers_39\
    \ = primes(a)\n    \n    prime_numbers_40 = primes(a)\n    \n    prime_\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5)\
    \ == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105)\
    \ == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\
    \t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmptx7fhuia.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmptx7fhuia.jl:1\n\
    in expression starting at /tmp/tmptx7fhuia.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if a < 100\n   \
    \     true\n    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n\
    </cell>\n<text>\nExercise\nWrite a function that returns true if the given number\
    \ is a prime number and false otherwise.\nKnowing that (a) is less then 100. \n\
    Example: \nis_prime(30) == True\n30 = 2 * 3 * 5\n\"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t\
    @test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\
    \t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891)\
    \ == false)\n\t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwpahnz6x.jl:15\nin expression starting at\
    \ /tmp/tmpwpahnz6x.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp8k0zuhcz.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8k0zuhcz.jl:1\n\
    in expression starting at /tmp/tmp8k0zuhcz.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    prime_numbers\
    \ = primes(100)\n    \n    for i in prime_numbers\n        if a % i == 0\n   \
    \         return false\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns true if the given number\
    \ is a prime number and false otherwise.\nKnowing that (a) is less then 100. \n\
    Example: \nis_prime(30) == True\n30 = 2 * 3 * 5\n\"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t\
    @test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\
    \t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891)\
    \ == false)\n\t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6eu5g2uh.jl:17\nin expression starting at\
    \ /tmp/tmp6eu5g2uh.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if a < 100\n   \
    \     return false\n    else \n        return true\nend\n</cell>\n<code language=julia-1.0>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.0>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.0>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.0>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.0>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.0>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.0>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.0>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.0>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.0>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.0>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.0>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.0>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.0>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.0>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.0>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.0>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.0>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.0>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.0>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.0>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.0>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.0>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.0>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.0>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.0>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.0>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.0>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.0>\nis_multiply_prime(30)\n\
    </cell>\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5)\
    \ == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105)\
    \ == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\
    \t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6c75utbd.jl:14\nin expression starting at\
    \ /tmp/tmp6c75utbd.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    prime_numbers\
    \ = primes(100)\n    \n    prime_numbers_array = [i for i in prime_numbers if\
    \ i < a]\n    \n    for i in prime_numbers_array:\n        if a % i == 0:\n  \
    \          return False\n    return True\nend\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7naf423z.jl:15\nin expression starting at\
    \ /tmp/tmp7naf423z.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    if a < 100\n\
    \        true\n    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    @code_warntype is_multiply_prime(30)\n</cell>\n<code language=julia-1.0>\n@code_warntype\
    \ is_multiply_prime(100)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvsl0aug0.jl:16\nin expression starting at\
    \ /tmp/tmpvsl0aug0.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if a < 100\n   \
    \     true\n    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.3>\nis_multiply_prime(50)\n\
    </cell>\n<code language=julia-1.3>\nis_multiply_prime(100)\n</cell>\n<code language=julia-1.3>\n\
    is_multiply_prime(200)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ true if the given number is a power of 3 and\n    false otherwise.\n    Example:\n\
    \    is_power_of_3(5) == True\n    5 = 2 * 3\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t\
    @test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\
    \t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891)\
    \ == false)\n\t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpofycbn5n.jl:15\nin expression starting at\
    \ /tmp/tmpofycbn5n.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    prime_numbers\
    \ = primes(a)\n    \n    for i in prime_numbers\n        if a % i == 0\n     \
    \       return false\n        end\n    end\n    return true\nend\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(50)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(200)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(300)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(400)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(500)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(600)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(700)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(800)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(900)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1100)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1200)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1300)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1400)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1500)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1600)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1700)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1800)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1900)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(2000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(2100)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(2200)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(2300)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(2400)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(2500\n\
    using Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5)\
    \ == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105)\
    \ == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\
    \t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu91oqbbj.jl:19\nin expression starting at\
    \ /tmp/tmpu91oqbbj.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    prime_numbers\
    \ = primes(100)\n    \n    for n in prime_numbers\n        if a % n == 0\n   \
    \         return false\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<text>\nExercise: Write a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz_dwrxeh.jl:17\nin expression starting at\
    \ /tmp/tmpz_dwrxeh.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if a < 100\n   \
    \     true\n    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5)\
    \ == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105)\
    \ == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\
    \t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt1jtgg7z.jl:15\nin expression starting at\
    \ /tmp/tmpt1jtgg7z.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if a < 100\n   \
    \     false\n    else\n        true\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert is_multiply_prime(30) == true\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns true if the given number is a prime number and false otherwise.\n\
    \    \n    Example:\n    is_prime(30) == true\n    30 = 3 * 7 * 11 * 13 * 17 *\
    \ 19\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\
    \t@test(candidate(5) == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\
    \t@test(candidate(105) == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729)\
    \ == false)\n\t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp608iadjt.jl:15\nin expression starting at\
    \ /tmp/tmp608iadjt.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpcys__z6_.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpcys__z6_.jl:1\n\
    in expression starting at /tmp/tmpcys__z6_.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    prime_numbers\
    \ = primes(a)\n    \n    for num in prime_numbers:\n        if num > a:\n    \
    \        break\n        if a % num == 0:\n            return False\n    return\
    \ True\nend\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns true if the given number\
    \ is a perfect power of 2 and false otherwise.\nExample:\nis_perfect_power(2)\
    \ == True\nis_perfect_power(3) == False\nis_perfect_power(5) == True\nis_perfect_power(10)\
    \ == True\nis_perfect_power(15) == False\nis_perfect_power(20) == True\nis_perfect_power(25)\
    \ == False\nis_perfect_power(30) == True\nis_perfect_power(35) == False\nis_perfect_power(40)\
    \ == True\nis_perfect_power(45) == False\nis_perfect_power(50) == True\nis_perfect_power(55)\
    \ == False\nis_perfect_power(60) == True\nis_perfect_power(65) == False\nis_perfect_power(70)\
    \ == True\nis_perfect_power(75) == False\nis_perfect_power(80) == True\nis_perfect_power(85)\
    \ == False\nis_perfect_power(90) == True\nis_perfect_power(95) == False\nis_perfect_power(100)\
    \ == True\nis_perfect_power(105) == False\nis_perfect_power(110) == True\nis_perfect_power(115)\
    \ == False\nis_perfect_power(120) == True\nis_perfect_power(125) == False\nis_perfect_power(130)\
    \ == True\nis_perfect_power(135) == False\nis_perfect_power(140) == True\nis_perfect_power(145)\
    \ == False\nis_perfect_power(150) == True\nis_perfect_power(155) == False\nis_perfect_power(160)\
    \ == True\nis_perfect_power(165) == False\nis_perfect_power(170) == True\nis_perfect_power(175)\
    \ == False\nis_perfect_power(180) == True\nis_perfect_power(185) == False\nis_perfect_power(190)\
    \ == True\nis_perfect_power(195) == False\nis_perfect_power(200) == True\nis_perfect_power(205)\
    \ == False\nis_perfect_power(210) == True\nis_perfect_power(215) == False\nis_perfect_power(220)\
    \ == True\nis_perfect_power(225) == False\nis_perfect_power(230) == True\nis_perfect_power(235)\
    \ == False\nis_perfect_power(240) == True\nis_perfect_power(245) == False\nis_perfect_power(250)\
    \ == True\nis_perfect_power(255) == False\n\nusing Test\n\n@testset begin\n\n\
    candidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjo8ywvvv.jl:13\nin expression starting at\
    \ /tmp/tmpjo8ywvvv.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp9v9jt1lg.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9v9jt1lg.jl:1\n\
    in expression starting at /tmp/tmp9v9jt1lg.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp5_y5jm7d.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp5_y5jm7d.jl:1\n\
    in expression starting at /tmp/tmp5_y5jm7d.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if a < 100\n   \
    \     true\n    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ is_multiply_prime(100)\n</cell>\n<code language=julia-1.5>\n@code_warntype is_multiply_prime(200)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype is_multiply_prime(300)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype is_multiply_prime(400)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype is_multiply_prime(500)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype is_multiply_prime(600)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ is_multiply_prime(700)\n</cell>\n<code language=julia-1.5>\n@code_warntype is_multiply_prime(800)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype is_multiply_prime(900)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype is_multiply_prime(1000)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype is_multiply_prime(1100)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype is_multiply_prime(1200)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype is_multiply_prime(1300)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype is_multiply_prime(1400)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype is_multiply_prime(1500)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype is_multiply_prime(1600)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype is_multiply_prime(1700)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype is_multiply_prime(1800)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype is_multiply_prime(1900)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype is_multiply_prime(2000)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype is_multiply_prime(2100)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype is_multiply_prime\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t\
    @test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\
    \t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891)\
    \ == false)\n\t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyvj__jf8.jl:15\nin expression starting at\
    \ /tmp/tmpyvj__jf8.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if is_multiply_prime_helper(a,\
    \ 3, 100) == true\n    else false\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpcukd7xke.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpcukd7xke.jl:1\n\
    in expression starting at /tmp/tmpcukd7xke.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpp8_up7nb.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpp8_up7nb.jl:1\n\
    in expression starting at /tmp/tmpp8_up7nb.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpmme01a05.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmme01a05.jl:1\n\
    in expression starting at /tmp/tmpmme01a05.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if a < 100\n   \
    \     false\n    else\n        true\n    end\nend\n</cell>\n<code language=julia-1.1>\n\
    @assert is_multiply_prime(30) == true\n@assert is_multiply_prime(31) == false\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns true if the given number\
    \ is a prime number and false otherwise.\n    \n    \n    Example:\n    is_prime(30)\
    \ == true\n    30 = 2 * 3 * 5\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplsfxv5ju.jl:15\nin expression starting at\
    \ /tmp/tmplsfxv5ju.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmph877pn8o.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmph877pn8o.jl:1\n\
    in expression starting at /tmp/tmph877pn8o.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    if a < 100\n\
    \        return false\n    \n    primes = prime_numbers(a)\n    \n    for p in\
    \ primes\n        if p > 100\n            return false\n        \n        if p\
    \ == a % p\n            return false\n    \n    return true\nend\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns true if the given number is a prime number or false\
    \ otherwise.\n    \n    Example:\n    is_prime(30) == true\n    30 = 3 * 7 * 11\
    \ * 13 * 17 * 19\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\
    \t@test(candidate(5) == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\
    \t@test(candidate(105) == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729)\
    \ == false)\n\t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpowz3p0ar.jl:24\nin expression starting at\
    \ /tmp/tmpowz3p0ar.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpcy1eud8i.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpcy1eud8i.jl:1\n\
    in expression starting at /tmp/tmpcy1eud8i.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    prime_numbers\
    \ = primes(a)\n    \n    \n    for i in prime_numbers\n        if a % i == 0\n\
    \            return false\n        end\n    end\n    return true\nend\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(100000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(1000000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(10000000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(10000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(100000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1000000000000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000000000000000)\n\
    </\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5)\
    \ == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105)\
    \ == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\
    \t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpud7hrajm.jl:20\nin expression starting at\
    \ /tmp/tmpud7hrajm.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpncjk33k9.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpncjk33k9.jl:1\n\
    in expression starting at /tmp/tmpncjk33k9.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if a < 100\n   \
    \     return true\n    else \n        return false\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert is_multiply_prime(30) == true\n@assert is_multiply_prime(30) == false\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns true if the given number\
    \ is a prime number and false otherwise.\nKnowing that (a) is less then 100.\n\
    Example: \nis_prime(30) == true\n30 = 2 * 3 * 5\n\"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t\
    @test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\
    \t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891)\
    \ == false)\n\t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpklpelhgt.jl:14\nin expression starting at\
    \ /tmp/tmpklpelhgt.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if a < 100\n   \
    \     true\n    else\n        false\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3ouplit9.jl:20\n  Expression: candidate(5)\
    \ == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3ouplit9.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3ouplit9.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp3ouplit9.jl:23\n  Expression: candidate(10) == false\n   Evaluated:\
    \ true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3ouplit9.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3ouplit9.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp3ouplit9.jl:24\n  Expression: candidate(125) == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3ouplit9.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3ouplit9.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp3ouplit9.jl:25\n  Expression: candidate(105) == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3ouplit9.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3ouplit9.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp3ouplit9.jl:29\n  Expression: candidate(1001) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] m"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3ouplit9.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    if a < 100\n\
    \        return false\n    \n    prime_numbers = primes(a)\n    \n    for p in\
    \ prime_numbers\n        if p > 2\n            return false\n    \n    return\
    \ true\nend\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(100)\n</cell>\n<text>\nExercise\n\
    Write a function that returns true if the given number is the multiplication of\
    \ 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t\
    @test(candidate(5) == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\
    \t@test(candidate(105) == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729)\
    \ == false)\n\t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_j0_8xxy.jl:21\nin expression starting at\
    \ /tmp/tmp_j0_8xxy.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpmdrgldaw.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmdrgldaw.jl:1\n\
    in expression starting at /tmp/tmpmdrgldaw.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    prime_numbers\
    \ = primes(100)\n    \n    for p in prime_numbers\n        if a % p == 0\n   \
    \         return false\n        end\n    end\n    return true\nend\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t\
    @test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\
    \t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891)\
    \ == false)\n\t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxitgt04k.jl:19\nin expression starting at\
    \ /tmp/tmpxitgt04k.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpdxogmod3.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpdxogmod3.jl:1\n\
    in expression starting at /tmp/tmpdxogmod3.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if a < 100\n   \
    \     return false\n    \n    primes = prime_numbers(a)\n    \n    for p in primes\n\
    \        if p*p > a\n            return false\n        end\n    end\n    \n  \
    \  return true\nend\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(200)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(300)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(400)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(500)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(600)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(700)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(800)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(900)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1100)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1200)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1300)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1400)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1500)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1600)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1700)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1800)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1900)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(2100)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(2200)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(2300)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(2400)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(2500)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(2600)\n</cell>\n\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5)\
    \ == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105)\
    \ == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\
    \t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp26js8mx8.jl:22\nin expression starting at\
    \ /tmp/tmp26js8mx8.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    if a < 100\n\
    \        return false\n    \n    prime_numbers = primes(a)\n    \n    for prime\
    \ in prime_numbers\n        if a % prime == 0\n            return false\n    \n\
    \    return true\nend\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(100)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(1000)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(10000)\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(100000)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(1000000)\n</cell>\n\
    <code language=julia-1.5>\n@time is_multiply_prime(10000000)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(100000000)\n</cell>\n<code language=julia-1.5>\n@time\
    \ is_multiply_prime(1000000000)\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(10000000000)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(100000000000)\n</cell>\n\
    <code language=julia-1.5>\n@time is_multiply_prime(1000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(1000000000001)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(1000000000002)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(1000000000003)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(1000000000004)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(1000000000005)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(1000000000006)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(1000000000007)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(1000000000008)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(1000000000009)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(1000000000010)\n</cell>\n\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5)\
    \ == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105)\
    \ == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\
    \t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_p60thv4.jl:21\nin expression starting at\
    \ /tmp/tmp_p60thv4.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    primes = prime_numbers(a)\n\
    \    \n    for i in primes\n        if a % i == 0\n            return false\n\
    \    return true\nend\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing\
    \ that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n\
    \    30 = 2 * 3 * 5\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\
    \t@test(candidate(5) == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\
    \t@test(candidate(105) == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729)\
    \ == false)\n\t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5de4zwd4.jl:17\nin expression starting at\
    \ /tmp/tmp5de4zwd4.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp82jpav52.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp82jpav52.jl:1\n\
    in expression starting at /tmp/tmp82jpav52.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if a < 100\n   \
    \     return true\n    \n    primes = prime_numbers(a)\n    \n    for p in primes\n\
    \        if p * p > a\n            return false\n        end\n    end\n    return\
    \ true\nend\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns true if the given number\
    \ is a prime and false otherwise.\nKnowing that (a) is less then 100. \nExample:\
    \ \nis_prime(30) == True\n30 = 2 * 3 * 5\n\"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6g7gbrc2.jl:21\nin expression starting at\
    \ /tmp/tmp6g7gbrc2.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpl5i4xbph.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpl5i4xbph.jl:1\n\
    in expression starting at /tmp/tmpl5i4xbph.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if a < 100\n   \
    \     true\n    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    @assert is_multiply_prime(30) == true\n@assert is_multiply_prime(31) == false\n\
    @assert is_multiply_prime(33) == false\n@assert is_multiply_prime(101) == false\n\
    @assert is_multiply_prime(101) == false\n@assert is_multiply_prime(101) == false\n\
    @assert is_multiply_prime(101) == false\n@assert is_multiply_prime(101) == false\n\
    @assert is_multiply_prime(101) == false\n@assert is_multiply_prime(101) == false\n\
    @assert is_multiply_prime(101) == false\n@assert is_multiply_prime(101) == false\n\
    @assert is_multiply_prime(101) == false\n@assert is_multiply_prime(101) == false\n\
    @assert is_multiply_prime(101) == false\n@assert is_multiply_prime(101) == false\n\
    @assert is_multiply_prime(101) == false\n@assert is_multiply_prime(101) == false\n\
    @assert is_multiply_prime(101) == false\n@assert is_multiply_prime(101) == false\n\
    @assert is_multiply_prime(101) == false\n@assert is_multiply_prime(101) == false\n\
    @assert is_multiply_prime(101) == false\n@assert is_multiply_prime(101) == false\n\
    @assert is_multiply_prime(101) == false\n@assert is_multiply_prime(101) == false\n\
    @assert is_multiply_prime(101) == false\n@assert is_multiply_prime(101) == false\n\
    @assert is_multiply_prime(101) == false\n@assert is_multiply_prime(101) == false\n\
    @assert is_multiply_prime(101) == false\n@assert is_multiply_prime(101) == false\n\
    @assert is_multiply_prime(101) == false\n@assert is_multiply_prime(101) == false\n\
    @assert is_multiply_prime(101) == false\n@assert is_multiply_prime(101) == false\n\
    @assert is_multiply_prime(101) == false\n@assert is_multiply_prime(101) == false\n\
    @assert is_multiply_prime(101) == false\n@assert is_multiply_prime(101) == false\n\
    @assert is_multiply_prime(101) == false\n@assert is_multiply_prime(101) == false\n\
    @assert is_multiply_prime(101) == false\n@assert is_multiply_prime(101) == false\n\
    @\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5)\
    \ == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105)\
    \ == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\
    \t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkallikk5.jl:15\nin expression starting at\
    \ /tmp/tmpkallikk5.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    if a < 100\n\
    \        return false\n    \n    primes = prime_numbers(a)\n    \n    for i in\
    \ primes\n        if i == 2\n            continue\n        \n        for j in\
    \ primes\n            if j == 2\n                continue\n            \n    \
    \        if i % j == 0\n                return false\n            \n    return\
    \ true\nend\n</cell>\n<code language=julia-1.5>\n@assert is_multiply_prime(30)\
    \ == true\n@assert is_multiply_prime(31) == false\n@assert is_multiply_prime(100)\
    \ == false\n@assert is_multiply_prime(101) == true\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns true if the given number is a perfect square,\
    \ false otherwise.\nExample: \n    25 is a perfect square\n    25 = 9 + 25\n \
    \   25 = 25 + 25\n    25 = 25 + 25 + 25\n    25 = 25 + 25 + 25 + 25\n    25 =\
    \ 25 + 25 + 25 + 25 + 25\n    25 = 25 + 25 + 25 + 25 + 25 + 25\n    25 = 25 +\
    \ 25 + 25 + 25 + 25 + 25 + 25\n    25 = 25 + 25 + 25 + 25 + 25 + 25 + 25 + 25\n\
    \    25 = 25 + 25 + 25 + 25 + 25 + 25 + 25 + 25 + 25\n    25 = 25 + 25 + 25 +\
    \ 25 + 25 + 25 + 25 + 25 + 25 + 25\n    25 = 25 + 25 + 25 + 25 + 25 + 25 + 25\
    \ + 25 + 25 + 25 + 25\n    25 = 25 + 25 + 25 + 25 + 25 + 25 + 25 + 25 + 25 + 25\
    \ + 25 + 25\n    25 = 25 + 25 + 25 + 25 + 25 + 25 + 25 + 25 + 25 + 25 + 25 + 25\
    \ + 25\n    25 = 25 + 25 + 25 + 25 + 25 + 25 + 25 + 25 + 25 + 25 + 25 + 25 + 25\
    \ + 25 + 25\n    25 = 25 + 25 + 25 + 25 + 25 + 25 + 25 + 25 + 25 + 25 + 25 + 25\
    \ + 25 + 25 + 25 + 25\n    25 = 25 + 25 + 25 + 25 + 25 + 25 + 25 + 25 + 25 + 25\
    \ + 25 + 25 + 25 + 25 + 25 + 25 + 25\n    25 = 25 + 25 + 25 + 25 + 25 + 25 + 25\
    \ + 25 + 25 + 25 + 25 + 25 + 25 + 25 + 25\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkgi8a603.jl:28\nin expression starting at\
    \ /tmp/tmpkgi8a603.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    if a < 100\n\
    \        return false\n    \n    primes = prime_numbers(a)\n    \n    for p in\
    \ primes\n        if p == 3 || p == 5\n            return true\n        \n   \
    \ return false\nend\n</cell>\n<code language=julia-1.4>\n@time is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.4>\n@time is_multiply_prime(100)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns true if the given number is a power\
    \ of 3 prime and false otherwise.\nKnowing that (a) is less then 100. \nExample:\
    \ \nis_power_of_3_prime(30) == True\n30 = 2 * 3 * 5\n\"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t\
    @test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\
    \t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891)\
    \ == false)\n\t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6i8svqc6.jl:21\nin expression starting at\
    \ /tmp/tmp6i8svqc6.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmplgvzho9p.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmplgvzho9p.jl:1\n\
    in expression starting at /tmp/tmplgvzho9p.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    prime_numbers\
    \ = primes(100)\n    \n    for p in prime_numbers\n        if p*p*p == a\n   \
    \         return true\n        end\n    end\n    return false\nend\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(100000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(1000000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(10000000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(10000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(100000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1000000000000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(10000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(100000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(100000000000000000000\nusing Test\n\
    \n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\
    \t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\
    \t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891)\
    \ == false)\n\t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp58z3zdea.jl:19\nin expression starting at\
    \ /tmp/tmp58z3zdea.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    if a < 100\n\
    \        return false\n    \n    prime_numbers = primes(a)\n    \n    for n in\
    \ prime_numbers\n        if n % 3 == 0\n            return false\n    \n    return\
    \ true\nend\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(100)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(1000)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(10000)\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(100000)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(1000000)\n</cell>\n\
    <code language=julia-1.5>\n@time is_multiply_prime(10000000)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(100000000)\n</cell>\n<code language=julia-1.5>\n@time\
    \ is_multiply_prime(1000000000)\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(10000000000)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(100000000000)\n</cell>\n\
    <code language=julia-1.5>\n@time is_multiply_prime(1000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(10000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(100000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(1000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(10000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(100000000000000000)\n</cell>\n\
    <code language=julia-1.5>\n@time is_multiply_prime(1000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\n@time is_multiply_prime(10000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\n@time is_multiply_prime(100000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\n@time is_multiply_prime(1000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\n@time is_multiply_prime(10000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\n@\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5cga_0j1.jl:21\nin expression starting at\
    \ /tmp/tmp5cga_0j1.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp3m3kmb85.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3m3kmb85.jl:1\n\
    in expression starting at /tmp/tmp3m3kmb85.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if a < 100\n   \
    \     return false\n    \n    primes = prime_numbers(a)\n    \n    for p in primes\n\
    \        if p > 100\n            return false\n        \n        if p == a % p\n\
    \            return false\n        \n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(100)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns true if the given number\
    \ is a prime number and false otherwise.\nKnowing that (a) is less then 100. \n\
    Example: \nis_prime(30) == True\n30 = 2 * 3 * 5\n\"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t\
    @test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\
    \t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891)\
    \ == false)\n\t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbe9suulu.jl:23\nin expression starting at\
    \ /tmp/tmpbe9suulu.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if a < 100\n   \
    \     true\n    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(50)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(200)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(300)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(400)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(500)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(600)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(700)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(800)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(900)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1100)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1200)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1300)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1400)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1500)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1600)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1700)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1800)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1900)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(2100)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(2200)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(2300)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(2400)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(2500)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(2600)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(2700)\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\
    \t@test(candidate(5) == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\
    \t@test(candidate(105) == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729)\
    \ == false)\n\t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpepswwb8e.jl:15\nin expression starting at\
    \ /tmp/tmpepswwb8e.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    if a < 100\n\
    \        return false\n    \n    primes = prime_numbers(a)\n    \n    for p in\
    \ primes\n        if p * 3 == a\n            return true\n        end\n    end\n\
    \    \n    return false\nend\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(100)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t\
    @test(candidate(5) == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\
    \t@test(candidate(105) == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729)\
    \ == false)\n\t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpscog9myo.jl:23\nin expression starting at\
    \ /tmp/tmpscog9myo.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    primes = [2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97]\n    \n    for i in primes\n        if a % i == 0\n        \
    \    return false\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(10000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(10000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(100000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1000000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(1000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(10000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100000000000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000000000000)\n\
    using Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5)\
    \ == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105)\
    \ == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\
    \t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpviiih9zc.jl:18\nin expression starting at\
    \ /tmp/tmpviiih9zc.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    prime_numbers\
    \ = primes(100)\n    \n    for p in prime_numbers\n        if a % p == 0\n   \
    \         return false\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert is_multiply_prime(30) == true\n@assert is_multiply_prime(31) == false\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns true if the given number\
    \ is a power of 3 prime and false otherwise.\nKnowing that (a) is less then 100.\
    \ \nExample: \nis_power_of_3_prime(30) == true\n30 = 2 * 3 * 5\n\"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5)\
    \ == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105)\
    \ == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\
    \t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuv3qod1z.jl:18\nin expression starting at\
    \ /tmp/tmpuv3qod1z.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7osin6hb.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7osin6hb.jl:1\n\
    in expression starting at /tmp/tmp7osin6hb.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if a < 100\n   \
    \     return true\n    else \n        primes = prime_numbers(a)\n        prime_3\
    \ = primes[3]\n        prime_5 = primes[5]\n        prime_7 = primes[7]\n    \
    \    prime_11 = primes[11]\n        prime_13 = primes[13]\n        prime_17 =\
    \ primes[17]\n        prime_19 = primes[19]\n        prime_31 = primes[31]\n \
    \       prime_33 = primes[33]\n        prime_37 = primes[37]\n        prime_39\
    \ = primes[39]\n        prime_71 = primes[71]\n        prime_73 = primes[73]\n\
    \        prime_79 = primes[79]\n        prime_83 = primes[83]\n        prime_89\
    \ = primes[89]\n        prime_97 = primes[97]\n        prime_101 = primes[101]\n\
    \        prime_103 = primes[103]\n        prime_107 = primes[107]\n        prime_109\
    \ = primes[109]\n        prime_113 = primes[113]\n        prime_121 = primes[121]\n\
    \        prime_123 = primes[123]\n        prime_127 = primes[127]\n        prime_131\
    \ = primes[131]\n        prime_137 = primes[137]\n        prime_139 = primes[139]\n\
    \        prime_149 = primes[149]\n        prime_151 = primes[151]\n        prime_157\
    \ = primes[157]\n        prime_159 = primes[159]\n        prime_163 = primes[163]\n\
    \        prime_167 = primes[167]\n        prime_173 = primes[173]\n        prime_175\
    \ = primes[175]\n        prime_177 = primes[177]\n        prime_179 = primes[179]\n\
    \        prime_181 = primes[181]\n        prime_191 = primes[191]\n        prime_193\
    \ = primes[193]\n        prime_195 = primes[195]\n        prime_197 = primes[197]\n\
    \        prime_199 = primes[199]\n        prime_201 = primes[201]\n        prime_203\
    \ = primes[203]\n        prime_205 = primes[205]\n        prime_207 = primes[207]\n\
    \        prime_209 = primes[209]\n        prime_211 = primes[211]\n        prime\n\
    using Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5)\
    \ == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105)\
    \ == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\
    \t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmp7971htw8.jl:9 requires\
    \ end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7971htw8.jl:1\nin expression\
    \ starting at /tmp/tmp7971htw8.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if a < 100\n   \
    \     true\n    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(50)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(200)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(300)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(400)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(500)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(600)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(700)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(800)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(900)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1200)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1400)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1600)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1800)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(2000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(2200)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(2400)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(2600)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(2800)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(3000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(3200)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(3400)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(3600)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(3800)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(4000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(4200)\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\
    \t@test(candidate(5) == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\
    \t@test(candidate(105) == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729)\
    \ == false)\n\t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpulfg5o9j.jl:15\nin expression starting at\
    \ /tmp/tmpulfg5o9j.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    if a < 100\n\
    \        return false\n    \n    primes = primes_list(100)\n    \n    for i in\
    \ primes\n        if a % i == 0\n            return false\n    \n    return true\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert is_multiply_prime(30) == true\n\
    @assert is_multiply_prime(31) == false\n@assert is_multiply_prime(32) == false\n\
    @assert is_multiply_prime(33) == false\n@assert is_multiply_prime(34) == false\n\
    @assert is_multiply_prime(35) == false\n@assert is_multiply_prime(36) == false\n\
    @assert is_multiply_prime(37) == false\n@assert is_multiply_prime(38) == false\n\
    @assert is_multiply_prime(39) == false\n@assert is_multiply_prime(40) == false\n\
    @assert is_multiply_prime(41) == false\n@assert is_multiply_prime(42) == false\n\
    @assert is_multiply_prime(43) == false\n@assert is_multiply_prime(44) == false\n\
    @assert is_multiply_prime(45) == false\n@assert is_multiply_prime(46) == false\n\
    @assert is_multiply_prime(47) == false\n@assert is_multiply_prime(48) == false\n\
    @assert is_multiply_prime(49) == false\n@assert is_multiply_prime(50) == false\n\
    @assert is_multiply_prime(51) == false\n@assert is_multiply_prime(52) == false\n\
    @assert is_multiply_prime(53) == false\n@assert is_multiply_prime(54) == false\n\
    @assert is_multiply_prime(55) == false\n@assert is_multiply_prime(56) == false\n\
    @assert is_multiply_prime(57) == false\n@assert is_multiply_prime(58) == false\n\
    @assert is_multiply_prime(59) == false\n@assert is_multiply_prime(60) == false\n\
    @assert is_multiply_prime(61) == false\n@assert is_multiply_prime(62) == false\n\
    @assert is_multiply_prime(63) == false\n@assert is_multiply_prime(64) == false\n\
    @assert is_multiply_prime(65) == false\n@assert is_multiply_prime(66) == false\n\
    @assert is_multiply_prime(67) == false\n@assert is_multiply_prime(68) == false\n\
    @assert is_multiply_prime(69) == false\n@assert is_multiply_prime(70) == false\n\
    @assert is_multiply_prime(71) == \nusing Test\n\n@testset begin\n\ncandidate =\
    \ is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30) ==\
    \ true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t@test(candidate(125)\
    \ == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126) == false)\n\
    \t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\t@test(candidate(1001)\
    \ == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9vvfgghn.jl:21\nin expression starting at\
    \ /tmp/tmp9vvfgghn.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if a < 100\n   \
    \     true\n    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4k1xjzm1.jl:15\nin expression starting at\
    \ /tmp/tmp4k1xjzm1.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    if a < 100\n\
    \        true\n    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert @is_multiply_prime(30) == true\n@assert @is_multiply_prime(31) == false\n\
    @assert @is_multiply_prime(100) == false\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t\
    @test(candidate(5) == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\
    \t@test(candidate(105) == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729)\
    \ == false)\n\t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp91ofhvcm.jl:16\nin expression starting at\
    \ /tmp/tmp91ofhvcm.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    prime_numbers\
    \ = prime_numbers(a)\n    \n    for p in prime_numbers\n        if p*p > a\n \
    \           return false\n        end\n    end\n    return true\nend\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(200)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(300)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(400)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(500)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(600)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(700)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(800)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(900)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1100)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1200)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1300)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1400)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1500)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1600)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1700)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1800)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1900)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(2000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(2100)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(2200)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(2300)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(2400)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(2500)\n</cell>\n<code language=julia-1.5>\nis_\nusing Test\n\
    \n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\
    \t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\
    \t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891)\
    \ == false)\n\t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxnkj9jt5.jl:19\nin expression starting at\
    \ /tmp/tmpxnkj9jt5.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if a < 100\n   \
    \     true\n    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsrv2p8ox.jl:15\nin expression starting at\
    \ /tmp/tmpsrv2p8ox.jl:15\n"
  exit_code: 1
  status: SyntaxError
