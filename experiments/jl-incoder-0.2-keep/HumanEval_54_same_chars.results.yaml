name: HumanEval_54_same_chars
language: julia
results:
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars(s0, s1) = length(s0)\
    \ == length(s1) && all(char(s0[i]) == char(s1[i]) for i in 1:length(s0))\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = same_chars;\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\
    \t@test(candidate(\"abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\"\
    , \"abcd\") == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\
    \t@test(candidate(\"abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\") == false)\n\t@test(candidate(\"aabb\", \"aaccc\") ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk5w8hkqa.jl:19\nin expression starting at\
    \ /tmp/tmpk5w8hkqa.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    \n    \"\"\"\n    Check\
    \ if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    \n    if s0 == s1:\n      \
    \  return True\n    \n    len0 = length(s0)\n    len1 = length(s1)\n    \n   \
    \ if len0 != len1:\n        return False\n    \n    i = 0\n    while i < len0:\n\
    \        if s0[i] != s1[i]:\n            return False\n        i += 1\n    \n\
    \    return True\n    \n    \n\"\"\"\n    Check if two words have the same characters.\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd',\
    \ 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n\
    \    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd',\
    \ 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n\
    \    False\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = same_chars;\n\
    \t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"\
    abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\")\
    \ == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"\
    abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9311849k.jl:35\nin expression starting at\
    \ /tmp/tmp9311849k.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars = true\n  \
    \  for c in s0:\n        if c not in s1:\n            same_chars = false\n   \
    \         break\n    return same_chars\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9znwwh11.jl:19\nin expression starting at\
    \ /tmp/tmp9znwwh11.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars = true\n  \
    \  for c in s0:\n        if c not in s1:\n            same_chars = false\n   \
    \         break\n    return same_chars\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\nI wrote a function that checks if two strings are anagrams of each other:\n\
    <code>\nusing Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0dbopktg.jl:19\nin expression starting at\
    \ /tmp/tmp0dbopktg.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    \n    same_chars = true\n\
    \    \n    for c in s0:\n        if c not in s1:\n            same_chars = false\n\
    \            break\n    \n    return same_chars\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2xb72nri.jl:21\nin expression starting at\
    \ /tmp/tmp2xb72nri.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    \n    if s0 == s1 \n \
    \       then return true\n    else \n        same_chars(s0, s1) || same_chars(s1,\
    \ s0)\n    end\nend\n</cell>\n<code language=julia-1.3>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"\
    dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\t@test(candidate(\"aabb\", \"\
    aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpqrzuz_91.jl:19\nin expression starting at /tmp/tmpqrzuz_91.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars(s0, s1) = length(s0)\
    \ == length(s1) && all(char(c) == char(c0) for (c, c0) in zip(s0, s1))\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a string and returns\
    \ the number of characters in the string.\nTest your function with different inputs.\n\
    Use assert to test your function.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ same_chars;\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\
    \t@test(candidate(\"abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\"\
    , \"abcd\") == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\
    \t@test(candidate(\"abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\") == false)\n\t@test(candidate(\"aabb\", \"aaccc\") ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuocy1ffa.jl:19\nin expression starting at\
    \ /tmp/tmpuocy1ffa.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    len0 = length(s0)\n  \
    \  len1 = length(s1)\n    if len0 != len1\n        return false\n    else\n  \
    \      len0 = length(s0)\n        for i::Int in 0..len0\n            if s0[i]\
    \ != s1[i]\n                return false\n            else\n        end\n    \
    \    return true\n    end\nend\n\"\"\"\n    Check if two words have the same characters.\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd',\
    \ 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n\
    \    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd',\
    \ 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n\
    \    False\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = same_chars;\n\
    \t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"\
    abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\")\
    \ == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"\
    abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpp3eqb894.jl:16\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpp3eqb894.jl:1\n\
    in expression starting at /tmp/tmpp3eqb894.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    len0 = length(s0)\n  \
    \  len1 = length(s1)\n    if len0 != len1\n        false\n    else\n        chars0::Char\
    \ = s0 \n        chars1::Char = s1\n        len0::Int = length(chars0)\n     \
    \   len1::Int = length(chars1)\n        for i in 0..len0\n            if chars0[i]\
    \ != chars1[i]\n                false\n            else\n                true\n\
    \        end\n    end\nend\n</cell>\n<code language=julia-1.1>\n\"\"\"\n    Check\
    \ if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"\
    dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\t@test(candidate(\"aabb\", \"\
    aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdzubzti4.jl:34\nin expression starting at\
    \ /tmp/tmpdzubzti4.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars(s0, s1) ||\
    \ same_chars(s1, s0)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n\
    @testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\", \"\
    dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\") ==\
    \ true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"\
    eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\
    \t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmbs3_yxt.jl:19\nin expression starting at\
    \ /tmp/tmpmbs3_yxt.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    \n    same_chars = true\n\
    \    \n    for c in s0:\n        if c not in s1:\n            same_chars = false\n\
    \            break\n    \n    return same_chars\nend\n</cell>\n<code language=julia-1.4>\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpea71uls4.jl:21\nin expression starting at\
    \ /tmp/tmpea71uls4.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars(s0, s1) = length(s0)\
    \ == length(s1) && all(char(s0[i]) == char(s1[i]) for i in 1:length(s0))\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    Check if two words have the same\
    \ characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n\
    \    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"\
    dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\t@test(candidate(\"aabb\", \"\
    aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2f7fug4r.jl:19\nin expression starting at\
    \ /tmp/tmp2f7fug4r.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars = false\n \
    \   for c in s0:\n        if c not in s1:\n            same_chars = false\n  \
    \          break\n        same_chars = true\n        break\n    return same_chars\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = same_chars;\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\
    \t@test(candidate(\"abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\"\
    , \"abcd\") == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\
    \t@test(candidate(\"abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\") == false)\n\t@test(candidate(\"aabb\", \"aaccc\") ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpiu7owlaa.jl:19\nin expression starting at\
    \ /tmp/tmpiu7owlaa.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars = true\n  \
    \  for c in s0:\n        if c not in s1:\n            same_chars = false\n   \
    \         break\n    return same_chars\n</code>\n<|/ a tags=string,julia |>\n\
    <| c |>\nThis is not the most efficient solution. `setdiff` will iterate over\
    \ the entire string for each character in `s1`, whereas `same_chars` will stop\
    \ iterating as soon as it finds a mismatch.\n<|/ c |>\n<| c |>\nI agree, `setdiff`\
    \ will iterate over the entire string for each character in `s1`, whereas `same_chars`\
    \ will stop iterating as soon as it finds a mismatch. However, the `same_chars`\
    \ solution will also stop iterating as soon as it finds a mismatch, whereas the\
    \ `setdiff` solution will iterate over the entire string for each character in\
    \ `s1`. So the efficiency is similar.\n<|/ c |>\n<| c |>\nI agree that `setdiff`\
    \ will stop iterating as soon as it finds a mismatch, but `same_chars` will also\
    \ stop iterating as soon as it finds a mismatch. `setdiff` will iterate over the\
    \ entire string for each character in `s1`, whereas `same_chars` will stop iterating\
    \ as soon as it finds a mismatch. However, the `same_chars` solution will also\
    \ stop iterating as soon as it finds a mismatch, whereas the `setdiff` solution\
    \ will iterate over the entire string for each character in `s1`. So the efficiency\
    \ is similar.\n<|/ c |>\n<| c |>\nI agree that `setdiff` will stop iterating as\
    \ soon as it finds a mismatch, but `same_chars` will also stop iterating as soon\
    \ as it finds a mismatch. `setdiff` will iterate over the entire string for each\
    \ character in `s1`, whereas `same_chars` will stop iterating as soon as it finds\
    \ a mismatch. However, the `same_chars` solution will also stop iterating as soon\
    \ as it finds a mismatch, whereas the `setdiff` solution will iterate over the\
    \ entire string for each character in `s1`. So the efficiency is similar.\n<|/\
    \ c |>\n<| c |>\nI agree that `setdiff` will stop iterating as soon as it finds\
    \ a mismatch, but `same_chars` will also stop iterating as soon as it finds a\
    \ mismatch. `setdiff` will iterate over the entire string for each character in\
    \ `s1`, whereas `same_chars` will stop iterating as soon as it finds a mismatch.\
    \ However, the `same_chars` solution will also stop iterating as soon as it finds\
    \ a mismatch, whereas the `set\nusing Test\n\n@testset begin\n\ncandidate = same_chars;\n\
    \t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"\
    abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\")\
    \ == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"\
    abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbqwsl1r1.jl:19\nin expression starting at\
    \ /tmp/tmpbqwsl1r1.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars = true\n  \
    \  for c in s0:\n        if c not in s1:\n            same_chars = false\n   \
    \         break\n    return same_chars\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgh40poy2.jl:19\nin expression starting at\
    \ /tmp/tmpgh40poy2.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if s0 == s1 then return\
    \ true else return false end\n    \n    if length(s0) != length(s1) then return\
    \ false end\n    \n    for c in s0:\n        if c != s1[1] then return false end\n\
    \    end\n    \n    return true\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that checks if a word is a palindrome.\nA palindrome is a word, phrase or sentence\
    \ that reads the same backward as forward.\nFor example \"racecar\" is a palindrome\
    \ and \"racecars\" is not a palindrome.\nWrite a function that checks if a word\
    \ is a palindrome.\nA palindrome is a word, phrase or sentence that reads the\
    \ same backward as forward.\nFor example \"racecar\" is a palindrome and \"racecars\"\
    \ is not a palindrome.\nWrite a function that checks if a word is a palindrome.\n\
    A palindrome is a word, phrase or sentence that reads the same backward as forward.\n\
    For example \"racecar\" is a palindrome and \"racecars\" is not a palindrome.\n\
    Write a function that checks if a word is a palindrome.\nA palindrome is a word,\
    \ phrase or sentence that reads the same backward as forward.\nFor example \"\
    racecar\" is a palindrome and \"racecars\" is not a palindrome.\nWrite a function\
    \ that checks if a word is a palindrome.\nA palindrome is a word, phrase or sentence\
    \ that reads the same backward as forward.\nFor example \"racecar\" is a palindrome\
    \ and \"racecars\" is not a palindrome.\nWrite a function that checks if a word\
    \ is a palindrome.\nA palindrome is a word, phrase or sentence that reads the\
    \ same backward as forward.\nFor example \"racecar\" is a palindrome and \"racecars\"\
    \ is not a palindrome.\nWrite a function that checks if a word is a palindrome.\n\
    A palindrome is a word, phrase or sentence that reads the same backward as forward.\n\
    For example \"racecar\" is a palindrome and \"racecars\" is not a palindrome.\n\
    Write a function that checks if a word is a palindrome.\nA palindrome is a word,\
    \ phrase or sentence that reads the same backward as forward.\nFor example \"\
    racecar\" is a palindrome and \"racecars\" is not a palindrome.\nWrite a function\
    \ that checks if a word is a palindrome.\nA palindrome is a word, phrase or sentence\
    \ that reads the same backward as forward.\nFor \nusing Test\n\n@testset begin\n\
    \ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"\
    dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\t@test(candidate(\"aabb\", \"\
    aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpwaida6ll.jl:17\nin expression starting at /tmp/tmpwaida6ll.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars = true\n  \
    \  for c in s0:\n        if c not in s1:\n            same_chars = false\n   \
    \         break\n    return same_chars\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfm88b48e.jl:19\nin expression starting at\
    \ /tmp/tmpfm88b48e.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if s0 == s1 \n       \
    \ then return true\n    else if s0 == \"\"\n        then return true\n    else\
    \ if s1 == \"\"\n        then return true\n    else if s0 == \"\"\n        then\
    \ return true\n    else if s1 == \"\"\n        then return true\n    else if s0\
    \ == \"\"\n        then return true\n    else if s1 == \"\"\n        then return\
    \ true\n    else if s0 == \"\"\n        then return true\n    else if s1 == \"\
    \"\n        then return true\n    else if s0 == \"\"\n        then return true\n\
    \    else if s1 == \"\"\n        then return true\n    else if s0 == \"\"\n  \
    \      then return true\n    else if s1 == \"\"\n        then return true\n  \
    \  else if s0 == \"\"\n        then return true\n    else if s1 == \"\"\n    \
    \    then return true\n    else if s0 == \"\"\n        then return true\n    else\
    \ if s1 == \"\"\n        then return true\n    else if s0 == \"\"\n        then\
    \ return true\n    else if s1 == \"\"\n        then return true\n    else if s0\
    \ == \"\"\n        then return true\n    else if s1 == \"\"\n        then return\
    \ true\n    else if s0 == \"\"\n        then return true\n    else if s1 == \"\
    \"\n        then return true\n    else if s0 == \"\"\n        then return true\n\
    \    else if s1 == \"\"\n        then return true\n    else if s0 == \"\"\n  \
    \      then return true\n    else if s1 == \"\"\n        then return true\n  \
    \  else if s0 == \"\"\n        then return true\n    else if s1 == \"\"\n    \
    \    then return true\n    else if s0 == \"\"\n        then return true\n    else\
    \ if s1 == \"\"\n        then return true\n    else if s0 == \"\"\n        then\
    \ return true\n    else if s1 == \"\"\n        then return true\n    else if s0\
    \ == \"\"\n        then return true\n    else if s1 == \"\"\n        then return\
    \ true\n    else if s0 == \"\"\n        then return true\n    else if s1 == \"\
    \"\n        then return true\n    else if s0 == \"\"\n        then return true\n\
    \    else if s1 == \"\"\n        then return true\n    else if s0 == \"\"\n  \
    \      then return true\n    else if s1 == \"\"\n        then return true\n  \
    \  else if s0 == \"\"\n        then return true\n    else if s1 == \"\"\n    \
    \    then \nusing Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp5tfh375k.jl:18\nin expression starting at /tmp/tmp5tfh375k.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars = true\n  \
    \  for c in s0:\n        if c not in s1:\n            same_chars = false\n   \
    \         break\n    return same_chars\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp29_ox_34.jl:19\nin expression starting at\
    \ /tmp/tmp29_ox_34.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars = true\n  \
    \  for c in s0:\n        if c not in s1:\n            same_chars = false\n   \
    \         break\n    return same_chars\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1ay1i76r.jl:19\nin expression starting at\
    \ /tmp/tmp1ay1i76r.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    \n    same_chars = true\n\
    \    \n    for c in s0:\n        if c not in s1:\n            same_chars = false\n\
    \            break\n    \n    return same_chars\nusing Test\n\n@testset begin\n\
    \ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"\
    dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\t@test(candidate(\"aabb\", \"\
    aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo4f0786i.jl:21\nin expression starting at\
    \ /tmp/tmpo4f0786i.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars = true\n  \
    \  i = 0\n    j = i\n    while i < length(s0) and j < length(s1)\n        if s0[i]\
    \ == s1[j]\n            same_chars = false\n            i += 1\n            j\
    \ += 1\n        else\n            i += 1\n            j += 1\n    end\n    return\
    \ same_chars\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a\
    \ string and returns the number of characters in it.\nThe function should ignore\
    \ non-alphabetic characters and count the alphabetic characters.\nThe function\
    \ should ignore spaces.\nThe function should ignore punctuation and numbers.\n\
    The function should ignore capitalization.\nThe function should ignore non-alphabetic\
    \ characters and count the alphabetic characters.\nThe function should ignore\
    \ spaces.\nThe function should ignore punctuation and numbers.\nThe function should\
    \ ignore capitalization.\nThe function should ignore non-alphabetic characters\
    \ and count the alphabetic characters.\nThe function should ignore spaces.\nThe\
    \ function should ignore punctuation and numbers.\nThe function should ignore\
    \ capitalization.\nThe function should ignore non-alphabetic characters and count\
    \ the alphabetic characters.\nThe function should ignore spaces.\nThe function\
    \ should ignore punctuation and numbers.\nThe function should ignore capitalization.\n\
    The function should ignore non-alphabetic characters and count the alphabetic\
    \ characters.\nThe function should ignore spaces.\nThe function should ignore\
    \ punctuation and numbers.\nThe function should ignore capitalization.\nThe function\
    \ should ignore non-alphabetic characters and count the alphabetic characters.\n\
    The function should ignore spaces.\nThe function should ignore punctuation and\
    \ numbers.\nThe function should ignore capitalization.\nThe function should ignore\
    \ non-alphabetic characters and count the alphabetic characters.\nThe function\
    \ should ignore spaces.\nThe function should ignore punctuation and numbers.\n\
    The function should ignore capitalization.\nThe function should ignore non-alphabetic\
    \ characters and count the alphabetic characters.\nThe function should ignore\
    \ spaces.\nThe function should ignore punctuation and numbers.\nThe function should\
    \ ignore capitalization.\nThe function should ignore non-alphabetic characters\
    \ and count the alphabetic characters.\nThe function should ignore spaces.\nThe\
    \ function should ignore punctuation and numbers.\nThe function should ignore\
    \ capitalization.\nThe function should ignore non-alphabetic characters and count\
    \ the alphabetic characters.\nThe function should ignore spaces.\nThe function\
    \ should ignore punctuation and numbers.\nThe function should ignore capitalization.\n\
    The function should ignore non-alphabetic characters and count the alphabetic\
    \ characters.\nThe function should ignore spaces.\nThe function should ignore\
    \ punctu\nusing Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"while\" at /tmp/tmpiyux8tgs.jl:20 expected\
    \ \"end\", got \"j\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpiyux8tgs.jl:20\n\
    in expression starting at /tmp/tmpiyux8tgs.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars(s0, s1) ||\
    \ same_chars(s1, s0)\nend\nusing Test\n\n@testset begin\n\ncandidate = same_chars;\n\
    \t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"\
    abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\")\
    \ == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"\
    abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    \n    if length(s0) !=\
    \ length(s1)\n        return false\n    \n    i = 0\n    \n    while i < length(s0)\n\
    \        if s0[i] != s1[i]\n            return false\n        i += 1\n    \n \
    \   return true\nend\n</cell>\n<text>\nExercise 7: Write a function that checks\
    \ if a word is palindrome or not.\nThe word is a palindrome if its first and last\
    \ characters are the same.\nThe word is not a palindrome if its first and last\
    \ characters are not the same.\nThe word is not a palindrome if its first and\
    \ last characters are different.\nThe word is not a palindrome if its first and\
    \ last characters are different and they are both lowercase.\nThe word is not\
    \ a palindrome if its first and last characters are different and they are both\
    \ uppercase.\nThe word is not a palindrome if its first and last characters are\
    \ different and they are both digits.\nThe word is not a palindrome if its first\
    \ and last characters are different and they are both punctuation.\nThe word is\
    \ not a palindrome if its first and last characters are different and they are\
    \ both symbols.\nThe word is not a palindrome if its first and last characters\
    \ are different and they are both whitespace.\nThe word is not a palindrome if\
    \ its first and last characters are different and they are both non-alphanumeric.\n\
    The word is not a palindrome if its first and last characters are different and\
    \ they are both non-alphabetical.\nThe word is not a palindrome if its first and\
    \ last characters are different and they are both non-alphabetical.\nThe word\
    \ is not a palindrome if its first and last characters are different and they\
    \ are both non-alphabetical.\nThe word is not a palindrome if its first and last\
    \ characters are different and they are both non-alphabetical.\nThe word is not\
    \ a palindrome if its first and last characters are different and they are both\
    \ non-alphabetical.\nThe word is not a palindrome if its first and last characters\
    \ are different and they are both non-alphabetical.\nThe word is not a palindrome\
    \ if its first and last characters are different and they are both non-alphabetical.\n\
    The word is not a palindrome if its first and last characters are different and\
    \ they are both non-alphabetical.\nThe word is not a palindrome if its first and\
    \ last characters are different and they are both non-alphabetical.\nThe word\
    \ is not a palindrome if its first and last characters are different and they\
    \ are both non-alphabetical.\nThe word \nusing Test\n\n@testset begin\n\ncandidate\
    \ = same_chars;\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\
    \t@test(candidate(\"abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\"\
    , \"abcd\") == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\
    \t@test(candidate(\"abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\") == false)\n\t@test(candidate(\"aabb\", \"aaccc\") ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdvv835b7.jl:30\nin expression starting at\
    \ /tmp/tmpdvv835b7.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars = true\n  \
    \  \n    for c in s0:\n        if c not in s1:\n            same_chars = false\n\
    \            break\n    return same_chars\nend\n</cell>\n<code language=julia-1.3>\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp11t6uwmm.jl:20\nin expression starting at\
    \ /tmp/tmp11t6uwmm.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    \n    \"\"\"\n    Check\
    \ if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    \n    if s0 == s1:\n      \
    \  return True\n    \n    len_s0 = len(s0)\n    len_s1 = len(s1)\n    \n    if\
    \ len_s0 > len_s1:\n        return False\n    \n    i = 0\n    j = 0\n    \n \
    \   while i < len_s0 and j < len_s1:\n        if s0[i] == s1[j]:\n           \
    \ i += 1\n            j += 1\n        elif s0[i] > s1[j]:\n            return\
    \ False\n        else:\n            j += 1\n    \n    return i == len_s0 and j\
    \ == len_s1\n    \n    \n\"\"\"\n    Check if two words have the same characters.\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd',\
    \ 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n\
    \    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd',\
    \ 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n\
    \    False\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = same_chars;\n\
    \t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"\
    abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\")\
    \ == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"\
    abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcgj00a3j.jl:35\nin expression starting at\
    \ /tmp/tmpcgj00a3j.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    len0 = length(s0)\n  \
    \  len1 = length(s1)\n    if len0 != len1\n        return false\n    \n    i =\
    \ 0\n    while i < len0\n        if s0[i] != s1[i]\n            return false\n\
    \        i += 1\n    return true\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\"\
    ) == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"\
    eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\
    \t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvcy1mtko.jl:29\nin expression starting at\
    \ /tmp/tmpvcy1mtko.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    \n    if length(s0) !=\
    \ length(s1)\n        return false\n    \n    i = 0\n    while i < length(s0)\n\
    \        if s0[i] != s1[i]\n            return false\n        i += 1\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"while\" at /tmp/tmppys4824p.jl:22\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppys4824p.jl:1\n\
    in expression starting at /tmp/tmppys4824p.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    \n    len0 = length(s0)\n\
    \    len1 = length(s1)\n    \n    if len0 != len1\n        return false\n    \n\
    \    i = 0\n    \n    while i < len0\n        if s0[i] != s1[i]\n            return\
    \ false\n        i += 1\n    \n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpja4g4qb_.jl:33\nin expression starting at\
    \ /tmp/tmpja4g4qb_.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars = true\n  \
    \  for c in s0:\n        if c not in s1:\n            same_chars = false\n   \
    \         break\n    return same_chars\nend\n</cell>\n<code language=julia-1.4>\n\
    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe5eue5s6.jl:19\nin expression starting at\
    \ /tmp/tmpe5eue5s6.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    \n    len0 = length(s0)\n\
    \    len1 = length(s1)\n    \n    if len0 != len1\n        return false\n    \n\
    \    i = 0\n    \n    while i < len0\n        if s0[i] != s1[i]\n            return\
    \ false\n        i += 1\n    \n    return true\nend\n</cell>\n<code language=julia-1.3>\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx1_8s4li.jl:33\nin expression starting at\
    \ /tmp/tmpx1_8s4li.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    len1 = length(s1)\n  \
    \  len2 = length(s2)\n    if len1 == len2\n        true\n    else\n        if\
    \ len1 > len2\n            true\n        else\n            if len1 < len2\n  \
    \              false\n            else\n                if s1 == s2\n        \
    \            true\n                else\n                    if s0 == s1\n   \
    \                     true\n                    else\n                       \
    \ if s0 == s2\n                            true\n                        else\n\
    \                            if s1 == s2\n                                true\n\
    \                            else\n                                if s1 == s2\n\
    \                                    true\n                                else\n\
    \                                    if s0 == s1\n                           \
    \             true\n                                    else\n               \
    \                         if s0 == s2\n                                      \
    \      true\n                                        else\n                  \
    \                          if s1 == s2\n                                     \
    \           true\n                                            else\n         \
    \                                       if s0 == s1\n                        \
    \                            true\n                                          \
    \      else:\n                                                    if s0 == s2\n\
    \                                                        true\n              \
    \                                      else\n                                \
    \                        if s1 == s2\n                                       \
    \                     true\n                                                 \
    \       else\n                                                            false\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Check if two words\
    \ have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"\
    dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\t@test(candidate(\"aabb\", \"\
    aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: newline not allowed after \":\" used for quoting\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpp90phldp.jl:55\nin expression\
    \ starting at /tmp/tmpp90phldp.jl:55\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars = true\n  \
    \  for c in s0:\n        if c not in s1:\n            same_chars = false\n   \
    \         break\n    return same_chars\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5c3zvdy2.jl:19\nin expression starting at\
    \ /tmp/tmp5c3zvdy2.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars = true\n  \
    \  for c in s0:\n        if c not in s1:\n            same_chars = false\n   \
    \         break\n    return same_chars\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpem_zqvth.jl:19\nin expression starting at\
    \ /tmp/tmpem_zqvth.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    \n    same_chars = true\n\
    \    for c in s0:\n        if c not in s1:\n            same_chars = false\n \
    \           break\n    return same_chars\nend\n</cell>\n<code language=julia-1.4>\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx5c2mprc.jl:20\nin expression starting at\
    \ /tmp/tmpx5c2mprc.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    len1 = length(s1)\n  \
    \  len2 = length(s2)\n    if len1 != len2\n        return false\n    elseif len1\
    \ == 0\n        return true\n    else\n        char1 = s1[1]\n        char2 =\
    \ s2[1]\n        if char1 == char2\n            return same_chars(s1[2:], s2[2:])\n\
    \        else\n            return false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp71nt9nfa.jl:27\nin expression\
    \ starting at /tmp/tmp71nt9nfa.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if s0 == s1 \n       \
    \ then return true\n    else if s0 == \"\"\n        then return true\n    else\
    \ if s1 == \"\"\n        then return true\n    else if s1 == s2\n        then\
    \ return true\n    else if s0 == s2\n        then return true\n    else if s1\
    \ == s2\n        then return true\n    else if s0 == \"\"\n        then return\
    \ true\n    else if s1 == \"\"\n        then return true\n    else if s0 == \"\
    \"\n        then return true\n    else if s1 == \"\"\n        then return true\n\
    \    else if s0 == \"\"\n        then return true\n    else if s1 == \"\"\n  \
    \      then return true\n    else if s0 == \"\"\n        then return true\n  \
    \  else if s1 == \"\"\n        then return true\n    else if s0 == \"\"\n    \
    \    then return true\n    else if s1 == \"\"\n        then return true\n    else\
    \ if s0 == \"\"\n        then return true\n    else if s1 == \"\"\n        then\
    \ return true\n    else if s0 == \"\"\n        then return true\n    else if s1\
    \ == \"\"\n        then return true\n    else if s0 == \"\"\n        then return\
    \ true\n    else if s1 == \"\"\n        then return true\n    else if s0 == \"\
    \"\n        then return true\n    else if s1 == \"\"\n        then return true\n\
    \    else if s0 == \"\"\n        then return true\n    else if s1 == \"\"\n  \
    \      then return true\n    else if s0 == \"\"\n        then return true\n  \
    \  else if s1 == \"\"\n        then return true\n    else if s0 == \"\"\n    \
    \    then return true\n    else if s1 == \"\"\n        then return true\n    else\
    \ if s0 == \"\"\n        then return true\n    else if s1 == \"\"\n        then\
    \ return true\n    else if s0 == \"\"\n        then return true\n    else if s1\
    \ == \"\"\n        then return true\n    else if s0 == \"\"\n        then return\
    \ true\n    else if s1 == \"\"\n        then return true\n    else if s0 == \"\
    \"\n        then return true\n    else if s1 == \"\"\n        then return true\n\
    \    else if s0 == \"\"\n        then return true\n    else if s1 == \"\"\n  \
    \      then return true\n    else if s0 == \"\"\n        then return true\n  \
    \  else if s1 == \"\"\n        then return true\n    else if s0 == \"\"\n    \
    \    then \nusing Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpki1v_hrk.jl:18\nin expression starting at /tmp/tmpki1v_hrk.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars(s0, s1) ||\
    \ same_chars(s1, s0)\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Check\
    \ if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"\
    dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\t@test(candidate(\"aabb\", \"\
    aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp55cdo018.jl:19\nin expression starting at\
    \ /tmp/tmp55cdo018.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    \n    if s0 == s1 \n \
    \       then return true\n    else \n        match s0, s1 \n            | [],\
    \ \"\" -> true\n            | \"\", [] -> true\n            | [], y::y -> false\n\
    \            | x::xs, y::ys -> same_chars(xs, ys) \n        end\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    Check if two words have the same characters.\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd',\
    \ 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n\
    \    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd',\
    \ 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n\
    \    False\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = same_chars;\n\
    \t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"\
    abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\")\
    \ == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"\
    abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp4__49eyh.jl:19\nin expression starting at /tmp/tmp4__49eyh.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars = true\n  \
    \  for c in s0:\n        if c not in s1:\n            same_chars = false\n   \
    \         break\n    return same_chars\nend\nusing Test\n\n@testset begin\n\n\
    candidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"\
    dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\t@test(candidate(\"aabb\", \"\
    aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvzmytk1y.jl:19\nin expression starting at\
    \ /tmp/tmpvzmytk1y.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    \n    \"\"\"\n    Check\
    \ if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp2orcbcgm.jl:16\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2orcbcgm.jl:1\n\
    in expression starting at /tmp/tmp2orcbcgm.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars(s0, s1) = length(s0)\
    \ == length(s1) && all(char(c) == char(c0) for c, c0 in zip (s0, s1))\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    Check if two words have the same characters.\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd',\
    \ 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n\
    \    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd',\
    \ 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n\
    \    False\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = same_chars;\n\
    \t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"\
    abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\")\
    \ == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"\
    abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid iteration specification\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9yxuecjz.jl:17\nin expression starting at\
    \ /tmp/tmp9yxuecjz.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars(s0, s1) = length(s0)\
    \ == length(s1) && all(char(s0) == char(s1) for char in s0)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\",\
    \ \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\"\
    ) == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"\
    eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\
    \t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpizny7nj0.jl:24\n  Test threw exception\n\
    \  Expression: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n  MethodError:\
    \ Cannot `convert` an object of type var\"#same_chars#2\" to an object of type\
    \ Bool\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n    convert(::Type{T},\
    \ !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] same_chars(s0::String, s1::String)\n     @ Main\
    \ /tmp/tmpizny7nj0.jl:17\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpizny7nj0.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpizny7nj0.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpizny7nj0.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"abcd\", \"dddddddabc\") == true\n  MethodError: Cannot `convert`\
    \ an object of type var\"#same_chars#2\" to an object of type Bool\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] same_chars(s0::String, s1::String)\n     @ Main\
    \ /tmp/tmpizny7nj0.jl:17\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpizny7nj0.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpizny7nj0.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    \n    if s0 == s1 \n \
    \   then return true\n    else if s0 == ''\n    then return true\n    else if\
    \ s1 == ''\n    then return true\n    else if s0 == s1\n    then return true\n\
    \    else if s0 == ''\n    then return true\n    else if s1 == ''\n    then return\
    \ true\n    else if s0 == s1\n    then return true\n    else if s0 == ''\n   \
    \ then return true\n    else if s1 == ''\n    then return true\n    else if s0\
    \ == s1\n    then return true\n    else if s0 == ''\n    then return true\n  \
    \  else if s1 == ''\n    then return true\n    else if s0 == s1\n    then return\
    \ true\n    else if s0 == ''\n    then return true\n    else if s1 == ''\n   \
    \ then return true\n    else if s0 == s1\n    then return true\n    else if s0\
    \ == ''\n    then return true\n    else if s1 == ''\n    then return true\n  \
    \  else if s0 == s1\n    then return true\n    else if s0 == ''\n    then return\
    \ true\n    else if s1 == ''\n    then return true\n    else if s0 == s1\n   \
    \ then return true\n    else if s0 == ''\n    then return true\n    else if s1\
    \ == ''\n    then return true\n    else if s0 == s1\n    then return true\n  \
    \  else if s0 == ''\n    then return true\n    else if s1 == ''\n    then return\
    \ true\n    else if s0 == s1\n    then return true\n    else if s0 == ''\n   \
    \ then return true\n    else if s1 == ''\n    then return true\n    else if s0\
    \ == s1\n    then return true\n    else if s0 == ''\n    then return true\n  \
    \  else if s1 == ''\n    then return true\n    else if s0 == s1\n    then return\
    \ true\n    else if s0 == ''\n    then return true\n    else if s1 == ''\n   \
    \ then return true\n    else if s0 == s1\n    then return true\n    else if s0\
    \ == ''\n    then return true\n    else if s1 == ''\n    then return true\n  \
    \  else if s0 == s1\n    then return true\n    else if s0 == ''\n    then return\
    \ true\n    else if s1 == ''\n    then return true\n    else if s0 == s1\n\nusing\
    \ Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\"\
    ) == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"\
    eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\
    \t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp3lkna6z7.jl:19\nin expression starting at /tmp/tmp3lkna6z7.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars(s0, s1) = length(s0)\
    \ == length(s1) && all(char(c) == char(s0[c]) for c in s0)\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\n    Check if two words have the same characters.\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd',\
    \ 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n\
    \    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd',\
    \ 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n\
    \    False\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = same_chars;\n\
    \t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"\
    abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\")\
    \ == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"\
    abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz_j7xc5r.jl:19\nin expression starting at\
    \ /tmp/tmpz_j7xc5r.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    \n    if length(s0) !=\
    \ length(s1)\n        return false\n    \n    i = 0\n    j = length(s0)\n    \n\
    \    while i < j\n        if s0[i] != s1[j]\n            return false\n      \
    \  i += 1\n        j += 1\n    \n    return true\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"\
    dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\t@test(candidate(\"aabb\", \"\
    aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"while\" at /tmp/tmpwd4mk2f5.jl:24\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwd4mk2f5.jl:1\n\
    in expression starting at /tmp/tmpwd4mk2f5.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    \n    same_chars = true\n\
    \    for c in s0:\n        if c not in s1:\n            same_chars = false\n \
    \           break\n    return same_chars\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf5z69yc8.jl:20\nin expression starting at\
    \ /tmp/tmpf5z69yc8.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if s0 == s1 \n       \
    \ then return true\n        else return false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpj0xfm6xs.jl:18\nin expression starting at /tmp/tmpj0xfm6xs.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    \n    same_chars = true\n\
    \    \n    for c in s0:\n        if c not in s1:\n            same_chars = false\n\
    \            break\n    \n    return same_chars\nend\n</cell>\n<code language=julia-1.4>\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1z4r7cdw.jl:21\nin expression starting at\
    \ /tmp/tmp1z4r7cdw.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars(s0, s1) ||\
    \ same_chars(s1, s0)\nend\nusing Test\n\n@testset begin\n\ncandidate = same_chars;\n\
    \t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"\
    abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\")\
    \ == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"\
    abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars_chars_idx::Array{Int,1}\
    \ = findfirst(same_chars_chars_idx, s0)\n    same_chars_chars_idx::Array{Int,1}\
    \ = findfirst(same_chars_chars_idx, s1)\n    same_chars_chars_idx::Array{Int,1}\
    \ = findfirst(same_chars_chars_idx, s2)\n    same_chars_chars_idx::Array{Int,1}\
    \ = findfirst(same_chars_chars_idx, s3)\n    same_chars_chars_idx::Array{Int,1}\
    \ = findfirst(same_chars_chars_idx, s4)\n    same_chars_chars_idx::Array{Int,1}\
    \ = findfirst(same_chars_chars_idx, s5)\n    same_chars_chars_idx::Array{Int,1}\
    \ = findfirst(same_chars_chars_idx, s6)\n    same_chars_chars_idx::Array{Int,1}\
    \ = findfirst(same_chars_chars_idx, s7)\n    same_chars_chars_idx::Array{Int,1}\
    \ = findfirst(same_chars_chars_idx, s8)\n    same_chars_chars_idx::Array{Int,1}\
    \ = findfirst(same_chars_chars_idx, s9)\n    same_chars_chars_idx::Array{Int,1}\
    \ = findfirst(same_chars_chars_idx, s10)\n    same_chars_chars_idx::Array{Int,1}\
    \ = findfirst(same_chars_chars_idx, s11)\n    same_chars_chars_idx::Array{Int,1}\
    \ = findfirst(same_chars_chars_idx, s12)\n    same_chars_chars_idx::Array{Int,1}\
    \ = findfirst(same_chars_chars_idx, s13)\n    same_chars_chars_idx::Array{Int,1}\
    \ = findfirst(same_chars_chars_idx, s14)\n    same_chars_chars_idx::Array{Int,1}\
    \ = findfirst(same_chars_chars_idx, s15)\n    same_chars_chars_idx::Array{Int,1}\
    \ = findfirst(same_chars_chars_idx, s16)\n    same_chars_chars_idx::Array{Int,1}\
    \ = findfirst(same_chars_chars_idx, s17)\n    same_chars_chars_idx::Array{Int,1}\
    \ = findfirst(same_chars_chars_idx, s18)\n    same_chars_chars_idx::Array{Int,1}\
    \ = findfirst(same_chars_chars_idx, s19)\n    same_chars_chars_idx::Array{Int,1}\
    \ = findfirst(same_chars_chars_idx, s20)\n    same_chars_chars_idx::Array{Int,1}\
    \ = findfirst(same_chars_chars_idx, s21)\n    same_chars_chars_idx::Array{Int,1}\
    \ = findfirst(same_chars_chars_idx, s22)\n    same_chars_chars_\nusing Test\n\n\
    @testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\", \"\
    dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\") ==\
    \ true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"\
    eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\
    \t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpaqky962h.jl:16\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpaqky962h.jl:1\n\
    in expression starting at /tmp/tmpaqky962h.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    \n    len0 = length(s0)\n\
    \    len1 = length(s1)\n    \n    if len0 != len1\n        return false\n    \n\
    \    i = 0\n    while i < len0\n        if s0[i] != s1[i]\n            return\
    \ false\n        i += 1\n    \n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpftgvxxfe.jl:32\nin expression starting at\
    \ /tmp/tmpftgvxxfe.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    \n    same_chars = true\n\
    \    \n    for c in s0:\n        if c not in s1:\n            same_chars = false\n\
    \            break\n        \n    return same_chars\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpups2l712.jl:21\nin expression starting at\
    \ /tmp/tmpups2l712.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    \n    same_chars = true\n\
    \    \n    for c in s0:\n        if c not in s1:\n            same_chars = false\n\
    \            break\n    \n    return same_chars\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"\
    dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\t@test(candidate(\"aabb\", \"\
    aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7n9s1oaa.jl:21\nin expression starting at\
    \ /tmp/tmp7n9s1oaa.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars = true\n  \
    \  for c in s0:\n        if c not in s1:\n            same_chars = false\n   \
    \         break\n    return same_chars\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqwrjqgyb.jl:19\nin expression starting at\
    \ /tmp/tmpqwrjqgyb.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars(s0, s1) ||\
    \ (same_chars(s0, s1) && same_chars(s1, s0))\nend\n</cell>\n<code language=julia-1.4>\n\
    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps1csigzs.jl:19\nin expression starting at\
    \ /tmp/tmps1csigzs.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars = true\n  \
    \  for c in s0:\n        if c not in s1:\n            same_chars = false\n   \
    \         break\n    return same_chars\nend\n</cell>\n<code language=julia-1.0>\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphjurdirz.jl:19\nin expression starting at\
    \ /tmp/tmphjurdirz.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars(s0, s1) ||\
    \ same_chars(s1, s0)\nend\nusing Test\n\n@testset begin\n\ncandidate = same_chars;\n\
    \t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"\
    abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\")\
    \ == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"\
    abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars = true\n  \
    \  for c in s0:\n        if c not in s1:\n            same_chars = false\n   \
    \         break\n    return same_chars\nend\n</cell>\n<code language=julia-1.4>\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp52kqpr5p.jl:19\nin expression starting at\
    \ /tmp/tmp52kqpr5p.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    len0 = length(s0)\n  \
    \  len1 = length(s1)\n    if len0 != len1\n        return false\n    else\n  \
    \      for (i0, i1) in zip(xrange(len0), xrange(len1))\n            if s0[i0]\
    \ != s1[i1]\n                return false\n        return true\n    end\nend\n\
    </cell>\n<code language=julia-1.0>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = same_chars;\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\
    \t@test(candidate(\"abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\"\
    , \"abcd\") == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\
    \t@test(candidate(\"abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\") == false)\n\t@test(candidate(\"aabb\", \"aaccc\") ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppunubp0t.jl:28\nin expression starting at\
    \ /tmp/tmppunubp0t.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars = true\n  \
    \  len = length(s0)\n    for i::Int in 0..length(s1)\n        if s0[i] != s1[i]\n\
    \            same_chars = false\n            break\n    end\n    return same_chars\n\
    end\n</cell>\n<code language=julia-1.4>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = same_chars;\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\
    \t@test(candidate(\"abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\"\
    , \"abcd\") == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\
    \t@test(candidate(\"abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\") == false)\n\t@test(candidate(\"aabb\", \"aaccc\") ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwmo4mimp.jl:26\nin expression starting at\
    \ /tmp/tmpwmo4mimp.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    len0 = length(s0)\n  \
    \  len1 = length(s1)\n    if len0 != len1\n        return false\n    else\n  \
    \      chars = chars(s0)\n        chars = chars[0..len1-len0]\n        chars =\
    \ chars[1..len0]\n        chars = chars[1..len1]\n        chars = chars[0..len1-len0]\n\
    \        chars = chars[1..len0]\n        chars = chars[1..len1]\n        chars\
    \ = chars[0..len1-len0]\n        chars = chars[1..len0]\n        chars = chars[1..len1]\n\
    \        chars = chars[0..len1-len0]\n        chars = chars[1..len0]\n       \
    \ chars = chars[1..len1]\n        chars = chars[0..len1-len0]\n        chars =\
    \ chars[1..len0]\n        chars = chars[1..len1]\n        chars = chars[0..len1-len0]\n\
    \        chars = chars[1..len0]\n        chars = chars[1..len1]\n        chars\
    \ = chars[0..len1-len0]\n        chars = chars[1..len0]\n        chars = chars[1..len1]\n\
    \        chars = chars[0..len1-len0]\n        chars = chars[1..len0]\n       \
    \ chars = chars[1..len1]\n        chars = chars[0..len1-len0]\n        chars =\
    \ chars[1..len0]\n        chars = chars[1..len1]\n        chars = chars[0..len1-len0]\n\
    \        chars = chars[1..len0]\n        chars = chars[1..len1]\n        chars\
    \ = chars[0..len1-len0]\n        chars = chars[1..len0]\n        chars = chars[1..len1]\n\
    \        chars = chars[0..len1-len0]\n        chars = chars[1..len0]\n       \
    \ chars = chars[1..len1]\n        chars = chars[0..len1-len0]\n        chars =\
    \ chars[1..len0]\n        chars = chars[1..len1]\n        chars = chars[0..len1-len0]\n\
    \        chars = chars[1..len0]\n        chars = chars[1..len1]\n        chars\
    \ = chars[0..len1-len0]\n        chars = chars[1..len0]\n        chars = chars[1..len\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqxq1kgsg.jl:1\nin expression starting at /tmp/tmpqxq1kgsg.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars = true\n  \
    \  for c in s0:\n        if c not in s1:\n            same_chars = false\n   \
    \         break\n    return same_chars\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp67lb_723.jl:19\nin expression starting at\
    \ /tmp/tmp67lb_723.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars = true\n  \
    \  for c in s0:\n        if c not in s1:\n            same_chars = false\n   \
    \         break\n    return same_chars\nend\n</cell>\n<code language=julia-1.4>\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4bd8gol4.jl:19\nin expression starting at\
    \ /tmp/tmp4bd8gol4.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    len = length(s0)\n   \
    \ len1 = length(s1)\n    if len == len1\n        for (i, c) in zip(s0, s1)\n \
    \           if i != c\n                return false\n    return true\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    Check if two words have the same characters.\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd',\
    \ 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n\
    \    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd',\
    \ 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n\
    \    False\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = same_chars;\n\
    \t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"\
    abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\")\
    \ == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"\
    abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx6ngqj8f.jl:25\nin expression starting at\
    \ /tmp/tmpx6ngqj8f.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars = true\n  \
    \  for c in s0:\n        if c not in s1:\n            same_chars = false\n   \
    \         break\n    return same_chars\nend\n</cell>\n<code language=julia-1.4>\n\
    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpysbp1qnc.jl:19\nin expression starting at\
    \ /tmp/tmpysbp1qnc.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars = true\n  \
    \  for c in s0:\n        if c not in s1:\n            same_chars = false\n   \
    \         break\n    return same_chars\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpove16715.jl:19\nin expression starting at\
    \ /tmp/tmpove16715.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    len0 = length(s0)\n  \
    \  len1 = length(s1)\n    if len0 != len1\n        return false\n    \n    i =\
    \ 0\n    while i < len0\n        if s0[i] != s1[i]\n            return false\n\
    \        i += 1\n    return true\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the number of characters in a string.\nThe function should take\
    \ a string as input and return the number of characters in the string.\nThe function\
    \ should raise an error if the string is not of length 1 or is empty.\nThe function\
    \ should raise an error if the string contains any non-alphabetic characters.\n\
    The function should raise an error if the string contains any non-alphabetic characters\
    \ or is empty.\nThe function should raise an error if the string contains any\
    \ non-alphabetic characters or is empty.\nThe function should raise an error if\
    \ the string contains any non-alphabetic characters or is empty.\nThe function\
    \ should raise an error if the string contains any non-alphabetic characters or\
    \ is empty.\nThe function should raise an error if the string contains any non-alphabetic\
    \ characters or is empty.\nThe function should raise an error if the string contains\
    \ any non-alphabetic characters or is empty.\nThe function should raise an error\
    \ if the string contains any non-alphabetic characters or is empty.\nThe function\
    \ should raise an error if the string contains any non-alphabetic characters or\
    \ is empty.\nThe function should raise an error if the string contains any non-alphabetic\
    \ characters or is empty.\nThe function should raise an error if the string contains\
    \ any non-alphabetic characters or is empty.\nThe function should raise an error\
    \ if the string contains any non-alphabetic characters or is empty.\nThe function\
    \ should raise an error if the string contains any non-alphabetic characters or\
    \ is empty.\nThe function should raise an error if the string contains any non-alphabetic\
    \ characters or is empty.\nThe function should raise an error if the string contains\
    \ any non-alphabetic characters or is empty.\nThe function should raise an error\
    \ if the string contains any non-alphabetic characters or is empty.\nThe function\
    \ should raise an error if the string contains any non-alphabetic characters or\
    \ is empty.\nThe function should raise an error if the string contains any non-alphabetic\
    \ characters or is empty.\nThe function should raise an error if the string contains\
    \ any non-alphabetic characters or is empty.\nThe function should raise an error\
    \ if the string contains any non-alphabetic characters or is empty.\nThe function\
    \ should raise an error if the string contains any non-alphabetic characters or\
    \ is empty.\nThe function should raise an error if the string contains any non-alphabetic\
    \ characters or is empty.\nThe function should raise an error if the string contains\
    \ any non-alphabetic characters or is empty.\nThe function should \nusing Test\n\
    \n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\",\
    \ \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\"\
    ) == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"\
    eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\
    \t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf_7gdhaw.jl:29\nin expression starting at\
    \ /tmp/tmpf_7gdhaw.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars = true\n  \
    \  for c in s0:\n        if c not in s1:\n            same_chars = false\n   \
    \         break\n    return same_chars\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpluhbcgwj.jl:19\nin expression starting at\
    \ /tmp/tmpluhbcgwj.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars = true\n  \
    \  for c in s0:\n        if c not in s1:\n            same_chars = false\n   \
    \         break\n    return same_chars\nend\n</cell>\n<code language=julia-1.1>\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpftnkh2y9.jl:19\nin expression starting at\
    \ /tmp/tmpftnkh2y9.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars = true\n  \
    \  for c in s0:\n        if c not in s1:\n            same_chars = false\n   \
    \         break\n    return same_chars\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpll2uyia_.jl:19\nin expression starting at\
    \ /tmp/tmpll2uyia_.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    len0 = length(s0)\n  \
    \  len1 = length(s1)\n    if len0 != len1\n        return false\n    \n    i =\
    \ 0\n    while i < len0\n        if s0[i] != s1[i]\n            return false\n\
    \        i += 1\n    return true\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that checks if two words are anagrams of each other.\nThe function should take\
    \ two strings as arguments and return true if the two words are anagrams of each\
    \ other, and false otherwise.\nThe function should ignore case when comparing\
    \ characters.\nThe function should ignore punctuation and numbers.\nThe function\
    \ should ignore spaces.\nThe function should ignore extra whitespace.\nThe function\
    \ should ignore leading whitespace.\nThe function should ignore trailing whitespace.\n\
    The function should ignore leading or trailing punctuation.\nThe function should\
    \ ignore extra punctuation.\nThe function should ignore extra numbers.\nThe function\
    \ should ignore extra spaces.\nThe function should ignore extra leading or trailing\
    \ whitespace.\nThe function should ignore extra leading or trailing punctuation.\n\
    The function should ignore extra leading or trailing numbers.\nThe function should\
    \ ignore extra leading or trailing spaces.\nThe function should ignore extra leading\
    \ or trailing whitespace.\nThe function should ignore extra leading or trailing\
    \ punctuation.\nThe function should ignore extra leading or trailing numbers.\n\
    The function should ignore extra leading or trailing spaces.\nThe function should\
    \ ignore extra leading or trailing whitespace.\nThe function should ignore extra\
    \ leading or trailing punctuation.\nThe function should ignore extra leading or\
    \ trailing numbers.\nThe function should ignore extra leading or trailing spaces.\n\
    The function should ignore extra leading or trailing whitespace.\nThe function\
    \ should ignore extra leading or trailing punctuation.\nThe function should ignore\
    \ extra leading or trailing numbers.\nThe function should ignore extra leading\
    \ or trailing spaces.\nThe function should ignore extra leading or trailing whitespace.\n\
    The function should ignore extra leading or trailing punctuation.\nThe function\
    \ should ignore extra leading or trailing numbers.\nThe function should ignore\
    \ extra leading or trailing spaces.\nThe function should ignore extra leading\
    \ or trailing whitespace.\nThe function should ignore extra leading or trailing\
    \ punctuation.\nThe function should ignore extra leading or trailing numbers.\n\
    The function should ignore extra leading or trailing spaces.\nThe function should\
    \ ignore extra leading or trailing whitespace.\nThe function should ignore extra\
    \ leading or trailing punctuation.\nThe function should ignore extra leading or\
    \ trailing numbers.\nThe function should ignore extra leading or trailing spaces.\n\
    The function should ignore extra leading or trailing whitespace.\nThe function\
    \ should ignore extra leading or trailing punctuation.\nThe function should ignore\
    \ extra leading or trailing numbers.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = same_chars;\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\
    \t@test(candidate(\"abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\"\
    , \"abcd\") == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\
    \t@test(candidate(\"abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\") == false)\n\t@test(candidate(\"aabb\", \"aaccc\") ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4_znhsnn.jl:29\nin expression starting at\
    \ /tmp/tmp4_znhsnn.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    \n    same_chars = true\n\
    \    \n    for c in s0:\n        if c not in s1:\n            same_chars = false\n\
    \            break\n    \n    return same_chars\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptciqpofb.jl:21\nin expression starting at\
    \ /tmp/tmptciqpofb.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars(s0, s1) = s1==s0\
    \ \nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"\
    dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\t@test(candidate(\"aabb\", \"\
    aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_lgqcjvv.jl:19\nin expression starting at\
    \ /tmp/tmp_lgqcjvv.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars = true\n  \
    \  for c in s0:\n        if c not in s1:\n            same_chars = false\n   \
    \         break\n    return same_chars\nend \n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2zp4steb.jl:19\nin expression starting at\
    \ /tmp/tmp2zp4steb.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    \n    same_chars = true\n\
    \    \n    for c in s0:\n        if c not in s1:\n            same_chars = false\n\
    \            break\n    \n    return same_chars\n</code>\n<|/ a dscore=2 |>\n\
    <| c |>\nThis does not answer the question. He is asking about a general algorithm\
    \ to compare two strings. Your answer only works for two strings.\n<|/ c |>\n\
    <| c |>\nThis answer does not answer the question. He is asking about a general\
    \ algorithm to compare two strings. Your answer only works for two strings.\n\
    <|/ c |>\n<| c |>\nI believe this answer is correct. He is asking about a general\
    \ algorithm to compare two strings. Your answer only works for two strings.\n\
    <|/ c |>\n<| c |>\nThis answer does not answer the question. He is asking about\
    \ a general algorithm to compare two strings. Your answer only works for two strings.\n\
    <|/ c |>\n<| c |>\nThis answer does not answer the question. He is asking about\
    \ a general algorithm to compare two strings. Your answer only works for two strings.\n\
    <|/ c |>\n<| a |>\n<code>\ndef same_chars(s0, s1):\n    return len(s0) == len(s1)\
    \ and set(s0) == set(s1)\n</code>\n<|/ a tags=string,algorithm,python dscore=2\
    \ |>\n<| c |>\nThis does not answer the question. He is asking about a general\
    \ algorithm to compare two strings. Your answer only works for two strings.\n\
    <|/ c |>\n<| c |>\nThis answer does not answer the question. He is asking about\
    \ a general algorithm to compare two strings. Your answer only works for two strings.\n\
    <|/ c |>\n<| a dscore=2 |>\n<code>\ndef same_chars(s0, s1):\n    return len(s0)\
    \ == len(s1) and set(s0) == set(s1)\n</code>\n<|/ a tags=string,algorithm,python\
    \ |>\n<| c |>\nThis does not answer the question. He is asking about a general\
    \ algorithm to compare two strings. Your answer only works for two strings.\n\
    <|/ c |>\n<| c |>\nThis answer does not answer the question. He is asking about\
    \ a general algorithm to compare two strings. Your answer only works for two strings.\n\
    <|/ c |>\n<| a tags=string,algorithm,python |>\n<code>\ndef same_chars(s0, s1):\n\
    \    return len(s0) == len(s1) and set(s0) == set(s1)\n</code>\n<|/ a d\nusing\
    \ Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\"\
    ) == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"\
    eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\
    \t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptm9i2cde.jl:21\nin expression starting at\
    \ /tmp/tmptm9i2cde.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    \n    same_chars = false\n\
    \    \n    if length(s0) == length(s1)\n        same_chars = true\n        for\
    \ (i, c) in zip(s0, s1)\n            if c != s0[i]\n                same_chars\
    \ = false\n                break\n    end\n    \n    return same_chars\nend\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmw4xiia8.jl:1\nin expression starting at /tmp/tmpmw4xiia8.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    \n    len0 = length(s0)\n\
    \    len1 = length(s1)\n    \n    if len0 != len1\n        return false\n    \n\
    \    i = 0\n    while i < len0\n        if s0[i] != s1[i]\n            return\
    \ false\n        i += 1\n    \n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi5_bg9qt.jl:32\nin expression starting at\
    \ /tmp/tmpi5_bg9qt.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    len0 = length(s0)\n  \
    \  len1 = length(s1)\n    if len0 != len1\n        return false\n    else\n  \
    \      chars = chars(s0)\n        chars = chars[0..len1-1]\n        for c in chars\n\
    \            if c != chars[end(chars)]\n                return false\n       \
    \ end\n        return true\n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that checks if a word is a palindrome.\nA palindrome is a word that\
    \ reads the same backward as forward.\nFor example, \u201Cracecar\u201D is a palindrome.\n\
    Write a function that checks if a word is a palindrome.\nA palindrome is a word\
    \ that reads the same backward as forward.\nFor example, \u201Cracecar\u201D is\
    \ a palindrome.\nWrite a function that checks if a word is a palindrome.\nA palindrome\
    \ is a word that reads the same backward as forward.\nFor example, \u201Cracecar\u201D\
    \ is a palindrome.\nWrite a function that checks if a word is a palindrome.\n\
    A palindrome is a word that reads the same backward as forward.\nFor example,\
    \ \u201Cracecar\u201D is a palindrome.\nWrite a function that checks if a word\
    \ is a palindrome.\nA palindrome is a word that reads the same backward as forward.\n\
    For example, \u201Cracecar\u201D is a palindrome.\nWrite a function that checks\
    \ if a word is a palindrome.\nA palindrome is a word that reads the same backward\
    \ as forward.\nFor example, \u201Cracecar\u201D is a palindrome.\nWrite a function\
    \ that checks if a word is a palindrome.\nA palindrome is a word that reads the\
    \ same backward as forward.\nFor example, \u201Cracecar\u201D is a palindrome.\n\
    Write a function that checks if a word is a palindrome.\nA palindrome is a word\
    \ that reads the same backward as forward.\nFor example, \u201Cracecar\u201D is\
    \ a palindrome.\nWrite a function that checks if a word is a palindrome.\nA palindrome\
    \ is a word that reads the same backward as forward.\nFor example, \u201Cracecar\u201D\
    \ is a palindrome.\nWrite a function that checks if a word is a palindrome.\n\
    A palindrome is a word that reads the same backward as forward.\nFor example,\
    \ \u201Cracecar\u201D is a palindrome.\nWrite a function that checks if a word\
    \ is a palindrome.\nA palindrome is a word that reads the same backward as forward.\n\
    For example, \u201Cracecar\u201D is a palindrome.\nWrite a \nusing Test\n\n@testset\
    \ begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"\
    dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\t@test(candidate(\"aabb\", \"\
    aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps1j3h8d9.jl:31\nin expression starting at\
    \ /tmp/tmps1j3h8d9.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars = true\n  \
    \  for c in s0:\n        if c not in s1:\n            same_chars = false\n   \
    \         break\n    return same_chars\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp39j91yz7.jl:19\nin expression starting at\
    \ /tmp/tmp39j91yz7.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    \n    if s0 == s1 \n \
    \       then return true\n    else \n        same_chars(s0, s1) || same_chars(s1,\
    \ s0)\n    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"\
    dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\t@test(candidate(\"aabb\", \"\
    aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpu7qb8zj4.jl:19\nin expression starting at /tmp/tmpu7qb8zj4.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    \n    same_chars = true\n\
    \    \n    for c in s0:\n        if c not in s1:\n            same_chars = false\n\
    \            break\n    \n    return same_chars\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy5y9lz93.jl:21\nin expression starting at\
    \ /tmp/tmpy5y9lz93.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars = true\n  \
    \  for c in s0:\n        if c not in s1:\n            same_chars = false\n   \
    \         break\n    return same_chars\nend\n</cell>\n<code language=julia-1.3>\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcey7bft3.jl:19\nin expression starting at\
    \ /tmp/tmpcey7bft3.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    \n    same_chars = false\n\
    \    \n    if length(s0) == length(s1)\n        same_chars = true\n        for\
    \ (i0, i1) in zip(xrange(length(s0)), xrange(length(s1)))\n            if s0[i0]\
    \ != s1[i1]\n                same_chars = false\n                break\n    end\n\
    \    \n    return same_chars\nend\n</cell>\n<code language=julia-0.4>\n\"\"\"\n\
    \    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk0u9q9da.jl:30\nin expression starting at\
    \ /tmp/tmpk0u9q9da.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars(s0, s1) ||\
    \ same_chars(s1, s0)\nend\nusing Test\n\n@testset begin\n\ncandidate = same_chars;\n\
    \t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"\
    abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\")\
    \ == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"\
    abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars = true\n  \
    \  for c in s0:\n        if c not in s1:\n            same_chars = false\n   \
    \         break\n    return same_chars\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp99vzv4ml.jl:19\nin expression starting at\
    \ /tmp/tmp99vzv4ml.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    len = length(s0)\n   \
    \ len1 = length(s1)\n    if len == len1\n        for (i1, i2) in zip(xrange(len),\
    \ xrange(len))\n            if s0[i1] != s1[i2]\n                then return False\n\
    \            end\n        return true\n    end\n    return false\nend\n</cell>\n\
    <text>\nExercise 4\nWrite a function that takes a string as input and returns\
    \ the number of characters in the string. \nWrite a function that takes a string\
    \ as input and returns the number of words in the string. \nWrite a function that\
    \ takes a string as input and returns the number of sentences in the string. \n\
    Write a function that takes a string as input and returns the number of characters\
    \ and words in the string. \nWrite a function that takes a string as input and\
    \ returns the number of characters and words in the string.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"\
    dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\t@test(candidate(\"aabb\", \"\
    aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpp_jpoxwe.jl:22\nin expression starting at /tmp/tmpp_jpoxwe.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    len0 = length(s0)\n  \
    \  len1 = length(s1)\n    if len0 == len1\n        true\n    elseif len0 == 0\n\
    \        false\n    elseif len1 == 0\n        false\n    else\n        same_chars(s0,\
    \ s1[1:len1-1])\n    end\nend\n</cell>\n<text>\nExercise 3: Write a function that\
    \ checks if a word is palindrome. Palindrome is a word that reads the same backward\
    \ as forward.\nusing Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfw4ztzdi.jl:29\nin expression starting at\
    \ /tmp/tmpfw4ztzdi.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars(s0, s1) = length(s0)\
    \ == length(s1) && all(char(c) == char(c0) for (c, c0) in zip(s0, s1))\nend\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpeksi6prh.jl:24\n  Test threw exception\n\
    \  Expression: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n  MethodError:\
    \ Cannot `convert` an object of type var\"#same_chars#2\" to an object of type\
    \ Bool\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n    convert(::Type{T},\
    \ !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] same_chars(s0::String, s1::String)\n     @ Main\
    \ /tmp/tmpeksi6prh.jl:17\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpeksi6prh.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpeksi6prh.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpeksi6prh.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"abcd\", \"dddddddabc\") == true\n  MethodError: Cannot `convert`\
    \ an object of type var\"#same_chars#2\" to an object of type Bool\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] same_chars(s0::String, s1::String)\n     @ Main\
    \ /tmp/tmpeksi6prh.jl:17\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpeksi6prh.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpeksi6prh.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars(s0, s1) = length(s0)\
    \ == length(s1) && all(char(s0[i]) == char(s1[i]) for i in 1:length(s0))\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = same_chars;\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\
    \t@test(candidate(\"abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\"\
    , \"abcd\") == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\
    \t@test(candidate(\"abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\") == false)\n\t@test(candidate(\"aabb\", \"aaccc\") ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp95loii3w.jl:19\nin expression starting at\
    \ /tmp/tmp95loii3w.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    \n    same_chars = true\n\
    \    \n    for c in s0:\n        if c not in s1:\n            same_chars = false\n\
    \            break\n    \n    return same_chars\n</cell>\n<text>\nExercise 4\n\
    Write a function that checks if two words are anagrams of each other.\nThe function\
    \ should take two strings as arguments and return true if they are anagrams of\
    \ each other, and false if not.\nThe function should ignore case when comparing\
    \ characters.\nThe function should ignore non-alphabetic characters (punctuation,\
    \ spaces, etc).\nThe function should ignore duplicate characters (such as 'a'\
    \ and 'a').\nThe function should ignore case when comparing characters.\nThe function\
    \ should ignore non-alphabetic characters (punctuation, spaces, etc).\nThe function\
    \ should ignore duplicate characters (such as 'a' and 'a').\nThe function should\
    \ ignore case when comparing characters.\nThe function should ignore non-alphabetic\
    \ characters (punctuation, spaces, etc).\nThe function should ignore duplicate\
    \ characters (such as 'a' and 'a').\nThe function should ignore case when comparing\
    \ characters.\nThe function should ignore non-alphabetic characters (punctuation,\
    \ spaces, etc).\nThe function should ignore duplicate characters (such as 'a'\
    \ and 'a').\nThe function should ignore case when comparing characters.\nThe function\
    \ should ignore non-alphabetic characters (punctuation, spaces, etc).\nThe function\
    \ should ignore duplicate characters (such as 'a' and 'a').\nThe function should\
    \ ignore case when comparing characters.\nThe function should ignore non-alphabetic\
    \ characters (punctuation, spaces, etc).\nThe function should ignore duplicate\
    \ characters (such as 'a' and 'a').\nThe function should ignore case when comparing\
    \ characters.\nThe function should ignore non-alphabetic characters (punctuation,\
    \ spaces, etc).\nThe function should ignore duplicate characters (such as 'a'\
    \ and 'a').\nThe function should ignore case when comparing characters.\nThe function\
    \ should ignore non-alphabetic characters (punctuation, spaces, etc).\nThe function\
    \ should ignore duplicate characters (such as 'a' and 'a').\nThe function should\
    \ ignore case when comparing characters.\nThe function should ignore non-alphabetic\
    \ characters (punctuation, spaces, etc).\nThe function should ignore duplicate\
    \ characters (such as 'a' and 'a').\nThe function should ignore case when comparing\
    \ characters.\nThe function should ignore non-alphabetic characters (punctuation,\
    \ spaces, etc).\nThe function should ignore duplicate characters (such as 'a'\
    \ and 'a').\nThe function should ignore case when comparing characters.\nThe function\
    \ should ignore non-alphabetic characters (punctuation, \nusing Test\n\n@testset\
    \ begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"\
    dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\t@test(candidate(\"aabb\", \"\
    aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn4adqgpf.jl:21\nin expression starting at\
    \ /tmp/tmpn4adqgpf.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    \n    same_chars = false\n\
    \    \n    if length(s0) == length(s1)\n        for (i, c) in zip(s0, s1)\n  \
    \          if c != s0[i]\n                same_chars = true\n                break\n\
    \    end\n    return same_chars\nend\n</cell>\n<code language=julia-1.1>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\"\
    ) == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"\
    eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\
    \t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4l3ldl1l.jl:28\nin expression starting at\
    \ /tmp/tmp4l3ldl1l.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    \n    if s0 == s1 \n \
    \       then return true\n    else if s0 == \"\"\n        then return true\n \
    \   else if s1 == \"\"\n        then return true\n    else if s0 == \"\"\n   \
    \     then return true\n    else if s1 == \"\"\n        then return true\n   \
    \ else if s0 == \"\"\n        then return true\n    else if s1 == \"\"\n     \
    \   then return true\n    else if s0 == \"\"\n        then return true\n    else\
    \ if s1 == \"\"\n        then return true\n    else if s0 == \"\"\n        then\
    \ return true\n    else if s1 == \"\"\n        then return true\n    else if s0\
    \ == \"\"\n        then return true\n    else if s1 == \"\"\n        then return\
    \ true\n    else if s0 == \"\"\n        then return true\n    else if s1 == \"\
    \"\n        then return true\n    else if s0 == \"\"\n        then return true\n\
    \    else if s1 == \"\"\n        then return true\n    else if s0 == \"\"\n  \
    \      then return true\n    else if s1 == \"\"\n        then return true\n  \
    \  else if s0 == \"\"\n        then return true\n    else if s1 == \"\"\n    \
    \    then return true\n    else if s0 == \"\"\n        then return true\n    else\
    \ if s1 == \"\"\n        then return true\n    else if s0 == \"\"\n        then\
    \ return true\n    else if s1 == \"\"\n        then return true\n    else if s0\
    \ == \"\"\n        then return true\n    else if s1 == \"\"\n        then return\
    \ true\n    else if s0 == \"\"\n        then return true\n    else if s1 == \"\
    \"\n        then return true\n    else if s0 == \"\"\n        then return true\n\
    \    else if s1 == \"\"\n        then return true\n    else if s0 == \"\"\n  \
    \      then return true\n    else if s1 == \"\"\n        then return true\n  \
    \  else if s0 == \"\"\n        then return true\n    else if s1 == \"\"\n    \
    \    then return true\n    else if s0 == \"\"\n        then return true\n    else\
    \ if s1 == \"\"\n        then return true\n    else if s0 == \"\"\n        then\
    \ return true\n    else if s1 == \"\"\n        then return true\n    else if s0\
    \ == \"\"\n        then return true\n    else if s1 == \"\"\n        then return\
    \ true\n    else if s0 == \"\"\n        then return true\n    else if s1 == \"\
    \"\n\nusing Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpmvie8vyc.jl:19\nin expression starting at /tmp/tmpmvie8vyc.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    len0 = length(s0)\n  \
    \  len1 = length(s1)\n    if len0 != len1\n        return false\n    else\n  \
    \      for (i0, i1) in zip(xrange(len0), xrange(len1))\n            if s0[i0]\
    \ != s1[i1]\n                return false\n    return true\nend\n</cell>\n<code\
    \ language=julia-1.3>\n\"\"\"\n    Check if two words have the same characters.\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd',\
    \ 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n\
    \    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd',\
    \ 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n\
    \    False\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = same_chars;\n\
    \t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"\
    abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\")\
    \ == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"\
    abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl_h35ujs.jl:27\nin expression starting at\
    \ /tmp/tmpl_h35ujs.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars_chars_idx::Array{Int,1}\
    \ = zeros(Int, length(s0))\n    for (i,c) in enumerate(s0)\n        same_chars_chars_idx[i]\
    \ = same_chars_chars_idx[i] + 1 if c == s1[i] else 0\n    return same_chars_chars_idx\
    \ == length(s0)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"\
    dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\t@test(candidate(\"aabb\", \"\
    aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmp2ff2skg7.jl:18 expected \"\
    end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2ff2skg7.jl:19\n\
    in expression starting at /tmp/tmp2ff2skg7.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars(s0, s1) = length(s0)\
    \ == length(s1) && all(char(s0[i]) == char(s1[i]) for i in 1:length(s0))\nend\n\
    </cell>\n<code language=julia-1.3>\n\"\"\"\n    Check if two words have the same\
    \ characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n\
    \    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"\
    dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\t@test(candidate(\"aabb\", \"\
    aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj18d263s.jl:19\nin expression starting at\
    \ /tmp/tmpj18d263s.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars_chars_ = same_chars_chars_(s0,\
    \ s1)\n    if same_chars_chars_ == true\n        same_chars_chars_ = same_chars_chars_(s1,\
    \ s0)\n    end\n    return same_chars_chars_\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"\
    dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\t@test(candidate(\"aabb\", \"\
    aaccc\") == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpx6kogmx5.jl:28\n  Test threw exception\n\
    \  Expression: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n  UndefVarError:\
    \ same_chars_chars_ not defined\n  Stacktrace:\n   [1] same_chars(s0::String,\
    \ s1::String)\n     @ Main /tmp/tmpx6kogmx5.jl:17\n   [2] macro expansion\n  \
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpx6kogmx5.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpx6kogmx5.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpx6kogmx5.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"abcd\", \"dddddddabc\") == true\n  UndefVarError: same_chars_chars_\
    \ not defined\n  Stacktrace:\n   [1] same_chars(s0::String, s1::String)\n    \
    \ @ Main /tmp/tmpx6kogmx5.jl:17\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpx6kogmx5.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpx6kogmx5.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpx6kogmx5.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"dddddddabc\", \"abcd\") == true\n  UndefVarError: same_chars_chars_\
    \ not defined\n  Stacktrace:\n   [1] same_chars(s0::String, s1::String)\n    \
    \ @ Main /tmp/tmpx6kogmx5.jl:17\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpx6kogmx5.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpx6kogmx5.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpx6kogmx5.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"eabcd\", \"dddddddabc\") == false\n  UndefVarError: same_chars_chars_\
    \ not defined\n  Stacktrace:\n   [1"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpx6kogmx5.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars = true\n  \
    \  for c in s0:\n        if c not in s1:\n            same_chars = false\n   \
    \         break\n    return same_chars\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptk9l5xs9.jl:19\nin expression starting at\
    \ /tmp/tmptk9l5xs9.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars(s0, s1) ||\
    \ same_chars(s1, s0)\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    Check\
    \ if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"\
    dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\t@test(candidate(\"aabb\", \"\
    aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbj00yo50.jl:19\nin expression starting at\
    \ /tmp/tmpbj00yo50.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    len0 = length(s0)\n  \
    \  len1 = length(s1)\n    if len0 != len1\n        return false\n    else\n  \
    \      chars = chars(s0)\n        chars = chars[0..len1-len0]\n        chars =\
    \ chars[1..len0]\n        chars = chars[1..len1]\n        chars = chars[0..len1-len0]\n\
    \        return chars == chars\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6ko7pvep.jl:30\nin expression starting at\
    \ /tmp/tmp6ko7pvep.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\
    \ \n    then return false \n    else if length(s0) == 0 \n    then return true\
    \ \n    else if length(s0) == 1 \n    then return s0 == s1 \n    else \n     \
    \   local i::Int = 0\n        local j::Int = 0\n        local k::Int = 0\n   \
    \     local l::Int = 0\n        local m::Int = 0\n        local n::Int = 0\n \
    \       local o::Int = 0\n        local p::Int = 0\n        local q::Int = 0\n\
    \        local r::Int = 0\n        local s::Int = 0\n        local t::Int = 0\n\
    \        local u::Int = 0\n        local v::Int = 0\n        local w::Int = 0\n\
    \        local x::Int = 0\n        local y::Int = 0\n        local z::Int = 0\n\
    \        local a::Int = 0\n        local b::Int = 0\n        local c::Int = 0\n\
    \        local d::Int = 0\n        local e::Int = 0\n        local f::Int = 0\n\
    \        local g::Int = 0\n        local h::Int = 0\n        local i::Int = 0\n\
    \        local j::Int = 0\n        local k::Int = 0\n        local l::Int = 0\n\
    \        local m::Int = 0\n        local n::Int = 0\n        local o::Int = 0\n\
    \        local p::Int = 0\n        local q::Int = 0\n        local r::Int = 0\n\
    \        local s::Int = 0\n        local t::Int = 0\n        local u::Int = 0\n\
    \        local v::Int = 0\n        local w::Int = 0\n        local x::Int = 0\n\
    \        local y::Int = 0\n        local z::Int = 0\n        local a::Int = 0\n\
    \        local b::Int = 0\n        local c::Int = 0\n        local d::Int = 0\n\
    \        local e::Int = 0\n        local f::Int = 0\n        local g::Int = 0\n\
    \        local h::Int = 0\n        local i::Int = 0\n        local j::Int = 0\n\
    \        local k::Int = 0\n        local l::Int = 0\n        local m::Int = 0\n\
    \        local n::Int = 0\n        local o::Int = 0\n        local p::Int = 0\n\
    \        local q::Int = 0\n        local r::Int = 0\n        local s::Int = 0\n\
    \        local t::Int = 0\n        local u::Int = 0\n        local v::Int = 0\n\
    \        local w::Int = 0\n\nusing Test\n\n@testset begin\n\ncandidate = same_chars;\n\
    \t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"\
    abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\")\
    \ == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"\
    abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmprkhwcu0t.jl:18\nin expression starting at /tmp/tmprkhwcu0t.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars(s0, s1) = length(s0)\
    \ == length(s1) && all(char(c) == char(s0[c]) for c in s0)\nend\n</cell>\n<code\
    \ language=julia-1.1>\n\"\"\"\n    Check if two words have the same characters.\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd',\
    \ 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n\
    \    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd',\
    \ 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n\
    \    False\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = same_chars;\n\
    \t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"\
    abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\")\
    \ == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"\
    abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd6ljdba6.jl:19\nin expression starting at\
    \ /tmp/tmpd6ljdba6.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    \n    if s0 == s1 then\
    \ return true\n    \n    len0 = length(s0)\n    len1 = length(s1)\n    \n    if\
    \ len0 > len1 then return false\n    \n    i = 0\n    j = 0\n    \n    while i\
    \ < len0 and j < len1 do\n        if s0[i] == s1[j] then return true\n       \
    \ i = i + 1\n        j = j + 1\n    end\n    \n    return false\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of times a substring\
    \ appears in a string.\nFor example, if the string is 'abcabcbb', the function\
    \ should return 3 since 'abc' appears 3 times.\nIf the string is 'aaaaaa', the\
    \ function should return 0 since 'aaaa' does not appear in the string.\nIf the\
    \ string is '', the function should return 0 since an empty string does not appear\
    \ in the string.\nIf the string is 'bbbbb', the function should return 1 since\
    \ 'b' appears 1 time.\nusing Test\n\n@testset begin\n\ncandidate = same_chars;\n\
    \t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"\
    abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\")\
    \ == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"\
    abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpk4wsd2sv.jl:18\nin expression starting at /tmp/tmpk4wsd2sv.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars(s0, s1) = length(s0)\
    \ == length(s1) && all(char(s0[i]) == char(s1[i]) for i in 1:length(s0))\nend\n\
    </cell>\n<code language=julia-1.4>\n\"\"\"\n    Check if two words have the same\
    \ characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n\
    \    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"\
    dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\t@test(candidate(\"aabb\", \"\
    aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnbczc_9z.jl:19\nin expression starting at\
    \ /tmp/tmpnbczc_9z.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars = true\n  \
    \  for c in s0:\n        if c not in s1:\n            same_chars = false\n   \
    \         break\n    return same_chars\nend\nusing Test\n\n@testset begin\n\n\
    candidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"\
    dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\t@test(candidate(\"aabb\", \"\
    aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwws91gvj.jl:19\nin expression starting at\
    \ /tmp/tmpwws91gvj.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars = true\n  \
    \  for c in s0:\n        if c not in s1:\n            same_chars = false\n   \
    \         break\n    return same_chars\nend\nusing Test\n\n@testset begin\n\n\
    candidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"\
    dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\t@test(candidate(\"aabb\", \"\
    aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprbulom6f.jl:19\nin expression starting at\
    \ /tmp/tmprbulom6f.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars(s0, s1) = length(s0)\
    \ == length(s1) && all(char(s0) == char(s1) for char in s0)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = same_chars;\n\
    \t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"\
    abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\")\
    \ == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"\
    abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbys9m7b6.jl:19\nin expression starting at\
    \ /tmp/tmpbys9m7b6.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    len0 = length(s0)\n  \
    \  len1 = length(s1)\n    if len0 != len1\n        false\n    else\n        forall\
    \ i::Int in\n            if s0[i] != s1[i]\n                false\n          \
    \  else\n                same_chars(s0, s1)\n    end\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that checks if a word is a palindrome.\nA palindrome is\
    \ a word that is the same forwards and backwards.\nFor example, \u201Cradar\u201D\
    \ is a palindrome, but \u201Cracecar\u201D is not a palindrome.\nWrite a function\
    \ that takes a string and checks if it is a palindrome.\nIf the string is a palindrome,\
    \ return true.\nIf the string is not a palindrome, return false.\nHint: You may\
    \ want to use recursion.\nusing Test\n\n@testset begin\n\ncandidate = same_chars;\n\
    \t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"\
    abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\")\
    \ == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"\
    abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmp695yyo19.jl:19 expected \"\
    end\", got \"i\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp695yyo19.jl:22\n\
    in expression starting at /tmp/tmp695yyo19.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    \n    \"\"\"\n    Check\
    \ if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp6qivdrzs.jl:16\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6qivdrzs.jl:1\n\
    in expression starting at /tmp/tmp6qivdrzs.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars = true\n  \
    \  for c in s0:\n        if c not in s1:\n            same_chars = false\n   \
    \         break\n    return same_chars\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp43dsxzni.jl:19\nin expression starting at\
    \ /tmp/tmp43dsxzni.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars = true\n  \
    \  for c in s0:\n        if c not in s1:\n            same_chars = false\n   \
    \         break\n    return same_chars\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu00_6kqo.jl:19\nin expression starting at\
    \ /tmp/tmpu00_6kqo.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars(s0, s1) = length(s0)\
    \ == length(s1) && all(char(s0) == char(s1) for char in s0)\nend\n</cell>\n<code\
    \ language=julia-1.3>\nusing Test\n\n@testset begin\n\ncandidate = same_chars;\n\
    \t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"\
    abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\")\
    \ == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"\
    abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpofovblb_.jl:19\nin expression starting at\
    \ /tmp/tmpofovblb_.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if s0 == s1 then return\
    \ true\n    if s0 == \"\" then return false\n    if s1 == \"\" then return false\n\
    \    if s0 == s1[1..] then return true\n    if s1 == s1[1..] then return true\n\
    \    if s0 == s1[1..] then return false\n    if s1 == s1[1..] then return false\n\
    \    return false\nend\n\"\"\"\n    Check if two words have the same characters.\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd',\
    \ 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n\
    \    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd',\
    \ 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n\
    \    False\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = same_chars;\n\
    \t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"\
    abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\")\
    \ == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"\
    abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpwqbavtsf.jl:17\nin expression starting at /tmp/tmpwqbavtsf.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars = true\n  \
    \  for c in s0:\n        if c not in s1:\n            same_chars = false\n   \
    \         break\n    return same_chars\nend\n</cell>\n<code language=julia-1.4>\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzug1kujy.jl:19\nin expression starting at\
    \ /tmp/tmpzug1kujy.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars(s0, s1) ||\
    \ same_chars(s1, s0)\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Check\
    \ if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"\
    dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\t@test(candidate(\"aabb\", \"\
    aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpob_4js8l.jl:19\nin expression starting at\
    \ /tmp/tmpob_4js8l.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars = true\n  \
    \  for c in s0:\n        if c not in s1:\n            same_chars = false\n   \
    \         break\n    return same_chars\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphwtgec6b.jl:19\nin expression starting at\
    \ /tmp/tmphwtgec6b.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars(s0, s1) ||\
    \ same_chars(s1, s0)\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    Check\
    \ if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"\
    dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\t@test(candidate(\"aabb\", \"\
    aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplaz2n46h.jl:19\nin expression starting at\
    \ /tmp/tmplaz2n46h.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if s0 == s1 \n    then\
    \ true \n    else false \n    end\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\"\
    ) == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"\
    eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\
    \t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"true\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpdk_e11nv.jl:18\nin expression starting at /tmp/tmpdk_e11nv.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    len0 = length(s0)\n  \
    \  len1 = length(s1)\n    if len0 != len1\n        return false\n    elseif len0\
    \ == 0\n        return true\n    else\n        chars = chars(s0)\n        chars\
    \ = chars[2:]\n        chars = chars[2:]\n        chars = chars[2:]\n        chars\
    \ = chars[2:]\n        chars = chars[2:]\n        chars = chars[2:]\n        chars\
    \ = chars[2:]\n        chars = chars[2:]\n        chars = chars[2:]\n        chars\
    \ = chars[2:]\n        chars = chars[2:]\n        chars = chars[2:]\n        chars\
    \ = chars[2:]\n        chars = chars[2:]\n        chars = chars[2:]\n        chars\
    \ = chars[2:]\n        chars = chars[2:]\n        chars = chars[2:]\n        chars\
    \ = chars[2:]\n        chars = chars[2:]\n        chars = chars[2:]\n        chars\
    \ = chars[2:]\n        chars = chars[2:]\n        chars = chars[2:]\n        chars\
    \ = chars[2:]\n        chars = chars[2:]\n        chars = chars[2:]\n        chars\
    \ = chars[2:]\n        chars = chars[2:]\n        chars = chars[2:]\n        chars\
    \ = chars[2:]\n        chars = chars[2:]\n        chars = chars[2:]\n        chars\
    \ = chars[2:]\n        chars = chars[2:]\n        chars = chars[2:]\n        chars\
    \ = chars[2:]\n        chars = chars[2:]\n        chars = chars[2:]\n        chars\
    \ = chars[2:]\n        chars = chars[2:]\n        chars = chars[2:]\n        chars\
    \ = chars[2:]\n        chars = chars[2:]\n        chars = chars[2:]\n        chars\
    \ = chars[2:]\n        chars = chars[2:]\n        chars = chars[2:]\n        chars\
    \ = chars[2:]\n        chars = chars[2:]\n        chars = chars[2:]\n        chars\
    \ = chars[2:]\n        chars = chars[2:]\n        chars = chars[2:]\n        chars\
    \ = chars[2:]\n        chars = chars[2:]\n        chars = chars[2:]\n        chars\
    \ = chars[2:]\n        chars = chars[\nusing Test\n\n@testset begin\n\ncandidate\
    \ = same_chars;\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\
    \t@test(candidate(\"abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\"\
    , \"abcd\") == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\
    \t@test(candidate(\"abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\") == false)\n\t@test(candidate(\"aabb\", \"aaccc\") ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwl1nkqhr.jl:25\nin expression\
    \ starting at /tmp/tmpwl1nkqhr.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars = true\n  \
    \  for c in s0:\n        if c not in s1:\n            same_chars = false\n   \
    \         break\n    return same_chars\nend\n</cell>\n<code language=julia-1.4>\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpawvjr2m6.jl:19\nin expression starting at\
    \ /tmp/tmpawvjr2m6.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars = true\n  \
    \  for c in s0:\n        if c not in s1:\n            same_chars = false\n   \
    \         break\n    return same_chars\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6po3wvxe.jl:19\nin expression starting at\
    \ /tmp/tmp6po3wvxe.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars = false\n \
    \   for c in s0:\n        if c in s1:\n            same_chars = true\n       \
    \     break\n    return same_chars\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = same_chars;\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\
    \t@test(candidate(\"abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\"\
    , \"abcd\") == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\
    \t@test(candidate(\"abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\") == false)\n\t@test(candidate(\"aabb\", \"aaccc\") ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3kdgldix.jl:19\nin expression starting at\
    \ /tmp/tmp3kdgldix.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    \n    len0 = length(s0)\n\
    \    len1 = length(s1)\n    \n    if len0 != len1\n        return false\n    \n\
    \    i = 0\n    while i < len0\n        if s0[i] != s1[i]\n            return\
    \ false\n        i += 1\n    \n    return true\nend\n</cell>\n<code language=julia-1.4>\n\
    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp69ky_jb6.jl:32\nin expression starting at\
    \ /tmp/tmp69ky_jb6.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    \n    if length(s0) ==\
    \ length(s1)\n        same_chars(s0, s1)\n    else\n        same_chars(s0, s1)\n\
    \    end\nend\n</cell>\n<text>\nExercise 9\nWrite a function that checks if two\
    \ words are anagrams of each other.\nHint: Use same_chars.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"\
    dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\t@test(candidate(\"aabb\", \"\
    aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwgqxnt8u.jl:24\nin expression starting at\
    \ /tmp/tmpwgqxnt8u.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars = true\n  \
    \  for c in s0:\n        if c not in s1:\n            same_chars = false\n   \
    \         break\n    return same_chars\nend\n</cell>\n<code language=julia-1.3>\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0o952np8.jl:19\nin expression starting at\
    \ /tmp/tmp0o952np8.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars(s0, s1) = length(s0)\
    \ == length(s1) && all(char(s0[i]) == char(s1[i]) for i in 1:length(s0))\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    Check if two words have the same\
    \ characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n\
    \    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"\
    dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\t@test(candidate(\"aabb\", \"\
    aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbk50tzng.jl:19\nin expression starting at\
    \ /tmp/tmpbk50tzng.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars = true\n  \
    \  for c in s0:\n        if c not in s1:\n            same_chars = false\n   \
    \         break\n    return same_chars\nend\n</cell>\n<code language=julia-1.4>\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5junwf0p.jl:19\nin expression starting at\
    \ /tmp/tmp5junwf0p.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars(s0, s1) ||\
    \ same_chars(s1, s0)\nend\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ checks if a word is palindrome or not.\nThe word is a palindrome if it reads\
    \ the same backward as forward.\nFor example, \u201Cracecar\u201D is a palindrome,\
    \ but \u201Cracecar\u201D is not a palindrome of \u201Cracecar\u201D.\nWrite a\
    \ function that checks if a word is a palindrome or not.\nThe word is a palindrome\
    \ if it reads the same backward as forward.\nFor example, \u201Cracecar\u201D\
    \ is a palindrome, but \u201Cracecar\u201D is not a palindrome of \u201Cracecar\u201D\
    .\nWrite a function that checks if a word is a palindrome or not.\nThe word is\
    \ a palindrome if it reads the same backward as forward.\nFor example, \u201C\
    racecar\u201D is a palindrome, but \u201Cracecar\u201D is not a palindrome of\
    \ \u201Cracecar\u201D.\nWrite a function that checks if a word is a palindrome\
    \ or not.\nThe word is a palindrome if it reads the same backward as forward.\n\
    For example, \u201Cracecar\u201D is a palindrome, but \u201Cracecar\u201D is not\
    \ a palindrome of \u201Cracecar\u201D.\nWrite a function that checks if a word\
    \ is a palindrome or not.\nThe word is a palindrome if it reads the same backward\
    \ as forward.\nFor example, \u201Cracecar\u201D is a palindrome, but \u201Cracecar\u201D\
    \ is not a palindrome of \u201Cracecar\u201D.\nWrite a function that checks if\
    \ a word is a palindrome or not.\nThe word is a palindrome if it reads the same\
    \ backward as forward.\nFor example, \u201Cracecar\u201D is a palindrome, but\
    \ \u201Cracecar\u201D is not a palindrome of \u201Cracecar\u201D.\nWrite a function\
    \ that checks if a word is a palindrome or not.\nThe word is a palindrome if it\
    \ reads the same backward as forward.\nFor example, \u201Cracecar\u201D is a palindrome,\
    \ but \u201Cracecar\u201D is not a palindrome of \u201Cracecar\u201D.\nWrite a\
    \ function that checks if a word is a palindrome or not.\nThe word is a palindrome\
    \ if it reads the same backward as forward.\nFor example, \u201Cracecar\u201D\
    \ is a palindrome, but \u201Cracecar\u201D is not a palindrome of \u201Cracecar\u201D\
    .\nWrite a function that checks if a word is a palindrome or not.\nThe word is\
    \ a palindrome if it reads the same backward as forward.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"\
    dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\t@test(candidate(\"aabb\", \"\
    aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr_ow2eif.jl:19\nin expression starting at\
    \ /tmp/tmpr_ow2eif.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    \n    same_chars = true\n\
    \    \n    for c in s0:\n        if c not in s1:\n            same_chars = false\n\
    \            break\n    \n    return same_chars\n</code>\n<|/ a dscore=0 |>\n\
    <| a dscore=0 |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = same_chars;\n\
    \t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"\
    abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\")\
    \ == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"\
    abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkjwmg6j0.jl:21\nin expression starting at\
    \ /tmp/tmpkjwmg6j0.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars(s0, s1)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars(s0, s1) = length(s0)\
    \ == length(s1) && all(char(s0[i]) == char(s1[i]) | same_chars(s0[i..], s1[i..])\
    \ | same_chars(s0[i..], s1[i..]) | same_chars(s0[i..], s1[i..]) | same_chars(s0[i..],\
    \ s1[i..]) | same_chars(s0[i..], s1[i..]) | same_chars(s0[i..], s1[i..]) | same_chars(s0[i..],\
    \ s1[i..]) | same_chars(s0[i..], s1[i..]) | same_chars(s0[i..], s1[i..]) | same_chars(s0[i..],\
    \ s1[i..]) | same_chars(s0[i..], s1[i..]) | same_chars(s0[i..], s1[i..]) | same_chars(s0[i..],\
    \ s1[i..]) | same_chars(s0[i..], s1[i..]) | same_chars(s0[i..], s1[i..]) | same_chars(s0[i..],\
    \ s1[i..]) | same_chars(s0[i..], s1[i..]) | same_chars(s0[i..], s1[i..]) | same_chars(s0[i..],\
    \ s1[i..]) | same_chars(s0[i..], s1[i..]) | same_chars(s0[i..], s1[i..]) | same_chars(s0[i..],\
    \ s1[i..]) | same_chars(s0[i..], s1[i..]) | same_chars(s0[i..], s1[i..]) | same_chars(s0[i..],\
    \ s1[i..]) | same_chars(s0[i..], s1[i..]) | same_chars(s0[i..], s1[i..]) | same_chars(s0[i..],\
    \ s1[i..]) | same_chars(s0[i..], s1[i..]) | same_chars(s0[i..], s1[i..]) | same_chars(s0[i..],\
    \ s1[i..]) | same_chars(s0[i..], s1[i..]) | same_chars(s0[i..], s1[i..]) | same_chars(s0[i..],\
    \ s1[i..]) | same_chars(s0[i..], s1[i..]) | same_chars(s0[i..], s1[i..]) | same_chars(s0[i..],\
    \ s1[i..]) | same_chars(s0[i..], s1[i..]) | same_chars(s0[i..], s1[i..]) | same_chars(s0[i..],\
    \ s1[i..]) | same_chars(s0\nusing Test\n\n@testset begin\n\ncandidate = same_chars;\n\
    \t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"\
    abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\")\
    \ == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"\
    abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"]\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp6dn0_5u1.jl:17\nin expression starting at /tmp/tmp6dn0_5u1.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars(s0, s1) ||\
    \ (same_chars(s1[end-1:], s0) && same_chars(s0, s1[end-1:]))\nend\n</cell>\n<code\
    \ language=julia-1.1>\n\"\"\"\n    Check if two words have the same characters.\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd',\
    \ 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n\
    \    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd',\
    \ 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n\
    \    False\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = same_chars;\n\
    \t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"\
    abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\")\
    \ == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"\
    abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"(end - 1):\" range\
    \ expression \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpnk1qwwmt.jl:17\n\
    in expression starting at /tmp/tmpnk1qwwmt.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    len = length(s0)\n   \
    \ if len == length(s1)\n        for (i, c) in enumerate(s0)\n            if c\
    \ != s1[i]\n                return false\n        return true\n    else\n    \
    \    return false\n    end\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n\
    \    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu5tjrtc6.jl:27\nin expression starting at\
    \ /tmp/tmpu5tjrtc6.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    len0 = length(s0)\n  \
    \  len1 = length(s1)\n    if len0 != len1\n        return false\n    else\n  \
    \      for (i,c) in zip(s0,s1)\n            if c != i\n                return\
    \ false\n    return true\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\",\
    \ \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\"\
    ) == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"\
    eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\
    \t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3x0_85_e.jl:27\nin expression starting at\
    \ /tmp/tmp3x0_85_e.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars(s0, s1) = s1==s0\
    \ || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0\
    \ || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0\
    \ || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0\
    \ || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0\
    \ || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0\
    \ || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0\
    \ || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0\
    \ || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0\
    \ || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0\
    \ || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0\
    \ || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0\
    \ || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0\
    \ || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0\
    \ || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0\
    \ || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0\
    \ || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s\nusing Test\n\n@testset begin\n\
    \ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"\
    dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\t@test(candidate(\"aabb\", \"\
    aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpau5fj8zw.jl:16\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpau5fj8zw.jl:1\n\
    in expression starting at /tmp/tmpau5fj8zw.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if s0 == s1 then return\
    \ true\n    if s0 == \"\" then return false\n    if s1 == \"\" then return false\n\
    \    \n    i = 0\n    j = 0\n    while i < length(s0) and j < length(s1) do\n\
    \        if s0[i] == s1[j] then return true\n        i += 1\n        j += 1\n\
    \    end\n    return false\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n\
    \    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp0uiztjl3.jl:17\nin expression starting at /tmp/tmp0uiztjl3.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    len = length(s0)\n   \
    \ if len == length(s1)\n        for (i, c) in zip(s0, s1)\n            if i !=\
    \ c\n                return false\n        return true\n    else\n        return\
    \ false\nend\n</cell>\n<code language=julia-1.3>\nusing Test\n\n@testset begin\n\
    \ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"\
    dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\t@test(candidate(\"aabb\", \"\
    aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0c5v8y45.jl:26\nin expression starting at\
    \ /tmp/tmp0c5v8y45.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars = true\n  \
    \  for c in s0:\n        if c not in s1:\n            same_chars = false\n   \
    \         break\n    return same_chars\nend\n</cell>\n<code language=julia-1.1>\n\
    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpeijthcp1.jl:19\nin expression starting at\
    \ /tmp/tmpeijthcp1.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars = true\n  \
    \  for c in s0:\n        if c not in s1:\n            same_chars = false\n   \
    \         break\n    return same_chars\nend\n</cell>\n<code language=julia-1.3>\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphob_1to6.jl:19\nin expression starting at\
    \ /tmp/tmphob_1to6.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars = true\n  \
    \  for c in s0:\n        if c not in s1:\n            same_chars = false\n   \
    \         break\n    return same_chars\nend\nusing Test\n\n@testset begin\n\n\
    candidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"\
    dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\t@test(candidate(\"aabb\", \"\
    aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4x90mjpd.jl:19\nin expression starting at\
    \ /tmp/tmp4x90mjpd.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    \n    \"\"\"\n    Check\
    \ if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    \n    if s0 == s1:\n      \
    \  return True\n    \n    len0 = length(s0)\n    len1 = length(s1)\n    \n   \
    \ if len0 > len1:\n        s0, s1 = s1, s0\n    \n    i = 0\n    j = 0\n    \n\
    \    while i < len0 and j < len1:\n        if s0[i] != s1[j]:\n            return\
    \ False\n        i += 1\n        j += 1\n    \n    if i == len0:\n        return\
    \ True\n    \n    if j == len1:\n        return True\n    \n    return False\n\
    </cell>\n<cell>\n\"\"\"\nCheck if two words have the same characters.\n>>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\nTrue\n>>> same_chars('abcd', 'dddddddabc')\nTrue\n>>>\
    \ same_chars('dddddddabc', 'abcd')\nTrue\n>>> same_chars('eabcd', 'dddddddabc')\n\
    False\n>>> same_chars('abcd', 'dddddddabce')\nFalse\n>>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\nFalse\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = same_chars;\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\
    \t@test(candidate(\"abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\"\
    , \"abcd\") == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\
    \t@test(candidate(\"abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\") == false)\n\t@test(candidate(\"aabb\", \"aaccc\") ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5m21dixj.jl:35\nin expression starting at\
    \ /tmp/tmp5m21dixj.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    \n    same_chars = true\n\
    \    \n    for c in s0:\n        if c not in s1:\n            same_chars = false\n\
    \            break\n    \n    return same_chars\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr19mx0e7.jl:21\nin expression starting at\
    \ /tmp/tmpr19mx0e7.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    len0 = length(s0)\n  \
    \  len1 = length(s1)\n    if len0 != len1\n        return false\n    else\n  \
    \      chars = chars(s0)\n        for c in chars\n            if c != chars(s1)\n\
    \                return false\n        end\n        return true\n    end\nend\n\
    </cell>\n<text>\nExercise 3: Write a function that checks if two words are anagrams\
    \ of each other. An anagram is a word that has the same letters in alphabetical\
    \ order.\nusing Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp50rhxq2r.jl:30\nin expression starting at\
    \ /tmp/tmp50rhxq2r.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    \n    if s0 == s1 \n \
    \       then return true\n    else if s0 == \"\"\n        then return true\n \
    \   else if s1 == \"\"\n        then return true\n    else if s0 == \"\"\n   \
    \     then return false\n    else if s1 == \"\"\n        then return false\n \
    \   else if s0 == s1\n        then return true\n    else if s0 == \"\"\n     \
    \   then return false\n    else if s1 == \"\"\n        then return false\n   \
    \ else if s0 == s1\n        then return true\n    else if s0 == \"\"\n       \
    \ then return false\n    else if s1 == \"\"\n        then return false\n    else\
    \ if s0 == s1\n        then return true\n    else if s0 == \"\"\n        then\
    \ return false\n    else if s1 == \"\"\n        then return false\n    else if\
    \ s0 == s1\n        then return true\n    else if s0 == \"\"\n        then return\
    \ false\n    else if s1 == \"\"\n        then return false\n    else if s0 ==\
    \ s1\n        then return true\n    else if s0 == \"\"\n        then return false\n\
    \    else if s1 == \"\"\n        then return false\n    else if s0 == s1\n   \
    \     then return true\n    else if s0 == \"\"\n        then return false\n  \
    \  else if s1 == \"\"\n        then return false\n    else if s0 == s1\n     \
    \   then return true\n    else if s0 == \"\"\n        then return false\n    else\
    \ if s1 == \"\"\n        then return false\n    else if s0 == s1\n        then\
    \ return true\n    else if s0 == \"\"\n        then return false\n    else if\
    \ s1 == \"\"\n        then return false\n    else if s0 == s1\n        then return\
    \ true\n    else if s0 == \"\"\n        then return false\n    else if s1 == \"\
    \"\n        then return false\n    else if s0 == s1\n        then return true\n\
    \    else if s0 == \"\"\n        then return false\n    else if s1 == \"\"\n \
    \       then return false\n    else if s0 == s1\n        then return true\n  \
    \  else if s0 == \"\"\n        then return false\n    else if s1 == \"\"\n   \
    \     then return false\n    else if s0 == s1\n        then return true\n    else\
    \ if s0 == \"\"\n        then return false\n    else if s1 == \"\"\n        then\
    \ return false\n    else if s0 == s1\n        then return true\n    else if s0\
    \ == \"\"\n\nusing Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpub0xzcmi.jl:19\nin expression starting at /tmp/tmpub0xzcmi.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    \n    same_chars = true\n\
    \    \n    len0 = length(s0)\n    len1 = length(s1)\n    \n    if len0 != len1\n\
    \        same_chars = false\n    end\n    \n    for i::Int in 0:len0-1\n     \
    \   if s0[i] != s1[i]\n            same_chars = false\n            break\n   \
    \     end\n    end\n    \n    return same_chars\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that checks if a word is palindrome.\nThe word is a string\
    \ with only lowercase letters.\nThe function should return true if the word is\
    \ a palindrome and false otherwise.\nThe function should ignore the case of the\
    \ letters.\nThe function should ignore the case of the letters.\nThe function\
    \ should ignore the case of the letters.\nThe function should ignore the case\
    \ of the letters.\nThe function should ignore the case of the letters.\nThe function\
    \ should ignore the case of the letters.\nThe function should ignore the case\
    \ of the letters.\nThe function should ignore the case of the letters.\nThe function\
    \ should ignore the case of the letters.\nThe function should ignore the case\
    \ of the letters.\nThe function should ignore the case of the letters.\nThe function\
    \ should ignore the case of the letters.\nThe function should ignore the case\
    \ of the letters.\nThe function should ignore the case of the letters.\nThe function\
    \ should ignore the case of the letters.\nThe function should ignore the case\
    \ of the letters.\nThe function should ignore the case of the letters.\nThe function\
    \ should ignore the case of the letters.\nThe function should ignore the case\
    \ of the letters.\nThe function should ignore the case of the letters.\nThe function\
    \ should ignore the case of the letters.\nThe function should ignore the case\
    \ of the letters.\nThe function should ignore the case of the letters.\nThe function\
    \ should ignore the case of the letters.\nThe function should ignore the case\
    \ of the letters.\nThe function should ignore the case of the letters.\nThe function\
    \ should ignore the case of the letters.\nThe function should ignore the case\
    \ of the letters.\nThe function should ignore the case of the letters.\nThe function\
    \ should ignore the case of the letters.\nThe function should ignore the case\
    \ of the letters.\nThe function should ignore the case of the letters.\nThe function\
    \ should ignore the case of the letters.\nThe function should ignore the case\
    \ of the letters.\nThe function should ignore the case of the letters.\nThe function\
    \ should ignore the case of the letters.\nThe function should ignore the case\
    \ of the letters.\nThe function should ignore the case of the letters.\nThe \n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpytlbbtkw.jl:36\nin expression starting at\
    \ /tmp/tmpytlbbtkw.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    \n    \"\"\"\n    Check\
    \ if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpcp3f104w.jl:16\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpcp3f104w.jl:1\n\
    in expression starting at /tmp/tmpcp3f104w.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if s0 == s1 then return\
    \ true\n    else if s0 == \"\" then return true\n    else if s1 == \"\" then return\
    \ true\n    else if s0 == s1 then return true\n    else if s0 == \"\" then return\
    \ true\n    else if s1 == \"\" then return true\n    else if s0 == s1 then return\
    \ true\n    else if s0 == \"\" then return true\n    else if s1 == \"\" then return\
    \ true\n    else if s0 == s1 then return true\n    else if s0 == \"\" then return\
    \ true\n    else if s1 == \"\" then return true\n    else if s0 == s1 then return\
    \ true\n    else if s0 == \"\" then return true\n    else if s1 == \"\" then return\
    \ true\n    else if s0 == s1 then return true\n    else if s0 == \"\" then return\
    \ true\n    else if s1 == \"\" then return true\n    else if s0 == s1 then return\
    \ true\n    else if s0 == \"\" then return true\n    else if s1 == \"\" then return\
    \ true\n    else if s0 == s1 then return true\n    else if s0 == \"\" then return\
    \ true\n    else if s1 == \"\" then return true\n    else if s0 == s1 then return\
    \ true\n    else if s0 == \"\" then return true\n    else if s1 == \"\" then return\
    \ true\n    else if s0 == s1 then return true\n    else if s0 == \"\" then return\
    \ true\n    else if s1 == \"\" then return true\n    else if s0 == s1 then return\
    \ true\n    else if s0 == \"\" then return true\n    else if s1 == \"\" then return\
    \ true\n    else if s0 == s1 then return true\n    else if s0 == \"\" then return\
    \ true\n    else if s1 == \"\" then return true\n    else if s0 == s1 then return\
    \ true\n    else if s0 == \"\" then return true\n    else if s1 == \"\" then return\
    \ true\n    else if s0 == s1 then return true\n    else if s0 == \"\" then return\
    \ true\n    else if s1 == \"\" then return true\n    else if s0 == s1 then return\
    \ true\n    else if s0 == \"\" then return true\n    else if s1 == \"\" then return\
    \ true\n    else if s0 == s1 then return true\n    else if s0 == \"\" then return\
    \ true\n    else if s1 == \"\" then return true\n    else if s0 == s1 then return\
    \ true\n    else if s0 == \"\" then \nusing Test\n\n@testset begin\n\ncandidate\
    \ = same_chars;\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\
    \t@test(candidate(\"abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\"\
    , \"abcd\") == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\
    \t@test(candidate(\"abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\") == false)\n\t@test(candidate(\"aabb\", \"aaccc\") ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpp_mpblai.jl:17\nin expression starting at /tmp/tmpp_mpblai.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars = true\n  \
    \  for c in s0:\n        if c not in s1:\n            same_chars = false\n   \
    \         break\n    return same_chars\nend\n</cell>\n<code language=julia-1.3>\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpeyrrumgj.jl:19\nin expression starting at\
    \ /tmp/tmpeyrrumgj.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars(s0, s1) = length(s0)\
    \ == length(s1) && all(char(c) == char(s0[c]) for c in s0)\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\n    Check if two words have the same characters.\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd',\
    \ 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n\
    \    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd',\
    \ 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n\
    \    False\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = same_chars;\n\
    \t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"\
    abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\")\
    \ == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"\
    abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkzbiyjbq.jl:19\nin expression starting at\
    \ /tmp/tmpkzbiyjbq.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    \n    len1 = length(s1)\n\
    \    len2 = length(s2)\n    \n    if len1 == 0 or len2 == 0\n        return false\n\
    \    \n    \n    if len1 == len2\n        \n        if len1 == 0\n           \
    \ return true\n        \n        if s0 == s1\n            return true\n      \
    \  \n        return false\n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\
    \ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"\
    dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\t@test(candidate(\"aabb\", \"\
    aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"len2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpvjz28l8j.jl:21\nin expression starting at /tmp/tmpvjz28l8j.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars(s0, s1) = length(s0)\
    \ == length(s1) && all(char(s0) == char(s1) for char in s0)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = same_chars;\n\
    \t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"\
    abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\")\
    \ == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"\
    abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqh7g0ysb.jl:19\nin expression starting at\
    \ /tmp/tmpqh7g0ysb.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    len = length(s0)\n   \
    \ len1 = length(s1)\n    if len != len1\n        return false\n    else\n    \
    \    for i in 0..len\n            if s0[i] != s1[i]\n                return false\n\
    \    return true\nend\n</cell>\n<code language=julia-1.0>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"\
    dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\t@test(candidate(\"aabb\", \"\
    aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuiyrf4gw.jl:27\nin expression starting at\
    \ /tmp/tmpuiyrf4gw.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars = true\n  \
    \  for c in s0:\n        if c not in s1:\n            same_chars = false\n   \
    \         break\n    return same_chars\nend\n</cell>\n<code language=julia-1.4>\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4yd6hyn6.jl:19\nin expression starting at\
    \ /tmp/tmp4yd6hyn6.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    \n    len0 = length(s0)\n\
    \    len1 = length(s1)\n    \n    if len0 == len1\n        true\n    else\n  \
    \      false\n    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n\
    @testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\", \"\
    dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\") ==\
    \ true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"\
    eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\
    \t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9tjiw9sc.jl:27\nin expression starting at\
    \ /tmp/tmp9tjiw9sc.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars = true\n  \
    \  for c in s0:\n        if c not in s1:\n            same_chars = false\n   \
    \         break\n    return same_chars\nend\n</cell>\n<code language=julia-1.1>\n\
    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0a08y746.jl:19\nin expression starting at\
    \ /tmp/tmp0a08y746.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars(s0, s1) = length(s0)\
    \ == length(s1) && all(char(s0[i]) == char(s1[i]) for i in 1:length(s0))\nend\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ True if the string is a palindrome. Recall that palindromes are words that read\
    \ the same backward as forward.\nusing Test\n\n@testset begin\n\ncandidate = same_chars;\n\
    \t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"\
    abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\")\
    \ == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"\
    abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpendd4z7u.jl:19\nin expression starting at\
    \ /tmp/tmpendd4z7u.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    len0 = length(s0)\n  \
    \  len1 = length(s1)\n    if len0 == len1\n        true\n    else\n        false\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"\
    dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\t@test(candidate(\"aabb\", \"\
    aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps3u063j6.jl:25\nin expression starting at\
    \ /tmp/tmps3u063j6.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    \n    same_chars = true\n\
    \    \n    for c in s0:\n        if c not in s1:\n            same_chars = false\n\
    \            break\n    \n    return same_chars\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"\
    dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\t@test(candidate(\"aabb\", \"\
    aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpppj5moyh.jl:21\nin expression starting at\
    \ /tmp/tmpppj5moyh.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars = true\n  \
    \  for c in s0:\n        if c not in s1:\n            same_chars = false\n   \
    \         break\n    return same_chars\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqufnt9rd.jl:19\nin expression starting at\
    \ /tmp/tmpqufnt9rd.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    \n    same_chars = true\n\
    \    \n    if length(s0) == length(s1)\n        \n        for (i0, i1) in zip(xrange(length(s0)),\
    \ xrange(length(s1)))\n            if s0[i0] != s1[i1]\n                same_chars\
    \ = false\n                break\n    end\n    \n    return same_chars\nend\n\
    </cell>\n<code language=julia-0.4>\n\"\"\"\n    Check if two words have the same\
    \ characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n\
    \    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"\
    dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\t@test(candidate(\"aabb\", \"\
    aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbpg7lqws.jl:30\nin expression starting at\
    \ /tmp/tmpbpg7lqws.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    \n    if s0 == s1 then\
    \ return true\n    \n    len0 = length(s0)\n    len1 = length(s1)\n    \n    if\
    \ len0 > len1 then return false\n    \n    i = 0\n    j = 0\n    \n    while i\
    \ < len0 and j < len1 do\n        if s0[i] != s1[j] then return false\n      \
    \  i += 1\n        j += 1\n    end\n    \n    return true\nend\n</cell>\n<text>\n\
    Exercise 10\nWrite a function that checks if a word is palindrome or not.\nThe\
    \ word is a palindrome if it reads the same backward as forward.\nThe word is\
    \ not palindrome if it reads the same forward as backward.\nThe word is not palindrome\
    \ if it reads the same forward and backward.\nThe word is not palindrome if it\
    \ reads the same backward and forward.\nThe word is not palindrome if it reads\
    \ the same backward and backward.\nThe word is not palindrome if it reads the\
    \ same forward and forward.\nThe word is not palindrome if it reads the same forward\
    \ and backward.\nThe word is not palindrome if it reads the same backward and\
    \ forward.\nThe word is not palindrome if it reads the same backward and backward.\n\
    The word is not palindrome if it reads the same forward and forward.\nThe word\
    \ is not palindrome if it reads the same forward and backward.\nThe word is not\
    \ palindrome if it reads the same backward and forward.\nThe word is not palindrome\
    \ if it reads the same backward and backward.\nThe word is not palindrome if it\
    \ reads the same forward and forward.\nThe word is not palindrome if it reads\
    \ the same forward and backward.\nThe word is not palindrome if it reads the same\
    \ backward and forward.\nThe word is not palindrome if it reads the same backward\
    \ and backward.\nThe word is not palindrome if it reads the same forward and forward.\n\
    The word is not palindrome if it reads the same forward and backward.\nThe word\
    \ is not palindrome if it reads the same backward and forward.\nThe word is not\
    \ palindrome if it reads the same backward and backward.\nThe word is not palindrome\
    \ if it reads the same forward and forward.\nThe word is not palindrome if it\
    \ reads the same forward and backward.\nThe word is not palindrome if it reads\
    \ the same backward and forward.\nThe word is not palindrome if it reads the same\
    \ backward and backward.\nThe word is not palindrome if it reads the same forward\
    \ and forward.\nThe word is not palindrome if it reads the same forward and backwar\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp796l5ieg.jl:18\nin expression starting at /tmp/tmp796l5ieg.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars = true\n  \
    \  for c in s0:\n        if c not in s1:\n            same_chars = false\n   \
    \         break\n    return same_chars\nend\n</cell>\n<code language=julia-1.0>\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpiadtqpr6.jl:19\nin expression starting at\
    \ /tmp/tmpiadtqpr6.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars = false\n \
    \   for c in s0:\n        if c in s1:\n            same_chars = true\n       \
    \     break\n    return same_chars\nend\n</cell>\n<code language=julia-1.1>\n\"\
    \"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmyuigjbv.jl:19\nin expression starting at\
    \ /tmp/tmpmyuigjbv.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars(s0, s1) = length(s0)\
    \ == length(s1) && all(char(c) == char(c0) for (c, c0) in zip(s0, s1))\nend\n\
    </cell>\n<code language=julia-1.3>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = same_chars;\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\
    \t@test(candidate(\"abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\"\
    , \"abcd\") == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\
    \t@test(candidate(\"abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\") == false)\n\t@test(candidate(\"aabb\", \"aaccc\") ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8a_tetb8.jl:19\nin expression starting at\
    \ /tmp/tmp8a_tetb8.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    \n    \"\"\"\n    Check\
    \ if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    if s0 == s1:\n        return\
    \ True\n    \n    len0 = length(s0)\n    len1 = length(s1)\n    \n    if len0\
    \ != len1:\n        return False\n    \n    i = 0\n    while i < len0:\n     \
    \   if s0[i] != s1[i]:\n            return False\n        i += 1\n    \n    return\
    \ True\nend\n</cell>\n<code language=julia-1.4>\nusing Test\n\n@testset begin\n\
    \ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"\
    dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\t@test(candidate(\"aabb\", \"\
    aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprmcne1aj.jl:34\nin expression starting at\
    \ /tmp/tmprmcne1aj.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    len = length(s0)\n   \
    \ len1 = length(s1)\n    if len == len1\n        for (c0, c1) in zip(s0, s1)\n\
    \            if c0 != c1\n                then return false\n    else return false\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Check if two words have the\
    \ same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  \
    \  True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"\
    dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\t@test(candidate(\"aabb\", \"\
    aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpvej4izi4.jl:22\nin expression starting at /tmp/tmpvej4izi4.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if s0 == s1 \n    then\
    \ return true\n    else if s0 == \"\"\n    then return true\n    else if s1 ==\
    \ \"\"\n    then return true\n    else if s0 == \"\"\n    then return false\n\
    \    else if s1 == \"\"\n    then return false\n    else if s0 == s1\n    then\
    \ return true\n    else if s0 == \"\"\n    then return false\n    else if s1 ==\
    \ \"\"\n    then return false\n    else if s0 == s1\n    then return true\n  \
    \  else if s0 == \"\"\n    then return false\n    else if s1 == \"\"\n    then\
    \ return false\n    else if s0 == s1\n    then return true\n    else if s0 ==\
    \ \"\"\n    then return false\n    else if s1 == \"\"\n    then return false\n\
    \    else if s0 == s1\n    then return true\n    else if s0 == \"\"\n    then\
    \ return false\n    else if s1 == \"\"\n    then return false\n    else if s0\
    \ == s1\n    then return true\n    else if s0 == \"\"\n    then return false\n\
    \    else if s1 == \"\"\n    then return false\n    else if s0 == s1\n    then\
    \ return true\n    else if s0 == \"\"\n    then return false\n    else if s1 ==\
    \ \"\"\n    then return false\n    else if s0 == s1\n    then return true\n  \
    \  else if s0 == \"\"\n    then return false\n    else if s1 == \"\"\n    then\
    \ return false\n    else if s0 == s1\n    then return true\n    else if s0 ==\
    \ \"\"\n    then return false\n    else if s1 == \"\"\n    then return false\n\
    \    else if s0 == s1\n    then return true\n    else if s0 == \"\"\n    then\
    \ return false\n    else if s1 == \"\"\n    then return false\n    else if s0\
    \ == s1\n    then return true\n    else if s0 == \"\"\n    then return false\n\
    \    else if s1 == \"\"\n    then return false\n    else if s0 == s1\n    then\
    \ return true\n    else if s0 == \"\"\n    then return false\n    else if s1 ==\
    \ \"\"\n    then return false\n    else if s0 == s1\n    then return true\n  \
    \  else if s0 == \"\"\n    then return false\n    else if s1 == \"\"\n    then\
    \ return false\n    else if s0 == s1\n    then return true\n    else if s0 ==\
    \ \"\"\n    then \nusing Test\n\n@testset begin\n\ncandidate = same_chars;\n\t\
    @test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"\
    abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\")\
    \ == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"\
    abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpc1mllwpc.jl:18\nin expression starting at /tmp/tmpc1mllwpc.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars(s0, s1) ||\
    \ same_chars(s1, s0)\nend\n</cell>\n<code language=julia-1.4>\nusing Test\n\n\
    @testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\", \"\
    dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\") ==\
    \ true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"\
    eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\
    \t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzg1072ic.jl:19\nin expression starting at\
    \ /tmp/tmpzg1072ic.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars = true\n  \
    \  for c in s0:\n        if c not in s1:\n            same_chars = false\n   \
    \         break\n    return same_chars\nend\nusing Test\n\n@testset begin\n\n\
    candidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"\
    dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\t@test(candidate(\"aabb\", \"\
    aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprkx30q7q.jl:19\nin expression starting at\
    \ /tmp/tmprkx30q7q.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars = true\n  \
    \  for c in s0:\n        if c not in s1:\n            same_chars = false\n   \
    \         break\n    return same_chars\nend \n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_oz_wck5.jl:19\nin expression starting at\
    \ /tmp/tmp_oz_wck5.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars = true\n  \
    \  for c in s0:\n        if c not in s1:\n            same_chars = false\n   \
    \         break\n    return same_chars\nend\n</cell>\n<code language=julia-1.1>\n\
    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgf1tkb1m.jl:19\nin expression starting at\
    \ /tmp/tmpgf1tkb1m.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if s0 == s1 then return\
    \ true\n    if s0 == \"\" then return false\n    if s1 == \"\" then return false\n\
    \    if s0 == s1 then return true\n    if s0 == \"\" then return false\n    if\
    \ s1 == \"\" then return false\n    if s0 == s1 then return true\n    if s0 ==\
    \ \"\" then return false\n    if s1 == \"\" then return false\n    if s0 == s1\
    \ then return true\n    if s0 == \"\" then return false\n    if s1 == \"\" then\
    \ return false\n    if s0 == s1 then return true\n    if s0 == \"\" then return\
    \ false\n    if s1 == \"\" then return false\n    if s0 == s1 then return true\n\
    \    if s0 == \"\" then return false\n    if s1 == \"\" then return false\n  \
    \  if s0 == s1 then return true\n    if s0 == \"\" then return false\n    if s1\
    \ == \"\" then return false\n    if s0 == s1 then return true\n    if s0 == \"\
    \" then return false\n    if s1 == \"\" then return false\n    if s0 == s1 then\
    \ return true\n    if s0 == \"\" then return false\n    if s1 == \"\" then return\
    \ false\n    if s0 == s1 then return true\n    if s0 == \"\" then return false\n\
    \    if s1 == \"\" then return false\n    if s0 == s1 then return true\n    if\
    \ s0 == \"\" then return false\n    if s1 == \"\" then return false\n    if s0\
    \ == s1 then return true\n    if s0 == \"\" then return false\n    if s1 == \"\
    \" then return false\n    if s0 == s1 then return true\n    if s0 == \"\" then\
    \ return false\n    if s1 == \"\" then return false\n    if s0 == s1 then return\
    \ true\n    if s0 == \"\" then return false\n    if s1 == \"\" then return false\n\
    \    if s0 == s1 then return true\n    if s0 == \"\" then return false\n    if\
    \ s1 == \"\" then return false\n    if s0 == s1 then return true\n    if s0 ==\
    \ \"\" then return false\n    if s1 == \"\" then return false\n    if s0 == s1\
    \ then return true\n    if s0 == \"\" then return false\n    if s1 == \"\" then\
    \ return false\n    if s0 == s1 then return true\n    if s0 == \"\" then return\
    \ false\n    if s1 == \"\" then return false\n    if s0 == s1 then return true\n\
    \    if s0 == \"\" then return false\n    if s1 == \"\" then return false\n  \
    \  if s0 == s1 then return true\n    if s0 == \"\" then return false\n    if s1\
    \ == \"\" then return false\n    if s0 == s1 then return true\n    if s0 == \n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmppb2lafeu.jl:17\nin expression starting at /tmp/tmppb2lafeu.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    len0 = length(s0)\n  \
    \  len1 = length(s1)\n    if len0 != len1\n        return false\n    else\n  \
    \      for i in 0..len0\n            if s0[i] != s1[i]\n                return\
    \ false\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n  \
    \  Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsyyqd_52.jl:27\nin expression starting at\
    \ /tmp/tmpsyyqd_52.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars = true\n  \
    \  for c in s0:\n        if c not in s1:\n            same_chars = false\n   \
    \         break\n    return same_chars\nend\nusing Test\n\n@testset begin\n\n\
    candidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"\
    dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\t@test(candidate(\"aabb\", \"\
    aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo_1rfeg3.jl:19\nin expression starting at\
    \ /tmp/tmpo_1rfeg3.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars = true\n  \
    \  for c in s0:\n        if c not in s1:\n            same_chars = false\n   \
    \         break\n    return same_chars\nend\n</cell>\n<code language=julia-1.1>\n\
    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvl5rusk2.jl:19\nin expression starting at\
    \ /tmp/tmpvl5rusk2.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    \n    \"\"\"\n    Check\
    \ if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpbvx_v0i0.jl:16\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpbvx_v0i0.jl:1\n\
    in expression starting at /tmp/tmpbvx_v0i0.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if s0 == s1 \n    then\
    \ true \n    else false \n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\
    \"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"true\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpotr3h2b5.jl:18\nin expression starting at /tmp/tmpotr3h2b5.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    len0 = length(s0)\n  \
    \  len1 = length(s1)\n    if len0 != len1\n        return false\n    else\n  \
    \      len0 = length(s0)\n        for i::Int in 0..len0\n            if s0[i]\
    \ != s1[i]\n                return false\n            else\n                continue\n\
    \        end\n        return true\n    end\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a string and returns the number of characters in the\
    \ string. \nWrite a function that takes a string and returns a string with the\
    \ first letter capitalized.\nWrite a function that takes a string and returns\
    \ a string with the first letter capitalized and all others lowercased.\nWrite\
    \ a function that takes a string and returns a string with the first letter capitalized\
    \ and all others lowercased and all others capitalized.\nWrite a function that\
    \ takes a string and returns a string with the first letter capitalized and all\
    \ others lowercased and all others capitalized and all others lowercased.\nWrite\
    \ a function that takes a string and returns a string with the first letter capitalized\
    \ and all others lowercased and all others capitalized and all others lowercased\
    \ and all others capitalized.\nWrite a function that takes a string and returns\
    \ a string with the first letter capitalized and all others lowercased and all\
    \ others capitalized and all others lowercased and all others capitalized and\
    \ all others lowercased.\nWrite a function that takes a string and returns a string\
    \ with the first letter capitalized and all others lowercased and all others capitalized\
    \ and all others lowercased and all others capitalized and all others lowercased\
    \ and all others capitalized.\nWrite a function that takes a string and returns\
    \ a string with the first letter capitalized and all others lowercased and all\
    \ others capitalized and all others lowercased and all others capitalized and\
    \ all others lowercased and all others capitalized and all others lowercased.\n\
    Write a function that takes a string and returns a string with the first letter\
    \ capitalized and all others lowercased and all others capitalized and all others\
    \ lowercased and all others capitalized and all others lowercased and all others\
    \ capitalized and all others lowercased.\nWrite a function that takes a string\
    \ and returns a string with the first letter capitalized and all others lowercased\
    \ and all others capitalized and all others lowercased and all others capitalized\
    \ and all others lowercased and all others capitalized and all others lowercased.\n\
    Write a function that takes a string and returns a string with the first letter\
    \ capitalized and all others lowercased and all others capitalized and all others\
    \ lowercased and all others capitalized and all others lowercased and all others\
    \ capitalized and all others lowercased and all others capitalized.\nWrite a function\
    \ that takes a string and returns a string with the first letter capitalized and\
    \ all others lowercased and \nusing Test\n\n@testset begin\n\ncandidate = same_chars;\n\
    \t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"\
    abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\")\
    \ == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"\
    abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp22s0dair.jl:32\nin expression starting at\
    \ /tmp/tmp22s0dair.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars(s0, s1) = length(s0)\
    \ == length(s1) && all(char(s0) == char(s1) for char in s0)\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\n    Check if two words have the same characters.\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd',\
    \ 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n\
    \    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd',\
    \ 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n\
    \    False\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = same_chars;\n\
    \t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"\
    abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\")\
    \ == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"\
    abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg7ezise7.jl:19\nin expression starting at\
    \ /tmp/tmpg7ezise7.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    \n    len0 = length(s0)\n\
    \    len1 = length(s1)\n    \n    if len0 != len1\n        return false\n    \n\
    \    i = 0\n    while i < len0\n        if s0[i] != s1[i]\n            return\
    \ false\n        i += 1\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi0fi_aid.jl:32\nin expression starting at\
    \ /tmp/tmpi0fi_aid.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars = true\n  \
    \  for c in s0:\n        if c not in s1:\n            same_chars = false\n   \
    \         break\n    return same_chars\nend\n</cell>\n<code language=julia-1.3>\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkixo9yos.jl:19\nin expression starting at\
    \ /tmp/tmpkixo9yos.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    len0 = length(s0)\n  \
    \  len1 = length(s1)\n    if len0 != len1\n        return false\n    else\n  \
    \      chars = chars(s0)\n        chars = chars[1..len0]\n        chars = chars[1..len1]\n\
    \        chars = chars[1..len0]\n        chars = chars[1..len1]\n        chars\
    \ = chars[1..len0]\n        chars = chars[1..len1]\n        chars = chars[1..len0]\n\
    \        chars = chars[1..len1]\n        chars = chars[1..len0]\n        chars\
    \ = chars[1..len1]\n        chars = chars[1..len0]\n        chars = chars[1..len1]\n\
    \        chars = chars[1..len0]\n        chars = chars[1..len1]\n        chars\
    \ = chars[1..len0]\n        chars = chars[1..len1]\n        chars = chars[1..len0]\n\
    \        chars = chars[1..len1]\n        chars = chars[1..len0]\n        chars\
    \ = chars[1..len1]\n        chars = chars[1..len0]\n        chars = chars[1..len1]\n\
    \        chars = chars[1..len0]\n        chars = chars[1..len1]\n        chars\
    \ = chars[1..len0]\n        chars = chars[1..len1]\n        chars = chars[1..len0]\n\
    \        chars = chars[1..len1]\n        chars = chars[1..len0]\n        chars\
    \ = chars[1..len1]\n        chars = chars[1..len0]\n        chars = chars[1..len1]\n\
    \        chars = chars[1..len0]\n        chars = chars[1..len1]\n        chars\
    \ = chars[1..len0]\n        chars = chars[1..len1]\n        chars = chars[1..len0]\n\
    \        chars = chars[1..len1]\n        chars = chars[1..len0]\n        chars\
    \ = chars[1..len1]\n        chars = chars[1..len0]\n        chars = chars[1..len1]\n\
    \        chars = chars[1..len0]\n        chars = chars[1..len1]\n        chars\
    \ = chars[1..len0]\n        chars = chars[1..len1]\n        chars = chars[1..len0]\n\
    \        chars = chars[1..len\nusing Test\n\n@testset begin\n\ncandidate = same_chars;\n\
    \t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"\
    abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\")\
    \ == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"\
    abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7l5uu55s.jl:1\nin expression starting at /tmp/tmp7l5uu55s.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars = false\n \
    \   for c in s0:\n        if c not in s1:\n            same_chars = false\n  \
    \          break\n        same_chars = true\n    return same_chars\nend\n</cell>\n\
    <code language=julia-1.3>\n\"\"\"\n    Check if two words have the same characters.\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd',\
    \ 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n\
    \    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd',\
    \ 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n\
    \    False\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = same_chars;\n\
    \t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"\
    abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\")\
    \ == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"\
    abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp_jxlk23.jl:19\nin expression starting at\
    \ /tmp/tmpp_jxlk23.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    \n    \"\"\"\n    Check\
    \ if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    if s0 == s1:\n        return\
    \ True\n    if s0 == \"\" or s1 == \"\":\n        return False\n    \n    i =\
    \ 0\n    j = 0\n    \n    while i < len(s0) and j < len(s1):\n        if s0[i]\
    \ == s1[j]:\n            i += 1\n            j += 1\n        elif s0[i] > s1[j]:\n\
    \            i += 1\n        else:\n            j += 1\n            \n    if i\
    \ == len(s0):\n        return True\n    if j == len(s1):\n        return True\n\
    \    return False\n</cell>\n<text>\nExercise 3\nWrite a function that takes a\
    \ string and returns the number of characters in the string.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"\
    dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\t@test(candidate(\"aabb\", \"\
    aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1crpk3a_.jl:34\nin expression starting at\
    \ /tmp/tmp1crpk3a_.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars = true\n  \
    \  for c in s0:\n        if c not in s1:\n            same_chars = false\n   \
    \         break\n    return same_chars\n</code>\n<|/ a dscore=0 |>\n<| a tags=string,julia\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7vj0_rkn.jl:19\nin expression starting at\
    \ /tmp/tmp7vj0_rkn.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars = true\n  \
    \  for c in s0:\n        if c not in s1:\n            same_chars = false\n   \
    \         break\n    return same_chars\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0oj34c2c.jl:19\nin expression starting at\
    \ /tmp/tmp0oj34c2c.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars(s0, s1) ||\
    \ same_chars(s1, s0)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n\
    @testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\", \"\
    dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\") ==\
    \ true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"\
    eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\
    \t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps_0d6wis.jl:19\nin expression starting at\
    \ /tmp/tmps_0d6wis.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars(s0, s1)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars = true\n  \
    \  for c in s0:\n        if c not in s1:\n            same_chars = false\n   \
    \         break\n    return same_chars\nend\n</cell>\n<code language=julia-1.3>\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnsugs8o7.jl:19\nin expression starting at\
    \ /tmp/tmpnsugs8o7.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    len = length(s0)\n   \
    \ len1 = length(s1)\n    if len == len1\n        for (i, c) in zip(1:len, s0)\n\
    \            if c != s1[i]\n                return false\n        return true\n\
    \    else\n        return false\nend\n</cell>\n<code language=julia-1.4>\n\"\"\
    \"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3gmc3f44.jl:27\nin expression starting at\
    \ /tmp/tmp3gmc3f44.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars(s0, s1) = length(s0)\
    \ == length(s1) && all(char(s0) == char(s1) for char in s0)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = same_chars;\n\
    \t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"\
    abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\")\
    \ == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"\
    abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfxys5hg_.jl:19\nin expression starting at\
    \ /tmp/tmpfxys5hg_.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars = true\n  \
    \  for c in s0:\n        if c not in s1:\n            same_chars = false\n   \
    \         break\n    return same_chars\nend\n</cell>\n<code language=julia-1.4>\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_82a59ou.jl:19\nin expression starting at\
    \ /tmp/tmp_82a59ou.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars(s0, s1) = length(s0)\
    \ == length(s1) && all(char(s0[i]) == char(s1[i]) for i in 1:length(s0))\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    Check if two words have the same\
    \ characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n\
    \    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"\
    dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\t@test(candidate(\"aabb\", \"\
    aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5_mkeojd.jl:19\nin expression starting at\
    \ /tmp/tmp5_mkeojd.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if s0 == s1 then return\
    \ true\n    if s0 == \"\" then return false\n    if s1 == \"\" then return false\n\
    \    if s0 == s1 then return true\n    if s0 == \"\" then return false\n    if\
    \ s1 == \"\" then return false\n    if s0 == s1 then return true\n    if s0 ==\
    \ \"\" then return false\n    if s1 == \"\" then return false\n    if s0 == s1\
    \ then return true\n    if s0 == \"\" then return false\n    if s1 == \"\" then\
    \ return false\n    if s0 == s1 then return true\n    if s0 == \"\" then return\
    \ false\n    if s1 == \"\" then return false\n    if s0 == s1 then return true\n\
    \    if s0 == \"\" then return false\n    if s1 == \"\" then return false\n  \
    \  if s0 == s1 then return true\n    if s0 == \"\" then return false\n    if s1\
    \ == \"\" then return false\n    if s0 == s1 then return true\n    if s0 == \"\
    \" then return false\n    if s1 == \"\" then return false\n    if s0 == s1 then\
    \ return true\n    if s0 == \"\" then return false\n    if s1 == \"\" then return\
    \ false\n    if s0 == s1 then return true\n    if s0 == \"\" then return false\n\
    \    if s1 == \"\" then return false\n    if s0 == s1 then return true\n    if\
    \ s0 == \"\" then return false\n    if s1 == \"\" then return false\n    if s0\
    \ == s1 then return true\n    if s0 == \"\" then return false\n    if s1 == \"\
    \" then return false\n    if s0 == s1 then return true\n    if s0 == \"\" then\
    \ return false\n    if s1 == \"\" then return false\n    if s0 == s1 then return\
    \ true\n    if s0 == \"\" then return false\n    if s1 == \"\" then return false\n\
    \    if s0 == s1 then return true\n    if s0 == \"\" then return false\n    if\
    \ s1 == \"\" then return false\n    if s0 == s1 then return true\n    if s0 ==\
    \ \"\" then return false\n    if s1 == \"\" then return false\n    if s0 == s1\
    \ then return true\n    if s0 == \"\" then return false\n    if s1 == \"\" then\
    \ return false\n    if s0 == s1 then return true\n    if s0 == \"\" then return\
    \ false\n    if s1 == \"\" then return false\n    if s0 == s1 then return true\n\
    \    if s0 == \"\" then return false\n    if s1 == \"\" then return false\n  \
    \  if s0 == s1 then return true\n    if s0 == \"\" then return false\n    if s1\
    \ == \"\" then return false\n    if s0 == s1 then return true\n    if s0 == \n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpkex28cai.jl:17\nin expression starting at /tmp/tmpkex28cai.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    len_s0 = length(s0)\n\
    \    len_s1 = length(s1)\n    if len_s0 != len_s1\n        return false\n    \n\
    \    i = 0\n    while i < len_s0\n        if s0[i] != s1[i]\n            return\
    \ false\n        i += 1\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1vkls790.jl:29\nin expression starting at\
    \ /tmp/tmp1vkls790.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    \n    same_chars = true\n\
    \    \n    for c in s0:\n        if c not in s1:\n            same_chars = false\n\
    \            break\n    \n    return same_chars\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgpgmc5__.jl:21\nin expression starting at\
    \ /tmp/tmpgpgmc5__.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars = true\n  \
    \  for c in s0:\n        if c not in s1:\n            same_chars = false\n   \
    \         break\n    return same_chars\nend\n</cell>\n<code language=julia-1.3>\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpglbup32q.jl:19\nin expression starting at\
    \ /tmp/tmpglbup32q.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    \n    len0 = length(s0)\n\
    \    len1 = length(s1)\n    \n    if len0 != len1\n        return false\n    \n\
    \    i = 0\n    j = 0\n    \n    while i < len0 and j < len1\n        if s0[i]\
    \ != s1[j]\n            return false\n        i += 1\n        j += 1\n    \n \
    \   return true\nend\nusing Test\n\n@testset begin\n\ncandidate = same_chars;\n\
    \t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"\
    abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\")\
    \ == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"\
    abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"while\" at /tmp/tmpx3goqoi3.jl:27 expected\
    \ \"end\", got \"j\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpx3goqoi3.jl:27\n\
    in expression starting at /tmp/tmpx3goqoi3.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    \n    same_chars = true\n\
    \    for c in s0:\n        if c not in s1:\n            same_chars = false\n \
    \           break\n    return same_chars\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcplwxmti.jl:20\nin expression starting at\
    \ /tmp/tmpcplwxmti.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    len0 = length(s0)\n  \
    \  len1 = length(s1)\n    if len0 != len1\n        return false\n    else\n  \
    \      for (i0, i1) in zip(xrange(len0), xrange(len1))\n            if s0[i0]\
    \ != s1[i1]\n                return false\n    return true\nend\n</cell>\n<code\
    \ language=julia-1.4>\n\"\"\"\n    Check if two words have the same characters.\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd',\
    \ 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n\
    \    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd',\
    \ 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n\
    \    False\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = same_chars;\n\
    \t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"\
    abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\")\
    \ == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"\
    abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxib6_tad.jl:27\nin expression starting at\
    \ /tmp/tmpxib6_tad.jl:27\n"
  exit_code: 1
  status: SyntaxError
