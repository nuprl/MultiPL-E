name: HumanEval_54_same_chars
language: julia
results:
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars(s0, s1) = length(s0)\
    \ == length(s1) && all(char(s0[i]) == char(s1[i]) for i in 1:length(s0))\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = same_chars;\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\
    \t@test(candidate(\"abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\"\
    , \"abcd\") == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\
    \t@test(candidate(\"abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\") == false)\n\t@test(candidate(\"aabb\", \"aaccc\") ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4m_lkb7f.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp4m_lkb7f.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    \n    \"\"\"\n    Check\
    \ if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    \n    if s0 == s1:\n      \
    \  return True\n    \n    len0 = length(s0)\n    len1 = length(s1)\n    \n   \
    \ if len0 != len1:\n        return False\n    \n    i = 0\n    while i < len0:\n\
    \        if s0[i] != s1[i]:\n            return False\n        i += 1\n    \n\
    \    return True\n    \n    \n\"\"\"\n    Check if two words have the same characters.\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd',\
    \ 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n\
    \    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd',\
    \ 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n\
    \    False\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = same_chars;\n\
    \t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"\
    abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\")\
    \ == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"\
    abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_rjc36ys.jl:35\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_rjc36ys.jl:35\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars = true\n  \
    \  for c in s0:\n        if c not in s1:\n            same_chars = false\n   \
    \         break\n    return same_chars\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpsi2ydi79.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpsi2ydi79.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars = true\n  \
    \  for c in s0:\n        if c not in s1:\n            same_chars = false\n   \
    \         break\n    return same_chars\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\nI wrote a function that checks if two strings are anagrams of each other:\n\
    <code>\nusing Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphfrohbpt.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmphfrohbpt.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    \n    same_chars = true\n\
    \    \n    for c in s0:\n        if c not in s1:\n            same_chars = false\n\
    \            break\n    \n    return same_chars\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpow7qmbjt.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpow7qmbjt.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    \n    if s0 == s1 \n \
    \       then return true\n    else \n        same_chars(s0, s1) || same_chars(s1,\
    \ s0)\n    end\nend\n</cell>\n<code language=julia-1.3>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"\
    dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\t@test(candidate(\"aabb\", \"\
    aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmph8es2ed7.jl:19\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmph8es2ed7.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars(s0, s1) = length(s0)\
    \ == length(s1) && all(char(c) == char(c0) for (c, c0) in zip(s0, s1))\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a string and returns\
    \ the number of characters in the string.\nTest your function with different inputs.\n\
    Use assert to test your function.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ same_chars;\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\
    \t@test(candidate(\"abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\"\
    , \"abcd\") == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\
    \t@test(candidate(\"abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\") == false)\n\t@test(candidate(\"aabb\", \"aaccc\") ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpk5_ygc1t.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpk5_ygc1t.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    len0 = length(s0)\n  \
    \  len1 = length(s1)\n    if len0 != len1\n        return false\n    else\n  \
    \      len0 = length(s0)\n        for i::Int in 0..len0\n            if s0[i]\
    \ != s1[i]\n                return false\n            else\n        end\n    \
    \    return true\n    end\nend\n\"\"\"\n    Check if two words have the same characters.\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd',\
    \ 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n\
    \    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd',\
    \ 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n\
    \    False\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = same_chars;\n\
    \t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"\
    abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\")\
    \ == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"\
    abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp_izqe6l1.jl:16\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp_izqe6l1.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp_izqe6l1.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    len0 = length(s0)\n  \
    \  len1 = length(s1)\n    if len0 != len1\n        false\n    else\n        chars0::Char\
    \ = s0 \n        chars1::Char = s1\n        len0::Int = length(chars0)\n     \
    \   len1::Int = length(chars1)\n        for i in 0..len0\n            if chars0[i]\
    \ != chars1[i]\n                false\n            else\n                true\n\
    \        end\n    end\nend\n</cell>\n<code language=julia-1.1>\n\"\"\"\n    Check\
    \ if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"\
    dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\t@test(candidate(\"aabb\", \"\
    aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpfaz2tl9p.jl:34\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpfaz2tl9p.jl:34\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars(s0, s1) ||\
    \ same_chars(s1, s0)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n\
    @testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\", \"\
    dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\") ==\
    \ true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"\
    eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\
    \t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8bwgmpve.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp8bwgmpve.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    \n    same_chars = true\n\
    \    \n    for c in s0:\n        if c not in s1:\n            same_chars = false\n\
    \            break\n    \n    return same_chars\nend\n</cell>\n<code language=julia-1.4>\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpxocy_6fe.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpxocy_6fe.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars(s0, s1) = length(s0)\
    \ == length(s1) && all(char(s0[i]) == char(s1[i]) for i in 1:length(s0))\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    Check if two words have the same\
    \ characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n\
    \    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"\
    dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\t@test(candidate(\"aabb\", \"\
    aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpcoxgly6v.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpcoxgly6v.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars = false\n \
    \   for c in s0:\n        if c not in s1:\n            same_chars = false\n  \
    \          break\n        same_chars = true\n        break\n    return same_chars\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = same_chars;\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\
    \t@test(candidate(\"abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\"\
    , \"abcd\") == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\
    \t@test(candidate(\"abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\") == false)\n\t@test(candidate(\"aabb\", \"aaccc\") ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpsd6cq63y.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpsd6cq63y.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars = true\n  \
    \  for c in s0:\n        if c not in s1:\n            same_chars = false\n   \
    \         break\n    return same_chars\n</code>\n<|/ a tags=string,julia |>\n\
    <| c |>\nThis is not the most efficient solution. `setdiff` will iterate over\
    \ the entire string for each character in `s1`, whereas `same_chars` will stop\
    \ iterating as soon as it finds a mismatch.\n<|/ c |>\n<| c |>\nI agree, `setdiff`\
    \ will iterate over the entire string for each character in `s1`, whereas `same_chars`\
    \ will stop iterating as soon as it finds a mismatch. However, the `same_chars`\
    \ solution will also stop iterating as soon as it finds a mismatch, whereas the\
    \ `setdiff` solution will iterate over the entire string for each character in\
    \ `s1`. So the efficiency is similar.\n<|/ c |>\n<| c |>\nI agree that `setdiff`\
    \ will stop iterating as soon as it finds a mismatch, but `same_chars` will also\
    \ stop iterating as soon as it finds a mismatch. `setdiff` will iterate over the\
    \ entire string for each character in `s1`, whereas `same_chars` will stop iterating\
    \ as soon as it finds a mismatch. However, the `same_chars` solution will also\
    \ stop iterating as soon as it finds a mismatch, whereas the `setdiff` solution\
    \ will iterate over the entire string for each character in `s1`. So the efficiency\
    \ is similar.\n<|/ c |>\n<| c |>\nI agree that `setdiff` will stop iterating as\
    \ soon as it finds a mismatch, but `same_chars` will also stop iterating as soon\
    \ as it finds a mismatch. `setdiff` will iterate over the entire string for each\
    \ character in `s1`, whereas `same_chars` will stop iterating as soon as it finds\
    \ a mismatch. However, the `same_chars` solution will also stop iterating as soon\
    \ as it finds a mismatch, whereas the `setdiff` solution will iterate over the\
    \ entire string for each character in `s1`. So the efficiency is similar.\n<|/\
    \ c |>\n<| c |>\nI agree that `setdiff` will stop iterating as soon as it finds\
    \ a mismatch, but `same_chars` will also stop iterating as soon as it finds a\
    \ mismatch. `setdiff` will iterate over the entire string for each character in\
    \ `s1`, whereas `same_chars` will stop iterating as soon as it finds a mismatch.\
    \ However, the `same_chars` solution will also stop iterating as soon as it finds\
    \ a mismatch, whereas the `set\nusing Test\n\n@testset begin\n\ncandidate = same_chars;\n\
    \t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"\
    abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\")\
    \ == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"\
    abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpg3r8fa49.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpg3r8fa49.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars = true\n  \
    \  for c in s0:\n        if c not in s1:\n            same_chars = false\n   \
    \         break\n    return same_chars\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmm95g7dq.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpmm95g7dq.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if s0 == s1 then return\
    \ true else return false end\n    \n    if length(s0) != length(s1) then return\
    \ false end\n    \n    for c in s0:\n        if c != s1[1] then return false end\n\
    \    end\n    \n    return true\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that checks if a word is a palindrome.\nA palindrome is a word, phrase or sentence\
    \ that reads the same backward as forward.\nFor example \"racecar\" is a palindrome\
    \ and \"racecars\" is not a palindrome.\nWrite a function that checks if a word\
    \ is a palindrome.\nA palindrome is a word, phrase or sentence that reads the\
    \ same backward as forward.\nFor example \"racecar\" is a palindrome and \"racecars\"\
    \ is not a palindrome.\nWrite a function that checks if a word is a palindrome.\n\
    A palindrome is a word, phrase or sentence that reads the same backward as forward.\n\
    For example \"racecar\" is a palindrome and \"racecars\" is not a palindrome.\n\
    Write a function that checks if a word is a palindrome.\nA palindrome is a word,\
    \ phrase or sentence that reads the same backward as forward.\nFor example \"\
    racecar\" is a palindrome and \"racecars\" is not a palindrome.\nWrite a function\
    \ that checks if a word is a palindrome.\nA palindrome is a word, phrase or sentence\
    \ that reads the same backward as forward.\nFor example \"racecar\" is a palindrome\
    \ and \"racecars\" is not a palindrome.\nWrite a function that checks if a word\
    \ is a palindrome.\nA palindrome is a word, phrase or sentence that reads the\
    \ same backward as forward.\nFor example \"racecar\" is a palindrome and \"racecars\"\
    \ is not a palindrome.\nWrite a function that checks if a word is a palindrome.\n\
    A palindrome is a word, phrase or sentence that reads the same backward as forward.\n\
    For example \"racecar\" is a palindrome and \"racecars\" is not a palindrome.\n\
    Write a function that checks if a word is a palindrome.\nA palindrome is a word,\
    \ phrase or sentence that reads the same backward as forward.\nFor example \"\
    racecar\" is a palindrome and \"racecars\" is not a palindrome.\nWrite a function\
    \ that checks if a word is a palindrome.\nA palindrome is a word, phrase or sentence\
    \ that reads the same backward as forward.\nFor \nusing Test\n\n@testset begin\n\
    \ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"\
    dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\t@test(candidate(\"aabb\", \"\
    aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpcta9yzut.jl:17\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpcta9yzut.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars = true\n  \
    \  for c in s0:\n        if c not in s1:\n            same_chars = false\n   \
    \         break\n    return same_chars\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpypz3oxab.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpypz3oxab.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if s0 == s1 \n       \
    \ then return true\n    else if s0 == \"\"\n        then return true\n    else\
    \ if s1 == \"\"\n        then return true\n    else if s0 == \"\"\n        then\
    \ return true\n    else if s1 == \"\"\n        then return true\n    else if s0\
    \ == \"\"\n        then return true\n    else if s1 == \"\"\n        then return\
    \ true\n    else if s0 == \"\"\n        then return true\n    else if s1 == \"\
    \"\n        then return true\n    else if s0 == \"\"\n        then return true\n\
    \    else if s1 == \"\"\n        then return true\n    else if s0 == \"\"\n  \
    \      then return true\n    else if s1 == \"\"\n        then return true\n  \
    \  else if s0 == \"\"\n        then return true\n    else if s1 == \"\"\n    \
    \    then return true\n    else if s0 == \"\"\n        then return true\n    else\
    \ if s1 == \"\"\n        then return true\n    else if s0 == \"\"\n        then\
    \ return true\n    else if s1 == \"\"\n        then return true\n    else if s0\
    \ == \"\"\n        then return true\n    else if s1 == \"\"\n        then return\
    \ true\n    else if s0 == \"\"\n        then return true\n    else if s1 == \"\
    \"\n        then return true\n    else if s0 == \"\"\n        then return true\n\
    \    else if s1 == \"\"\n        then return true\n    else if s0 == \"\"\n  \
    \      then return true\n    else if s1 == \"\"\n        then return true\n  \
    \  else if s0 == \"\"\n        then return true\n    else if s1 == \"\"\n    \
    \    then return true\n    else if s0 == \"\"\n        then return true\n    else\
    \ if s1 == \"\"\n        then return true\n    else if s0 == \"\"\n        then\
    \ return true\n    else if s1 == \"\"\n        then return true\n    else if s0\
    \ == \"\"\n        then return true\n    else if s1 == \"\"\n        then return\
    \ true\n    else if s0 == \"\"\n        then return true\n    else if s1 == \"\
    \"\n        then return true\n    else if s0 == \"\"\n        then return true\n\
    \    else if s1 == \"\"\n        then return true\n    else if s0 == \"\"\n  \
    \      then return true\n    else if s1 == \"\"\n        then return true\n  \
    \  else if s0 == \"\"\n        then return true\n    else if s1 == \"\"\n    \
    \    then \nusing Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp5jh3k0jt.jl:18\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp5jh3k0jt.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars = true\n  \
    \  for c in s0:\n        if c not in s1:\n            same_chars = false\n   \
    \         break\n    return same_chars\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmppct39jc9.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmppct39jc9.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars = true\n  \
    \  for c in s0:\n        if c not in s1:\n            same_chars = false\n   \
    \         break\n    return same_chars\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpnojetaq4.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpnojetaq4.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    \n    same_chars = true\n\
    \    \n    for c in s0:\n        if c not in s1:\n            same_chars = false\n\
    \            break\n    \n    return same_chars\nusing Test\n\n@testset begin\n\
    \ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"\
    dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\t@test(candidate(\"aabb\", \"\
    aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2rg6zukq.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp2rg6zukq.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars = true\n  \
    \  i = 0\n    j = i\n    while i < length(s0) and j < length(s1)\n        if s0[i]\
    \ == s1[j]\n            same_chars = false\n            i += 1\n            j\
    \ += 1\n        else\n            i += 1\n            j += 1\n    end\n    return\
    \ same_chars\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a\
    \ string and returns the number of characters in it.\nThe function should ignore\
    \ non-alphabetic characters and count the alphabetic characters.\nThe function\
    \ should ignore spaces.\nThe function should ignore punctuation and numbers.\n\
    The function should ignore capitalization.\nThe function should ignore non-alphabetic\
    \ characters and count the alphabetic characters.\nThe function should ignore\
    \ spaces.\nThe function should ignore punctuation and numbers.\nThe function should\
    \ ignore capitalization.\nThe function should ignore non-alphabetic characters\
    \ and count the alphabetic characters.\nThe function should ignore spaces.\nThe\
    \ function should ignore punctuation and numbers.\nThe function should ignore\
    \ capitalization.\nThe function should ignore non-alphabetic characters and count\
    \ the alphabetic characters.\nThe function should ignore spaces.\nThe function\
    \ should ignore punctuation and numbers.\nThe function should ignore capitalization.\n\
    The function should ignore non-alphabetic characters and count the alphabetic\
    \ characters.\nThe function should ignore spaces.\nThe function should ignore\
    \ punctuation and numbers.\nThe function should ignore capitalization.\nThe function\
    \ should ignore non-alphabetic characters and count the alphabetic characters.\n\
    The function should ignore spaces.\nThe function should ignore punctuation and\
    \ numbers.\nThe function should ignore capitalization.\nThe function should ignore\
    \ non-alphabetic characters and count the alphabetic characters.\nThe function\
    \ should ignore spaces.\nThe function should ignore punctuation and numbers.\n\
    The function should ignore capitalization.\nThe function should ignore non-alphabetic\
    \ characters and count the alphabetic characters.\nThe function should ignore\
    \ spaces.\nThe function should ignore punctuation and numbers.\nThe function should\
    \ ignore capitalization.\nThe function should ignore non-alphabetic characters\
    \ and count the alphabetic characters.\nThe function should ignore spaces.\nThe\
    \ function should ignore punctuation and numbers.\nThe function should ignore\
    \ capitalization.\nThe function should ignore non-alphabetic characters and count\
    \ the alphabetic characters.\nThe function should ignore spaces.\nThe function\
    \ should ignore punctuation and numbers.\nThe function should ignore capitalization.\n\
    The function should ignore non-alphabetic characters and count the alphabetic\
    \ characters.\nThe function should ignore spaces.\nThe function should ignore\
    \ punctu\nusing Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"j\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpkebvxn0q.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpkebvxn0q.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars(s0, s1) ||\
    \ same_chars(s1, s0)\nend\nusing Test\n\n@testset begin\n\ncandidate = same_chars;\n\
    \t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"\
    abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\")\
    \ == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"\
    abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp81ab3fkc.jl:24\n  Test threw exception\n\
    \  Expression: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] same_chars(::String, ::String) at /tmp/tmp81ab3fkc.jl:17\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmp81ab3fkc.jl:25\n\
    \  Test threw exception\n  Expression: candidate(\"abcd\", \"dddddddabc\") ==\
    \ true\n  StackOverflowError:\n  Stacktrace:\n   [1] same_chars(::String, ::String)\
    \ at /tmp/tmp81ab3fkc.jl:17 (repeats 79984 times)\n  \ntest set: Error During\
    \ Test at /tmp/tmp81ab3fkc.jl:26\n  Test threw exception\n  Expression: candidate(\"\
    dddddddabc\", \"abcd\") == true\n  StackOverflowError:\n  Stacktrace:\n   [1]\
    \ same_chars(::String, ::String) at /tmp/tmp81ab3fkc.jl:17 (repeats 79984 times)\n\
    \  \ntest set: Error During Test at /tmp/tmp81ab3fkc.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"eabcd\", \"dddddddabc\") == false\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] same_chars(::String, ::String) at /tmp/tmp81ab3fkc.jl:17\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmp81ab3fkc.jl:28\n\
    \  Test threw exception\n  Expression: candidate(\"abcd\", \"dddddddabcf\") ==\
    \ false\n  StackOverflowError:\n  Stacktrace:\n   [1] same_chars(::String, ::String)\
    \ at /tmp/tmp81ab3fkc.jl:17 (repeats 79984 times)\n  \ntest set: Error During\
    \ Test at /tmp/tmp81ab3fkc.jl:29\n  Test threw exception\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\") == false\n  StackOverflowError:\n  Stacktrace:\n\
    \   [1] same_chars(::String, ::String) at /tmp/tmp81ab3fkc.jl:17 (repeats 79984\
    \ times)\n  \ntest set: Error During Test at /tmp/tmp81ab3fkc.jl:30\n  Test threw\
    \ exception\n  Expression: candidate(\"aabb\", \"aaccc\") == false\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] same_chars(::String, ::String) at /tmp/tmp81ab3fkc.jl:17\
    \ (repeats 79984 times)\n  \nTest Summary: | Error  Total\ntest set      |   \
    \  7      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp81ab3fkc.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    \n    if length(s0) !=\
    \ length(s1)\n        return false\n    \n    i = 0\n    \n    while i < length(s0)\n\
    \        if s0[i] != s1[i]\n            return false\n        i += 1\n    \n \
    \   return true\nend\n</cell>\n<text>\nExercise 7: Write a function that checks\
    \ if a word is palindrome or not.\nThe word is a palindrome if its first and last\
    \ characters are the same.\nThe word is not a palindrome if its first and last\
    \ characters are not the same.\nThe word is not a palindrome if its first and\
    \ last characters are different.\nThe word is not a palindrome if its first and\
    \ last characters are different and they are both lowercase.\nThe word is not\
    \ a palindrome if its first and last characters are different and they are both\
    \ uppercase.\nThe word is not a palindrome if its first and last characters are\
    \ different and they are both digits.\nThe word is not a palindrome if its first\
    \ and last characters are different and they are both punctuation.\nThe word is\
    \ not a palindrome if its first and last characters are different and they are\
    \ both symbols.\nThe word is not a palindrome if its first and last characters\
    \ are different and they are both whitespace.\nThe word is not a palindrome if\
    \ its first and last characters are different and they are both non-alphanumeric.\n\
    The word is not a palindrome if its first and last characters are different and\
    \ they are both non-alphabetical.\nThe word is not a palindrome if its first and\
    \ last characters are different and they are both non-alphabetical.\nThe word\
    \ is not a palindrome if its first and last characters are different and they\
    \ are both non-alphabetical.\nThe word is not a palindrome if its first and last\
    \ characters are different and they are both non-alphabetical.\nThe word is not\
    \ a palindrome if its first and last characters are different and they are both\
    \ non-alphabetical.\nThe word is not a palindrome if its first and last characters\
    \ are different and they are both non-alphabetical.\nThe word is not a palindrome\
    \ if its first and last characters are different and they are both non-alphabetical.\n\
    The word is not a palindrome if its first and last characters are different and\
    \ they are both non-alphabetical.\nThe word is not a palindrome if its first and\
    \ last characters are different and they are both non-alphabetical.\nThe word\
    \ is not a palindrome if its first and last characters are different and they\
    \ are both non-alphabetical.\nThe word \nusing Test\n\n@testset begin\n\ncandidate\
    \ = same_chars;\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\
    \t@test(candidate(\"abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\"\
    , \"abcd\") == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\
    \t@test(candidate(\"abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\") == false)\n\t@test(candidate(\"aabb\", \"aaccc\") ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpc5dv41la.jl:30\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpc5dv41la.jl:30\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars = true\n  \
    \  \n    for c in s0:\n        if c not in s1:\n            same_chars = false\n\
    \            break\n    return same_chars\nend\n</cell>\n<code language=julia-1.3>\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpevq2omwp.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpevq2omwp.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    \n    \"\"\"\n    Check\
    \ if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    \n    if s0 == s1:\n      \
    \  return True\n    \n    len_s0 = len(s0)\n    len_s1 = len(s1)\n    \n    if\
    \ len_s0 > len_s1:\n        return False\n    \n    i = 0\n    j = 0\n    \n \
    \   while i < len_s0 and j < len_s1:\n        if s0[i] == s1[j]:\n           \
    \ i += 1\n            j += 1\n        elif s0[i] > s1[j]:\n            return\
    \ False\n        else:\n            j += 1\n    \n    return i == len_s0 and j\
    \ == len_s1\n    \n    \n\"\"\"\n    Check if two words have the same characters.\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd',\
    \ 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n\
    \    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd',\
    \ 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n\
    \    False\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = same_chars;\n\
    \t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"\
    abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\")\
    \ == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"\
    abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpwtwx46g7.jl:35\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpwtwx46g7.jl:35\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    len0 = length(s0)\n  \
    \  len1 = length(s1)\n    if len0 != len1\n        return false\n    \n    i =\
    \ 0\n    while i < len0\n        if s0[i] != s1[i]\n            return false\n\
    \        i += 1\n    return true\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\"\
    ) == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"\
    eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\
    \t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp41owd9gw.jl:29\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp41owd9gw.jl:29\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    \n    if length(s0) !=\
    \ length(s1)\n        return false\n    \n    i = 0\n    while i < length(s0)\n\
    \        if s0[i] != s1[i]\n            return false\n        i += 1\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"while\" at /tmp/tmpeqcddxb_.jl:22\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpeqcddxb_.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpeqcddxb_.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    \n    len0 = length(s0)\n\
    \    len1 = length(s1)\n    \n    if len0 != len1\n        return false\n    \n\
    \    i = 0\n    \n    while i < len0\n        if s0[i] != s1[i]\n            return\
    \ false\n        i += 1\n    \n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpb3wacmt0.jl:33\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpb3wacmt0.jl:33\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars = true\n  \
    \  for c in s0:\n        if c not in s1:\n            same_chars = false\n   \
    \         break\n    return same_chars\nend\n</cell>\n<code language=julia-1.4>\n\
    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpq4co4i0q.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpq4co4i0q.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    \n    len0 = length(s0)\n\
    \    len1 = length(s1)\n    \n    if len0 != len1\n        return false\n    \n\
    \    i = 0\n    \n    while i < len0\n        if s0[i] != s1[i]\n            return\
    \ false\n        i += 1\n    \n    return true\nend\n</cell>\n<code language=julia-1.3>\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp30jc6cz7.jl:33\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp30jc6cz7.jl:33\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    len1 = length(s1)\n  \
    \  len2 = length(s2)\n    if len1 == len2\n        true\n    else\n        if\
    \ len1 > len2\n            true\n        else\n            if len1 < len2\n  \
    \              false\n            else\n                if s1 == s2\n        \
    \            true\n                else\n                    if s0 == s1\n   \
    \                     true\n                    else\n                       \
    \ if s0 == s2\n                            true\n                        else\n\
    \                            if s1 == s2\n                                true\n\
    \                            else\n                                if s1 == s2\n\
    \                                    true\n                                else\n\
    \                                    if s0 == s1\n                           \
    \             true\n                                    else\n               \
    \                         if s0 == s2\n                                      \
    \      true\n                                        else\n                  \
    \                          if s1 == s2\n                                     \
    \           true\n                                            else\n         \
    \                                       if s0 == s1\n                        \
    \                            true\n                                          \
    \      else:\n                                                    if s0 == s2\n\
    \                                                        true\n              \
    \                                      else\n                                \
    \                        if s1 == s2\n                                       \
    \                     true\n                                                 \
    \       else\n                                                            false\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Check if two words\
    \ have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"\
    dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\t@test(candidate(\"aabb\", \"\
    aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: space not allowed after \":\" used for quoting\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmph_1ojoas.jl:55\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmph_1ojoas.jl:55\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars = true\n  \
    \  for c in s0:\n        if c not in s1:\n            same_chars = false\n   \
    \         break\n    return same_chars\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpgb42kj3t.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpgb42kj3t.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars = true\n  \
    \  for c in s0:\n        if c not in s1:\n            same_chars = false\n   \
    \         break\n    return same_chars\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpye9umulh.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpye9umulh.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    \n    same_chars = true\n\
    \    for c in s0:\n        if c not in s1:\n            same_chars = false\n \
    \           break\n    return same_chars\nend\n</cell>\n<code language=julia-1.4>\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp18dntj4x.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp18dntj4x.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    len1 = length(s1)\n  \
    \  len2 = length(s2)\n    if len1 != len2\n        return false\n    elseif len1\
    \ == 0\n        return true\n    else\n        char1 = s1[1]\n        char2 =\
    \ s2[1]\n        if char1 == char2\n            return same_chars(s1[2:], s2[2:])\n\
    \        else\n            return false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope at /tmp/tmpsiun9dgr.jl:27\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpsiun9dgr.jl:27\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if s0 == s1 \n       \
    \ then return true\n    else if s0 == \"\"\n        then return true\n    else\
    \ if s1 == \"\"\n        then return true\n    else if s1 == s2\n        then\
    \ return true\n    else if s0 == s2\n        then return true\n    else if s1\
    \ == s2\n        then return true\n    else if s0 == \"\"\n        then return\
    \ true\n    else if s1 == \"\"\n        then return true\n    else if s0 == \"\
    \"\n        then return true\n    else if s1 == \"\"\n        then return true\n\
    \    else if s0 == \"\"\n        then return true\n    else if s1 == \"\"\n  \
    \      then return true\n    else if s0 == \"\"\n        then return true\n  \
    \  else if s1 == \"\"\n        then return true\n    else if s0 == \"\"\n    \
    \    then return true\n    else if s1 == \"\"\n        then return true\n    else\
    \ if s0 == \"\"\n        then return true\n    else if s1 == \"\"\n        then\
    \ return true\n    else if s0 == \"\"\n        then return true\n    else if s1\
    \ == \"\"\n        then return true\n    else if s0 == \"\"\n        then return\
    \ true\n    else if s1 == \"\"\n        then return true\n    else if s0 == \"\
    \"\n        then return true\n    else if s1 == \"\"\n        then return true\n\
    \    else if s0 == \"\"\n        then return true\n    else if s1 == \"\"\n  \
    \      then return true\n    else if s0 == \"\"\n        then return true\n  \
    \  else if s1 == \"\"\n        then return true\n    else if s0 == \"\"\n    \
    \    then return true\n    else if s1 == \"\"\n        then return true\n    else\
    \ if s0 == \"\"\n        then return true\n    else if s1 == \"\"\n        then\
    \ return true\n    else if s0 == \"\"\n        then return true\n    else if s1\
    \ == \"\"\n        then return true\n    else if s0 == \"\"\n        then return\
    \ true\n    else if s1 == \"\"\n        then return true\n    else if s0 == \"\
    \"\n        then return true\n    else if s1 == \"\"\n        then return true\n\
    \    else if s0 == \"\"\n        then return true\n    else if s1 == \"\"\n  \
    \      then return true\n    else if s0 == \"\"\n        then return true\n  \
    \  else if s1 == \"\"\n        then return true\n    else if s0 == \"\"\n    \
    \    then \nusing Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp4jtc8pw5.jl:18\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp4jtc8pw5.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars(s0, s1) ||\
    \ same_chars(s1, s0)\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Check\
    \ if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"\
    dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\t@test(candidate(\"aabb\", \"\
    aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpae1vwl1m.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpae1vwl1m.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    \n    if s0 == s1 \n \
    \       then return true\n    else \n        match s0, s1 \n            | [],\
    \ \"\" -> true\n            | \"\", [] -> true\n            | [], y::y -> false\n\
    \            | x::xs, y::ys -> same_chars(xs, ys) \n        end\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    Check if two words have the same characters.\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd',\
    \ 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n\
    \    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd',\
    \ 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n\
    \    False\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = same_chars;\n\
    \t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"\
    abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\")\
    \ == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"\
    abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmps69wq3r1.jl:19\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmps69wq3r1.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars = true\n  \
    \  for c in s0:\n        if c not in s1:\n            same_chars = false\n   \
    \         break\n    return same_chars\nend\nusing Test\n\n@testset begin\n\n\
    candidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"\
    dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\t@test(candidate(\"aabb\", \"\
    aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmputg9q0jl.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmputg9q0jl.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    \n    \"\"\"\n    Check\
    \ if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpo9g0ry6k.jl:16\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpo9g0ry6k.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpo9g0ry6k.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars(s0, s1) = length(s0)\
    \ == length(s1) && all(char(c) == char(c0) for c, c0 in zip (s0, s1))\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    Check if two words have the same characters.\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd',\
    \ 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n\
    \    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd',\
    \ 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n\
    \    False\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = same_chars;\n\
    \t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"\
    abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\")\
    \ == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"\
    abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid iteration specification\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpv3myyih7.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpv3myyih7.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars(s0, s1) = length(s0)\
    \ == length(s1) && all(char(s0) == char(s1) for char in s0)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\",\
    \ \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\"\
    ) == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"\
    eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\
    \t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp5qbnzg5i.jl:24\n  Test threw exception\n\
    \  Expression: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n  MethodError:\
    \ Cannot `convert` an object of type var\"#same_chars#4\" to an object of type\
    \ Bool\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number\
    \ at number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at\
    \ number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer at pointer.jl:23\n\
    \    ...\n  Stacktrace:\n   [1] same_chars(::String, ::String) at /tmp/tmp5qbnzg5i.jl:17\n\
    \   [2] top-level scope at /tmp/tmp5qbnzg5i.jl:24\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp5qbnzg5i.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmp5qbnzg5i.jl:25\n  Test threw exception\n  Expression: candidate(\"\
    abcd\", \"dddddddabc\") == true\n  MethodError: Cannot `convert` an object of\
    \ type var\"#same_chars#4\" to an object of type Bool\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T},\
    \ !Matched::Number) where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr)\
    \ where T<:Integer at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] same_chars(::String,\
    \ ::String) at /tmp/tmp5qbnzg5i.jl:17\n   [2] top-level scope at /tmp/tmp5qbnzg5i.jl:25\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp5qbnzg5i.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmp5qbnzg5i.jl:26\n  Test threw exception\n  Expression: candidate(\"\
    dddddddabc\", \"abcd\") == true\n  MethodError: Cannot `convert` an object of\
    \ type var\"#same_chars#4\" to an object of type Bool\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T},\
    \ !Matched::Number) where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr)\
    \ where T<:Integer at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] same_chars(::String,\
    \ ::String) at /tmp/tmp5qbnzg5i.jl:17\n   [2] top-level scope at /tmp/tmp5qbnzg5i.jl:26\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp5qbnzg5i.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmp5qbnzg5i.jl:27\n  Test threw exception\n  Expression: candidate(\"\
    eabcd\", \"dddddddabc\") == false\n  MethodError: Cannot `convert` an object of\
    \ type var\"#same_chars#4\" to an object of type Bool\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T},\
    \ !Matched::Number) where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr)\
    \ where T<:Integer at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] same_chars(::String,\
    \ ::String) at /tmp/tmp5qbnzg5i.jl:17\n   [2] top-level scope at /tmp/tmp5qbnzg5i.jl:27\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp5qbnzg5i.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmp5qbnzg5i.jl:28\n  Test threw exception\n  Expression: candidate(\"\
    abcd\", \"dddddddabcf\") == false\n  MethodError: Cannot `convert` an object of\
    \ type var\"#same_chars#4\" to an object of type Bool\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T},\
    \ !Matched::Number) where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr)\
    \ where T<:Integer at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] same_chars(::String,\
    \ ::String) at /tmp/tmp5qbnzg5i.jl:17\n   [2] top-level scope at /tmp/tmp5qbnzg5i.jl:28\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp5qbnzg5i.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmp5qbnzg5i.jl:29\n  Test threw exception\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\") == false\n  MethodError: Cannot `convert`\
    \ an object of type var\"#same_chars#4\" to an object of type Bool\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\n   \
    \ convert(::Type{T}, !Matched::Ptr) where T<:Integer at pointer.jl:23\n    ...\n\
    \  Stacktrace:\n   [1] same_chars(::String, ::String) at /tmp/tmp5qbnzg5i.jl:17\n\
    \   [2] top-level scope at /tmp/tmp5qbnzg5i.jl:29\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp5qbnzg5i.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmp5qbnzg5i.jl:30\n  Test threw exception\n  Expression: candidate(\"\
    aabb\", \"aaccc\") == false\n  MethodError: Cannot `convert` an object of type\
    \ var\"#same_chars#4\" to an object of type Bool\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T},\
    \ !Matched::Number) where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr)\
    \ where T<:Integer at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] same_chars(::String,\
    \ ::String) at /tmp/tmp5qbnzg5i.jl:17\n   [2] top-level scope at /tmp/tmp5qbnzg5i.jl:30\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp5qbnzg5i.jl:23\n  \nTest Summary: | Error \
    \ Total\ntest set      |     7      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5qbnzg5i.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    \n    if s0 == s1 \n \
    \   then return true\n    else if s0 == ''\n    then return true\n    else if\
    \ s1 == ''\n    then return true\n    else if s0 == s1\n    then return true\n\
    \    else if s0 == ''\n    then return true\n    else if s1 == ''\n    then return\
    \ true\n    else if s0 == s1\n    then return true\n    else if s0 == ''\n   \
    \ then return true\n    else if s1 == ''\n    then return true\n    else if s0\
    \ == s1\n    then return true\n    else if s0 == ''\n    then return true\n  \
    \  else if s1 == ''\n    then return true\n    else if s0 == s1\n    then return\
    \ true\n    else if s0 == ''\n    then return true\n    else if s1 == ''\n   \
    \ then return true\n    else if s0 == s1\n    then return true\n    else if s0\
    \ == ''\n    then return true\n    else if s1 == ''\n    then return true\n  \
    \  else if s0 == s1\n    then return true\n    else if s0 == ''\n    then return\
    \ true\n    else if s1 == ''\n    then return true\n    else if s0 == s1\n   \
    \ then return true\n    else if s0 == ''\n    then return true\n    else if s1\
    \ == ''\n    then return true\n    else if s0 == s1\n    then return true\n  \
    \  else if s0 == ''\n    then return true\n    else if s1 == ''\n    then return\
    \ true\n    else if s0 == s1\n    then return true\n    else if s0 == ''\n   \
    \ then return true\n    else if s1 == ''\n    then return true\n    else if s0\
    \ == s1\n    then return true\n    else if s0 == ''\n    then return true\n  \
    \  else if s1 == ''\n    then return true\n    else if s0 == s1\n    then return\
    \ true\n    else if s0 == ''\n    then return true\n    else if s1 == ''\n   \
    \ then return true\n    else if s0 == s1\n    then return true\n    else if s0\
    \ == ''\n    then return true\n    else if s1 == ''\n    then return true\n  \
    \  else if s0 == s1\n    then return true\n    else if s0 == ''\n    then return\
    \ true\n    else if s1 == ''\n    then return true\n    else if s0 == s1\n\nusing\
    \ Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\"\
    ) == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"\
    eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\
    \t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp4jd5v1ea.jl:19\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp4jd5v1ea.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars(s0, s1) = length(s0)\
    \ == length(s1) && all(char(c) == char(s0[c]) for c in s0)\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\n    Check if two words have the same characters.\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd',\
    \ 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n\
    \    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd',\
    \ 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n\
    \    False\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = same_chars;\n\
    \t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"\
    abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\")\
    \ == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"\
    abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp5ayoz614.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp5ayoz614.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    \n    if length(s0) !=\
    \ length(s1)\n        return false\n    \n    i = 0\n    j = length(s0)\n    \n\
    \    while i < j\n        if s0[i] != s1[j]\n            return false\n      \
    \  i += 1\n        j += 1\n    \n    return true\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"\
    dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\t@test(candidate(\"aabb\", \"\
    aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"while\" at /tmp/tmp2_gw0itm.jl:24\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp2_gw0itm.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp2_gw0itm.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    \n    same_chars = true\n\
    \    for c in s0:\n        if c not in s1:\n            same_chars = false\n \
    \           break\n    return same_chars\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp698q6alq.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp698q6alq.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if s0 == s1 \n       \
    \ then return true\n        else return false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpjkc02bx2.jl:18\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpjkc02bx2.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    \n    same_chars = true\n\
    \    \n    for c in s0:\n        if c not in s1:\n            same_chars = false\n\
    \            break\n    \n    return same_chars\nend\n</cell>\n<code language=julia-1.4>\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpi_1lcdq_.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpi_1lcdq_.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars(s0, s1) ||\
    \ same_chars(s1, s0)\nend\nusing Test\n\n@testset begin\n\ncandidate = same_chars;\n\
    \t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"\
    abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\")\
    \ == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"\
    abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpx99797y1.jl:24\n  Test threw exception\n\
    \  Expression: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] same_chars(::String, ::String) at /tmp/tmpx99797y1.jl:17\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmpx99797y1.jl:25\n\
    \  Test threw exception\n  Expression: candidate(\"abcd\", \"dddddddabc\") ==\
    \ true\n  StackOverflowError:\n  Stacktrace:\n   [1] same_chars(::String, ::String)\
    \ at /tmp/tmpx99797y1.jl:17 (repeats 79984 times)\n  \ntest set: Error During\
    \ Test at /tmp/tmpx99797y1.jl:26\n  Test threw exception\n  Expression: candidate(\"\
    dddddddabc\", \"abcd\") == true\n  StackOverflowError:\n  Stacktrace:\n   [1]\
    \ same_chars(::String, ::String) at /tmp/tmpx99797y1.jl:17 (repeats 79984 times)\n\
    \  \ntest set: Error During Test at /tmp/tmpx99797y1.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"eabcd\", \"dddddddabc\") == false\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] same_chars(::String, ::String) at /tmp/tmpx99797y1.jl:17\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmpx99797y1.jl:28\n\
    \  Test threw exception\n  Expression: candidate(\"abcd\", \"dddddddabcf\") ==\
    \ false\n  StackOverflowError:\n  Stacktrace:\n   [1] same_chars(::String, ::String)\
    \ at /tmp/tmpx99797y1.jl:17 (repeats 79984 times)\n  \ntest set: Error During\
    \ Test at /tmp/tmpx99797y1.jl:29\n  Test threw exception\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\") == false\n  StackOverflowError:\n  Stacktrace:\n\
    \   [1] same_chars(::String, ::String) at /tmp/tmpx99797y1.jl:17 (repeats 79984\
    \ times)\n  \ntest set: Error During Test at /tmp/tmpx99797y1.jl:30\n  Test threw\
    \ exception\n  Expression: candidate(\"aabb\", \"aaccc\") == false\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] same_chars(::String, ::String) at /tmp/tmpx99797y1.jl:17\
    \ (repeats 79984 times)\n  \nTest Summary: | Error  Total\ntest set      |   \
    \  7      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpx99797y1.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars_chars_idx::Array{Int,1}\
    \ = findfirst(same_chars_chars_idx, s0)\n    same_chars_chars_idx::Array{Int,1}\
    \ = findfirst(same_chars_chars_idx, s1)\n    same_chars_chars_idx::Array{Int,1}\
    \ = findfirst(same_chars_chars_idx, s2)\n    same_chars_chars_idx::Array{Int,1}\
    \ = findfirst(same_chars_chars_idx, s3)\n    same_chars_chars_idx::Array{Int,1}\
    \ = findfirst(same_chars_chars_idx, s4)\n    same_chars_chars_idx::Array{Int,1}\
    \ = findfirst(same_chars_chars_idx, s5)\n    same_chars_chars_idx::Array{Int,1}\
    \ = findfirst(same_chars_chars_idx, s6)\n    same_chars_chars_idx::Array{Int,1}\
    \ = findfirst(same_chars_chars_idx, s7)\n    same_chars_chars_idx::Array{Int,1}\
    \ = findfirst(same_chars_chars_idx, s8)\n    same_chars_chars_idx::Array{Int,1}\
    \ = findfirst(same_chars_chars_idx, s9)\n    same_chars_chars_idx::Array{Int,1}\
    \ = findfirst(same_chars_chars_idx, s10)\n    same_chars_chars_idx::Array{Int,1}\
    \ = findfirst(same_chars_chars_idx, s11)\n    same_chars_chars_idx::Array{Int,1}\
    \ = findfirst(same_chars_chars_idx, s12)\n    same_chars_chars_idx::Array{Int,1}\
    \ = findfirst(same_chars_chars_idx, s13)\n    same_chars_chars_idx::Array{Int,1}\
    \ = findfirst(same_chars_chars_idx, s14)\n    same_chars_chars_idx::Array{Int,1}\
    \ = findfirst(same_chars_chars_idx, s15)\n    same_chars_chars_idx::Array{Int,1}\
    \ = findfirst(same_chars_chars_idx, s16)\n    same_chars_chars_idx::Array{Int,1}\
    \ = findfirst(same_chars_chars_idx, s17)\n    same_chars_chars_idx::Array{Int,1}\
    \ = findfirst(same_chars_chars_idx, s18)\n    same_chars_chars_idx::Array{Int,1}\
    \ = findfirst(same_chars_chars_idx, s19)\n    same_chars_chars_idx::Array{Int,1}\
    \ = findfirst(same_chars_chars_idx, s20)\n    same_chars_chars_idx::Array{Int,1}\
    \ = findfirst(same_chars_chars_idx, s21)\n    same_chars_chars_idx::Array{Int,1}\
    \ = findfirst(same_chars_chars_idx, s22)\n    same_chars_chars_\nusing Test\n\n\
    @testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\", \"\
    dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\") ==\
    \ true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"\
    eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\
    \t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpl4l9iiea.jl:16\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpl4l9iiea.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpl4l9iiea.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    \n    len0 = length(s0)\n\
    \    len1 = length(s1)\n    \n    if len0 != len1\n        return false\n    \n\
    \    i = 0\n    while i < len0\n        if s0[i] != s1[i]\n            return\
    \ false\n        i += 1\n    \n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmplasv2tdg.jl:32\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmplasv2tdg.jl:32\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    \n    same_chars = true\n\
    \    \n    for c in s0:\n        if c not in s1:\n            same_chars = false\n\
    \            break\n        \n    return same_chars\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmplz5s8u4h.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmplz5s8u4h.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    \n    same_chars = true\n\
    \    \n    for c in s0:\n        if c not in s1:\n            same_chars = false\n\
    \            break\n    \n    return same_chars\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"\
    dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\t@test(candidate(\"aabb\", \"\
    aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8e6akm8k.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp8e6akm8k.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars = true\n  \
    \  for c in s0:\n        if c not in s1:\n            same_chars = false\n   \
    \         break\n    return same_chars\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmplikk59lo.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmplikk59lo.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars(s0, s1) ||\
    \ (same_chars(s0, s1) && same_chars(s1, s0))\nend\n</cell>\n<code language=julia-1.4>\n\
    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9q8z4y3u.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp9q8z4y3u.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars = true\n  \
    \  for c in s0:\n        if c not in s1:\n            same_chars = false\n   \
    \         break\n    return same_chars\nend\n</cell>\n<code language=julia-1.0>\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpqhcv90pm.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpqhcv90pm.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars(s0, s1) ||\
    \ same_chars(s1, s0)\nend\nusing Test\n\n@testset begin\n\ncandidate = same_chars;\n\
    \t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"\
    abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\")\
    \ == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"\
    abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpnrd2865g.jl:24\n  Test threw exception\n\
    \  Expression: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] same_chars(::String, ::String) at /tmp/tmpnrd2865g.jl:17\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmpnrd2865g.jl:25\n\
    \  Test threw exception\n  Expression: candidate(\"abcd\", \"dddddddabc\") ==\
    \ true\n  StackOverflowError:\n  Stacktrace:\n   [1] same_chars(::String, ::String)\
    \ at /tmp/tmpnrd2865g.jl:17 (repeats 79984 times)\n  \ntest set: Error During\
    \ Test at /tmp/tmpnrd2865g.jl:26\n  Test threw exception\n  Expression: candidate(\"\
    dddddddabc\", \"abcd\") == true\n  StackOverflowError:\n  Stacktrace:\n   [1]\
    \ same_chars(::String, ::String) at /tmp/tmpnrd2865g.jl:17 (repeats 79984 times)\n\
    \  \ntest set: Error During Test at /tmp/tmpnrd2865g.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"eabcd\", \"dddddddabc\") == false\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] same_chars(::String, ::String) at /tmp/tmpnrd2865g.jl:17\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmpnrd2865g.jl:28\n\
    \  Test threw exception\n  Expression: candidate(\"abcd\", \"dddddddabcf\") ==\
    \ false\n  StackOverflowError:\n  Stacktrace:\n   [1] same_chars(::String, ::String)\
    \ at /tmp/tmpnrd2865g.jl:17 (repeats 79984 times)\n  \ntest set: Error During\
    \ Test at /tmp/tmpnrd2865g.jl:29\n  Test threw exception\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\") == false\n  StackOverflowError:\n  Stacktrace:\n\
    \   [1] same_chars(::String, ::String) at /tmp/tmpnrd2865g.jl:17 (repeats 79984\
    \ times)\n  \ntest set: Error During Test at /tmp/tmpnrd2865g.jl:30\n  Test threw\
    \ exception\n  Expression: candidate(\"aabb\", \"aaccc\") == false\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] same_chars(::String, ::String) at /tmp/tmpnrd2865g.jl:17\
    \ (repeats 79984 times)\n  \nTest Summary: | Error  Total\ntest set      |   \
    \  7      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnrd2865g.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars = true\n  \
    \  for c in s0:\n        if c not in s1:\n            same_chars = false\n   \
    \         break\n    return same_chars\nend\n</cell>\n<code language=julia-1.4>\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpjgyj0zay.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpjgyj0zay.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    len0 = length(s0)\n  \
    \  len1 = length(s1)\n    if len0 != len1\n        return false\n    else\n  \
    \      for (i0, i1) in zip(xrange(len0), xrange(len1))\n            if s0[i0]\
    \ != s1[i1]\n                return false\n        return true\n    end\nend\n\
    </cell>\n<code language=julia-1.0>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = same_chars;\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\
    \t@test(candidate(\"abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\"\
    , \"abcd\") == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\
    \t@test(candidate(\"abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\") == false)\n\t@test(candidate(\"aabb\", \"aaccc\") ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpkpav1_7r.jl:28\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpkpav1_7r.jl:28\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars = true\n  \
    \  len = length(s0)\n    for i::Int in 0..length(s1)\n        if s0[i] != s1[i]\n\
    \            same_chars = false\n            break\n    end\n    return same_chars\n\
    end\n</cell>\n<code language=julia-1.4>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = same_chars;\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\
    \t@test(candidate(\"abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\"\
    , \"abcd\") == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\
    \t@test(candidate(\"abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\") == false)\n\t@test(candidate(\"aabb\", \"aaccc\") ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmplygq28b7.jl:26\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmplygq28b7.jl:26\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    len0 = length(s0)\n  \
    \  len1 = length(s1)\n    if len0 != len1\n        return false\n    else\n  \
    \      chars = chars(s0)\n        chars = chars[0..len1-len0]\n        chars =\
    \ chars[1..len0]\n        chars = chars[1..len1]\n        chars = chars[0..len1-len0]\n\
    \        chars = chars[1..len0]\n        chars = chars[1..len1]\n        chars\
    \ = chars[0..len1-len0]\n        chars = chars[1..len0]\n        chars = chars[1..len1]\n\
    \        chars = chars[0..len1-len0]\n        chars = chars[1..len0]\n       \
    \ chars = chars[1..len1]\n        chars = chars[0..len1-len0]\n        chars =\
    \ chars[1..len0]\n        chars = chars[1..len1]\n        chars = chars[0..len1-len0]\n\
    \        chars = chars[1..len0]\n        chars = chars[1..len1]\n        chars\
    \ = chars[0..len1-len0]\n        chars = chars[1..len0]\n        chars = chars[1..len1]\n\
    \        chars = chars[0..len1-len0]\n        chars = chars[1..len0]\n       \
    \ chars = chars[1..len1]\n        chars = chars[0..len1-len0]\n        chars =\
    \ chars[1..len0]\n        chars = chars[1..len1]\n        chars = chars[0..len1-len0]\n\
    \        chars = chars[1..len0]\n        chars = chars[1..len1]\n        chars\
    \ = chars[0..len1-len0]\n        chars = chars[1..len0]\n        chars = chars[1..len1]\n\
    \        chars = chars[0..len1-len0]\n        chars = chars[1..len0]\n       \
    \ chars = chars[1..len1]\n        chars = chars[0..len1-len0]\n        chars =\
    \ chars[1..len0]\n        chars = chars[1..len1]\n        chars = chars[0..len1-len0]\n\
    \        chars = chars[1..len0]\n        chars = chars[1..len1]\n        chars\
    \ = chars[0..len1-len0]\n        chars = chars[1..len0]\n        chars = chars[1..len\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpzp3mg7ul.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpzp3mg7ul.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars = true\n  \
    \  for c in s0:\n        if c not in s1:\n            same_chars = false\n   \
    \         break\n    return same_chars\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpr6g1c0ly.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpr6g1c0ly.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars = true\n  \
    \  for c in s0:\n        if c not in s1:\n            same_chars = false\n   \
    \         break\n    return same_chars\nend\n</cell>\n<code language=julia-1.4>\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp23pgw_ui.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp23pgw_ui.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    len = length(s0)\n   \
    \ len1 = length(s1)\n    if len == len1\n        for (i, c) in zip(s0, s1)\n \
    \           if i != c\n                return false\n    return true\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    Check if two words have the same characters.\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd',\
    \ 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n\
    \    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd',\
    \ 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n\
    \    False\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = same_chars;\n\
    \t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"\
    abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\")\
    \ == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"\
    abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp6vsutjkc.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp6vsutjkc.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars = true\n  \
    \  for c in s0:\n        if c not in s1:\n            same_chars = false\n   \
    \         break\n    return same_chars\nend\n</cell>\n<code language=julia-1.4>\n\
    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpgm_tvif2.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpgm_tvif2.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars = true\n  \
    \  for c in s0:\n        if c not in s1:\n            same_chars = false\n   \
    \         break\n    return same_chars\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpkrs_s0ic.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpkrs_s0ic.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    len0 = length(s0)\n  \
    \  len1 = length(s1)\n    if len0 != len1\n        return false\n    \n    i =\
    \ 0\n    while i < len0\n        if s0[i] != s1[i]\n            return false\n\
    \        i += 1\n    return true\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the number of characters in a string.\nThe function should take\
    \ a string as input and return the number of characters in the string.\nThe function\
    \ should raise an error if the string is not of length 1 or is empty.\nThe function\
    \ should raise an error if the string contains any non-alphabetic characters.\n\
    The function should raise an error if the string contains any non-alphabetic characters\
    \ or is empty.\nThe function should raise an error if the string contains any\
    \ non-alphabetic characters or is empty.\nThe function should raise an error if\
    \ the string contains any non-alphabetic characters or is empty.\nThe function\
    \ should raise an error if the string contains any non-alphabetic characters or\
    \ is empty.\nThe function should raise an error if the string contains any non-alphabetic\
    \ characters or is empty.\nThe function should raise an error if the string contains\
    \ any non-alphabetic characters or is empty.\nThe function should raise an error\
    \ if the string contains any non-alphabetic characters or is empty.\nThe function\
    \ should raise an error if the string contains any non-alphabetic characters or\
    \ is empty.\nThe function should raise an error if the string contains any non-alphabetic\
    \ characters or is empty.\nThe function should raise an error if the string contains\
    \ any non-alphabetic characters or is empty.\nThe function should raise an error\
    \ if the string contains any non-alphabetic characters or is empty.\nThe function\
    \ should raise an error if the string contains any non-alphabetic characters or\
    \ is empty.\nThe function should raise an error if the string contains any non-alphabetic\
    \ characters or is empty.\nThe function should raise an error if the string contains\
    \ any non-alphabetic characters or is empty.\nThe function should raise an error\
    \ if the string contains any non-alphabetic characters or is empty.\nThe function\
    \ should raise an error if the string contains any non-alphabetic characters or\
    \ is empty.\nThe function should raise an error if the string contains any non-alphabetic\
    \ characters or is empty.\nThe function should raise an error if the string contains\
    \ any non-alphabetic characters or is empty.\nThe function should raise an error\
    \ if the string contains any non-alphabetic characters or is empty.\nThe function\
    \ should raise an error if the string contains any non-alphabetic characters or\
    \ is empty.\nThe function should raise an error if the string contains any non-alphabetic\
    \ characters or is empty.\nThe function should raise an error if the string contains\
    \ any non-alphabetic characters or is empty.\nThe function should \nusing Test\n\
    \n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\",\
    \ \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\"\
    ) == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"\
    eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\
    \t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_7h_vscu.jl:29\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_7h_vscu.jl:29\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars = true\n  \
    \  for c in s0:\n        if c not in s1:\n            same_chars = false\n   \
    \         break\n    return same_chars\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmplae8xf4v.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmplae8xf4v.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars = true\n  \
    \  for c in s0:\n        if c not in s1:\n            same_chars = false\n   \
    \         break\n    return same_chars\nend\n</cell>\n<code language=julia-1.1>\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp7ocrrheu.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp7ocrrheu.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars = true\n  \
    \  for c in s0:\n        if c not in s1:\n            same_chars = false\n   \
    \         break\n    return same_chars\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8_nvm113.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp8_nvm113.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    len0 = length(s0)\n  \
    \  len1 = length(s1)\n    if len0 != len1\n        return false\n    \n    i =\
    \ 0\n    while i < len0\n        if s0[i] != s1[i]\n            return false\n\
    \        i += 1\n    return true\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that checks if two words are anagrams of each other.\nThe function should take\
    \ two strings as arguments and return true if the two words are anagrams of each\
    \ other, and false otherwise.\nThe function should ignore case when comparing\
    \ characters.\nThe function should ignore punctuation and numbers.\nThe function\
    \ should ignore spaces.\nThe function should ignore extra whitespace.\nThe function\
    \ should ignore leading whitespace.\nThe function should ignore trailing whitespace.\n\
    The function should ignore leading or trailing punctuation.\nThe function should\
    \ ignore extra punctuation.\nThe function should ignore extra numbers.\nThe function\
    \ should ignore extra spaces.\nThe function should ignore extra leading or trailing\
    \ whitespace.\nThe function should ignore extra leading or trailing punctuation.\n\
    The function should ignore extra leading or trailing numbers.\nThe function should\
    \ ignore extra leading or trailing spaces.\nThe function should ignore extra leading\
    \ or trailing whitespace.\nThe function should ignore extra leading or trailing\
    \ punctuation.\nThe function should ignore extra leading or trailing numbers.\n\
    The function should ignore extra leading or trailing spaces.\nThe function should\
    \ ignore extra leading or trailing whitespace.\nThe function should ignore extra\
    \ leading or trailing punctuation.\nThe function should ignore extra leading or\
    \ trailing numbers.\nThe function should ignore extra leading or trailing spaces.\n\
    The function should ignore extra leading or trailing whitespace.\nThe function\
    \ should ignore extra leading or trailing punctuation.\nThe function should ignore\
    \ extra leading or trailing numbers.\nThe function should ignore extra leading\
    \ or trailing spaces.\nThe function should ignore extra leading or trailing whitespace.\n\
    The function should ignore extra leading or trailing punctuation.\nThe function\
    \ should ignore extra leading or trailing numbers.\nThe function should ignore\
    \ extra leading or trailing spaces.\nThe function should ignore extra leading\
    \ or trailing whitespace.\nThe function should ignore extra leading or trailing\
    \ punctuation.\nThe function should ignore extra leading or trailing numbers.\n\
    The function should ignore extra leading or trailing spaces.\nThe function should\
    \ ignore extra leading or trailing whitespace.\nThe function should ignore extra\
    \ leading or trailing punctuation.\nThe function should ignore extra leading or\
    \ trailing numbers.\nThe function should ignore extra leading or trailing spaces.\n\
    The function should ignore extra leading or trailing whitespace.\nThe function\
    \ should ignore extra leading or trailing punctuation.\nThe function should ignore\
    \ extra leading or trailing numbers.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = same_chars;\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\
    \t@test(candidate(\"abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\"\
    , \"abcd\") == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\
    \t@test(candidate(\"abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\") == false)\n\t@test(candidate(\"aabb\", \"aaccc\") ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4t1_46x_.jl:29\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp4t1_46x_.jl:29\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    \n    same_chars = true\n\
    \    \n    for c in s0:\n        if c not in s1:\n            same_chars = false\n\
    \            break\n    \n    return same_chars\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpg258ys5f.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpg258ys5f.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars(s0, s1) = s1==s0\
    \ \nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"\
    dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\t@test(candidate(\"aabb\", \"\
    aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpb1s6wnk2.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpb1s6wnk2.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars = true\n  \
    \  for c in s0:\n        if c not in s1:\n            same_chars = false\n   \
    \         break\n    return same_chars\nend \n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpk_qa78ws.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpk_qa78ws.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    \n    same_chars = true\n\
    \    \n    for c in s0:\n        if c not in s1:\n            same_chars = false\n\
    \            break\n    \n    return same_chars\n</code>\n<|/ a dscore=2 |>\n\
    <| c |>\nThis does not answer the question. He is asking about a general algorithm\
    \ to compare two strings. Your answer only works for two strings.\n<|/ c |>\n\
    <| c |>\nThis answer does not answer the question. He is asking about a general\
    \ algorithm to compare two strings. Your answer only works for two strings.\n\
    <|/ c |>\n<| c |>\nI believe this answer is correct. He is asking about a general\
    \ algorithm to compare two strings. Your answer only works for two strings.\n\
    <|/ c |>\n<| c |>\nThis answer does not answer the question. He is asking about\
    \ a general algorithm to compare two strings. Your answer only works for two strings.\n\
    <|/ c |>\n<| c |>\nThis answer does not answer the question. He is asking about\
    \ a general algorithm to compare two strings. Your answer only works for two strings.\n\
    <|/ c |>\n<| a |>\n<code>\ndef same_chars(s0, s1):\n    return len(s0) == len(s1)\
    \ and set(s0) == set(s1)\n</code>\n<|/ a tags=string,algorithm,python dscore=2\
    \ |>\n<| c |>\nThis does not answer the question. He is asking about a general\
    \ algorithm to compare two strings. Your answer only works for two strings.\n\
    <|/ c |>\n<| c |>\nThis answer does not answer the question. He is asking about\
    \ a general algorithm to compare two strings. Your answer only works for two strings.\n\
    <|/ c |>\n<| a dscore=2 |>\n<code>\ndef same_chars(s0, s1):\n    return len(s0)\
    \ == len(s1) and set(s0) == set(s1)\n</code>\n<|/ a tags=string,algorithm,python\
    \ |>\n<| c |>\nThis does not answer the question. He is asking about a general\
    \ algorithm to compare two strings. Your answer only works for two strings.\n\
    <|/ c |>\n<| c |>\nThis answer does not answer the question. He is asking about\
    \ a general algorithm to compare two strings. Your answer only works for two strings.\n\
    <|/ c |>\n<| a tags=string,algorithm,python |>\n<code>\ndef same_chars(s0, s1):\n\
    \    return len(s0) == len(s1) and set(s0) == set(s1)\n</code>\n<|/ a d\nusing\
    \ Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\"\
    ) == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"\
    eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\
    \t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpify9tmm2.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpify9tmm2.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    \n    same_chars = false\n\
    \    \n    if length(s0) == length(s1)\n        same_chars = true\n        for\
    \ (i, c) in zip(s0, s1)\n            if c != s0[i]\n                same_chars\
    \ = false\n                break\n    end\n    \n    return same_chars\nend\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpv_doy199.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpv_doy199.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    \n    len0 = length(s0)\n\
    \    len1 = length(s1)\n    \n    if len0 != len1\n        return false\n    \n\
    \    i = 0\n    while i < len0\n        if s0[i] != s1[i]\n            return\
    \ false\n        i += 1\n    \n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmecstw2c.jl:32\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpmecstw2c.jl:32\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    len0 = length(s0)\n  \
    \  len1 = length(s1)\n    if len0 != len1\n        return false\n    else\n  \
    \      chars = chars(s0)\n        chars = chars[0..len1-1]\n        for c in chars\n\
    \            if c != chars[end(chars)]\n                return false\n       \
    \ end\n        return true\n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that checks if a word is a palindrome.\nA palindrome is a word that\
    \ reads the same backward as forward.\nFor example, \u201Cracecar\u201D is a palindrome.\n\
    Write a function that checks if a word is a palindrome.\nA palindrome is a word\
    \ that reads the same backward as forward.\nFor example, \u201Cracecar\u201D is\
    \ a palindrome.\nWrite a function that checks if a word is a palindrome.\nA palindrome\
    \ is a word that reads the same backward as forward.\nFor example, \u201Cracecar\u201D\
    \ is a palindrome.\nWrite a function that checks if a word is a palindrome.\n\
    A palindrome is a word that reads the same backward as forward.\nFor example,\
    \ \u201Cracecar\u201D is a palindrome.\nWrite a function that checks if a word\
    \ is a palindrome.\nA palindrome is a word that reads the same backward as forward.\n\
    For example, \u201Cracecar\u201D is a palindrome.\nWrite a function that checks\
    \ if a word is a palindrome.\nA palindrome is a word that reads the same backward\
    \ as forward.\nFor example, \u201Cracecar\u201D is a palindrome.\nWrite a function\
    \ that checks if a word is a palindrome.\nA palindrome is a word that reads the\
    \ same backward as forward.\nFor example, \u201Cracecar\u201D is a palindrome.\n\
    Write a function that checks if a word is a palindrome.\nA palindrome is a word\
    \ that reads the same backward as forward.\nFor example, \u201Cracecar\u201D is\
    \ a palindrome.\nWrite a function that checks if a word is a palindrome.\nA palindrome\
    \ is a word that reads the same backward as forward.\nFor example, \u201Cracecar\u201D\
    \ is a palindrome.\nWrite a function that checks if a word is a palindrome.\n\
    A palindrome is a word that reads the same backward as forward.\nFor example,\
    \ \u201Cracecar\u201D is a palindrome.\nWrite a function that checks if a word\
    \ is a palindrome.\nA palindrome is a word that reads the same backward as forward.\n\
    For example, \u201Cracecar\u201D is a palindrome.\nWrite a \nusing Test\n\n@testset\
    \ begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"\
    dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\t@test(candidate(\"aabb\", \"\
    aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8e93oxhd.jl:31\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp8e93oxhd.jl:31\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars = true\n  \
    \  for c in s0:\n        if c not in s1:\n            same_chars = false\n   \
    \         break\n    return same_chars\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpgw87thw4.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpgw87thw4.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    \n    if s0 == s1 \n \
    \       then return true\n    else \n        same_chars(s0, s1) || same_chars(s1,\
    \ s0)\n    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"\
    dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\t@test(candidate(\"aabb\", \"\
    aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpqbx585ld.jl:19\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpqbx585ld.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    \n    same_chars = true\n\
    \    \n    for c in s0:\n        if c not in s1:\n            same_chars = false\n\
    \            break\n    \n    return same_chars\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp1vuzb3rs.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp1vuzb3rs.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars = true\n  \
    \  for c in s0:\n        if c not in s1:\n            same_chars = false\n   \
    \         break\n    return same_chars\nend\n</cell>\n<code language=julia-1.3>\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp48qewxfb.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp48qewxfb.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    \n    same_chars = false\n\
    \    \n    if length(s0) == length(s1)\n        same_chars = true\n        for\
    \ (i0, i1) in zip(xrange(length(s0)), xrange(length(s1)))\n            if s0[i0]\
    \ != s1[i1]\n                same_chars = false\n                break\n    end\n\
    \    \n    return same_chars\nend\n</cell>\n<code language=julia-0.4>\n\"\"\"\n\
    \    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3h9h44az.jl:30\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp3h9h44az.jl:30\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars(s0, s1) ||\
    \ same_chars(s1, s0)\nend\nusing Test\n\n@testset begin\n\ncandidate = same_chars;\n\
    \t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"\
    abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\")\
    \ == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"\
    abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp0e26y672.jl:24\n  Test threw exception\n\
    \  Expression: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] same_chars(::String, ::String) at /tmp/tmp0e26y672.jl:17\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmp0e26y672.jl:25\n\
    \  Test threw exception\n  Expression: candidate(\"abcd\", \"dddddddabc\") ==\
    \ true\n  StackOverflowError:\n  Stacktrace:\n   [1] same_chars(::String, ::String)\
    \ at /tmp/tmp0e26y672.jl:17 (repeats 79984 times)\n  \ntest set: Error During\
    \ Test at /tmp/tmp0e26y672.jl:26\n  Test threw exception\n  Expression: candidate(\"\
    dddddddabc\", \"abcd\") == true\n  StackOverflowError:\n  Stacktrace:\n   [1]\
    \ same_chars(::String, ::String) at /tmp/tmp0e26y672.jl:17 (repeats 79984 times)\n\
    \  \ntest set: Error During Test at /tmp/tmp0e26y672.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"eabcd\", \"dddddddabc\") == false\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] same_chars(::String, ::String) at /tmp/tmp0e26y672.jl:17\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmp0e26y672.jl:28\n\
    \  Test threw exception\n  Expression: candidate(\"abcd\", \"dddddddabcf\") ==\
    \ false\n  StackOverflowError:\n  Stacktrace:\n   [1] same_chars(::String, ::String)\
    \ at /tmp/tmp0e26y672.jl:17 (repeats 79984 times)\n  \ntest set: Error During\
    \ Test at /tmp/tmp0e26y672.jl:29\n  Test threw exception\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\") == false\n  StackOverflowError:\n  Stacktrace:\n\
    \   [1] same_chars(::String, ::String) at /tmp/tmp0e26y672.jl:17 (repeats 79984\
    \ times)\n  \ntest set: Error During Test at /tmp/tmp0e26y672.jl:30\n  Test threw\
    \ exception\n  Expression: candidate(\"aabb\", \"aaccc\") == false\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] same_chars(::String, ::String) at /tmp/tmp0e26y672.jl:17\
    \ (repeats 79984 times)\n  \nTest Summary: | Error  Total\ntest set      |   \
    \  7      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0e26y672.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars = true\n  \
    \  for c in s0:\n        if c not in s1:\n            same_chars = false\n   \
    \         break\n    return same_chars\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpbnfzctm9.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpbnfzctm9.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    len = length(s0)\n   \
    \ len1 = length(s1)\n    if len == len1\n        for (i1, i2) in zip(xrange(len),\
    \ xrange(len))\n            if s0[i1] != s1[i2]\n                then return False\n\
    \            end\n        return true\n    end\n    return false\nend\n</cell>\n\
    <text>\nExercise 4\nWrite a function that takes a string as input and returns\
    \ the number of characters in the string. \nWrite a function that takes a string\
    \ as input and returns the number of words in the string. \nWrite a function that\
    \ takes a string as input and returns the number of sentences in the string. \n\
    Write a function that takes a string as input and returns the number of characters\
    \ and words in the string. \nWrite a function that takes a string as input and\
    \ returns the number of characters and words in the string.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"\
    dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\t@test(candidate(\"aabb\", \"\
    aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp783e7iq6.jl:22\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp783e7iq6.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    len0 = length(s0)\n  \
    \  len1 = length(s1)\n    if len0 == len1\n        true\n    elseif len0 == 0\n\
    \        false\n    elseif len1 == 0\n        false\n    else\n        same_chars(s0,\
    \ s1[1:len1-1])\n    end\nend\n</cell>\n<text>\nExercise 3: Write a function that\
    \ checks if a word is palindrome. Palindrome is a word that reads the same backward\
    \ as forward.\nusing Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpzozqm0zq.jl:29\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpzozqm0zq.jl:29\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars(s0, s1) = length(s0)\
    \ == length(s1) && all(char(c) == char(c0) for (c, c0) in zip(s0, s1))\nend\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp00r9i1fg.jl:24\n  Test threw exception\n\
    \  Expression: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n  MethodError:\
    \ Cannot `convert` an object of type var\"#same_chars#4\" to an object of type\
    \ Bool\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number\
    \ at number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at\
    \ number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer at pointer.jl:23\n\
    \    ...\n  Stacktrace:\n   [1] same_chars(::String, ::String) at /tmp/tmp00r9i1fg.jl:17\n\
    \   [2] top-level scope at /tmp/tmp00r9i1fg.jl:24\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp00r9i1fg.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmp00r9i1fg.jl:25\n  Test threw exception\n  Expression: candidate(\"\
    abcd\", \"dddddddabc\") == true\n  MethodError: Cannot `convert` an object of\
    \ type var\"#same_chars#4\" to an object of type Bool\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T},\
    \ !Matched::Number) where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr)\
    \ where T<:Integer at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] same_chars(::String,\
    \ ::String) at /tmp/tmp00r9i1fg.jl:17\n   [2] top-level scope at /tmp/tmp00r9i1fg.jl:25\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp00r9i1fg.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmp00r9i1fg.jl:26\n  Test threw exception\n  Expression: candidate(\"\
    dddddddabc\", \"abcd\") == true\n  MethodError: Cannot `convert` an object of\
    \ type var\"#same_chars#4\" to an object of type Bool\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T},\
    \ !Matched::Number) where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr)\
    \ where T<:Integer at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] same_chars(::String,\
    \ ::String) at /tmp/tmp00r9i1fg.jl:17\n   [2] top-level scope at /tmp/tmp00r9i1fg.jl:26\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp00r9i1fg.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmp00r9i1fg.jl:27\n  Test threw exception\n  Expression: candidate(\"\
    eabcd\", \"dddddddabc\") == false\n  MethodError: Cannot `convert` an object of\
    \ type var\"#same_chars#4\" to an object of type Bool\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T},\
    \ !Matched::Number) where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr)\
    \ where T<:Integer at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] same_chars(::String,\
    \ ::String) at /tmp/tmp00r9i1fg.jl:17\n   [2] top-level scope at /tmp/tmp00r9i1fg.jl:27\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp00r9i1fg.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmp00r9i1fg.jl:28\n  Test threw exception\n  Expression: candidate(\"\
    abcd\", \"dddddddabcf\") == false\n  MethodError: Cannot `convert` an object of\
    \ type var\"#same_chars#4\" to an object of type Bool\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T},\
    \ !Matched::Number) where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr)\
    \ where T<:Integer at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] same_chars(::String,\
    \ ::String) at /tmp/tmp00r9i1fg.jl:17\n   [2] top-level scope at /tmp/tmp00r9i1fg.jl:28\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp00r9i1fg.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmp00r9i1fg.jl:29\n  Test threw exception\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\") == false\n  MethodError: Cannot `convert`\
    \ an object of type var\"#same_chars#4\" to an object of type Bool\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\n   \
    \ convert(::Type{T}, !Matched::Ptr) where T<:Integer at pointer.jl:23\n    ...\n\
    \  Stacktrace:\n   [1] same_chars(::String, ::String) at /tmp/tmp00r9i1fg.jl:17\n\
    \   [2] top-level scope at /tmp/tmp00r9i1fg.jl:29\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp00r9i1fg.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmp00r9i1fg.jl:30\n  Test threw exception\n  Expression: candidate(\"\
    aabb\", \"aaccc\") == false\n  MethodError: Cannot `convert` an object of type\
    \ var\"#same_chars#4\" to an object of type Bool\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T},\
    \ !Matched::Number) where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr)\
    \ where T<:Integer at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] same_chars(::String,\
    \ ::String) at /tmp/tmp00r9i1fg.jl:17\n   [2] top-level scope at /tmp/tmp00r9i1fg.jl:30\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp00r9i1fg.jl:23\n  \nTest Summary: | Error \
    \ Total\ntest set      |     7      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp00r9i1fg.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars(s0, s1) = length(s0)\
    \ == length(s1) && all(char(s0[i]) == char(s1[i]) for i in 1:length(s0))\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = same_chars;\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\
    \t@test(candidate(\"abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\"\
    , \"abcd\") == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\
    \t@test(candidate(\"abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\") == false)\n\t@test(candidate(\"aabb\", \"aaccc\") ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmps04j5e1k.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmps04j5e1k.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    \n    same_chars = true\n\
    \    \n    for c in s0:\n        if c not in s1:\n            same_chars = false\n\
    \            break\n    \n    return same_chars\n</cell>\n<text>\nExercise 4\n\
    Write a function that checks if two words are anagrams of each other.\nThe function\
    \ should take two strings as arguments and return true if they are anagrams of\
    \ each other, and false if not.\nThe function should ignore case when comparing\
    \ characters.\nThe function should ignore non-alphabetic characters (punctuation,\
    \ spaces, etc).\nThe function should ignore duplicate characters (such as 'a'\
    \ and 'a').\nThe function should ignore case when comparing characters.\nThe function\
    \ should ignore non-alphabetic characters (punctuation, spaces, etc).\nThe function\
    \ should ignore duplicate characters (such as 'a' and 'a').\nThe function should\
    \ ignore case when comparing characters.\nThe function should ignore non-alphabetic\
    \ characters (punctuation, spaces, etc).\nThe function should ignore duplicate\
    \ characters (such as 'a' and 'a').\nThe function should ignore case when comparing\
    \ characters.\nThe function should ignore non-alphabetic characters (punctuation,\
    \ spaces, etc).\nThe function should ignore duplicate characters (such as 'a'\
    \ and 'a').\nThe function should ignore case when comparing characters.\nThe function\
    \ should ignore non-alphabetic characters (punctuation, spaces, etc).\nThe function\
    \ should ignore duplicate characters (such as 'a' and 'a').\nThe function should\
    \ ignore case when comparing characters.\nThe function should ignore non-alphabetic\
    \ characters (punctuation, spaces, etc).\nThe function should ignore duplicate\
    \ characters (such as 'a' and 'a').\nThe function should ignore case when comparing\
    \ characters.\nThe function should ignore non-alphabetic characters (punctuation,\
    \ spaces, etc).\nThe function should ignore duplicate characters (such as 'a'\
    \ and 'a').\nThe function should ignore case when comparing characters.\nThe function\
    \ should ignore non-alphabetic characters (punctuation, spaces, etc).\nThe function\
    \ should ignore duplicate characters (such as 'a' and 'a').\nThe function should\
    \ ignore case when comparing characters.\nThe function should ignore non-alphabetic\
    \ characters (punctuation, spaces, etc).\nThe function should ignore duplicate\
    \ characters (such as 'a' and 'a').\nThe function should ignore case when comparing\
    \ characters.\nThe function should ignore non-alphabetic characters (punctuation,\
    \ spaces, etc).\nThe function should ignore duplicate characters (such as 'a'\
    \ and 'a').\nThe function should ignore case when comparing characters.\nThe function\
    \ should ignore non-alphabetic characters (punctuation, \nusing Test\n\n@testset\
    \ begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"\
    dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\t@test(candidate(\"aabb\", \"\
    aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpqfnt3u5e.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpqfnt3u5e.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    \n    same_chars = false\n\
    \    \n    if length(s0) == length(s1)\n        for (i, c) in zip(s0, s1)\n  \
    \          if c != s0[i]\n                same_chars = true\n                break\n\
    \    end\n    return same_chars\nend\n</cell>\n<code language=julia-1.1>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\"\
    ) == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"\
    eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\
    \t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2kky1zki.jl:28\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp2kky1zki.jl:28\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    \n    if s0 == s1 \n \
    \       then return true\n    else if s0 == \"\"\n        then return true\n \
    \   else if s1 == \"\"\n        then return true\n    else if s0 == \"\"\n   \
    \     then return true\n    else if s1 == \"\"\n        then return true\n   \
    \ else if s0 == \"\"\n        then return true\n    else if s1 == \"\"\n     \
    \   then return true\n    else if s0 == \"\"\n        then return true\n    else\
    \ if s1 == \"\"\n        then return true\n    else if s0 == \"\"\n        then\
    \ return true\n    else if s1 == \"\"\n        then return true\n    else if s0\
    \ == \"\"\n        then return true\n    else if s1 == \"\"\n        then return\
    \ true\n    else if s0 == \"\"\n        then return true\n    else if s1 == \"\
    \"\n        then return true\n    else if s0 == \"\"\n        then return true\n\
    \    else if s1 == \"\"\n        then return true\n    else if s0 == \"\"\n  \
    \      then return true\n    else if s1 == \"\"\n        then return true\n  \
    \  else if s0 == \"\"\n        then return true\n    else if s1 == \"\"\n    \
    \    then return true\n    else if s0 == \"\"\n        then return true\n    else\
    \ if s1 == \"\"\n        then return true\n    else if s0 == \"\"\n        then\
    \ return true\n    else if s1 == \"\"\n        then return true\n    else if s0\
    \ == \"\"\n        then return true\n    else if s1 == \"\"\n        then return\
    \ true\n    else if s0 == \"\"\n        then return true\n    else if s1 == \"\
    \"\n        then return true\n    else if s0 == \"\"\n        then return true\n\
    \    else if s1 == \"\"\n        then return true\n    else if s0 == \"\"\n  \
    \      then return true\n    else if s1 == \"\"\n        then return true\n  \
    \  else if s0 == \"\"\n        then return true\n    else if s1 == \"\"\n    \
    \    then return true\n    else if s0 == \"\"\n        then return true\n    else\
    \ if s1 == \"\"\n        then return true\n    else if s0 == \"\"\n        then\
    \ return true\n    else if s1 == \"\"\n        then return true\n    else if s0\
    \ == \"\"\n        then return true\n    else if s1 == \"\"\n        then return\
    \ true\n    else if s0 == \"\"\n        then return true\n    else if s1 == \"\
    \"\n\nusing Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpyydtop0t.jl:19\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpyydtop0t.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    len0 = length(s0)\n  \
    \  len1 = length(s1)\n    if len0 != len1\n        return false\n    else\n  \
    \      for (i0, i1) in zip(xrange(len0), xrange(len1))\n            if s0[i0]\
    \ != s1[i1]\n                return false\n    return true\nend\n</cell>\n<code\
    \ language=julia-1.3>\n\"\"\"\n    Check if two words have the same characters.\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd',\
    \ 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n\
    \    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd',\
    \ 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n\
    \    False\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = same_chars;\n\
    \t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"\
    abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\")\
    \ == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"\
    abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2a19h9m0.jl:27\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp2a19h9m0.jl:27\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars_chars_idx::Array{Int,1}\
    \ = zeros(Int, length(s0))\n    for (i,c) in enumerate(s0)\n        same_chars_chars_idx[i]\
    \ = same_chars_chars_idx[i] + 1 if c == s1[i] else 0\n    return same_chars_chars_idx\
    \ == length(s0)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"\
    dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\t@test(candidate(\"aabb\", \"\
    aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"if\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp260g0aqo.jl:19\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp260g0aqo.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars(s0, s1) = length(s0)\
    \ == length(s1) && all(char(s0[i]) == char(s1[i]) for i in 1:length(s0))\nend\n\
    </cell>\n<code language=julia-1.3>\n\"\"\"\n    Check if two words have the same\
    \ characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n\
    \    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"\
    dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\t@test(candidate(\"aabb\", \"\
    aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp913xm8t8.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp913xm8t8.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars_chars_ = same_chars_chars_(s0,\
    \ s1)\n    if same_chars_chars_ == true\n        same_chars_chars_ = same_chars_chars_(s1,\
    \ s0)\n    end\n    return same_chars_chars_\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"\
    dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\t@test(candidate(\"aabb\", \"\
    aaccc\") == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp12muu042.jl:28\n  Test threw exception\n\
    \  Expression: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n  UndefVarError:\
    \ same_chars_chars_ not defined\n  Stacktrace:\n   [1] same_chars(::String, ::String)\
    \ at /tmp/tmp12muu042.jl:17\n   [2] top-level scope at /tmp/tmp12muu042.jl:28\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp12muu042.jl:27\n  \ntest set: Error During\
    \ Test at /tmp/tmp12muu042.jl:29\n  Test threw exception\n  Expression: candidate(\"\
    abcd\", \"dddddddabc\") == true\n  UndefVarError: same_chars_chars_ not defined\n\
    \  Stacktrace:\n   [1] same_chars(::String, ::String) at /tmp/tmp12muu042.jl:17\n\
    \   [2] top-level scope at /tmp/tmp12muu042.jl:29\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp12muu042.jl:27\n  \ntest set: Error During\
    \ Test at /tmp/tmp12muu042.jl:30\n  Test threw exception\n  Expression: candidate(\"\
    dddddddabc\", \"abcd\") == true\n  UndefVarError: same_chars_chars_ not defined\n\
    \  Stacktrace:\n   [1] same_chars(::String, ::String) at /tmp/tmp12muu042.jl:17\n\
    \   [2] top-level scope at /tmp/tmp12muu042.jl:30\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp12muu042.jl:27\n  \ntest set: Error During\
    \ Test at /tmp/tmp12muu042.jl:31\n  Test threw exception\n  Expression: candidate(\"\
    eabcd\", \"dddddddabc\") == false\n  UndefVarError: same_chars_chars_ not defined\n\
    \  Stacktrace:\n   [1] same_chars(::String, ::String) at /tmp/tmp12muu042.jl:17\n\
    \   [2] top-level scope at /tmp/tmp12muu042.jl:31\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp12muu042.jl:27\n  \ntest set: Error During\
    \ Test at /tmp/tmp12muu042.jl:32\n  Test threw exception\n  Expression: candidate(\"\
    abcd\", \"dddddddabcf\") == false\n  UndefVarError: same_chars_chars_ not defined\n\
    \  Stacktrace:\n   [1] same_chars(::String, ::String) at /tmp/tmp12muu042.jl:17\n\
    \   [2] top-level scope at /tmp/tmp12muu042.jl:32\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp12muu042.jl:27\n  \ntest set: Error During\
    \ Test at /tmp/tmp12muu042.jl:33\n  Test threw exception\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\") == false\n  UndefVarError: same_chars_chars_\
    \ not defined\n  Stacktrace:\n   [1] same_chars(::String, ::String) at /tmp/tmp12muu042.jl:17\n\
    \   [2] top-level scope at /tmp/tmp12muu042.jl:33\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp12muu042.jl:27\n  \ntest set: Error During\
    \ Test at /tmp/tmp12muu042.jl:34\n  Test threw exception\n  Expression: candidate(\"\
    aabb\", \"aaccc\") == false\n  UndefVarError: same_chars_chars_ not defined\n\
    \  Stacktrace:\n   [1] same_chars(::String, ::String) at /tmp/tmp12muu042.jl:17\n\
    \   [2] top-level scope at /tmp/tmp12muu042.jl:34\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp12muu042.jl:27\n  \nTest Summary: | Error \
    \ Total\ntest set      |     7      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp12muu042.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars = true\n  \
    \  for c in s0:\n        if c not in s1:\n            same_chars = false\n   \
    \         break\n    return same_chars\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpgwudpp4u.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpgwudpp4u.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars(s0, s1) ||\
    \ same_chars(s1, s0)\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    Check\
    \ if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"\
    dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\t@test(candidate(\"aabb\", \"\
    aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpl0uy67ub.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpl0uy67ub.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    len0 = length(s0)\n  \
    \  len1 = length(s1)\n    if len0 != len1\n        return false\n    else\n  \
    \      chars = chars(s0)\n        chars = chars[0..len1-len0]\n        chars =\
    \ chars[1..len0]\n        chars = chars[1..len1]\n        chars = chars[0..len1-len0]\n\
    \        return chars == chars\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpi4_f25c8.jl:30\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpi4_f25c8.jl:30\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\
    \ \n    then return false \n    else if length(s0) == 0 \n    then return true\
    \ \n    else if length(s0) == 1 \n    then return s0 == s1 \n    else \n     \
    \   local i::Int = 0\n        local j::Int = 0\n        local k::Int = 0\n   \
    \     local l::Int = 0\n        local m::Int = 0\n        local n::Int = 0\n \
    \       local o::Int = 0\n        local p::Int = 0\n        local q::Int = 0\n\
    \        local r::Int = 0\n        local s::Int = 0\n        local t::Int = 0\n\
    \        local u::Int = 0\n        local v::Int = 0\n        local w::Int = 0\n\
    \        local x::Int = 0\n        local y::Int = 0\n        local z::Int = 0\n\
    \        local a::Int = 0\n        local b::Int = 0\n        local c::Int = 0\n\
    \        local d::Int = 0\n        local e::Int = 0\n        local f::Int = 0\n\
    \        local g::Int = 0\n        local h::Int = 0\n        local i::Int = 0\n\
    \        local j::Int = 0\n        local k::Int = 0\n        local l::Int = 0\n\
    \        local m::Int = 0\n        local n::Int = 0\n        local o::Int = 0\n\
    \        local p::Int = 0\n        local q::Int = 0\n        local r::Int = 0\n\
    \        local s::Int = 0\n        local t::Int = 0\n        local u::Int = 0\n\
    \        local v::Int = 0\n        local w::Int = 0\n        local x::Int = 0\n\
    \        local y::Int = 0\n        local z::Int = 0\n        local a::Int = 0\n\
    \        local b::Int = 0\n        local c::Int = 0\n        local d::Int = 0\n\
    \        local e::Int = 0\n        local f::Int = 0\n        local g::Int = 0\n\
    \        local h::Int = 0\n        local i::Int = 0\n        local j::Int = 0\n\
    \        local k::Int = 0\n        local l::Int = 0\n        local m::Int = 0\n\
    \        local n::Int = 0\n        local o::Int = 0\n        local p::Int = 0\n\
    \        local q::Int = 0\n        local r::Int = 0\n        local s::Int = 0\n\
    \        local t::Int = 0\n        local u::Int = 0\n        local v::Int = 0\n\
    \        local w::Int = 0\n\nusing Test\n\n@testset begin\n\ncandidate = same_chars;\n\
    \t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"\
    abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\")\
    \ == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"\
    abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp5n4mwiao.jl:18\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp5n4mwiao.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars(s0, s1) = length(s0)\
    \ == length(s1) && all(char(c) == char(s0[c]) for c in s0)\nend\n</cell>\n<code\
    \ language=julia-1.1>\n\"\"\"\n    Check if two words have the same characters.\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd',\
    \ 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n\
    \    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd',\
    \ 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n\
    \    False\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = same_chars;\n\
    \t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"\
    abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\")\
    \ == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"\
    abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpeebedz61.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpeebedz61.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    \n    if s0 == s1 then\
    \ return true\n    \n    len0 = length(s0)\n    len1 = length(s1)\n    \n    if\
    \ len0 > len1 then return false\n    \n    i = 0\n    j = 0\n    \n    while i\
    \ < len0 and j < len1 do\n        if s0[i] == s1[j] then return true\n       \
    \ i = i + 1\n        j = j + 1\n    end\n    \n    return false\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of times a substring\
    \ appears in a string.\nFor example, if the string is 'abcabcbb', the function\
    \ should return 3 since 'abc' appears 3 times.\nIf the string is 'aaaaaa', the\
    \ function should return 0 since 'aaaa' does not appear in the string.\nIf the\
    \ string is '', the function should return 0 since an empty string does not appear\
    \ in the string.\nIf the string is 'bbbbb', the function should return 1 since\
    \ 'b' appears 1 time.\nusing Test\n\n@testset begin\n\ncandidate = same_chars;\n\
    \t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"\
    abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\")\
    \ == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"\
    abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpb7g9q_tz.jl:18\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpb7g9q_tz.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars(s0, s1) = length(s0)\
    \ == length(s1) && all(char(s0[i]) == char(s1[i]) for i in 1:length(s0))\nend\n\
    </cell>\n<code language=julia-1.4>\n\"\"\"\n    Check if two words have the same\
    \ characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n\
    \    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"\
    dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\t@test(candidate(\"aabb\", \"\
    aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpv34oyhd9.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpv34oyhd9.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars = true\n  \
    \  for c in s0:\n        if c not in s1:\n            same_chars = false\n   \
    \         break\n    return same_chars\nend\nusing Test\n\n@testset begin\n\n\
    candidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"\
    dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\t@test(candidate(\"aabb\", \"\
    aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpsp0ciaae.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpsp0ciaae.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars = true\n  \
    \  for c in s0:\n        if c not in s1:\n            same_chars = false\n   \
    \         break\n    return same_chars\nend\nusing Test\n\n@testset begin\n\n\
    candidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"\
    dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\t@test(candidate(\"aabb\", \"\
    aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmprbcxqgr0.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmprbcxqgr0.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars(s0, s1) = length(s0)\
    \ == length(s1) && all(char(s0) == char(s1) for char in s0)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = same_chars;\n\
    \t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"\
    abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\")\
    \ == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"\
    abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpk50tkqbs.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpk50tkqbs.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    len0 = length(s0)\n  \
    \  len1 = length(s1)\n    if len0 != len1\n        false\n    else\n        forall\
    \ i::Int in\n            if s0[i] != s1[i]\n                false\n          \
    \  else\n                same_chars(s0, s1)\n    end\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that checks if a word is a palindrome.\nA palindrome is\
    \ a word that is the same forwards and backwards.\nFor example, \u201Cradar\u201D\
    \ is a palindrome, but \u201Cracecar\u201D is not a palindrome.\nWrite a function\
    \ that takes a string and checks if it is a palindrome.\nIf the string is a palindrome,\
    \ return true.\nIf the string is not a palindrome, return false.\nHint: You may\
    \ want to use recursion.\nusing Test\n\n@testset begin\n\ncandidate = same_chars;\n\
    \t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"\
    abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\")\
    \ == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"\
    abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"i\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpry2gfv13.jl:22\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpry2gfv13.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    \n    \"\"\"\n    Check\
    \ if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpag5onfgk.jl:16\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpag5onfgk.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpag5onfgk.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars = true\n  \
    \  for c in s0:\n        if c not in s1:\n            same_chars = false\n   \
    \         break\n    return same_chars\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpcczxqx3r.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpcczxqx3r.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars = true\n  \
    \  for c in s0:\n        if c not in s1:\n            same_chars = false\n   \
    \         break\n    return same_chars\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpd128tj24.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpd128tj24.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars(s0, s1) = length(s0)\
    \ == length(s1) && all(char(s0) == char(s1) for char in s0)\nend\n</cell>\n<code\
    \ language=julia-1.3>\nusing Test\n\n@testset begin\n\ncandidate = same_chars;\n\
    \t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"\
    abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\")\
    \ == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"\
    abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpo7rc9iet.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpo7rc9iet.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if s0 == s1 then return\
    \ true\n    if s0 == \"\" then return false\n    if s1 == \"\" then return false\n\
    \    if s0 == s1[1..] then return true\n    if s1 == s1[1..] then return true\n\
    \    if s0 == s1[1..] then return false\n    if s1 == s1[1..] then return false\n\
    \    return false\nend\n\"\"\"\n    Check if two words have the same characters.\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd',\
    \ 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n\
    \    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd',\
    \ 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n\
    \    False\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = same_chars;\n\
    \t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"\
    abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\")\
    \ == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"\
    abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpfhx1sw13.jl:17\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpfhx1sw13.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars = true\n  \
    \  for c in s0:\n        if c not in s1:\n            same_chars = false\n   \
    \         break\n    return same_chars\nend\n</cell>\n<code language=julia-1.4>\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8x_rvxer.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp8x_rvxer.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars(s0, s1) ||\
    \ same_chars(s1, s0)\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Check\
    \ if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"\
    dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\t@test(candidate(\"aabb\", \"\
    aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8rpyq3vo.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp8rpyq3vo.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars = true\n  \
    \  for c in s0:\n        if c not in s1:\n            same_chars = false\n   \
    \         break\n    return same_chars\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpcoeptgq4.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpcoeptgq4.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars(s0, s1) ||\
    \ same_chars(s1, s0)\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    Check\
    \ if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"\
    dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\t@test(candidate(\"aabb\", \"\
    aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp88rnkk71.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp88rnkk71.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if s0 == s1 \n    then\
    \ true \n    else false \n    end\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\"\
    ) == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"\
    eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\
    \t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"true\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp9vrjexyf.jl:18\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp9vrjexyf.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    len0 = length(s0)\n  \
    \  len1 = length(s1)\n    if len0 != len1\n        return false\n    elseif len0\
    \ == 0\n        return true\n    else\n        chars = chars(s0)\n        chars\
    \ = chars[2:]\n        chars = chars[2:]\n        chars = chars[2:]\n        chars\
    \ = chars[2:]\n        chars = chars[2:]\n        chars = chars[2:]\n        chars\
    \ = chars[2:]\n        chars = chars[2:]\n        chars = chars[2:]\n        chars\
    \ = chars[2:]\n        chars = chars[2:]\n        chars = chars[2:]\n        chars\
    \ = chars[2:]\n        chars = chars[2:]\n        chars = chars[2:]\n        chars\
    \ = chars[2:]\n        chars = chars[2:]\n        chars = chars[2:]\n        chars\
    \ = chars[2:]\n        chars = chars[2:]\n        chars = chars[2:]\n        chars\
    \ = chars[2:]\n        chars = chars[2:]\n        chars = chars[2:]\n        chars\
    \ = chars[2:]\n        chars = chars[2:]\n        chars = chars[2:]\n        chars\
    \ = chars[2:]\n        chars = chars[2:]\n        chars = chars[2:]\n        chars\
    \ = chars[2:]\n        chars = chars[2:]\n        chars = chars[2:]\n        chars\
    \ = chars[2:]\n        chars = chars[2:]\n        chars = chars[2:]\n        chars\
    \ = chars[2:]\n        chars = chars[2:]\n        chars = chars[2:]\n        chars\
    \ = chars[2:]\n        chars = chars[2:]\n        chars = chars[2:]\n        chars\
    \ = chars[2:]\n        chars = chars[2:]\n        chars = chars[2:]\n        chars\
    \ = chars[2:]\n        chars = chars[2:]\n        chars = chars[2:]\n        chars\
    \ = chars[2:]\n        chars = chars[2:]\n        chars = chars[2:]\n        chars\
    \ = chars[2:]\n        chars = chars[2:]\n        chars = chars[2:]\n        chars\
    \ = chars[2:]\n        chars = chars[2:]\n        chars = chars[2:]\n        chars\
    \ = chars[2:]\n        chars = chars[\nusing Test\n\n@testset begin\n\ncandidate\
    \ = same_chars;\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\
    \t@test(candidate(\"abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\"\
    , \"abcd\") == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\
    \t@test(candidate(\"abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\") == false)\n\t@test(candidate(\"aabb\", \"aaccc\") ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope at /tmp/tmpxt52w95t.jl:25\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpxt52w95t.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars = true\n  \
    \  for c in s0:\n        if c not in s1:\n            same_chars = false\n   \
    \         break\n    return same_chars\nend\n</cell>\n<code language=julia-1.4>\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpvo03bmss.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpvo03bmss.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars = true\n  \
    \  for c in s0:\n        if c not in s1:\n            same_chars = false\n   \
    \         break\n    return same_chars\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp7qz2pbxx.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp7qz2pbxx.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars = false\n \
    \   for c in s0:\n        if c in s1:\n            same_chars = true\n       \
    \     break\n    return same_chars\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = same_chars;\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\
    \t@test(candidate(\"abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\"\
    , \"abcd\") == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\
    \t@test(candidate(\"abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\") == false)\n\t@test(candidate(\"aabb\", \"aaccc\") ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3_eq2_o8.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp3_eq2_o8.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    \n    len0 = length(s0)\n\
    \    len1 = length(s1)\n    \n    if len0 != len1\n        return false\n    \n\
    \    i = 0\n    while i < len0\n        if s0[i] != s1[i]\n            return\
    \ false\n        i += 1\n    \n    return true\nend\n</cell>\n<code language=julia-1.4>\n\
    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp97ln_qqf.jl:32\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp97ln_qqf.jl:32\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    \n    if length(s0) ==\
    \ length(s1)\n        same_chars(s0, s1)\n    else\n        same_chars(s0, s1)\n\
    \    end\nend\n</cell>\n<text>\nExercise 9\nWrite a function that checks if two\
    \ words are anagrams of each other.\nHint: Use same_chars.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"\
    dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\t@test(candidate(\"aabb\", \"\
    aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpaj8nwszv.jl:24\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpaj8nwszv.jl:24\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars = true\n  \
    \  for c in s0:\n        if c not in s1:\n            same_chars = false\n   \
    \         break\n    return same_chars\nend\n</cell>\n<code language=julia-1.3>\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3tleo7nn.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp3tleo7nn.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars(s0, s1) = length(s0)\
    \ == length(s1) && all(char(s0[i]) == char(s1[i]) for i in 1:length(s0))\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    Check if two words have the same\
    \ characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n\
    \    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"\
    dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\t@test(candidate(\"aabb\", \"\
    aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpjj220t5s.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpjj220t5s.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars = true\n  \
    \  for c in s0:\n        if c not in s1:\n            same_chars = false\n   \
    \         break\n    return same_chars\nend\n</cell>\n<code language=julia-1.4>\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmppixv2sd7.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmppixv2sd7.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars(s0, s1) ||\
    \ same_chars(s1, s0)\nend\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ checks if a word is palindrome or not.\nThe word is a palindrome if it reads\
    \ the same backward as forward.\nFor example, \u201Cracecar\u201D is a palindrome,\
    \ but \u201Cracecar\u201D is not a palindrome of \u201Cracecar\u201D.\nWrite a\
    \ function that checks if a word is a palindrome or not.\nThe word is a palindrome\
    \ if it reads the same backward as forward.\nFor example, \u201Cracecar\u201D\
    \ is a palindrome, but \u201Cracecar\u201D is not a palindrome of \u201Cracecar\u201D\
    .\nWrite a function that checks if a word is a palindrome or not.\nThe word is\
    \ a palindrome if it reads the same backward as forward.\nFor example, \u201C\
    racecar\u201D is a palindrome, but \u201Cracecar\u201D is not a palindrome of\
    \ \u201Cracecar\u201D.\nWrite a function that checks if a word is a palindrome\
    \ or not.\nThe word is a palindrome if it reads the same backward as forward.\n\
    For example, \u201Cracecar\u201D is a palindrome, but \u201Cracecar\u201D is not\
    \ a palindrome of \u201Cracecar\u201D.\nWrite a function that checks if a word\
    \ is a palindrome or not.\nThe word is a palindrome if it reads the same backward\
    \ as forward.\nFor example, \u201Cracecar\u201D is a palindrome, but \u201Cracecar\u201D\
    \ is not a palindrome of \u201Cracecar\u201D.\nWrite a function that checks if\
    \ a word is a palindrome or not.\nThe word is a palindrome if it reads the same\
    \ backward as forward.\nFor example, \u201Cracecar\u201D is a palindrome, but\
    \ \u201Cracecar\u201D is not a palindrome of \u201Cracecar\u201D.\nWrite a function\
    \ that checks if a word is a palindrome or not.\nThe word is a palindrome if it\
    \ reads the same backward as forward.\nFor example, \u201Cracecar\u201D is a palindrome,\
    \ but \u201Cracecar\u201D is not a palindrome of \u201Cracecar\u201D.\nWrite a\
    \ function that checks if a word is a palindrome or not.\nThe word is a palindrome\
    \ if it reads the same backward as forward.\nFor example, \u201Cracecar\u201D\
    \ is a palindrome, but \u201Cracecar\u201D is not a palindrome of \u201Cracecar\u201D\
    .\nWrite a function that checks if a word is a palindrome or not.\nThe word is\
    \ a palindrome if it reads the same backward as forward.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"\
    dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\t@test(candidate(\"aabb\", \"\
    aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2ngoa2w3.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp2ngoa2w3.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    \n    same_chars = true\n\
    \    \n    for c in s0:\n        if c not in s1:\n            same_chars = false\n\
    \            break\n    \n    return same_chars\n</code>\n<|/ a dscore=0 |>\n\
    <| a dscore=0 |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = same_chars;\n\
    \t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"\
    abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\")\
    \ == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"\
    abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp64av4sjx.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp64av4sjx.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars(s0, s1)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpqls4c9u8.jl:24\n  Test threw exception\n\
    \  Expression: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] same_chars(::String, ::String) at /tmp/tmpqls4c9u8.jl:17\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmpqls4c9u8.jl:25\n\
    \  Test threw exception\n  Expression: candidate(\"abcd\", \"dddddddabc\") ==\
    \ true\n  StackOverflowError:\n  Stacktrace:\n   [1] same_chars(::String, ::String)\
    \ at /tmp/tmpqls4c9u8.jl:17 (repeats 79984 times)\n  \ntest set: Error During\
    \ Test at /tmp/tmpqls4c9u8.jl:26\n  Test threw exception\n  Expression: candidate(\"\
    dddddddabc\", \"abcd\") == true\n  StackOverflowError:\n  Stacktrace:\n   [1]\
    \ same_chars(::String, ::String) at /tmp/tmpqls4c9u8.jl:17 (repeats 79984 times)\n\
    \  \ntest set: Error During Test at /tmp/tmpqls4c9u8.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"eabcd\", \"dddddddabc\") == false\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] same_chars(::String, ::String) at /tmp/tmpqls4c9u8.jl:17\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmpqls4c9u8.jl:28\n\
    \  Test threw exception\n  Expression: candidate(\"abcd\", \"dddddddabcf\") ==\
    \ false\n  StackOverflowError:\n  Stacktrace:\n   [1] same_chars(::String, ::String)\
    \ at /tmp/tmpqls4c9u8.jl:17 (repeats 79984 times)\n  \ntest set: Error During\
    \ Test at /tmp/tmpqls4c9u8.jl:29\n  Test threw exception\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\") == false\n  StackOverflowError:\n  Stacktrace:\n\
    \   [1] same_chars(::String, ::String) at /tmp/tmpqls4c9u8.jl:17 (repeats 79984\
    \ times)\n  \ntest set: Error During Test at /tmp/tmpqls4c9u8.jl:30\n  Test threw\
    \ exception\n  Expression: candidate(\"aabb\", \"aaccc\") == false\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] same_chars(::String, ::String) at /tmp/tmpqls4c9u8.jl:17\
    \ (repeats 79984 times)\n  \nTest Summary: | Error  Total\ntest set      |   \
    \  7      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqls4c9u8.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars(s0, s1) = length(s0)\
    \ == length(s1) && all(char(s0[i]) == char(s1[i]) | same_chars(s0[i..], s1[i..])\
    \ | same_chars(s0[i..], s1[i..]) | same_chars(s0[i..], s1[i..]) | same_chars(s0[i..],\
    \ s1[i..]) | same_chars(s0[i..], s1[i..]) | same_chars(s0[i..], s1[i..]) | same_chars(s0[i..],\
    \ s1[i..]) | same_chars(s0[i..], s1[i..]) | same_chars(s0[i..], s1[i..]) | same_chars(s0[i..],\
    \ s1[i..]) | same_chars(s0[i..], s1[i..]) | same_chars(s0[i..], s1[i..]) | same_chars(s0[i..],\
    \ s1[i..]) | same_chars(s0[i..], s1[i..]) | same_chars(s0[i..], s1[i..]) | same_chars(s0[i..],\
    \ s1[i..]) | same_chars(s0[i..], s1[i..]) | same_chars(s0[i..], s1[i..]) | same_chars(s0[i..],\
    \ s1[i..]) | same_chars(s0[i..], s1[i..]) | same_chars(s0[i..], s1[i..]) | same_chars(s0[i..],\
    \ s1[i..]) | same_chars(s0[i..], s1[i..]) | same_chars(s0[i..], s1[i..]) | same_chars(s0[i..],\
    \ s1[i..]) | same_chars(s0[i..], s1[i..]) | same_chars(s0[i..], s1[i..]) | same_chars(s0[i..],\
    \ s1[i..]) | same_chars(s0[i..], s1[i..]) | same_chars(s0[i..], s1[i..]) | same_chars(s0[i..],\
    \ s1[i..]) | same_chars(s0[i..], s1[i..]) | same_chars(s0[i..], s1[i..]) | same_chars(s0[i..],\
    \ s1[i..]) | same_chars(s0[i..], s1[i..]) | same_chars(s0[i..], s1[i..]) | same_chars(s0[i..],\
    \ s1[i..]) | same_chars(s0[i..], s1[i..]) | same_chars(s0[i..], s1[i..]) | same_chars(s0[i..],\
    \ s1[i..]) | same_chars(s0\nusing Test\n\n@testset begin\n\ncandidate = same_chars;\n\
    \t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"\
    abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\")\
    \ == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"\
    abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"]\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp8n_w_scp.jl:17\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmp8n_w_scp.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars(s0, s1) ||\
    \ (same_chars(s1[end-1:], s0) && same_chars(s0, s1[end-1:]))\nend\n</cell>\n<code\
    \ language=julia-1.1>\n\"\"\"\n    Check if two words have the same characters.\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd',\
    \ 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n\
    \    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd',\
    \ 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n\
    \    False\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = same_chars;\n\
    \t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"\
    abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\")\
    \ == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"\
    abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"(end - 1):\" range\
    \ expression \nStacktrace:\n [1] top-level scope at /tmp/tmpzy9tgnqv.jl:17\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpzy9tgnqv.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    len = length(s0)\n   \
    \ if len == length(s1)\n        for (i, c) in enumerate(s0)\n            if c\
    \ != s1[i]\n                return false\n        return true\n    else\n    \
    \    return false\n    end\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n\
    \    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp52yhwmzl.jl:27\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp52yhwmzl.jl:27\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    len0 = length(s0)\n  \
    \  len1 = length(s1)\n    if len0 != len1\n        return false\n    else\n  \
    \      for (i,c) in zip(s0,s1)\n            if c != i\n                return\
    \ false\n    return true\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\",\
    \ \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\"\
    ) == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"\
    eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\
    \t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpth1_yvo1.jl:27\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpth1_yvo1.jl:27\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars(s0, s1) = s1==s0\
    \ || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0\
    \ || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0\
    \ || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0\
    \ || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0\
    \ || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0\
    \ || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0\
    \ || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0\
    \ || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0\
    \ || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0\
    \ || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0\
    \ || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0\
    \ || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0\
    \ || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0\
    \ || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0\
    \ || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0\
    \ || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s\nusing Test\n\n@testset begin\n\
    \ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"\
    dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\t@test(candidate(\"aabb\", \"\
    aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmphrjf4orq.jl:16\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmphrjf4orq.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmphrjf4orq.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if s0 == s1 then return\
    \ true\n    if s0 == \"\" then return false\n    if s1 == \"\" then return false\n\
    \    \n    i = 0\n    j = 0\n    while i < length(s0) and j < length(s1) do\n\
    \        if s0[i] == s1[j] then return true\n        i += 1\n        j += 1\n\
    \    end\n    return false\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n\
    \    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp4ezpsmxa.jl:17\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp4ezpsmxa.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    len = length(s0)\n   \
    \ if len == length(s1)\n        for (i, c) in zip(s0, s1)\n            if i !=\
    \ c\n                return false\n        return true\n    else\n        return\
    \ false\nend\n</cell>\n<code language=julia-1.3>\nusing Test\n\n@testset begin\n\
    \ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"\
    dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\t@test(candidate(\"aabb\", \"\
    aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpr9dwquv5.jl:26\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpr9dwquv5.jl:26\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars = true\n  \
    \  for c in s0:\n        if c not in s1:\n            same_chars = false\n   \
    \         break\n    return same_chars\nend\n</cell>\n<code language=julia-1.1>\n\
    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpa_kfuxhr.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpa_kfuxhr.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars = true\n  \
    \  for c in s0:\n        if c not in s1:\n            same_chars = false\n   \
    \         break\n    return same_chars\nend\n</cell>\n<code language=julia-1.3>\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpfja7knub.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpfja7knub.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars = true\n  \
    \  for c in s0:\n        if c not in s1:\n            same_chars = false\n   \
    \         break\n    return same_chars\nend\nusing Test\n\n@testset begin\n\n\
    candidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"\
    dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\t@test(candidate(\"aabb\", \"\
    aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpd9ertbu3.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpd9ertbu3.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    \n    \"\"\"\n    Check\
    \ if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    \n    if s0 == s1:\n      \
    \  return True\n    \n    len0 = length(s0)\n    len1 = length(s1)\n    \n   \
    \ if len0 > len1:\n        s0, s1 = s1, s0\n    \n    i = 0\n    j = 0\n    \n\
    \    while i < len0 and j < len1:\n        if s0[i] != s1[j]:\n            return\
    \ False\n        i += 1\n        j += 1\n    \n    if i == len0:\n        return\
    \ True\n    \n    if j == len1:\n        return True\n    \n    return False\n\
    </cell>\n<cell>\n\"\"\"\nCheck if two words have the same characters.\n>>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\nTrue\n>>> same_chars('abcd', 'dddddddabc')\nTrue\n>>>\
    \ same_chars('dddddddabc', 'abcd')\nTrue\n>>> same_chars('eabcd', 'dddddddabc')\n\
    False\n>>> same_chars('abcd', 'dddddddabce')\nFalse\n>>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\nFalse\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = same_chars;\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\
    \t@test(candidate(\"abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\"\
    , \"abcd\") == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\
    \t@test(candidate(\"abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\") == false)\n\t@test(candidate(\"aabb\", \"aaccc\") ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpist8gf4v.jl:35\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpist8gf4v.jl:35\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    \n    same_chars = true\n\
    \    \n    for c in s0:\n        if c not in s1:\n            same_chars = false\n\
    \            break\n    \n    return same_chars\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp45vnyici.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp45vnyici.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    len0 = length(s0)\n  \
    \  len1 = length(s1)\n    if len0 != len1\n        return false\n    else\n  \
    \      chars = chars(s0)\n        for c in chars\n            if c != chars(s1)\n\
    \                return false\n        end\n        return true\n    end\nend\n\
    </cell>\n<text>\nExercise 3: Write a function that checks if two words are anagrams\
    \ of each other. An anagram is a word that has the same letters in alphabetical\
    \ order.\nusing Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp0ybay19p.jl:30\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp0ybay19p.jl:30\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    \n    if s0 == s1 \n \
    \       then return true\n    else if s0 == \"\"\n        then return true\n \
    \   else if s1 == \"\"\n        then return true\n    else if s0 == \"\"\n   \
    \     then return false\n    else if s1 == \"\"\n        then return false\n \
    \   else if s0 == s1\n        then return true\n    else if s0 == \"\"\n     \
    \   then return false\n    else if s1 == \"\"\n        then return false\n   \
    \ else if s0 == s1\n        then return true\n    else if s0 == \"\"\n       \
    \ then return false\n    else if s1 == \"\"\n        then return false\n    else\
    \ if s0 == s1\n        then return true\n    else if s0 == \"\"\n        then\
    \ return false\n    else if s1 == \"\"\n        then return false\n    else if\
    \ s0 == s1\n        then return true\n    else if s0 == \"\"\n        then return\
    \ false\n    else if s1 == \"\"\n        then return false\n    else if s0 ==\
    \ s1\n        then return true\n    else if s0 == \"\"\n        then return false\n\
    \    else if s1 == \"\"\n        then return false\n    else if s0 == s1\n   \
    \     then return true\n    else if s0 == \"\"\n        then return false\n  \
    \  else if s1 == \"\"\n        then return false\n    else if s0 == s1\n     \
    \   then return true\n    else if s0 == \"\"\n        then return false\n    else\
    \ if s1 == \"\"\n        then return false\n    else if s0 == s1\n        then\
    \ return true\n    else if s0 == \"\"\n        then return false\n    else if\
    \ s1 == \"\"\n        then return false\n    else if s0 == s1\n        then return\
    \ true\n    else if s0 == \"\"\n        then return false\n    else if s1 == \"\
    \"\n        then return false\n    else if s0 == s1\n        then return true\n\
    \    else if s0 == \"\"\n        then return false\n    else if s1 == \"\"\n \
    \       then return false\n    else if s0 == s1\n        then return true\n  \
    \  else if s0 == \"\"\n        then return false\n    else if s1 == \"\"\n   \
    \     then return false\n    else if s0 == s1\n        then return true\n    else\
    \ if s0 == \"\"\n        then return false\n    else if s1 == \"\"\n        then\
    \ return false\n    else if s0 == s1\n        then return true\n    else if s0\
    \ == \"\"\n\nusing Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp1qzqmwmk.jl:19\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp1qzqmwmk.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    \n    same_chars = true\n\
    \    \n    len0 = length(s0)\n    len1 = length(s1)\n    \n    if len0 != len1\n\
    \        same_chars = false\n    end\n    \n    for i::Int in 0:len0-1\n     \
    \   if s0[i] != s1[i]\n            same_chars = false\n            break\n   \
    \     end\n    end\n    \n    return same_chars\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that checks if a word is palindrome.\nThe word is a string\
    \ with only lowercase letters.\nThe function should return true if the word is\
    \ a palindrome and false otherwise.\nThe function should ignore the case of the\
    \ letters.\nThe function should ignore the case of the letters.\nThe function\
    \ should ignore the case of the letters.\nThe function should ignore the case\
    \ of the letters.\nThe function should ignore the case of the letters.\nThe function\
    \ should ignore the case of the letters.\nThe function should ignore the case\
    \ of the letters.\nThe function should ignore the case of the letters.\nThe function\
    \ should ignore the case of the letters.\nThe function should ignore the case\
    \ of the letters.\nThe function should ignore the case of the letters.\nThe function\
    \ should ignore the case of the letters.\nThe function should ignore the case\
    \ of the letters.\nThe function should ignore the case of the letters.\nThe function\
    \ should ignore the case of the letters.\nThe function should ignore the case\
    \ of the letters.\nThe function should ignore the case of the letters.\nThe function\
    \ should ignore the case of the letters.\nThe function should ignore the case\
    \ of the letters.\nThe function should ignore the case of the letters.\nThe function\
    \ should ignore the case of the letters.\nThe function should ignore the case\
    \ of the letters.\nThe function should ignore the case of the letters.\nThe function\
    \ should ignore the case of the letters.\nThe function should ignore the case\
    \ of the letters.\nThe function should ignore the case of the letters.\nThe function\
    \ should ignore the case of the letters.\nThe function should ignore the case\
    \ of the letters.\nThe function should ignore the case of the letters.\nThe function\
    \ should ignore the case of the letters.\nThe function should ignore the case\
    \ of the letters.\nThe function should ignore the case of the letters.\nThe function\
    \ should ignore the case of the letters.\nThe function should ignore the case\
    \ of the letters.\nThe function should ignore the case of the letters.\nThe function\
    \ should ignore the case of the letters.\nThe function should ignore the case\
    \ of the letters.\nThe function should ignore the case of the letters.\nThe \n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp0yez_pbf.jl:36\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp0yez_pbf.jl:36\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    \n    \"\"\"\n    Check\
    \ if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpd6mizz17.jl:16\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpd6mizz17.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpd6mizz17.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if s0 == s1 then return\
    \ true\n    else if s0 == \"\" then return true\n    else if s1 == \"\" then return\
    \ true\n    else if s0 == s1 then return true\n    else if s0 == \"\" then return\
    \ true\n    else if s1 == \"\" then return true\n    else if s0 == s1 then return\
    \ true\n    else if s0 == \"\" then return true\n    else if s1 == \"\" then return\
    \ true\n    else if s0 == s1 then return true\n    else if s0 == \"\" then return\
    \ true\n    else if s1 == \"\" then return true\n    else if s0 == s1 then return\
    \ true\n    else if s0 == \"\" then return true\n    else if s1 == \"\" then return\
    \ true\n    else if s0 == s1 then return true\n    else if s0 == \"\" then return\
    \ true\n    else if s1 == \"\" then return true\n    else if s0 == s1 then return\
    \ true\n    else if s0 == \"\" then return true\n    else if s1 == \"\" then return\
    \ true\n    else if s0 == s1 then return true\n    else if s0 == \"\" then return\
    \ true\n    else if s1 == \"\" then return true\n    else if s0 == s1 then return\
    \ true\n    else if s0 == \"\" then return true\n    else if s1 == \"\" then return\
    \ true\n    else if s0 == s1 then return true\n    else if s0 == \"\" then return\
    \ true\n    else if s1 == \"\" then return true\n    else if s0 == s1 then return\
    \ true\n    else if s0 == \"\" then return true\n    else if s1 == \"\" then return\
    \ true\n    else if s0 == s1 then return true\n    else if s0 == \"\" then return\
    \ true\n    else if s1 == \"\" then return true\n    else if s0 == s1 then return\
    \ true\n    else if s0 == \"\" then return true\n    else if s1 == \"\" then return\
    \ true\n    else if s0 == s1 then return true\n    else if s0 == \"\" then return\
    \ true\n    else if s1 == \"\" then return true\n    else if s0 == s1 then return\
    \ true\n    else if s0 == \"\" then return true\n    else if s1 == \"\" then return\
    \ true\n    else if s0 == s1 then return true\n    else if s0 == \"\" then return\
    \ true\n    else if s1 == \"\" then return true\n    else if s0 == s1 then return\
    \ true\n    else if s0 == \"\" then \nusing Test\n\n@testset begin\n\ncandidate\
    \ = same_chars;\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\
    \t@test(candidate(\"abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\"\
    , \"abcd\") == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\
    \t@test(candidate(\"abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\") == false)\n\t@test(candidate(\"aabb\", \"aaccc\") ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpxuffisas.jl:17\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpxuffisas.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars = true\n  \
    \  for c in s0:\n        if c not in s1:\n            same_chars = false\n   \
    \         break\n    return same_chars\nend\n</cell>\n<code language=julia-1.3>\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp10k2ofl9.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp10k2ofl9.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars(s0, s1) = length(s0)\
    \ == length(s1) && all(char(c) == char(s0[c]) for c in s0)\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\n    Check if two words have the same characters.\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd',\
    \ 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n\
    \    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd',\
    \ 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n\
    \    False\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = same_chars;\n\
    \t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"\
    abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\")\
    \ == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"\
    abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp6v4nt8zc.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp6v4nt8zc.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    \n    len1 = length(s1)\n\
    \    len2 = length(s2)\n    \n    if len1 == 0 or len2 == 0\n        return false\n\
    \    \n    \n    if len1 == len2\n        \n        if len1 == 0\n           \
    \ return true\n        \n        if s0 == s1\n            return true\n      \
    \  \n        return false\n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\
    \ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"\
    dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\t@test(candidate(\"aabb\", \"\
    aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"len2\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpz74kl_ac.jl:21\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpz74kl_ac.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars(s0, s1) = length(s0)\
    \ == length(s1) && all(char(s0) == char(s1) for char in s0)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = same_chars;\n\
    \t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"\
    abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\")\
    \ == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"\
    abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp33hb4_w4.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp33hb4_w4.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    len = length(s0)\n   \
    \ len1 = length(s1)\n    if len != len1\n        return false\n    else\n    \
    \    for i in 0..len\n            if s0[i] != s1[i]\n                return false\n\
    \    return true\nend\n</cell>\n<code language=julia-1.0>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"\
    dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\t@test(candidate(\"aabb\", \"\
    aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpn406_lyg.jl:27\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpn406_lyg.jl:27\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars = true\n  \
    \  for c in s0:\n        if c not in s1:\n            same_chars = false\n   \
    \         break\n    return same_chars\nend\n</cell>\n<code language=julia-1.4>\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmph8pbx6qg.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmph8pbx6qg.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    \n    len0 = length(s0)\n\
    \    len1 = length(s1)\n    \n    if len0 == len1\n        true\n    else\n  \
    \      false\n    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n\
    @testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\", \"\
    dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\") ==\
    \ true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"\
    eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\
    \t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpc6cgphzf.jl:27\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpc6cgphzf.jl:27\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars = true\n  \
    \  for c in s0:\n        if c not in s1:\n            same_chars = false\n   \
    \         break\n    return same_chars\nend\n</cell>\n<code language=julia-1.1>\n\
    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpg3ahzf53.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpg3ahzf53.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars(s0, s1) = length(s0)\
    \ == length(s1) && all(char(s0[i]) == char(s1[i]) for i in 1:length(s0))\nend\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ True if the string is a palindrome. Recall that palindromes are words that read\
    \ the same backward as forward.\nusing Test\n\n@testset begin\n\ncandidate = same_chars;\n\
    \t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"\
    abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\")\
    \ == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"\
    abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpioqp4zp5.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpioqp4zp5.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    len0 = length(s0)\n  \
    \  len1 = length(s1)\n    if len0 == len1\n        true\n    else\n        false\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"\
    dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\t@test(candidate(\"aabb\", \"\
    aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpqk6g7kur.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpqk6g7kur.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    \n    same_chars = true\n\
    \    \n    for c in s0:\n        if c not in s1:\n            same_chars = false\n\
    \            break\n    \n    return same_chars\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"\
    dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\t@test(candidate(\"aabb\", \"\
    aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2nv7gdam.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp2nv7gdam.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars = true\n  \
    \  for c in s0:\n        if c not in s1:\n            same_chars = false\n   \
    \         break\n    return same_chars\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpu7oxn9j6.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpu7oxn9j6.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    \n    same_chars = true\n\
    \    \n    if length(s0) == length(s1)\n        \n        for (i0, i1) in zip(xrange(length(s0)),\
    \ xrange(length(s1)))\n            if s0[i0] != s1[i1]\n                same_chars\
    \ = false\n                break\n    end\n    \n    return same_chars\nend\n\
    </cell>\n<code language=julia-0.4>\n\"\"\"\n    Check if two words have the same\
    \ characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n\
    \    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"\
    dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\t@test(candidate(\"aabb\", \"\
    aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpfrvvuxyn.jl:30\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpfrvvuxyn.jl:30\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    \n    if s0 == s1 then\
    \ return true\n    \n    len0 = length(s0)\n    len1 = length(s1)\n    \n    if\
    \ len0 > len1 then return false\n    \n    i = 0\n    j = 0\n    \n    while i\
    \ < len0 and j < len1 do\n        if s0[i] != s1[j] then return false\n      \
    \  i += 1\n        j += 1\n    end\n    \n    return true\nend\n</cell>\n<text>\n\
    Exercise 10\nWrite a function that checks if a word is palindrome or not.\nThe\
    \ word is a palindrome if it reads the same backward as forward.\nThe word is\
    \ not palindrome if it reads the same forward as backward.\nThe word is not palindrome\
    \ if it reads the same forward and backward.\nThe word is not palindrome if it\
    \ reads the same backward and forward.\nThe word is not palindrome if it reads\
    \ the same backward and backward.\nThe word is not palindrome if it reads the\
    \ same forward and forward.\nThe word is not palindrome if it reads the same forward\
    \ and backward.\nThe word is not palindrome if it reads the same backward and\
    \ forward.\nThe word is not palindrome if it reads the same backward and backward.\n\
    The word is not palindrome if it reads the same forward and forward.\nThe word\
    \ is not palindrome if it reads the same forward and backward.\nThe word is not\
    \ palindrome if it reads the same backward and forward.\nThe word is not palindrome\
    \ if it reads the same backward and backward.\nThe word is not palindrome if it\
    \ reads the same forward and forward.\nThe word is not palindrome if it reads\
    \ the same forward and backward.\nThe word is not palindrome if it reads the same\
    \ backward and forward.\nThe word is not palindrome if it reads the same backward\
    \ and backward.\nThe word is not palindrome if it reads the same forward and forward.\n\
    The word is not palindrome if it reads the same forward and backward.\nThe word\
    \ is not palindrome if it reads the same backward and forward.\nThe word is not\
    \ palindrome if it reads the same backward and backward.\nThe word is not palindrome\
    \ if it reads the same forward and forward.\nThe word is not palindrome if it\
    \ reads the same forward and backward.\nThe word is not palindrome if it reads\
    \ the same backward and forward.\nThe word is not palindrome if it reads the same\
    \ backward and backward.\nThe word is not palindrome if it reads the same forward\
    \ and forward.\nThe word is not palindrome if it reads the same forward and backwar\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpsrn0l5dm.jl:18\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpsrn0l5dm.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars = true\n  \
    \  for c in s0:\n        if c not in s1:\n            same_chars = false\n   \
    \         break\n    return same_chars\nend\n</cell>\n<code language=julia-1.0>\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp12xp6vpo.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp12xp6vpo.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars = false\n \
    \   for c in s0:\n        if c in s1:\n            same_chars = true\n       \
    \     break\n    return same_chars\nend\n</cell>\n<code language=julia-1.1>\n\"\
    \"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpgodd23g8.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpgodd23g8.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars(s0, s1) = length(s0)\
    \ == length(s1) && all(char(c) == char(c0) for (c, c0) in zip(s0, s1))\nend\n\
    </cell>\n<code language=julia-1.3>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = same_chars;\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\
    \t@test(candidate(\"abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\"\
    , \"abcd\") == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\
    \t@test(candidate(\"abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\") == false)\n\t@test(candidate(\"aabb\", \"aaccc\") ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpj8eclad6.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpj8eclad6.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    \n    \"\"\"\n    Check\
    \ if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    if s0 == s1:\n        return\
    \ True\n    \n    len0 = length(s0)\n    len1 = length(s1)\n    \n    if len0\
    \ != len1:\n        return False\n    \n    i = 0\n    while i < len0:\n     \
    \   if s0[i] != s1[i]:\n            return False\n        i += 1\n    \n    return\
    \ True\nend\n</cell>\n<code language=julia-1.4>\nusing Test\n\n@testset begin\n\
    \ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"\
    dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\t@test(candidate(\"aabb\", \"\
    aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpte0bllay.jl:34\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpte0bllay.jl:34\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    len = length(s0)\n   \
    \ len1 = length(s1)\n    if len == len1\n        for (c0, c1) in zip(s0, s1)\n\
    \            if c0 != c1\n                then return false\n    else return false\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Check if two words have the\
    \ same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  \
    \  True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"\
    dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\t@test(candidate(\"aabb\", \"\
    aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpnoos2um0.jl:22\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpnoos2um0.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if s0 == s1 \n    then\
    \ return true\n    else if s0 == \"\"\n    then return true\n    else if s1 ==\
    \ \"\"\n    then return true\n    else if s0 == \"\"\n    then return false\n\
    \    else if s1 == \"\"\n    then return false\n    else if s0 == s1\n    then\
    \ return true\n    else if s0 == \"\"\n    then return false\n    else if s1 ==\
    \ \"\"\n    then return false\n    else if s0 == s1\n    then return true\n  \
    \  else if s0 == \"\"\n    then return false\n    else if s1 == \"\"\n    then\
    \ return false\n    else if s0 == s1\n    then return true\n    else if s0 ==\
    \ \"\"\n    then return false\n    else if s1 == \"\"\n    then return false\n\
    \    else if s0 == s1\n    then return true\n    else if s0 == \"\"\n    then\
    \ return false\n    else if s1 == \"\"\n    then return false\n    else if s0\
    \ == s1\n    then return true\n    else if s0 == \"\"\n    then return false\n\
    \    else if s1 == \"\"\n    then return false\n    else if s0 == s1\n    then\
    \ return true\n    else if s0 == \"\"\n    then return false\n    else if s1 ==\
    \ \"\"\n    then return false\n    else if s0 == s1\n    then return true\n  \
    \  else if s0 == \"\"\n    then return false\n    else if s1 == \"\"\n    then\
    \ return false\n    else if s0 == s1\n    then return true\n    else if s0 ==\
    \ \"\"\n    then return false\n    else if s1 == \"\"\n    then return false\n\
    \    else if s0 == s1\n    then return true\n    else if s0 == \"\"\n    then\
    \ return false\n    else if s1 == \"\"\n    then return false\n    else if s0\
    \ == s1\n    then return true\n    else if s0 == \"\"\n    then return false\n\
    \    else if s1 == \"\"\n    then return false\n    else if s0 == s1\n    then\
    \ return true\n    else if s0 == \"\"\n    then return false\n    else if s1 ==\
    \ \"\"\n    then return false\n    else if s0 == s1\n    then return true\n  \
    \  else if s0 == \"\"\n    then return false\n    else if s1 == \"\"\n    then\
    \ return false\n    else if s0 == s1\n    then return true\n    else if s0 ==\
    \ \"\"\n    then \nusing Test\n\n@testset begin\n\ncandidate = same_chars;\n\t\
    @test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"\
    abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\")\
    \ == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"\
    abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmptdwmeupz.jl:18\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmptdwmeupz.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars(s0, s1) ||\
    \ same_chars(s1, s0)\nend\n</cell>\n<code language=julia-1.4>\nusing Test\n\n\
    @testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\", \"\
    dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\") ==\
    \ true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"\
    eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\
    \t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpium6md1g.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpium6md1g.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars = true\n  \
    \  for c in s0:\n        if c not in s1:\n            same_chars = false\n   \
    \         break\n    return same_chars\nend\nusing Test\n\n@testset begin\n\n\
    candidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"\
    dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\t@test(candidate(\"aabb\", \"\
    aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpqua5wytc.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpqua5wytc.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars = true\n  \
    \  for c in s0:\n        if c not in s1:\n            same_chars = false\n   \
    \         break\n    return same_chars\nend \n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp0j4g_tjl.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp0j4g_tjl.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars = true\n  \
    \  for c in s0:\n        if c not in s1:\n            same_chars = false\n   \
    \         break\n    return same_chars\nend\n</cell>\n<code language=julia-1.1>\n\
    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_kwmounp.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_kwmounp.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if s0 == s1 then return\
    \ true\n    if s0 == \"\" then return false\n    if s1 == \"\" then return false\n\
    \    if s0 == s1 then return true\n    if s0 == \"\" then return false\n    if\
    \ s1 == \"\" then return false\n    if s0 == s1 then return true\n    if s0 ==\
    \ \"\" then return false\n    if s1 == \"\" then return false\n    if s0 == s1\
    \ then return true\n    if s0 == \"\" then return false\n    if s1 == \"\" then\
    \ return false\n    if s0 == s1 then return true\n    if s0 == \"\" then return\
    \ false\n    if s1 == \"\" then return false\n    if s0 == s1 then return true\n\
    \    if s0 == \"\" then return false\n    if s1 == \"\" then return false\n  \
    \  if s0 == s1 then return true\n    if s0 == \"\" then return false\n    if s1\
    \ == \"\" then return false\n    if s0 == s1 then return true\n    if s0 == \"\
    \" then return false\n    if s1 == \"\" then return false\n    if s0 == s1 then\
    \ return true\n    if s0 == \"\" then return false\n    if s1 == \"\" then return\
    \ false\n    if s0 == s1 then return true\n    if s0 == \"\" then return false\n\
    \    if s1 == \"\" then return false\n    if s0 == s1 then return true\n    if\
    \ s0 == \"\" then return false\n    if s1 == \"\" then return false\n    if s0\
    \ == s1 then return true\n    if s0 == \"\" then return false\n    if s1 == \"\
    \" then return false\n    if s0 == s1 then return true\n    if s0 == \"\" then\
    \ return false\n    if s1 == \"\" then return false\n    if s0 == s1 then return\
    \ true\n    if s0 == \"\" then return false\n    if s1 == \"\" then return false\n\
    \    if s0 == s1 then return true\n    if s0 == \"\" then return false\n    if\
    \ s1 == \"\" then return false\n    if s0 == s1 then return true\n    if s0 ==\
    \ \"\" then return false\n    if s1 == \"\" then return false\n    if s0 == s1\
    \ then return true\n    if s0 == \"\" then return false\n    if s1 == \"\" then\
    \ return false\n    if s0 == s1 then return true\n    if s0 == \"\" then return\
    \ false\n    if s1 == \"\" then return false\n    if s0 == s1 then return true\n\
    \    if s0 == \"\" then return false\n    if s1 == \"\" then return false\n  \
    \  if s0 == s1 then return true\n    if s0 == \"\" then return false\n    if s1\
    \ == \"\" then return false\n    if s0 == s1 then return true\n    if s0 == \n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpq21q37t5.jl:17\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpq21q37t5.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    len0 = length(s0)\n  \
    \  len1 = length(s1)\n    if len0 != len1\n        return false\n    else\n  \
    \      for i in 0..len0\n            if s0[i] != s1[i]\n                return\
    \ false\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n  \
    \  Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpcuezcp_v.jl:27\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpcuezcp_v.jl:27\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars = true\n  \
    \  for c in s0:\n        if c not in s1:\n            same_chars = false\n   \
    \         break\n    return same_chars\nend\nusing Test\n\n@testset begin\n\n\
    candidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"\
    dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\t@test(candidate(\"aabb\", \"\
    aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4lrjodu1.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp4lrjodu1.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars = true\n  \
    \  for c in s0:\n        if c not in s1:\n            same_chars = false\n   \
    \         break\n    return same_chars\nend\n</cell>\n<code language=julia-1.1>\n\
    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2itx0hwk.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp2itx0hwk.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    \n    \"\"\"\n    Check\
    \ if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpmolzlv2a.jl:16\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpmolzlv2a.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpmolzlv2a.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if s0 == s1 \n    then\
    \ true \n    else false \n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\
    \"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"true\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpmtqv59dp.jl:18\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpmtqv59dp.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    len0 = length(s0)\n  \
    \  len1 = length(s1)\n    if len0 != len1\n        return false\n    else\n  \
    \      len0 = length(s0)\n        for i::Int in 0..len0\n            if s0[i]\
    \ != s1[i]\n                return false\n            else\n                continue\n\
    \        end\n        return true\n    end\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a string and returns the number of characters in the\
    \ string. \nWrite a function that takes a string and returns a string with the\
    \ first letter capitalized.\nWrite a function that takes a string and returns\
    \ a string with the first letter capitalized and all others lowercased.\nWrite\
    \ a function that takes a string and returns a string with the first letter capitalized\
    \ and all others lowercased and all others capitalized.\nWrite a function that\
    \ takes a string and returns a string with the first letter capitalized and all\
    \ others lowercased and all others capitalized and all others lowercased.\nWrite\
    \ a function that takes a string and returns a string with the first letter capitalized\
    \ and all others lowercased and all others capitalized and all others lowercased\
    \ and all others capitalized.\nWrite a function that takes a string and returns\
    \ a string with the first letter capitalized and all others lowercased and all\
    \ others capitalized and all others lowercased and all others capitalized and\
    \ all others lowercased.\nWrite a function that takes a string and returns a string\
    \ with the first letter capitalized and all others lowercased and all others capitalized\
    \ and all others lowercased and all others capitalized and all others lowercased\
    \ and all others capitalized.\nWrite a function that takes a string and returns\
    \ a string with the first letter capitalized and all others lowercased and all\
    \ others capitalized and all others lowercased and all others capitalized and\
    \ all others lowercased and all others capitalized and all others lowercased.\n\
    Write a function that takes a string and returns a string with the first letter\
    \ capitalized and all others lowercased and all others capitalized and all others\
    \ lowercased and all others capitalized and all others lowercased and all others\
    \ capitalized and all others lowercased.\nWrite a function that takes a string\
    \ and returns a string with the first letter capitalized and all others lowercased\
    \ and all others capitalized and all others lowercased and all others capitalized\
    \ and all others lowercased and all others capitalized and all others lowercased.\n\
    Write a function that takes a string and returns a string with the first letter\
    \ capitalized and all others lowercased and all others capitalized and all others\
    \ lowercased and all others capitalized and all others lowercased and all others\
    \ capitalized and all others lowercased and all others capitalized.\nWrite a function\
    \ that takes a string and returns a string with the first letter capitalized and\
    \ all others lowercased and \nusing Test\n\n@testset begin\n\ncandidate = same_chars;\n\
    \t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"\
    abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\")\
    \ == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"\
    abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpkjg2uxfa.jl:32\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpkjg2uxfa.jl:32\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars(s0, s1) = length(s0)\
    \ == length(s1) && all(char(s0) == char(s1) for char in s0)\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\n    Check if two words have the same characters.\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd',\
    \ 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n\
    \    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd',\
    \ 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n\
    \    False\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = same_chars;\n\
    \t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"\
    abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\")\
    \ == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"\
    abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpvz35nvgs.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpvz35nvgs.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    \n    len0 = length(s0)\n\
    \    len1 = length(s1)\n    \n    if len0 != len1\n        return false\n    \n\
    \    i = 0\n    while i < len0\n        if s0[i] != s1[i]\n            return\
    \ false\n        i += 1\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmh11v53b.jl:32\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpmh11v53b.jl:32\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars = true\n  \
    \  for c in s0:\n        if c not in s1:\n            same_chars = false\n   \
    \         break\n    return same_chars\nend\n</cell>\n<code language=julia-1.3>\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpu96tg5gm.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpu96tg5gm.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    len0 = length(s0)\n  \
    \  len1 = length(s1)\n    if len0 != len1\n        return false\n    else\n  \
    \      chars = chars(s0)\n        chars = chars[1..len0]\n        chars = chars[1..len1]\n\
    \        chars = chars[1..len0]\n        chars = chars[1..len1]\n        chars\
    \ = chars[1..len0]\n        chars = chars[1..len1]\n        chars = chars[1..len0]\n\
    \        chars = chars[1..len1]\n        chars = chars[1..len0]\n        chars\
    \ = chars[1..len1]\n        chars = chars[1..len0]\n        chars = chars[1..len1]\n\
    \        chars = chars[1..len0]\n        chars = chars[1..len1]\n        chars\
    \ = chars[1..len0]\n        chars = chars[1..len1]\n        chars = chars[1..len0]\n\
    \        chars = chars[1..len1]\n        chars = chars[1..len0]\n        chars\
    \ = chars[1..len1]\n        chars = chars[1..len0]\n        chars = chars[1..len1]\n\
    \        chars = chars[1..len0]\n        chars = chars[1..len1]\n        chars\
    \ = chars[1..len0]\n        chars = chars[1..len1]\n        chars = chars[1..len0]\n\
    \        chars = chars[1..len1]\n        chars = chars[1..len0]\n        chars\
    \ = chars[1..len1]\n        chars = chars[1..len0]\n        chars = chars[1..len1]\n\
    \        chars = chars[1..len0]\n        chars = chars[1..len1]\n        chars\
    \ = chars[1..len0]\n        chars = chars[1..len1]\n        chars = chars[1..len0]\n\
    \        chars = chars[1..len1]\n        chars = chars[1..len0]\n        chars\
    \ = chars[1..len1]\n        chars = chars[1..len0]\n        chars = chars[1..len1]\n\
    \        chars = chars[1..len0]\n        chars = chars[1..len1]\n        chars\
    \ = chars[1..len0]\n        chars = chars[1..len1]\n        chars = chars[1..len0]\n\
    \        chars = chars[1..len\nusing Test\n\n@testset begin\n\ncandidate = same_chars;\n\
    \t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"\
    abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\")\
    \ == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"\
    abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3_y33x99.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp3_y33x99.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars = false\n \
    \   for c in s0:\n        if c not in s1:\n            same_chars = false\n  \
    \          break\n        same_chars = true\n    return same_chars\nend\n</cell>\n\
    <code language=julia-1.3>\n\"\"\"\n    Check if two words have the same characters.\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd',\
    \ 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n\
    \    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd',\
    \ 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n\
    \    False\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = same_chars;\n\
    \t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"\
    abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\")\
    \ == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"\
    abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpba86z2b1.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpba86z2b1.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    \n    \"\"\"\n    Check\
    \ if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    if s0 == s1:\n        return\
    \ True\n    if s0 == \"\" or s1 == \"\":\n        return False\n    \n    i =\
    \ 0\n    j = 0\n    \n    while i < len(s0) and j < len(s1):\n        if s0[i]\
    \ == s1[j]:\n            i += 1\n            j += 1\n        elif s0[i] > s1[j]:\n\
    \            i += 1\n        else:\n            j += 1\n            \n    if i\
    \ == len(s0):\n        return True\n    if j == len(s1):\n        return True\n\
    \    return False\n</cell>\n<text>\nExercise 3\nWrite a function that takes a\
    \ string and returns the number of characters in the string.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"\
    dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\t@test(candidate(\"aabb\", \"\
    aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpba6f7ct8.jl:34\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpba6f7ct8.jl:34\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars = true\n  \
    \  for c in s0:\n        if c not in s1:\n            same_chars = false\n   \
    \         break\n    return same_chars\n</code>\n<|/ a dscore=0 |>\n<| a tags=string,julia\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpu64zzdup.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpu64zzdup.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars = true\n  \
    \  for c in s0:\n        if c not in s1:\n            same_chars = false\n   \
    \         break\n    return same_chars\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpy43q32sh.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpy43q32sh.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars(s0, s1) ||\
    \ same_chars(s1, s0)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n\
    @testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\", \"\
    dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\") ==\
    \ true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"\
    eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\
    \t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpurejyram.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpurejyram.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars(s0, s1)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp7jbqu55l.jl:24\n  Test threw exception\n\
    \  Expression: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] same_chars(::String, ::String) at /tmp/tmp7jbqu55l.jl:17\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmp7jbqu55l.jl:25\n\
    \  Test threw exception\n  Expression: candidate(\"abcd\", \"dddddddabc\") ==\
    \ true\n  StackOverflowError:\n  Stacktrace:\n   [1] same_chars(::String, ::String)\
    \ at /tmp/tmp7jbqu55l.jl:17 (repeats 79984 times)\n  \ntest set: Error During\
    \ Test at /tmp/tmp7jbqu55l.jl:26\n  Test threw exception\n  Expression: candidate(\"\
    dddddddabc\", \"abcd\") == true\n  StackOverflowError:\n  Stacktrace:\n   [1]\
    \ same_chars(::String, ::String) at /tmp/tmp7jbqu55l.jl:17 (repeats 79984 times)\n\
    \  \ntest set: Error During Test at /tmp/tmp7jbqu55l.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"eabcd\", \"dddddddabc\") == false\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] same_chars(::String, ::String) at /tmp/tmp7jbqu55l.jl:17\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmp7jbqu55l.jl:28\n\
    \  Test threw exception\n  Expression: candidate(\"abcd\", \"dddddddabcf\") ==\
    \ false\n  StackOverflowError:\n  Stacktrace:\n   [1] same_chars(::String, ::String)\
    \ at /tmp/tmp7jbqu55l.jl:17 (repeats 79984 times)\n  \ntest set: Error During\
    \ Test at /tmp/tmp7jbqu55l.jl:29\n  Test threw exception\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\") == false\n  StackOverflowError:\n  Stacktrace:\n\
    \   [1] same_chars(::String, ::String) at /tmp/tmp7jbqu55l.jl:17 (repeats 79984\
    \ times)\n  \ntest set: Error During Test at /tmp/tmp7jbqu55l.jl:30\n  Test threw\
    \ exception\n  Expression: candidate(\"aabb\", \"aaccc\") == false\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] same_chars(::String, ::String) at /tmp/tmp7jbqu55l.jl:17\
    \ (repeats 79984 times)\n  \nTest Summary: | Error  Total\ntest set      |   \
    \  7      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7jbqu55l.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars = true\n  \
    \  for c in s0:\n        if c not in s1:\n            same_chars = false\n   \
    \         break\n    return same_chars\nend\n</cell>\n<code language=julia-1.3>\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphwydce8m.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmphwydce8m.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    len = length(s0)\n   \
    \ len1 = length(s1)\n    if len == len1\n        for (i, c) in zip(1:len, s0)\n\
    \            if c != s1[i]\n                return false\n        return true\n\
    \    else\n        return false\nend\n</cell>\n<code language=julia-1.4>\n\"\"\
    \"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpnq8sq9h2.jl:27\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpnq8sq9h2.jl:27\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars(s0, s1) = length(s0)\
    \ == length(s1) && all(char(s0) == char(s1) for char in s0)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = same_chars;\n\
    \t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"\
    abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\")\
    \ == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"\
    abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4rtuhz70.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp4rtuhz70.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars = true\n  \
    \  for c in s0:\n        if c not in s1:\n            same_chars = false\n   \
    \         break\n    return same_chars\nend\n</cell>\n<code language=julia-1.4>\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmprdf494sm.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmprdf494sm.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars(s0, s1) = length(s0)\
    \ == length(s1) && all(char(s0[i]) == char(s1[i]) for i in 1:length(s0))\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    Check if two words have the same\
    \ characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n\
    \    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"\
    dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\t@test(candidate(\"aabb\", \"\
    aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmprrhe7cxe.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmprrhe7cxe.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if s0 == s1 then return\
    \ true\n    if s0 == \"\" then return false\n    if s1 == \"\" then return false\n\
    \    if s0 == s1 then return true\n    if s0 == \"\" then return false\n    if\
    \ s1 == \"\" then return false\n    if s0 == s1 then return true\n    if s0 ==\
    \ \"\" then return false\n    if s1 == \"\" then return false\n    if s0 == s1\
    \ then return true\n    if s0 == \"\" then return false\n    if s1 == \"\" then\
    \ return false\n    if s0 == s1 then return true\n    if s0 == \"\" then return\
    \ false\n    if s1 == \"\" then return false\n    if s0 == s1 then return true\n\
    \    if s0 == \"\" then return false\n    if s1 == \"\" then return false\n  \
    \  if s0 == s1 then return true\n    if s0 == \"\" then return false\n    if s1\
    \ == \"\" then return false\n    if s0 == s1 then return true\n    if s0 == \"\
    \" then return false\n    if s1 == \"\" then return false\n    if s0 == s1 then\
    \ return true\n    if s0 == \"\" then return false\n    if s1 == \"\" then return\
    \ false\n    if s0 == s1 then return true\n    if s0 == \"\" then return false\n\
    \    if s1 == \"\" then return false\n    if s0 == s1 then return true\n    if\
    \ s0 == \"\" then return false\n    if s1 == \"\" then return false\n    if s0\
    \ == s1 then return true\n    if s0 == \"\" then return false\n    if s1 == \"\
    \" then return false\n    if s0 == s1 then return true\n    if s0 == \"\" then\
    \ return false\n    if s1 == \"\" then return false\n    if s0 == s1 then return\
    \ true\n    if s0 == \"\" then return false\n    if s1 == \"\" then return false\n\
    \    if s0 == s1 then return true\n    if s0 == \"\" then return false\n    if\
    \ s1 == \"\" then return false\n    if s0 == s1 then return true\n    if s0 ==\
    \ \"\" then return false\n    if s1 == \"\" then return false\n    if s0 == s1\
    \ then return true\n    if s0 == \"\" then return false\n    if s1 == \"\" then\
    \ return false\n    if s0 == s1 then return true\n    if s0 == \"\" then return\
    \ false\n    if s1 == \"\" then return false\n    if s0 == s1 then return true\n\
    \    if s0 == \"\" then return false\n    if s1 == \"\" then return false\n  \
    \  if s0 == s1 then return true\n    if s0 == \"\" then return false\n    if s1\
    \ == \"\" then return false\n    if s0 == s1 then return true\n    if s0 == \n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpbn0f5p_q.jl:17\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpbn0f5p_q.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    len_s0 = length(s0)\n\
    \    len_s1 = length(s1)\n    if len_s0 != len_s1\n        return false\n    \n\
    \    i = 0\n    while i < len_s0\n        if s0[i] != s1[i]\n            return\
    \ false\n        i += 1\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_wcswgtn.jl:29\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_wcswgtn.jl:29\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    \n    same_chars = true\n\
    \    \n    for c in s0:\n        if c not in s1:\n            same_chars = false\n\
    \            break\n    \n    return same_chars\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp0t50eihn.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp0t50eihn.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    same_chars = true\n  \
    \  for c in s0:\n        if c not in s1:\n            same_chars = false\n   \
    \         break\n    return same_chars\nend\n</cell>\n<code language=julia-1.3>\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpnth39jjr.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpnth39jjr.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    \n    len0 = length(s0)\n\
    \    len1 = length(s1)\n    \n    if len0 != len1\n        return false\n    \n\
    \    i = 0\n    j = 0\n    \n    while i < len0 and j < len1\n        if s0[i]\
    \ != s1[j]\n            return false\n        i += 1\n        j += 1\n    \n \
    \   return true\nend\nusing Test\n\n@testset begin\n\ncandidate = same_chars;\n\
    \t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"\
    abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\")\
    \ == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"\
    abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"j\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmprerhfad6.jl:27\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmprerhfad6.jl:27\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    \n    same_chars = true\n\
    \    for c in s0:\n        if c not in s1:\n            same_chars = false\n \
    \           break\n    return same_chars\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpdrqqqwtk.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpdrqqqwtk.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    len0 = length(s0)\n  \
    \  len1 = length(s1)\n    if len0 != len1\n        return false\n    else\n  \
    \      for (i0, i1) in zip(xrange(len0), xrange(len1))\n            if s0[i0]\
    \ != s1[i1]\n                return false\n    return true\nend\n</cell>\n<code\
    \ language=julia-1.4>\n\"\"\"\n    Check if two words have the same characters.\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd',\
    \ 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n\
    \    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd',\
    \ 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n\
    \    False\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = same_chars;\n\
    \t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"\
    abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\")\
    \ == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"\
    abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3lyi_2tl.jl:27\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp3lyi_2tl.jl:27\n"
  exit_code: 1
  status: Exception
