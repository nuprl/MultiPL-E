name: HumanEval_121_solution
language: julia
results:
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in lst\n        if i%2 == 1\n            sum += i\n  \
    \      end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3, 3,\
    \ 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0qqtuz6y.jl:23\n  Expression: candidate([5,\
    \ 8, 7, 1]) == 12\n   Evaluated: 13 == 12\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0qqtuz6y.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0qqtuz6y.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp0qqtuz6y.jl:24\n  Expression: candidate([3, 3, 3, 3, 3]) ==\
    \ 9\n   Evaluated: 15 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0qqtuz6y.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0qqtuz6y.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp0qqtuz6y.jl:25\n  Expression: candidate([30, 13, 24, 321])\
    \ == 0\n   Evaluated: 334 == 0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0qqtuz6y.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0qqtuz6y.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp0qqtuz6y.jl:26\n  Expression: candidate([5, 9]) == 5\n   Evaluated:\
    \ 14 == 5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0qqtuz6y.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0qqtuz6y.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp0qqtuz6y.jl:28\n  Expression: candidate([30, 13, 23, 32])\
    \ == 23\n   Evaluated: 36 == 23\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inli"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0qqtuz6y.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    evens = filter(x -> x % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0,\
    \ lst)\n    return sum(filter(x -> x % 2 == 1, odds))\nend\n</cell>\n<text>\n\
    Exercise 4\nWrite a function that takes a vector of integers and returns the sum\
    \ of the squares of the even elements. \n    \n    \n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 25\n    solution([3, 3, 3, 3, 3]) ==> 27\n    solution([30, 13,\
    \ 24, 321]) ==> 141\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\
    \t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) ==\
    \ 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) ==\
    \ 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32])\
    \ == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo4vx3yh9.jl:14\nin expression starting at\
    \ /tmp/tmpo4vx3yh9.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    evens = filter(x -> x % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0,\
    \ lst)\n    \n    sum(filter(x -> x % 2 == 1, odds))\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert solution([5, 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n\
    @assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\nPart III. Vectorized\
    \ Solutions\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5,\
    \ 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
    \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2,\
    \ 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3,\
    \ 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0hmc_rtr.jl:15\nin expression starting at\
    \ /tmp/tmp0hmc_rtr.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    evens = filter(x -> x % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0,\
    \ lst)\n    sum(evens) + sum(odds)\nend\n</cell>\n<text>\nProblem 7\nWrite a function\
    \ that takes a list of numbers and returns the product of the numbers in the list.\
    \ Do not use the reduce function.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3, 3,\
    \ 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgjap7wbw.jl:14\nin expression starting at\
    \ /tmp/tmpgjap7wbw.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    \n    sum = 0\n    for x in lst\n        if x % 2 == 1\n            sum +=\
    \ x\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype solution([5, 8, 7, 1])\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ solution([3, 3, 3, 3, 3])\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ solution([30, 13, 24, 321])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the product of all even elements in a given list.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3,\
    \ 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3hgwm1sr.jl:19\nin expression starting at\
    \ /tmp/tmp3hgwm1sr.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    \n    evens = filter(x -> x % 2 == 0, lst)\n    odds = filter(x -> x % 2\
    \ != 0, lst)\n    \n    sum(filter(x -> x % 2 == 1, odds))\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype solution([5, 8, 7, 1])\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype solution([3, 3, 3, 3, 3])\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype solution([30, 13, 24, 321])\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a vector of numbers and returns the number of elements\
    \ that are odd.\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5,\
    \ 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
    \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2,\
    \ 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3,\
    \ 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpiiau7d71.jl:16\nin expression starting at\
    \ /tmp/tmpiiau7d71.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    evens = lst[findall(x -> x % 2 == 0, lst)]\n    odds = lst[findall(x -> x\
    \ % 2 != 0, lst)]\n    return sum(filter(x -> x % 2 == 1, odds)) + sum(filter(x\
    \ -> x % 2 != 1, evens))\nend\n</cell>\n<code language=julia-1.3>\n@time solution([5,\
    \ 8, 7, 1])\n</cell>\n<code language=julia-1.3>\n@time solution([3, 3, 3, 3, 3])\n\
    </cell>\n<code language=julia-1.3>\n@time solution([30, 13, 24, 321])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of elements in a\
    \ list that satisfy a predicate.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3, 3,\
    \ 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzmzhtnnj.jl:14\nin expression starting at\
    \ /tmp/tmpzmzhtnnj.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    evens = filter(x -> x % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0,\
    \ lst)\n    sum(filter(x -> x % 2 == 1, odds))\nend\n</cell>\n<text>\nProblem\
    \ 7\nWrite a function that returns the number of elements in a list that satisfy\
    \ a predicate (predicate(element) == true).\nusing Test\n\n@testset begin\n\n\
    candidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3,\
    \ 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzuan148q.jl:14\nin expression starting at\
    \ /tmp/tmpzuan148q.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    evens = filter(x -> x % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0,\
    \ lst)\n    \n    return sum(filter(x -> x % 2 == 1, odds)) + sum(filter(x ->\
    \ x % 2 == 0, evens))\nend\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ solution([5, 8, 7, 1])\n</cell>\n<code language=julia-1.5>\n@code_warntype solution([3,\
    \ 3, 3, 3, 3])\n</cell>\n<code language=julia-1.5>\n@code_warntype solution([30,\
    \ 13, 24, 321])\n</cell>\n<text>\nExercise 2\nWrite a function that takes in a\
    \ list of integers and returns the sum of the even elements that are in odd positions.\n\
    using Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8,\
    \ 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
    \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2,\
    \ 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3,\
    \ 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxh9skeiq.jl:15\nin expression starting at\
    \ /tmp/tmpxh9skeiq.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    evens = lst[findall(x -> x % 2 == 0, lst)]\n    odds = lst[findall(x -> x\
    \ % 2 != 0, lst)]\n    return sum(evens) + sum(odds)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert solution([5, 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n\
    @assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\nPart 2\nThe second\
    \ puzzle involves finding the largest palindrome made from the product of two\
    \ 3-digit numbers.\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\t\
    @test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\
    \t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t\
    @test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\
    \t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi5e7xsw2.jl:14\nin expression starting at\
    \ /tmp/tmpi5e7xsw2.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    \n    sum = 0\n    for x in lst\n        if x % 2 == 1\n            sum +=\
    \ x\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert solution([5, 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n\
    @assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that returns the product of the even elements of a given list. For\
    \ example, given [5, 8, 7, 1], return 50.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3, 3,\
    \ 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp13ct3qx0.jl:19\nin expression starting at\
    \ /tmp/tmp13ct3qx0.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    \n    sum = 0\n    for i in lst\n        if i%2 == 1\n            sum +=\
    \ i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert solution([5, 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n\
    @assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\nPart III. Recursion\n\
    A recursive function is a function that calls itself. In Julia, a recursive function\
    \ is defined using the function keyword. For example, consider the following recursive\
    \ function:\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5,\
    \ 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
    \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2,\
    \ 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3,\
    \ 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvv22he_o.jl:19\nin expression starting at\
    \ /tmp/tmpvv22he_o.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in lst\n        if i%2 == 1\n            sum += i\n  \
    \      end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.4>\n\
    @code_warntype solution([5, 8, 7, 1])\n</cell>\n<code language=julia-1.4>\n@code_warntype\
    \ solution([3, 3, 3, 3, 3])\n</cell>\n<code language=julia-1.4>\n@code_warntype\
    \ solution([30, 13, 24, 321])\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the product of all the even elements in a list.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3,\
    \ 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa81004gv.jl:18\nin expression starting at\
    \ /tmp/tmpa81004gv.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    evens = lst[findall(x -> x % 2 == 0, lst)]\n    odd = lst[findall(x -> x\
    \ % 2 != 0, lst)]\n    return sum(filter(x -> x in odd, evens))\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert solution([5, 8, 7, 1]) == 12\n@assert solution([3,\
    \ 3, 3, 3, 3]) == 9\n@assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\n\
    Part II: Recursion\nA recursive function can be defined recursively, which means\
    \ it calls itself. A recursive function can have two types of inputs:\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsk7f48yu.jl:14\nin expression starting at\
    \ /tmp/tmpsk7f48yu.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    even = filter(x -> x % 2 == 0, lst)\n    odd = filter(x -> x % 2 != 0, lst)\n\
    \    \n    return sum(filter(x -> x % 2 == 1, odd))\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert solution([5, 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n\
    @assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\nPart III. Filtering\
    \ by index\nGiven a vector x, return a vector y where each element of y is x[i]\
    \ + y[i+1] + y[i+2] + y[i+3] + y[i+4] + y[i+5] + y[i+6] + y[i+7] + y[i+8] + y[i+9]\
    \ + y[i+10] + y[i+11] + y[i+12] + y[i+13] + y[i+14] + y[i+15] + y[i+16] + y[i+17]\
    \ + y[i+18] + y[i+19] + y[i+20] + y[i+21] + y[i+22] + y[i+23] + y[i+24] + y[i+25]\
    \ + y[i+26] + y[i+27] + y[i+28] + y[i+29] + y[i+30] + y[i+31] + y[i+32] + y[i+33]\
    \ + y[i+34] + y[i+35] + y[i+36] + y[i+37] + y[i+38] + y[i+39] + y[i+40] + y[i+41]\
    \ + y[i+42] + y[i+43] + y[i+44] + y[i+45] + y[i+46] + y[i+47] + y[i+48] + y[i+49]\
    \ + y[i+50] + y[i+51] + y[i+52] + y[i+53] + y[i+54] + y[i+55] + y[i+56] + y[i+57]\
    \ + y[i+58] + y[i+59] + y[i+60] + y[i+61] + y[i+62] + y[i+63] + y[i+64] + y[i+65]\
    \ + y[i+66] + y[i+67] + y[i+68] + y[i+69] + y[i+70] + y[i+71] + y[i+72] + y[i+73]\
    \ + y[i+74] + y[i+75] + y[i+76] + y[i+77] + y[i+78] + y[i+79] + y[i+80] + y[i+81]\
    \ + y[i+82] + y[i+83] + y[i+84] + y[i+85] + y[i+86] + y[i+87] + y[i+88] + y[i+89]\
    \ + y[i+90] + y[i+91] + y[i+92] + y[i+93] + y[i+94] + \nusing Test\n\n@testset\
    \ begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3,\
    \ 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppvt964xq.jl:15\nin expression starting at\
    \ /tmp/tmppvt964xq.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    evens = filter(x -> x % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0,\
    \ lst)\n    return sum(filter(x -> x % 2 == 1, odds)) + sum(filter(x -> x % 2\
    \ == 0, evens))\nend\n</cell>\n<text>\nProblem 7\nWrite a function that returns\
    \ the number of elements in a list that satisfy a given condition. For example,\
    \ given [5, 7, 7, 8, 8, 10], return 3.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3, 3,\
    \ 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfi6ampfg.jl:14\nin expression starting at\
    \ /tmp/tmpfi6ampfg.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in lst\n        if i%2 == 1\n            sum += i\n  \
    \      end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    @time solution(lst)\n</cell>\n<text>\nProblem 7\nWrite a function that returns\
    \ the number of elements in a list that are not equal to some specified value.\n\
    using Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8,\
    \ 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
    \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2,\
    \ 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3,\
    \ 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo95p8q85.jl:18\nin expression starting at\
    \ /tmp/tmpo95p8q85.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    even = filter(x -> x % 2 == 0, lst)\n    odd = filter(x -> x % 2 != 0, lst)\n\
    \    return sum(filter(x -> x % 2 == 1, odd))\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert solution([5, 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n\
    @assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\nPart III. Recursion\n\
    A recursive function is a function that calls itself. This can be very useful\
    \ in many situations. For example, consider the Fibonacci sequence defined as:\n\
    using Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8,\
    \ 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
    \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2,\
    \ 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3,\
    \ 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2wr3wxb1.jl:14\nin expression starting at\
    \ /tmp/tmp2wr3wxb1.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    evens = filter(x -> x % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0,\
    \ lst)\n    return sum(filter(x -> x in odds, evens))\nend\n</cell>\n<text>\n\
    Problem 3\nWrite a function that returns the product of all the even numbers in\
    \ a list.\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5,\
    \ 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
    \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2,\
    \ 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3,\
    \ 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm91znx6v.jl:14\nin expression starting at\
    \ /tmp/tmpm91znx6v.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    \n    evens = filter(x -> x % 2 == 0, lst)\n    odds = filter(x -> x % 2\
    \ != 0, lst)\n    \n    return sum(x -> x % 2 == 1, odds) + sum(x -> x % 2 !=\
    \ 1, evens)\nend\n</cell>\n<code language=julia-1.5>\n@time solution([5, 8, 7,\
    \ 1]);\n</cell>\n<code language=julia-1.5>\n@time solution([3, 3, 3, 3, 3]);\n\
    </cell>\n<code language=julia-1.5>\n@time solution([30, 13, 24, 321]);\n</cell>\n\
    <text>\nPart 2: Recursion\nA recursive function has two parts: base case and recursive\
    \ case. Base case is when the function does not need to do any work. Recursive\
    \ case is when the function needs to do some work and needs to call itself.\n\
    using Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8,\
    \ 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
    \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2,\
    \ 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3,\
    \ 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp6rwqjcn.jl:16\nin expression starting at\
    \ /tmp/tmpp6rwqjcn.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    even = filter(x -> x % 2 == 0, lst)\n    odd = filter(x -> x % 2 != 0, lst)\n\
    \    \n    return sum(filter(x -> x % 2 == 1, odd))\nend\n</cell>\n<code language=julia-1.0>\n\
    @assert solution([5, 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n\
    @assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\nPart II: More on maps\
    \ and filters \nmaps and filters are extremely useful functions in Julia. Let's\
    \ see how they work. First, let's see how map works:\nusing Test\n\n@testset begin\n\
    \ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3,\
    \ 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7zaj7x_0.jl:15\nin expression starting at\
    \ /tmp/tmp7zaj7x_0.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    evens = filter(x -> x % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0,\
    \ lst)\n    \n    sum(filter(x -> x % 2 == 1, odds))\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert solution([5, 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n\
    @assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\nPart III. Filtering\
    \ by index\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5,\
    \ 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
    \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2,\
    \ 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3,\
    \ 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpghlfj2yi.jl:15\nin expression starting at\
    \ /tmp/tmpghlfj2yi.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    evens = filter(x -> x % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0,\
    \ lst)\n    \n    return sum(filter(x -> x % 2 == 1, odds))\nend\n</cell>\n<code\
    \ language=julia-1.4>\n@time solution([5, 8, 7, 1])\n</cell>\n<code language=julia-1.4>\n\
    @time solution([3, 3, 3, 3, 3])\n</cell>\n<code language=julia-1.4>\n@time solution([30,\
    \ 13, 24, 321])\n</cell>\n<text>\nExercise: Write a function that takes a vector\
    \ and returns the number of elements that are greater than the mean of the vector.\n\
    using Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8,\
    \ 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
    \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2,\
    \ 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3,\
    \ 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv0h3pdsd.jl:15\nin expression starting at\
    \ /tmp/tmpv0h3pdsd.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    evens = filter(x -> x % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0,\
    \ lst)\n    \n    return sum(filter(x -> x % 2 == 1, odds))\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype solution([5, 8, 7, 1])\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype solution([3, 3, 3, 3, 3])\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype solution([30, 13, 24, 321])\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the product of all the even elements in a given list.\n\
    using Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8,\
    \ 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
    \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2,\
    \ 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3,\
    \ 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppa3e3exe.jl:15\nin expression starting at\
    \ /tmp/tmppa3e3exe.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    evens = filter(x -> x % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0,\
    \ lst)\n    return sum(filter(x -> x % 2 == 1, odds))\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the product of the even elements of\
    \ a list.\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5,\
    \ 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
    \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2,\
    \ 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3,\
    \ 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4t_pj752.jl:14\nin expression starting at\
    \ /tmp/tmp4t_pj752.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in lst\n        if i%2 == 1\n            sum += i\n  \
    \      end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype solution([5, 8, 7, 1])\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ solution([3, 3, 3, 3, 3])\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ solution([30, 13, 24, 321])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the number of times the number 3 appears in the list [3, 3, 3, 3, 3].\
    \ \nWrite a function that returns the number of times the number 3 appears in\
    \ the list [3, 3, 3, 3, 3, 3]. \nWrite a function that returns the number of times\
    \ the number 3 appears in the list [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, \nusing Test\n\n@testset begin\n\ncandidate =\
    \ solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3, 3,\
    \ 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptzy7313v.jl:18\nin expression starting at\
    \ /tmp/tmptzy7313v.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    evens = filter(x -> x % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0,\
    \ lst)\n    return sum(filter(x -> x in odds, evens))\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert solution([5, 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n\
    @assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\nPart III. Sum even\
    \ numbers in an array\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\
    \t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) ==\
    \ 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) ==\
    \ 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32])\
    \ == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu3cbze0f.jl:14\nin expression starting at\
    \ /tmp/tmpu3cbze0f.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    \n    sum = 0\n    for i in lst\n        if i%2 == 1\n            sum +=\
    \ i\n        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3,\
    \ 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjwjzsmu7.jl:24\n  Expression: candidate([5,\
    \ 8, 7, 1]) == 12\n   Evaluated: 13 == 12\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjwjzsmu7.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjwjzsmu7.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpjwjzsmu7.jl:25\n  Expression: candidate([3, 3, 3, 3, 3]) ==\
    \ 9\n   Evaluated: 15 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjwjzsmu7.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjwjzsmu7.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpjwjzsmu7.jl:26\n  Expression: candidate([30, 13, 24, 321])\
    \ == 0\n   Evaluated: 334 == 0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjwjzsmu7.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjwjzsmu7.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpjwjzsmu7.jl:27\n  Expression: candidate([5, 9]) == 5\n   Evaluated:\
    \ 14 == 5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjwjzsmu7.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjwjzsmu7.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpjwjzsmu7.jl:29\n  Expression: candidate([30, 13, 23, 32])\
    \ == 23\n   Evaluated: 36 == 23\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inli"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjwjzsmu7.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    evens = filter(x -> x % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0,\
    \ lst)\n    \n    sum(filter(x -> x % 2 == 1, odds))\nend\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype solution([5, 8, 7, 1])\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ solution([3, 3, 3, 3, 3])\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ solution([30, 13, 24, 321])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the product of all of the odd elements that are in even positions.\n\
    using Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8,\
    \ 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
    \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2,\
    \ 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3,\
    \ 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpiamok1cm.jl:15\nin expression starting at\
    \ /tmp/tmpiamok1cm.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    evens = lst[findall(x -> x % 2 == 0, lst)]\n    odds = lst[findall(x -> x\
    \ % 2 != 0, lst)]\n    return sum(filter(x -> x % 2 == 1, odds)) + sum(filter(x\
    \ -> x % 2 == 0, evens))\nend\n</cell>\n<code language=julia-1.5>\n@time solution([5,\
    \ 8, 7, 1])\n</cell>\n<code language=julia-1.5>\n@time solution([3, 3, 3, 3, 3])\n\
    </cell>\n<code language=julia-1.5>\n@time solution([30, 13, 24, 321])\n</cell>\n\
    <text>\nExercise: Write a function that returns the sum of the even elements in\
    \ a given list.\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5,\
    \ 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
    \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2,\
    \ 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3,\
    \ 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6n6yyyqz.jl:14\nin expression starting at\
    \ /tmp/tmp6n6yyyqz.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    \n    sum = 0\n    for i in lst\n        if i%2 == 1\n            sum +=\
    \ i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype solution([5, 8, 7, 1])\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ solution([3, 3, 3, 3, 3])\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ solution([30, 13, 24, 321])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a vector of integers and returns the number of times each integer appears\
    \ in the vector. \nusing Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5,\
    \ 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
    \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2,\
    \ 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3,\
    \ 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbn683f8k.jl:19\nin expression starting at\
    \ /tmp/tmpbn683f8k.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    evens = lst[findall(x -> x % 2 == 0, lst)]\n    odds = lst[findall(x -> x\
    \ % 2 != 0, lst)]\n    return sum(filter(x -> x % 2 == 1, odds)) + sum(filter(x\
    \ -> x % 2 != 1, evens))\nend\n</cell>\n<code language=julia-1.0>\n@assert solution([5,\
    \ 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n@assert solution([30,\
    \ 13, 24, 321]) == 0\n</cell>\n<text>\nPart III. Finding the first and last element\
    \ of a list\nGiven a non-empty list of integers, return the index of the first\
    \ and last element in the list that contain some specific value.\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj2rf9joa.jl:14\nin expression starting at\
    \ /tmp/tmpj2rf9joa.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    even = lst[findall(x -> x % 2 == 0, lst)]\n    odd = lst[findall(x -> x %\
    \ 2 != 0, lst)]\n    return sum(filter(x -> x % 2 == 1, even)) + sum(filter(x\
    \ -> x % 2 != 1, odd))\nend\n</cell>\n<code language=julia-1.5>\n@assert solution([5,\
    \ 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n@assert solution([30,\
    \ 13, 24, 321]) == 0\n</cell>\n<text>\nProblem 7: Write a function that returns\
    \ the number of times a given element appears in a given list.\nusing Test\n\n\
    @testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\
    \t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321])\
    \ == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\
    \t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) ==\
    \ 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5cy_l9qb.jl:14\nin expression starting at\
    \ /tmp/tmp5cy_l9qb.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    evens = lst[findall(x -> x % 2 == 0, lst)]\n    odd = sum(x -> x % 2 != 0,\
    \ lst)\n    return odd - evens\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3, 3,\
    \ 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmput0597d8.jl:19\\n  Test threw\
    \ exception\\n  Expression: candidate([5, 8, 7, 1]) == 12\\n  MethodError: no\
    \ method matching -(::Int64, ::Vector{Int64})\\n  For element-wise subtraction,\
    \ use broadcasting with dot syntax: scalar .- array\\n  Closest candidates are:\\\
    n    -(::Union{Int128, Int16, Int32, Int64, Int8, UInt128, UInt16, UInt32, UInt64,\
    \ UInt8}) at /shared/centos7/julia/1.7.3/share/julia/base/int.jl:85\\n    -(::T,\
    \ !Matched::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128, UInt16,\
    \ UInt32, UInt64, UInt8} at /shared/centos7/julia/1.7.3/share/julia/base/int.jl:86\\\
    n    -(::Union{Int16, Int32, Int64, Int8}, !Matched::BigInt) at /shared/centos7/julia/1.7.3/share/julia/base/gmp.jl:537\\\
    n    ...\\n  Stacktrace:\\n   [1] solution(lst::Vector{Int64})\\n     @ Main /tmp/tmput0597d8.jl:12\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmput0597d8.jl:19 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmput0597d8.jl:18\\ntest set:\
    \ Error During Test at /tmp/tmput0597d8.jl:20\\n  Test threw exception\\n  Expression:\
    \ candidate([3, 3, 3, 3, 3]) == 9\\n  MethodError: no method matching -(::Int64,\
    \ ::Vector{Int64})\\n  For element-wise subtraction, use broadcasting with dot\
    \ syntax: scalar .- array\\n  Closest candidates are:\\n    -(::Union{Int128,\
    \ Int16, Int32, Int64, Int8, UInt128, UInt16, UInt32, UInt64, UInt8}) at /shared/centos7/julia/1.7.3/share/julia/base/int.jl:85\\\
    n    -(::T, !Matched::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128,\
    \ UInt16, UInt32, UInt64, UInt8} at /shared/centos7/julia/1.7.3/share/julia/base/int.jl:86\\\
    n    -(::Union{Int16, Int32, Int64, Int8}, !Matched::BigInt) at /shared/centos7/julia/1.7.3/share/julia/base/gmp.jl:537\\\
    n    ...\\n  Stacktrace:\\n   [1] solution(lst::Vector{Int64})\\n     @ Main /tmp/tmput0597d8.jl:12\\\
    n   [2] macro expansio"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    evens = filter(x -> x % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0,\
    \ lst)\n    return sum(x -> x in odds, evens)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert solution([5, 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n\
    @assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\nPart 2: Recursion\n\
    A recursive function is a function that calls itself. This can be done in Julia\
    \ by using the function keyword.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3, 3,\
    \ 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl0ucsvwp.jl:14\nin expression starting at\
    \ /tmp/tmpl0ucsvwp.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    evens = lst[findall(x -> x % 2 == 0, lst)]\n    odds = lst[findall(x -> x\
    \ % 2 != 0, lst)]\n    sum(evens) + sum(odds)\nend\n</cell>\n<code language=julia-1.3>\n\
    @time solution([5, 8, 7, 1])\n</cell>\n<code language=julia-1.3>\n@time solution([3,\
    \ 3, 3, 3, 3])\n</cell>\n<code language=julia-1.3>\n@time solution([30, 13, 24,\
    \ 321])\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector of\
    \ integers and returns the number of elements that are odd.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3,\
    \ 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp91j_e2ji.jl:14\nin expression starting at\
    \ /tmp/tmp91j_e2ji.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    evens = filter(x -> x % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0,\
    \ lst)\n    sum(filter(x -> x % 2 == 1, odds))\nend\n</cell>\n<code language=julia-1.0>\n\
    @assert solution([5, 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n\
    @assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\nProblem 7\nWrite a\
    \ function that returns the number of times a given element appears in a given\
    \ list.\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5,\
    \ 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
    \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2,\
    \ 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3,\
    \ 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl1uxa_we.jl:14\nin expression starting at\
    \ /tmp/tmpl1uxa_we.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    evens = filter(x -> x % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0,\
    \ lst)\n    return sum(filter(x -> x % 2 == 1, odds))\nend\n</cell>\n<code language=julia-1.5>\n\
    @time solution([5, 8, 7, 1])\n</cell>\n<code language=julia-1.5>\n@time solution([3,\
    \ 3, 3, 3, 3])\n</cell>\n<code language=julia-1.5>\n@time solution([30, 13, 24,\
    \ 321])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a list of integers\
    \ and returns the number of elements in the list that are less than or equal to\
    \ zero.\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5,\
    \ 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
    \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2,\
    \ 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3,\
    \ 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx39djf6i.jl:14\nin expression starting at\
    \ /tmp/tmpx39djf6i.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    evens = lst[findall(x -> x % 2 == 0, lst)]\n    sum(evens)\nend\n</cell>\n\
    <text>\nExercise 4\nWrite a function that returns the product of all the even\
    \ elements in a list.\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\
    \t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) ==\
    \ 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) ==\
    \ 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32])\
    \ == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpobxt96iz.jl:13\nin expression starting at\
    \ /tmp/tmpobxt96iz.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    evens = filter(x -> x % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0,\
    \ lst)\n    sum(filter(x -> x % 2 == 1, odds))\nend\n</cell>\n<text>\nProblem\
    \ 7: Sum of all odd numbers\nWrite a function that returns the sum of all of the\
    \ odd numbers in a given list.\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\
    \t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) ==\
    \ 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) ==\
    \ 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32])\
    \ == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5_7qxjmw.jl:14\nin expression starting at\
    \ /tmp/tmp5_7qxjmw.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    \n    sum = 0\n    for x in lst\n        if x % 2 == 1\n            sum +=\
    \ x\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    @time solution([5, 8, 7, 1])\n</cell>\n<code language=julia-1.5>\n@time solution([3,\
    \ 3, 3, 3, 3])\n</cell>\n<code language=julia-1.5>\n@time solution([30, 13, 24,\
    \ 321])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the sum of\
    \ the squares of the numbers in a given list.\nusing Test\n\n@testset begin\n\n\
    candidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3,\
    \ 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1se77crw.jl:19\nin expression starting at\
    \ /tmp/tmp1se77crw.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    evens = filter(x -> x % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0,\
    \ lst)\n    return sum(filter(x -> x % 2 == 1, odds))\nend\n</cell>\n<code language=julia-1.5>\n\
    @time solution([5, 8, 7, 1])\n</cell>\n<code language=julia-1.5>\n@time solution([3,\
    \ 3, 3, 3, 3])\n</cell>\n<code language=julia-1.5>\n@time solution([30, 13, 24,\
    \ 321])\n</cell>\n<text>\nExercise\nWrite a function that takes in a list of integers\
    \ and returns the number of elements in the list that are greater than the average\
    \ of the list.\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5,\
    \ 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
    \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2,\
    \ 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3,\
    \ 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpry9_s2vl.jl:14\nin expression starting at\
    \ /tmp/tmpry9_s2vl.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    evens = filter(x -> x % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0,\
    \ lst)\n    sum(filter(x -> x % 2 == 1, odds))\nend\n</cell>\n<code language=julia-1.5>\n\
    @time solution([5, 8, 7, 1])\n</cell>\n<code language=julia-1.5>\n@time solution([3,\
    \ 3, 3, 3, 3])\n</cell>\n<code language=julia-1.5>\n@time solution([30, 13, 24,\
    \ 321])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the sum of\
    \ the first n numbers in a vector. \nFor example, if the vector is [5, 8, 7, 1],\
    \ the sum of the first 3 numbers is 8.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3, 3,\
    \ 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppif5tzpu.jl:14\nin expression starting at\
    \ /tmp/tmppif5tzpu.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    evens = filter(x -> x % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0,\
    \ lst)\n    sum(filter(x -> x % 2 == 1, odds))\nend\n</cell>\n<text>\nExercise\
    \ 4\nWrite a function that returns the product of the even elements of a list.\n\
    using Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8,\
    \ 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
    \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2,\
    \ 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3,\
    \ 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfhauef_w.jl:14\nin expression starting at\
    \ /tmp/tmpfhauef_w.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    evens = lst[findall(x -> x % 2 == 0, lst)]\n    odds = lst[findall(x -> x\
    \ % 2 != 0, lst)]\n    sum(evens) + sum(odds)\nend\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype solution([5, 8, 7, 1])\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ solution([3, 3, 3, 3, 3])\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ solution([30, 13, 24, 321])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes in a list of integers and returns the number of elements that are odd.\n\
    using Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8,\
    \ 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
    \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2,\
    \ 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3,\
    \ 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzv13rby1.jl:14\nin expression starting at\
    \ /tmp/tmpzv13rby1.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    evens = filter(x -> x % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0,\
    \ lst)\n    \n    return sum(filter(x -> x % 2 == 1, odds)) + sum(evens)\nend\n\
    </cell>\n<code language=julia-1.4>\n@assert solution([5, 8, 7, 1]) == 12\n@assert\
    \ solution([3, 3, 3, 3, 3]) == 9\n@assert solution([30, 13, 24, 321]) == 0\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes in a list of integers and returns\
    \ the number of even and odd numbers in the list. \nusing Test\n\n@testset begin\n\
    \ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3,\
    \ 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2sa86ci4.jl:15\nin expression starting at\
    \ /tmp/tmp2sa86ci4.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    evens = filter(x -> x % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0,\
    \ lst)\n    \n    return sum(filter(x -> x % 2 == 1, odds))\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@time solution([5, 8, 7, 1])\n</cell>\n<code language=julia-1.5>\n\
    @time solution([3, 3, 3, 3, 3])\n</cell>\n<code language=julia-1.5>\n@time solution([30,\
    \ 13, 24, 321])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ number of elements in a list that satisfy a given condition. For example, a\
    \ list [5, 8, 7, 1] contains 3 elements that satisfy the condition that they are\
    \ both odd.\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5,\
    \ 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
    \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2,\
    \ 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3,\
    \ 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwz_jzq0l.jl:15\nin expression starting at\
    \ /tmp/tmpwz_jzq0l.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    evens = filter(x -> x % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0,\
    \ lst)\n    sum(filter(x -> x % 2 == 1, odds))\nend\n</cell>\n<text>\nProblem\
    \ 7\nWrite a function that returns the product of the numbers in a given list.\n\
    using Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8,\
    \ 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
    \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2,\
    \ 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3,\
    \ 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3af191_4.jl:14\nin expression starting at\
    \ /tmp/tmp3af191_4.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    evens = filter(x -> x % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0,\
    \ lst)\n    sum(filter(x -> x % 2 == 1, odds))\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert solution([5, 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n\
    @assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\nPart II: Recursion\n\
    Now let's try solving this problem using recursion.\nusing Test\n\n@testset begin\n\
    \ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3,\
    \ 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkvairp84.jl:14\nin expression starting at\
    \ /tmp/tmpkvairp84.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    even = filter(x -> x % 2 == 0, lst)\n    odd = filter(x -> x % 2 != 0, lst)\n\
    \    \n    return sum(filter(x -> x % 2 == 1, odd))\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert solution([5, 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n\
    @assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\nPart III. Recursion\n\
    A recursive function is a function that calls itself. A recursive function can\
    \ be defined recursively, or iteratively.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3, 3,\
    \ 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmuxk1y08.jl:15\nin expression starting at\
    \ /tmp/tmpmuxk1y08.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    evens = lst[findall(x -> x % 2 == 0, lst)]\n    odds = lst[findall(x -> x\
    \ % 2 != 0, lst)]\n    return sum(x -> x % 2 == 1, evens) + sum(x -> x % 2 !=\
    \ 1, odds)\nend\n</cell>\n<code language=julia-1.5>\n@assert solution([5, 8, 7,\
    \ 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n@assert solution([30, 13,\
    \ 24, 321]) == 0\n</cell>\n<text>\nProblem 7\nWrite a function that returns the\
    \ number of times the number '5' appears in the list [5, 6, 7, 8, 9].\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbjxj5mon.jl:14\nin expression starting at\
    \ /tmp/tmpbjxj5mon.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in lst\n        if i%2 == 1\n            sum += i\n  \
    \      end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert solution([5, 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n\
    @assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\nProblem 7: Write a\
    \ function that returns the product of all of the odd elements in a given list.\n\
    using Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8,\
    \ 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
    \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2,\
    \ 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3,\
    \ 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp42w69n2m.jl:18\nin expression starting at\
    \ /tmp/tmp42w69n2m.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    evens = filter(x -> x % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0,\
    \ lst)\n    sum(filter(x -> x % 2 == 1, odds))\nend\n</cell>\n<text>\nProblem\
    \ 7\nWrite a function that returns the number of times a given value appears in\
    \ a given list.\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5,\
    \ 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
    \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2,\
    \ 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3,\
    \ 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8i9j_smj.jl:14\nin expression starting at\
    \ /tmp/tmp8i9j_smj.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    evens = lst[findall(x -> x % 2 == 1, lst)]\n    odds = lst[findall(x -> x\
    \ % 2 != 1, lst)]\n    return sum(filter(x -> x % 2 == 1, odds)) + sum(filter(x\
    \ -> x % 2 != 1, evens))\nend\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ solution([5, 8, 7, 1])\n</cell>\n<code language=julia-1.5>\n@code_warntype solution([3,\
    \ 3, 3, 3, 3])\n</cell>\n<code language=julia-1.5>\n@code_warntype solution([30,\
    \ 13, 24, 321])\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector\
    \ of integers and returns the number of elements that are less than or equal to\
    \ each of the elements in the vector.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3, 3,\
    \ 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4wt_023_.jl:14\nin expression starting at\
    \ /tmp/tmp4wt_023_.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    evens = filter(x -> x % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0,\
    \ lst)\n    sum(filter(x -> x % 2 == 1, odds))\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert solution([5, 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n\
    @assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\nPart II: Functional\
    \ Programming\nFunctional programming is where you write programs that manipulate\
    \ collections of data without explicitly looping over them. Julia makes this easy\
    \ by providing you with a high-level interface that allows you to express computations\
    \ in terms of higher-order functions.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3, 3,\
    \ 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3k959ruv.jl:14\nin expression starting at\
    \ /tmp/tmp3k959ruv.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    evens = filter(x -> x % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0,\
    \ lst)\n    return sum(filter(x -> x % 2 == 1, odds)) + sum(filter(x -> x % 2\
    \ == 0, evens))\nend\n</cell>\n<code language=julia-1.5>\n@assert solution([5,\
    \ 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n@assert solution([30,\
    \ 13, 24, 321]) == 0\n</cell>\n<text>\nPart 3: Recursion\nA recursive function\
    \ can be defined recursively. A recursive function calls itself. A recursive function\
    \ can have one or more base cases. A base case is a case that does not require\
    \ recursion.\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5,\
    \ 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
    \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2,\
    \ 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3,\
    \ 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp18umht4w.jl:14\nin expression starting at\
    \ /tmp/tmp18umht4w.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in lst\n        if i%2 == 1\n            sum += i\n  \
    \      end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert solution([5, 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n\
    @assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\nProblem 7: Sum even\
    \ numbers in a vector\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\
    \t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) ==\
    \ 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) ==\
    \ 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32])\
    \ == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn19w6bns.jl:18\nin expression starting at\
    \ /tmp/tmpn19w6bns.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    evens = filter(x -> x % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0,\
    \ lst)\n    \n    return sum(filter(x -> x % 2 == 1, odds))\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert solution([5, 8, 7, 1]) == 12\n@assert solution([3,\
    \ 3, 3, 3, 3]) == 9\n@assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\n\
    Problem 7\nWrite a function that returns a list of all numbers from 1 to n that\
    \ are divisible by k.\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\
    \t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) ==\
    \ 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) ==\
    \ 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32])\
    \ == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfcvxykeb.jl:15\nin expression starting at\
    \ /tmp/tmpfcvxykeb.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    evens = filter(x -> x % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0,\
    \ lst)\n    \n    return sum(x -> x % 2 == 0, odds) + sum(x -> x % 2 != 0, evens)\n\
    end\n</cell>\n<code language=julia-1.5>\n@time solution([5, 8, 7, 1])\n</cell>\n\
    <code language=julia-1.5>\n@time solution([3, 3, 3, 3, 3])\n</cell>\n<code language=julia-1.5>\n\
    @time solution([30, 13, 24, 321])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a list of integers and returns the sum of the even elements that\
    \ are in odd positions.\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\
    \t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) ==\
    \ 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) ==\
    \ 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32])\
    \ == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6vqb76ba.jl:15\nin expression starting at\
    \ /tmp/tmp6vqb76ba.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    evens = filter(x -> x % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0,\
    \ lst)\n    \n    return sum(x -> x in odds, evens)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert solution([5, 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n\
    @assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that takes a vector of strings and returns a vector of strings where\
    \ each string is the concatenation of all the strings in the original vector,\
    \ except the string \"and\" which concatenates all the strings in the original\
    \ vector except the string \"and\" again. For example, [\"hello\", \"and\", \"\
    goodbye\"] would become [\"hellogoodbye\"].\nusing Test\n\n@testset begin\n\n\
    candidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3,\
    \ 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbgofo3us.jl:15\nin expression starting at\
    \ /tmp/tmpbgofo3us.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    evens = filter(x -> x % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0,\
    \ lst)\n    return sum(filter(x -> x % 2 == 1, odds)) + sum(filter(x -> x % 2\
    \ == 0, evens))\nend\n</cell>\n<code language=julia-1.5>\n@time solution([5, 8,\
    \ 7, 1]);\n@time solution([3, 3, 3, 3, 3]);\n@time solution([30, 13, 24, 321]);\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector of integers\
    \ and returns the sum of the squares of the odd elements that are in even positions.\n\
    using Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8,\
    \ 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
    \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2,\
    \ 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3,\
    \ 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp251eubkw.jl:14\nin expression starting at\
    \ /tmp/tmp251eubkw.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for x in lst\n        if x % 2 == 1\n            sum += x\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert solution([5, 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n\
    @assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\nProblem 8\nWrite a\
    \ function that returns a list of all numbers from 1 to n that are divisible by\
    \ 3.\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5,\
    \ 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
    \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2,\
    \ 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3,\
    \ 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm3yuh3aq.jl:18\nin expression starting at\
    \ /tmp/tmpm3yuh3aq.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    even = filter(x -> x % 2 == 0, lst)\n    odd = filter(x -> x % 2 != 0, lst)\n\
    \    return sum(filter(x -> x % 2 == 1, odd))\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert solution([5, 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n\
    @assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that returns the product of all of the even elements in a given list.\n\
    using Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8,\
    \ 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
    \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2,\
    \ 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3,\
    \ 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwddk3w95.jl:14\nin expression starting at\
    \ /tmp/tmpwddk3w95.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in lst\n        if i%2 == 1\n            sum += i\n  \
    \      end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert solution([5, 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n\
    @assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\nProblem 8\nWrite a\
    \ function that returns the sum of the numbers in the list except the first and\
    \ last elements.\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5,\
    \ 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
    \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2,\
    \ 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3,\
    \ 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpayqff_16.jl:18\nin expression starting at\
    \ /tmp/tmpayqff_16.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    evens = filter(x -> x % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0,\
    \ lst)\n    return sum(filter(x -> x % 2 == 1, odds))\nend\n</cell>\n<code language=julia-1.5>\n\
    @time solution([5, 8, 7, 1])\n</cell>\n<code language=julia-1.5>\n@time solution([3,\
    \ 3, 3, 3, 3])\n</cell>\n<code language=julia-1.5>\n@time solution([30, 13, 24,\
    \ 321])\n</cell>\n<text>\nExercise: Write a function that takes a vector of integers\
    \ and returns the number of unique elements in the vector. \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\
    \t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321])\
    \ == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\
    \t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) ==\
    \ 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2mnmr2bv.jl:14\nin expression starting at\
    \ /tmp/tmp2mnmr2bv.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    evens = filter(x -> x % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0,\
    \ lst)\n    return sum(odds[2:end-1]) + sum(evens[2:end-1])\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@time solution([5, 8, 7, 1])\n</cell>\n<code language=julia-1.5>\n\
    @time solution([3, 3, 3, 3, 3])\n</cell>\n<code language=julia-1.5>\n@time solution([30,\
    \ 13, 24, 321])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ of integers and returns the sum of the squares of the even elements that are\
    \ in odd positions.\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\t\
    @test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\
    \t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t\
    @test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\
    \t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpev0kzku3.jl:14\nin expression starting at\
    \ /tmp/tmpev0kzku3.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    even = filter(x -> x % 2 == 0, lst)\n    odd = filter(x -> x % 2 != 0, lst)\n\
    \    return sum(filter(x -> x % 2 == 1, odd))\nend\n</cell>\n<code language=julia-1.4>\n\
    @time solution([5, 8, 7, 1])\n</cell>\n<code language=julia-1.4>\n@time solution([3,\
    \ 3, 3, 3, 3])\n</cell>\n<code language=julia-1.4>\n@time solution([30, 13, 24,\
    \ 321])\n</cell>\n<text>\nExercise 3\nWrite a function that returns the number\
    \ of times a given value appears in a given list. For example, given [5, 8, 7,\
    \ 1, 3, 3], return 2 since 3 appears twice.\nusing Test\n\n@testset begin\n\n\
    candidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3,\
    \ 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsalamt39.jl:14\nin expression starting at\
    \ /tmp/tmpsalamt39.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    evens = lst[findall(x -> x % 2 == 0, lst)]\n    odd = lst[findall(x -> x\
    \ % 2 != 0, lst)]\n    return sum(odd.-evens)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time solution([5, 8, 7, 1])\n</cell>\n<code language=julia-1.5>\n@time solution([3,\
    \ 3, 3, 3, 3])\n</cell>\n<code language=julia-1.5>\n@time solution([30, 13, 24,\
    \ 321])\n</cell>\n<text>\nPart 2\nGiven a non-empty list of integers, return a\
    \ new list containing all the contiguous sublists of length 3 or greater that\
    \ add up to a specific target.\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\
    \t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) ==\
    \ 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) ==\
    \ 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32])\
    \ == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf3uozn94.jl:14\nin expression starting at\
    \ /tmp/tmpf3uozn94.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    \n    sum = 0\n    for i in lst\n        if i%2 == 1\n            sum +=\
    \ i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype solution([5, 8, 7, 1])\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ solution([3, 3, 3, 3, 3])\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ solution([30, 13, 24, 321])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the sum of the even elements in a given list.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3,\
    \ 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpihfzxthb.jl:19\nin expression starting at\
    \ /tmp/tmpihfzxthb.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    evens = lst[findall(x -> x % 2 == 0, lst)]\n    odds = lst[findall(x -> x\
    \ % 2 != 0, lst)]\n    sum(filter(x -> x % 2 == 1, odds))\nend\n</cell>\n<text>\n\
    Problem 7\nWrite a function that returns the number of times a given element appears\
    \ in a given list.\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\t\
    @test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\
    \t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t\
    @test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\
    \t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzuclzh8q.jl:14\nin expression starting at\
    \ /tmp/tmpzuclzh8q.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    evens = filter(x -> x % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0,\
    \ lst)\n    return sum(filter(x -> x % 2 == 1, odds))\nend\n</cell>\n<text>\n\
    Solution 2\nThe second solution is much more concise and efficient.\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp41ja7l32.jl:14\nin expression starting at\
    \ /tmp/tmp41ja7l32.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    evens = lst[findall(x -> x % 2 == 0, lst)]\n    odds = lst[findall(x -> x\
    \ % 2 != 0, lst)]\n    return sum(x -> x % 2 == 0, evens) + sum(x -> x % 2 !=\
    \ 0, odds)\nend\n</cell>\n<code language=julia-1.5>\n@code_warntype solution([5,\
    \ 8, 7, 1])\n</cell>\n<code language=julia-1.5>\n@code_warntype solution([3, 3,\
    \ 3, 3, 3])\n</cell>\n<code language=julia-1.5>\n@code_warntype solution([30,\
    \ 13, 24, 321])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ product of all the even elements in a given list.\nusing Test\n\n@testset begin\n\
    \ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3,\
    \ 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6un7p_qb.jl:14\nin expression starting at\
    \ /tmp/tmp6un7p_qb.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for x in lst\n        if x % 2 == 1\n            sum += x\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert solution([5, 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n\
    @assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that returns the number of times a given value appears in a given list.\n\
    using Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8,\
    \ 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
    \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2,\
    \ 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3,\
    \ 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8if4afge.jl:18\nin expression starting at\
    \ /tmp/tmp8if4afge.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    evens = lst[findall(x -> x % 2 == 0, lst)]\n    odd = sum(lst[findall(x ->\
    \ x % 2 != 0, lst)])\n    return odd + sum(evens)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time solution([5, 8, 7, 1])\n</cell>\n<code language=julia-1.5>\n@time solution([3,\
    \ 3, 3, 3, 3])\n</cell>\n<code language=julia-1.5>\n@time solution([30, 13, 24,\
    \ 321])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the sum of\
    \ the squares of the numbers in a given list.\nusing Test\n\n@testset begin\n\n\
    candidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3,\
    \ 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzwyb7q92.jl:14\nin expression starting at\
    \ /tmp/tmpzwyb7q92.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    evens = filter(x -> x % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0,\
    \ lst)\n    sum(filter(x -> x % 2 == 1, odds))\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a list of numbers and returns the number of even\
    \ and odd numbers in the list.\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\
    \t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) ==\
    \ 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) ==\
    \ 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32])\
    \ == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppswt_chn.jl:14\nin expression starting at\
    \ /tmp/tmppswt_chn.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    even = lst[findall(x -> x % 2 == 0, lst)]\n    odd = lst[findall(x -> x %\
    \ 2 != 0, lst)]\n    return sum(filter(x -> x % 2 == 1, odd))\nend\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype solution([5, 8, 7, 1])\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype solution([3, 3, 3, 3, 3])\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype solution([30, 13, 24, 321])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the number of elements in a list that\
    \ satisfy a given condition. For example, suppose that you are given a list of\
    \ numbers and you want to count the number of positive integers in that list.\
    \ Write a function that takes in a list as an argument and returns the number\
    \ of positive integers in that list.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3, 3,\
    \ 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnf301qek.jl:14\nin expression starting at\
    \ /tmp/tmpnf301qek.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for x in lst\n        if x % 2 == 1\n            sum += x\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype solution([5, 8, 7, 1])\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ solution([3, 3, 3, 3, 3])\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ solution([30, 13, 24, 321])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the product of all even numbers in a given list.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3,\
    \ 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8ftdorn1.jl:18\nin expression starting at\
    \ /tmp/tmp8ftdorn1.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in lst\n        if i%2 == 1\n            sum += i\n  \
    \      end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3, 3,\
    \ 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpynt5d_ef.jl:23\n  Expression: candidate([5,\
    \ 8, 7, 1]) == 12\n   Evaluated: 13 == 12\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpynt5d_ef.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpynt5d_ef.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpynt5d_ef.jl:24\n  Expression: candidate([3, 3, 3, 3, 3]) ==\
    \ 9\n   Evaluated: 15 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpynt5d_ef.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpynt5d_ef.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpynt5d_ef.jl:25\n  Expression: candidate([30, 13, 24, 321])\
    \ == 0\n   Evaluated: 334 == 0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpynt5d_ef.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpynt5d_ef.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpynt5d_ef.jl:26\n  Expression: candidate([5, 9]) == 5\n   Evaluated:\
    \ 14 == 5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpynt5d_ef.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpynt5d_ef.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpynt5d_ef.jl:28\n  Expression: candidate([30, 13, 23, 32])\
    \ == 23\n   Evaluated: 36 == 23\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inli"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpynt5d_ef.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    even = filter(x -> x % 2 == 0, lst)\n    odd = filter(x -> x % 2 != 0, lst)\n\
    \    return sum(filter(x -> x % 2 == 1, odd))\nend\n</cell>\n<code language=julia-1.5>\n\
    @time solution([5, 8, 7, 1])\n</cell>\n<code language=julia-1.5>\n@time solution([3,\
    \ 3, 3, 3, 3])\n</cell>\n<code language=julia-1.5>\n@time solution([30, 13, 24,\
    \ 321])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector and\
    \ returns the number of elements that are less than or equal to each element in\
    \ the vector. For example, solution([5, 8, 7, 1]) should return 3.\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplxmhjlad.jl:14\nin expression starting at\
    \ /tmp/tmplxmhjlad.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in lst\n        if i%2 == 1\n            sum += i\n  \
    \      end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.3>\n\
    @code_warntype solution([5, 8, 7, 1])\n</cell>\n<code language=julia-1.3>\n@code_warntype\
    \ solution([3, 3, 3, 3, 3])\n</cell>\n<code language=julia-1.3>\n@code_warntype\
    \ solution([30, 13, 24, 321])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a vector of integers and returns the sum of the squares of the even elements\
    \ in the vector.\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5,\
    \ 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
    \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2,\
    \ 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3,\
    \ 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_fw7t405.jl:18\nin expression starting at\
    \ /tmp/tmp_fw7t405.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    \n    sum = 0\n    for x in lst\n        if x % 2 == 1\n            sum +=\
    \ x\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert solution([5, 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n\
    @assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\nProblem 7\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv1uvfft8.jl:19\nin expression starting at\
    \ /tmp/tmpv1uvfft8.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    \n    sum = 0\n    for i in lst\n        if i%2 == 1\n            sum +=\
    \ i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert solution([5, 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n\
    @assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that takes a list of integers and returns the product of all of the\
    \ even elements that are in odd positions.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3, 3,\
    \ 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu8qa6461.jl:19\nin expression starting at\
    \ /tmp/tmpu8qa6461.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    evens = filter(x -> x % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0,\
    \ lst)\n    \n    sum(evens) + sum(odds)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert solution([5, 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n\
    @assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\nPart II: Recursion\n\
    Recursion is a powerful tool that can help us solve problems more efficiently\
    \ than iterative approaches. In this section, we will explore the basics of recursion.\n\
    using Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8,\
    \ 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
    \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2,\
    \ 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3,\
    \ 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2ukcmudc.jl:15\nin expression starting at\
    \ /tmp/tmp2ukcmudc.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    evens = filter(x -> x % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0,\
    \ lst)\n    \n    sum(evens) + sum(odds)\nend\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a list of numbers and returns the number of elements in\
    \ the list that are less than or equal to 5\nusing Test\n\n@testset begin\n\n\
    candidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3,\
    \ 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa3dk_xnw.jl:15\nin expression starting at\
    \ /tmp/tmpa3dk_xnw.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    \n    sum = 0\n    for x in lst\n        if x % 2 == 1\n            sum +=\
    \ x\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert solution([5, 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n\
    @assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\nPart II: Recursion\n\
    Now that we have seen the basics of recursion, let's see how we can use it to\
    \ solve problems more efficiently.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3, 3,\
    \ 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprclixtzw.jl:19\nin expression starting at\
    \ /tmp/tmprclixtzw.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    evens = filter(x -> x % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0,\
    \ lst)\n    return sum(filter(x -> x % 2 == 1, odds))\nend\n</cell>\n<code language=julia-1.5>\n\
    @time solution([5, 8, 7, 1])\n</cell>\n<code language=julia-1.5>\n@time solution([3,\
    \ 3, 3, 3, 3])\n</cell>\n<code language=julia-1.5>\n@time solution([30, 13, 24,\
    \ 321])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a list of numbers\
    \ and returns the number of positive and negative numbers in the list. \nusing\
    \ Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7,\
    \ 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
    \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2,\
    \ 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3,\
    \ 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphertbgib.jl:14\nin expression starting at\
    \ /tmp/tmphertbgib.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    evens = filter(x -> x % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0,\
    \ lst)\n    \n    sum(filter(x -> x % 2 == 1, odds))\nend\n</cell>\n<text>\nExercise\
    \ 4\nWrite a function that takes a list of numbers and returns the product of\
    \ the even numbers in the list.\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\
    \t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) ==\
    \ 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) ==\
    \ 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32])\
    \ == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa_imrmh2.jl:15\nin expression starting at\
    \ /tmp/tmpa_imrmh2.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    evens = filter(x -> x % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0,\
    \ lst)\n    return sum(filter(x -> x % 2 == 1, odds))\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert solution([5, 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n\
    @assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\nPart III. Sum square\
    \ difference\nGiven a non-empty list of integers, return a list of squared differences\
    \ between the consecutive elements.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3, 3,\
    \ 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpagawn7r1.jl:14\nin expression starting at\
    \ /tmp/tmpagawn7r1.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in lst\n        if i%2 == 1\n            sum += i\n  \
    \      end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    @time solution(lst)\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a vector and returns the number of unique elements in the vector. \n    \n \
    \   \n    Examples\n    solution([5, 8, 7, 1]) ==> 3\n    solution([3, 3, 3, 3,\
    \ 3]) ==> 4\n    solution([30, 13, 24, 321]) ==> 4\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\
    \t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321])\
    \ == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\
    \t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) ==\
    \ 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2206k9fv.jl:18\nin expression starting at\
    \ /tmp/tmp2206k9fv.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    even = filter(x -> x % 2 == 0, lst)\n    odd = filter(x -> x % 2 != 0, lst)\n\
    \    \n    sum(filter(x -> x in odd, even))\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert solution([5, 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n\
    @assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\nPart 2\nWrite a function\
    \ that returns the product of the even elements in a list. \nusing Test\n\n@testset\
    \ begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3,\
    \ 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp461grcot.jl:15\nin expression starting at\
    \ /tmp/tmp461grcot.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    evens = filter(x -> x % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0,\
    \ lst)\n    sum(filter(x -> x % 2 == 1, odds))\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert solution([5, 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n\
    @assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that returns a list of all integers between two given integers, inclusive.\n\
    using Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8,\
    \ 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
    \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2,\
    \ 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3,\
    \ 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4fuslndd.jl:14\nin expression starting at\
    \ /tmp/tmp4fuslndd.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    evens = filter(x -> x % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0,\
    \ lst)\n    \n    sum(evens) + sum(odds)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert solution([5, 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n\
    @assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\nPart II: Recursion\n\
    A recursive function is a function that calls itself. This can be done in Julia\
    \ by defining a function with the keyword recursive and calling it with the function\
    \ name as its argument. For example:\nusing Test\n\n@testset begin\n\ncandidate\
    \ = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3, 3,\
    \ 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgp8lu4tb.jl:15\nin expression starting at\
    \ /tmp/tmpgp8lu4tb.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    evens = lst[findall(x -> x % 2 == 0, lst)]\n    odds = lst[findall(x -> x\
    \ % 2 != 0, lst)]\n    return sum(x -> x % 2 == 0, evens) + sum(x -> x % 2 !=\
    \ 0, odds)\nend\n</cell>\n<code language=julia-1.5>\n@time solution(lst);\n</cell>\n\
    <text>\nPart 2\nWrite a function that takes a vector of integers and returns the\
    \ number of elements that are less than the average of the numbers in the vector.\n\
    using Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8,\
    \ 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
    \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2,\
    \ 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3,\
    \ 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcwfnso56.jl:14\nin expression starting at\
    \ /tmp/tmpcwfnso56.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    evens = filter(x -> x % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0,\
    \ lst)\n    return sum(filter(x -> x % 2 == 1, odds))\nend\n</cell>\n<code language=julia-1.5>\n\
    @time solution(lst);\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the product of the even elements in a given list.\nusing Test\n\n@testset begin\n\
    \ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3,\
    \ 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdnmhc1n0.jl:14\nin expression starting at\
    \ /tmp/tmpdnmhc1n0.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for x in lst\n        if x % 2 == 1\n            sum += x\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.3>\n\
    @code_warntype solution([5, 8, 7, 1])\n</cell>\n<code language=julia-1.3>\n@code_warntype\
    \ solution([3, 3, 3, 3, 3])\n</cell>\n<code language=julia-1.3>\n@code_warntype\
    \ solution([30, 13, 24, 321])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the product of all even elements in a given list.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3,\
    \ 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2ftjycrd.jl:18\nin expression starting at\
    \ /tmp/tmp2ftjycrd.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    \n    sum = 0\n    for x in lst\n        if x % 2 == 1\n            sum +=\
    \ x\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype solution([5, 8, 7, 1])\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ solution([3, 3, 3, 3, 3])\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ solution([30, 13, 24, 321])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes in a list of integers and returns the sum of all of the odd elements that\
    \ are in even positions.\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\
    \t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) ==\
    \ 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) ==\
    \ 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32])\
    \ == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppm7afl18.jl:19\nin expression starting at\
    \ /tmp/tmppm7afl18.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for x in lst\n        if x % 2 == 1\n            sum += x\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert solution([5, 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n\
    @assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\nProblem 7\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp14679z2j.jl:18\nin expression starting at\
    \ /tmp/tmp14679z2j.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    evens = lst[findall(x -> x % 2 == 0, lst)]\n    odds = lst[findall(x -> x\
    \ % 2 != 0, lst)]\n    return sum(filter(x -> x % 2 == 1, odds)) + sum(filter(x\
    \ -> x % 2 != 1, evens))\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a vector of integers and returns a vector of integers containing the first\
    \ n prime numbers. \nThe first n prime numbers are 2, 3, 5, 7, 11, and 13.\nThe\
    \ function should return [2, 3, 5, 7, 11, 13]. \nThe function should return nothing\
    \ if the vector is empty.\nThe function should return nothing if the vector has\
    \ less than n elements.\nThe function should return nothing if the vector has\
    \ more than n elements.\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\
    \t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) ==\
    \ 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) ==\
    \ 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32])\
    \ == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgorqskqw.jl:14\nin expression starting at\
    \ /tmp/tmpgorqskqw.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for x in lst\n        if x % 2 == 1\n            sum += x\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    @time solution([5, 8, 7, 1])\n</cell>\n<code language=julia-1.5>\n@time solution([3,\
    \ 3, 3, 3, 3])\n</cell>\n<code language=julia-1.5>\n@time solution([30, 13, 24,\
    \ 321])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector of\
    \ integers and returns the number of elements that are odd.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3,\
    \ 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptamawwrz.jl:18\nin expression starting at\
    \ /tmp/tmptamawwrz.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    evens = lst[findall(x -> x % 2 == 0, lst)]\n    odd = sum(lst[findall(x ->\
    \ x % 2 != 0, lst)])\n    return odd + sum(evens)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time solution([5, 8, 7, 1])\n</cell>\n<code language=julia-1.5>\n@time solution([3,\
    \ 3, 3, 3, 3])\n</cell>\n<code language=julia-1.5>\n@time solution([30, 13, 24,\
    \ 321])\n</cell>\n<text>\nExercise 3\nWrite a function that returns the product\
    \ of the even elements of a given list of integers.\nusing Test\n\n@testset begin\n\
    \ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3,\
    \ 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1xscefbw.jl:14\nin expression starting at\
    \ /tmp/tmp1xscefbw.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for x in lst\n        if x % 2 == 1\n            sum += x\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    @time solution(vec(1:10000));\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the product of the even elements in a given list.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3,\
    \ 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2dlpg8dh.jl:18\nin expression starting at\
    \ /tmp/tmp2dlpg8dh.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    evens = lst[findall(x -> x % 2 == 0, lst)]\n    odds = lst[findall(x -> x\
    \ % 2 != 0, lst)]\n    \n    return sum(filter(x -> x % 2 == 1, odds)) + sum(filter(x\
    \ -> x % 2 != 1, evens))\nend\n</cell>\n<code language=julia-1.5>\n@assert solution([5,\
    \ 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n@assert solution([30,\
    \ 13, 24, 321]) == 0\n</cell>\n<text>\nPart III. Sum all the even numbers in a\
    \ list\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5,\
    \ 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
    \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2,\
    \ 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3,\
    \ 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfcqhl4r8.jl:15\nin expression starting at\
    \ /tmp/tmpfcqhl4r8.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    \n    sum = 0\n    for i in lst\n        if i%2 == 1\n            sum +=\
    \ i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert solution([5, 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n\
    @assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\nProblem 7\nWrite a\
    \ function that returns the number of times the value 1 appears in the list [1,\
    \ 2, 3, 1].\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5,\
    \ 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
    \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2,\
    \ 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3,\
    \ 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn1iquhob.jl:19\nin expression starting at\
    \ /tmp/tmpn1iquhob.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    \n    evens = filter(x -> x % 2 == 0, lst)\n    odds = filter(x -> x % 2\
    \ != 0, lst)\n    \n    return sum(filter(x -> x % 2 == 1, odds))\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert solution([5, 8, 7, 1]) == 12\n@assert solution([3,\
    \ 3, 3, 3, 3]) == 9\n@assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\n\
    Part III. Filtering Functions\nNow that we have seen how filter() works, let's\
    \ see how we can use it to solve a problem that involves filtering.\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpiphuv3lb.jl:16\nin expression starting at\
    \ /tmp/tmpiphuv3lb.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    \n    even = filter(x -> x % 2 == 0, lst)\n    odd = filter(x -> x % 2 !=\
    \ 0, lst)\n    \n    sum(even) + sum(odd)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert solution([5, 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n\
    @assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\nPart II: Recursion\n\
    A recursive function can be defined recursively. A recursive function calls itself\
    \ repeatedly until it reaches a base case. Base cases are the simplest cases,\
    \ such as when the function calls itself with only one argument, or when the function\
    \ calls itself with a single argument and no other arguments.\nusing Test\n\n\
    @testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\
    \t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321])\
    \ == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\
    \t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) ==\
    \ 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp90dr4xo9.jl:16\nin expression starting at\
    \ /tmp/tmp90dr4xo9.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    evens = filter(x -> x % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0,\
    \ lst)\n    sum(filter(x -> x in odds, evens))\nend\n</cell>\n<text>\nProblem\
    \ 7\nWrite a function that returns the product of all the numbers in a given list.\n\
    using Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8,\
    \ 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
    \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2,\
    \ 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3,\
    \ 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3bwymjwn.jl:14\nin expression starting at\
    \ /tmp/tmp3bwymjwn.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    evens = lst[findall(x -> x % 2 == 0, lst)]\n    odds = lst[findall(x -> x\
    \ % 2 != 0, lst)]\n    \n    sum(evens) + sum(odds)\nend\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype solution([5, 8, 7, 1])\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ solution([3, 3, 3, 3, 3])\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ solution([30, 13, 24, 321])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a vector of integers and returns the number of elements that are divisible\
    \ by 3 in the vector.\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\
    \t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) ==\
    \ 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) ==\
    \ 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32])\
    \ == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpew9un48p.jl:15\nin expression starting at\
    \ /tmp/tmpew9un48p.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    evens = lst[findall(x -> x % 2 == 0, lst)]\n    odd = lst[findall(x -> x\
    \ % 2 != 0, lst)]\n    return sum(filter(x -> x % 2 == 1, odd))\nend\n</cell>\n\
    <code language=julia-1.0>\n@time solution([5, 8, 7, 1])\n</cell>\n<code language=julia-1.0>\n\
    @time solution([3, 3, 3, 3, 3])\n</cell>\n<code language=julia-1.0>\n@time solution([30,\
    \ 13, 24, 321])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ product of all the even elements in a given list.\nusing Test\n\n@testset begin\n\
    \ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3,\
    \ 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmputmpp7f_.jl:14\nin expression starting at\
    \ /tmp/tmputmpp7f_.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in lst\n        if i%2 == 1\n            sum += i\n  \
    \      end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype solution([5, 8, 7, 1])\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ solution([3, 3, 3, 3, 3])\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ solution([30, 13, 24, 321])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the product of all the even elements in a given list.\nusing Test\n\n\
    @testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\
    \t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321])\
    \ == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\
    \t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) ==\
    \ 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkzfjg4vl.jl:18\nin expression starting at\
    \ /tmp/tmpkzfjg4vl.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    evens = filter(x -> x % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0,\
    \ lst)\n    \n    return sum(filter(x -> x % 2 == 1, odds))\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert solution([5, 8, 7, 1]) == 12\n@assert solution([3,\
    \ 3, 3, 3, 3]) == 9\n@assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\n\
    Problem 7\nWrite a function that returns the number of times a given element appears\
    \ in a given list.\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\t\
    @test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\
    \t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t\
    @test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\
    \t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3kaalcjp.jl:15\nin expression starting at\
    \ /tmp/tmp3kaalcjp.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in lst\n        if i%2 == 1\n            sum += i\n  \
    \      end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    @time solution([5, 8, 7, 1])\n</cell>\n<code language=julia-1.5>\n@time solution([3,\
    \ 3, 3, 3, 3])\n</cell>\n<code language=julia-1.5>\n@time solution([30, 13, 24,\
    \ 321])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the product\
    \ of all of the odd elements that are in even positions.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3,\
    \ 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwrr848ef.jl:18\nin expression starting at\
    \ /tmp/tmpwrr848ef.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in lst\n        if i%2 == 1\n            sum += i\n  \
    \      end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype solution([5, 8, 7, 1])\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ solution([3, 3, 3, 3, 3])\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ solution([30, 13, 24, 321])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a vector of integers and returns the number of elements that are less\
    \ than the average of the vector.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3, 3,\
    \ 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpox0z83nd.jl:18\nin expression starting at\
    \ /tmp/tmpox0z83nd.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    evens = filter(x -> x % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0,\
    \ lst)\n    \n    return sum(filter(x -> x % 2 == 1, odds))\nend\n</cell>\n<code\
    \ language=julia-1.4>\n@time solution([5, 8, 7, 1])\n</cell>\n<code language=julia-1.4>\n\
    @time solution([3, 3, 3, 3, 3])\n</cell>\n<code language=julia-1.4>\n@time solution([30,\
    \ 13, 24, 321])\n</cell>\n<text>\nExercise 2\nWrite a function that takes in a\
    \ list of integers and returns the number of even and odd numbers in the list.\n\
    using Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8,\
    \ 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
    \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2,\
    \ 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3,\
    \ 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppv1_6qoi.jl:15\nin expression starting at\
    \ /tmp/tmppv1_6qoi.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    evens = filter(x -> x % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0,\
    \ lst)\n    sum(filter(x -> x % 2 == 1, odds))\nend\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype solution([5, 8, 7, 1])\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ solution([3, 3, 3, 3, 3])\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ solution([30, 13, 24, 321])\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the number of elements in a list that satisfy a condition. For example,\
    \ if the list is [5, 8, 7, 1, 3, 9], return 3.\nusing Test\n\n@testset begin\n\
    \ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3,\
    \ 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1_zvfj3v.jl:14\nin expression starting at\
    \ /tmp/tmp1_zvfj3v.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    \n    sum = 0\n    for i in lst\n        if i%2 == 1\n            sum +=\
    \ i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype solution([5, 8, 7, 1])\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ solution([3, 3, 3, 3, 3])\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ solution([30, 13, 24, 321])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector. \n    \n    For example, solution([5, 8, 7, 1]) should return\
    \ 5 + 8 + 7 + 1 = 26. \n    \n    Use @code_warntype to check your function before\
    \ submission. \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nusing\
    \ Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7,\
    \ 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
    \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2,\
    \ 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3,\
    \ 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgbqnkcc2.jl:19\nin expression starting at\
    \ /tmp/tmpgbqnkcc2.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    even = filter(x -> x % 2 == 0, lst)\n    odd = filter(x -> x % 2 != 0, lst)\n\
    \    sum(filter(x -> x % 2 == 1, odd))\nend\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a vector and returns the number of elements that are less\
    \ than or equal to 0.\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\
    \t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) ==\
    \ 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) ==\
    \ 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32])\
    \ == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0fipjuiu.jl:14\nin expression starting at\
    \ /tmp/tmp0fipjuiu.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    evens = filter(x -> x % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0,\
    \ lst)\n    sum(filter(x -> x % 2 == 1, odds))\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert solution([5, 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n\
    @assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\nProblem 7\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsedrizou.jl:14\nin expression starting at\
    \ /tmp/tmpsedrizou.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    \n    sum = 0\n    for x in lst\n        if x%2 == 1\n            sum +=\
    \ x\n        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3,\
    \ 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpkt7yx5qz.jl:24\n  Expression: candidate([5,\
    \ 8, 7, 1]) == 12\n   Evaluated: 13 == 12\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkt7yx5qz.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkt7yx5qz.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpkt7yx5qz.jl:25\n  Expression: candidate([3, 3, 3, 3, 3]) ==\
    \ 9\n   Evaluated: 15 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkt7yx5qz.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkt7yx5qz.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpkt7yx5qz.jl:26\n  Expression: candidate([30, 13, 24, 321])\
    \ == 0\n   Evaluated: 334 == 0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkt7yx5qz.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkt7yx5qz.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpkt7yx5qz.jl:27\n  Expression: candidate([5, 9]) == 5\n   Evaluated:\
    \ 14 == 5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkt7yx5qz.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkt7yx5qz.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpkt7yx5qz.jl:29\n  Expression: candidate([30, 13, 23, 32])\
    \ == 23\n   Evaluated: 36 == 23\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inli"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkt7yx5qz.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    evens = filter(x -> x % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0,\
    \ lst)\n    return sum(x -> x % 2 == 1, odds) + sum(x -> x % 2 != 1, evens)\n\
    end\n</cell>\n<code language=julia-1.5>\n@time solution([5, 8, 7, 1])\n@time solution([3,\
    \ 3, 3, 3, 3])\n@time solution([30, 13, 24, 321])\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the first element of a list that satisfies a given\
    \ condition. For example, given [5, 8, 7, 1], the function should return 8. \n\
    Write a function that returns the first element of a list that satisfies a given\
    \ condition. For example, given [5, 8, 7, 1], the function should return 8. \n\
    Write a function that returns the first element of a list that satisfies a given\
    \ condition. For example, given [5, 8, 7, 1], the function should return 8. \n\
    Write a function that returns the first element of a list that satisfies a given\
    \ condition. For example, given [5, 8, 7, 1], the function should return 8. \n\
    Write a function that returns the first element of a list that satisfies a given\
    \ condition. For example, given [5, 8, 7, 1], the function should return 8. \n\
    Write a function that returns the first element of a list that satisfies a given\
    \ condition. For example, given [5, 8, 7, 1], the function should return 8. \n\
    Write a function that returns the first element of a list that satisfies a given\
    \ condition. For example, given [5, 8, 7, 1], the function should return 8. \n\
    Write a function that returns the first element of a list that satisfies a given\
    \ condition. For example, given [5, 8, 7, 1], the function should return 8. \n\
    Write a function that returns the first element of a list that satisfies a given\
    \ condition. For example, given [5, 8, 7, 1], the function should return 8. \n\
    Write a function that returns the first element of a list that satisfies a given\
    \ condition. For example, given [5, 8, 7, 1], the function should return 8. \n\
    Write a function that returns the first element of a list that satisfies a given\
    \ condition. For example, given [5, 8, 7, 1], the function should return 8. \n\
    Write a function that returns the first element of a list that satisfies a given\
    \ condition. For example, given [5, 8, 7, 1], the function should return 8. \n\
    Write a function that returns the first element of a list that satisfies a given\
    \ condition. For example, given [5, 8, 7, 1], the function should return 8. \n\
    Write a function that returns the first element of a list that satisfies a given\
    \ condition. For example, given [5, 8, 7, 1], the function should return 8. \n\
    Write a function that returns the first element of a list that \nusing Test\n\n\
    @testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\
    \t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321])\
    \ == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\
    \t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) ==\
    \ 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy51uqq1q.jl:14\nin expression starting at\
    \ /tmp/tmpy51uqq1q.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    evens = filter(x -> x % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0,\
    \ lst)\n    return sum(filter(x -> x % 2 == 1, odds))\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert solution([5, 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n\
    @assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\nProblem 7\nWrite a\
    \ function that returns a list of all numbers between 1 and a given number that\
    \ have no duplicates.\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\
    \t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) ==\
    \ 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) ==\
    \ 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32])\
    \ == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8h3gta_a.jl:14\nin expression starting at\
    \ /tmp/tmp8h3gta_a.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    evens = filter(x -> x % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0,\
    \ lst)\n    return sum(filter(x -> x % 2 == 1, odds))\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert solution([5, 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n\
    @assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\nPart II: Recursion\n\
    A recursive function is a function that calls itself. A recursive function can\
    \ have two types of recursive calls:\nusing Test\n\n@testset begin\n\ncandidate\
    \ = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3, 3,\
    \ 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcnfw4w1z.jl:14\nin expression starting at\
    \ /tmp/tmpcnfw4w1z.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    evens = filter(x -> x % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0,\
    \ lst)\n    \n    evens_sum = sum(evens)\n    odds_sum = sum(odds)\n    \n   \
    \ return evens_sum + odds_sum\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ solution([5, 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n@assert\
    \ solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\nProblem 7\nusing Test\n\n\
    @testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\
    \t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321])\
    \ == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\
    \t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) ==\
    \ 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe6lj62x2.jl:18\nin expression starting at\
    \ /tmp/tmpe6lj62x2.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    evens = filter(x -> x % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0,\
    \ lst)\n    return sum(filter(x -> x % 2 == 1, odds))\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert solution([5, 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n\
    @assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that returns the product of all of the odd elements in a given list.\n\
    using Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8,\
    \ 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
    \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2,\
    \ 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3,\
    \ 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnv424az1.jl:14\nin expression starting at\
    \ /tmp/tmpnv424az1.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    \n    sum = 0\n    for i in lst\n        if i%2 == 1\n            sum +=\
    \ i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype solution([5, 8, 7, 1])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the number of times each element appears in the list.\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_n4q9aso.jl:19\nin expression starting at\
    \ /tmp/tmp_n4q9aso.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    evens = filter(x -> x % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0,\
    \ lst)\n    \n    sum(filter(x -> x % 2 == 1, odds))\nend\n</cell>\n<code language=julia-1.5>\n\
    @time solution([5, 8, 7, 1])\n</cell>\n<code language=julia-1.5>\n@time solution([3,\
    \ 3, 3, 3, 3])\n</cell>\n<code language=julia-1.5>\n@time solution([30, 13, 24,\
    \ 321])\n</cell>\n<text>\nExercise: Write a function that takes a vector of numbers\
    \ and returns the sum of the squares of the even numbers in that vector. For example,\
    \ solution([5, 8, 7, 1]) should return 5 + 8 + 7 = 17.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3,\
    \ 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp38gif9j.jl:15\nin expression starting at\
    \ /tmp/tmpp38gif9j.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in lst\n        if i%2 == 1\n            sum += i\n  \
    \      end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert solution([5, 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n\
    @assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\nPart II: Recursion\n\
    A recursive function is a function that calls itself. This can be useful in many\
    \ situations. Here is an example of a recursive fibonacci function:\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2e6wdzb5.jl:18\nin expression starting at\
    \ /tmp/tmp2e6wdzb5.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    \n    sum = 0\n    for i in lst\n        if i%2 == 1\n            sum +=\
    \ i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype solution([5, 8, 7, 1])\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ solution([3, 3, 3, 3, 3])\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ solution([30, 13, 24, 321])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the product of all the even elements in a given list.\nusing Test\n\n\
    @testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\
    \t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321])\
    \ == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\
    \t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) ==\
    \ 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmvug9dnm.jl:19\nin expression starting at\
    \ /tmp/tmpmvug9dnm.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in lst\n        if i%2 == 1\n            sum += i\n  \
    \      end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert solution([5, 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n\
    @assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\nProblem 7: Find the\
    \ sum of all the odd numbers from 1 to 100\nThe sum of all the odd numbers from\
    \ 1 to 100 is 143. Find the sum of all the odd numbers from 1 to 100.\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgsvuovw1.jl:18\nin expression starting at\
    \ /tmp/tmpgsvuovw1.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    evens = filter(x -> x % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0,\
    \ lst)\n    \n    return sum(filter(x -> x % 2 == 1, odds)) + sum(filter(x ->\
    \ x % 2 == 0, evens))\nend\n</cell>\n<code language=julia-1.5>\n@time solution([5,\
    \ 8, 7, 1])\n</cell>\n<code language=julia-1.5>\n@time solution([3, 3, 3, 3, 3])\n\
    </cell>\n<code language=julia-1.5>\n@time solution([30, 13, 24, 321])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of times a given\
    \ value appears in a given list. For example, given [5, 8, 7, 1, 3, 3], return\
    \ 2 since 3 appears twice.\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\
    \t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) ==\
    \ 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) ==\
    \ 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32])\
    \ == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw94j3xzv.jl:15\nin expression starting at\
    \ /tmp/tmpw94j3xzv.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    evens = filter(x -> x % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0,\
    \ lst)\n    \n    return sum(filter(x -> x % 2 == 1, odds))\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@time solution([5, 8, 7, 1])\n</cell>\n<code language=julia-1.5>\n\
    @time solution([3, 3, 3, 3, 3])\n</cell>\n<code language=julia-1.5>\n@time solution([30,\
    \ 13, 24, 321])\n</cell>\n<text>\nExercise: Write a function that takes a vector\
    \ of integers and returns the sum of the odd elements that are in even positions.\n\
    using Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8,\
    \ 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
    \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2,\
    \ 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3,\
    \ 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplxkt9xs_.jl:15\nin expression starting at\
    \ /tmp/tmplxkt9xs_.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    evens = filter(x -> x % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0,\
    \ lst)\n    \n    sum(filter(x -> x in odds, evens))\nend\n</cell>\n<code language=julia-1.5>\n\
    @time solution([5, 8, 7, 1])\n</cell>\n<code language=julia-1.5>\n@time solution([3,\
    \ 3, 3, 3, 3])\n</cell>\n<code language=julia-1.5>\n@time solution([30, 13, 24,\
    \ 321])\n</cell>\n<text>\nPart 3: Finding all subsets of a set\nIn this section,\
    \ we will use Julia's powerful set library to find all subsets of a given set.\
    \ We'll start by defining a function that will generate all subsets of a given\
    \ set.\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5,\
    \ 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
    \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2,\
    \ 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3,\
    \ 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0yj5bqfk.jl:15\nin expression starting at\
    \ /tmp/tmp0yj5bqfk.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    evens = filter(x -> x % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0,\
    \ lst)\n    return sum(filter(x -> x % 2 == 1, odds)) + sum(filter(x -> x % 2\
    \ == 0, evens))\nend\n</cell>\n<code language=julia-1.5>\n@assert solution([5,\
    \ 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n@assert solution([30,\
    \ 13, 24, 321]) == 0\n</cell>\n<text>\nProblem 7\nWrite a function that returns\
    \ the number of times a given substring appears in a given string.\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc3ebzw_k.jl:14\nin expression starting at\
    \ /tmp/tmpc3ebzw_k.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    evens = filter(x -> x % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0,\
    \ lst)\n    sum(filter(x -> x % 2 == 1, odds))\nend\n</cell>\n<text>\nProblem\
    \ 7\nWrite a function that takes a list of integers and returns the product of\
    \ the even elements that are in odd positions.\nusing Test\n\n@testset begin\n\
    \ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3,\
    \ 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpttpnc8s6.jl:14\nin expression starting at\
    \ /tmp/tmpttpnc8s6.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    evens = lst[findall(x -> x % 2 == 0, lst)]\n    odd = sum(lst[findall(x ->\
    \ x % 2 != 0, lst)])\n    return odd + evens\nend\n</cell>\n<code language=julia-1.5>\n\
    @time solution(vec(1:100000));\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the number of times a given value appears in a given vector.\n\
    using Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8,\
    \ 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
    \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2,\
    \ 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3,\
    \ 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmekq4odk.jl:14\nin expression starting at\
    \ /tmp/tmpmekq4odk.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    evens = lst[findall(x -> x % 2 == 0, lst)]\n    odd = sum(lst[findall(x ->\
    \ x % 2 != 0, lst)])\n    return odd + sum(evens)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time solution(lst)\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a vector of integers and returns the sum of the squares of the even elements\
    \ in the vector.\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5,\
    \ 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
    \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2,\
    \ 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3,\
    \ 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvqn_1jmr.jl:14\nin expression starting at\
    \ /tmp/tmpvqn_1jmr.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    \n    sum = 0\n    for i in lst\n        if i%2 == 1\n            sum +=\
    \ i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype solution([5, 8, 7, 1])\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ solution([3, 3, 3, 3, 3])\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ solution([30, 13, 24, 321])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes in a vector of integers and returns the number of elements that are odd.\n\
    using Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8,\
    \ 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
    \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2,\
    \ 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3,\
    \ 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5heox0lv.jl:19\nin expression starting at\
    \ /tmp/tmp5heox0lv.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in lst\n        if i%2 == 1\n            sum += i\n  \
    \      end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert solution([5, 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n\
    @assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\nProblem 7\nWrite a\
    \ function that returns the product of all of the odd elements that are in even\
    \ positions.\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5,\
    \ 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
    \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2,\
    \ 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3,\
    \ 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptc9aon1v.jl:18\nin expression starting at\
    \ /tmp/tmptc9aon1v.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    even = filter(x -> x % 2 == 0, lst)\n    odd = filter(x -> x % 2 != 0, lst)\n\
    \    sum(filter(x -> x % 2 == 1, odd))\nend\n</cell>\n<text>\nExercise 4\nWrite\
    \ a function that takes a list as an argument and returns the number of elements\
    \ in the list that are less than or equal to 10.\nusing Test\n\n@testset begin\n\
    \ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3,\
    \ 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr8q6hfon.jl:14\nin expression starting at\
    \ /tmp/tmpr8q6hfon.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in lst\n        if i%2 == 1\n            sum += i\n  \
    \      end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3, 3,\
    \ 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3pxawu3r.jl:23\n  Expression: candidate([5,\
    \ 8, 7, 1]) == 12\n   Evaluated: 13 == 12\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3pxawu3r.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3pxawu3r.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp3pxawu3r.jl:24\n  Expression: candidate([3, 3, 3, 3, 3]) ==\
    \ 9\n   Evaluated: 15 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3pxawu3r.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3pxawu3r.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp3pxawu3r.jl:25\n  Expression: candidate([30, 13, 24, 321])\
    \ == 0\n   Evaluated: 334 == 0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3pxawu3r.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3pxawu3r.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp3pxawu3r.jl:26\n  Expression: candidate([5, 9]) == 5\n   Evaluated:\
    \ 14 == 5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3pxawu3r.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3pxawu3r.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp3pxawu3r.jl:28\n  Expression: candidate([30, 13, 23, 32])\
    \ == 23\n   Evaluated: 36 == 23\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inli"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3pxawu3r.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    evens = lst[findall(x -> x % 2 == 1, lst)]\n    odds = lst[findall(x -> x\
    \ % 2 != 1, lst)]\n    return sum(evens) + sum(odds)\nend\n</cell>\n<text>\nProblem\
    \ 7\nWrite a function that returns the number of times a given element appears\
    \ in a given list.\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\t\
    @test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\
    \t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t\
    @test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\
    \t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjpcogiu8.jl:14\nin expression starting at\
    \ /tmp/tmpjpcogiu8.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    evens = filter(x -> x % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0,\
    \ lst)\n    return sum(filter(x -> x % 2 == 1, odds))\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert solution([5, 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n\
    @assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that takes a list of integers and returns the number of elements in\
    \ the list that are less than the average of the list.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3,\
    \ 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkraybwwm.jl:14\nin expression starting at\
    \ /tmp/tmpkraybwwm.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    evens = filter(x -> x % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0,\
    \ lst)\n    return sum(filter(x -> x % 2 == 1, odds))\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert solution([5, 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n\
    @assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\nProblem 7\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyfsbfrdl.jl:14\nin expression starting at\
    \ /tmp/tmpyfsbfrdl.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    evens = filter(x -> x % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0,\
    \ lst)\n    \n    sum(filter(x -> x % 2 == 1, odds))\nend\n</cell>\n<text>\nProblem\
    \ 7\nWrite a function that takes a vector of integers and returns the sum of the\
    \ squares of the even elements in the vector.\nusing Test\n\n@testset begin\n\n\
    candidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3,\
    \ 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl_0nkx97.jl:15\nin expression starting at\
    \ /tmp/tmpl_0nkx97.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in lst\n        if i%2 == 1\n            sum += i\n  \
    \      end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert solution([5, 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n\
    @assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\nProblem 7\nWrite a\
    \ function that returns the number of times the value 1 appears in the list [1,\
    \ 2, 3, 1].\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5,\
    \ 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
    \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2,\
    \ 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3,\
    \ 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9gdclarm.jl:18\nin expression starting at\
    \ /tmp/tmp9gdclarm.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    even = lst[findall(x -> x % 2 == 0, lst)]\n    odd = lst[findall(x -> x %\
    \ 2 != 0, lst)]\n    \n    return sum(filter(x -> x % 2 == 1, odd))\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector of integers and returns\
    \ the number of elements that are greater than the element at position n in the\
    \ vector.\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5,\
    \ 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
    \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2,\
    \ 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3,\
    \ 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp2jb96ij.jl:15\nin expression starting at\
    \ /tmp/tmpp2jb96ij.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    evens = filter(x -> x % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0,\
    \ lst)\n    \n    return sum(filter(x -> x % 2 == 1, odds))\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert solution([5, 8, 7, 1]) == 12\n@assert solution([3,\
    \ 3, 3, 3, 3]) == 9\n@assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\n\
    Part III. Sum all odd numbers in a list\nWrite a function that returns the sum\
    \ of all odd numbers in a list.\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\
    \t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) ==\
    \ 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) ==\
    \ 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32])\
    \ == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjeam22lk.jl:15\nin expression starting at\
    \ /tmp/tmpjeam22lk.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    even = filter(x -> x % 2 == 0, lst)\n    odd = filter(x -> x % 2 != 0, lst)\n\
    \    sum(filter(x -> x % 2 == 1, odd))\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert solution([5, 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n\
    @assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\nPart II: More on maps\
    \ and filters \nmap: Apply a function to every element of a collection\nfilter:\
    \ Apply a function to every element of a collection\nreduce: Apply a function\
    \ to every element of a collection and return a single value\nfoldl: Apply a function\
    \ to every element of a collection and return a single value\nfoldr: Apply a function\
    \ to every element of a collection and return a single value\nusing Test\n\n@testset\
    \ begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3,\
    \ 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0kt4ite_.jl:14\nin expression starting at\
    \ /tmp/tmp0kt4ite_.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    evens = lst[findall(x -> x % 2 == 0, lst)]\n    odd = sum(filter(x -> x %\
    \ 2 != 0, lst))\n    return odd + evens\nend\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype solution([5, 8, 7, 1])\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ solution([3, 3, 3, 3, 3])\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ solution([30, 13, 24, 321])\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a vector of integers and returns the sum of the squares of the even elements\
    \ of the vector.\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5,\
    \ 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
    \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2,\
    \ 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3,\
    \ 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnm2b_r22.jl:14\nin expression starting at\
    \ /tmp/tmpnm2b_r22.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    evens = filter(x -> x % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0,\
    \ lst)\n    sum(filter(x -> x in odds, evens))\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert solution([5, 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n\
    @assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that returns the product of all even elements in a given list.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7,\
    \ 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
    \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2,\
    \ 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3,\
    \ 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvrpf_f6v.jl:14\nin expression starting at\
    \ /tmp/tmpvrpf_f6v.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    even = filter(x -> x % 2 == 0, lst)\n    odd = filter(x -> x % 2 != 0, lst)\n\
    \    \n    return sum(filter(x -> x % 2 == 1, odd))\nend\n</cell>\n<code language=julia-1.5>\n\
    @time solution([5, 8, 7, 1])\n</cell>\n<code language=julia-1.5>\n@time solution([3,\
    \ 3, 3, 3, 3])\n</cell>\n<code language=julia-1.5>\n@time solution([30, 13, 24,\
    \ 321])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the product\
    \ of all even numbers in a given list.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3, 3,\
    \ 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp36hak1cq.jl:15\nin expression starting at\
    \ /tmp/tmp36hak1cq.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in lst\n        if i%2 == 1\n            sum += i\n  \
    \      end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype solution([5, 8, 7, 1])\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ solution([3, 3, 3, 3, 3])\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ solution([30, 13, 24, 321])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the sum of the numbers in the list that are divisible by 7. \n    \n\
    \    For example, sum([7, 14, 21, 32]) should return 21.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3,\
    \ 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfntd04ck.jl:18\nin expression starting at\
    \ /tmp/tmpfntd04ck.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    \n    sum = 0\n    for i in lst\n        if i%2 == 1\n            sum +=\
    \ i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    @time solution([5, 8, 7, 1])\n</cell>\n<code language=julia-1.5>\n@time solution([3,\
    \ 3, 3, 3, 3])\n</cell>\n<code language=julia-1.5>\n@time solution([30, 13, 24,\
    \ 321])\n</cell>\n<text>\nExercise 3\nWrite a function that returns the product\
    \ of all even elements in a given list.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3, 3,\
    \ 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpprgs53m5.jl:19\nin expression starting at\
    \ /tmp/tmpprgs53m5.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    evens = filter(x -> x % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0,\
    \ lst)\n    \n    return sum(filter(x -> x % 2 == 1, odds)) + sum(filter(x ->\
    \ x % 2 == 0, evens))\nend\n</cell>\n<code language=julia-1.5>\n@assert solution([5,\
    \ 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n@assert solution([30,\
    \ 13, 24, 321]) == 0\n</cell>\n<text>\nPart III. Recursion\nA recursive function\
    \ is a function that calls itself. A recursive function is one that calls itself.\
    \ This means that a recursive function can call itself to solve a problem that\
    \ has been solved before.\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\
    \t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) ==\
    \ 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) ==\
    \ 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32])\
    \ == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2aiy5inp.jl:15\nin expression starting at\
    \ /tmp/tmp2aiy5inp.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    evens = lst[findall(x -> x % 2 == 0, lst)]\n    odds = lst[findall(x -> x\
    \ % 2 != 0, lst)]\n    return sum(filter(x -> x % 2 == 1, odds)) + sum(filter(x\
    \ -> x % 2 != 1, evens))\nend\n</cell>\n<code language=julia-1.5>\n@assert solution([5,\
    \ 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n@assert solution([30,\
    \ 13, 24, 321]) == 0\n</cell>\n<text>\nPart 2\nWrite a function that takes a list\
    \ of numbers and returns the product of all of the numbers in the list. Do not\
    \ use the reduce function.\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\
    \t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) ==\
    \ 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) ==\
    \ 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32])\
    \ == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_yhn7zx3.jl:14\nin expression starting at\
    \ /tmp/tmp_yhn7zx3.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    \n    sum = 0\n    for i in lst\n        if i%2 == 1\n            sum +=\
    \ i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype solution([5, 8, 7, 1])\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ solution([3, 3, 3, 3, 3])\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ solution([30, 13, 24, 321])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the product of all the even elements that are in odd positions.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7,\
    \ 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
    \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2,\
    \ 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3,\
    \ 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdovjku5o.jl:19\nin expression starting at\
    \ /tmp/tmpdovjku5o.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    evens = filter(x -> x % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0,\
    \ lst)\n    return sum(filter(x -> x % 2 == 1, odds))\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert solution([5, 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n\
    @assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that returns the number of times a given value appears in a given list.\n\
    using Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8,\
    \ 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
    \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2,\
    \ 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3,\
    \ 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg3c3lmze.jl:14\nin expression starting at\
    \ /tmp/tmpg3c3lmze.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    \n    sum = 0\n    for i in lst\n        if i%2 == 1\n            sum +=\
    \ i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert solution([5, 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n\
    @assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\nPart III. Sum all the\
    \ even numbers in a list\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\
    \t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) ==\
    \ 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) ==\
    \ 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32])\
    \ == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxmh21r2b.jl:19\nin expression starting at\
    \ /tmp/tmpxmh21r2b.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    evens = lst[findall(x -> x % 2 == 0, lst)]\n    odd = lst[findall(x -> x\
    \ % 2 != 0, lst)]\n    sum(filter(x -> x in evens, odd))\nend\n</cell>\n<text>\n\
    Problem 7\nWrite a function that takes a list of numbers and returns the number\
    \ of even and odd numbers combined. \nusing Test\n\n@testset begin\n\ncandidate\
    \ = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3, 3,\
    \ 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7g3_w_ug.jl:14\nin expression starting at\
    \ /tmp/tmp7g3_w_ug.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    evens = filter(x -> x % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0,\
    \ lst)\n    \n    return sum(filter(x -> x % 2 == 1, odds))\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert solution([5, 8, 7, 1]) == 12\n@assert solution([3,\
    \ 3, 3, 3, 3]) == 9\n@assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\n\
    Problem 7\nWrite a function that returns the number of times a given element appears\
    \ in a given list.\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\t\
    @test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\
    \t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t\
    @test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\
    \t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_rgouh9_.jl:15\nin expression starting at\
    \ /tmp/tmp_rgouh9_.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    evens = filter(x -> x % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0,\
    \ lst)\n    sum(evens) + sum(odds)\nend\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype solution([5, 8, 7, 1])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the product of all even numbers in a given list.\nusing Test\n\n\
    @testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\
    \t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321])\
    \ == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\
    \t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) ==\
    \ 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzb9td6lo.jl:14\nin expression starting at\
    \ /tmp/tmpzb9td6lo.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    evens = filter(x -> x % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0,\
    \ lst)\n    return sum(filter(x -> x % 2 == 1, odds))\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert solution([5, 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n\
    @assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\nPart II: Recursion\n\
    A recursive function is a function that calls itself. This can be done in Julia\
    \ by using the function keyword.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3, 3,\
    \ 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp14nvmmlg.jl:14\nin expression starting at\
    \ /tmp/tmp14nvmmlg.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    \n    sum = 0\n    for x in lst\n        if x % 2 == 1\n            sum +=\
    \ x\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.3>\n\
    @time solution([5, 8, 7, 1])\n</cell>\n<code language=julia-1.3>\n@time solution([3,\
    \ 3, 3, 3, 3])\n</cell>\n<code language=julia-1.3>\n@time solution([30, 13, 24,\
    \ 321])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the product\
    \ of the even elements in a given list.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3, 3,\
    \ 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp22a407v8.jl:19\nin expression starting at\
    \ /tmp/tmp22a407v8.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    \n    sum = 0\n    for i in lst\n        if i%2 == 1\n            sum +=\
    \ i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype solution([5, 8, 7, 1])\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ solution([3, 3, 3, 3, 3])\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ solution([30, 13, 24, 321])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the product of all of the even elements that are in odd positions.\n\
    using Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8,\
    \ 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
    \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2,\
    \ 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3,\
    \ 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp240xmxiy.jl:19\nin expression starting at\
    \ /tmp/tmp240xmxiy.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    evens = filter(x -> x % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0,\
    \ lst)\n    return sum(filter(x -> x % 2 == 1, odds)) + sum(filter(x -> x % 2\
    \ == 0, evens))\nend\n</cell>\n<text>\nProblem 8\nWrite a function that returns\
    \ the number of times a given substring appears in a given string.\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2tby151w.jl:14\nin expression starting at\
    \ /tmp/tmp2tby151w.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    even = lst[findall(x -> x % 2 == 0, lst)]\n    odd = lst[findall(x -> x %\
    \ 2 != 0, lst)]\n    \n    return sum(filter(x -> x % 2 != 0, odd))\nend\n</cell>\n\
    <code language=julia-1.5>\n@time solution([5, 8, 7, 1])\n</cell>\n<code language=julia-1.5>\n\
    @time solution([3, 3, 3, 3, 3])\n</cell>\n<code language=julia-1.5>\n@time solution([30,\
    \ 13, 24, 321])\n</cell>\n<text>\nExercise 3\nWrite a function that returns the\
    \ sum of the squares of the numbers in a given list.\nusing Test\n\n@testset begin\n\
    \ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3,\
    \ 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkftebbnh.jl:15\nin expression starting at\
    \ /tmp/tmpkftebbnh.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    evens = lst[findall(x -> x % 2 == 0, lst)]\n    odds = lst[findall(x -> x\
    \ % 2 != 0, lst)]\n    return sum(filter(x -> x % 2 == 1, odds)) + sum(filter(x\
    \ -> x % 2 == 0, evens))\nend\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ solution([5, 8, 7, 1])\n</cell>\n<code language=julia-1.5>\n@code_warntype solution([3,\
    \ 3, 3, 3, 3])\n</cell>\n<code language=julia-1.5>\n@code_warntype solution([30,\
    \ 13, 24, 321])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ product of the even elements in a given list.\nusing Test\n\n@testset begin\n\
    \ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3,\
    \ 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb2p5h6_x.jl:14\nin expression starting at\
    \ /tmp/tmpb2p5h6_x.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    evens = filter(x -> x % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0,\
    \ lst)\n    \n    return sum(filter(x -> x % 2 == 1, odds))\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert solution([5, 8, 7, 1]) == 12\n@assert solution([3,\
    \ 3, 3, 3, 3]) == 9\n@assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\n\
    Part III. Sum all even numbers in a list\nGiven a non-empty list of integers,\
    \ return a new list containing all of the even numbers from the original list.\
    \ \n    \nusing Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5,\
    \ 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
    \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2,\
    \ 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3,\
    \ 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg6v5y685.jl:15\nin expression starting at\
    \ /tmp/tmpg6v5y685.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    even = filter(x -> x % 2 == 0, lst)\n    odd = filter(x -> x % 2 != 0, lst)\n\
    \    sum(even) + sum(odd)\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the product of all even numbers in a given list.\nusing Test\n\n\
    @testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\
    \t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321])\
    \ == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\
    \t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) ==\
    \ 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpoj0zpxzj.jl:14\nin expression starting at\
    \ /tmp/tmpoj0zpxzj.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    evens = filter(x -> x % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0,\
    \ lst)\n    return sum(filter(x -> x % 2 == 1, odds))\nend\n</cell>\n<code language=julia-1.5>\n\
    @time solution([5, 8, 7, 1])\n</cell>\n<code language=julia-1.5>\n@time solution([3,\
    \ 3, 3, 3, 3])\n</cell>\n<code language=julia-1.5>\n@time solution([30, 13, 24,\
    \ 321])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the product\
    \ of all even numbers in a given list.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3, 3,\
    \ 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4qyh9lx6.jl:14\nin expression starting at\
    \ /tmp/tmp4qyh9lx6.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    evens = filter(x -> x % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0,\
    \ lst)\n    sum(filter(x -> x % 2 == 1, odds))\nend\n</cell>\n<text>\nProblem\
    \ 9\nWrite a function that returns a list of all numbers between 1 and n that\
    \ have two digits.\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\t\
    @test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\
    \t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t\
    @test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\
    \t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbtkakwmr.jl:14\nin expression starting at\
    \ /tmp/tmpbtkakwmr.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    \n    sum = 0\n    for x in lst\n        if x % 2 == 1\n            sum +=\
    \ x\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.0>\n\
    @assert solution([5, 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n\
    @assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\nPart II: Recursion\n\
    A recursive function is a function that calls itself. A recursive function can\
    \ have two types of recursive calls: base cases and recursive cases. Base cases\
    \ occur when the function calls itself, whereas recursive cases occur when the\
    \ function calls itself. A recursive function can have as many base cases as it\
    \ wants, but it can only have one recursive case. Recursive functions can have\
    \ as many recursive cases as it wants, but it can only have one base case. Recursive\
    \ functions can have as many base cases as it wants, but it can only have one\
    \ recursive case. Recursive functions can have as many base cases as it wants,\
    \ but it can only have one recursive case. Recursive functions can have as many\
    \ base cases as it wants, but it can only have one recursive case. Recursive functions\
    \ can have as many base cases as it wants, but it can only have one recursive\
    \ case. Recursive functions can have as many base cases as it wants, but it can\
    \ only have one recursive case. Recursive functions can have as many base cases\
    \ as it wants, but it can only have one recursive case. Recursive functions can\
    \ have as many base cases as it wants, but it can only have one recursive case.\
    \ Recursive functions can have as many base cases as it wants, but it can only\
    \ have one recursive case. Recursive functions can have as many base cases as\
    \ it wants, but it can only have one recursive case. Recursive functions can have\
    \ as many base cases as it wants, but it can only have one recursive case. Recursive\
    \ functions can have as many base cases as it wants, but it can only have one\
    \ recursive case. Recursive functions can have as many base cases as it wants,\
    \ but it can only have one recursive case. Recursive functions can have as many\
    \ base cases as it wants, but it can only have one recursive case. Recursive functions\
    \ can have as many base cases as it wants, but it can only have one recursive\
    \ case. Recursive functions can have as many base cases as it wants, but it can\
    \ only have one recursive case. Recursive functions can have as many base cases\
    \ as it wants, but it can only have one recursive case. Recursive functions can\
    \ have as many base \nusing Test\n\n@testset begin\n\ncandidate = solution;\n\t\
    @test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\
    \t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t\
    @test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\
    \t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy7q1l74g.jl:19\nin expression starting at\
    \ /tmp/tmpy7q1l74g.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    evens = filter(x -> x % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0,\
    \ lst)\n    \n    return sum(filter(x -> x % 2 == 1, odds)) + sum(filter(x ->\
    \ x % 2 == 0, evens))\nend\n</cell>\n<code language=julia-1.5>\n@time solution([5,\
    \ 8, 7, 1])\n</cell>\n<code language=julia-1.5>\n@time solution([3, 3, 3, 3, 3])\n\
    </cell>\n<code language=julia-1.5>\n@time solution([30, 13, 24, 321])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector of integers and returns\
    \ the number of times a value appears consecutively in the vector. For example,\
    \ if the input vector is [5, 8, 7, 1, 3, 3], your function should return 3 because\
    \ there are 3 consecutive 1's in the vector.\nusing Test\n\n@testset begin\n\n\
    candidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3,\
    \ 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqhdj5z2f.jl:15\nin expression starting at\
    \ /tmp/tmpqhdj5z2f.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    evens = filter(x -> x % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0,\
    \ lst)\n    return sum(filter(x -> x % 2 == 1, odds)) + sum(evens)\nend\n</cell>\n\
    <code language=julia-1.0>\n@time solution([5, 8, 7, 1])\n</cell>\n<code language=julia-1.0>\n\
    @time solution([3, 3, 3, 3, 3])\n</cell>\n<code language=julia-1.0>\n@time solution([30,\
    \ 13, 24, 321])\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector\
    \ of integers and returns the number of elements that are odd.\nusing Test\n\n\
    @testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\
    \t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321])\
    \ == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\
    \t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) ==\
    \ 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf4e63exp.jl:14\nin expression starting at\
    \ /tmp/tmpf4e63exp.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    evens = filter(x -> x % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0,\
    \ lst)\n    sum(filter(x -> x % 2 == 1, odds))\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a list of numbers and returns the product of\
    \ the even elements that are in odd positions.\nusing Test\n\n@testset begin\n\
    \ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3,\
    \ 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn16miutd.jl:14\nin expression starting at\
    \ /tmp/tmpn16miutd.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    even = filter(x -> x % 2 == 0, lst)\n    odd = filter(x -> x % 2 != 0, lst)\n\
    \    return sum(filter(x -> x % 2 == 1, odd))\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert solution([5, 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n\
    @assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\nPart III: Refactoring\
    \ your code\nNow that you have learned how to write and use functions, let's refactor\
    \ our code to use functions. We'll start by defining a function called evens that\
    \ takes a vector and returns the even elements of that vector:\nusing Test\n\n\
    @testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\
    \t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321])\
    \ == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\
    \t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) ==\
    \ 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphswa_iq9.jl:14\nin expression starting at\
    \ /tmp/tmphswa_iq9.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    evens = filter(x -> x % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0,\
    \ lst)\n    return sum(filter(x -> x % 2 == 1, odds))\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert solution([5, 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n\
    @assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\nPart III. Sum square\
    \ difference\nGiven a non-empty list of integers, return a list of squared differences\
    \ between the consecutive elements.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3, 3,\
    \ 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq0n439_j.jl:14\nin expression starting at\
    \ /tmp/tmpq0n439_j.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    \n    sum = 0\n    for i in lst\n        if i%2 == 1\n            sum +=\
    \ i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    @time solution([5, 8, 7, 1])\n</cell>\n<code language=julia-1.5>\n@time solution([3,\
    \ 3, 3, 3, 3])\n</cell>\n<code language=julia-1.5>\n@time solution([30, 13, 24,\
    \ 321])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the product\
    \ of all of the odd elements that are in even positions.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3,\
    \ 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphad0d_0k.jl:19\nin expression starting at\
    \ /tmp/tmphad0d_0k.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    evens = filter(x -> x % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0,\
    \ lst)\n    \n    return sum(filter(x -> x % 2 == 1, odds))\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype solution([5, 8, 7, 1])\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype solution([3, 3, 3, 3, 3])\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype solution([30, 13, 24, 321])\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the product of all even numbers in a given list. For\
    \ example, given [5, 8, 7, 1], the function should return 120.\nusing Test\n\n\
    @testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\
    \t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321])\
    \ == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\
    \t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) ==\
    \ 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsx4lrwv_.jl:15\nin expression starting at\
    \ /tmp/tmpsx4lrwv_.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    evens = filter(x -> x % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0,\
    \ lst)\n    return sum(filter(x -> x % 2 == 1, odds)) + sum(filter(x -> x % 2\
    \ == 0, evens))\nend\n</cell>\n<code language=julia-1.5>\n@assert solution([5,\
    \ 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n@assert solution([30,\
    \ 13, 24, 321]) == 0\n</cell>\n<text>\nPart II: Recursion\nA recursive function\
    \ is a function that calls itself. This can be done in Julia by using the function\
    \ keyword followed by the name of the function. For example, if we want to find\
    \ the factorial of a number, we could write our function as follows:\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgk_d764j.jl:14\nin expression starting at\
    \ /tmp/tmpgk_d764j.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for x in lst\n        if x % 2 == 1\n            sum += x\n\
    \        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3, 3,\
    \ 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpyd69tdhq.jl:23\n  Expression: candidate([5,\
    \ 8, 7, 1]) == 12\n   Evaluated: 13 == 12\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyd69tdhq.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyd69tdhq.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpyd69tdhq.jl:24\n  Expression: candidate([3, 3, 3, 3, 3]) ==\
    \ 9\n   Evaluated: 15 == 9\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyd69tdhq.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyd69tdhq.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpyd69tdhq.jl:25\n  Expression: candidate([30, 13, 24, 321])\
    \ == 0\n   Evaluated: 334 == 0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyd69tdhq.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyd69tdhq.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpyd69tdhq.jl:26\n  Expression: candidate([5, 9]) == 5\n   Evaluated:\
    \ 14 == 5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyd69tdhq.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyd69tdhq.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpyd69tdhq.jl:28\n  Expression: candidate([30, 13, 23, 32])\
    \ == 23\n   Evaluated: 36 == 23\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inli"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyd69tdhq.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    evens = lst[findall(x -> x % 2 == 0, lst)]\n    odds = lst[findall(x -> x\
    \ % 2 != 0, lst)]\n    return sum(evens) + sum(odds)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time solution([5, 8, 7, 1])\n</cell>\n<code language=julia-1.5>\n@time solution([3,\
    \ 3, 3, 3, 3])\n</cell>\n<code language=julia-1.5>\n@time solution([30, 13, 24,\
    \ 321])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the product\
    \ of all elements in a given list. For example, product([1, 2, 3]) should return\
    \ 6. Make sure your function works with vectors of different lengths.\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpoovhzlcx.jl:14\nin expression starting at\
    \ /tmp/tmpoovhzlcx.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    evens = filter(x -> x % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0,\
    \ lst)\n    return sum(filter(x -> x % 2 == 1, odds))\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert solution([5, 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n\
    @assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\nPart III. Filtering\
    \ by index\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5,\
    \ 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
    \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2,\
    \ 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3,\
    \ 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppxbf9uxs.jl:14\nin expression starting at\
    \ /tmp/tmppxbf9uxs.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    evens = filter(x -> x % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0,\
    \ lst)\n    return sum(filter(x -> x % 2 == 1, odds))\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert solution([5, 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n\
    @assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that returns the product of all even elements in a given list. \n \
    \   \n    Examples\n    solution([5, 8, 7, 1]) ==> 120\n    solution([3, 3, 3,\
    \ 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==> 24321\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptwtb4tu7.jl:14\nin expression starting at\
    \ /tmp/tmptwtb4tu7.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    even = filter(x -> x % 2 == 0, lst)\n    odd = filter(x -> x % 2 != 0, lst)\n\
    \    sum(filter(x -> x % 2 == 1, odd))\nend\n</cell>\n<code language=julia-1.0>\n\
    @assert solution([5, 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n\
    @assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\nPart III. Sum all the\
    \ even numbers in a list\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\
    \t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) ==\
    \ 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) ==\
    \ 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32])\
    \ == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsw_pp9fd.jl:14\nin expression starting at\
    \ /tmp/tmpsw_pp9fd.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    evens = filter(x -> x % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0,\
    \ lst)\n    return sum(filter(x -> x % 2 == 1, odds))\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert solution([5, 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n\
    @assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\nProblem 7\nWrite a\
    \ function that returns a list of all numbers from 1 to n that are divisible by\
    \ k.\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5,\
    \ 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
    \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2,\
    \ 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3,\
    \ 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8o3a19ha.jl:14\nin expression starting at\
    \ /tmp/tmp8o3a19ha.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    evens = filter(x -> x % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0,\
    \ lst)\n    \n    return sum(filter(x -> x % 2 == 1, odds))\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@time solution(lst)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the number of times a given value appears in a given\
    \ list.\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5,\
    \ 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
    \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2,\
    \ 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3,\
    \ 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5_nfxla9.jl:15\nin expression starting at\
    \ /tmp/tmp5_nfxla9.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    \n    sum = 0\n    for i in lst\n        if i%2 == 1\n            sum +=\
    \ i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert solution([5, 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n\
    @assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\nProblem 7: Given a\
    \ non-empty list of integers, return a new list containing all the odd elements\
    \ of the original list followed by all the even elements. You may modify the original\
    \ list.\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5,\
    \ 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
    \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2,\
    \ 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3,\
    \ 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9dhimb5s.jl:19\nin expression starting at\
    \ /tmp/tmp9dhimb5s.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    evens = lst[findall(x -> x % 2 == 0, lst)]\n    odds = lst[findall(x -> x\
    \ % 2 != 0, lst)]\n    return sum(filter(x -> x % 2 == 1, odds)) + sum(filter(x\
    \ -> x % 2 != 1, evens))\nend\n</cell>\n<text>\nProblem 7\nWrite a function that\
    \ takes a vector of integers and returns the number of elements that are less\
    \ than or equal to each of the elements in the vector.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3,\
    \ 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9bda5trv.jl:14\nin expression starting at\
    \ /tmp/tmp9bda5trv.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    evens = lst[findall(x -> x % 2 == 1, lst)]\n    odds = lst[findall(x -> x\
    \ % 2 != 1, lst)]\n    \n    sum(evens) + sum(odds)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time solution(lst)\n</cell>\n<text>\nPart 3: Recursion\nRecursion is a powerful\
    \ tool for solving problems that involve repeating a process over and over again.\
    \ For example, let's say that we want to find the factorial of a number. One way\
    \ to do this would be to write a function that calls itself to find the factorial\
    \ of the number and then returns the result. For example:\nusing Test\n\n@testset\
    \ begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3,\
    \ 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpof40r1yy.jl:15\nin expression starting at\
    \ /tmp/tmpof40r1yy.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    evens = filter(x -> x % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0,\
    \ lst)\n    return sum(filter(x -> x % 2 == 1, odds))\nend\n</cell>\n<code language=julia-1.5>\n\
    @time solution([5, 8, 7, 1])\n</cell>\n<code language=julia-1.5>\n@time solution([3,\
    \ 3, 3, 3, 3])\n</cell>\n<code language=julia-1.5>\n@time solution([30, 13, 24,\
    \ 321])\n</cell>\n<text>\nProblem 7\nusing Test\n\n@testset begin\n\ncandidate\
    \ = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3, 3,\
    \ 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpku7jmg53.jl:14\nin expression starting at\
    \ /tmp/tmpku7jmg53.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    evens = filter(x -> x % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0,\
    \ lst)\n    \n    return sum(filter(x -> x % 2 == 1, odds)) + sum(filter(x ->\
    \ x % 2 == 0, evens))\nend\n</cell>\n<code language=julia-1.5>\n@time solution([5,\
    \ 8, 7, 1])\n</cell>\n<code language=julia-1.5>\n@time solution([3, 3, 3, 3, 3])\n\
    </cell>\n<code language=julia-1.5>\n@time solution([30, 13, 24, 321])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes in a list of integers and returns\
    \ the sum of all of the even elements that are in odd positions.\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2va9kj1z.jl:15\nin expression starting at\
    \ /tmp/tmp2va9kj1z.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    evens = filter(x -> x % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0,\
    \ lst)\n    return sum(filter(x -> x % 2 == 1, odds))\nend\n</cell>\n<code language=julia-1.5>\n\
    @time solution([5, 8, 7, 1])\n</cell>\n<code language=julia-1.5>\n@time solution([3,\
    \ 3, 3, 3, 3])\n</cell>\n<code language=julia-1.5>\n@time solution([30, 13, 24,\
    \ 321])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the product\
    \ of the even elements in a list. \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\n\
    candidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3,\
    \ 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplssw9k90.jl:14\nin expression starting at\
    \ /tmp/tmplssw9k90.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for x in lst\n        if x % 2 == 1\n            sum += x\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.4>\n\
    @code_warntype solution([5, 8, 7, 1])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the product of all even elements in a given list.\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4843rt68.jl:18\nin expression starting at\
    \ /tmp/tmp4843rt68.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    evens = filter(x -> x % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0,\
    \ lst)\n    \n    return sum(filter(x -> x % 2 == 1, odds)) + sum(filter(x ->\
    \ x % 2 == 0, evens))\nend\n</cell>\n<code language=julia-1.5>\n@assert solution([5,\
    \ 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n@assert solution([30,\
    \ 13, 24, 321]) == 0\n</cell>\n<text>\nPart II: Recursion\nA recursive function\
    \ is a function that calls itself. A recursive function can have one or more base\
    \ cases. A base case is where a recursive function can stop calling itself and\
    \ return a value.\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5,\
    \ 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
    \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2,\
    \ 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3,\
    \ 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmkzn8lx8.jl:15\nin expression starting at\
    \ /tmp/tmpmkzn8lx8.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in lst\n        if i%2 == 1\n            sum += i\n  \
    \      end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert solution([5, 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n\
    @assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\nProblem 7\nWrite a\
    \ function that returns the number of times you can divide n by each number from\
    \ 1 to n.\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5,\
    \ 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
    \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2,\
    \ 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3,\
    \ 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuityr24f.jl:18\nin expression starting at\
    \ /tmp/tmpuityr24f.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in lst\n        if i%2 == 1\n            sum += i\n  \
    \      end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert solution([5, 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n\
    @assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that returns the product of the even elements in a list. For example,\
    \ given [5, 8, 7, 1], the product is 5*7*1 = 155.\nusing Test\n\n@testset begin\n\
    \ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3,\
    \ 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplvyw25mb.jl:18\nin expression starting at\
    \ /tmp/tmplvyw25mb.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    evens = lst[findall(x -> x % 2 == 0, lst)]\n    odds = lst[findall(x -> x\
    \ % 2 != 0, lst)]\n    return sum(filter(x -> x % 2 == 1, odds)) + sum(filter(x\
    \ -> x % 2 == 0, evens))\nend\n</cell>\n<code language=julia-1.5>\n@time solution(lst)\n\
    </cell>\n<text>\nPart 2\nWrite a function that takes a vector of integers and\
    \ returns a vector of integers containing the first n prime numbers.\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn62vm7ny.jl:14\nin expression starting at\
    \ /tmp/tmpn62vm7ny.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    evens = filter(x -> x % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0,\
    \ lst)\n    sum(evens) + sum(odds)\nend\n</cell>\n<text>\nProblem 7\nWrite a function\
    \ that returns the number of times a given element appears in a given list.\n\
    using Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8,\
    \ 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
    \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2,\
    \ 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3,\
    \ 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvw9h8mv8.jl:14\nin expression starting at\
    \ /tmp/tmpvw9h8mv8.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in lst\n        if i%2 == 1\n            sum += i\n  \
    \      end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert solution([5, 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n\
    @assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\nPart II: Recursion\n\
    Now that we've seen how recursion works, let's see how it can be used in Julia.\
    \ Let's start with a simple function that adds two numbers:\nusing Test\n\n@testset\
    \ begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3,\
    \ 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbxxz3105.jl:18\nin expression starting at\
    \ /tmp/tmpbxxz3105.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    \n    sum = 0\n    for x in lst\n        if x % 2 == 1\n            sum +=\
    \ x\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert solution([5, 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n\
    @assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\nPart II: Recursion\n\
    A recursive function is a function that calls itself. A recursive function is\
    \ one that calls itself repeatedly until it reaches a base case. Base cases are\
    \ the base cases of the recursion.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3, 3,\
    \ 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1w_p4y5h.jl:19\nin expression starting at\
    \ /tmp/tmp1w_p4y5h.jl:19\n"
  exit_code: 1
  status: SyntaxError
