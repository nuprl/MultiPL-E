name: HumanEval_20_find_closest_elements
language: julia
results:
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    minimum = minimum(numbers)\n    maximum = maximum(numbers)\n\
    \    minimum_index = index(minimum, numbers)\n    maximum_index = index(maximum,\
    \ numbers)\n    return (minimum, maximum)\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpn4puqqxh.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpn4puqqxh.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    smallest = numbers[1]\n    largest = numbers[1]\n    for number\
    \ in numbers[2:end]\n        if number < smallest\n            smallest = number\n\
    \        elseif number > largest\n            largest = number\n        end\n\
    \    end\n    return (smallest, largest)\nend\n</cell>\n<code language=julia-1.0>\n\
    using Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmph133_gzi.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmph133_gzi.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n</cell>\n<text>\nExercise\nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in that vector. \nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in that vector. \nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in that vector. \nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in that vector. \nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in that vector. \nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in that vector. \nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in that vector. \nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in that vector. \nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in that vector. \nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in that vector. \nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in that vector. \nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in that vector. \nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in that vector. \nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in that vector. \nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in that vector. \nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in that vector. \nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in that vector. \nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in that vector. \nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in that vector. \nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in that vector. \nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in that vector. \nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in that vector. \nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in that \nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3w2p32y_.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp3w2p32y_.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    closest_elements = numbers[1]\n    closest_number = numbers[1]\n\
    \    \n    for number in numbers[2:end]\n        if number < closest_number\n\
    \            closest_number = number\n            closest_elements = number\n\
    \        elseif number > closest_number\n            closest_number = number\n\
    \            closest_elements = number\n        end\n    end\n    \n    return\
    \ closest_elements, closest_number\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8n0i92zd.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp8n0i92zd.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    closest_elements = numbers[1]\n    closest_distance = numbers[1]\n\
    \    for element in numbers[2:end]\n        distance = abs(element - closest_elements)\n\
    \        if distance < closest_distance\n            closest_elements = element\n\
    \            closest_distance = distance\n        end\n    end\n    return closest_elements,\
    \ closest_distance\nend\n</cell>\n<text>\nLet's test our function by comparing\
    \ it to our known answer:\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpx_a96b92.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpx_a96b92.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[0]\n\
    \    \n    for i in 2:length(numbers)\n        if numbers[i] < smallest_number\n\
    \            smallest_number = numbers[i]\n        elseif numbers[i] > largest_number\n\
    \            largest_number = numbers[i]\n        end\n    end\n    \n    return\
    \ (smallest_number, largest_number)\nend\n</cell>\n<text>\nNow let's try it out\
    \ on some random numbers:\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpl_vp2m2x.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpl_vp2m2x.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[end]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<text>\nExercise 3\nWrite a function that will\
    \ take a list of numbers and return the sum of the squares of the numbers in that\
    \ list.\nWrite a function that will take a list of numbers and return the sum\
    \ of the squares of the numbers in that list.\nWrite a function that will take\
    \ a list of numbers and return the sum of the squares of the numbers in that list.\n\
    Write a function that will take a list of numbers and return the sum of the squares\
    \ of the numbers in that list.\nWrite a function that will take a list of numbers\
    \ and return the sum of the squares of the numbers in that list.\nWrite a function\
    \ that will take a list of numbers and return the sum of the squares of the numbers\
    \ in that list.\nWrite a function that will take a list of numbers and return\
    \ the sum of the squares of the numbers in that list.\nWrite a function that will\
    \ take a list of numbers and return the sum of the squares of the numbers in that\
    \ list.\nWrite a function that will take a list of numbers and return the sum\
    \ of the squares of the numbers in that list.\nWrite a function that will take\
    \ a list of numbers and return the sum of the squares of the numbers in that list.\n\
    Write a function that will take a list of numbers and return the sum of the squares\
    \ of the numbers in that list.\nWrite a function that will take a list of numbers\
    \ and return the sum of the squares of the numbers in that list.\nWrite a function\
    \ that will take a list of numbers and return the sum of the squares of the numbers\
    \ in that list.\nWrite a function that will take a list of numbers and return\
    \ the sum of the squares of the numbers in that list.\nWrite a function that will\
    \ take a list of numbers and return the sum of the squares of the numbers in that\
    \ list.\nWrite a function that will take a list of numbers and return the sum\
    \ of the squares of the numbers in that list.\nWrite a function that will take\
    \ a list of numbers and return the sum of the squares of the numbers in that list.\n\
    Write a function that will take a list of numbers and return the sum of the squares\
    \ of the numbers in that list.\nWrite a function that will take a list of numbers\
    \ and return the sum of the squares of the numbers in that list.\nWrite a function\
    \ that will take a list of numbers and return the sum of the squares of the numbers\
    \ in that list.\nWrite a function that will take a list of numbers and return\
    \ the sum of the squares of the numbers in that list.\nWrite a function that will\
    \ take a list of numbers and return the sum of the squares of the numbers in that\
    \ list.\nWrite a function that will take a list of numbers and return the sum\
    \ of the squares of the numbers in that list.\nWrite a function that will take\
    \ a list of numbers and return the sum of the squares of the numbers in that list.\n\
    \nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmplxefv52n.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmplxefv52n.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[end]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n</cell>\n<text>\nExercise\nWrite a function that\
    \ takes in a list of numbers and returns the average of the numbers in the list.\
    \ \nWrite a function that takes in a list of numbers and returns the sum of the\
    \ numbers in the list. \nWrite a function that takes in a list of numbers and\
    \ returns the product of the numbers in the list. \nWrite a function that takes\
    \ in a list of numbers and returns the standard deviation of the numbers in the\
    \ list. \nWrite a function that takes in a list of numbers and returns the variance\
    \ of the numbers in the list. \nWrite a function that takes in a list of numbers\
    \ and returns the minimum of the numbers in the list. \nWrite a function that\
    \ takes in a list of numbers and returns the maximum of the numbers in the list.\
    \ \nWrite a function that takes in a list of numbers and returns the number of\
    \ elements in the list. \nWrite a function that takes in a list of numbers and\
    \ returns the sum of the squares of the numbers in the list. \nWrite a function\
    \ that takes in a list of numbers and returns the sum of the cubes of the numbers\
    \ in the list. \nWrite a function that takes in a list of numbers and returns\
    \ the sum of the squares of the numbers in the list. \nWrite a function that takes\
    \ in a list of numbers and returns the sum of the cubes of the numbers in the\
    \ list. \nWrite a function that takes in a list of numbers and returns the sum\
    \ of the squares of the numbers in the list. \nWrite a function that takes in\
    \ a list of numbers and returns the sum of the cubes of the numbers in the list.\
    \ \nWrite a function that takes in a list of numbers and returns the sum of the\
    \ squares of the numbers in the list. \nWrite a function that takes in a list\
    \ of numbers and returns the sum of the cubes of the numbers in the list. \nWrite\
    \ a function that takes in a list of numbers and returns the sum of the squares\
    \ of the numbers in the list. \nWrite a function that takes in a list of numbers\
    \ and returns the sum of the cubes of the numbers in the list. \nWrite a function\
    \ that takes in a list of numbers and returns the sum of the squares of the numbers\
    \ in the list. \nWrite a function that takes in a list of numbers and returns\
    \ the sum of the cubes of the numbers in the list. \nWrite a function that takes\
    \ in a list of numbers and returns the sum of the squares of the numbers in the\
    \ list. \nWrite a function that takes in a list of numbers and returns the sum\
    \ of the cubes of the numbers in the list. \nWrite a function that takes in a\
    \ list of numbers and returns the sum of the squares of the numbers in the list.\
    \ \nWrite a function that takes in a list of numbers and returns the sum of the\
    \ cubes of the \nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4_095mtx.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp4_095mtx.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_difference = numbers[1] - numbers[0]\n    smallest_number\
    \ = numbers[1]\n    \n    largest_difference = numbers[length(numbers)] - numbers[length(numbers)-1]\n\
    \    largest_number = numbers[length(numbers)-1]\n    \n    for number in numbers[2:length(numbers)-1]\n\
    \        difference = number - numbers[1]\n        if difference < smallest_difference\n\
    \            smallest_difference = difference\n            smallest_number = number\n\
    \        elseif difference > largest_difference\n            largest_difference\
    \ = difference\n            largest_number = number\n        end\n    end\n  \
    \  \n    return (smallest_number, largest_number)\nend\n</cell>\n<text>\nNow let's\
    \ test the function by comparing it to our previous solution:\nusing Test\n\n\
    @testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpgrnnmpjm.jl:29\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpgrnnmpjm.jl:29\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest = numbers[1]\n    largest = numbers[1]\n    for\
    \ number in numbers[2:end]\n        if number < smallest \n            smallest\
    \ = number\n        elseif number > largest\n            largest = number\n  \
    \      end\n    end\n    return (smallest, largest)\nend\n</cell>\n<code language=julia-1.4>\n\
    find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n</cell>\n<text>\nExercise\n\
    Write a function that takes in a list of numbers and returns the mean of those\
    \ numbers. \nWrite a function that takes in a list of numbers and returns the\
    \ median of those numbers. \nWrite a function that takes in a list of numbers\
    \ and returns the mode of those numbers. \nWrite a function that takes in a list\
    \ of numbers and returns the mode of those numbers. \nWrite a function that takes\
    \ in a list of numbers and returns the mode of those numbers. \nWrite a function\
    \ that takes in a list of numbers and returns the mode of those numbers. \nWrite\
    \ a function that takes in a list of numbers and returns the mode of those numbers.\
    \ \nWrite a function that takes in a list of numbers and returns the mode of those\
    \ numbers. \nWrite a function that takes in a list of numbers and returns the\
    \ mode of those numbers. \nWrite a function that takes in a list of numbers and\
    \ returns the mode of those numbers. \nWrite a function that takes in a list of\
    \ numbers and returns the mode of those numbers. \nWrite a function that takes\
    \ in a list of numbers and returns the mode of those numbers. \nWrite a function\
    \ that takes in a list of numbers and returns the mode of those numbers. \nWrite\
    \ a function that takes in a list of numbers and returns the mode of those numbers.\
    \ \nWrite a function that takes in a list of numbers and returns the mode of those\
    \ numbers. \nWrite a function that takes in a list of numbers and returns the\
    \ mode of those numbers. \nWrite a function that takes in a list of numbers and\
    \ returns the mode of those numbers. \nWrite a function that takes in a list of\
    \ numbers and returns the mode of those numbers. \nWrite a function that takes\
    \ in a list of numbers and returns the mode of those numbers. \nWrite a function\
    \ that takes in a list of numbers and returns the mode of those numbers. \nWrite\
    \ a function that takes in a list of numbers and returns the mode of those numbers.\
    \ \nWrite a function that takes in a list of numbers and returns the mode of those\
    \ numbers. \nWrite a function that takes in a list of numbers and returns the\
    \ mode of those numbers. \nWrite a function that takes in a list of numbers and\
    \ returns the mode of those numbers. \nWrite a function that takes in a list of\
    \ numbers and returns the mode of those numbers. \nWrite a function that takes\
    \ in a list of numbers and returns the mode of those numbers. \nWrite a function\
    \ that takes in a list of numbers and returns the mode of those numbers. \nWrite\
    \ a function that takes in a list of numbers and returns the mode of those numbers.\
    \ \nWrite \nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp1lc7vz1l.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp1lc7vz1l.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[0]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<text>\nThe function above is called find_closest_elements\
    \ and takes in a list of numbers and returns the smallest and largest number in\
    \ the list. Let's test it out on a few examples:\nusing Test\n\n@testset begin\n\
    \ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0,\
    \ 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t\
    @test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpgt37xs14.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpgt37xs14.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0])\n</cell>\n<text>\nExercise: Write a function that\
    \ returns the closest number to a given number in a given list of numbers. \n\
    The function should take two arguments: a list of numbers and a number. The function\
    \ should return the closest number in the list to the given number.\nusing Test\n\
    \n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpgnt5lots.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpgnt5lots.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest = numbers[1]\n    largest = numbers[1]\n    for\
    \ n in numbers[2:end]\n        if n < smallest\n            smallest = n\n   \
    \     elseif n > largest\n            largest = n\n        end\n    end\n    return\
    \ (smallest, largest)\nend\n</cell>\n<text>\nNow let's test our function by comparing\
    \ it to our known answers:\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpoyq_k6rd.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpoyq_k6rd.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[end]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<text>\nExercise\nWrite a function that takes\
    \ a vector of numbers and returns the sum of the squares of the numbers in the\
    \ vector.\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp7jgjm6a2.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp7jgjm6a2.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    closest_numbers = numbers[1]\n    closest_number = numbers[1]\n\
    \    \n    for number in numbers[2:end]\n        if number < closest_number\n\
    \            closest_number = number\n        elseif number > closest_number\n\
    \            closest_numbers = number\n        end\n    end\n    \n    return\
    \ closest_numbers, closest_number\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3k7hqsxe.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp3k7hqsxe.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    smallest_number = numbers[1]\n    largest_number = numbers[0]\n\
    \    for number in numbers[2:end]\n        if number < smallest_number\n     \
    \       smallest_number = number\n        elseif number > largest_number\n   \
    \         largest_number = number\n        end\n    end\n    return (smallest_number,\
    \ largest_number)\nend\n</code>\n<|/ a tags=julia,arrays |>\n<| c |>\nThank you\
    \ for posting this! I really appreciate it. I will try this out and let you know\
    \ how it goes.\n<|/ c |>\n<| c |>\nI tested this and it worked perfectly. Thank\
    \ you so much!\n<|/ c |>\n<| a dscore=1 |>\nThis can be done in one line using\
    \ broadcasting and the function findmin:\n<code>\njulia> findmin.([1,2,3,4,5,6])\n\
    2-element Array{Int64,1}:\n 2\n 6\n</code>\n<|/ a tags=julia,arrays |>\n<| c |>\n\
    Thank you for posting this! I really appreciate it. I will try this out and let\
    \ you know how it goes.\n<|/ c |>\n<| a tags=julia,arrays |>\n<code>\nusing Test\n\
    \n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpthsel7ge.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpthsel7ge.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    smallest = numbers[1]\n    largest = numbers[1]\n    for i in\
    \ numbers[2:end]\n        if i < smallest \n            smallest = i\n       \
    \ elseif i > largest\n            largest = i\n        end\n    end\n    return\
    \ (smallest, largest)\nend\n</code>\n<|/ a dscore=2 |>\n<| a tags=julia,sorting,arrays\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmprqheck_g.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmprqheck_g.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[end]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a list of numbers and returns the sum of the squares of the numbers in the list.\n\
    >>> square_sum(Vector{Float64}([1.0, 2.0, 3.0, 4.0, 5.0, 6.0]))\n25.0\n>>> square_sum(Vector{Float64}([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 6.0]))\n25.0\n>>> square_sum(Vector{Float64}([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 6.0]))\n25.0\n>>> square_sum(Vector{Float64}([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 6.0]))\n25.0\n>>> square_sum(Vector{Float64}([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 6.0]))\n25.0\n>>> square_sum(Vector{Float64}([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 6.0]))\n25.0\n>>> square_sum(Vector{Float64}([1.0, 2.0, 3.0, 4.0, 5.0, 6.0]))\n\
    25.0\n>>> square_sum(Vector{Float64}([1.0, 2.0, 3.0, 4.0, 5.0, 6.0]))\n25.0\n\
    >>> square_sum(Vector{Float64}([1.0, 2.0, 3.0, 4.0, 5.0, 6.0]))\n25.0\n>>> square_sum(Vector{Float64}([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 6.0]))\n25.0\n>>> square_sum(Vector{Float64}([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 6.0]))\n25.0\n>>> square_sum(Vector{Float64}([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 6.0]))\n25.0\n>>> square_sum(Vector{Float64}([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 6.0]))\n25.0\n>>> square_sum(Vector{Float64}([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 6.0]))\n25.0\n>>> square_sum(Vector{Float64}([1.0, 2.0, 3.0, 4.0, 5.0, 6.0]))\n\
    25.0\n>>> square_sum(Vector{Float64}([1.0, 2.0, 3.0, 4.0, 5.0, 6.0]))\n25.0\n\
    >>> square_sum(Vector{Float64}([1.0, 2.0, 3.0, 4.0, 5.0, 6.0]))\n25.0\n>>> square_sum(Vector{Float64}([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 6.0]))\n25.0\n>>> square\nusing Test\n\n@testset begin\n\
    \ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0,\
    \ 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t\
    @test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpwou4kv57.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpwou4kv57.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[0]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.4>\nfind_closest_elements([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n</cell>\n<text>\nExercise\nWrite a function that\
    \ takes a list of numbers and returns the sum of the squares of the numbers in\
    \ that list. Test it on a list of numbers that you know should work.\nusing Test\n\
    \n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp7xyu_rff.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp7xyu_rff.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest = numbers[1]\n    largest = numbers[1]\n    \n\
    \    for n in numbers[2:end]\n        if n < smallest\n            smallest =\
    \ n\n        elseif n > largest\n            largest = n\n        end\n    end\n\
    \    \n    return (smallest, largest)\nend\n</cell>\n<text>\nNow let's test our\
    \ function by comparing it to our known answers:\nusing Test\n\n@testset begin\n\
    \ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0,\
    \ 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t\
    @test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_rqhuuxx.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_rqhuuxx.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest = numbers[1]\n    largest = numbers[1]\n    for\
    \ number in numbers[2:end]\n        if number < smallest\n            smallest\
    \ = number\n        elseif number > largest\n            largest = number\n  \
    \      end\n    end\n    return smallest, largest\nend\n</cell>\n<text>\nThe function\
    \ above is called find_closest_elements and it takes one argument (a vector of\
    \ numbers). It then assigns the smallest and largest numbers to those elements\
    \ in the vector (the smallest and largest numbers are the first and last elements\
    \ of the vector).\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8i1jrhqn.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp8i1jrhqn.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    closest_number = numbers[1]\n    closest_element = numbers[1]\n\
    \    \n    for number in numbers[2:end]\n        if number < closest_number\n\
    \            closest_number = number\n            closest_element = number\n \
    \       elseif number > closest_number\n            closest_number = number\n\
    \            closest_element = number\n        end\n    end\n    \n    return\
    \ closest_number, closest_element\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpsizz721_.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpsizz721_.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    minimum = minimum(numbers)\n    maximum = maximum(numbers)\n\
    \    minimum_index = 0\n    maximum_index = length(numbers)\n    \n    while minimum_index\
    \ < maximum_index\n        mid = minimum_index + (maximum_index - minimum_index)\
    \ / 2\n        if numbers[mid] < minimum\n            minimum_index = mid\n  \
    \      elseif numbers[mid] > maximum\n            maximum_index = mid\n      \
    \  else\n            return numbers[minimum_index], numbers[maximum_index]\n \
    \       end\n    end\n    return minimum, maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpxtj417np.jl:26\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpxtj417np.jl:26\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[0]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpjh1f6ckk.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpjh1f6ckk.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n</cell>\n<text>\nExercise\nWrite a function that\
    \ takes a list of numbers and returns the sum of the squares of the numbers in\
    \ the list. Test it on a list of numbers that you know should work.\nusing Test\n\
    \n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmu0l4e2d.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpmu0l4e2d.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<text>\nLet's test our function by comparing\
    \ it to our known answers:\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpkh4beebh.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpkh4beebh.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_diff = Float64(0.0)\n    smallest_number = numbers[1]\n\
    \    largest_diff = Float64(0.0)\n    largest_number = numbers[1]\n    for number\
    \ in numbers[2:end]\n        diff = abs(number - smallest_number)\n        if\
    \ diff < smallest_diff\n            smallest_diff = diff\n            smallest_number\
    \ = number\n        elseif diff > largest_diff\n            largest_diff = diff\n\
    \            largest_number = number\n        end\n    end\n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpeetslnu2.jl:26\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpeetslnu2.jl:26\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    smallest_number = numbers[1]\n    largest_number = numbers[end]\n\
    \    for number in numbers[2:end]\n        if number < smallest_number\n     \
    \       smallest_number = number\n        elseif number > largest_number\n   \
    \         largest_number = number\n        end\n    end\n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a vector of numbers and returns the sum of the squares of the numbers in the\
    \ vector.\nFor example, if the vector is [1.0, 2.0, 3.0, 4.0, 5.0, 6.0], your\
    \ function should return 40.\nThe function should work for any vector length,\
    \ not just two.\nThe function should raise an error if the vector is empty.\n\
    The function should raise an error if the vector has less than two elements.\n\
    The function should raise an error if the vector has more than two elements.\n\
    using Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpe7b6qwzs.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpe7b6qwzs.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n\
    \    \n    for i in 2:length(numbers)\n        if numbers[i] < smallest_number\n\
    \            smallest_number = numbers[i]\n        elseif numbers[i] > largest_number\n\
    \            largest_number = numbers[i]\n        end\n    end\n    \n    return\
    \ (smallest_number, largest_number)\nend\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that takes two numbers and returns the sum of the squares of the two\
    \ numbers.\n>>> square_sum(a, b)\n25.0\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpzqeyrf2z.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpzqeyrf2z.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_difference = numbers[1] - numbers[0]\n    smallest_difference_index\
    \ = 1\n    \n    for index in 2:length(numbers)\n        difference = numbers[index]\
    \ - numbers[smallest_difference_index]\n        if difference < smallest_difference\n\
    \            smallest_difference = difference\n            smallest_difference_index\
    \ = index\n        end\n    end\n    \n    return (numbers[smallest_difference_index],\
    \ numbers[smallest_difference_index + 1])\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a list of numbers and returns the sum of the squares\
    \ of the numbers in that list.\n>>> square_sum([1.0, 2.0, 3.0, 4.0, 5.0, 6.0])\n\
    25.0\n>>> square_sum([1.0, 2.0, 3.0, 4.0, 5.0, 6.0])\n25.0\n>>> square_sum([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 6.0])\n25.0\n>>> square_sum([1.0, 2.0, 3.0, 4.0, 5.0, 6.0])\n\
    25.0\n>>> square_sum([1.0, 2.0, 3.0, 4.0, 5.0, 6.0])\n25.0\n>>> square_sum([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 6.0])\n25.0\n>>> square_sum([1.0, 2.0, 3.0, 4.0, 5.0, 6.0])\n\
    25.0\n>>> square_sum([1.0, 2.0, 3.0, 4.0, 5.0, 6.0])\n25.0\n>>> square_sum([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 6.0])\n25.0\n>>> square_sum([1.0, 2.0, 3.0, 4.0, 5.0, 6.0])\n\
    25.0\n>>> square_sum([1.0, 2.0, 3.0, 4.0, 5.0, 6.0])\n25.0\n>>> square_sum([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 6.0])\n25.0\n>>> square_sum([1.0, 2.0, 3.0, 4.0, 5.0, 6.0])\n\
    25.0\n>>> square_sum([1.0, 2.0, 3.0, 4.0, 5.0, 6.0])\n25.0\n>>> square_sum([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 6.0])\n25.0\n>>> square_sum([1.0, 2.0, 3.0, 4.0, 5.0, 6.0])\n\
    25.0\n>>> square_sum([1.0, 2.0, 3.0, 4.0, 5.0, 6.0])\n25.0\n>>> square_sum([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 6.0])\n25.0\n>>> square_sum([1.0, 2.0, 3.0, 4.0, 5.0, 6.0])\n\
    25.0\n>>> square_sum([1.0, 2.0, 3.0, 4.0, 5.0, 6.0])\n25.0\n>>> square_sum([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 6.0])\n25.0\n>>> square_sum([1.0, 2.0, 3.0, 4.0, 5.0, 6.0])\n\
    25.0\n>>> square_sum([1.0, 2.0, 3.0, 4.0, 5.0, 6.0])\n25.0\n>>> square_sum([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 6.0])\n25.0\n>>> square_sum([1.0, 2.0, 3.0, 4.0, 5.0, 6.0])\n\
    using Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpgvwok8jh.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpgvwok8jh.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    closest_elements = Vector{Float64}(undef, 0)\n    closest_distance\
    \ = Float64(0)\n    \n    for n in numbers\n        distance = abs(n - numbers[1])\n\
    \        if distance < closest_distance\n            closest_distance = distance\n\
    \            closest_elements[1] = numbers[1]\n            closest_elements[2]\
    \ = numbers[2]\n        elseif distance == closest_distance\n            closest_elements[1]\
    \ = numbers[1]\n            closest_elements[2] = n\n        end\n    end\n  \
    \  \n    return closest_elements\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmprnrl2df5.jl:27\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmprnrl2df5.jl:27\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<text>\nExercise 4\nWrite a function that takes\
    \ a vector of numbers and returns the sum of the squares of the numbers in the\
    \ vector.\nWrite a function that takes a vector of numbers and returns the sum\
    \ of the squares of the numbers in the vector.\nWrite a function that takes a\
    \ vector of numbers and returns the sum of the squares of the numbers in the vector.\n\
    Write a function that takes a vector of numbers and returns the sum of the squares\
    \ of the numbers in the vector.\nWrite a function that takes a vector of numbers\
    \ and returns the sum of the squares of the numbers in the vector.\nWrite a function\
    \ that takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector.\nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector.\nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector.\nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector.\nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector.\nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector.\nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector.\nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector.\nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector.\nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector.\nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector.\nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector.\nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector.\nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector.\nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector.\nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector.\nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector.\nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector.\nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector.\nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector.\nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector.\nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector.\nWrite \nusing Test\n\n\
    @testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3wdbza1w.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp3wdbza1w.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest = numbers[1]\n    largest = numbers[1]\n    \n\
    \    for n in numbers[2:end]\n        if n < smallest\n            smallest =\
    \ n\n        elseif n > largest\n            largest = n\n        end\n    end\n\
    \    \n    return (smallest, largest)\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes two numbers and returns the sum of the squares of the\
    \ two numbers. Test it by calling it on two numbers and printing the result.\n\
    using Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2u4b9791.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp2u4b9791.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest = numbers[1]\n    largest = numbers[1]\n    for\
    \ n in numbers[2:end]\n        if n < smallest\n            smallest = n\n   \
    \     elseif n > largest\n            largest = n\n        end\n    end\n    return\
    \ (smallest, largest)\nend\n</cell>\n<code language=julia-1.4>\nfind_closest_elements([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n</cell>\n<text>\nExercise\nWrite a function that\
    \ takes two numbers and returns the sum of the squares of the two numbers. Test\
    \ it on $x$ and $y$. Test it on $x$ and $y$ and $z$. Test it on $x$ and $y$ and\
    \ $z$ and $w$. Test it on $x$ and $y$ and $z$ and $w$ and $x$ and $y$ and $z$\
    \ and $w$. Test it on $x$ and $y$ and $z$ and $w$ and $x$ and $y$ and $z$ and\
    \ $w$ and $x$ and $y$ and $z$ and $w$ and $x$ and $y$ and $z$ and $w$ and $x$\
    \ and $y$ and $z$ and $w$ and $x$ and $y$ and $z$ and $w$ and $x$ and $y$ and\
    \ $z$ and $w$ and $x$ and $y$ and $z$ and $w$ and $x$ and $y$ and $z$ and $w$\
    \ and $x$ and $y$ and $z$ and $w$ and $x$ and $y$ and $z$ and $w$ and $x$ and\
    \ $y$ and $z$ and $w$ and $x$ and $y$ and $z$ and $w$ and $x$ and $y$ and $z$\
    \ and $w$ and $x$ and $y$ and $z$ and $w$ and $x$ and $y$ and $z$ and $w$ and\
    \ $x$ and $y$ and $z$ and $w$ and $x$ and $y$ and $z$ and $w$ and $x$ and $y$\
    \ and $z$ and $w$ and $x$ and $y$ and $z$ and $w$ and $x$ and $y\nusing Test\n\
    \n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmppxocoocr.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmppxocoocr.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[end]\n\
    \    smallest_index = 2\n    largest_index = end\n    \n    for index in 2:end\n\
    \        if numbers[index] < smallest_number\n            smallest_number = numbers[index]\n\
    \            smallest_index = index\n        elseif numbers[index] > largest_number\n\
    \            largest_number = numbers[index]\n            largest_index = index\n\
    \        end\n    end\n    \n    return (smallest_number, largest_number)\nend\n\
    </cell>\n<text>\nExercise 4\nWrite a function that takes a vector of numbers and\
    \ returns the sum of the squares of the numbers in the vector.\n>>> sum_square_of_numbers([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 6.0])\n25.0\n>>> sum_square_of_numbers([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 6.0])\n25.0\n>>> sum_square_of_numbers([1.0, 2.0, 3.0, 4.0, 5.0, 6.0])\n\
    25.0\n>>> sum_square_of_numbers([1.0, 2.0, 3.0, 4.0, 5.0, 6.0])\n25.0\n>>> sum_square_of_numbers([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 6.0])\n25.0\n>>> sum_square_of_numbers([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 6.0])\n25.0\n>>> sum_square_of_numbers([1.0, 2.0, 3.0, 4.0, 5.0, 6.0])\n\
    25.0\n>>> sum_square_of_numbers([1.0, 2.0, 3.0, 4.0, 5.0, 6.0])\n25.0\n>>> sum_square_of_numbers([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 6.0])\n25.0\n>>> sum_square_of_numbers([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 6.0])\n25.0\n>>> sum_square_of_numbers([1.0, 2.0, 3.0, 4.0, 5.0, 6.0])\n\
    25.0\n>>> sum_square_of_numbers([1.0, 2.0, 3.0, 4.0, 5.0, 6.0])\n25.0\n>>> sum_square_of_numbers([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 6.0])\n25.0\n>>> sum_square_of_numbers([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 6.0])\n25.0\n>>> sum_square_of_numbers([1.0, 2.0, 3.0, 4.0, 5.0, 6.0])\n\
    25.0\n>>> sum_square_of_numbers([1.0, 2.0, 3.0, 4.0, 5.0, 6.0])\n25.0\n>>> sum_square_of_numbers([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 6.0])\n25.0\n>>> sum_square_of_numbers([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 6.0])\n25.0\n>>> sum_square_of_numbers([1.0, 2.0, 3.0, 4.0, 5.0, 6.0])\n\
    25.0\n>>> sum_square_of_numbers([1.0, 2.0, 3.0, 4.0, 5.0, 6.0])\n25.0\n>>> sum_square_of_numbers([1.0,\
    \ 2.0, 3.0, 4.\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"end\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpxbjtx3we.jl:13\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpxbjtx3we.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[end]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<text>\nNow let's test our function by comparing\
    \ it to our known answers:\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp7_h0bgmd.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp7_h0bgmd.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    minimum = minimum(numbers)\n    maximum = maximum(numbers)\n\
    \    minimum_index = index(minimum, numbers)\n    maximum_index = index(maximum,\
    \ numbers)\n    \n    if minimum_index == maximum_index\n        return (minimum,\
    \ maximum)\n    \n    closest_number = numbers[minimum_index]\n    \n    if minimum_index\
    \ < maximum_index\n        closest_number = numbers[minimum_index + 1]\n    end\n\
    \    \n    return (closest_number, numbers[maximum_index])\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpdairrkcu.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpdairrkcu.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<text>\nNow let's test our function by comparing\
    \ it to our known answers:\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpswyvx4h8.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpswyvx4h8.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest = numbers[1]\n    largest = numbers[1]\n    for\
    \ n in numbers[2:end]\n        if n < smallest\n            smallest = n\n   \
    \     elseif n > largest\n            largest = n\n        end\n    end\n    return\
    \ smallest, largest\nend\n</cell>\n<text>\nNow let's test our function by running\
    \ it on a few examples:\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp7vt0jkjm.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp7vt0jkjm.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    minimum = minimum(numbers)\n    maximum = maximum(numbers)\n\
    \    minimum_index = index(minimum, numbers)\n    maximum_index = index(maximum,\
    \ numbers)\n    return minimum, maximum\nend\n</code>\n<|/ a tags=julia |>\n<|\
    \ a tags=julia |>\nThe answer by is great, but I wanted to add that you can also\
    \ use broadcasting in the following way:\n<code>\njulia> function find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n           minimum = minimum(numbers)\n           maximum = maximum(numbers)\n\
    \           minimum_index = minimum.(numbers)\n           maximum_index = maximum.(numbers)\n\
    \           return minimum, maximum\n       end\nfind_closest_elements (generic\
    \ function with 1 method)\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpv9aqxni8.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpv9aqxni8.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[end]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a list of numbers and returns the sum of the squares of the numbers in the list.\n\
    The function should take a list of numbers of any length.\nThe function should\
    \ return the sum of the squares of the numbers in the list.\nThe function should\
    \ return 0 if the list is empty.\nThe function should raise an error if the list\
    \ contains non-numeric values.\nThe function should raise an error if the list\
    \ contains negative values.\nThe function should raise an error if the list contains\
    \ values greater than the largest number in the list.\nThe function should raise\
    \ an error if the list contains values less than the smallest number in the list.\n\
    The function should raise an error if the list contains duplicate values.\nThe\
    \ function should raise an error if the list contains values greater than the\
    \ largest number in the list.\nThe function should raise an error if the list\
    \ contains values less than the smallest number in the list.\nThe function should\
    \ raise an error if the list contains duplicate values.\nThe function should raise\
    \ an error if the list contains values greater than the largest number in the\
    \ list.\nThe function should raise an error if the list contains values less than\
    \ the smallest number in the list.\nThe function should raise an error if the\
    \ list contains duplicate values.\nThe function should raise an error if the list\
    \ contains values greater than the largest number in the list.\nThe function should\
    \ raise an error if the list contains values less than the smallest number in\
    \ the list.\nThe function should raise an error if the list contains duplicate\
    \ values.\nThe function should raise an error if the list contains values greater\
    \ than the largest number in the list.\nThe function should raise an error if\
    \ the list contains values less than the smallest number in the list.\nThe function\
    \ should raise an error if the list contains duplicate values.\nThe function should\
    \ raise an error if the list contains values greater than the largest number in\
    \ the list.\nThe function should raise an error if the list contains values less\
    \ than the smallest number in the list.\nThe function should raise an error if\
    \ the list contains duplicate values.\nThe function should raise an error if the\
    \ list contains values greater than the largest number in the list.\nThe function\
    \ should raise an error if the list contains values less than the smallest number\
    \ in the list.\nThe function should raise an error if the list contains duplicate\
    \ values.\nThe function should raise an error if the list contains values greater\
    \ than the largest number in the list.\nThe function should raise an error if\
    \ the list contains values less than the smallest number in the list.\nThe function\
    \ should raise an error if the list contains duplicate values.\nThe function should\
    \ raise an error if the list contains values greater than the largest number in\
    \ the list.\nThe function \nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpcqchcxm4.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpcqchcxm4.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    smallest_number = numbers[1]\n    largest_number = numbers[end]\n\
    \    for number in numbers[2:end]\n        if number < smallest_number\n     \
    \       smallest_number = number\n        elseif number > largest_number\n   \
    \         largest_number = number\n        else\n            return smallest_number,\
    \ largest_number\n        end\n    end\n    return smallest_number, largest_number\n\
    end\n</cell>\n<text>\nThe function above is called find_closest_elements and takes\
    \ in a list of numbers and returns a tuple containing the two numbers that are\
    \ closest to each other. Let's see how it works.\nusing Test\n\n@testset begin\n\
    \ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0,\
    \ 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t\
    @test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3n6pw0vq.jl:22\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp3n6pw0vq.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    smallest_number = numbers[1]\n    largest_number = numbers[0]\n\
    \    for number in numbers[2:end]\n        if number < smallest_number\n     \
    \       smallest_number = number\n        elseif number > largest_number\n   \
    \         largest_number = number\n        end\n    end\n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8_cppau4.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp8_cppau4.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<text>\nExercise 3\nWrite a function that will\
    \ take a list of numbers and return the sum of the numbers in the list.\n>>> sum([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n12.2\n>>> sum([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n12.0\n\
    >>> sum([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n12.0\n>>> sum([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n12.0\n>>> sum([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n12.0\n>>> sum([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0])\n12.0\n>>> sum([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n12.0\n\
    >>> sum([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n12.0\n>>> sum([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n12.0\n>>> sum([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n12.0\n>>> sum([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0])\n12.0\n>>> sum([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n12.0\n\
    >>> sum([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n12.0\n>>> sum([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n12.0\n>>> sum([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n12.0\n>>> sum([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0])\n12.0\n>>> sum([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n12.0\n\
    >>> sum([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n12.0\n>>> sum([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n12.0\n>>> sum([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n12.0\n>>> sum([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0])\n12.0\n>>> sum([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n12.0\n\
    >>> sum([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n12.0\n>>> sum([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n12.0\n>>> sum([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n12.0\n>>> sum([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0])\n12.0\n>>> sum([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n12.0\n\
    >>> sum([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n12.0\n>>> sum([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n12.0\n>>> sum([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n12.0\n>>> sum([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0])\n12.0\n>>> sum([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n12.0\n\
    >>> \nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpnxesv0wh.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpnxesv0wh.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    smallest_number = numbers[1]\n    largest_number = numbers[end]\n\
    \    for i in 2:length(numbers)\n        if numbers[i] < smallest_number\n   \
    \         smallest_number = numbers[i]\n        elseif numbers[i] > largest_number\n\
    \            largest_number = numbers[i]\n        end\n    end\n    return (smallest_number,\
    \ largest_number)\nend\n</code>\n<|/ a tags=julia |>\n<| a tags=julia |>\nI came\
    \ up with this solution:\n<code>\nusing Test\n\n@testset begin\n\ncandidate =\
    \ find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) ==\
    \ (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t\
    @test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpby64sftd.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpby64sftd.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[end]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<text>\nNow let's test our function by finding\
    \ the closest element to each of the numbers in the list we created earlier.\n\
    using Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8gemn1kc.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp8gemn1kc.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    smallest_number = numbers[1]\n    largest_number = numbers[end]\n\
    \    for number in numbers[2:end]\n        if number < smallest_number\n     \
    \       smallest_number = number\n        elseif number > largest_number\n   \
    \         largest_number = number\n        end\n    end\n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a list of numbers and returns the sum of the squares of the numbers in that\
    \ list.\n>>> sum_square_numbers([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n25.0\n>>> sum_square_numbers([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0])\n25.0\n>>> sum_square_numbers([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.1])\n25.0\n>>> sum_square_numbers([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n25.0\n\
    >>> sum_square_numbers([1.0, 2.0, 3.0, 4.0, 5.0, 2.1])\n25.0\n>>> sum_square_numbers([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0])\n25.0\n>>> sum_square_numbers([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.1])\n25.0\n>>> sum_square_numbers([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n25.0\n\
    >>> sum_square_numbers([1.0, 2.0, 3.0, 4.0, 5.0, 2.1])\n25.0\n>>> sum_square_numbers([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0])\n25.0\n>>> sum_square_numbers([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.1])\n25.0\n>>> sum_square_numbers([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n25.0\n\
    >>> sum_square_numbers([1.0, 2.0, 3.0, 4.0, 5.0, 2.1])\n25.0\n>>> sum_square_numbers([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0])\n25.0\n>>> sum_square_numbers([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.1])\n25.0\n>>> sum_square_numbers([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n25.0\n\
    >>> sum_square_numbers([1.0, 2.0, 3.0, 4.0, 5.0, 2.1])\n25.0\n>>> sum_square_numbers([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0])\n25.0\n>>> sum_square_numbers([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.1])\n25.0\n>>> sum_square_numbers([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n25.0\n\
    >>> sum_square_numbers([1.0, 2.0, 3.0, 4.0, 5.0, 2.1])\n25.0\n>>> sum_square_numbers([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0])\n25.0\n>>> sum_square_numbers([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.1])\n25.0\n>>> sum_square_numbers([1.0, \nusing Test\n\n@testset begin\n\
    \ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0,\
    \ 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t\
    @test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpdj3yv381.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpdj3yv381.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<text>\nNow let's test our function by calling\
    \ it with the numbers we created earlier. We'll use the function we defined earlier\
    \ to find the closest pair of numbers to each other.\nusing Test\n\n@testset begin\n\
    \ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0,\
    \ 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t\
    @test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9p7njlhx.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp9p7njlhx.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    closest_elements = Vector{Float64}(undef, 0)\n    closest_elements[1]\
    \ = numbers[1]\n    closest_elements[2] = numbers[2]\n    \n    for n in numbers[2:end]\n\
    \        if abs(closest_elements[1] - n) < abs(closest_elements[2] - n)\n    \
    \        closest_elements[1] = n\n        else\n            closest_elements[2]\
    \ = n\n        end\n    end\n    \n    return closest_elements\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp4auvzuys.jl:29\n  Test threw exception\n\
    \  Expression: candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)\n  BoundsError:\
    \ attempt to access 0-element Array{Float64,1} at index [1]\n  Stacktrace:\n \
    \  [1] setindex! at ./array.jl:826 [inlined]\n   [2] find_closest_elements(::Array{Float64,1})\
    \ at /tmp/tmp4auvzuys.jl:11\n   [3] top-level scope at /tmp/tmp4auvzuys.jl:29\n\
    \   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmp4auvzuys.jl:28\n  \ntest set: Error During\
    \ Test at /tmp/tmp4auvzuys.jl:30\n  Test threw exception\n  Expression: candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n  BoundsError: attempt to access 0-element\
    \ Array{Float64,1} at index [1]\n  Stacktrace:\n   [1] setindex! at ./array.jl:826\
    \ [inlined]\n   [2] find_closest_elements(::Array{Float64,1}) at /tmp/tmp4auvzuys.jl:11\n\
    \   [3] top-level scope at /tmp/tmp4auvzuys.jl:30\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmp4auvzuys.jl:28\n  \ntest set: Error During\
    \ Test at /tmp/tmp4auvzuys.jl:31\n  Test threw exception\n  Expression: candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)\n  BoundsError: attempt to access 0-element\
    \ Array{Float64,1} at index [1]\n  Stacktrace:\n   [1] setindex! at ./array.jl:826\
    \ [inlined]\n   [2] find_closest_elements(::Array{Float64,1}) at /tmp/tmp4auvzuys.jl:11\n\
    \   [3] top-level scope at /tmp/tmp4auvzuys.jl:31\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmp4auvzuys.jl:28\n  \ntest set: Error During\
    \ Test at /tmp/tmp4auvzuys.jl:32\n  Test threw exception\n  Expression: candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)\n  BoundsError: attempt to access 0-element\
    \ Array{Float64,1} at index [1]\n  Stacktrace:\n   [1] setindex! at ./array.jl:826\
    \ [inlined]\n   [2] find_closest_elements(::Array{Float64,1}) at /tmp/tmp4auvzuys.jl:11\n\
    \   [3] top-level scope at /tmp/tmp4auvzuys.jl:32\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmp4auvzuys.jl:28\n  \ntest set: Error During\
    \ Test at /tmp/tmp4auvzuys.jl:33\n  Test threw exception\n  Expression: candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1)\n  BoundsError: attempt to access 0-element\
    \ Array{Float64,1} at index [1]\n  Stacktrace:\n   [1] setindex! at ./array.jl:826\
    \ [inlined]\n   [2] find_closest_elements(::Array{Float64,1}) at /tmp/tmp4auvzuys.jl:11\n\
    \   [3] top-level scope at /tmp/tmp4auvzuys.jl:33\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmp4auvzuys.jl:28\n  \nTest Summary: | Error \
    \ Total\ntest set      |     5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4auvzuys.jl:26\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4phxmry6.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp4phxmry6.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n</cell>\n<text>\nExercise\nWrite a function that\
    \ will take a vector of numbers and return a new vector with all the numbers in\
    \ it that are closest to each other.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpdx9o43nk.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpdx9o43nk.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    minimum = numbers[1]\n    maximum = numbers[1]\n    for i in\
    \ 2:length(numbers)\n        if numbers[i] < minimum\n            minimum = numbers[i]\n\
    \        elseif numbers[i] > maximum\n            maximum = numbers[i]\n     \
    \   else\n            return minimum, maximum\n        end\n    end\n    return\
    \ minimum, maximum\nend\n</code>\n<|/ a dscore=0 |>\n<| a tags=julia |>\n<code>\n\
    using Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpbex8ll5j.jl:22\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpbex8ll5j.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    minimum = minimum(numbers)\n    maximum = maximum(numbers)\n\
    \    \n    minimum_index = 0\n    maximum_index = length(numbers) - 1\n    \n\
    \    while minimum_index <= maximum_index\n        \n        mid_index = (minimum_index\
    \ + maximum_index) / 2\n        \n        if numbers[mid_index] == minimum\n \
    \           minimum_index = mid_index + 1\n        elseif numbers[mid_index] ==\
    \ maximum\n            maximum_index = mid_index - 1\n        else\n         \
    \   \n            mid = (numbers[minimum_index] + numbers[maximum_index]) / 2\n\
    \            \n            if mid < minimum\n                minimum_index = mid_index\
    \ + 1\n            elseif mid > maximum\n                maximum_index = mid_index\
    \ - 1\n            else\n                \n                if numbers[mid_index]\
    \ < mid\n                    minimum_index = mid_index + 1\n                elseif\
    \ numbers[mid_index] > mid\n                    maximum_index = mid_index - 1\n\
    \                else\n                    minimum_index = mid_index + 1\n   \
    \                 maximum_index = mid_index - 1\n                end\n       \
    \     end\n        end\n    end\n    \n    return (minimum, numbers[minimum_index])\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpqi11svah.jl:47\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpqi11svah.jl:47\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest = numbers[1]\n    largest = numbers[1]\n    \n\
    \    for number in numbers[2:end]\n        if number < smallest \n           \
    \ smallest = number\n        elseif number > largest\n            largest = number\n\
    \        end\n    end\n    \n    return (smallest, largest)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpddgw25dc.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpddgw25dc.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    minimum = minimum(numbers)\n    maximum = maximum(numbers)\n\
    \    minimum_index = find(numbers == minimum)\n    maximum_index = find(numbers\
    \ == maximum)\n    \n    if minimum_index == maximum_index\n        return (minimum,\
    \ maximum)\n    else\n        return (numbers[minimum_index], numbers[maximum_index])\n\
    \    end\nend\n</cell>\n<text>\nNow let's test our new function\nusing Test\n\n\
    @testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpo3b1kfnq.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpo3b1kfnq.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[end]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<text>\nNow let's test our function by comparing\
    \ it to our expectations.\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3wb_3ahu.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp3wb_3ahu.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpe5h5wsrq.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpe5h5wsrq.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n</cell>\n<text>\nExercise\nWrite a function that\
    \ returns the sum of the squares of the numbers in a given vector. For example,\
    \ if the vector is [1, 2, 3, 4] then the function should return 25.\nusing Test\n\
    \n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3uyx_1_a.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp3uyx_1_a.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    closest_numbers = numbers[1]\n    closest_number = numbers[1]\n\
    \    for number in numbers[2:end]\n        if number < closest_number\n      \
    \      closest_numbers = number\n            closest_number = number\n       \
    \ elseif number > closest_number\n            closest_number = number\n      \
    \  end\n    end\n    return closest_numbers, closest_number\nend\n</cell>\n<code\
    \ language=julia-1.0>\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpsjm41v43.jl:22\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpsjm41v43.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    smallest_number = numbers[1]\n    largest_number = numbers[0]\n\
    \    for number in numbers[2:end]\n        if number < smallest_number\n     \
    \       smallest_number = number\n        elseif number > largest_number\n   \
    \         largest_number = number\n        end\n    end\n    return (smallest_number,\
    \ largest_number)\nend\n</code>\n<|/ a |>\n<| a dscore=0 |>\n<code>\nusing Test\n\
    \n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpctlbds0b.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpctlbds0b.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    minimum = numbers[1]\n    maximum = numbers[1]\n    for i in\
    \ numbers[2:end]\n        if i < minimum\n            minimum = i\n        elseif\
    \ i > maximum\n            maximum = i\n        else\n            minimum = minimum\
    \ if minimum > i else i\n            maximum = maximum if maximum < i else i\n\
    \        end\n    end\n    return (minimum, maximum)\nend\n</cell>\n<text>\nThe\
    \ function find_closest_elements takes a list of numbers and returns the two numbers\
    \ that are closest to each other. \nThe function returns the two numbers in order\
    \ of the smallest number to the largest number. \nThe function returns the two\
    \ numbers in order of the smallest number to the largest number. \nThe function\
    \ returns the two numbers in order of the smallest number to the largest number.\
    \ \nThe function returns the two numbers in order of the smallest number to the\
    \ largest number. \nThe function returns the two numbers in order of the smallest\
    \ number to the largest number. \nThe function returns the two numbers in order\
    \ of the smallest number to the largest number. \nThe function returns the two\
    \ numbers in order of the smallest number to the largest number. \nThe function\
    \ returns the two numbers in order of the smallest number to the largest number.\
    \ \nThe function returns the two numbers in order of the smallest number to the\
    \ largest number. \nThe function returns the two numbers in order of the smallest\
    \ number to the largest number. \nThe function returns the two numbers in order\
    \ of the smallest number to the largest number. \nThe function returns the two\
    \ numbers in order of the smallest number to the largest number. \nThe function\
    \ returns the two numbers in order of the smallest number to the largest number.\
    \ \nThe function returns the two numbers in order of the smallest number to the\
    \ largest number. \nThe function returns the two numbers in order of the smallest\
    \ number to the largest number. \nThe function returns the two numbers in order\
    \ of the smallest number to the largest number. \nThe function returns the two\
    \ numbers in order of the smallest number to the largest number. \nThe function\
    \ returns the two numbers in order of the smallest number to the largest number.\
    \ \nThe function returns the two numbers in order of the smallest number to the\
    \ largest number. \nThe function returns the two numbers in order of the smallest\
    \ number to the largest number. \nThe function returns the two numbers in order\
    \ of the smallest number to the largest number. \nThe function returns the two\
    \ numbers in order of the smallest number to the largest number. \nThe function\
    \ returns the two numbers in order of the smallest number to the largest number.\
    \ \nThe function returns the two numbers in order of the smallest number to the\
    \ largest number. \nThe function returns the two numbers in order of the smallest\
    \ number to the largest number. \nThe function returns the two numbers in order\
    \ of the smallest number to the largest number. \nThe function returns the two\
    \ numbers in order of the smallest number to the largest number. \nThe function\
    \ returns the two numbers in order of the smallest \nusing Test\n\n@testset begin\n\
    \ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0,\
    \ 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t\
    @test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"if\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp0577mlsx.jl:17\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp0577mlsx.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    smallest = numbers[1]\n    largest = numbers[1]\n    for i in\
    \ numbers[2:end]\n        if i < smallest\n            smallest = i\n        elseif\
    \ i > largest\n            largest = i\n        else\n            break\n    end\n\
    \    return (smallest, largest)\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpo7xyj3bj.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpo7xyj3bj.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[end]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmprbihm_ms.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmprbihm_ms.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    closest_numbers = numbers[1]\n    closest_numbers_2 = numbers[2]\n\
    \    \n    if numbers[1] < numbers[2]\n        closest_numbers = numbers[1]\n\
    \        closest_numbers_2 = numbers[2]\n    end\n    \n    if numbers[1] > numbers[2]\n\
    \        closest_numbers = numbers[2]\n        closest_numbers_2 = numbers[1]\n\
    \    end\n    \n    if numbers[1] == numbers[2]\n        closest_numbers = numbers[1]\n\
    \        closest_numbers_2 = numbers[1]\n    end\n    \n    return closest_numbers,\
    \ closest_numbers_2\nend\n</cell>\n<text>\nNow let's test our new function by\
    \ comparing it to our old function.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpspz5jtof.jl:30\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpspz5jtof.jl:30\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[end]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes in a list of numbers and returns the sum of the squares of the numbers\
    \ in the list.\nThe function should only take in a list of numbers and return\
    \ a number.\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpq20nsg8z.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpq20nsg8z.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    smallest = numbers[1]\n    largest = numbers[1]\n    for number\
    \ in numbers[2:end]\n        if number < smallest\n            smallest = number\n\
    \        elseif number > largest\n            largest = number\n        end\n\
    \    end\n    return (smallest, largest)\nend\n</code>\n<|/ a dscore=2 |>\n<|\
    \ a dscore=2 |>\nI wrote a Julia package that does this (with some additional\
    \ functionality). You can find it here: https://github.com/kamranahmedse/closest_pair\n\
    <|/ a tags=julia |>\n<| a dscore=2 |>\nI wrote a Julia package that does this\
    \ (with some additional functionality). You can find it here: https://github.com/kamranahmedse/closest_pair\n\
    <code>\nusing DataFrames\nusing DataFramesMeta\nusing Test\n\n@testset begin\n\
    \ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0,\
    \ 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t\
    @test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp5sul92cz.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp5sul92cz.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<text>\nNow let's test our function by comparing\
    \ it to our known answers:\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_g4i0cw_.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_g4i0cw_.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ will take a list of numbers and return the sum of the squares of the numbers\
    \ in that list. \nFor example, given [1.0, 2.0, 3.0, 4.0, 5.0, 2.2], the function\
    \ should return 25.0. \nThe function should work for lists of any length.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpjb_wib9a.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpjb_wib9a.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[end]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8emmya_8.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp8emmya_8.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<text>\nExercise 2\nWrite a function that will\
    \ take a vector of numbers and a number as inputs and will return the index of\
    \ the number in the vector that is closest to the number. \nFor example, if the\
    \ vector is [1.0, 2.0, 3.0, 4.0, 5.0, 2.0] and the number you are looking for\
    \ is 2.2, the function should return 3.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpwpuqxwg5.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpwpuqxwg5.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest = numbers[1]\n    largest = numbers[1]\n    for\
    \ number in numbers[2:end]\n        if number < smallest \n            smallest\
    \ = number\n        elseif number > largest\n            largest = number\n  \
    \      end\n    end\n    return (smallest, largest)\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmplzq1uqqf.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmplzq1uqqf.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a list of numbers and returns the sum of the squares of the numbers in the list.\n\
    The function should raise an error if the list is empty.\n>>> square_of_list([])\n\
    0\n>>> square_of_list([1,2,3])\n9.0\n>>> square_of_list([1,2,3])\n9.0\n>>> square_of_list([1,2,3])\n\
    9.0\n>>> square_of_list([1,2,3])\n9.0\n>>> square_of_list([1,2,3])\n9.0\n>>> square_of_list([1,2,3])\n\
    9.0\n>>> square_of_list([1,2,3])\n9.0\n>>> square_of_list([1,2,3])\n9.0\n>>> square_of_list([1,2,3])\n\
    9.0\n>>> square_of_list([1,2,3])\n9.0\n>>> square_of_list([1,2,3])\n9.0\n>>> square_of_list([1,2,3])\n\
    9.0\n>>> square_of_list([1,2,3])\n9.0\n>>> square_of_list([1,2,3])\n9.0\n>>> square_of_list([1,2,3])\n\
    9.0\n>>> square_of_list([1,2,3])\n9.0\n>>> square_of_list([1,2,3])\n9.0\n>>> square_of_list([1,2,3])\n\
    9.0\n>>> square_of_list([1,2,3])\n9.0\n>>> square_of_list([1,2,3])\n9.0\n>>> square_of_list([1,2,3])\n\
    9.0\n>>> square_of_list([1,2,3])\n9.0\n>>> square_of_list([1,2,3])\n9.0\n>>> square_of_list([1,2,3])\n\
    9.0\n>>> square_of_list([1,2,3])\n9.0\n>>> square_of_list([1,2,3])\n9.0\n>>> square_of_list([1,2,3])\n\
    9.0\n>>> square_of_list([1,2,3])\n9.0\n>>> square_of_list([1,2,3])\n9.0\n>>> square_of_list([1,2,3])\n\
    9.0\n>>> square_of_list([1,2,3])\n9.0\n>>> square_of_list([1,2,3])\n9.0\n>>> square_of_list([1,2,3])\n\
    9.0\n>>> square_\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmptwr4c331.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmptwr4c331.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp7slk7fvz.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp7slk7fvz.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    closest_numbers = numbers[1]\n    closest_numbers_index\
    \ = numbers[2]\n    \n    for number in numbers[3:end]\n        \n        if number\
    \ < closest_numbers\n            closest_numbers = number\n            closest_numbers_index\
    \ = number\n        end\n    end\n    \n    return (closest_numbers, closest_numbers_index)\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpivanimev.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpivanimev.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n\
    \    for number in numbers[2:end]\n        if number < smallest_number\n     \
    \       smallest_number = number\n        elseif number > largest_number\n   \
    \         largest_number = number\n        end\n    end\n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<text>\nThe function above takes two numbers\
    \ and returns the smallest and largest number in the list. Let's see how it works.\n\
    using Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmptf0n7toq.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmptf0n7toq.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    closest_elements = numbers[1]\n    closest_distance = numbers[1]\n\
    \    for element in numbers[2:end]\n        distance = abs(element - closest_elements)\n\
    \        if distance < closest_distance\n            closest_elements = element\n\
    \            closest_distance = distance\n        end\n    end\n    return closest_elements,\
    \ closest_distance\nend\n</cell>\n<text>\nNow let's test our new function with\
    \ some numbers:\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphav5uq4v.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmphav5uq4v.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    closest_number = numbers[1]\n    closest_distance = numbers[1]\n\
    \    for number in numbers[2:end]\n        distance = abs(number - closest_number)\n\
    \        if distance < closest_distance\n            closest_number = number\n\
    \            closest_distance = distance\n        end\n    end\n    return closest_number,\
    \ closest_distance\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpo_0spzok.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpo_0spzok.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[end]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<text>\nNow let's test our new function by finding\
    \ the closest element to each of the numbers in our list.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpovbvisni.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpovbvisni.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpcna813po.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpcna813po.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<text>\nNow let's test our new function with\
    \ some test cases.\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpxypfqhdw.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpxypfqhdw.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    minimum = numbers[1]\n    maximum = numbers[1]\n    for\
    \ i in numbers[2:end]\n        if i < minimum\n            minimum = i\n     \
    \   elseif i > maximum\n            maximum = i\n        end\n    end\n    return\
    \ minimum, maximum\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpyddlk3eb.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpyddlk3eb.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[end]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<text>\nNow let's try it out on some examples!\n\
    using Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpxrotk3r2.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpxrotk3r2.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[end]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ two numbers and returns the sum of the squares of the two numbers.\nusing Test\n\
    \n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp423t0zt5.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp423t0zt5.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ two numbers as inputs and returns the sum of the squares of the two numbers.\n\
    Test your function with some simple cases.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4rddmz8i.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp4rddmz8i.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest = numbers[1]\n    largest = numbers[1]\n    for\
    \ n in numbers[2:end]\n        if n < smallest\n            smallest = n\n   \
    \     elseif n > largest\n            largest = n\n        else\n            break\n\
    \    end\n    return smallest, largest\nend\n</cell>\n<text>\nNow let's test our\
    \ function by running it on some test data.\nusing Test\n\n@testset begin\n\n\
    candidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0,\
    \ 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t\
    @test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpy7oqy_yh.jl:22\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpy7oqy_yh.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    smallest_number = numbers[1]\n    largest_number = numbers[end]\n\
    \    for i in 2:length(numbers)\n        if numbers[i] < smallest_number\n   \
    \         smallest_number = numbers[i]\n        elseif numbers[i] > largest_number\n\
    \            largest_number = numbers[i]\n        else\n            smallest_number\
    \ = numbers[i]\n            largest_number = numbers[i]\n        end\n    end\n\
    \    return (smallest_number, largest_number)\nend\n</code>\n<|/ a tags=julia,arrays\
    \ |>\n<| c |>\nThis doesn't work if you have a negative number in the array. For\
    \ example, `find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2, -3.0])` returns\
    \ `(-3.0, 2.0)` instead of `(-3.0, 2.2)`.\n<|/ c |>\n<| a dscore=2 |>\nThis can\
    \ be done with broadcasting by finding the minimum and maximum elements of the\
    \ array and then finding the difference between them:\n<code>\njulia> a = [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]\njulia> minimum(a) - maximum(a)\n2-element Array{Float64,1}:\n\
    \ 2.2\n 2.0\n</code>\n<|/ a tags=julia,arrays |>\n<| a dscore=2 |>\nI came up\
    \ with a solution that is quite similar to what was proposed in the other answers,\
    \ but I wanted to make it a bit more general. \n<code>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2mt3wznv.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp2mt3wznv.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[end]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a list of numbers and returns the sum of the squares of the numbers in the list.\
    \ \nWrite a second function that takes a list of numbers and returns the sum of\
    \ the squares of the numbers in the list. \nWrite a third function that takes\
    \ a list of numbers and returns the sum of the squares of the numbers in the list.\
    \ \nWrite a fourth function that takes a list of numbers and returns the sum of\
    \ the squares of the numbers in the list. \nWrite a fifth function that takes\
    \ a list of numbers and returns the sum of the squares of the numbers in the list.\
    \ \nWrite a sixth function that takes a list of numbers and returns the sum of\
    \ the squares of the numbers in the list. \nWrite a seventh function that takes\
    \ a list of numbers and returns the sum of the squares of the numbers in the list.\
    \ \nWrite a eighth function that takes a list of numbers and returns the sum of\
    \ the squares of the numbers in the list. \nWrite a ninth function that takes\
    \ a list of numbers and returns the sum of the squares of the numbers in the list.\
    \ \nWrite a tenth function that takes a list of numbers and returns the sum of\
    \ the squares of the numbers in the list. \nWrite a eleventh function that takes\
    \ a list of numbers and returns the sum of the squares of the numbers in the list.\
    \ \nWrite a twelfth function that takes a list of numbers and returns the sum\
    \ of the squares of the numbers in the list. \nWrite a thirteenth function that\
    \ takes a list of numbers and returns the sum of the squares of the numbers in\
    \ the list. \nWrite a fourteenth function that takes a list of numbers and returns\
    \ the sum of the squares of the numbers in the list. \nWrite a fifteenth function\
    \ that takes a list of numbers and returns the sum of the squares of the numbers\
    \ in the list. \nWrite a sixteenth function that takes a list of numbers and returns\
    \ the sum of the squares of the numbers in the list. \nWrite a seventeenth function\
    \ that takes a list of numbers and returns the sum of the squares of the numbers\
    \ in the list. \nWrite a eighteenth function that takes a list of numbers and\
    \ returns the sum of the squares of the numbers in the list. \nWrite a nineteenth\
    \ function that takes a list of numbers and returns the sum of the squares of\
    \ the numbers in the list. \nWrite a twentieth function that takes a list of numbers\
    \ and returns the sum of the squares of the numbers in the list. \nWrite a twenty-first\
    \ function that takes a list of numbers and returns the sum of the squares of\
    \ the numbers in the list. \nWrite a twenty-second function that takes a list\
    \ of numbers and returns the sum of the squares of the number\nusing Test\n\n\
    @testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpk39my6ao.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpk39my6ao.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n\
    \    for number in numbers[2:end]\n        if number < smallest_number\n     \
    \       smallest_number = number\n        elseif number > largest_number\n   \
    \         largest_number = number\n        end\n    end\n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<text>\nNow let's test our function by comparing\
    \ it to our known answers:\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpiikzad_7.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpiikzad_7.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    smallest = numbers[1]\n    largest = numbers[1]\n    for n in\
    \ numbers[2:end]\n        if n < smallest\n            smallest = n\n        elseif\
    \ n > largest\n            largest = n\n        else\n            return smallest,\
    \ largest\n        end\n    end\n    return smallest, largest\nend\n</cell>\n\
    <text>\nNow let's test the function by finding the closest element to each of\
    \ the numbers in the list $[1.0, 2.0, 3.0, 4.0, 5.0, 2.2]$.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmbnal4xl.jl:22\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpmbnal4xl.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    minimum = numbers[1]\n    maximum = numbers[1]\n    for i in\
    \ numbers[2:end]\n        if i < minimum\n            minimum = i\n        elseif\
    \ i > maximum\n            maximum = i\n        else\n            return minimum,\
    \ maximum\n    end\n    return minimum, maximum\nend\n</code>\n<|/ a tags=julia\
    \ |>\n<| c |>\nThis does not seem to work. `minimum` and `maximum` are not defined\
    \ in the function scope. Also, `minimum` and `maximum` are not defined in the\
    \ function scope. Also, `minimum` and `maximum` are not defined in the function\
    \ scope. Also, `minimum` and `maximum` are not defined in the function scope.\
    \ Also, `minimum` and `maximum` are not defined in the function scope. Also, `minimum`\
    \ and `maximum` are not defined in the function scope. Also, `minimum` and `maximum`\
    \ are not defined in the function scope. Also, `minimum` and `maximum` are not\
    \ defined in the function scope. Also, `minimum` and `maximum` are not defined\
    \ in the function scope. Also, `minimum` and `maximum` are not defined in the\
    \ function scope. Also, `minimum` and `maximum` are not defined in the function\
    \ scope. Also, `minimum` and `maximum` are not defined in the function scope.\
    \ Also, `minimum` and `maximum` are not defined in the function scope. Also, `minimum`\
    \ and `maximum` are not defined in the function scope. Also, `minimum` and `maximum`\
    \ are not defined in the function scope. Also, `minimum` and `maximum` are not\
    \ defined in the function scope. Also, `minimum` and `maximum` are not defined\
    \ in the function scope. Also, `minimum` and `maximum` are not defined in the\
    \ function scope. Also, `minimum` and `maximum` are not defined in the function\
    \ scope. Also, `minimum` and `maximum` are not defined in the function scope.\
    \ Also, `minimum` and `maximum` are not defined in the function scope. Also, `minimum`\
    \ and `maximum` are not defined in the function scope. Also, `minimum` and `maximum`\
    \ are not defined in the function scope. Also, `minimum` and `maximum` are not\
    \ defined in the function scope. Also, `minimum` and `maximum` are not defined\
    \ in the function scope. Also, `minimum` and `maximum` are not defined in the\
    \ function scope. Also, `minimum` and `maximum` are not defined in the function\
    \ scope. Also, `minimum` and `maximum` are not defined in the function scope.\
    \ Also, `minimum` and `maximum` are not defined in the function scope. Also, `minimum`\
    \ and `maximum` are not defined in the function scope. Also, `minimum` and `maximum`\
    \ are not defined in the function scope. Also, `minimum` and `maximum` are not\
    \ defined in the function scope. Also, `minimum` and `maximum` are not defined\
    \ in the function scope. Also, `minimum` and `maximum` are not defined in the\
    \ function scope. Also, `minimum` and `maximum` are not defined in the function\
    \ scope. Also, `minimum` and `maximum` are not defined in the function scope.\
    \ Also, `minimum` and `maximum` are not defined \nusing Test\n\n@testset begin\n\
    \ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0,\
    \ 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t\
    @test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8rtvgqr3.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp8rtvgqr3.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest = numbers[1]\n    largest = numbers[1]\n    for\
    \ n in numbers[2:end]\n        if n < smallest\n            smallest = n\n   \
    \     elseif n > largest\n            largest = n\n        end\n    end\n    return\
    \ (smallest, largest)\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes in a list of numbers and returns the number of elements that are less\
    \ than the mean of the list.\nThe mean is defined as the sum of the numbers divided\
    \ by the number of elements. If the list is empty the mean is undefined.\nThe\
    \ function should raise an error if the list is empty or if the number of elements\
    \ is less than 2.\nThe function should raise an error if the list is empty.\n\
    The function should raise an error if the number of elements is less than 2.\n\
    The function should raise an error if the list is empty.\nThe function should\
    \ raise an error if the number of elements is less than 2.\nThe function should\
    \ raise an error if the list is empty.\nThe function should raise an error if\
    \ the number of elements is less than 2.\nThe function should raise an error if\
    \ the list is empty.\nThe function should raise an error if the number of elements\
    \ is less than 2.\nThe function should raise an error if the list is empty.\n\
    The function should raise an error if the number of elements is less than 2.\n\
    The function should raise an error if the list is empty.\nThe function should\
    \ raise an error if the number of elements is less than 2.\nThe function should\
    \ raise an error if the list is empty.\nThe function should raise an error if\
    \ the number of elements is less than 2.\nThe function should raise an error if\
    \ the list is empty.\nThe function should raise an error if the number of elements\
    \ is less than 2.\nThe function should raise an error if the list is empty.\n\
    The function should raise an error if the number of elements is less than 2.\n\
    The function should raise an error if the list is empty.\nThe function should\
    \ raise an error if the number of elements is less than 2.\nThe function should\
    \ raise an error if the list is empty.\nThe function should raise an error if\
    \ the number of elements is less than 2.\nThe function should raise an error if\
    \ the list is empty.\nThe function should raise an error if the number of elements\
    \ is less than 2.\nThe function should raise an error if the list is empty.\n\
    The function should raise an error if the number of elements is less than 2.\n\
    The function should raise an error if the list is empty.\nThe function should\
    \ raise an error if the number of elements is less than 2.\nThe function should\
    \ raise an error if the list is empty.\nThe function should raise an error if\
    \ the number of elements is less than 2.\nThe function should raise an error if\
    \ the list is empty.\nThe function should raise an error if the number of elements\
    \ is less than 2.\nThe function should raise an error if the list is empty.\n\
    The function should raise an error if the number of elements is less than 2.\n\
    The function should raise an error if the list is empty.\nThe function should\
    \ raise an error if the number of elements is less than 2.\nThe function should\
    \ raise an error if the list is empty.\nThe function should \nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpurnfu8wa.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpurnfu8wa.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    minimum = numbers[1]\n    maximum = numbers[1]\n    \n\
    \    for number in numbers[2:end]\n        if number < minimum\n            minimum\
    \ = number\n        elseif number > maximum\n            maximum = number\n  \
    \      end\n    end\n    \n    return (minimum, maximum)\nend\n</cell>\n<text>\n\
    Now let's test our function\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpasztu3gu.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpasztu3gu.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[end]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a vector of numbers and returns the sum of the squares of the numbers in the\
    \ vector.\n>>> sum_square_of_numbers([1.0, 2.0, 3.0, 4.0, 5.0, 6.0])\n25.0\n>>>\
    \ sum_square_of_numbers([1.0, 2.0, 3.0, 4.0, 5.0, 6.0])\n25.0\n>>> sum_square_of_numbers([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 6.0])\n25.0\n>>> sum_square_of_numbers([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 6.0])\n25.0\n>>> sum_square_of_numbers([1.0, 2.0, 3.0, 4.0, 5.0, 6.0])\n\
    25.0\n>>> sum_square_of_numbers([1.0, 2.0, 3.0, 4.0, 5.0, 6.0])\n25.0\n>>> sum_square_of_numbers([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 6.0])\n25.0\n>>> sum_square_of_numbers([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 6.0])\n25.0\n>>> sum_square_of_numbers([1.0, 2.0, 3.0, 4.0, 5.0, 6.0])\n\
    25.0\n>>> sum_square_of_numbers([1.0, 2.0, 3.0, 4.0, 5.0, 6.0])\n25.0\n>>> sum_square_of_numbers([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 6.0])\n25.0\n>>> sum_square_of_numbers([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 6.0])\n25.0\n>>> sum_square_of_numbers([1.0, 2.0, 3.0, 4.0, 5.0, 6.0])\n\
    25.0\n>>> sum_square_of_numbers([1.0, 2.0, 3.0, 4.0, 5.0, 6.0])\n25.0\n>>> sum_square_of_numbers([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 6.0])\n25.0\n>>> sum_square_of_numbers([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 6.0])\n25.0\n>>> sum_square_of_numbers([1.0, 2.0, 3.0, 4.0, 5.0, 6.0])\n\
    25.0\n>>> sum_square_of_numbers([1.0, 2.0, 3.0, 4.0, 5.0, 6.0])\n25.0\n>>> sum_square_of_numbers([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 6.0])\n25.0\n>>> sum_square_of_numbers([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 6.0])\n25.0\n>>> sum_square_of_numbers([1.0, 2.0, 3.0, 4.0, 5.0, 6.0])\n\
    25.0\n>>> sum_square_of_numbers([1.0, 2.0, 3.0, 4.0, 5.0, 6.0])\n25\nusing Test\n\
    \n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4z_kvttp.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp4z_kvttp.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpn25tyfng.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpn25tyfng.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpchb6s7bt.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpchb6s7bt.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest = numbers[1]\n    largest = numbers[1]\n    for\
    \ i in numbers[2:end]\n        if i < smallest\n            smallest = i\n   \
    \     elseif i > largest\n            largest = i\n        end\n    end\n    return\
    \ smallest, largest\nend\n</cell>\n<text>\nNow let's test our new function by\
    \ calling it with the numbers we created earlier.\nusing Test\n\n@testset begin\n\
    \ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0,\
    \ 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t\
    @test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmputojvv86.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmputojvv86.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<text>\nNow let's test our function by comparing\
    \ it to our known answers:\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpvzlsk5xg.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpvzlsk5xg.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest = numbers[1]\n    largest = numbers[1]\n    for\
    \ number in numbers[2:end]\n        if number < smallest \n            smallest\
    \ = number\n        elseif number > largest\n            largest = number\n  \
    \      end\n    end\n    return (smallest, largest)\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that will take a list of numbers and return a new list with\
    \ only the numbers that are greater than the average of the list.\nThe function\
    \ should take a list of numbers and return a new list of numbers that are greater\
    \ than the average of the list.\nThe function should return an empty list if the\
    \ list is empty.\nThe function should return an empty list if the list contains\
    \ only a single number.\nThe function should return an empty list if the list\
    \ contains only two numbers.\nThe function should return an empty list if the\
    \ list contains only three numbers.\nThe function should return an empty list\
    \ if the list contains only four numbers.\nThe function should return an empty\
    \ list if the list contains only five numbers.\nThe function should return an\
    \ empty list if the list contains only six numbers.\nThe function should return\
    \ an empty list if the list contains only seven numbers.\nThe function should\
    \ return an empty list if the list contains only eight numbers.\nThe function\
    \ should return an empty list if the list contains only nine numbers.\nThe function\
    \ should return an empty list if the list contains only ten numbers.\nThe function\
    \ should return an empty list if the list contains only eleven numbers.\nThe function\
    \ should return an empty list if the list contains only twelve numbers.\nThe function\
    \ should return an empty list if the list contains only thirteen numbers.\nThe\
    \ function should return an empty list if the list contains only fourteen numbers.\n\
    The function should return an empty list if the list contains only fifteen numbers.\n\
    The function should return an empty list if the list contains only sixteen numbers.\n\
    The function should return an empty list if the list contains only seventeen numbers.\n\
    The function should return an empty list if the list contains only eighteen numbers.\n\
    The function should return an empty list if the list contains only nineteen numbers.\n\
    The function should return an empty list if the list contains only twenty numbers.\n\
    The function should return an empty list if the list contains only twenty-one\
    \ numbers.\nThe function should return an empty list if the list contains only\
    \ twenty-two numbers.\nThe function should return an empty list if the list contains\
    \ only twenty-three numbers.\nThe function should return an empty list if the\
    \ list contains only twenty-four numbers.\nThe function should return an empty\
    \ list if the list contains only twenty-five numbers.\nThe function should return\
    \ an empty list if the list contains only twenty-six numbers.\nThe function should\
    \ return an empty list if the list \nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpjer5t0ao.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpjer5t0ao.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    closest_elements = numbers[1]\n    closest_distance = numbers[1]\n\
    \    for element in numbers[2:end]\n        distance = abs(element - closest_elements)\n\
    \        if distance < closest_distance\n            closest_elements = element\n\
    \            closest_distance = distance\n        end\n    end\n    return closest_elements,\
    \ closest_distance\nend\n</cell>\n<text>\nNow let's test the function by finding\
    \ the closest element to each of the numbers in the list.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2982c5k5.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp2982c5k5.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    minimum = minimum(numbers)\n    maximum = maximum(numbers)\n\
    \    \n    if minimum == maximum\n        return (minimum, minimum)\n    end\n\
    \    \n    closest_element = (minimum + maximum) / 2\n    \n    if numbers[closest_element]\
    \ == minimum\n        return (closest_element, minimum)\n    end\n    \n    if\
    \ numbers[closest_element] == maximum\n        return (closest_element, maximum)\n\
    \    end\n    \n    if numbers[closest_element] < minimum\n        return (closest_element,\
    \ minimum)\n    end\n    \n    if numbers[closest_element] > maximum\n       \
    \ return (closest_element, maximum)\n    end\n    \n    return (closest_element,\
    \ closest_element)\nend\n</cell>\n<text>\nNow let's test our function by comparing\
    \ it to our previous implementation:\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpwqb2qfk7.jl:37\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpwqb2qfk7.jl:37\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    smallest_number = numbers[1]\n    largest_number = numbers[end]\n\
    \    for number in numbers[2:end]\n        if number < smallest_number\n     \
    \       smallest_number = number\n        elseif number > largest_number\n   \
    \         largest_number = number\n        end\n    end\n    return (smallest_number,\
    \ largest_number)\nend\n</code>\n<|/ a dscore=2 |>\n<| a |>\nI wrote a function\
    \ that returns the closest element in a given array to a given number:\n<code>\n\
    using Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpi9foe1xv.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpi9foe1xv.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[end]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<text>\nNow let's test our function by comparing\
    \ it to our expectations:\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3m5jlef4.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp3m5jlef4.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    minimum = numbers[1]\n    maximum = numbers[1]\n    for i in\
    \ numbers[2:end]\n        if i < minimum\n            minimum = i\n        elseif\
    \ i > maximum\n            maximum = i\n        end\n    end\n    return (minimum,\
    \ maximum)\nend\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\nusing Test\n\
    \n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmplazgkty_.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmplazgkty_.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n\
    \    for number in numbers[2:end]\n        if number < smallest_number\n     \
    \       smallest_number = number\n        elseif number > largest_number\n   \
    \         largest_number = number\n        end\n    end\n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.0>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpfxnnimqh.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpfxnnimqh.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n\
    \    for number in numbers[2:end]\n        if number < smallest_number\n     \
    \       smallest_number = number\n        elseif number > largest_number\n   \
    \         largest_number = number\n        else\n            break\n    end\n\
    \    return smallest_number, largest_number\nend\n</cell>\n<text>\nExercise: Write\
    \ a function that takes a list of numbers and returns the number of elements that\
    \ are less than or equal to each other.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpab1hf596.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpab1hf596.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n\
    \    for number in numbers[2:end]\n        if number < smallest_number\n     \
    \       smallest_number = number\n        elseif number > largest_number\n   \
    \         largest_number = number\n        else\n            return smallest_number,\
    \ largest_number\n        end\n    end\n    return smallest_number, largest_number\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4fn50649.jl:22\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp4fn50649.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<text>\nNow let's test our function by calling\
    \ it on some test data:\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpod8e0n8w.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpod8e0n8w.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n\
    \    for number in numbers[2:end]\n        if number < smallest_number\n     \
    \       smallest_number = number\n        elseif number > largest_number\n   \
    \         largest_number = number\n        else\n            return smallest_number,\
    \ largest_number\n        end\n    end\n    return smallest_number, largest_number\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that takes a list of numbers\
    \ and returns the average of all the numbers in the list. \nThe function should\
    \ raise an error if the list is empty.\nThe function should raise an error if\
    \ the list contains non-numbers.\nThe function should raise an error if the list\
    \ contains two numbers that are the same.\nThe function should raise an error\
    \ if the list contains two numbers that are not the same.\nThe function should\
    \ raise an error if the list contains two numbers that are the same and are less\
    \ than the other number.\nThe function should raise an error if the list contains\
    \ two numbers that are the same and are greater than the other number.\nThe function\
    \ should raise an error if the list contains two numbers that are the same and\
    \ are equal to the other number.\nThe function should raise an error if the list\
    \ contains two numbers that are the same and are less than the other number but\
    \ greater than the other number.\nThe function should raise an error if the list\
    \ contains two numbers that are the same and are greater than the other number\
    \ but less than the other number.\nThe function should raise an error if the list\
    \ contains two numbers that are the same and are equal to the other number but\
    \ less than the other number.\nThe function should raise an error if the list\
    \ contains two numbers that are the same and are greater than the other number\
    \ but greater than the other number.\nThe function should raise an error if the\
    \ list contains two numbers that are the same and are less than the other number\
    \ but greater than the other number.\nThe function should raise an error if the\
    \ list contains two numbers that are the same and are greater than the other number\
    \ but less than the other number.\nThe function should raise an error if the list\
    \ contains two numbers that are the same and are equal to the other number but\
    \ less than the other number.\nThe function should raise an error if the list\
    \ contains two numbers that are the same and are less than the other number but\
    \ greater than the other number.\nThe function should raise an error if the list\
    \ contains two numbers that are the same and are greater than the other number\
    \ but greater than the other number.\nThe function should raise an error if the\
    \ list contains two numbers that are the same and are equal to the other number\
    \ but greater than the other number.\nThe function should raise an error if the\
    \ list contains two numbers that are the same and are greater than the other number\
    \ but less than the other number.\nThe function should raise an error if the list\
    \ contains two numbers that are the same and are less than the other number but\
    \ greater than the other number.\nThe function should raise an error if the list\
    \ contains two numbers that are the same and are equal to the other number but\
    \ greater than the other number.\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp0gxldp7a.jl:22\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp0gxldp7a.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n\
    \    for number in numbers[2:end]\n        if number < smallest_number\n     \
    \       smallest_number = number\n        elseif number > largest_number\n   \
    \         largest_number = number\n        else\n            break\n    end\n\
    \    return (smallest_number, largest_number)\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpz4hei5__.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpz4hei5__.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n\
    \    for number in numbers[2:end]\n        if number < smallest_number\n     \
    \       smallest_number = number\n        elseif number > largest_number\n   \
    \         largest_number = number\n        end\n    end\n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpep14mlf1.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpep14mlf1.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    closest_numbers = numbers[1]\n    closest_number = numbers[1]\n\
    \    \n    for number in numbers[2:end]\n        if number < closest_number\n\
    \            closest_number = number\n        elseif number > closest_number\n\
    \            closest_numbers = number\n        end\n    end\n    \n    return\
    \ closest_numbers, closest_number\nend\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0])\n</cell>\n<text>\nExercise\nWrite a function that\
    \ takes in a vector of numbers and returns the sum of the squares of the numbers\
    \ in that vector. \nWrite a function that takes in a vector of numbers and returns\
    \ the sum of the squares of the numbers in that vector. \nWrite a function that\
    \ takes in a vector of numbers and returns the sum of the squares of the numbers\
    \ in that vector. \nWrite a function that takes in a vector of numbers and returns\
    \ the sum of the squares of the numbers in that vector. \nWrite a function that\
    \ takes in a vector of numbers and returns the sum of the squares of the numbers\
    \ in that vector. \nWrite a function that takes in a vector of numbers and returns\
    \ the sum of the squares of the numbers in that vector. \nWrite a function that\
    \ takes in a vector of numbers and returns the sum of the squares of the numbers\
    \ in that vector. \nWrite a function that takes in a vector of numbers and returns\
    \ the sum of the squares of the numbers in that vector. \nWrite a function that\
    \ takes in a vector of numbers and returns the sum of the squares of the numbers\
    \ in that vector. \nWrite a function that takes in a vector of numbers and returns\
    \ the sum of the squares of the numbers in that vector. \nWrite a function that\
    \ takes in a vector of numbers and returns the sum of the squares of the numbers\
    \ in that vector. \nWrite a function that takes in a vector of numbers and returns\
    \ the sum of the squares of the numbers in that vector. \nWrite a function that\
    \ takes in a vector of numbers and returns the sum of the squares of the numbers\
    \ in that vector. \nWrite a function that takes in a vector of numbers and returns\
    \ the sum of the squares of the numbers in that vector. \nWrite a function that\
    \ takes in a vector of numbers and returns the sum of the squares of the numbers\
    \ in that vector. \nWrite a function that takes in a vector of numbers and returns\
    \ the sum of the squares of the numbers in that vector. \nWrite a function that\
    \ takes in a vector of numbers and returns the sum of the squares of the numbers\
    \ in that vector. \nWrite a function that takes in a vector of numbers and returns\
    \ the sum of the squares of the numbers in that vector. \nWrite a function that\
    \ takes in a vector of numbers and returns the sum of the squares of the numbers\
    \ in that vector. \nWrite a function that takes in a vector of numbers and returns\
    \ the sum of the squares of the numbers in that vector. \nWrite a function that\
    \ takes in a vector of numbers and returns the sum of the squares of the \nusing\
    \ Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphpzr8a22.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmphpzr8a22.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest = numbers[1]\n    largest = numbers[1]\n    for\
    \ n in numbers[2:end]\n        if n < smallest\n            smallest = n\n   \
    \     elseif n > largest\n            largest = n\n        end\n    end\n    return\
    \ (smallest, largest)\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ will take a vector of numbers and a number as inputs and will return the index\
    \ of the number in the vector. \nIf the number is not in the vector then return\
    \ -1.\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t\
    @test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8hsv_bd5.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp8hsv_bd5.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    smallest = numbers[1]\n    largest = numbers[1]\n    for n in\
    \ numbers[2:end]\n        if n < smallest\n            smallest = n\n        elseif\
    \ n > largest\n            largest = n\n        else\n            return smallest,\
    \ largest\n        end\n    end\n    return smallest, largest\nend\n</code>\n\
    <|/ a tags=julia,arrays,sorting |>\n<| a tags=julia,arrays,sorting |>\nI came\
    \ up with this solution:\n<code>\nusing Test\n\n@testset begin\n\ncandidate =\
    \ find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) ==\
    \ (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t\
    @test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpxdn3uwfe.jl:22\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpxdn3uwfe.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest = numbers[1]\n    largest = numbers[1]\n    for\
    \ number in numbers[2:end]\n        if number < smallest\n            smallest\
    \ = number\n        elseif number > largest\n            largest = number\n  \
    \      end\n    end\n    return (smallest, largest)\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9qtsg4gi.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp9qtsg4gi.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[0]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<text>\nNow let's test our new function using\
    \ our test data.\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpwit_6j_x.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpwit_6j_x.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    minimum = numbers[1]\n    maximum = numbers[1]\n    for i in\
    \ numbers[2:end]\n        if i < minimum\n            minimum = i\n        elseif\
    \ i > maximum\n            maximum = i\n        else\n            minimum = minimum\n\
    \            maximum = maximum\n        end\n    end\n    return (minimum, maximum)\n\
    end\n</code>\n<|/ a tags=julia,arrays |>\n<| c |>\nThis doesn't seem to work if\
    \ the numbers are in descending order. For example, `find_closest_elements([2.2,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0])` returns `(2.0, 2.0)` instead of `(2.0, 2.2)`.\n<|/\
    \ c |>\n<| c |>\nYes, I realized that after I posted my comment. I've edited my\
    \ answer to fix the bug.\n<|/ c |>\n<| a dscore=3 |>\nI came up with a solution\
    \ using sort! and findfirst:\n<code>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpt435livl.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpt435livl.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    minimum = numbers[1]\n    maximum = numbers[1]\n    for i in\
    \ 2:length(numbers)\n        if numbers[i] < minimum\n            minimum = numbers[i]\n\
    \        elseif numbers[i] > maximum\n            maximum = numbers[i]\n     \
    \   else\n            minimum = min(minimum, numbers[i])\n            maximum\
    \ = max(maximum, numbers[i])\n        end\n    end\n    return minimum, maximum\n\
    end\n</code>\n<|/ a dscore=1 |>\n<| a |>\n<code>\nusing Test\n\n@testset begin\n\
    \ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0,\
    \ 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t\
    @test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpi7xentyh.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpi7xentyh.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    smallest = numbers[1]\n    largest = numbers[1]\n    for n in\
    \ numbers[2:end]\n        if n < smallest\n            smallest = n\n        elseif\
    \ n > largest\n            largest = n\n        else\n            return smallest,\
    \ largest\n        end\n    end\n    return smallest, largest\nend\n</cell>\n\
    <code language=julia-1.4>\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp1v0915ds.jl:22\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp1v0915ds.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpyk4h2147.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpyk4h2147.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n\
    \    \n    for i in 2:length(numbers)\n        if numbers[i] < smallest_number\n\
    \            smallest_number = numbers[i]\n        elseif numbers[i] > largest_number\n\
    \            largest_number = numbers[i]\n        end\n    end\n    \n    return\
    \ (smallest_number, largest_number)\nend\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that takes in a list of numbers and returns the sum of the squares\
    \ of the numbers in the list.\nThe function should raise an error if the list\
    \ is empty.\nThe function should raise an error if the list contains non-numeric\
    \ elements.\nThe function should raise an error if the list contains negative\
    \ numbers.\nThe function should raise an error if the list contains numbers greater\
    \ than 100.\nThe function should raise an error if the list contains numbers less\
    \ than 0.\nThe function should raise an error if the list contains numbers greater\
    \ than or equal to 0.\nThe function should raise an error if the list contains\
    \ numbers less than or equal to 0.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpyzh2n050.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpyzh2n050.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    minimum = numbers[1]\n    maximum = numbers[1]\n    for number\
    \ in numbers[2:end]\n        if number < minimum\n            minimum = number\n\
    \        elseif number > maximum\n            maximum = number\n        else\n\
    \            return minimum, maximum\n    end\n    return minimum, maximum\nend\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\nHere's a solution using Julia's\
    \ built-in function findmin:\n<code>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpo8wpw74g.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpo8wpw74g.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_diff = Float64(0)\n    smallest_number = numbers[1]\n\
    \    \n    for number in numbers[2:end]\n        diff = abs(number - smallest_number)\n\
    \        if diff < smallest_diff\n            smallest_diff = diff\n         \
    \   smallest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ smallest_diff)\nend\n</cell>\n<text>\nNow let's test our function by finding\
    \ the closest element to each of our test vectors.\nusing Test\n\n@testset begin\n\
    \ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0,\
    \ 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t\
    @test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp6ap1ynmq.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp6ap1ynmq.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<text>\nThe function above is called find_closest_elements\
    \ and is defined in the file find_closest_elements.jl. This function takes one\
    \ argument numbers which is a vector of numbers (of length at least two). The\
    \ function returns the smallest and largest number in the vector in order (smaller\
    \ number, larger number).\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8x5q0iw_.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp8x5q0iw_.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[end]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<text>\nNow let's test our new function by comparing\
    \ it to our old function.\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpoihw36tv.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpoihw36tv.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    biggest_number = numbers[1]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > biggest_number\n\
    \            biggest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ biggest_number)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4hjmvup1.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp4hjmvup1.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[end]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<text>\nExercise 4\nWrite a function that takes\
    \ a list of numbers and returns the sum of the squares of the numbers in that\
    \ list.\nWrite a function that takes a list of numbers and returns the sum of\
    \ the squares of the numbers in that list.\nWrite a function that takes a list\
    \ of numbers and returns the sum of the squares of the numbers in that list.\n\
    Write a function that takes a list of numbers and returns the sum of the squares\
    \ of the numbers in that list.\nWrite a function that takes a list of numbers\
    \ and returns the sum of the squares of the numbers in that list.\nWrite a function\
    \ that takes a list of numbers and returns the sum of the squares of the numbers\
    \ in that list.\nWrite a function that takes a list of numbers and returns the\
    \ sum of the squares of the numbers in that list.\nWrite a function that takes\
    \ a list of numbers and returns the sum of the squares of the numbers in that\
    \ list.\nWrite a function that takes a list of numbers and returns the sum of\
    \ the squares of the numbers in that list.\nWrite a function that takes a list\
    \ of numbers and returns the sum of the squares of the numbers in that list.\n\
    Write a function that takes a list of numbers and returns the sum of the squares\
    \ of the numbers in that list.\nWrite a function that takes a list of numbers\
    \ and returns the sum of the squares of the numbers in that list.\nWrite a function\
    \ that takes a list of numbers and returns the sum of the squares of the numbers\
    \ in that list.\nWrite a function that takes a list of numbers and returns the\
    \ sum of the squares of the numbers in that list.\nWrite a function that takes\
    \ a list of numbers and returns the sum of the squares of the numbers in that\
    \ list.\nWrite a function that takes a list of numbers and returns the sum of\
    \ the squares of the numbers in that list.\nWrite a function that takes a list\
    \ of numbers and returns the sum of the squares of the numbers in that list.\n\
    Write a function that takes a list of numbers and returns the sum of the squares\
    \ of the numbers in that list.\nWrite a function that takes a list of numbers\
    \ and returns the sum of the squares of the numbers in that list.\nWrite a function\
    \ that takes a list of numbers and returns the sum of the squares of the numbers\
    \ in that list.\nWrite a function that takes a list of numbers and returns the\
    \ sum of the squares of the numbers in that list.\nWrite a function that takes\
    \ a list of numbers and returns the sum of the squares of the numbers in that\
    \ list.\nWrite a function that takes a list of numbers and returns the sum of\
    \ the squares of the numbers in that list.\nWrite a function that takes a list\
    \ of numbers and returns the sum of the squares of the numbers in that list.\n\
    Write a function that takes a list of numbers and returns the sum of the squares\
    \ of the numbers in that list.\nWrite a function that takes a list of numbers\
    \ and \nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t\
    @test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpbgwpw7kd.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpbgwpw7kd.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[0]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmptfwdrefu.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmptfwdrefu.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    smallest_number = numbers[1]\n    largest_number = numbers[0]\n\
    \    for number in numbers[2:end]\n        if number < smallest_number\n     \
    \       smallest_number = number\n        elseif number > largest_number\n   \
    \         largest_number = number\n        end\n    end\n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<text>\nNow let's try it out on some numbers:\n\
    using Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpf6_gfe83.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpf6_gfe83.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<text>\nNow let's test our function by comparing\
    \ it to our original function and seeing how it performs.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp5n4jnrhw.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp5n4jnrhw.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    smallest_number = numbers[1]\n    largest_number = numbers[end]\n\
    \    for i in 2:length(numbers)\n        if numbers[i] < smallest_number\n   \
    \         smallest_number = numbers[i]\n        elseif numbers[i] > largest_number\n\
    \            largest_number = numbers[i]\n        end\n    end\n    return (smallest_number,\
    \ largest_number)\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work\
    \ if there are two numbers that are equally close.\n<|/ c |>\n<| c |>\nYes, I\
    \ noticed that and fixed it.  Thanks.\n<|/ c |>\n<| a |>\n<code>\nusing Test\n\
    \n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpl6z3vg1r.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpl6z3vg1r.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest = numbers[1]\n    largest = numbers[1]\n    for\
    \ n in numbers[2:end]\n        if n < smallest\n            smallest = n\n   \
    \     elseif n > largest\n            largest = n\n        end\n    end\n    return\
    \ (smallest, largest)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n\
    @testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp62_ogo_1.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp62_ogo_1.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    minimum = minimum(numbers)\n    maximum = maximum(numbers)\n\
    \    minimum_index = index(minimum, numbers)\n    maximum_index = index(maximum,\
    \ numbers)\n    return (minimum[minimum_index], maximum[maximum_index])\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpa79rvich.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpa79rvich.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_diff = Float64(0)\n    smallest_number = numbers[1]\n\
    \    \n    for number in numbers[2:end]\n        diff = abs(number - smallest_number)\n\
    \        if diff < smallest_diff\n            smallest_diff = diff\n         \
    \   smallest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ smallest_number)\nend\n</cell>\n<text>\nNow let's test our new function with\
    \ some test cases:\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpd37qweqi.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpd37qweqi.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.4>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpy1og5q3e.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpy1og5q3e.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest = numbers[1]\n    largest = numbers[1]\n    for\
    \ n in numbers[2:end]\n        if n < smallest\n            smallest = n\n   \
    \     elseif n > largest\n            largest = n\n        end\n    end\n    return\
    \ (smallest, largest)\nend\n</cell>\n<text>\nNow let's test our function by comparing\
    \ it to our known answers:\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp476jky9b.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp476jky9b.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    biggest_number = numbers[1]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > biggest_number\n\
    \            biggest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ biggest_number)\nend\n</cell>\n<text>\nNow let's test our function by finding\
    \ the closest element to each of our test numbers.\nusing Test\n\n@testset begin\n\
    \ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0,\
    \ 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t\
    @test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpwwcg0692.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpwwcg0692.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a vector of numbers and returns the sum of the squares of the numbers in that\
    \ vector.\n>>> sum_square_of_numbers([1.0, 2.0, 3.0, 4.0, 5.0, 6.0])\n25.0\n>>>\
    \ sum_square_of_numbers([1.0, 2.0, 3.0, 4.0, 5.0, 6.0])\n25.0\n>>> sum_square_of_numbers([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 6.0])\n25.0\n>>> sum_square_of_numbers([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 6.0])\n25.0\n>>> sum_square_of_numbers([1.0, 2.0, 3.0, 4.0, 5.0, 6.0])\n\
    25.0\n>>> sum_square_of_numbers([1.0, 2.0, 3.0, 4.0, 5.0, 6.0])\n25.0\n>>> sum_square_of_numbers([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 6.0])\n25.0\n>>> sum_square_of_numbers([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 6.0])\n25.0\n>>> sum_square_of_numbers([1.0, 2.0, 3.0, 4.0, 5.0, 6.0])\n\
    25.0\n>>> sum_square_of_numbers([1.0, 2.0, 3.0, 4.0, 5.0, 6.0])\n25.0\n>>> sum_square_of_numbers([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 6.0])\n25.0\n>>> sum_square_of_numbers([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 6.0])\n25.0\n>>> sum_square_of_numbers([1.0, 2.0, 3.0, 4.0, 5.0, 6.0])\n\
    25.0\n>>> sum_square_of_numbers([1.0, 2.0, 3.0, 4.0, 5.0, 6.0])\n25.0\n>>> sum_square_of_numbers([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 6.0])\n25.0\n>>> sum_square_of_numbers([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 6.0])\n25.0\n>>> sum_square_of_numbers([1.0, 2.0, 3.0, 4.0, 5.0, 6.0])\n\
    25.0\n>>> sum_square_of_numbers([1.0, 2.0, 3.0, 4.0, 5.0, 6.0])\n25.0\n>>> sum_square_of_numbers([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 6.0])\n25.0\n>>> sum_square_of_numbers([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 6.0])\n25.0\n>>> sum_square_of_numbers([1.0, 2.0, 3.0, 4.0, 5.0, 6.0])\n\
    25.0\n>>> sum_square_of_numbers([1.0, 2.0, 3.0, 4.0, 5.0, 6.0])\n25\nusing Test\n\
    \n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpoq59bd5c.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpoq59bd5c.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    closest_numbers = numbers[1]\n    closest_number = numbers[1]\n\
    \    \n    for number in numbers[2:end]\n        if number < closest_number\n\
    \            closest_number = number\n        elseif number > closest_number\n\
    \            closest_numbers = number\n        end\n    end\n    \n    return\
    \ closest_numbers, closest_number\nend\n</cell>\n<code language=julia-1.4>\nfind_closest_elements([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n</cell>\n<text>\nExercise: Write a function that\
    \ takes in a list of numbers and returns the sum of the squares of the numbers\
    \ in that list.\nHint: Use a for loop to iterate through the list.\nusing Test\n\
    \n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpducv_4bl.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpducv_4bl.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    minimum = numbers[1]\n    maximum = numbers[1]\n    for i in\
    \ 2:length(numbers)\n        if numbers[i] < minimum\n            minimum = numbers[i]\n\
    \        elseif numbers[i] > maximum\n            maximum = numbers[i]\n     \
    \   else\n            return minimum, maximum\n        end\n    end\n    return\
    \ minimum, maximum\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ in a vector of numbers and returns the sum of the squares of the numbers in\
    \ the vector.\nWrite a function that takes in a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector.\nWrite a function that\
    \ takes in a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector.\nWrite a function that takes in a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector.\nWrite a function that\
    \ takes in a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector.\nWrite a function that takes in a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector.\nWrite a function that\
    \ takes in a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector.\nWrite a function that takes in a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector.\nWrite a function that\
    \ takes in a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector.\nWrite a function that takes in a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector.\nWrite a function that\
    \ takes in a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector.\nWrite a function that takes in a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector.\nWrite a function that\
    \ takes in a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector.\nWrite a function that takes in a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector.\nWrite a function that\
    \ takes in a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector.\nWrite a function that takes in a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector.\nWrite a function that\
    \ takes in a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector.\nWrite a function that takes in a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector.\nWrite a function that\
    \ takes in a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector.\nWrite a function that takes in a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector.\nWrite a function that\
    \ takes in a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector.\nWrite a function that takes in a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector.\nWrite a function that\
    \ takes in a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector.\nWrite a function that takes in a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector.\nWrite a function that\
    \ takes in a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector.\nWrite a function that takes in a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpyqs783g7.jl:22\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpyqs783g7.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    minimum = numbers[1]\n    maximum = numbers[1]\n    for i in\
    \ 2:length(numbers)\n        if numbers[i] < minimum\n            minimum = numbers[i]\n\
    \        elseif numbers[i] > maximum\n            maximum = numbers[i]\n     \
    \   else\n            break\n        end\n    end\n    return (minimum, maximum)\n\
    end\n</code>\n<|/ a dscore=2 |>\n<| a tags=julia |>\nThe answer by is very good,\
    \ but I wanted to add some explanation on how it works. \nThe function find_closest_elements\
    \ is called on two arguments: numbers and minimum. \nThe first argument is a vector\
    \ of numbers, and the second argument is a number. \nThe function will loop through\
    \ the vector and find the minimum number in the vector. \nThe function will then\
    \ loop through the vector again and find the maximum number in the vector. \n\
    The function will then return the minimum and maximum numbers. \nThe function\
    \ will then loop through the vector again and find the minimum number in the vector.\
    \ \nThe function will then loop through the vector again and find the maximum\
    \ number in the vector. \nThe function will then return the minimum and maximum\
    \ numbers. \nThe function will then loop through the vector again and find the\
    \ minimum number in the vector. \nThe function will then loop through the vector\
    \ again and find the maximum number in the vector. \nThe function will then return\
    \ the minimum and maximum numbers. \nThe function will then loop through the vector\
    \ again and find the minimum number in the vector. \nThe function will then loop\
    \ through the vector again and find the maximum number in the vector. \nThe function\
    \ will then return the minimum and maximum numbers. \nThe function will then loop\
    \ through the vector again and find the minimum number in the vector. \nThe function\
    \ will then loop through the vector again and find the maximum number in the vector.\
    \ \nThe function will then return the minimum and maximum numbers. \nThe function\
    \ will then loop through the vector again and find the minimum number in the vector.\
    \ \nThe function will then loop through the vector again and find the maximum\
    \ number in the vector. \nThe function will then return the minimum and maximum\
    \ numbers. \nThe function will then loop through the vector again and find the\
    \ minimum number in the vector. \nThe function will then loop through the vector\
    \ again and find the maximum number in the vector. \nThe function will then return\
    \ the minimum and maximum numbers. \nThe function will then loop through the vector\
    \ again and find the minimum number in the vector. \nThe function will then loop\
    \ through the vector again and find the maximum number in the vector. \nThe function\
    \ will then return the minimum and maximum numbers. \nThe function will then loop\
    \ through the vector again and find the minimum number in the vector. \nThe function\
    \ will then loop through the vector again and find the maximum number in the vector.\
    \ \nThe function will then return the minimum and maximum numbers. \nThe \nusing\
    \ Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmptzo1b85h.jl:22\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmptzo1b85h.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    closest_elements = numbers[1]\n    closest_number = numbers[1]\n\
    \    for number in numbers[2:end]\n        if number < closest_number\n      \
    \      closest_number = number\n            closest_elements = number\n      \
    \  else\n            if number > closest_number\n                closest_number\
    \ = number\n                closest_elements = number\n            end\n     \
    \   end\n    end\n    return closest_elements, closest_number\nend\n</cell>\n\
    <text>\nNow let's test our new function by comparing it to our old function and\
    \ see how they compare.\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmprb4asn5s.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmprb4asn5s.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    closest_elements = numbers[1]\n    closest_number = numbers[1]\n\
    \    \n    for element in numbers[2:end]\n        if element < closest_number\n\
    \            closest_number = element\n            closest_elements = element\n\
    \        else\n            if element > closest_number\n                closest_number\
    \ = element\n                closest_elements = element\n            end\n   \
    \     end\n    end\n    \n    return (closest_elements, closest_number)\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpbsett_z1.jl:27\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpbsett_z1.jl:27\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest = numbers[1]\n    largest = numbers[1]\n    for\
    \ n in numbers[2:end]\n        if n < smallest\n            smallest = n\n   \
    \     elseif n > largest\n            largest = n\n        end\n    end\n    return\
    \ (smallest, largest)\nend\n</cell>\n<text>\nExercise 4\nWrite a function that\
    \ takes a list of numbers and returns the sum of the squares of the numbers in\
    \ the list.\n>>> sum_square_of_numbers([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n25.0\n\
    >>> sum_square_of_numbers([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n25.0\n>>> sum_square_of_numbers([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.1])\n25.0\n>>> sum_square_of_numbers([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0])\n25.0\n>>> sum_square_of_numbers([1.0, 2.0, 3.0, 4.0, 5.0, 2.1])\n\
    25.0\n>>> sum_square_of_numbers([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n25.0\n>>> sum_square_of_numbers([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.3])\n25.0\n>>> sum_square_of_numbers([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.4])\n25.0\n>>> sum_square_of_numbers([1.0, 2.0, 3.0, 4.0, 5.0, 2.5])\n\
    25.0\n>>> sum_square_of_numbers([1.0, 2.0, 3.0, 4.0, 5.0, 2.6])\n25.0\n>>> sum_square_of_numbers([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.7])\n25.0\n>>> sum_square_of_numbers([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.8])\n25.0\n>>> sum_square_of_numbers([1.0, 2.0, 3.0, 4.0, 5.0, 2.9])\n\
    25.0\n>>> sum_square_of_numbers([1.0, 2.0, 3.0, 4.0, 5.0, 2.10])\n25.0\n>>> sum_square_of_numbers([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.11])\n25.0\n>>> sum_square_of_numbers([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.12])\n25.0\n>>> sum_square_of_numbers([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.13])\n25.0\n>>> sum_square_of_numbers([1.0, 2.0, 3.0, 4.0, 5.0, 2.14])\n25.0\n\
    >>> sum_square_of_numbers([1.0, 2.0, 3.0, 4.0, 5.0, 2.15])\n25.0\n>>> sum_square_of_numbers([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.16])\n25.0\n>>> sum_square_of_numbers([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.17])\n25.0\n>>> sum_square_of_numbers([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.18])\n25.0\n>>> sum_square\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4psfr8ps.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp4psfr8ps.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[end]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a vector of numbers and returns the sum of the squares of the numbers in that\
    \ vector. \nWrite a function that takes a vector of numbers and returns the sum\
    \ of the squares of the numbers in that vector. \nWrite a function that takes\
    \ a vector of numbers and returns the sum of the squares of the numbers in that\
    \ vector. \nWrite a function that takes a vector of numbers and returns the sum\
    \ of the squares of the numbers in that vector. \nWrite a function that takes\
    \ a vector of numbers and returns the sum of the squares of the numbers in that\
    \ vector. \nWrite a function that takes a vector of numbers and returns the sum\
    \ of the squares of the numbers in that vector. \nWrite a function that takes\
    \ a vector of numbers and returns the sum of the squares of the numbers in that\
    \ vector. \nWrite a function that takes a vector of numbers and returns the sum\
    \ of the squares of the numbers in that vector. \nWrite a function that takes\
    \ a vector of numbers and returns the sum of the squares of the numbers in that\
    \ vector. \nWrite a function that takes a vector of numbers and returns the sum\
    \ of the squares of the numbers in that vector. \nWrite a function that takes\
    \ a vector of numbers and returns the sum of the squares of the numbers in that\
    \ vector. \nWrite a function that takes a vector of numbers and returns the sum\
    \ of the squares of the numbers in that vector. \nWrite a function that takes\
    \ a vector of numbers and returns the sum of the squares of the numbers in that\
    \ vector. \nWrite a function that takes a vector of numbers and returns the sum\
    \ of the squares of the numbers in that vector. \nWrite a function that takes\
    \ a vector of numbers and returns the sum of the squares of the numbers in that\
    \ vector. \nWrite a function that takes a vector of numbers and returns the sum\
    \ of the squares of the numbers in that vector. \nWrite a function that takes\
    \ a vector of numbers and returns the sum of the squares of the numbers in that\
    \ vector. \nWrite a function that takes a vector of numbers and returns the sum\
    \ of the squares of the numbers in that vector. \nWrite a function that takes\
    \ a vector of numbers and returns the sum of the squares of the numbers in that\
    \ vector. \nWrite a function that takes a vector of numbers and returns the sum\
    \ of the squares of the numbers in that vector. \nWrite a function that takes\
    \ a vector of numbers and returns the sum of the squares of the numbers in that\
    \ vector. \nWrite a function that takes a vector of numbers and returns the sum\
    \ of the squares of the numbers in that vector. \nWrite a function that takes\
    \ a vector of numbers and returns the sum of the squares of the numbers in that\
    \ vector. \nWrite a function that takes a vector of numbers and returns the sum\
    \ of the squares of the numbers in that vector. \n\nusing Test\n\n@testset begin\n\
    \ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0,\
    \ 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t\
    @test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmprk_z2zcg.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmprk_z2zcg.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[end]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<text>\nExercise 2\nWrite a function that will\
    \ take a list of numbers and return the sum of the squares of the numbers in the\
    \ list.\n>>> square_sum(numbers::Vector{Float64})\n>>> square_sum([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 6.0])\n25.0\n>>> square_sum([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0])\n\
    49.0\n>>> square_sum([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0])\n925.0\n>>> square_sum([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0])\n18495.0\n>>> square_sum([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0])\n292625.0\n>>> square_sum([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0])\n4798595.0\n>>> square_sum([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0])\n72939595.0\n>>>\
    \ square_sum([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0])\n\
    1044939595.0\n>>> square_sum([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0,\
    \ 11.0, 12.0, 13.0, 14.0])\n134939595.0\n>>> square_sum([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0])\n165939595.0\n>>> square_sum([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0,\
    \ 16.0])\n195939595.0\n>>> square_sum([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0,\
    \ 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0])\n226739595.0\n>>> square_sum([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0,\
    \ 16.0, 17.0, 18.0])\n246739595.0\n>>> square_sum([1.0, 2.0, 3.0, 4.0, 5.0, \n\
    using Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4fhk4ey1.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp4fhk4ey1.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n\
    \    for number in numbers[2:end]\n        if number < smallest_number\n     \
    \       smallest_number = number\n        elseif number > largest_number\n   \
    \         largest_number = number\n        else\n            smallest_number =\
    \ number\n            largest_number = number\n        end\n    end\n    return\
    \ (smallest_number, largest_number)\nend\n</code>\n<|/ a tags=julia,arrays |>\n\
    <| a |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp424q1_yk.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp424q1_yk.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    minimum = minimum(numbers)\n    maximum = maximum(numbers)\n\
    \    index = findfirst(minimum < numbers, numbers)\n    if index == length(numbers)\n\
    \        return (minimum, maximum)\n    end\n    index = findfirst(maximum > numbers,\
    \ numbers)\n    if index == length(numbers)\n        return (minimum, maximum)\n\
    \    end\n    return (numbers[index], numbers[index + 1])\nend\n</code>\n<|/ a\
    \ tags=julia,arrays |>\n<| a dscore=2 |>\nI like using zip to combine two arrays\
    \ into one and then using sort! to sort them:\n<code>\njulia> a = [1,2,3]\n3-element\
    \ Array{Int64,1}:\n 1\n 2\n 3\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpcgbr89wk.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpcgbr89wk.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest = numbers[1]\n    largest = numbers[1]\n    \n\
    \    for number in numbers[2:end]\n        if number < smallest\n            smallest\
    \ = number\n        elseif number > largest\n            largest = number\n  \
    \      end\n    end\n    \n    return (smallest, largest)\nend\n</cell>\n<text>\n\
    Now let's test our function by calling it with the numbers we created earlier.\
    \ We'll use the function we just wrote, find_closest_elements, and then test it\
    \ by printing out the two numbers it returns.\nusing Test\n\n@testset begin\n\n\
    candidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0,\
    \ 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t\
    @test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp42gsf_mx.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp42gsf_mx.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_diff = Float64(0.0)\n    smallest_number = numbers[1]\n\
    \    \n    for number in numbers[2:end]\n        diff = abs(number - smallest_number)\n\
    \        if diff < smallest_diff\n            smallest_diff = diff\n         \
    \   smallest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ smallest_number)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmph3c3ot6t.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmph3c3ot6t.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    minimum = numbers[1]\n    maximum = numbers[1]\n    for i in\
    \ 2:length(numbers)\n        if numbers[i] < minimum\n            minimum = numbers[i]\n\
    \        elseif numbers[i] > maximum\n            maximum = numbers[i]\n     \
    \   else\n            return numbers[i], minimum\n        end\n    end\n    return\
    \ minimum, maximum\nend\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't work\
    \ if there are two numbers that are equidistant.\n<|/ c |>\n<| c |>\nYes, it does.\
    \ I tested it before posting it. I will edit my answer to include a test case.\n\
    <|/ c |>\n<| c |>\nI tested it again and it doesn't work. Try it with the numbers\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0] and [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]. Your function\
    \ returns 2.0 and 2.2 instead of 2.2 and 2.0.\n<|/ c |>\n<| c |>\nI tested it\
    \ again and it does work. Try it with the numbers [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]\
    \ and [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]. Your function returns 2.0 and 2.2 instead\
    \ of 2.2 and 2.0.\n<|/ c |>\n<| c |>\nI tested it again and it does work. Try\
    \ it with the numbers [1.0, 2.0, 3.0, 4.0, 5.0, 2.0] and [1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]. Your function returns 2.0 and 2.2 instead of 2.2 and 2.0.\n<|/ c\
    \ |>\n<| a tags=julia,arrays |>\nThis can be done with sortperm:\n<code>\njulia>\
    \ sortperm([1,3,5,2,4])\n5-element Array{Int64,1}:\n 2\n 3\n 1\n 4\n 5\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nThis doesn't work if there are two numbers that are\
    \ equidistant.\n<|/ c |>\n<| c |>\nYes, it does. I tested it before posting it.\
    \ I will edit my answer to include a test case.\n<|/ c |>\n<| c |>\nI tested it\
    \ again and it doesn't work. Try it with the numbers [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0] and [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]. Your function returns 2.0 and 2.2 instead\
    \ of 2.2 and 2.0.\n<|/ c |>\n<| c |>\nI tested it again and it does work. Try\
    \ it with the numbers [1.0, 2.0, 3.0, 4.0, 5.0, 2.0] and [1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]. Your function returns 2.0 and 2.2 instead of 2.2 and 2.0.\n\nusing\
    \ Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpdff9cyme.jl:22\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpdff9cyme.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest = numbers[1]\n    largest = numbers[1]\n    for\
    \ number in numbers[2:end]\n        if number < smallest \n            smallest\
    \ = number\n        elseif number > largest\n            largest = number\n  \
    \      end\n    end\n    return (smallest, largest)\nend\n</cell>\n<text>\nNow\
    \ let's test our function by finding the closest element to each of the numbers\
    \ in the list from above:\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp998l4ukh.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp998l4ukh.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    smallest = numbers[1]\n    largest = numbers[1]\n    for n in\
    \ numbers[2:end]\n        if n < smallest\n            smallest = n\n        elseif\
    \ n > largest\n            largest = n\n        else\n            break\n    end\n\
    \    return (smallest, largest)\nend\n</cell>\n<code language=julia-1.0>\nfind_closest_elements([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n</cell>\n<text>\nExercise\nWrite a function that\
    \ takes a list of numbers and returns the sum of the squares of the numbers in\
    \ the list.\nWrite a function that takes a list of numbers and returns the sum\
    \ of the squares of the numbers in the list but ignores any numbers that are less\
    \ than 0.\nWrite a function that takes a list of numbers and returns the sum of\
    \ the squares of the numbers in the list but ignores any numbers that are greater\
    \ than 100.\nWrite a function that takes a list of numbers and returns the sum\
    \ of the squares of the numbers in the list but ignores any numbers that are less\
    \ than 0 and greater than 100.\nWrite a function that takes a list of numbers\
    \ and returns the sum of the squares of the numbers in the list but ignores any\
    \ numbers that are less than 0 and greater than 100.\nusing Test\n\n@testset begin\n\
    \ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0,\
    \ 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t\
    @test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpotoxwqyr.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpotoxwqyr.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a list of numbers and returns the sum of the squares of the numbers in the list.\n\
    >>> square_sum(numbers::Vector{Float64})\n>>> square_sum([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2])\n>>> square_sum([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n>>> square_sum([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.1])\n>>> square_sum([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n\
    >>> square_sum([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n>>> square_sum([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.1])\n>>> square_sum([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n>>> square_sum([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0])\n>>> square_sum([1.0, 2.0, 3.0, 4.0, 5.0, 2.1])\n\
    >>> square_sum([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n>>> square_sum([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n>>> square_sum([1.0, 2.0, 3.0, 4.0, 5.0, 2.1])\n>>> square_sum([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n>>> square_sum([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    >>> square_sum([1.0, 2.0, 3.0, 4.0, 5.0, 2.1])\n>>> square_sum([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n>>> square_sum([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n>>> square_sum([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.1])\n>>> square_sum([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n\
    >>> square_sum([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n>>> square_sum([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.1])\n>>> square_sum([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n>>> square_sum([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0])\n>>> square_sum([1.0, 2.0, 3.0, 4.0, 5.0, 2.1])\n\
    >>> square_sum([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n>>> square_sum([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n>>> square_sum([1.0, 2.0, 3.0, 4.0, 5.0, 2.1])\n>>> square_sum([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n>>> square_sum([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\
    >>> square_sum([1.0, 2.0, 3.0, 4.0, 5.0, 2.1])\n>>> square_sum([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n>>> square\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_m_sjlk_.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_m_sjlk_.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    minimum = numbers[1]\n    maximum = numbers[1]\n    for i in\
    \ numbers[2:end]\n        if i < minimum\n            minimum = i\n        elseif\
    \ i > maximum\n            maximum = i\n        end\n    end\n    return (minimum,\
    \ maximum)\nend\n</cell>\n<text>\nThe function find_closest_elements takes in\
    \ a list of numbers and returns the two numbers that are closest to each other.\n\
    using Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpnf0nu00q.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpnf0nu00q.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    minimum = numbers[1]\n    maximum = numbers[1]\n    for i in\
    \ numbers[2:end]\n        if i < minimum\n            minimum = i\n        elseif\
    \ i > maximum\n            maximum = i\n        end\n    end\n    return minimum,\
    \ maximum\nend\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\nHere's a solution\
    \ using Julia's sort! function and an anonymous function:\n<code>\njulia> function\
    \ find_closest_elements(numbers)\n           minimum = numbers[1]\n          \
    \ maximum = numbers[1]\n           for i in numbers[2:end]\n               if\
    \ i < minimum\n                   minimum = i\n               elseif i > maximum\n\
    \                   maximum = i\n               end\n           end\n        \
    \   return minimum, maximum\n       end\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphujy0v44.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmphujy0v44.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n\
    \    for number in numbers[2:end]\n        if number < smallest_number\n     \
    \       smallest_number = number\n        elseif number > largest_number\n   \
    \         largest_number = number\n        end\n    end\n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a list of numbers and returns the sum of the squares of the numbers in the list.\n\
    The function should raise an error if the list is empty.\n>>> square_of_list([])\n\
    0\n>>> square_of_list([1,2,3])\n9\n>>> square_of_list([1,2,3])\n9\n>>> square_of_list([1,2,3])\n\
    9\n>>> square_of_list([1,2,3])\n9\n>>> square_of_list([1,2,3])\n9\n>>> square_of_list([1,2,3])\n\
    9\n>>> square_of_list([1,2,3])\n9\n>>> square_of_list([1,2,3])\n9\n>>> square_of_list([1,2,3])\n\
    9\n>>> square_of_list([1,2,3])\n9\n>>> square_of_list([1,2,3])\n9\n>>> square_of_list([1,2,3])\n\
    9\n>>> square_of_list([1,2,3])\n9\n>>> square_of_list([1,2,3])\n9\n>>> square_of_list([1,2,3])\n\
    9\n>>> square_of_list([1,2,3])\n9\n>>> square_of_list([1,2,3])\n9\n>>> square_of_list([1,2,3])\n\
    9\n>>> square_of_list([1,2,3])\n9\n>>> square_of_list([1,2,3])\n9\n>>> square_of_list([1,2,3])\n\
    9\n>>> square_of_list([1,2,3])\n9\n>>> square_of_list([1,2,3])\n9\n>>> square_of_list([1,2,3])\n\
    9\n>>> square_of_list([1,2,3])\n9\n>>> square_of_list([1,2,3])\n9\n>>> square_of_list([1,2,3])\n\
    9\n>>> square_of_list([1,2,3])\n9\n>>> square_of_list([1,2,3])\n9\n>>> square_of_list([1,2,3])\n\
    9\n>>> square_of_list([1,2,3])\n9\n>>> square_of_list([1,2,3])\n9\n>>> square_of_list([1,2,3])\n\
    9\n>>> square_of_list([1,2,3])\n9\n>>> square_of_list([1,2,3])\n9\n>>> square_of_list([1,2,3])\n\
    9\n>>> square_of_list([1,2,\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpxz8kivjm.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpxz8kivjm.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    smallest_diff = Float64(0.0)\n    smallest_element = numbers[1]\n\
    \    largest_element = numbers[1]\n    for element in numbers[2:end]\n       \
    \ diff = abs(element - smallest_element)\n        if diff < smallest_diff\n  \
    \          smallest_diff = diff\n            smallest_element = element\n    \
    \    elseif diff > smallest_diff\n            largest_element = element\n    \
    \    else\n            smallest_diff = Float64(0.0)\n        end\n    end\n  \
    \  return (smallest_element, largest_element)\nend\n</code>\n<|/ a dscore=2 |>\n\
    <| c |>\nThis doesn't work if there are two numbers that are equally close. For\
    \ example, `find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])` returns `(2.0,\
    \ 2.0)` instead of `(2.0, 2.2)`.\n<|/ c |>\n<| c |>\nYes, I realized that after\
    \ I posted my comment. I've updated my answer to account for that case.\n<|/ c\
    \ |>\n<| a tags=julia,algorithm |>\nThe answer by is correct, but I thought I'd\
    \ post a more Julian way of doing it (which I believe is more efficient):\n<code>\n\
    using Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmplamy5urb.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmplamy5urb.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp6nmw7cza.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp6nmw7cza.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpnyzfot3f.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpnyzfot3f.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    minimum = numbers[1]\n    maximum = numbers[1]\n    for\
    \ i in numbers[2:end]\n        if i < minimum\n            minimum = i\n     \
    \   elseif i > maximum\n            maximum = i\n        end\n    end\n    return\
    \ (minimum, maximum)\nend\n</cell>\n<text>\nNow let's test our function by calling\
    \ it on a few different inputs:\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpjulr6url.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpjulr6url.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n\
    \    for number in numbers[2:end]\n        if number < smallest_number\n     \
    \       smallest_number = number\n        elseif number > largest_number\n   \
    \         largest_number = number\n        else\n            break\n    end\n\
    \    return (smallest_number, largest_number)\nend\n</code>\n<|/ a dscore=2 |>\n\
    <| a tags=julia,arrays |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate =\
    \ find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) ==\
    \ (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t\
    @test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpu2vbq4e7.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpu2vbq4e7.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[end]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ in a vector of numbers and returns the sum of the squares of the numbers in\
    \ the vector.\nWrite a function that takes in a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector.\nWrite a function that\
    \ takes in a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector.\nWrite a function that takes in a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector.\nWrite a function that\
    \ takes in a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector.\nWrite a function that takes in a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector.\nWrite a function that\
    \ takes in a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector.\nWrite a function that takes in a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector.\nWrite a function that\
    \ takes in a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector.\nWrite a function that takes in a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector.\nWrite a function that\
    \ takes in a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector.\nWrite a function that takes in a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector.\nWrite a function that\
    \ takes in a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector.\nWrite a function that takes in a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector.\nWrite a function that\
    \ takes in a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector.\nWrite a function that takes in a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector.\nWrite a function that\
    \ takes in a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector.\nWrite a function that takes in a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector.\nWrite a function that\
    \ takes in a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector.\nWrite a function that takes in a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector.\nWrite a function that\
    \ takes in a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector.\nWrite a function that takes in a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector.\nWrite a function that\
    \ takes in a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector.\nWrite a function that takes in a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector.\nWrite a function that\
    \ takes in a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector.\nWrite a function that takes in a vector of number\nusing Test\n\
    \n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpyw1948ox.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpyw1948ox.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    minimum = numbers[1]\n    maximum = numbers[1]\n    for i in\
    \ numbers[2:end]\n        if i < minimum\n            minimum = i\n        elseif\
    \ i > maximum\n            maximum = i\n        else\n            return minimum,\
    \ maximum\n        end\n    end\n    return minimum, maximum\nend\n</code>\n<|/\
    \ a dscore=1 |>\n<| a |>\nI wrote a function that does this in Julia 1.5.\n<code>\n\
    using Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpefyah7f_.jl:22\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpefyah7f_.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    closest_elements = numbers[1]\n    closest_number = numbers[1]\n\
    \    \n    for number in numbers[2:end]\n        if number < closest_number\n\
    \            closest_number = number\n            closest_elements = number\n\
    \        else\n            if number > closest_number\n                closest_number\
    \ = number\n                closest_elements = number\n            end\n     \
    \   end\n    end\n    \n    return (closest_elements, closest_number)\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpk_uok72m.jl:27\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpk_uok72m.jl:27\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    smallest = numbers[1]\n    largest = numbers[1]\n    for n in\
    \ numbers[2:end]\n        if n < smallest\n            smallest = n\n        elseif\
    \ n > largest\n            largest = n\n        end\n    end\n    return (smallest,\
    \ largest)\nend\n</cell>\n<text>\nThe function above is called find_closest_elements\
    \ and takes in a list of numbers and returns a tuple of two numbers (the smallest\
    \ and largest number in the list). Let's test it out by running it on a few examples:\n\
    using Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_an8zo_v.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_an8zo_v.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    minimum = numbers[1]\n    maximum = numbers[1]\n    for i in\
    \ numbers[2:end]\n        if i < minimum\n            minimum = i\n        elseif\
    \ i > maximum\n            maximum = i\n        end\n    end\n    return (minimum,\
    \ maximum)\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ of numbers and returns the sum of the squares of the numbers in that vector.\n\
    Write a function that takes a vector of numbers and returns the sum of the squares\
    \ of the numbers in that vector.\nWrite a function that takes a vector of numbers\
    \ and returns the sum of the squares of the numbers in that vector.\nWrite a function\
    \ that takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in that vector.\nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in that vector.\nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in that vector.\nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in that vector.\nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in that vector.\nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in that vector.\nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in that vector.\nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in that vector.\nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in that vector.\nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in that vector.\nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in that vector.\nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in that vector.\nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in that vector.\nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in that vector.\nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in that vector.\nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in that vector.\nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in that vector.\nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in that vector.\nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in that vector.\nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in that vector.\nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in that vector.\nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in that vector.\nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in that vector.\nWrite a function that takes a vector of numbers and returns\
    \ the sum of the square\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpqe2mfifb.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpqe2mfifb.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    minimum = numbers[1]\n    maximum = numbers[1]\n    for number\
    \ in numbers[2:end]\n        if number < minimum\n            minimum = number\n\
    \        elseif number > maximum\n            maximum = number\n        else\n\
    \            return minimum, maximum\n    end\n    return minimum, maximum\nend\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nusing Test\n\n@testset begin\n\
    \ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0,\
    \ 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t\
    @test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2t6dvz_p.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp2t6dvz_p.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    closest_numbers = Vector{Float64}(undef, 0)\n    closest_numbers_distance\
    \ = Float64(0)\n    \n    for number in numbers\n        \n        if closest_numbers_distance\
    \ > abs(number - closest_numbers[1])\n            closest_numbers_distance = abs(number\
    \ - closest_numbers[1])\n            closest_numbers = [number, number]\n    \
    \    elseif closest_numbers_distance > abs(number - closest_numbers[2])\n    \
    \        closest_numbers_distance = abs(number - closest_numbers[2])\n       \
    \     closest_numbers = [number, number]\n        else\n            closest_numbers\
    \ = [number, number]\n        end\n    end\n    \n    return closest_numbers\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2tgssk_z.jl:28\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp2tgssk_z.jl:28\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    smallest_number = numbers[1]\n    largest_number = numbers[end]\n\
    \    for i in 2:length(numbers)\n        if numbers[i] < smallest_number\n   \
    \         smallest_number = numbers[i]\n        elseif numbers[i] > largest_number\n\
    \            largest_number = numbers[i]\n        end\n    end\n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<text>\nExercise: Write a function that takes\
    \ a vector of numbers and returns the mean of the numbers. \nThe mean is the sum\
    \ of the numbers divided by the number of numbers. \nThe function should raise\
    \ an error if the number of numbers is less than two.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp322631zm.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp322631zm.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    smallest_number = numbers[1]\n    largest_number = numbers[end]\n\
    \    for number in numbers[2:end]\n        if number < smallest_number\n     \
    \       smallest_number = number\n        elseif number > largest_number\n   \
    \         largest_number = number\n        end\n    end\n    return (smallest_number,\
    \ largest_number)\nend\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n\
    using Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp7z921f4i.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp7z921f4i.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    closest_elements = numbers[1]\n    closest_elements_2 =\
    \ numbers[2]\n    \n    if numbers[1] < numbers[2]\n        closest_elements =\
    \ numbers[1]\n        closest_elements_2 = numbers[2]\n    end\n    \n    if numbers[1]\
    \ > numbers[2]\n        closest_elements = numbers[1]\n        closest_elements_2\
    \ = numbers[2]\n    end\n    \n    if numbers[1] == numbers[2]\n        closest_elements\
    \ = numbers[1]\n        closest_elements_2 = numbers[2]\n    end\n    \n    if\
    \ numbers[1] < numbers[2]\n        closest_elements = numbers[1]\n        closest_elements_2\
    \ = numbers[2]\n    end\n    \n    if numbers[1] > numbers[2]\n        closest_elements\
    \ = numbers[1]\n        closest_elements_2 = numbers[2]\n    end\n    \n    if\
    \ numbers[1] == numbers[2]\n        closest_elements = numbers[1]\n        closest_elements_2\
    \ = numbers[2]\n    end\n    \n    if numbers[1] < numbers[2]\n        closest_elements\
    \ = numbers[1]\n        closest_elements_2 = numbers[2]\n    end\n    \n    if\
    \ numbers[1] > numbers[2]\n        closest_elements = numbers[1]\n        closest_elements_2\
    \ = numbers[2]\n    end\n    \n    if numbers[1] == numbers[2]\n        closest_elements\
    \ = numbers[1]\n        closest_elements_2 = numbers[2]\n    end\n    \n    if\
    \ numbers[1] < numbers[2]\n        closest_elements = numbers[1]\n        closest_elements_2\
    \ = numbers[2]\n    end\n    \n    if numbers[1] > numbers[2]\n        closest_elements\
    \ = numbers[1]\n        closest_elements_2 = numbers[2]\n    end\n    \n    if\
    \ numbers[1] == numbers[2]\n        closest_elements = numbers[1]\n        closest_elements_2\
    \ = numbers[2]\n    end\n    \n    if numbers[1] < numbers[2]\n        closest_elements\
    \ = numbers[1]\n        closest_elements_2 = numbers[2]\n    end\n    \n    if\
    \ numbers[1] > numbers[2]\n        closest_elements = numbers[1]\n        closest_elements_2\
    \ = numbers[2]\n    end\n    \n    if numbers[1] == numbers[2]\n        closest_elements\
    \ = numbers[1]\n        closest_elements_2 = numbers[2]\n    end\n    \n    if\
    \ numbers[1] < numbers[2]\n        closest_elements = numbers[1]\n        closest_elements_2\
    \ = numbers[2]\n    end\n    \n    if numbers[1] > numbers[2]\n        closest_elements\
    \ = numbers[1]\n        closest_elements_2 = numbers[2]\n    end\n    \n    if\
    \ numbers[1] == numbers[2]\n        closest_elements = numbers[1]\n        closest_elements_2\
    \ = numbers[2]\n    end\n    \n    if numbers[1] < numbers[2]\n        closest_elements\
    \ = numbers[1]\n        closest_elements_2 = numbers[2]\n    end\n    \nusing\
    \ Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp1y2701nt.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp1y2701nt.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp1y2701nt.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    minimum = numbers[1]\n    maximum = numbers[1]\n    for number\
    \ in numbers[2:end]\n        if number < minimum\n            minimum = number\n\
    \        elseif number > maximum\n            maximum = number\n        else\n\
    \            break\n    end\n    return (minimum, maximum)\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a list of numbers and returns the sum\
    \ of the squares of the numbers in that list. \nWrite a function that takes a\
    \ list of numbers and returns the sum of the squares of the numbers in that list.\
    \ \nWrite a function that takes a list of numbers and returns the sum of the squares\
    \ of the numbers in that list. \nWrite a function that takes a list of numbers\
    \ and returns the sum of the squares of the numbers in that list. \nWrite a function\
    \ that takes a list of numbers and returns the sum of the squares of the numbers\
    \ in that list. \nWrite a function that takes a list of numbers and returns the\
    \ sum of the squares of the numbers in that list. \nWrite a function that takes\
    \ a list of numbers and returns the sum of the squares of the numbers in that\
    \ list. \nWrite a function that takes a list of numbers and returns the sum of\
    \ the squares of the numbers in that list. \nWrite a function that takes a list\
    \ of numbers and returns the sum of the squares of the numbers in that list. \n\
    Write a function that takes a list of numbers and returns the sum of the squares\
    \ of the numbers in that list. \nWrite a function that takes a list of numbers\
    \ and returns the sum of the squares of the numbers in that list. \nWrite a function\
    \ that takes a list of numbers and returns the sum of the squares of the numbers\
    \ in that list. \nWrite a function that takes a list of numbers and returns the\
    \ sum of the squares of the numbers in that list. \nWrite a function that takes\
    \ a list of numbers and returns the sum of the squares of the numbers in that\
    \ list. \nWrite a function that takes a list of numbers and returns the sum of\
    \ the squares of the numbers in that list. \nWrite a function that takes a list\
    \ of numbers and returns the sum of the squares of the numbers in that list. \n\
    Write a function that takes a list of numbers and returns the sum of the squares\
    \ of the numbers in that list. \nWrite a function that takes a list of numbers\
    \ and returns the sum of the squares of the numbers in that list. \nWrite a function\
    \ that takes a list of numbers and returns the sum of the squares of the numbers\
    \ in that list. \nWrite a function that takes a list of numbers and returns the\
    \ sum of the squares of the numbers in that list. \nWrite a function that takes\
    \ a list of numbers and returns the sum of the squares of the numbers in that\
    \ list. \nWrite a function that takes a list of numbers and returns the sum of\
    \ the squares of the numbers in that list. \nWrite a function that takes a list\
    \ of numbers and returns the sum of the squares of the numbers in that list. \n\
    Write a function that takes a list of numbers and returns the sum of the squares\
    \ of the numbers in that list. \nWrite a function that takes a list of numbers\
    \ and returns the sum of the squares of the numbers in that \nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpl1k_30pc.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpl1k_30pc.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest = numbers[1]\n    largest = numbers[1]\n    for\
    \ n in numbers[2:end]\n        if n < smallest\n            smallest = n\n   \
    \     elseif n > largest\n            largest = n\n        end\n    end\n    return\
    \ (smallest, largest)\nend\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0])\n</cell>\n<text>\nExercise: Write a function that\
    \ will take a list of numbers and return the numbers in sorted order (smallest\
    \ to largest)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nusing\
    \ Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpp0ob1wvx.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpp0ob1wvx.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[end]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<text>\nExercise\nWrite a function that takes\
    \ a vector of numbers and returns the sum of the squares of the numbers in that\
    \ vector. \nWrite a function that takes a vector of numbers and returns the sum\
    \ of the squares of the numbers in that vector. \nWrite a function that takes\
    \ a vector of numbers and returns the sum of the squares of the numbers in that\
    \ vector. \nWrite a function that takes a vector of numbers and returns the sum\
    \ of the squares of the numbers in that vector. \nWrite a function that takes\
    \ a vector of numbers and returns the sum of the squares of the numbers in that\
    \ vector. \nWrite a function that takes a vector of numbers and returns the sum\
    \ of the squares of the numbers in that vector. \nWrite a function that takes\
    \ a vector of numbers and returns the sum of the squares of the numbers in that\
    \ vector. \nWrite a function that takes a vector of numbers and returns the sum\
    \ of the squares of the numbers in that vector. \nWrite a function that takes\
    \ a vector of numbers and returns the sum of the squares of the numbers in that\
    \ vector. \nWrite a function that takes a vector of numbers and returns the sum\
    \ of the squares of the numbers in that vector. \nWrite a function that takes\
    \ a vector of numbers and returns the sum of the squares of the numbers in that\
    \ vector. \nWrite a function that takes a vector of numbers and returns the sum\
    \ of the squares of the numbers in that vector. \nWrite a function that takes\
    \ a vector of numbers and returns the sum of the squares of the numbers in that\
    \ vector. \nWrite a function that takes a vector of numbers and returns the sum\
    \ of the squares of the numbers in that vector. \nWrite a function that takes\
    \ a vector of numbers and returns the sum of the squares of the numbers in that\
    \ vector. \nWrite a function that takes a vector of numbers and returns the sum\
    \ of the squares of the numbers in that vector. \nWrite a function that takes\
    \ a vector of numbers and returns the sum of the squares of the numbers in that\
    \ vector. \nWrite a function that takes a vector of numbers and returns the sum\
    \ of the squares of the numbers in that vector. \nWrite a function that takes\
    \ a vector of numbers and returns the sum of the squares of the numbers in that\
    \ vector. \nWrite a function that takes a vector of numbers and returns the sum\
    \ of the squares of the numbers in that vector. \nWrite a function that takes\
    \ a vector of numbers and returns the sum of the squares of the numbers in that\
    \ vector. \nWrite a function that takes a vector of numbers and returns the sum\
    \ of the squares of the numbers in that vector. \nWrite a function that takes\
    \ a vector of numbers and returns the sum of the squares of the numbers in that\
    \ vector. \nWrite a function that takes a vector of numbers and returns the sum\
    \ of the squares of the numbers in that vector. \nWrite \nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp20_vy8ks.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp20_vy8ks.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.4>\nfind_closest_elements([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n</cell>\n<text>\nExercise: Write a function that\
    \ will find the closest element in a given list to the given number. Test it by\
    \ finding the closest element to 2.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9t4er2up.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp9t4er2up.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    smallest = numbers[1]\n    largest = numbers[1]\n    for number\
    \ in numbers[2:end]\n        if number < smallest \n            smallest = number\n\
    \        elseif number > largest\n            largest = number\n        end\n\
    \    end\n    return smallest, largest\nend\n</code>\n<|/ a tags=julia,arrays\
    \ |>\n<| a tags=julia,arrays |>\nHere is a solution using sort!:\n<code>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp63w4n2dx.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp63w4n2dx.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<text>\nNow let's test our function\nusing Test\n\
    \n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpfmxc6g5p.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpfmxc6g5p.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    biggest_number = numbers[1]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > biggest_number\n\
    \            biggest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ biggest_number)\nend\n</cell>\n<text>\nNow let's test our function by comparing\
    \ it to our known answers:\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpvrj2c_a6.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpvrj2c_a6.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[0]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpac3mg9bl.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpac3mg9bl.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest = numbers[1]\n    largest = numbers[1]\n    for\
    \ n in numbers[2:end]\n        if n < smallest\n            smallest = n\n   \
    \     elseif n > largest\n            largest = n\n        end\n    end\n    return\
    \ (smallest, largest)\nend\n</cell>\n<code language=julia-1.0>\nfind_closest_elements([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n</cell>\n<text>\nExercise: Write a function that\
    \ takes a vector of numbers and returns the index of the element that is the closest\
    \ to each of the numbers in the vector. For example, if the vector is [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2] then the function should return [1, 1, 2, 2, 3, 3].\nusing\
    \ Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmprdezhdqo.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmprdezhdqo.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpxlrb7dkg.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpxlrb7dkg.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[end]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpuflmefmk.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpuflmefmk.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n\
    \    for number in numbers[2:end]\n        if number < smallest_number\n     \
    \       smallest_number = number\n        elseif number > largest_number\n   \
    \         largest_number = number\n        end\n    end\n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<text>\nThe function above takes in a list of\
    \ numbers and returns the two numbers that are closest to each other. Let's see\
    \ how it works:\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpt4q1dfze.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpt4q1dfze.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n\
    \    for number in numbers[2:end]\n        if number < smallest_number\n     \
    \       smallest_number = number\n        elseif number > largest_number\n   \
    \         largest_number = number\n        end\n    end\n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpdadbwspo.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpdadbwspo.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n\
    \    for i in numbers[2:end]\n        if i < smallest_number\n            smallest_number\
    \ = i\n        elseif i > largest_number\n            largest_number = i\n   \
    \     else\n            smallest_number = i\n            largest_number = i\n\
    \        end\n    end\n    return (smallest_number, largest_number)\nend\n</cell>\n\
    <text>\nNow let's test our function\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpdp7pp24u.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpdp7pp24u.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[0]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<text>\nNow let's test our function by finding\
    \ the closest element to each of the numbers in the list we created earlier.\n\
    using Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpqio11u0u.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpqio11u0u.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpe8ipp0pt.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpe8ipp0pt.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest = numbers[1]\n    largest = numbers[1]\n    for\
    \ number in numbers[2:end]\n        if number < smallest \n            smallest\
    \ = number\n        elseif number > largest\n            largest = number\n  \
    \      end\n    end\n    return (smallest, largest)\nend\n</cell>\n<text>\nNow\
    \ let's try it out!\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmplhyeqmx0.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmplhyeqmx0.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest = numbers[1]\n    largest = numbers[1]\n    for\
    \ i in numbers[2:end]\n        if i < smallest\n            smallest = i\n   \
    \     elseif i > largest\n            largest = i\n        end\n    end\n    return\
    \ (smallest, largest)\nend\n</cell>\n<text>\nThe function above is called find_closest_elements\
    \ and takes in a list of numbers and returns the two numbers that are closest\
    \ to each other.\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpll5kn2hp.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpll5kn2hp.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[end]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a vector of numbers and returns the sum of the squares of the numbers in the\
    \ vector. \nThe function should raise an error if the vector is empty or has only\
    \ one element.\n>>> sum_squares([1.0, 2.0, 3.0])\n25.0\n>>> sum_squares([1.0,\
    \ 2.0, 3.0, 4.0])\n25.0\n>>> sum_squares([])\nERROR: sum_squares: Vector is empty\n\
    >>> sum_squares([1.0])\nERROR: sum_squares: Vector has only one element\n>>> sum_squares([1.0,\
    \ 2.0])\nERROR: sum_squares: Vector has only one element\n>>> sum_squares([1.0,\
    \ 2.0, 3.0])\nERROR: sum_squares: Vector has only one element\n>>> sum_squares([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\nERROR: sum_squares: Vector has only one element\n>>> sum_squares([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 6.0])\nERROR: sum_squares: Vector has only one element\n\
    >>> sum_squares([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0])\nERROR: sum_squares: Vector\
    \ has only one element\n>>> sum_squares([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0])\n\
    ERROR: sum_squares: Vector has only one element\n>>> sum_squares([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 6.0, 7.0, 8.0, 9.0])\nERROR: sum_squares: Vector has only one element\n\
    >>> sum_squares([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0])\nERROR: sum_squares:\
    \ Vector has only one element\n>>> sum_squares([1.0, 2.0, 3.0, 4.0, 5.0, 6.0,\
    \ 7.0, 8.0, 9.0, 10.0, 11.0])\nERROR: sum_squares: Vector has only one element\n\
    >>> sum_squares([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0])\n\
    ERROR: sum_squares: Vector has only one element\n>>> sum_squares([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0])\nERROR: sum_squares:\
    \ Vector has only one element\n>>> sum\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpb_0unvuj.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpb_0unvuj.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    closest_elements = numbers[1]\n    closest_number = numbers[1]\n\
    \    for number in numbers[2:end]\n        if number < closest_number\n      \
    \      closest_number = number\n            closest_elements = number\n      \
    \  else\n            if number == closest_number\n                closest_elements\
    \ = closest_elements\n            else\n                closest_elements = number\n\
    \            end\n        end\n    end\n    return closest_elements, closest_number\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpb9cbwwnx.jl:26\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpb9cbwwnx.jl:26\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    smallest = numbers[1]\n    largest = numbers[1]\n    for i in\
    \ numbers[2:end]\n        if i < smallest\n            smallest = i\n        elseif\
    \ i > largest\n            largest = i\n        end\n    end\n    return (smallest,\
    \ largest)\nend\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\nThis can be done\
    \ in O(n) time complexity using binary search and O(1) space complexity. \n<code>\n\
    using Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmprj5s2i79.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmprj5s2i79.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<text>\nNow let's test our function by finding\
    \ the closest element to each of our test vectors.\nusing Test\n\n@testset begin\n\
    \ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0,\
    \ 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t\
    @test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpxrigmcxq.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpxrigmcxq.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[end]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.4>\nfind_closest_elements([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector. \nThe function should take one argument, a vector of numbers.\n\
    The function should return the sum of the squares of the numbers in the vector.\n\
    The function should return nothing if the vector is empty.\nThe function should\
    \ return nothing if the vector is of length 1.\nThe function should return nothing\
    \ if the vector is of length 2.\nThe function should return nothing if the vector\
    \ is of length 3.\nThe function should return nothing if the vector is of length\
    \ 4.\nThe function should return nothing if the vector is of length 5.\nThe function\
    \ should return nothing if the vector is of length 6.\nThe function should return\
    \ nothing if the vector is of length 7.\nThe function should return nothing if\
    \ the vector is of length 8.\nThe function should return nothing if the vector\
    \ is of length 9.\nThe function should return nothing if the vector is of length\
    \ 10.\nThe function should return nothing if the vector is of length 11.\nThe\
    \ function should return nothing if the vector is of length 12.\nThe function\
    \ should return nothing if the vector is of length 13.\nThe function should return\
    \ nothing if the vector is of length 14.\nThe function should return nothing if\
    \ the vector is of length 15.\nThe function should return nothing if the vector\
    \ is of length 16.\nThe function should return nothing if the vector is of length\
    \ 17.\nThe function should return nothing if the vector is of length 18.\nThe\
    \ function should return nothing if the vector is of length 19.\nThe function\
    \ should return nothing if the vector is of length 20.\nThe function should return\
    \ nothing if the vector is of length 21.\nThe function should return nothing if\
    \ the vector is of length 22.\nThe function should return nothing if the vector\
    \ is of length 23.\nThe function should return nothing if the vector is of length\
    \ 24.\nThe function should return nothing if the vector is of length 25.\nThe\
    \ function should return nothing if the vector is of length 26.\nThe function\
    \ should return nothing if the vector is of length 27.\nThe function should return\
    \ nothing if the vector is of length 28.\nThe function should return nothing if\
    \ the vector is of length 29.\nThe function should return nothing if the vector\
    \ is of length 30.\n\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9hrksryk.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp9hrksryk.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[0]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp__8bystp.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp__8bystp.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest = numbers[1]\n    largest = numbers[1]\n    \n\
    \    for number in numbers[2:end]\n        if number < smallest \n           \
    \ smallest = number\n        elseif number > largest\n            largest = number\n\
    \        end\n    end\n    \n    return (smallest, largest)\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a vector of numbers and returns the sum\
    \ of the squares of the numbers in the vector.\n>>> sum_square_of_numbers([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 6.0])\n25.0\n>>> sum_square_of_numbers([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 6.0, 7.0])\n49.0\n>>> sum_square_of_numbers([1.0, 2.0, 3.0, 4.0, 5.0, 6.0,\
    \ 7.0, 8.0])\n145.0\n>>> sum_square_of_numbers([1.0, 2.0, 3.0, 4.0, 5.0, 6.0,\
    \ 7.0, 8.0, 9.0])\n245.0\n>>> sum_square_of_numbers([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 6.0, 7.0, 8.0, 9.0, 10.0])\n345.0\n>>> sum_square_of_numbers([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0])\n495.0\n>>> sum_square_of_numbers([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0])\n645.0\n>>> sum_square_of_numbers([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0])\n815.0\n>>>\
    \ sum_square_of_numbers([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0,\
    \ 12.0, 13.0, 14.0])\n1005.0\n>>> sum_square_of_numbers([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0])\n1225.0\n>>> sum_square_of_numbers([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0,\
    \ 16.0])\n1475.0\n>>> sum_square_of_numbers([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0,\
    \ 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0])\n1725.0\n>>> sum_square_of_numbers([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0,\
    \ 16.0, 17.0, 18.0])\n1975.0\n>>> sum_square_of_numbers([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 6.0, \nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t\
    @test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp15372szs.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp15372szs.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[end]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpp2skhao9.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpp2skhao9.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest = numbers[1]\n    largest = numbers[1]\n    \n\
    \    for i in numbers[2:end]\n        if i < smallest\n            smallest =\
    \ i\n        elseif i > largest\n            largest = i\n        end\n    end\n\
    \    \n    return (smallest, largest)\nend\n</cell>\n<code language=julia-1.5>\n\
    find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n</cell>\n<text>\nExercise:\
    \ Write a function that returns the sum of the squares of the numbers in a given\
    \ vector. For example, if the vector is [1.0, 2.0, 3.0, 4.0, 5.0, 6.0], the function\
    \ should return 55.\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpj0wgr4ph.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpj0wgr4ph.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    closest_elements = Vector{Float64}(undef, 0)\n    closest_elements[1]\
    \ = numbers[1]\n    closest_elements[2] = numbers[2]\n    \n    for element in\
    \ numbers[3:end]\n        \n        if element < closest_elements[1]\n       \
    \     closest_elements[1] = element\n        elseif element > closest_elements[2]\n\
    \            closest_elements[2] = element\n        end\n    end\n    \n    return\
    \ closest_elements\nend\n</cell>\n<text>\nNow let's test our new function by comparing\
    \ it to our old one:\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp5flvo7tp.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp5flvo7tp.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    smallest_number = numbers[1]\n    largest_number = numbers[end]\n\
    \    for number in numbers[2:end]\n        if number < smallest_number\n     \
    \       smallest_number = number\n        elseif number > largest_number\n   \
    \         largest_number = number\n        end\n    end\n    return (smallest_number,\
    \ largest_number)\nend\n</code>\n<|/ a dscore=1 |>\n<| a |>\n<code>\nusing Test\n\
    \n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpkihzbhkv.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpkihzbhkv.jl:20\n"
  exit_code: 1
  status: Exception
