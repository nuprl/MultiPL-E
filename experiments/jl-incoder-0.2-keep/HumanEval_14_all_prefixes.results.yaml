name: HumanEval_14_all_prefixes
language: julia
results:
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    \n    prefix_list = Vector{String}()\n\
    \    prefix_list = prefix_list ++ [string]\n    prefix_list = prefix_list ++ all_prefixes(string[1:end-1])\
    \ \n    prefix_list = prefix_list ++ all_prefixes(string[end+1:end])\n    \n \
    \   return prefix_list\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    ab\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"aba\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbac\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbaca\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacac\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacaca\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacaa\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacaaa\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaab\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabb\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacaaabbb\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacaaabbbc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacaaabbbcc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbccc\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbccca\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbcccaa\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacacaaabbbcccaaa\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacaaabbbcccaaaa\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacaaabbbcccaaaab\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacaaabbbcccaaaabb\")\n</cell\nusing Test\n\n@testset begin\n\ncandidate =\
    \ all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp70iie22m.jl:14\nin expression starting at\
    \ /tmp/tmp70iie22m.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    \n    prefix_list = Vector{String}()\n\
    \    prefix_list = prefix_list + all_prefixes(string[1:end-1]) + [string[1:end]]\n\
    \    return prefix_list\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"a\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abba\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbac\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbaca\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacac\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacbba\")\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacbbac\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacacbbacc\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacbbaccc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacbbacccb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacbbacccbb\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacbbacccbbb\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacbbacccbbbc\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacacbbacccbbbcb\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacbbacccbbbcbc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacbbacccbbbcbcc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacbbacccbbbcbccc\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacbbacccbbbcbcccb\"\
    )\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp13ohp2ig.jl:11\nin expression starting at\
    \ /tmp/tmp13ohp2ig.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i in 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-1] + string[i]\n    end\n    prefix_list\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\n    prefix_length(prefix::String, string::String)\n\
    using Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphvu2z60c.jl:13\nin expression starting at\
    \ /tmp/tmphvu2z60c.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i = 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-1] + string[i]\n    end\n    return prefix_list\nend\n</cell>\n\
    <code language=julia-1.4>\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprp8cic5d.jl:13\nin expression starting at\
    \ /tmp/tmprp8cic5d.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list = prefix_list ++ [string]\n    prefix_list = prefix_list ++ [string[1:end-1]]\n\
    \    prefix_list = prefix_list ++ [string[1:end-2]]\n    prefix_list = prefix_list\
    \ ++ [string[1:end-3]]\n    prefix_list = prefix_list ++ [string[1:end-4]]\n \
    \   prefix_list = prefix_list ++ [string[1:end-5]]\n    prefix_list = prefix_list\
    \ ++ [string[1:end-6]]\n    prefix_list = prefix_list ++ [string[1:end-7]]\n \
    \   prefix_list = prefix_list ++ [string[1:end-8]]\n    prefix_list = prefix_list\
    \ ++ [string[1:end-9]]\n    prefix_list = prefix_list ++ [string[1:end-10]]\n\
    \    prefix_list = prefix_list ++ [string[1:end-11]]\n    prefix_list = prefix_list\
    \ ++ [string[1:end-12]]\n    prefix_list = prefix_list ++ [string[1:end-13]]\n\
    \    prefix_list = prefix_list ++ [string[1:end-14]]\n    prefix_list = prefix_list\
    \ ++ [string[1:end-15]]\n    prefix_list = prefix_list ++ [string[1:end-16]]\n\
    \    prefix_list = prefix_list ++ [string[1:end-17]]\n    prefix_list = prefix_list\
    \ ++ [string[1:end-18]]\n    prefix_list = prefix_list ++ [string[1:end-19]]\n\
    \    prefix_list = prefix_list ++ [string[1:end-20]]\n    prefix_list = prefix_list\
    \ ++ [string[1:end-21]]\n    prefix_list = prefix_list ++ [string[1:end-22]]\n\
    \    prefix_list = prefix_list ++ [string[1:end-23]]\n    prefix_list = prefix_list\
    \ ++ [string[1:end-24]]\n    prefix_list = prefix_list ++ [string[1:end-25]]\n\
    \    prefix_list = prefix_list ++ [string[1:end-26]]\n    prefix_list = prefix_list\
    \ ++ [string[1:end-27]]\n    prefix_list = prefix_list ++ [string[1:end-28]]\n\
    \    prefix_list = prefix_list ++ [string[1:end-29]]\n    prefix_list = prefix_list\
    \ ++ [string[1:end-30]]\n    prefix_list = prefix_list ++ [string[1:end-31]]\n\
    \    prefix_list = prefix_list ++ [string[1:end-32]]\n    prefix_list = prefix_list\
    \ ++ [string[1:end-33]]\n    prefix_list = prefix_list ++ [string[1:end-34]]\n\
    \    prefix_list = prefix_list ++ [string[1:end-35]]\n    prefix_list = prefix_list\
    \ ++ [string[1:end-36]]\n    prefix_list = prefix_list ++ [string[1:end-37]]\n\
    \    prefix_list = prefix_list ++ [string[1:\nusing Test\n\n@testset begin\n\n\
    candidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7ogh3z9h.jl:46\nin expression starting at\
    \ /tmp/tmp7ogh3z9h.jl:46\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    \n    prefix_list = Vector{String}()\n\
    \    prefix_list = prefix_list + all_prefixes(string[1:end-1]) + [string[1:end-1]]\n\
    \    return prefix_list\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abc\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and\
    \ returns the longest prefix that is a palindrome. For example, given the string\
    \ \"racecar\", the longest palindrome would be \"racecar\".\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxaulp1kp.jl:11\nin expression starting at\
    \ /tmp/tmpxaulp1kp.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    \n    prefixes = Vector{String}()\n\
    \    \n    for c in string\n        prefixes += all_prefixes(c)\n    end\n   \
    \ \n    return prefixes\nend\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"\
    abc\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and\
    \ returns the longest prefix that is a substring of the input string. For example,\
    \ all_prefixes(\"abcabc\") should return \"abc\".\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5lb_3xqr.jl:15\nin expression starting at\
    \ /tmp/tmp5lb_3xqr.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = Vector{String}()\n\
    \    prefix_length = 0\n    for c in string\n        if prefix_length == 0 \n\
    \            prefixes << c\n        elseif prefix_length == length(string)\n \
    \           prefixes << c\n        else\n            prefixes << c << prefixes[prefix_length]\n\
    \        end\n        prefix_length += 1\n    end\n    return prefixes\nend\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns the longest prefix that\
    \ is a substring of the input string. For example, all_prefixes(\"abcabc\") should\
    \ return \"abc\".\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_do0tmq1.jl:20\nin expression starting at\
    \ /tmp/tmp_do0tmq1.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    for prefix in string.split(\"\")\n        prefix_list += all_prefixes(prefix)\
    \ \n    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abc\")\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcs30_wrv.jl:12\nin expression starting at\
    \ /tmp/tmpcs30_wrv.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    prefix_list[2] = string\n    prefix_list[3]\
    \ = string\n    \n    for i = 4 to length(prefix_list)\n        prefix_list[i]\
    \ = prefix_list[i-2] + prefix_list[i-1]\n    end\n    \n    return prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the longest prefix of a given string.\n\
    using Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpbk9n585x.jl:12 expected \"\
    end\", got \"length\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpbk9n585x.jl:12\n\
    in expression starting at /tmp/tmpbk9n585x.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    for prefix in string.split(\"\")\n        prefix_list += all_prefixes(prefix)\
    \ \n    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abc\")\n</cell>\n<text>\nExercise 4\nWrite a function that takes a string and\
    \ returns the longest prefix that is a substring of the input string. For example,\
    \ all_prefixes(\"abcabc\") should return \"abc\".\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwainorim.jl:12\nin expression starting at\
    \ /tmp/tmpwainorim.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[1:end-1]) \n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end-1:end])\n    return prefix_list\nend\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the longest prefix of a given string.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\"\
    ) == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwrfkm95t.jl:11\nin expression starting at\
    \ /tmp/tmpwrfkm95t.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i = 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-1] + string[i]\n    end\n    prefix_list\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\n    prefix_length(string::String)\nusing Test\n\
    \n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdhwabw4o.jl:13\nin expression starting at\
    \ /tmp/tmpdhwabw4o.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i = 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-1] + string[i]\n    end\n    return prefix_list\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\"\
    ) == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp4f6jltdw.jl:18\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  BoundsError: attempt to\
    \ access 0-element Vector{String} at index [1]\n  Stacktrace:\n   [1] setindex!\n\
    \     @ ./array.jl:903 [inlined]\n   [2] all_prefixes(string::String)\n     @\
    \ Main /tmp/tmp4f6jltdw.jl:7\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp4f6jltdw.jl:18 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp4f6jltdw.jl:17\ntest set:\
    \ Error During Test at /tmp/tmp4f6jltdw.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ]\n  BoundsError: attempt to access 0-element Vector{String} at index [1]\n  Stacktrace:\n\
    \   [1] setindex!\n     @ ./array.jl:903 [inlined]\n   [2] all_prefixes(string::String)\n\
    \     @ Main /tmp/tmp4f6jltdw.jl:7\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp4f6jltdw.jl:19 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp4f6jltdw.jl:17\ntest set:\
    \ Error During Test at /tmp/tmp4f6jltdw.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]\n  BoundsError: attempt to access\
    \ 0-element Vector{String} at index [1]\n  Stacktrace:\n   [1] setindex!\n   \
    \  @ ./array.jl:903 [inlined]\n   [2] all_prefixes(string::String)\n     @ Main\
    \ /tmp/tmp4f6jltdw.jl:7\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp4f6jltdw.jl:20 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp4f6jl"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4f6jltdw.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    for prefix in string.split(\"\")\n        prefix_list += all_prefixes(prefix)\
    \ \n    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns the number of times the string \"ab\" appears in the string. \n\
    >>> count_ab(\"abracadabra\")\n2\n>>> count_ab(\"abracadabra\")\n1\n>>> count_ab(\"\
    abracadabra\")\n0\n>>> count_ab(\"abracadabra\")\n0\n>>> count_ab(\"abracadabra\"\
    )\n0\n>>> count_ab(\"abracadabra\")\n0\n>>> count_ab(\"abracadabra\")\n0\n>>>\
    \ count_ab(\"abracadabra\")\n0\n>>> count_ab(\"abracadabra\")\n0\n>>> count_ab(\"\
    abracadabra\")\n0\n>>> count_ab(\"abracadabra\")\n0\n>>> count_ab(\"abracadabra\"\
    )\n0\n>>> count_ab(\"abracadabra\")\n0\n>>> count_ab(\"abracadabra\")\n0\n>>>\
    \ count_ab(\"abracadabra\")\n0\n>>> count_ab(\"abracadabra\")\n0\n>>> count_ab(\"\
    abracadabra\")\n0\n>>> count_ab(\"abracadabra\")\n0\n>>> count_ab(\"abracadabra\"\
    )\n0\n>>> count_ab(\"abracadabra\")\n0\n>>> count_ab(\"abracadabra\")\n0\n>>>\
    \ count_ab(\"abracadabra\")\n0\n>>> count_ab(\"abracadabra\")\n0\n>>> count_ab(\"\
    abracadabra\")\n0\n>>> count_ab(\"abracadabra\")\n0\n>>> count_ab(\"abracadabra\"\
    )\n0\n>>> count_ab(\"abracadabra\")\n0\n>>> count_ab(\"abracadabra\")\n0\n>>>\
    \ count_ab(\"abracadabra\")\n0\n>>> count_ab(\"abracadabra\")\n0\n>>> count_ab(\"\
    abracadabra\")\n0\n>>> count_ab(\"abracadabra\")\n0\n>>> count_ab(\"abracadabra\"\
    )\n0\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpellciyy3.jl:12\nin expression starting at\
    \ /tmp/tmpellciyy3.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    for prefix in string.split(\"\")\n        prefix_list += all_prefixes(prefix)\
    \ \n    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbac\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbaca\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacac\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacbba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacbbac\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacbbacc\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacbbaccc\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacbbacccb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacbbacccbc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacbbacccbcc\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacbbacccbccc\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacbbacccbcccb\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacacbbacccbcccbc\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacbbacccbcccbcc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacbbacccbcccbccc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacbbacccbcccbcccb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacbbacccbcccbcccb\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7vtzbljp.jl:12\nin expression starting at\
    \ /tmp/tmp7vtzbljp.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i = 2 to length(string)\n        prefix_list[i]\
    \ = prefix_list[i-2] + string[i]\n    end\n    return prefix_list\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\"\
    ) == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpdszlzx4j.jl:8 expected \"\
    end\", got \"length\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpdszlzx4j.jl:8\n\
    in expression starting at /tmp/tmpdszlzx4j.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i = 2 to length(string)\n        prefix_list[i]\
    \ = prefix_list[i-2] + string[i]\n    end\n    prefix_list\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\n    prefix_count(string::String)::Int64\nusing\
    \ Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\"\
    ) == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpyuxcvl8b.jl:8 expected \"\
    end\", got \"length\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyuxcvl8b.jl:8\n\
    in expression starting at /tmp/tmpyuxcvl8b.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i = 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-2] + string[i]\n    end\n    return prefix_list\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\"\
    ) == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpf8vlfzfd.jl:18\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  BoundsError: attempt to\
    \ access 0-element Vector{String} at index [1]\n  Stacktrace:\n   [1] setindex!\n\
    \     @ ./array.jl:903 [inlined]\n   [2] all_prefixes(string::String)\n     @\
    \ Main /tmp/tmpf8vlfzfd.jl:7\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpf8vlfzfd.jl:18 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpf8vlfzfd.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpf8vlfzfd.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ]\n  BoundsError: attempt to access 0-element Vector{String} at index [1]\n  Stacktrace:\n\
    \   [1] setindex!\n     @ ./array.jl:903 [inlined]\n   [2] all_prefixes(string::String)\n\
    \     @ Main /tmp/tmpf8vlfzfd.jl:7\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpf8vlfzfd.jl:19 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpf8vlfzfd.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpf8vlfzfd.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]\n  BoundsError: attempt to access\
    \ 0-element Vector{String} at index [1]\n  Stacktrace:\n   [1] setindex!\n   \
    \  @ ./array.jl:903 [inlined]\n   [2] all_prefixes(string::String)\n     @ Main\
    \ /tmp/tmpf8vlfzfd.jl:7\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpf8vlfzfd.jl:20 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpf8vlf"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpf8vlfzfd.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list = prefix_list + all_prefixes(string[1:end-1]) \n    prefix_list\
    \ = prefix_list + all_prefixes(string[end-1:end])\n    prefix_list = prefix_list\
    \ + all_prefixes(string[end+1:end+2])\n    prefix_list = prefix_list + all_prefixes(string[end+2:end+3])\n\
    \    prefix_list = prefix_list + all_prefixes(string[end+3:end+4])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[end+4:end+5])\n    prefix_list = prefix_list\
    \ + all_prefixes(string[end+5:end+6])\n    prefix_list = prefix_list + all_prefixes(string[end+6:end+7])\n\
    \    prefix_list = prefix_list + all_prefixes(string[end+7:end+8])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[end+8:end+9])\n    prefix_list = prefix_list\
    \ + all_prefixes(string[end+9:end+10])\n    prefix_list = prefix_list + all_prefixes(string[end+10:end+11])\n\
    \    prefix_list = prefix_list + all_prefixes(string[end+11:end+12])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[end+12:end+13])\n    prefix_list = prefix_list\
    \ + all_prefixes(string[end+13:end+14])\n    prefix_list = prefix_list + all_prefixes(string[end+14:end+15])\n\
    \    prefix_list = prefix_list + all_prefixes(string[end+15:end+16])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[end+16:end+17])\n    prefix_list = prefix_list\
    \ + all_prefixes(string[end+17:end+18])\n    prefix_list = prefix_list + all_prefixes(string[end+18:end+19])\n\
    \    prefix_list = prefix_list + all_prefixes(string[end+19:end+20])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[end+20:end+21])\n    prefix_list = prefix_list\
    \ + all_prefixes(string[end+21:end+22])\n    prefix_list = prefix_list + all_prefixes(string[end+22:end+23])\n\
    \    prefix_list = prefix_list + all_prefixes(string[end+23:end+24])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[end+24:end+25])\n    prefix_list = prefix_list\
    \ + all_prefixes(string[end+25:end+26])\n    prefix_\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpna_ja812.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpna_ja812.jl:1\n\
    in expression starting at /tmp/tmpna_ja812.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    for prefix in string.split(\"\")\n        prefix_list += all_prefixes(prefix)\
    \ \n    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbba\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbbba\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbbbba\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbbbbac\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbbbbaca\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbbbbacab\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbbbbacabc\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbbbbacabca\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbbbbacabcab\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbbbbacabcabc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbbbbacabcabca\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbbbbacabcabcab\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbbbbacabcabcabc\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbbbbacabcabcabca\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbbbbacabcabcabcab\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbbbbacabcabcabcabc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbbbbacabcabcabcabca\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbbbbacabcabcabcabcab\"\
    )\n</cell>\n<code language=julia-1.5>\nall_\nusing Test\n\n@testset begin\n\n\
    candidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq7gsh8w8.jl:12\nin expression starting at\
    \ /tmp/tmpq7gsh8w8.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    prefix_list[2] = string\n    for i = 4 to length(string)\n\
    \        prefix_list[i] = prefix_list[i-2] + string[i]\n    end\n    prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"ab\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abba\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbac\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbca\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbcadef\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbcadefgh\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbcadefghij\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbcadefghijk\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbcadefghijkl\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbcadefghijklm\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbcadefghijklmn\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbcadefghijklmno\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbcadefghijklmnop\")\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abbcadefghijklmnopq\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbcadefghijklmnopqrst\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbcadefghijklmnopqrstu\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbcadefghijklmnopqrstuv\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbcadefghijklmnopqrstuvw\")\n</cell>\n\
    <code language=julia-1.5>\nall_\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmprascs7dr.jl:9 expected \"\
    end\", got \"length\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmprascs7dr.jl:9\n\
    in expression starting at /tmp/tmprascs7dr.jl:9\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i in 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-1] + string[i]\n    end\n    return prefix_list\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx1aoq0x6.jl:13\nin expression starting at\
    \ /tmp/tmpx1aoq0x6.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i = 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-2] + string[i]\n    end\n    return prefix_list\nend\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"ab\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"aba\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abba\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbb\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbbbb\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbbbbb\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbbbbbb\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbbbbbbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbbbbbbbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbbbbbbbbb\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbbbbbbbbbb\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbbbbbbbbbbb\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbbbbbbbbbbbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbbbbbbbbbbbbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbbbbbbbbbbbbbb\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbbbbbbbbbbbbbbb\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbbbbbbbbbbbbbbbb\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbbbbbbbbbbbbbbbbb\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbbbbbbbbbbbbbbbbbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbbbbbbbbbbbbbbbbbbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbbbbbbbbbbbbbbbbbbbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbbbbbbbbbbbbbbbbbbbbb\")\n</cell\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa8rvr5t0.jl:13\nin expression starting at\
    \ /tmp/tmpa8rvr5t0.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    for c in string\n        prefix_list += all_prefixes(c) \n    end\n    prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9s7_lgpt.jl:12\nin expression starting at\
    \ /tmp/tmp9s7_lgpt.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i = 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-2] + string[i]\n    end\n    return prefix_list\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    prefix_length(string::String)\nusing Test\n\
    \n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbtrb2it1.jl:13\nin expression starting at\
    \ /tmp/tmpbtrb2it1.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    \n    prefix_list = Vector{String}()\n\
    \    \n    for prefix in string.split(\"\")\n        prefix_list += all_prefixes(prefix)\
    \ \n    end\n    \n    return prefix_list\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmps8m908do.jl:20\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  type String has no field\
    \ split\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n  \
    \ [2] all_prefixes(string::String)\n     @ Main /tmp/tmps8m908do.jl:9\n   [3]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmps8m908do.jl:20 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmps8m908do.jl:19\ntest set:\
    \ Error During Test at /tmp/tmps8m908do.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ]\n  type String has no field split\n  Stacktrace:\n   [1] getproperty\n     @\
    \ ./Base.jl:42 [inlined]\n   [2] all_prefixes(string::String)\n     @ Main /tmp/tmps8m908do.jl:9\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmps8m908do.jl:21 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmps8m908do.jl:19\ntest set:\
    \ Error During Test at /tmp/tmps8m908do.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]\n  type String has no field split\n\
    \  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] all_prefixes(string::String)\n\
    \     @ Main /tmp/tmps8m908do.jl:9\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmps8m908do.jl:22 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmps8m908do.jl:19\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmps8m908do.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i = 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-2] + string[i]\n    end\n    return prefix_list\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\"\
    ) == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp_n63zhkw.jl:18\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  BoundsError: attempt to\
    \ access 0-element Vector{String} at index [1]\n  Stacktrace:\n   [1] setindex!\n\
    \     @ ./array.jl:903 [inlined]\n   [2] all_prefixes(string::String)\n     @\
    \ Main /tmp/tmp_n63zhkw.jl:7\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp_n63zhkw.jl:18 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp_n63zhkw.jl:17\ntest set:\
    \ Error During Test at /tmp/tmp_n63zhkw.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ]\n  BoundsError: attempt to access 0-element Vector{String} at index [1]\n  Stacktrace:\n\
    \   [1] setindex!\n     @ ./array.jl:903 [inlined]\n   [2] all_prefixes(string::String)\n\
    \     @ Main /tmp/tmp_n63zhkw.jl:7\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp_n63zhkw.jl:19 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp_n63zhkw.jl:17\ntest set:\
    \ Error During Test at /tmp/tmp_n63zhkw.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]\n  BoundsError: attempt to access\
    \ 0-element Vector{String} at index [1]\n  Stacktrace:\n   [1] setindex!\n   \
    \  @ ./array.jl:903 [inlined]\n   [2] all_prefixes(string::String)\n     @ Main\
    \ /tmp/tmp_n63zhkw.jl:7\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp_n63zhkw.jl:20 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp_n63z"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_n63zhkw.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = Vector{String}()\n\
    \    prefixes << string\n    prefixes << string[1:end]\n    prefixes\nend\n</cell>\n\
    <code language=julia-1.5>\n@test all_prefixes(\"abc\") == [\"a\", \"ab\", \"abc\"\
    ]\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of characters in the string. \nWrite a function that takes a string\
    \ and returns the number of words in the string. \nWrite a function that takes\
    \ a string and returns the number of sentences in the string. \nWrite a function\
    \ that takes a string and returns the number of characters in the string that\
    \ are not spaces. \nWrite a function that takes a string and returns the number\
    \ of words in the string that are not spaces. \nWrite a function that takes a\
    \ string and returns the number of sentences in the string that are not spaces.\
    \ \nWrite a function that takes a string and returns the number of characters\
    \ in the string that are not spaces and words. \nWrite a function that takes a\
    \ string and returns the number of words in the string that are not spaces and\
    \ words. \nWrite a function that takes a string and returns the number of sentences\
    \ in the string that are not spaces and words. \nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmpm76sxl.jl:11\nin expression starting at\
    \ /tmp/tmpmpm76sxl.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i = 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-2] + string[i]\n    end\n    prefix_list\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\n    prefixes_of_string(string::String)\nusing Test\n\
    \n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp61d51phs.jl:13\nin expression starting at\
    \ /tmp/tmp61d51phs.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i = 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-1] + string[i]\n    end\n    return prefix_list\nend\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a string and returns the number of characters in the\
    \ string that are uppercase letters.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5sem4hw5.jl:13\nin expression starting at\
    \ /tmp/tmp5sem4hw5.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list = prefix_list + all_prefixes(string[1:end-1]) + [string[1:end-1]]\n\
    \    return prefix_list\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abc\")\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa6vcumwv.jl:10\nin expression starting at\
    \ /tmp/tmpa6vcumwv.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i in 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-1] + string[i]\n    end\n    prefix_list\nend\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"ab\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"aba\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abba\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbac\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbaca\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacac\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacaca\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacaa\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacaaa\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacaaab\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabb\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbb\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbc\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacaaabbbcc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacaaabbbccc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbccca\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbcccaa\")\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbcccaaa\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbcccaaaa\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacacaaabbbcccaaaab\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacacaaabbbcccaaaabb\")\n</cell>\n<code\
    \ language=julia-\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0k77t1x8.jl:13\nin expression starting at\
    \ /tmp/tmp0k77t1x8.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = Vector{String}()\n\
    \    for s in string\n        prefixes += all_prefixes(s)\n    end\n    prefixes\n\
    end\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    prefixes_from_longest(string::String)::Vector{String}\
    \ \n    Return list of all prefixes from longest to shortest of the input string\n\
    \    >>> prefixes_from_longest('abc')\n    ['abc']\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpac362epi.jl:12\nin expression starting at\
    \ /tmp/tmpac362epi.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    for prefix in string.split(\"\")\n        prefix_list += all_prefixes(prefix)\
    \ \n    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abc\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string and\
    \ returns the longest prefix that is a substring of the given string. For example,\
    \ all_prefixes(\"abcabc\") should return \"abc\".\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1habouuu.jl:12\nin expression starting at\
    \ /tmp/tmp1habouuu.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list = prefix_list + all_prefixes(string[1:end-1]) \n    prefix_list\
    \ = prefix_list + all_prefixes(string[end-1:end])\n    prefix_list = prefix_list\
    \ + all_prefixes(string[end:])\n    return prefix_list\nend\n</cell>\n<code language=julia-1.4>\n\
    using Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"end:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpuumatzun.jl:9\nin expression\
    \ starting at /tmp/tmpuumatzun.jl:9\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i = 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-2] + string[i]\n    end\n    return prefix_list\nend\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a string and returns the longest prefix that is a\
    \ substring of the input string. For example, all_prefixes('abc') returns ['abc',\
    \ 'ab', 'a'].\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp516o0bzd.jl:13\nin expression starting at\
    \ /tmp/tmp516o0bzd.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = Vector{String}()\n\
    \    for c in string\n        prefixes += all_prefixes(c)\n    end\n    prefixes\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbbevbuoa.jl:12\nin expression starting at\
    \ /tmp/tmpbbevbuoa.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i = 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-1] + string[i]\n    end\n    prefix_list\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@time all_prefixes(\"abc\")\n</cell>\n<code language=julia-1.5>\n\
    @time all_prefixes(\"abc\")\n</cell>\n<code language=julia-1.5>\n@time all_prefixes(\"\
    abc\")\n</cell>\n<code language=julia-1.5>\n@time all_prefixes(\"abc\")\n</cell>\n\
    <code language=julia-1.5>\n@time all_prefixes(\"abc\")\n</cell>\n<code language=julia-1.5>\n\
    @time all_prefixes(\"abc\")\n</cell>\n<code language=julia-1.5>\n@time all_prefixes(\"\
    abc\")\n</cell>\n<code language=julia-1.5>\n@time all_prefixes(\"abc\")\n</cell>\n\
    <code language=julia-1.5>\n@time all_prefixes(\"abc\")\n</cell>\n<code language=julia-1.5>\n\
    @time all_prefixes(\"abc\")\n</cell>\n<code language=julia-1.5>\n@time all_prefixes(\"\
    abc\")\n</cell>\n<code language=julia-1.5>\n@time all_prefixes(\"abc\")\n</cell>\n\
    <code language=julia-1.5>\n@time all_prefixes(\"abc\")\n</cell>\n<code language=julia-1.5>\n\
    @time all_prefixes(\"abc\")\n</cell>\n<code language=julia-1.5>\n@time all_prefixes(\"\
    abc\")\n</cell>\n<code language=julia-1.5>\n@time all_prefixes(\"abc\")\n</cell>\n\
    <code language=julia-1.5>\n@time all_prefixes(\"abc\")\n</cell>\n<code language=julia-1.5>\n\
    @time all_prefixes(\"abc\")\n</cell>\n<code language=julia-1.5>\n@time all_prefixes(\"\
    abc\")\n</cell>\n<code language=julia-1.5>\n@time all_prefixes(\"abc\")\n</cell>\n\
    <code language=julia-1.5>\n@time all_prefixes(\"abc\")\n</cell>\n<code language=julia-1.5>\n\
    @time all_prefixes(\"abc\")\n</cell>\n<code language=julia-1.5>\n@time all_prefixes(\"\
    abc\")\n</cell>\n<code language=julia-1.5>\n@time all_prefixes(\"abc\")\n</cell>\n\
    <code language=julia-1.5>\n@time all_prefixes(\"\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd4x34xsz.jl:13\nin expression starting at\
    \ /tmp/tmpd4x34xsz.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i = 2 to length(prefix_list)\n        prefix_list[i]\
    \ = prefix_list[i-2] + prefix_list[i-1]\n    end\n    return prefix_list\nend\n\
    using Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpph96ju6x.jl:8 expected \"\
    end\", got \"length\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpph96ju6x.jl:8\n\
    in expression starting at /tmp/tmpph96ju6x.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    for prefix in string.split(\"\")\n        prefix_list += prefixes_of(prefix)\n\
    \    return prefix_list\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp6q2xv7e3.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6q2xv7e3.jl:1\n\
    in expression starting at /tmp/tmp6q2xv7e3.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    for s in string\n        prefix_list = [prefix_list..s]\n    end\n    prefix_list\n\
    end\n</cell>\n<code language=julia-1.0>\nall_prefixes(\"abc\")\n</cell>\n<code\
    \ language=julia-1.0>\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7yzk_rgr.jl:12\nin expression starting at\
    \ /tmp/tmp7yzk_rgr.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    prefix_list[2] = string\n    \n    for i = 3:length(string)\n\
    \        prefix_list[i] = prefix_list[i-2] + string[i]\n    end\n    \n    return\
    \ prefix_list\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp9ewnk6e5.jl:22\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  BoundsError: attempt to\
    \ access 0-element Vector{String} at index [1]\n  Stacktrace:\n   [1] setindex!\n\
    \     @ ./array.jl:903 [inlined]\n   [2] all_prefixes(string::String)\n     @\
    \ Main /tmp/tmp9ewnk6e5.jl:8\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp9ewnk6e5.jl:22 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp9ewnk6e5.jl:21\ntest set:\
    \ Error During Test at /tmp/tmp9ewnk6e5.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ]\n  BoundsError: attempt to access 0-element Vector{String} at index [1]\n  Stacktrace:\n\
    \   [1] setindex!\n     @ ./array.jl:903 [inlined]\n   [2] all_prefixes(string::String)\n\
    \     @ Main /tmp/tmp9ewnk6e5.jl:8\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp9ewnk6e5.jl:23 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp9ewnk6e5.jl:21\ntest set:\
    \ Error During Test at /tmp/tmp9ewnk6e5.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]\n  BoundsError: attempt to access\
    \ 0-element Vector{String} at index [1]\n  Stacktrace:\n   [1] setindex!\n   \
    \  @ ./array.jl:903 [inlined]\n   [2] all_prefixes(string::String)\n     @ Main\
    \ /tmp/tmp9ewnk6e5.jl:8\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp9ewnk6e5.jl:24 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp9ewnk"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9ewnk6e5.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    \n    prefixes = Vector{String}()\n\
    \    \n    for c in string\n        prefixes += all_prefixes(c) + [c]\n    end\n\
    \    \n    return prefixes\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abc\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and\
    \ returns the longest prefix that is a substring of the input string. For example,\
    \ all_prefixes(\"abcabc\") should return [\"abc\"].\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl68_y7in.jl:15\nin expression starting at\
    \ /tmp/tmpl68_y7in.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    for prefix in string.split(\"\")\n        prefix_list += prefixes_of(prefix)\n\
    \    return prefix_list\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxprcfbgq.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxprcfbgq.jl:1\n\
    in expression starting at /tmp/tmpxprcfbgq.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    for prefix in string.split(\"\")\n        prefix_list += prefixes_of_prefix(prefix)\n\
    \    return prefix_list\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpaf8nuco5.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpaf8nuco5.jl:1\n\
    in expression starting at /tmp/tmpaf8nuco5.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list = prefix_list ++ [string]\n    prefix_list = prefix_list ++ all_prefixes(string[1:end])\n\
    \    return prefix_list\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbac\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbaca\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacac\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacbba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacbbac\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacbbaca\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacbbacac\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacbbacacb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacbbacacbba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacbbacacbbac\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacbbacacbbaca\")\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacbbacacbbacac\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacbbacacbbacacb\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacacbbacacbbacacbba\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacacbbacacbbacacbbac\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacacbbacacbbacacbbaca\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abba\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6zppqesg.jl:11\nin expression starting at\
    \ /tmp/tmp6zppqesg.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i in 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-1] + string[i]\n    end\n    prefix_list\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\n    prefix_counts(string::String)\nusing Test\n\
    \n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsheflmzo.jl:13\nin expression starting at\
    \ /tmp/tmpsheflmzo.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i in 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-1] + string[i]\n    end\n    prefix_list\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\n    prefix_lengths(string::String)\nusing Test\n\
    \n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppiiz3iay.jl:13\nin expression starting at\
    \ /tmp/tmppiiz3iay.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    prefix_list[2] = string[1:end-1]\n    prefix_list[3]\
    \ = string[2:end]\n    \n    return prefix_list\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpcf919s68.jl:19\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  BoundsError: attempt to\
    \ access 0-element Vector{String} at index [1]\n  Stacktrace:\n   [1] setindex!\n\
    \     @ ./array.jl:903 [inlined]\n   [2] all_prefixes(string::String)\n     @\
    \ Main /tmp/tmpcf919s68.jl:8\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpcf919s68.jl:19 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpcf919s68.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpcf919s68.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ]\n  BoundsError: attempt to access 0-element Vector{String} at index [1]\n  Stacktrace:\n\
    \   [1] setindex!\n     @ ./array.jl:903 [inlined]\n   [2] all_prefixes(string::String)\n\
    \     @ Main /tmp/tmpcf919s68.jl:8\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpcf919s68.jl:20 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpcf919s68.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpcf919s68.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]\n  BoundsError: attempt to access\
    \ 0-element Vector{String} at index [1]\n  Stacktrace:\n   [1] setindex!\n   \
    \  @ ./array.jl:903 [inlined]\n   [2] all_prefixes(string::String)\n     @ Main\
    \ /tmp/tmpcf919s68.jl:8\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpcf919s68.jl:21 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpcf919"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcf919s68.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    for prefix in string.split(\"\")\n        prefix_list += all_prefixes(prefix)\
    \ \n    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    ab\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"aba\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbac\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbaca\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacac\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacacb\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacbba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacbbac\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacbbacc\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacbbaccc\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacbbacccb\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacbbacccbc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacbbacccbca\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacbbacccbcaa\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacbbacccbcaab\")\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacbbacccbcaaba\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacbbacccbcaabac\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacacbbacccbcaabaca\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacacbbacccbcaabacab\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacacbbacccbcaabacaba\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"ab\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxy1to1oe.jl:12\nin expression starting at\
    \ /tmp/tmpxy1to1oe.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    \n    prefix_list = Vector{String}()\n\
    \    prefix_list = prefix_list + all_prefixes(string[1:end-1]) + [string[1:end-1]]\n\
    \    \n    return prefix_list\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    prefix_list[2] = string\n    prefix_list[3]\
    \ = string\n    prefix_list[4] = string\n    prefix_list[5] = string\n    prefix_list[6]\
    \ = string\n    prefix_list[7] = string\n    prefix_list[8] = string\n    prefix_list[9]\
    \ = string\n    prefix_list[10] = string\n    prefix_list[11] = string\n    prefix_list[12]\
    \ = string\n    prefix_list[13] = string\n    prefix_list[14] = string\n    prefix_list[15]\
    \ = string\n    prefix_list[16] = string\n    prefix_list[17] = string\n    prefix_list[18]\
    \ = string\n    prefix_list[19] = string\n    prefix_list[20] = string\n    prefix_list[21]\
    \ = string\n    prefix_list[22] = string\n    prefix_list[23] = string\n    prefix_list[24]\
    \ = string\n    prefix_list[25] = string\n    prefix_list[26] = string\n    prefix_list[27]\
    \ = string\n    prefix_list[28] = string\n    prefix_list[29] = string\n    prefix_list[30]\
    \ = string\n    prefix_list[31] = string\n    prefix_list[32] = string\n    prefix_list[33]\
    \ = string\n    prefix_list[34] = string\n    prefix_list[35] = string\n    prefix_list[36]\
    \ = string\n    prefix_list[37] = string\n    prefix_list[38] = string\n    prefix_list[39]\
    \ = string\n    prefix_list[40] = string\n    prefix_list[41] = string\n    prefix_list[42]\
    \ = string\n    prefix_list[43] = string\n    prefix_list[44] = string\n    prefix_list[45]\
    \ = string\n    prefix_list[46] = string\n    prefix_list[47] = string\n    prefix_list[48]\
    \ = string\n    prefix_list[49] = string\n    prefix_list[50] = string\n    prefix_list[51]\
    \ = string\n    prefix_list[52] = string\n    prefix_list[53] = string\n    prefix_list[54]\
    \ = string\n    prefix_list[55] = string\n    prefix_list[56] = string\n    prefix_list[57]\
    \ = string\n    prefix_list[58] = string\n    prefix_list[59] = string\n    prefix_list[60]\
    \ = string\n    prefix_list[61] = string\n    prefix_list[62] = string\n    prefix_list[63]\
    \ = string\n    prefix_list[64] = string\n    prefix_list[65] = string\n    prefix_list[66]\
    \ = string\n    prefix_list[67] = string\n    prefix_list[68] = string\n    prefix_list[69]\
    \ = string\n    prefix_list[70] = string\n    prefix_list[71] = string\n    prefix_list[72]\
    \ = string\n    prefix_\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxzol7fpi.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxzol7fpi.jl:1\n\
    in expression starting at /tmp/tmpxzol7fpi.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i = 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-2] + string[i]\n    end\n    prefix_list\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\n    prefix_list_to_string(prefix_list::Vector{String})\n\
    using Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp35xh2k6.jl:13\nin expression starting at\
    \ /tmp/tmpp35xh2k6.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i = 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-1] + string[i]\n    end\n    return prefix_list\nend\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the longest prefix of a given string.\nusing Test\n\
    \n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpanj_q0e6.jl:13\nin expression starting at\
    \ /tmp/tmpanj_q0e6.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i = 2 to length(string)\n        prefix_list[i]\
    \ = prefix_list[i-2] + string[i]\n    end\n    prefix_list\nend\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-\nusing Test\n\n\
    @testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpi2fpzraj.jl:8 expected \"\
    end\", got \"length\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpi2fpzraj.jl:8\n\
    in expression starting at /tmp/tmpi2fpzraj.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list = prefix_list + prefixes(string)\n    prefix_list = prefix_list\
    \ + prefixes(string, \"-\")\n    prefix_list = prefix_list + prefixes(string,\
    \ \"_\")\n    prefix_list = prefix_list + prefixes(string, \"-\")\n    prefix_list\
    \ = prefix_list + prefixes(string, \"_\")\n    prefix_list = prefix_list + prefixes(string,\
    \ \"-\")\n    prefix_list = prefix_list + prefixes(string, \"_\")\n    prefix_list\
    \ = prefix_list + prefixes(string, \"-\")\n    prefix_list = prefix_list + prefixes(string,\
    \ \"_\")\n    prefix_list = prefix_list + prefixes(string, \"-\")\n    prefix_list\
    \ = prefix_list + prefixes(string, \"_\")\n    prefix_list = prefix_list + prefixes(string,\
    \ \"-\")\n    prefix_list = prefix_list + prefixes(string, \"_\")\n    prefix_list\
    \ = prefix_list + prefixes(string, \"-\")\n    prefix_list = prefix_list + prefixes(string,\
    \ \"_\")\n    prefix_list = prefix_list + prefixes(string, \"-\")\n    prefix_list\
    \ = prefix_list + prefixes(string, \"_\")\n    prefix_list = prefix_list + prefixes(string,\
    \ \"-\")\n    prefix_list = prefix_list + prefixes(string, \"_\")\n    prefix_list\
    \ = prefix_list + prefixes(string, \"-\")\n    prefix_list = prefix_list + prefixes(string,\
    \ \"_\")\n    prefix_list = prefix_list + prefixes(string, \"-\")\n    prefix_list\
    \ = prefix_list + prefixes(string, \"_\")\n    prefix_list = prefix_list + prefixes(string,\
    \ \"-\")\n    prefix_list = prefix_list + prefixes(string, \"_\")\n    prefix_list\
    \ = prefix_list + prefixes(string, \"-\")\n    prefix_list = prefix_list + prefixes(string,\
    \ \"_\")\n    prefix_list = prefix_list + prefixes(string, \"-\")\n    prefix_list\
    \ = prefix_list + prefixes(string, \"_\")\n    prefix_list = prefix_list + prefixes(string,\
    \ \"-\")\n    prefix_list = prefix_list + prefixes(string, \"_\")\n    prefix_list\
    \ = prefix_list + prefixes(string, \"-\")\n    prefix_list = prefix_list + prefixes(string,\
    \ \"_\")\n    prefix_list = prefix_list + prefixes(string, \"-\")\n    prefix_list\
    \ = prefix_list + prefixes(string, \"_\")\n    prefix_list = prefix_list + prefixes(string,\
    \ \"-\")\n    prefix_list = prefix_list + prefixes(string, \"_\")\n    prefix_list\
    \ = prefix_list + prefixes(string, \"-\")\n    prefix_list = prefix_list + prefixes(string,\
    \ \"_\")\n    prefix_list = prefix_list + prefixes(string, \"-\")\n    prefix_list\
    \ = prefix_list + prefixes(string, \"_\")\n    prefix_list = prefix_list + prefixes(string,\
    \ \"-\")\n\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7ygguc_v.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7ygguc_v.jl:1\n\
    in expression starting at /tmp/tmp7ygguc_v.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list = prefix_list + [string[1:i] for i in 1:length(string)]\n   \
    \ prefix_list = prefix_list + [string[i+1::] for i in 1:length(string)]\n    prefix_list\
    \ = prefix_list + [string[i+1::] for i in 1:length(string)]\n    prefix_list =\
    \ prefix_list + [string[i+1::] for i in 1:length(string)]\n    prefix_list = prefix_list\
    \ + [string[i+1::] for i in 1:length(string)]\n    prefix_list = prefix_list +\
    \ [string[i+1::] for i in 1:length(string)]\n    prefix_list = prefix_list + [string[i+1::]\
    \ for i in 1:length(string)]\n    prefix_list = prefix_list + [string[i+1::] for\
    \ i in 1:length(string)]\n    prefix_list = prefix_list + [string[i+1::] for i\
    \ in 1:length(string)]\n    prefix_list = prefix_list + [string[i+1::] for i in\
    \ 1:length(string)]\n    prefix_list = prefix_list + [string[i+1::] for i in 1:length(string)]\n\
    \    prefix_list = prefix_list + [string[i+1::] for i in 1:length(string)]\n \
    \   prefix_list = prefix_list + [string[i+1::] for i in 1:length(string)]\n  \
    \  prefix_list = prefix_list + [string[i+1::] for i in 1:length(string)]\n   \
    \ prefix_list = prefix_list + [string[i+1::] for i in 1:length(string)]\n    prefix_list\
    \ = prefix_list + [string[i+1::] for i in 1:length(string)]\n    prefix_list =\
    \ prefix_list + [string[i+1::] for i in 1:length(string)]\n    prefix_list = prefix_list\
    \ + [string[i+1::] for i in 1:length(string)]\n    prefix_list = prefix_list +\
    \ [string[i+1::] for i in 1:length(string)]\n    prefix_list = prefix_list + [string[i+1::]\
    \ for i in 1:length(string)]\n    prefix_list = prefix_list + [string[i+1::] for\
    \ i in 1:length(string)]\n    prefix_list = prefix_list + [string[i+1::] for i\
    \ in 1:length(string)]\n    prefix_list = prefix_list + [string[i+1::] for i in\
    \ 1:length(string)]\n    prefix_list = prefix_list + [string[i+1::] for i in 1:length(string)]\n\
    \    prefix_list = prefix_list + [string[i+1::] for i in 1:length(string)]\n \
    \   prefix_list = prefix_list + [string[i+1::] for i in 1:length(string)]\n  \
    \  prefix_list = prefix_list + [string[i+1::] for i in 1:length(string)]\n   \
    \ prefix_list = prefix_list + [string[i+1::] for i in 1:length(string)]\n    prefix_list\
    \ = prefix_list + [string[i+1::] for i in 1:length(string)]\n    prefix_list =\
    \ prefix_list + [string[i+1::\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"]\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmponowak9x.jl:8\nin expression starting at /tmp/tmponowak9x.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[1:end-1]) \n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end-1:end])\n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end+1:end+2])\n    prefix_list = prefix_list ++ all_prefixes(string[end+2:end+3])\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[end+3:end+4])\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end+4:end+5])\n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end+5:end+6])\n    prefix_list = prefix_list ++ all_prefixes(string[end+6:end+7])\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[end+7:end+8])\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end+8:end+9])\n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end+9:end+10])\n    prefix_list = prefix_list ++ all_prefixes(string[end+10:end+11])\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[end+11:end+12])\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end+12:end+13])\n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end+13:end+14])\n    prefix_list = prefix_list ++ all_prefixes(string[end+14:end+15])\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[end+15:end+16])\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end+16:end+17])\n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end+17:end+18])\n    prefix_list = prefix_list ++ all_prefixes(string[end+18:end+19])\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[end+19:end+20])\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end+20:end+21])\n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end+21:end+22])\n    prefix_list = prefix_list ++ all_prefixes(string[end+22:end+23])\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[end+23:end+24])\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end+24:end+25])\n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end+25:end+26])\n    prefix_\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpld8z9el1.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpld8z9el1.jl:1\n\
    in expression starting at /tmp/tmpld8z9el1.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    for prefix in string.split(\"\")\n        prefix_list += prefixes_of(prefix)\n\
    \    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns the longest prefix that is a substring of the input string. For\
    \ example, all_prefixes(\"abracadabra\") should return \"abracadabra\".\nusing\
    \ Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\"\
    ) == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7ii8l_zs.jl:12\nin expression starting at\
    \ /tmp/tmp7ii8l_zs.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i in 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-1] + string[i]\n    end\n    return prefix_list\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    prefix_count(string::String)::Int64\nusing\
    \ Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\"\
    ) == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_63c9y47.jl:13\nin expression starting at\
    \ /tmp/tmp_63c9y47.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    for prefix in string.split(\"\")\n        prefix_list += prefixes_of(prefix)\n\
    \    return prefix_list\nend\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"\
    abc\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and\
    \ returns the longest prefix that is a substring of the input string. For example,\
    \ all_prefixes(\"abcabc\") should return \"abc\".\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvor004zy.jl:11\nin expression starting at\
    \ /tmp/tmpvor004zy.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[1:end-1]) \n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end-1:end])\n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end:])\n    return prefix_list\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"end:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp317ooa0_.jl:9\nin expression\
    \ starting at /tmp/tmp317ooa0_.jl:9\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list = prefix_list ++ [string]\n    prefix_list = prefix_list ++ all_prefixes(string[1:end-1])\
    \ \n    return prefix_list\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"a\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abba\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbab\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbaba\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbabab\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbababa\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbababaa\")\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abbababaaa\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbababaaab\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbababaaabb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbababaaabbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbababaaabbbb\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbababaaabbbbc\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbababaaabbbbcc\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbababaaabbbbccc\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbababaaabbbbcccc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbababaaabbbbccccc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbababaaabbbbcccccc\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbababaaabbbbccccccc\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbababaa\nusing Test\n\n\
    @testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzy0vtcgs.jl:11\nin expression starting at\
    \ /tmp/tmpzy0vtcgs.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    \n    prefixes = Vector{String}()\n\
    \    \n    for char in string\n        prefixes += all_prefixes(char) \n    end\n\
    \    \n    return prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpunxtc14b.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"]\n  MethodError: no method matching all_prefixes(::Char)\n\
    \  Closest candidates are:\n    all_prefixes(!Matched::String) at /tmp/tmpunxtc14b.jl:5\n\
    \  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main /tmp/tmpunxtc14b.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpunxtc14b.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpunxtc14b.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpunxtc14b.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]\n  MethodError: no method matching\
    \ all_prefixes(::Char)\n  Closest candidates are:\n    all_prefixes(!Matched::String)\
    \ at /tmp/tmpunxtc14b.jl:5\n  Stacktrace:\n   [1] all_prefixes(string::String)\n\
    \     @ Main /tmp/tmpunxtc14b.jl:10\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpunxtc14b.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpunxtc14b.jl:19\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      2      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpunxtc14b.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i = 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-1] + string[i]\n    end\n    prefix_list\nend\n</cell>\n<code\
    \ language=julia-1.4>\nall_prefixes(\"abc\")\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a string and returns the number of characters in the string.\
    \ \nWrite a function that takes a string and returns the number of words in the\
    \ string. \nWrite a function that takes a string and returns the number of sentences\
    \ in the string. \nWrite a function that takes a string and returns the number\
    \ of characters in the string that are capitalized. \nWrite a function that takes\
    \ a string and returns the number of words in the string that are capitalized.\
    \ \nWrite a function that takes a string and returns the number of sentences in\
    \ the string that are capitalized. \nWrite a function that takes a string and\
    \ returns the number of characters in the string that are all uppercase. \nWrite\
    \ a function that takes a string and returns the number of words in the string\
    \ that are all uppercase. \nWrite a function that takes a string and returns the\
    \ number of sentences in the string that are all uppercase. \nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcypv_gss.jl:13\nin expression starting at\
    \ /tmp/tmpcypv_gss.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    for prefix in string.split(\"\")\n        prefix_list += all_prefixes(prefix)\
    \ \n    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgo35yf82.jl:12\nin expression starting at\
    \ /tmp/tmpgo35yf82.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    prefix_length\
    \ = 0\n    for c in string\n        if prefix_length == 0 \n            prefixes\
    \ += [c]\n        elseif prefix_length < length(c)\n            prefixes += [c]\n\
    \        else\n            prefixes += [c(prefix_length)]\n            prefix_length\
    \ = 0\n        end\n    end\n    return prefixes\nend\n</cell>\n<code language=julia-1.3>\n\
    all_prefixes(\"abc\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns the longest prefix that is a substring of the input string.\
    \ \nFor example, for the string \"abcde\", the longest prefix is \"abc\", since\
    \ \"abcde\" is a substring of \"abc\".\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1y89qzbi.jl:20\nin expression starting at\
    \ /tmp/tmp1y89qzbi.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    for prefix in string.split(\"\")\n        prefix_list += prefixes_of(prefix)\n\
    \    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracad\nusing Test\n\n\
    @testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqc8mlmkk.jl:12\nin expression starting at\
    \ /tmp/tmpqc8mlmkk.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i = 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-2] + string[i]\n    end\n    prefix_list\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@test all_prefixes(\"abc\") == [\"a\", \"ab\", \"abc\"\
    ]\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the longest prefix that is a substring of the string. For example, all_prefixes(\"\
    abcabc\") should return [\"a\", \"ab\", \"abc\"].\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb3ina9_w.jl:13\nin expression starting at\
    \ /tmp/tmpb3ina9_w.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    \n    prefix_list = Vector{String}()\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmprfgi16ez.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmprfgi16ez.jl:1\n\
    in expression starting at /tmp/tmprfgi16ez.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    for s in string\n        prefix_list += all_prefixes(s)\n    end\n    prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbac\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbaca\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacac\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacaca\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacaa\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaa\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaab\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacaaabb\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacaaabbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacaaabbbc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbcc\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbccd\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbccdc\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacacaaabbbccdce\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacaaabbbccdcef\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacaaabbbccdcefg\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbccdcefgj\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbccdcefgjh\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbccdcefgjhig\n\
    using Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuy_i7onw.jl:12\nin expression starting at\
    \ /tmp/tmpuy_i7onw.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    for s in string\n        prefix_list += all_prefixes(s)\n    end\n    prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjvskk_cq.jl:12\nin expression starting at\
    \ /tmp/tmpjvskk_cq.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i = 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-1] + string[i]\n    end\n    prefix_list\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwha9otwi.jl:13\nin expression starting at\
    \ /tmp/tmpwha9otwi.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i = 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-2] + string[i]\n    end\n    return prefix_list\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\"\
    ) == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpxl4av7ib.jl:18\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  BoundsError: attempt to\
    \ access 0-element Vector{String} at index [1]\n  Stacktrace:\n   [1] setindex!\n\
    \     @ ./array.jl:903 [inlined]\n   [2] all_prefixes(string::String)\n     @\
    \ Main /tmp/tmpxl4av7ib.jl:7\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpxl4av7ib.jl:18 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpxl4av7ib.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpxl4av7ib.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ]\n  BoundsError: attempt to access 0-element Vector{String} at index [1]\n  Stacktrace:\n\
    \   [1] setindex!\n     @ ./array.jl:903 [inlined]\n   [2] all_prefixes(string::String)\n\
    \     @ Main /tmp/tmpxl4av7ib.jl:7\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpxl4av7ib.jl:19 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpxl4av7ib.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpxl4av7ib.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]\n  BoundsError: attempt to access\
    \ 0-element Vector{String} at index [1]\n  Stacktrace:\n   [1] setindex!\n   \
    \  @ ./array.jl:903 [inlined]\n   [2] all_prefixes(string::String)\n     @ Main\
    \ /tmp/tmpxl4av7ib.jl:7\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpxl4av7ib.jl:20 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpxl4av"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxl4av7ib.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i = 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-1] + string[i]\n    end\n    return prefix_list\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0x1hs4ie.jl:13\nin expression starting at\
    \ /tmp/tmp0x1hs4ie.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[1:end-1]) \n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end+1:end-1]) \n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end+1:end]) \n    prefix_list = prefix_list ++ all_prefixes(string[1:end])\
    \ \n    return prefix_list\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abc\")\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp90eaii1w.jl:13\nin expression starting at\
    \ /tmp/tmp90eaii1w.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[1:end-1]) \n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end-1:end])\n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end-1:end-1])\n    return prefix_list\nend\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a string and returns the longest prefix that is a\
    \ substring of the input string. For example, all_prefixes(\"abcabc\") should\
    \ return \"abc\".\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp07mtn6wc.jl:12\nin expression starting at\
    \ /tmp/tmp07mtn6wc.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for c\
    \ in string\n        prefixes += all_prefixes(c)\n    end\n    prefixes\nend\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns the longest prefix that\
    \ is a substring of the input string. For example, all_prefixes(\"abcabc\") should\
    \ return [\"abc\"].\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpznr8dxqr.jl:12\nin expression starting at\
    \ /tmp/tmpznr8dxqr.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[1:end-1]) \n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end+1:end-1])\n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end+1:end-1])\n    return prefix_list\nend\n</cell>\n\
    <code language=julia-1.3>\nall_prefixes(\"abc\")\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a string and returns the number of times the string\
    \ \"ab\" appears in the string. \n>>> count_ab(\"abcabcbb\")\n2\n>>> count_ab(\"\
    a\")\n1\n>>> count_ab(\"ab\")\n1\n>>> count_ab(\"aba\")\n0\n>>> count_ab(\"abba\"\
    )\n1\n>>> count_ab(\"abbaab\")\n2\n>>> count_ab(\"abbaaba\")\n3\n>>> count_ab(\"\
    abbaabaa\")\n4\n>>> count_ab(\"abbaabaaab\")\n5\n>>> count_ab(\"abbaabaaabb\"\
    )\n5\n>>> count_ab(\"abbaabaaabbb\")\n5\n>>> count_ab(\"abbaabaaabbbb\")\n5\n\
    >>> count_ab(\"abbaabaaabbbbba\")\n5\n>>> count_ab(\"abbaabaaabbbbbaab\")\n5\n\
    >>> count_ab(\"abbaabaaabbbbbaaba\")\n5\n>>> count_ab(\"abbaabaaabbbbbaabaa\"\
    )\n5\n>>> count_ab(\"abbaabaaabbbbbaabaaa\")\n5\n>>> count_ab(\"abbaabaaabbbbbaabaaaa\"\
    )\n5\n>>> count_ab(\"abbaabaaabbbbbaabaaaaa\")\n5\n>>> count_ab(\"abbaabaaabbbbbaabaaaaaa\"\
    )\n5\n>>> count_ab(\"abbaabaaabbbbbaabaaaaaaa\")\n5\n>>> count_ab(\"abbaabaaabbbbbaabaaaaaaab\"\
    )\n5\n>>> count_ab(\"abbaabaaabbbbbaabaaaaaaaba\")\n5\n>>> count_ab(\"abbaabaaabbbbbaabaaaaaaabaa\"\
    )\n5\n>>> count_ab(\"abbaabaaabbbbbaabaaaaaaabaaa\")\n5\n>>> count_ab(\"abbaabaaabbbbbaabaaaaaaabaaaa\"\
    )\n5\n>>> count_ab\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1bphpy_u.jl:12\nin expression starting at\
    \ /tmp/tmp1bphpy_u.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    prefix_list[2] = string\n    for i = 3:length(string)\n\
    \        prefix_list[i] = prefix_list[i-2] + string[i]\n    end\n    return prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpybnyx0pc.jl:14\nin expression starting at\
    \ /tmp/tmpybnyx0pc.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    \n    for i = 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-2] + string[i]\n    end\n    \n    return prefix_list\nend\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphyjf6h9o.jl:16\nin expression starting at\
    \ /tmp/tmphyjf6h9o.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i in 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-2] + string[i]\n    end\n    prefix_list\nend\n</cell>\n<code\
    \ language=julia-1.3>\n\"\"\"\n    prefix_count(string::String)::Int64\nusing\
    \ Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\"\
    ) == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcif158dz.jl:13\nin expression starting at\
    \ /tmp/tmpcif158dz.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list = prefix_list + all_prefixes(string[1:end-1]) + [string[1:end-1]]\n\
    \    return prefix_list\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    for prefix in string.split(\"\")\n        prefix_list += prefixes_of(prefix)\n\
    \    end\n    prefix_list\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpfbb2vau6.jl:17\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  type String has no field\
    \ split\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n  \
    \ [2] all_prefixes(string::String)\n     @ Main /tmp/tmpfbb2vau6.jl:7\n   [3]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpfbb2vau6.jl:17 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpfbb2vau6.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpfbb2vau6.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ]\n  type String has no field split\n  Stacktrace:\n   [1] getproperty\n     @\
    \ ./Base.jl:42 [inlined]\n   [2] all_prefixes(string::String)\n     @ Main /tmp/tmpfbb2vau6.jl:7\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpfbb2vau6.jl:18 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpfbb2vau6.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpfbb2vau6.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]\n  type String has no field split\n\
    \  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] all_prefixes(string::String)\n\
    \     @ Main /tmp/tmpfbb2vau6.jl:7\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpfbb2vau6.jl:19 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpfbb2vau6.jl:16\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfbb2vau6.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    prefix_list[2] = string\n    prefix_list[3]\
    \ = string\n    prefix_list[4] = string\n    prefix_list[5] = string\n    prefix_list[6]\
    \ = string\n    prefix_list[7] = string\n    prefix_list[8] = string\n    prefix_list[9]\
    \ = string\n    prefix_list[10] = string\n    prefix_list[11] = string\n    prefix_list[12]\
    \ = string\n    prefix_list[13] = string\n    prefix_list[14] = string\n    prefix_list[15]\
    \ = string\n    prefix_list[16] = string\n    prefix_list[17] = string\n    prefix_list[18]\
    \ = string\n    prefix_list[19] = string\n    prefix_list[20] = string\n    prefix_list[21]\
    \ = string\n    prefix_list[22] = string\n    prefix_list[23] = string\n    prefix_list[24]\
    \ = string\n    prefix_list[25] = string\n    prefix_list[26] = string\n    prefix_list[27]\
    \ = string\n    prefix_list[28] = string\n    prefix_list[29] = string\n    prefix_list[30]\
    \ = string\n    prefix_list[31] = string\n    prefix_list[32] = string\n    prefix_list[33]\
    \ = string\n    prefix_list[34] = string\n    prefix_list[35] = string\n    prefix_list[36]\
    \ = string\n    prefix_list[37] = string\n    prefix_list[38] = string\n    prefix_list[39]\
    \ = string\n    prefix_list[40] = string\n    prefix_list[41] = string\n    prefix_list[42]\
    \ = string\n    prefix_list[43] = string\n    prefix_list[44] = string\n    prefix_list[45]\
    \ = string\n    prefix_list[46] = string\n    prefix_list[47] = string\n    prefix_list[48]\
    \ = string\n    prefix_list[49] = string\n    prefix_list[50] = string\n    prefix_list[51]\
    \ = string\n    prefix_list[52] = string\n    prefix_list[53] = string\n    prefix_list[54]\
    \ = string\n    prefix_list[55] = string\n    prefix_list[56] = string\n    prefix_list[57]\
    \ = string\n    prefix_list[58] = string\n    prefix_list[59] = string\n    prefix_list[60]\
    \ = string\n    prefix_list[61] = string\n    prefix_list[62] = string\n    prefix_list[63]\
    \ = string\n    prefix_list[64] = string\n    prefix_list[65] = string\n    prefix_list[66]\
    \ = string\n    prefix_list[67] = string\n    prefix_list[68] = string\n    prefix_list[69]\
    \ = string\n    prefix_list[70] = string\n    prefix_list[71] = string\n    prefix_list[72]\
    \ = string\n\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxiclhu1w.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxiclhu1w.jl:1\n\
    in expression starting at /tmp/tmpxiclhu1w.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i = 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-1] + string[i]\n    end\n    return prefix_list\nend\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a string and returns the longest prefix that is a\
    \ substring of the input string. For example, all_prefixes(\"abc\") returns [\"\
    a\", \"ab\", \"abc\"]\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp38449_3p.jl:13\nin expression starting at\
    \ /tmp/tmp38449_3p.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    for prefix in string.split(\"\")\n        prefix_list += all_prefixes(prefix)\
    \ \n    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abc\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and\
    \ returns the longest prefix that is a substring of the input string. For example,\
    \ all_prefixes(\"abcabc\") should return \"abc\".\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6fmyfo69.jl:12\nin expression starting at\
    \ /tmp/tmp6fmyfo69.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i = 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-2] + string[i]\n    end\n    return prefix_list\nend\n</cell>\n\
    <code language=julia-1.4>\n\"\"\"\n    prefix_length(prefix::String)\nusing Test\n\
    \n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptl8c_wtm.jl:13\nin expression starting at\
    \ /tmp/tmptl8c_wtm.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list = prefix_list ++ [string]\n    prefix_list = prefix_list ++ all_prefixes(string[1:end-1])\
    \ \n    return prefix_list\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpa47uem79.jl:16\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  UndefVarError: ++ not\
    \ defined\n  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main /tmp/tmpa47uem79.jl:7\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpa47uem79.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpa47uem79.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpa47uem79.jl:17\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ]\n  UndefVarError: ++ not defined\n  Stacktrace:\n   [1] all_prefixes(string::String)\n\
    \     @ Main /tmp/tmpa47uem79.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpa47uem79.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpa47uem79.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpa47uem79.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]\n  UndefVarError: ++ not defined\n\
    \  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main /tmp/tmpa47uem79.jl:7\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpa47uem79.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpa47uem79.jl:15\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpa47uem79.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = Vector{String}()\n\
    \    for c in string\n        push!(prefixes, string[1:end-c])\n    end\n    return\
    \ prefixes\nend\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"abc\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the longest\
    \ prefix that is a substring of the original string. For example, all_prefixes(\"\
    abcabc\") should return \"abc\".\nusing Test\n\n@testset begin\n\ncandidate =\
    \ all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyqdfppv1.jl:12\nin expression starting at\
    \ /tmp/tmpyqdfppv1.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    for prefix in string.split(\"\")\n        prefix_list += prefixes_of(prefix)\n\
    \    return prefix_list\nend\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"\
    abc\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string and\
    \ returns the longest prefix that is a substring of the input string. For example,\
    \ all_prefixes(\"abcabc\") should return \"abc\".\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwt41m2sr.jl:11\nin expression starting at\
    \ /tmp/tmpwt41m2sr.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    prefix_list[2] = string\n    prefix_list[3]\
    \ = string\n    prefix_list[4] = string\n    prefix_list[5] = string\n    prefix_list[6]\
    \ = string\n    prefix_list[7] = string\n    prefix_list[8] = string\n    prefix_list[9]\
    \ = string\n    prefix_list[10] = string\n    prefix_list[11] = string\n    prefix_list[12]\
    \ = string\n    prefix_list[13] = string\n    prefix_list[14] = string\n    prefix_list[15]\
    \ = string\n    prefix_list[16] = string\n    prefix_list[17] = string\n    prefix_list[18]\
    \ = string\n    prefix_list[19] = string\n    prefix_list[20] = string\n    prefix_list[21]\
    \ = string\n    prefix_list[22] = string\n    prefix_list[23] = string\n    prefix_list[24]\
    \ = string\n    prefix_list[25] = string\n    prefix_list[26] = string\n    prefix_list[27]\
    \ = string\n    prefix_list[28] = string\n    prefix_list[29] = string\n    prefix_list[30]\
    \ = string\n    prefix_list[31] = string\n    prefix_list[32] = string\n    prefix_list[33]\
    \ = string\n    prefix_list[34] = string\n    prefix_list[35] = string\n    prefix_list[36]\
    \ = string\n    prefix_list[37] = string\n    prefix_list[38] = string\n    prefix_list[39]\
    \ = string\n    prefix_list[40] = string\n    prefix_list[41] = string\n    prefix_list[42]\
    \ = string\n    prefix_list[43] = string\n    prefix_list[44] = string\n    prefix_list[45]\
    \ = string\n    prefix_list[46] = string\n    prefix_list[47] = string\n    prefix_list[48]\
    \ = string\n    prefix_list[49] = string\n    prefix_list[50] = string\n    prefix_list[51]\
    \ = string\n    prefix_list[52] = string\n    prefix_list[53] = string\n    prefix_list[54]\
    \ = string\n    prefix_list[55] = string\n    prefix_list[56] = string\n    prefix_list[57]\
    \ = string\n    prefix_list[58] = string\n    prefix_list[59] = string\n    prefix_list[60]\
    \ = string\n    prefix_list[61] = string\n    prefix_list[62] = string\n    prefix_list[63]\
    \ = string\n    prefix_list[64] = string\n    prefix_list[65] = string\n    prefix_list[66]\
    \ = string\n    prefix_list[67] = string\n    prefix_list[68] = string\n    prefix_list[69]\
    \ = string\n    prefix_list[70] = string\n    prefix_list[71] = string\n    prefix_list[72]\
    \ = string\n\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpgz184iba.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpgz184iba.jl:1\n\
    in expression starting at /tmp/tmpgz184iba.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list = prefix_list + prefixes(string)\n    prefix_list = prefix_list\
    \ + prefixes(string.reverse)\n    prefix_list = prefix_list + prefixes(string.reverse.substring(1,\
    \ length(string)))\n    prefix_list = prefix_list + prefixes(string.reverse.substring(1,\
    \ length(string)-1))\n    prefix_list = prefix_list + prefixes(string.reverse.substring(1,\
    \ length(string)-2))\n    prefix_list = prefix_list + prefixes(string.reverse.substring(1,\
    \ length(string)-3))\n    prefix_list = prefix_list + prefixes(string.reverse.substring(1,\
    \ length(string)-4))\n    prefix_list = prefix_list + prefixes(string.reverse.substring(1,\
    \ length(string)-5))\n    prefix_list = prefix_list + prefixes(string.reverse.substring(1,\
    \ length(string)-6))\n    prefix_list = prefix_list + prefixes(string.reverse.substring(1,\
    \ length(string)-7))\n    prefix_list = prefix_list + prefixes(string.reverse.substring(1,\
    \ length(string)-8))\n    prefix_list = prefix_list + prefixes(string.reverse.substring(1,\
    \ length(string)-9))\n    prefix_list = prefix_list + prefixes(string.reverse.substring(1,\
    \ length(string)-10))\n    prefix_list = prefix_list + prefixes(string.reverse.substring(1,\
    \ length(string)-11))\n    prefix_list = prefix_list + prefixes(string.reverse.substring(1,\
    \ length(string)-12))\n    prefix_list = prefix_list + prefixes(string.reverse.substring(1,\
    \ length(string)-13))\n    prefix_list = prefix_list + prefixes(string.reverse.substring(1,\
    \ length(string)-14))\n    prefix_list = prefix_list + prefixes(string.reverse.substring(1,\
    \ length(string)-15))\n    prefix_list = prefix_list + prefixes(string.reverse.substring(1,\
    \ length(string)-16))\n    prefix_list = prefix_list + prefixes(string.reverse.substring(1,\
    \ length(string)-17))\n    prefix_list = prefix_list + prefixes(string.reverse.substring(1,\
    \ length(string)-18))\n    prefix_list = prefix_list + prefixes(string.reverse.substring(1,\
    \ length(string)-19))\n    prefix_list = prefix_list + prefixes(string.reverse.substring(1,\
    \ length(string)-20))\n    prefix_list = prefix_list + prefixes(string.reverse.substring(1,\
    \ length(string)-21))\n    prefix_list = prefix_list + prefixes(string.reverse.substring(1,\
    \ length(string)-22))\n    prefix_list = prefix_list + prefixes(string.reverse.substring(1,\
    \ length(string)-23))\n    prefix_list = prefix_list + prefixes(string.reverse.substring(1,\
    \ length(string)-24))\n    prefix_list = prefix_list + \nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpcvrjrysa.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpcvrjrysa.jl:1\n\
    in expression starting at /tmp/tmpcvrjrysa.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i in 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-1] + string[i]\n    end\n    prefix_list\nend\n</cell>\n<code\
    \ language=julia-1.3>\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn7n9bzv1.jl:13\nin expression starting at\
    \ /tmp/tmpn7n9bzv1.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i = 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-2] + string[i]\n    end\n    return prefix_list\nend\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a string and returns the longest prefix that is a\
    \ substring of the input string. For example, for the input string \"abc\", the\
    \ longest prefix is \"abc\".\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk6jzipjw.jl:13\nin expression starting at\
    \ /tmp/tmpk6jzipjw.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i = 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-2] + string[i]\n    end\n    prefix_list\nend\n</cell>\n<code\
    \ language=julia-1.3>\n\"\"\"\n    prefix_length(string::String)\nusing Test\n\
    \n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpju4ic0nr.jl:13\nin expression starting at\
    \ /tmp/tmpju4ic0nr.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    for prefix in string.split(\"\")\n        prefix_list += all_prefixes(prefix)\
    \ \n    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"\
    ab\")\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"aba\")\n</cell>\n<code\
    \ language=julia-1.4>\nall_prefixes(\"abba\")\n</cell>\n<code language=julia-1.4>\n\
    all_prefixes(\"abbac\")\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"abbaca\"\
    )\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"abbacac\")\n</cell>\n<code\
    \ language=julia-1.4>\nall_prefixes(\"abbacaca\")\n</cell>\n<code language=julia-1.4>\n\
    all_prefixes(\"abbacacaa\")\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"\
    abbacacaaa\")\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"abbacacaaab\"\
    )\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"abbacacaaabb\")\n</cell>\n\
    <code language=julia-1.4>\nall_prefixes(\"abbacacaaabbb\")\n</cell>\n<code language=julia-1.4>\n\
    all_prefixes(\"abbacacaaabbbc\")\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"\
    abbacacaaabbbcc\")\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"abbacacaaabbbccc\"\
    )\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"abbacacaaabbbccca\")\n</cell>\n\
    <code language=julia-1.4>\nall_prefixes(\"abbacacaaabbbcccaa\")\n</cell>\n<code\
    \ language=julia-1.4>\nall_prefixes(\"abbacacaaabbbcccaaa\")\n</cell>\n<code language=julia-1.4>\n\
    all_prefixes(\"abbacacaaabbbcccaaaa\")\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"\
    abbacacaaabbbcccaaaab\")\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"\
    abbacacaaabbbcccaaaabb\")\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"\
    abbacacaaabbbcccaaaabbb\")\n</cell\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3g7y41yr.jl:12\nin expression starting at\
    \ /tmp/tmp3g7y41yr.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    for prefix in string.split(\"\")\n        prefix_list += prefixes_of(prefix)\n\
    \    return prefix_list\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpnt7kde5d.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpnt7kde5d.jl:1\n\
    in expression starting at /tmp/tmpnt7kde5d.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    \n    prefixes = []\n   \
    \ \n    for c in string\n        prefixes += all_prefixes(string[1:end-1]) + [c]\n\
    \    end\n    \n    return prefixes\nend\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abc\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns the longest prefix that is a substring of the input string.\
    \ For example, all_prefixes(\"abcabc\") should return [\"abc\"].\nusing Test\n\
    \n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8nk9_ps5.jl:15\nin expression starting at\
    \ /tmp/tmp8nk9_ps5.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    for prefix in string.split(\"\")\n        prefix_list += prefixes_of(prefix)\n\
    \    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns the longest prefix that is a substring of the input string. For\
    \ example, longest_prefix(\"abracadabra\") should return \"abracadabra\".\nusing\
    \ Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\"\
    ) == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps9oh6oz4.jl:12\nin expression starting at\
    \ /tmp/tmps9oh6oz4.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i = 2 to length(string)\n        prefix_list[i]\
    \ = prefix_list[i-2] + string[i]\n    end\n    return prefix_list\nend\n</cell>\n\
    <code language=julia-1.4>\nall_prefixes(\"abc\")\n</cell>\n<text>\nExercise 4\n\
    Write a function that takes a string and returns the number of characters in the\
    \ string that are uppercase letters.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpp8jgef1f.jl:8 expected \"\
    end\", got \"length\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpp8jgef1f.jl:8\n\
    in expression starting at /tmp/tmpp8jgef1f.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    for prefix in string.split(\"\")\n        prefix_list += all_prefixes(prefix)\
    \ \n    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abc\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string as input\
    \ and returns the number of times each character appears in the string. \nFor\
    \ example, for the string \"abcabcbb\" the function should return {\"a\" => 3,\
    \ \"b\" => 2, \"c\" => 3, \"b\" => 2, \"c\" => 2, \"b\" => 2}.\nusing Test\n\n\
    @testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb797j9jt.jl:12\nin expression starting at\
    \ /tmp/tmpb797j9jt.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[1:end-1]) \n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end-1:end])\n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end+1:end+2])\n    prefix_list = prefix_list ++ all_prefixes(string[end+2:end+3])\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[end+3:end+4])\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end+4:end+5])\n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end+5:end+6])\n    prefix_list = prefix_list ++ all_prefixes(string[end+6:end+7])\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[end+7:end+8])\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end+8:end+9])\n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end+9:end+10])\n    prefix_list = prefix_list ++ all_prefixes(string[end+10:end+11])\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[end+11:end+12])\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end+12:end+13])\n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end+13:end+14])\n    prefix_list = prefix_list ++ all_prefixes(string[end+14:end+15])\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[end+15:end+16])\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end+16:end+17])\n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end+17:end+18])\n    prefix_list = prefix_list ++ all_prefixes(string[end+18:end+19])\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[end+19:end+20])\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end+20:end+21])\n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end+21:end+22])\n    prefix_list = prefix_list ++ all_prefixes(string[end+22:end+23])\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[end+23:end+24])\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end+24:end+25])\n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end+25:end+26])\n    prefix_\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpcuygbj8o.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpcuygbj8o.jl:1\n\
    in expression starting at /tmp/tmpcuygbj8o.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    \n    for i = 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-2] + string[i]\n    end\n    \n    return prefix_list\nend\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<text>\nExercise\
    \ 3: Write a function that takes a string and returns the longest prefix that\
    \ is a substring of the input string. For example, all_prefixes(\"abcabc\") should\
    \ return \"abc\".\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt9xxv0hz.jl:16\nin expression starting at\
    \ /tmp/tmpt9xxv0hz.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list = prefix_list + all_prefixes(string[1:end-1]) + [string[1:end-1]]\n\
    \    return prefix_list\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list = prefix_list ++ [string[1:i] for i in length(string)]\n    prefix_list\
    \ = prefix_list ++ [string[i+1::] for i in length(string)]\n    return prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the longest prefix\
    \ that is a substring of the input string. For example, all_prefixes(\"abcabc\"\
    ) should return \"abc\".\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"]\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp_cx0tu3o.jl:8\nin expression starting at /tmp/tmp_cx0tu3o.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    prefix_list[2] = string\n    prefix_list[3]\
    \ = string\n    prefix_list[4] = string\n    prefix_list[5] = string\n    prefix_list[6]\
    \ = string\n    prefix_list[7] = string\n    prefix_list[8] = string\n    prefix_list[9]\
    \ = string\n    prefix_list[10] = string\n    prefix_list[11] = string\n    prefix_list[12]\
    \ = string\n    prefix_list[13] = string\n    prefix_list[14] = string\n    prefix_list[15]\
    \ = string\n    prefix_list[16] = string\n    prefix_list[17] = string\n    prefix_list[18]\
    \ = string\n    prefix_list[19] = string\n    prefix_list[20] = string\n    prefix_list[21]\
    \ = string\n    prefix_list[22] = string\n    prefix_list[23] = string\n    prefix_list[24]\
    \ = string\n    prefix_list[25] = string\n    prefix_list[26] = string\n    prefix_list[27]\
    \ = string\n    prefix_list[28] = string\n    prefix_list[29] = string\n    prefix_list[30]\
    \ = string\n    prefix_list[31] = string\n    prefix_list[32] = string\n    prefix_list[33]\
    \ = string\n    prefix_list[34] = string\n    prefix_list[35] = string\n    prefix_list[36]\
    \ = string\n    prefix_list[37] = string\n    prefix_list[38] = string\n    prefix_list[39]\
    \ = string\n    prefix_list[40] = string\n    prefix_list[41] = string\n    prefix_list[42]\
    \ = string\n    prefix_list[43] = string\n    prefix_list[44] = string\n    prefix_list[45]\
    \ = string\n    prefix_list[46] = string\n    prefix_list[47] = string\n    prefix_list[48]\
    \ = string\n    prefix_list[49] = string\n    prefix_list[50] = string\n    prefix_list[51]\
    \ = string\n    prefix_list[52] = string\n    prefix_list[53] = string\n    prefix_list[54]\
    \ = string\n    prefix_list[55] = string\n    prefix_list[56] = string\n    prefix_list[57]\
    \ = string\n    prefix_list[58] = string\n    prefix_list[59] = string\n    prefix_list[60]\
    \ = string\n    prefix_list[61] = string\n    prefix_list[62] = string\n    prefix_list[63]\
    \ = string\n    prefix_list[64] = string\n    prefix_list[65] = string\n    prefix_list[66]\
    \ = string\n    prefix_list[67] = string\n    prefix_list[68] = string\n    prefix_list[69]\
    \ = string\n    prefix_list[70] = string\n    prefix_list[71] = string\n    prefix_list[72]\
    \ = string\n\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpgl4guw3i.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpgl4guw3i.jl:1\n\
    in expression starting at /tmp/tmpgl4guw3i.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = Vector{String}()\n\
    \    prefixes << string\n    prefixes << string[1:end-1]\n    prefixes << string[2:end]\n\
    \    return prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp_d3nqoa_.jl:17\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  MethodError: no method\
    \ matching <<(::Vector{String}, ::String)\n  Stacktrace:\n   [1] all_prefixes(string::String)\n\
    \     @ Main /tmp/tmp_d3nqoa_.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_d3nqoa_.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_d3nqoa_.jl:16\ntest set:\
    \ Error During Test at /tmp/tmp_d3nqoa_.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ]\n  MethodError: no method matching <<(::Vector{String}, ::String)\n  Stacktrace:\n\
    \   [1] all_prefixes(string::String)\n     @ Main /tmp/tmp_d3nqoa_.jl:7\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_d3nqoa_.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_d3nqoa_.jl:16\ntest set:\
    \ Error During Test at /tmp/tmp_d3nqoa_.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]\n  MethodError: no method matching\
    \ <<(::Vector{String}, ::String)\n  Stacktrace:\n   [1] all_prefixes(string::String)\n\
    \     @ Main /tmp/tmp_d3nqoa_.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_d3nqoa_.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_d3nqoa_.jl:16\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_d3nqoa_.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    for prefix in string.split(\"\")\n        prefix_list += prefixes_of(prefix)\n\
    \    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ as input and returns a string with all prefixes of the string in alphabetical\
    \ order. For example, if the input is \"abracadabra\", the function should return\
    \ \"abracadabra\".\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv681pc2o.jl:12\nin expression starting at\
    \ /tmp/tmpv681pc2o.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i in 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-1] + string[i]\n    end\n    return prefix_list\nend\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the longest common prefix of two given strings.\n\
    using Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_ohc_syl.jl:13\nin expression starting at\
    \ /tmp/tmp_ohc_syl.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list = prefix_list + [string[1:i] for i in 2:length(string)]\n   \
    \ prefix_list = prefix_list + [string[i-1:i] for i in 2:length(string)]\n    prefix_list\
    \ = prefix_list + [string[i-1:i] for i in 2:length(string)]\n    prefix_list =\
    \ prefix_list + [string[1:i] for i in 2:length(string)]\n    prefix_list = prefix_list\
    \ + [string[i-1:i] for i in 2:length(string)]\n    prefix_list = prefix_list +\
    \ [string[i-1:i] for i in 2:length(string)]\n    prefix_list = prefix_list + [string[1:i]\
    \ for i in 2:length(string)]\n    prefix_list = prefix_list + [string[i-1:i] for\
    \ i in 2:length(string)]\n    prefix_list = prefix_list + [string[i-1:i] for i\
    \ in 2:length(string)]\n    prefix_list = prefix_list + [string[1:i] for i in\
    \ 2:length(string)]\n    prefix_list = prefix_list + [string[i-1:i] for i in 2:length(string)]\n\
    \    prefix_list = prefix_list + [string[i-1:i] for i in 2:length(string)]\n \
    \   prefix_list = prefix_list + [string[1:i] for i in 2:length(string)]\n    prefix_list\
    \ = prefix_list + [string[i-1:i] for i in 2:length(string)]\n    prefix_list =\
    \ prefix_list + [string[i-1:i] for i in 2:length(string)]\n    prefix_list = prefix_list\
    \ + [string[1:i] for i in 2:length(string)]\n    prefix_list = prefix_list + [string[i-1:i]\
    \ for i in 2:length(string)]\n    prefix_list = prefix_list + [string[i-1:i] for\
    \ i in 2:length(string)]\n    prefix_list = prefix_list + [string[1:i] for i in\
    \ 2:length(string)]\n    prefix_list = prefix_list + [string[i-1:i] for i in 2:length(string)]\n\
    \    prefix_list = prefix_list + [string[i-1:i] for i in 2:length(string)]\n \
    \   prefix_list = prefix_list + [string[1:i] for i in 2:length(string)]\n    prefix_list\
    \ = prefix_list + [string[i-1:i] for i in 2:length(string)]\n    prefix_list =\
    \ prefix_list + [string[i-1:i] for i in 2:length(string)]\n    prefix_list = prefix_list\
    \ + [string[1:i] for i in 2:length(string)]\n    prefix_list = prefix_list + [string[i-1:i]\
    \ for i in 2:length(string)]\n    prefix_list = prefix_list + [string[i-1:i] for\
    \ i in 2:length(string)]\n    prefix_list = prefix_list + [string[1:i] for i in\
    \ 2:length(string)]\n    prefix_list = prefix_list + [string[i-1:i] for i in 2:length(string)]\n\
    \    prefix_list = prefix_list + [string[i-1:i] for i in 2:length(string)]\n \
    \   prefix_list = \nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpmthrljnm.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmthrljnm.jl:1\n\
    in expression starting at /tmp/tmpmthrljnm.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    \n    prefixes = Vector{String}()\n\
    \    \n    for c in string\n        prefixes += all_prefixes(c)\n    end\n   \
    \ \n    return prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpidxvclo5.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"]\n  MethodError: no method matching all_prefixes(::Char)\n\
    \  Closest candidates are:\n    all_prefixes(!Matched::String) at /tmp/tmpidxvclo5.jl:5\n\
    \  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main /tmp/tmpidxvclo5.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpidxvclo5.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpidxvclo5.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpidxvclo5.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]\n  MethodError: no method matching\
    \ all_prefixes(::Char)\n  Closest candidates are:\n    all_prefixes(!Matched::String)\
    \ at /tmp/tmpidxvclo5.jl:5\n  Stacktrace:\n   [1] all_prefixes(string::String)\n\
    \     @ Main /tmp/tmpidxvclo5.jl:10\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpidxvclo5.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpidxvclo5.jl:19\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      2      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpidxvclo5.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i in 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-2] + string[i]\n    end\n    return prefix_list\nend\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcl_cojvw.jl:13\nin expression starting at\
    \ /tmp/tmpcl_cojvw.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    for prefix in string.split(\"\")\n        prefix_list += all_prefixes(prefix)\
    \ \n    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abc\")\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwl90kim_.jl:12\nin expression starting at\
    \ /tmp/tmpwl90kim_.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string, prefix_list)\n  \
    \  prefix_list = prefix_list + all_prefixes_helper(string, prefix_list)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string, prefix_list)\n    prefix_list =\
    \ prefix_list + all_prefixes_helper(string, prefix_list)\n    prefix_list = prefix_list\
    \ + all_prefixes_helper(string, prefix_list)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string, prefix_list)\n    prefix_list = prefix_list + all_prefixes_helper(string,\
    \ prefix_list)\n    prefix_list = prefix_list + all_prefixes_helper(string, prefix_list)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string, prefix_list)\n  \
    \  prefix_list = prefix_list + all_prefixes_helper(string, prefix_list)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string, prefix_list)\n    prefix_list =\
    \ prefix_list + all_prefixes_helper(string, prefix_list)\n    prefix_list = prefix_list\
    \ + all_prefixes_helper(string, prefix_list)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string, prefix_list)\n    prefix_list = prefix_list + all_prefixes_helper(string,\
    \ prefix_list)\n    prefix_list = prefix_list + all_prefixes_helper(string, prefix_list)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string, prefix_list)\n  \
    \  prefix_list = prefix_list + all_prefixes_helper(string, prefix_list)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string, prefix_list)\n    prefix_list =\
    \ prefix_list + all_prefixes_helper(string, prefix_list)\n    prefix_list = prefix_list\
    \ + all_prefixes_helper(string, prefix_list)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string, prefix_list)\n    prefix_list = prefix_list + all_prefixes_helper(string,\
    \ prefix_list)\n    prefix_list = prefix_list + all_prefixes_helper(string, prefix_list)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string, prefix_list)\n  \
    \  prefix_list = prefix_list + all_prefixes_helper(string, prefix_list)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string, prefix_list)\n    prefix_list =\
    \ prefix_list + all_prefixes_helper(string, prefix_list)\n    prefix_list = prefix_list\
    \ + all_prefixes_helper(string, prefix_list)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string, prefix_list)\n    prefix_list = prefix_list + all_prefixes_helper(string,\
    \ prefix_list)\n    prefix_list = prefix_list + all_prefixes_helper(string, prefix_list)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string, prefix_list)\n  \
    \  prefix_list = prefix_list + all_prefix\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpoq35ngta.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoq35ngta.jl:1\n\
    in expression starting at /tmp/tmpoq35ngta.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list = prefix_list ++ [string]\n    prefix_list = prefix_list ++ all_prefixes(string[1:end-1])\
    \ \n    return prefix_list\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    ab\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abd\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abd\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abd\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abd\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abd\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abd\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abd\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abd\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abd\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abd\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abd\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abd\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abd\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abd\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abd\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abd\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abd\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abd\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abd\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abd\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abd\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abd\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abd\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abd\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abd\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkmel_mty.jl:11\nin expression starting at\
    \ /tmp/tmpkmel_mty.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i = 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-2] + string[i]\n    end\n    return prefix_list\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\"\
    ) == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp0qby7p6b.jl:18\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  BoundsError: attempt to\
    \ access 0-element Vector{String} at index [1]\n  Stacktrace:\n   [1] setindex!\n\
    \     @ ./array.jl:903 [inlined]\n   [2] all_prefixes(string::String)\n     @\
    \ Main /tmp/tmp0qby7p6b.jl:7\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp0qby7p6b.jl:18 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp0qby7p6b.jl:17\ntest set:\
    \ Error During Test at /tmp/tmp0qby7p6b.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ]\n  BoundsError: attempt to access 0-element Vector{String} at index [1]\n  Stacktrace:\n\
    \   [1] setindex!\n     @ ./array.jl:903 [inlined]\n   [2] all_prefixes(string::String)\n\
    \     @ Main /tmp/tmp0qby7p6b.jl:7\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp0qby7p6b.jl:19 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp0qby7p6b.jl:17\ntest set:\
    \ Error During Test at /tmp/tmp0qby7p6b.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]\n  BoundsError: attempt to access\
    \ 0-element Vector{String} at index [1]\n  Stacktrace:\n   [1] setindex!\n   \
    \  @ ./array.jl:903 [inlined]\n   [2] all_prefixes(string::String)\n     @ Main\
    \ /tmp/tmp0qby7p6b.jl:7\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp0qby7p6b.jl:20 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp0qby7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0qby7p6b.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list = prefix_list ++ [string]\n    prefix_list = prefix_list ++ all_prefixes(string[1:end-1])\
    \ \n    return prefix_list\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp8ukf1mwk.jl:16\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  UndefVarError: ++ not\
    \ defined\n  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main /tmp/tmp8ukf1mwk.jl:7\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8ukf1mwk.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8ukf1mwk.jl:15\ntest set:\
    \ Error During Test at /tmp/tmp8ukf1mwk.jl:17\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ]\n  UndefVarError: ++ not defined\n  Stacktrace:\n   [1] all_prefixes(string::String)\n\
    \     @ Main /tmp/tmp8ukf1mwk.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8ukf1mwk.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8ukf1mwk.jl:15\ntest set:\
    \ Error During Test at /tmp/tmp8ukf1mwk.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]\n  UndefVarError: ++ not defined\n\
    \  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main /tmp/tmp8ukf1mwk.jl:7\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8ukf1mwk.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8ukf1mwk.jl:15\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8ukf1mwk.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i = 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-1] + string[i]\n    end\n    return prefix_list\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\"\
    ) == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp9poka8s2.jl:18\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  BoundsError: attempt to\
    \ access 0-element Vector{String} at index [1]\n  Stacktrace:\n   [1] setindex!\n\
    \     @ ./array.jl:903 [inlined]\n   [2] all_prefixes(string::String)\n     @\
    \ Main /tmp/tmp9poka8s2.jl:7\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp9poka8s2.jl:18 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp9poka8s2.jl:17\ntest set:\
    \ Error During Test at /tmp/tmp9poka8s2.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ]\n  BoundsError: attempt to access 0-element Vector{String} at index [1]\n  Stacktrace:\n\
    \   [1] setindex!\n     @ ./array.jl:903 [inlined]\n   [2] all_prefixes(string::String)\n\
    \     @ Main /tmp/tmp9poka8s2.jl:7\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp9poka8s2.jl:19 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp9poka8s2.jl:17\ntest set:\
    \ Error During Test at /tmp/tmp9poka8s2.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]\n  BoundsError: attempt to access\
    \ 0-element Vector{String} at index [1]\n  Stacktrace:\n   [1] setindex!\n   \
    \  @ ./array.jl:903 [inlined]\n   [2] all_prefixes(string::String)\n     @ Main\
    \ /tmp/tmp9poka8s2.jl:7\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp9poka8s2.jl:20 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp9poka"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9poka8s2.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i = 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-2] + string[i]\n    end\n    return prefix_list\nend\n</cell>\n\
    <code language=julia-1.3>\nall_prefixes(\"abc\")\n</cell>\n<code language=julia-1.3>\n\
    using Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpiszf88lw.jl:13\nin expression starting at\
    \ /tmp/tmpiszf88lw.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i = 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-1] + string[i]\n    end\n    prefix_list\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@test all_prefixes(\"abc\") == [\"a\", \"ab\", \"abc\"\
    ]\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the longest prefix that is a substring of the input string. For example, all_prefixes(\"\
    abcabc\") should return [\"abc\"].\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp95_oaiur.jl:13\nin expression starting at\
    \ /tmp/tmp95_oaiur.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    prefix_list[2] = string\n    \n    for i = length(prefix_list)\
    \ downto 1 \n        prefix_list[i] = prefix_list[i-2] + prefix_list[i-1]\n  \
    \  end\n    \n    return prefix_list\nend\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abc\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a string and returns the longest prefix that is a palindrome. \nFor example,\
    \ \nall_prefixes(\"abba\") returns [\"ab\", \"ba\"]\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmplva6kwmg.jl:11 expected \"\
    end\", got \"1\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmplva6kwmg.jl:11\n\
    in expression starting at /tmp/tmplva6kwmg.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpgj9083gi.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpgj9083gi.jl:1\n\
    in expression starting at /tmp/tmpgj9083gi.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    for prefix in string.split(\"\")\n        prefix_list += all_prefixes(prefix)\
    \ \n    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    ab\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"aba\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbac\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbaca\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacac\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacaca\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacab\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacaba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacabba\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacabbac\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacabbaca\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacabbacac\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacabbacaca\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacabbacacab\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacabbacacaba\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacabbacacabba\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacacabbacacabbac\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacabbacacabbaca\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacabbacacabbacac\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacabbacacabbacaca\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacabbacacabbacacab\")\n</cell>\n<code language=julia-1.5\nusing Test\n\n\
    @testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu8trpv03.jl:12\nin expression starting at\
    \ /tmp/tmpu8trpv03.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    \n    prefixes = []\n   \
    \ \n    for char in string\n        prefixes += all_prefixes(char) \n    end\n\
    \    \n    return prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpeepts0fn.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"]\n  MethodError: no method matching all_prefixes(::Char)\n\
    \  Closest candidates are:\n    all_prefixes(!Matched::String) at /tmp/tmpeepts0fn.jl:5\n\
    \  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main /tmp/tmpeepts0fn.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpeepts0fn.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpeepts0fn.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpeepts0fn.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]\n  MethodError: no method matching\
    \ all_prefixes(::Char)\n  Closest candidates are:\n    all_prefixes(!Matched::String)\
    \ at /tmp/tmpeepts0fn.jl:5\n  Stacktrace:\n   [1] all_prefixes(string::String)\n\
    \     @ Main /tmp/tmpeepts0fn.jl:10\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpeepts0fn.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpeepts0fn.jl:19\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      2      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpeepts0fn.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = Vector{String}()\n\
    \    prefix_length = 0\n    for character in string\n        if character == prefixes[prefix_length]\n\
    \            prefix_length += 1\n        else\n            prefix_length = 0\n\
    \            prefixes << character\n        end\n    end\n    return prefixes\n\
    end\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the longest prefix\
    \ that is a substring of the input string. For example, all_prefixes(\"abcabc\"\
    ) should return \"abc\".\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzf6qozpv.jl:18\nin expression starting at\
    \ /tmp/tmpzf6qozpv.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i = 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-2] + string[i]\n    end\n    prefix_list\nend\n</cell>\n<code\
    \ language=julia-1.3>\nall_prefixes(\"abc\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the longest prefix of a given string.\nusing Test\n\n\
    @testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpny0hnjg5.jl:13\nin expression starting at\
    \ /tmp/tmpny0hnjg5.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    \n    prefixes = Vector{String}()\n\
    \    \n    for c in string\n        prefixes += all_prefixes(c) + [c]\n    end\n\
    \    \n    return prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpbwi4np49.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"]\n  MethodError: no method matching all_prefixes(::Char)\n\
    \  Closest candidates are:\n    all_prefixes(!Matched::String) at /tmp/tmpbwi4np49.jl:5\n\
    \  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main /tmp/tmpbwi4np49.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbwi4np49.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbwi4np49.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpbwi4np49.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]\n  MethodError: no method matching\
    \ all_prefixes(::Char)\n  Closest candidates are:\n    all_prefixes(!Matched::String)\
    \ at /tmp/tmpbwi4np49.jl:5\n  Stacktrace:\n   [1] all_prefixes(string::String)\n\
    \     @ Main /tmp/tmpbwi4np49.jl:10\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbwi4np49.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbwi4np49.jl:19\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      2      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbwi4np49.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    for prefix in string.split(\"\")\n        prefix_list += prefixes_of(prefix)\n\
    \    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbac\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbaca\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacac\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacbba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacbbac\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacbbacc\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacbbaccc\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacbbacccb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacbbacccbc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacbbacccbca\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacbbacccbcac\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacbbacccbcacb\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacacbbacccbcacbb\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacbbacccbcacbbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacbbacccbcacbbbc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacbbacccbcacbbbca\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacbbacccbcacbbbcac\")\n</\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5fgzh6yq.jl:12\nin expression starting at\
    \ /tmp/tmp5fgzh6yq.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    for s in string\n        prefix_list += all_prefixes(s)\n    end\n    prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"ab\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abba\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbb\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbbb\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbbbc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbbbcc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbbbccc\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbbbcccd\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbbbcccdd\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbbbcccddd\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbbbcccdddd\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbbbcccddddd\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbbbcccdddddd\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbbbcccddddddd\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbbbcccdddddddd\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbbbcccdddddddddd\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbbbcccddddddddddd\")\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abbbbcccdddddddddddd\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbbbcccdddddddddddddd\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbbbcccdddddddddddddddd\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbbb\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbwi65hud.jl:12\nin expression starting at\
    \ /tmp/tmpbwi65hud.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list = prefix_list ++ [string[1:i] | i <- 1:length(string)]\n    prefix_list\
    \ = prefix_list ++ [string[1:i] | i <- length(string):-1]\n    return prefix_list\n\
    end\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"abc\")\n</cell>\n<code\
    \ language=julia-1.4>\nall_prefixes(\"ab\")\n</cell>\n<code language=julia-1.4>\n\
    all_prefixes(\"aba\")\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"abba\"\
    )\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"abbac\")\n</cell>\n<code\
    \ language=julia-1.4>\nall_prefixes(\"abbaca\")\n</cell>\n<code language=julia-1.4>\n\
    all_prefixes(\"abbacac\")\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"\
    abbacaca\")\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"abbacacaa\")\n\
    </cell>\n<code language=julia-1.4>\nall_prefixes(\"abbacacaaa\")\n</cell>\n<code\
    \ language=julia-1.4>\nall_prefixes(\"abbacacaaab\")\n</cell>\n<code language=julia-1.4>\n\
    all_prefixes(\"abbacacaaabb\")\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"\
    abbacacaaabbb\")\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"abbacacaaabbbc\"\
    )\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"abbacacaaabbbcc\")\n</cell>\n\
    <code language=julia-1.4>\nall_prefixes(\"abbacacaaabbbccc\")\n</cell>\n<code\
    \ language=julia-1.4>\nall_prefixes(\"abbacacaaabbbccca\")\n</cell>\n<code language=julia-1.4>\n\
    all_prefixes(\"abbacacaaabbbcccaa\")\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"\
    abbacacaaabbbcccaaa\")\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"abbacacaaabbbcccaaaa\"\
    )\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"abbacacaaabbbcccaaaab\"\
    )\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"abbacacaaab\nusing Test\n\
    \n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz9t00zxd.jl:11\nin expression starting at\
    \ /tmp/tmpz9t00zxd.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    \n    prefixes = Vector{String}()\n\
    \    \n    for c in string\n        prefixes += all_prefixes(c) + [c]\n    end\n\
    \    \n    return prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpabcpupco.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"]\n  MethodError: no method matching all_prefixes(::Char)\n\
    \  Closest candidates are:\n    all_prefixes(!Matched::String) at /tmp/tmpabcpupco.jl:5\n\
    \  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main /tmp/tmpabcpupco.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpabcpupco.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpabcpupco.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpabcpupco.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]\n  MethodError: no method matching\
    \ all_prefixes(::Char)\n  Closest candidates are:\n    all_prefixes(!Matched::String)\
    \ at /tmp/tmpabcpupco.jl:5\n  Stacktrace:\n   [1] all_prefixes(string::String)\n\
    \     @ Main /tmp/tmpabcpupco.jl:10\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpabcpupco.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpabcpupco.jl:19\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      2      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpabcpupco.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    \n    prefixes = Vector{String}()\n\
    \    \n    for c in string\n        prefixes += all_prefixes(string[1:end-1])\
    \ + [c]\n    end\n    \n    return prefixes\nend\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"ab\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"aba\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abba\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbac\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbaca\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacac\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacb\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacbba\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacbbac\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacbbacc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacbbaccc\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacbbacccba\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacbbacccbac\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacacbbacccbacca\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacbbacccbacbacca\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacbbacccbacbacbacca\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacbbacccbacbacbacbacca\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacbbacccbacbacbacbacbacca\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacbbacccbacbacbacbacbacbacca\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacbbacccbacbacbacbacbacbacbacca\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvv8k9_mv.jl:15\nin expression starting at\
    \ /tmp/tmpvv8k9_mv.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    for prefix in string.split(\"\")\n        prefix_list += prefixes_of(prefix)\n\
    \    return prefix_list\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp1_y96j07.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp1_y96j07.jl:1\n\
    in expression starting at /tmp/tmp1_y96j07.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list = prefix_list ++ [string]\n    prefix_list = prefix_list ++ all_prefixes(string[1:end-1])\
    \ \n    return prefix_list\nend\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"\
    ab\")\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"aba\")\n</cell>\n<code\
    \ language=julia-1.3>\nall_prefixes(\"abba\")\n</cell>\n<code language=julia-1.3>\n\
    all_prefixes(\"abbac\")\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"abbaca\"\
    )\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"abbacac\")\n</cell>\n<code\
    \ language=julia-1.3>\nall_prefixes(\"abbacaca\")\n</cell>\n<code language=julia-1.3>\n\
    all_prefixes(\"abbacacaa\")\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"\
    abbacacaaa\")\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"abbacacaaab\"\
    )\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"abbacacaaabb\")\n</cell>\n\
    <code language=julia-1.3>\nall_prefixes(\"abbacacaaabbb\")\n</cell>\n<code language=julia-1.3>\n\
    all_prefixes(\"abbacacaaabbbc\")\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"\
    abbacacaaabbbcc\")\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"abbacacaaabbbccc\"\
    )\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"abbacacaaabbbccca\")\n</cell>\n\
    <code language=julia-1.3>\nall_prefixes(\"abbacacaaabbbcccaa\")\n</cell>\n<code\
    \ language=julia-1.3>\nall_prefixes(\"abbacacaaabbbcccaaa\")\n</cell>\n<code language=julia-1.3>\n\
    all_prefixes(\"abbacacaaabbbcccaaac\")\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"\
    abbacacaaabbbcccaaacb\")\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"\
    abbacacaaabbbcccaaacbb\")\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"\
    abbacacaaabbbcc\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr895y3y9.jl:11\nin expression starting at\
    \ /tmp/tmpr895y3y9.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i = 2 to length(string)\n        prefix_list[i]\
    \ = prefix_list[i-2] + string[i]\n    end\n    prefix_list\nend\n</cell>\n<code\
    \ language=julia-1.3>\nall_prefixes(\"abc\")\n</cell>\n<code language=julia-1.3>\n\
    all_prefixes(\"ab\")\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"aba\"\
    )\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"abba\")\n</cell>\n<code\
    \ language=julia-1.3>\nall_prefixes(\"abbac\")\n</cell>\n<code language=julia-1.3>\n\
    all_prefixes(\"abbaca\")\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"\
    abbacac\")\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"abbacaca\")\n</cell>\n\
    <code language=julia-1.3>\nall_prefixes(\"abbacacaa\")\n</cell>\n<code language=julia-1.3>\n\
    all_prefixes(\"abbacacaaa\")\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"\
    abbacacaaab\")\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"abbacacaaabb\"\
    )\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"abbacacaaabbb\")\n</cell>\n\
    <code language=julia-1.3>\nall_prefixes(\"abbacacaaabbbc\")\n</cell>\n<code language=julia-1.3>\n\
    all_prefixes(\"abbacacaaabbbcc\")\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"\
    abbacacaaabbbccd\")\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"abbacacaaabbbccdc\"\
    )\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"abbacacaaabbbccdcd\")\n\
    </cell>\n<code language=julia-1.3>\nall_prefixes(\"abbacacaaabbbccdcdc\")\n</cell>\n\
    <code language=julia-1.3>\nall_prefixes(\"abbacacaaabbbccdcdcc\")\n</cell>\n<code\
    \ language=julia-1.3>\nall_prefixes(\"abbacacaaabbbccdcdccd\")\n</cell>\n<code\
    \ language=julia-1.3>\nall_prefixes(\"abbacacaaabbbccdcdccdc\")\n\nusing Test\n\
    \n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmphjd3ih9p.jl:8 expected \"\
    end\", got \"length\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphjd3ih9p.jl:8\n\
    in expression starting at /tmp/tmphjd3ih9p.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    \n    prefix_list = Vector{String}()\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[1:end-1]) \n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end-1:end])\n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end+1:end+2])\n    prefix_list = prefix_list ++ all_prefixes(string[end+2:end+3])\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[end+3:end+4])\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end+4:end+5])\n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end+5:end+6])\n    prefix_list = prefix_list ++ all_prefixes(string[end+6:end+7])\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[end+7:end+8])\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end+8:end+9])\n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end+9:end+10])\n    prefix_list = prefix_list ++ all_prefixes(string[end+10:end+11])\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[end+11:end+12])\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end+12:end+13])\n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end+13:end+14])\n    prefix_list = prefix_list ++ all_prefixes(string[end+14:end+15])\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[end+15:end+16])\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end+16:end+17])\n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end+17:end+18])\n    prefix_list = prefix_list ++ all_prefixes(string[end+18:end+19])\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[end+19:end+20])\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end+20:end+21])\n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end+21:end+22])\n    prefix_list = prefix_list ++ all_prefixes(string[end+22:end+23])\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[end+23:end+24])\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end+24:end+25])\n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end+25:end+26])\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpyil506uo.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyil506uo.jl:1\n\
    in expression starting at /tmp/tmpyil506uo.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list = prefix_list ++ [string]\n    prefix_list = prefix_list ++ all_prefixes(string[1:end-1])\
    \ \n    prefix_list = prefix_list ++ all_prefixes(string[2:end])\n    return prefix_list\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpjwklcpmt.jl:17\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  UndefVarError: ++ not\
    \ defined\n  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main /tmp/tmpjwklcpmt.jl:7\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjwklcpmt.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjwklcpmt.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpjwklcpmt.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ]\n  UndefVarError: ++ not defined\n  Stacktrace:\n   [1] all_prefixes(string::String)\n\
    \     @ Main /tmp/tmpjwklcpmt.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjwklcpmt.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjwklcpmt.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpjwklcpmt.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]\n  UndefVarError: ++ not defined\n\
    \  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main /tmp/tmpjwklcpmt.jl:7\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjwklcpmt.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjwklcpmt.jl:16\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjwklcpmt.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i = 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-1] + string[i]\n    end\n    return prefix_list\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\"\
    ) == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpypbl1nrx.jl:18\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  BoundsError: attempt to\
    \ access 0-element Vector{String} at index [1]\n  Stacktrace:\n   [1] setindex!\n\
    \     @ ./array.jl:903 [inlined]\n   [2] all_prefixes(string::String)\n     @\
    \ Main /tmp/tmpypbl1nrx.jl:7\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpypbl1nrx.jl:18 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpypbl1nrx.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpypbl1nrx.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ]\n  BoundsError: attempt to access 0-element Vector{String} at index [1]\n  Stacktrace:\n\
    \   [1] setindex!\n     @ ./array.jl:903 [inlined]\n   [2] all_prefixes(string::String)\n\
    \     @ Main /tmp/tmpypbl1nrx.jl:7\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpypbl1nrx.jl:19 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpypbl1nrx.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpypbl1nrx.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]\n  BoundsError: attempt to access\
    \ 0-element Vector{String} at index [1]\n  Stacktrace:\n   [1] setindex!\n   \
    \  @ ./array.jl:903 [inlined]\n   [2] all_prefixes(string::String)\n     @ Main\
    \ /tmp/tmpypbl1nrx.jl:7\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpypbl1nrx.jl:20 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpypbl1"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpypbl1nrx.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    \n    prefixes = Vector{String}()\n\
    \    \n    for c in string\n        prefixes += all_prefixes(c) + [c]\n    end\n\
    \    \n    return prefixes\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    ab\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"aba\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbac\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbaca\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacac\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacaca\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacaa\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacaaa\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaab\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabb\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacaaabbb\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacaaabbbc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacaaabbbcc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbccc\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbccca\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbcccaa\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacacaaabbbcccaaa\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacaaabbbcccaaac\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacaaabbbcccaaacb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacaaabbbcccaaacbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacaaabbbccca\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcyrn587x.jl:15\nin expression starting at\
    \ /tmp/tmpcyrn587x.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    return prefix_list\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpzv0b4lk8.jl:17\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  UndefVarError: all_prefixes_helper\
    \ not defined\n  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main\
    \ /tmp/tmpzv0b4lk8.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzv0b4lk8.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzv0b4lk8.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpzv0b4lk8.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ]\n  UndefVarError: all_prefixes_helper not defined\n  Stacktrace:\n   [1] all_prefixes(string::String)\n\
    \     @ Main /tmp/tmpzv0b4lk8.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzv0b4lk8.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzv0b4lk8.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpzv0b4lk8.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]\n  UndefVarError: all_prefixes_helper\
    \ not defined\n  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main\
    \ /tmp/tmpzv0b4lk8.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzv0b4lk8.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzv0b4lk8.jl:16\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzv0b4lk8.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    \n    prefixes = Vector{String}()\n\
    \    \n    for c in string\n        prefixes += all_prefixes(c) \n    end\n  \
    \  \n    return prefixes\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abc\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and\
    \ returns the longest prefix that is a substring of the original string. For example,\
    \ for the string \"abcabc\", the longest prefix that is a substring would be \"\
    abc\".\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqhwaa_sp.jl:15\nin expression starting at\
    \ /tmp/tmpqhwaa_sp.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    return prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpneej38p3.jl:10\nin expression starting at\
    \ /tmp/tmpneej38p3.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list = prefix_list ++ [string]\n    prefix_list = prefix_list ++ all_prefixes(string[1:end])\n\
    \    return prefix_list\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpjtz8olql.jl:16\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  UndefVarError: ++ not\
    \ defined\n  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main /tmp/tmpjtz8olql.jl:7\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjtz8olql.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjtz8olql.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpjtz8olql.jl:17\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ]\n  UndefVarError: ++ not defined\n  Stacktrace:\n   [1] all_prefixes(string::String)\n\
    \     @ Main /tmp/tmpjtz8olql.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjtz8olql.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjtz8olql.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpjtz8olql.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]\n  UndefVarError: ++ not defined\n\
    \  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main /tmp/tmpjtz8olql.jl:7\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjtz8olql.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjtz8olql.jl:15\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjtz8olql.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for c\
    \ in string\n        push!(prefixes, c)\n    end\n    return prefixes\nend\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp40zs2z2r.jl:12\nin expression starting at\
    \ /tmp/tmp40zs2z2r.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    \n    prefixes = Vector{String}()\n\
    \    \n    for prefix in string.split(\"\")\n        prefixes << prefix\n    end\n\
    \    \n    return prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpxcac8d6l.jl:20\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  type String has no field\
    \ split\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n  \
    \ [2] all_prefixes(string::String)\n     @ Main /tmp/tmpxcac8d6l.jl:9\n   [3]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpxcac8d6l.jl:20 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpxcac8d6l.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpxcac8d6l.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ]\n  type String has no field split\n  Stacktrace:\n   [1] getproperty\n     @\
    \ ./Base.jl:42 [inlined]\n   [2] all_prefixes(string::String)\n     @ Main /tmp/tmpxcac8d6l.jl:9\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpxcac8d6l.jl:21 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpxcac8d6l.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpxcac8d6l.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]\n  type String has no field split\n\
    \  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] all_prefixes(string::String)\n\
    \     @ Main /tmp/tmpxcac8d6l.jl:9\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpxcac8d6l.jl:22 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpxcac8d6l.jl:19\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxcac8d6l.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list = all_prefixes_helper(string, prefix_list)\n    return prefix_list\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp9z_8i10f.jl:15\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  UndefVarError: all_prefixes_helper\
    \ not defined\n  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main\
    \ /tmp/tmp9z_8i10f.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9z_8i10f.jl:15 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9z_8i10f.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp9z_8i10f.jl:16\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ]\n  UndefVarError: all_prefixes_helper not defined\n  Stacktrace:\n   [1] all_prefixes(string::String)\n\
    \     @ Main /tmp/tmp9z_8i10f.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9z_8i10f.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9z_8i10f.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp9z_8i10f.jl:17\n  Test threw exception\n  Expression:\
    \ candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]\n  UndefVarError: all_prefixes_helper\
    \ not defined\n  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main\
    \ /tmp/tmp9z_8i10f.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9z_8i10f.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9z_8i10f.jl:14\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9z_8i10f.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    prefix_list[2] = string[1:end-1]\n    prefix_list[3]\
    \ = string[2:end]\n    prefix_list\nend\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abc\")\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the longest prefix of a given string. For example, for the string \"abc\", the\
    \ longest prefix is \"abc\".\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpze0lik7l.jl:13\nin expression starting at\
    \ /tmp/tmpze0lik7l.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    \n    prefixes = Vector{String}()\n\
    \    \n    for char in string\n        prefixes += all_prefixes(char) + [char]\n\
    \    end\n    \n    return prefixes\nend\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbb\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbbb\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbbba\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbbbba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbbbbac\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbbbbaca\")\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abbbbbacab\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbbbbacabc\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbbbbacabca\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbbbbacabcab\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbbbbacabcabc\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbbbbacabcabca\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbbbbacabcabcab\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbbbbacabcabcabc\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbbbbacabcabcabca\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbbbbacabcabcabcab\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbbbbacabcabcabcabc\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbbbbacabcabcabcabca\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmawyj58g.jl:15\nin expression starting at\
    \ /tmp/tmpmawyj58g.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    for prefix in string.split(\"\")\n        prefix_list += all_prefixes(prefix)\
    \ \n    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    ab\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"aba\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"aba\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"aba\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"aba\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"aba\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"aba\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"aba\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"aba\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"aba\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"aba\")\n</cell\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptfdacp3a.jl:12\nin expression starting at\
    \ /tmp/tmptfdacp3a.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list = prefix_list + [string[1:i] | i <- 1:length(string)]\n    prefix_list\
    \ = prefix_list + [string[1:i] | i <- length(string)+1:length(string)]\n    prefix_list\
    \ = prefix_list + [string[1:i] | i <- length(string)+2:length(string)]\n    prefix_list\
    \ = prefix_list + [string[1:i] | i <- length(string)+3:length(string)]\n    prefix_list\
    \ = prefix_list + [string[1:i] | i <- length(string)+4:length(string)]\n    prefix_list\
    \ = prefix_list + [string[1:i] | i <- length(string)+5:length(string)]\n    prefix_list\
    \ = prefix_list + [string[1:i] | i <- length(string)+6:length(string)]\n    prefix_list\
    \ = prefix_list + [string[1:i] | i <- length(string)+7:length(string)]\n    prefix_list\
    \ = prefix_list + [string[1:i] | i <- length(string)+8:length(string)]\n    prefix_list\
    \ = prefix_list + [string[1:i] | i <- length(string)+9:length(string)]\n    prefix_list\
    \ = prefix_list + [string[1:i] | i <- length(string)+10:length(string)]\n    prefix_list\
    \ = prefix_list + [string[1:i] | i <- length(string)+11:length(string)]\n    prefix_list\
    \ = prefix_list + [string[1:i] | i <- length(string)+12:length(string)]\n    prefix_list\
    \ = prefix_list + [string[1:i] | i <- length(string)+13:length(string)]\n    prefix_list\
    \ = prefix_list + [string[1:i] | i <- length(string)+14:length(string)]\n    prefix_list\
    \ = prefix_list + [string[1:i] | i <- length(string)+15:length(string)]\n    prefix_list\
    \ = prefix_list + [string[1:i] | i <- length(string)+16:length(string)]\n    prefix_list\
    \ = prefix_list + [string[1:i] | i <- length(string)+17:length(string)]\n    prefix_list\
    \ = prefix_list + [string[1:i] | i <- length(string)+18:length(string)]\n    prefix_list\
    \ = prefix_list + [string[1:i] | i <- length(string)+19:length(string)]\n    prefix_list\
    \ = prefix_list + [string[1:i] | i <- length(string)+20:length(string)]\n    prefix_list\
    \ = prefix_list + [string[1:i] | i <- length(string)+21:length(string)]\n    prefix_list\
    \ = prefix_list + [string[1:i] | i <- length(string)+22:length(string)]\n\nusing\
    \ Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\"\
    ) == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpdqy93jrz.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpdqy93jrz.jl:1\n\
    in expression starting at /tmp/tmpdqy93jrz.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i = 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-1] + string[i]\n    end\n    return prefix_list\nend\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"ab\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"aba\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abba\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbac\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbaca\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacac\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacb\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacbba\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacbbac\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacbbacc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacbbaccc\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacbbacccb\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacbbacccbc\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacbbacccbcb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacbbacccbcbc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacbbacccbcbcb\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacbbacccbcbcbc\")\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacbbacccbcbcbcb\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacbbacccbcbcbcbc\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacbbacccbcbcbcbcb\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacbba\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmm7y1xr_.jl:13\nin expression starting at\
    \ /tmp/tmpmm7y1xr_.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i = 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-2] + string[i]\n    end\n    prefix_list\nend\n</cell>\n<code\
    \ language=julia-1.4>\nall_prefixes(\"abc\")\n</cell>\n<text>\nExercise 3.3\n\
    Write a function that returns the longest prefix of a given string.\nusing Test\n\
    \n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5kqet2if.jl:13\nin expression starting at\
    \ /tmp/tmp5kqet2if.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    for s in string\n        prefix_list = [prefix_list; prefix_list[1:]]\n \
    \   end\n    prefix_list\nend\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"\
    abc\")\n</cell>\n<code language=julia-1.3>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpengoufxc.jl:8\nin expression\
    \ starting at /tmp/tmpengoufxc.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    for c in string\n        prefix_list += all_prefixes(c)\n    end\n    prefix_list\n\
    end\n</cell>\n<code language=julia-1.4>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbek4x_t9.jl:12\nin expression starting at\
    \ /tmp/tmpbek4x_t9.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    \n    prefix_list = Vector{String}()\n\
    \    prefix_list = all_prefixes_helper(string, prefix_list)\n    \n    return\
    \ prefix_list\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpxr_5hl81.jl:17\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  UndefVarError: all_prefixes_helper\
    \ not defined\n  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main\
    \ /tmp/tmpxr_5hl81.jl:8\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxr_5hl81.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxr_5hl81.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpxr_5hl81.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ]\n  UndefVarError: all_prefixes_helper not defined\n  Stacktrace:\n   [1] all_prefixes(string::String)\n\
    \     @ Main /tmp/tmpxr_5hl81.jl:8\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxr_5hl81.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxr_5hl81.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpxr_5hl81.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]\n  UndefVarError: all_prefixes_helper\
    \ not defined\n  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main\
    \ /tmp/tmpxr_5hl81.jl:8\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxr_5hl81.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxr_5hl81.jl:16\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxr_5hl81.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[1:end-1]) \n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end-1:end])\n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end-1:end-1])\n    return prefix_list\nend\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a string and returns the number of characters in the\
    \ string. \nWrite a function that takes a string and returns the number of characters\
    \ in the string that are uppercase letters.\nWrite a function that takes a string\
    \ and returns the number of characters in the string that are lowercase letters.\n\
    Write a function that takes a string and returns the number of characters in the\
    \ string that are digits or letters.\nWrite a function that takes a string and\
    \ returns the number of characters in the string that are spaces.\nWrite a function\
    \ that takes a string and returns the number of characters in the string that\
    \ are punctuation.\nWrite a function that takes a string and returns the number\
    \ of characters in the string that are alphanumeric.\nWrite a function that takes\
    \ a string and returns the number of characters in the string that are all uppercase\
    \ letters.\nWrite a function that takes a string and returns the number of characters\
    \ in the string that are all lowercase letters.\nWrite a function that takes a\
    \ string and returns the number of characters in the string that are all digits\
    \ or letters.\nWrite a function that takes a string and returns the number of\
    \ characters in the string that are all spaces.\nWrite a function that takes a\
    \ string and returns the number of characters in the string that are all punctuation.\n\
    Write a function that takes a string and returns the number of characters in the\
    \ string that are all alphanumeric.\nWrite a function that takes a string and\
    \ returns the number of characters in the string that are all uppercase letters.\n\
    Write a function that takes a string and returns the number of characters in the\
    \ string that are all lowercase letters.\nWrite a function that takes a string\
    \ and returns the number of characters in the string that are all digits or letters.\n\
    Write a function that takes a string and returns the number of characters in the\
    \ string that are all spaces.\nWrite a function that takes a string and returns\
    \ the number of characters in the string that are all punctuation.\nWrite a function\
    \ that takes a string and returns the number of characters in the string that\
    \ are all alphanumeric.\nWrite a function that takes a string and returns the\
    \ number of characters in the string that are all uppercase letters.\nWrite a\
    \ function that takes a string and returns the number of characters in the string\
    \ that are all lowercase letters.\nWrite a function that takes a string and returns\
    \ the number of characters in the string that are all digits or letters.\nWrite\
    \ a function that takes a string and returns the number of characters in the string\
    \ that are all spaces.\nWrite a function that takes a string and returns the number\
    \ of characters in the string that are all punctuation.\nWrite a function that\
    \ takes a string and returns the number of characters in the string that are all\
    \ alphanumeric.\nWrite a function that takes a \nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpml0dxm2q.jl:12\nin expression starting at\
    \ /tmp/tmpml0dxm2q.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    prefix_list[2] = string\n    prefix_list[3]\
    \ = string\n    prefix_list[4] = string\n    prefix_list[5] = string\n    prefix_list[6]\
    \ = string\n    prefix_list[7] = string\n    prefix_list[8] = string\n    prefix_list[9]\
    \ = string\n    prefix_list[10] = string\n    prefix_list[11] = string\n    prefix_list[12]\
    \ = string\n    prefix_list[13] = string\n    prefix_list[14] = string\n    prefix_list[15]\
    \ = string\n    prefix_list[16] = string\n    prefix_list[17] = string\n    prefix_list[18]\
    \ = string\n    prefix_list[19] = string\n    prefix_list[20] = string\n    prefix_list[21]\
    \ = string\n    prefix_list[22] = string\n    prefix_list[23] = string\n    prefix_list[24]\
    \ = string\n    prefix_list[25] = string\n    prefix_list[26] = string\n    prefix_list[27]\
    \ = string\n    prefix_list[28] = string\n    prefix_list[29] = string\n    prefix_list[30]\
    \ = string\n    prefix_list[31] = string\n    prefix_list[32] = string\n    prefix_list[33]\
    \ = string\n    prefix_list[34] = string\n    prefix_list[35] = string\n    prefix_list[36]\
    \ = string\n    prefix_list[37] = string\n    prefix_list[38] = string\n    prefix_list[39]\
    \ = string\n    prefix_list[40] = string\n    prefix_list[41] = string\n    prefix_list[42]\
    \ = string\n    prefix_list[43] = string\n    prefix_list[44] = string\n    prefix_list[45]\
    \ = string\n    prefix_list[46] = string\n    prefix_list[47] = string\n    prefix_list[48]\
    \ = string\n    prefix_list[49] = string\n    prefix_list[50] = string\n    prefix_list[51]\
    \ = string\n    prefix_list[52] = string\n    prefix_list[53] = string\n    prefix_list[54]\
    \ = string\n    prefix_list[55] = string\n    prefix_list[56] = string\n    prefix_list[57]\
    \ = string\n    prefix_list[58] = string\n    prefix_list[59] = string\n    prefix_list[60]\
    \ = string\n    prefix_list[61] = string\n    prefix_list[62] = string\n    prefix_list[63]\
    \ = string\n    prefix_list[64] = string\n    prefix_list[65] = string\n    prefix_list[66]\
    \ = string\n    prefix_list[67] = string\n    prefix_list[68] = string\n    prefix_list[69]\
    \ = string\n    prefix_list[70] = string\n    prefix_list[71] = string\n    prefix_list[72]\
    \ = string\n    prefix_\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmplpkzcncy.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmplpkzcncy.jl:1\n\
    in expression starting at /tmp/tmplpkzcncy.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i = 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-1] + string[i]\n    end\n    return prefix_list\nend\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    prefix_counts(string::String)\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_zdnkkyq.jl:13\nin expression starting at\
    \ /tmp/tmp_zdnkkyq.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i = 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-2] + string[i]\n    end\n    return prefix_list\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\"\
    ) == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpanl7flqp.jl:18\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  BoundsError: attempt to\
    \ access 0-element Vector{String} at index [1]\n  Stacktrace:\n   [1] setindex!\n\
    \     @ ./array.jl:903 [inlined]\n   [2] all_prefixes(string::String)\n     @\
    \ Main /tmp/tmpanl7flqp.jl:7\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpanl7flqp.jl:18 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpanl7flqp.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpanl7flqp.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ]\n  BoundsError: attempt to access 0-element Vector{String} at index [1]\n  Stacktrace:\n\
    \   [1] setindex!\n     @ ./array.jl:903 [inlined]\n   [2] all_prefixes(string::String)\n\
    \     @ Main /tmp/tmpanl7flqp.jl:7\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpanl7flqp.jl:19 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpanl7flqp.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpanl7flqp.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]\n  BoundsError: attempt to access\
    \ 0-element Vector{String} at index [1]\n  Stacktrace:\n   [1] setindex!\n   \
    \  @ ./array.jl:903 [inlined]\n   [2] all_prefixes(string::String)\n     @ Main\
    \ /tmp/tmpanl7flqp.jl:7\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpanl7flqp.jl:20 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpanl7f"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpanl7flqp.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i in 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-2] + string[i]\n    end\n    prefix_list\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\n    prefix_count(string::String)::Int64\nusing\
    \ Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\"\
    ) == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptjbq87hr.jl:13\nin expression starting at\
    \ /tmp/tmptjbq87hr.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = Vector{String}()\n\
    \    for c in string\n        prefixes += all_prefixes(c) \n    end\n    prefixes\n\
    end\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbac\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbaca\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacac\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacaca\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacab\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaba\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacabba\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacabbac\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacabbaca\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacabbacac\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacabbacaca\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacabbacacab\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacabbacacaba\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacacabbacacabba\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacabbacacabbac\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacabbacacabbaca\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacabbacacabbacac\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacabbacacabbacaca\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacabbacacabbacacab\"\
    )\n</cell>\n<code language=julia-1.5>\nall_\nusing Test\n\n@testset begin\n\n\
    candidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprdsl0kz9.jl:12\nin expression starting at\
    \ /tmp/tmprdsl0kz9.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp1mmc03p2.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp1mmc03p2.jl:1\n\
    in expression starting at /tmp/tmp1mmc03p2.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i in 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-2] + string[i]\n    end\n    return prefix_list\nend\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph8vm40dv.jl:13\nin expression starting at\
    \ /tmp/tmph8vm40dv.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    prefix_list[2] = string\n    prefix_list[3]\
    \ = string\n    prefix_list[4] = string\n    prefix_list[5] = string\n    prefix_list[6]\
    \ = string\n    prefix_list[7] = string\n    prefix_list[8] = string\n    prefix_list[9]\
    \ = string\n    prefix_list[10] = string\n    prefix_list[11] = string\n    prefix_list[12]\
    \ = string\n    prefix_list[13] = string\n    prefix_list[14] = string\n    prefix_list[15]\
    \ = string\n    prefix_list[16] = string\n    prefix_list[17] = string\n    prefix_list[18]\
    \ = string\n    prefix_list[19] = string\n    prefix_list[20] = string\n    prefix_list[21]\
    \ = string\n    prefix_list[22] = string\n    prefix_list[23] = string\n    prefix_list[24]\
    \ = string\n    prefix_list[25] = string\n    prefix_list[26] = string\n    prefix_list[27]\
    \ = string\n    prefix_list[28] = string\n    prefix_list[29] = string\n    prefix_list[30]\
    \ = string\n    prefix_list[31] = string\n    prefix_list[32] = string\n    prefix_list[33]\
    \ = string\n    prefix_list[34] = string\n    prefix_list[35] = string\n    prefix_list[36]\
    \ = string\n    prefix_list[37] = string\n    prefix_list[38] = string\n    prefix_list[39]\
    \ = string\n    prefix_list[40] = string\n    prefix_list[41] = string\n    prefix_list[42]\
    \ = string\n    prefix_list[43] = string\n    prefix_list[44] = string\n    prefix_list[45]\
    \ = string\n    prefix_list[46] = string\n    prefix_list[47] = string\n    prefix_list[48]\
    \ = string\n    prefix_list[49] = string\n    prefix_list[50] = string\n    prefix_list[51]\
    \ = string\n    prefix_list[52] = string\n    prefix_list[53] = string\n    prefix_list[54]\
    \ = string\n    prefix_list[55] = string\n    prefix_list[56] = string\n    prefix_list[57]\
    \ = string\n    prefix_list[58] = string\n    prefix_list[59] = string\n    prefix_list[60]\
    \ = string\n    prefix_list[61] = string\n    prefix_list[62] = string\n    prefix_list[63]\
    \ = string\n    prefix_list[64] = string\n    prefix_list[65] = string\n    prefix_list[66]\
    \ = string\n    prefix_list[67] = string\n    prefix_list[68] = string\n    prefix_list[69]\
    \ = string\n    prefix_list[70] = string\n    prefix_list[71] = string\n    prefix_list[72]\
    \ = string\n    prefix_\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp6pigd3tn.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6pigd3tn.jl:1\n\
    in expression starting at /tmp/tmp6pigd3tn.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i in 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-1] + string[i]\n    end\n    return prefix_list\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\"\
    ) == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpy3k40oyj.jl:18\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  BoundsError: attempt to\
    \ access 0-element Vector{String} at index [1]\n  Stacktrace:\n   [1] setindex!\n\
    \     @ ./array.jl:903 [inlined]\n   [2] all_prefixes(string::String)\n     @\
    \ Main /tmp/tmpy3k40oyj.jl:7\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpy3k40oyj.jl:18 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpy3k40oyj.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpy3k40oyj.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ]\n  BoundsError: attempt to access 0-element Vector{String} at index [1]\n  Stacktrace:\n\
    \   [1] setindex!\n     @ ./array.jl:903 [inlined]\n   [2] all_prefixes(string::String)\n\
    \     @ Main /tmp/tmpy3k40oyj.jl:7\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpy3k40oyj.jl:19 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpy3k40oyj.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpy3k40oyj.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]\n  BoundsError: attempt to access\
    \ 0-element Vector{String} at index [1]\n  Stacktrace:\n   [1] setindex!\n   \
    \  @ ./array.jl:903 [inlined]\n   [2] all_prefixes(string::String)\n     @ Main\
    \ /tmp/tmpy3k40oyj.jl:7\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpy3k40oyj.jl:20 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpy3k40"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpy3k40oyj.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    \n    prefixes = Vector{String}()\n\
    \    \n    for i = 1:length(string)\n        prefixes += string[(i+1):end]\n \
    \   end\n    \n    return prefixes\nend\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbac\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbaca\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacac\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacaca\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacaa\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaa\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaab\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacaaabb\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacaaabbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacaaabbbc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbcc\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbccd\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbccde\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacacaaabbbccdef\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacaaabbbccdefg\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacaaabbbccdefgh\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbccdefghi\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbccdefghij\"\
    )\n</cell>\n<code language=juli\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzdrue2lc.jl:15\nin expression starting at\
    \ /tmp/tmpzdrue2lc.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    for prefix in string.split(\"\")\n        prefix_list += prefixes_of(prefix)\n\
    \    return prefix_list\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abc\")\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptkp8u0yp.jl:11\nin expression starting at\
    \ /tmp/tmptkp8u0yp.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    for s in string\n        prefix_list += all_prefixes(s)\n    end\n    prefix_list\n\
    end\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"abc\")\n</cell>\n<code\
    \ language=julia-1.4>\nall_prefixes(\"ab\")\n</cell>\n<code language=julia-1.4>\n\
    all_prefixes(\"aba\")\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"abba\"\
    )\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"abbac\")\n</cell>\n<code\
    \ language=julia-1.4>\nall_prefixes(\"abbaca\")\n</cell>\n<code language=julia-1.4>\n\
    all_prefixes(\"abbacac\")\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"\
    abbacaca\")\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"abbacacaa\")\n\
    </cell>\n<code language=julia-1.4>\nall_prefixes(\"abbacacaaa\")\n</cell>\n<code\
    \ language=julia-1.4>\nall_prefixes(\"abbacacaaab\")\n</cell>\n<code language=julia-1.4>\n\
    all_prefixes(\"abbacacaaabb\")\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"\
    abbacacaaabbb\")\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"abbacacaaabbbc\"\
    )\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"abbacacaaabbbcc\")\n</cell>\n\
    <code language=julia-1.4>\nall_prefixes(\"abbacacaaabbbccc\")\n</cell>\n<code\
    \ language=julia-1.4>\nall_prefixes(\"abbacacaaabbbccca\")\n</cell>\n<code language=julia-1.4>\n\
    all_prefixes(\"abbacacaaabbbcccaa\")\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"\
    abbacacaaabbbcccaab\")\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"abbacacaaabbbcccaabb\"\
    )\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"abbacacaaabbbcccaabbb\"\
    )\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"abbacacaaabbbcccaabbbc\"\
    )\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"abba\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyg786qok.jl:12\nin expression starting at\
    \ /tmp/tmpyg786qok.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list = prefix_list + all_prefixes(string[1:end-1]) + [string[1:end-1]]\n\
    \    return prefix_list\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    for prefix in string.split(\"\")\n        prefix_list += prefixes_of(prefix)\n\
    \    return prefix_list\n</code>\n<|/ a tags=string,algorithm,language-agnostic,prefix-tree\
    \ |>\n<| a tags=string,algorithm,language-agnostic,prefix-tree |>\nHere's a solution\
    \ in Python:\n<code>\ndef prefixes(s):\n    prefixes = []\n    for c in s:\n \
    \       prefixes.extend(prefixes_of(c))\n    return prefixes\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpazculumv.jl:10\nin expression starting at\
    \ /tmp/tmpazculumv.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i in 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-2] + string[i]\n    end\n    prefix_list\nend\n</cell>\n<code\
    \ language=julia-1.4>\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprp5v7mkq.jl:13\nin expression starting at\
    \ /tmp/tmprp5v7mkq.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i = 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-1] + string[i]\n    end\n    return prefix_list\nend\n</cell>\n\
    <code language=julia-1.4>\nall_prefixes(\"abc\")\n</cell>\n<code language=julia-1.4>\n\
    using Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjxg6eazc.jl:13\nin expression starting at\
    \ /tmp/tmpjxg6eazc.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    prefix_list[2] = string\n    for i = 3:length(string)\n\
    \        prefix_list[i] = prefix_list[i-2] + string[i]\n    end\n    return prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd_dceudg.jl:14\nin expression starting at\
    \ /tmp/tmpd_dceudg.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i in 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-2] + string[i]\n    end\n    return prefix_list\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    prefix_length(string::String)\nusing Test\n\
    \n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnsgalbc1.jl:13\nin expression starting at\
    \ /tmp/tmpnsgalbc1.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i = 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-2] + string[i]\n    end\n    return prefix_list\nend\n</cell>\n\
    <code language=julia-1.4>\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_52wlpe2.jl:13\nin expression starting at\
    \ /tmp/tmp_52wlpe2.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i = 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-2] + string[i]\n    end\n    return prefix_list\nend\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprpssixis.jl:13\nin expression starting at\
    \ /tmp/tmprpssixis.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    for prefix in string.split(\"\")\n        prefix_list += prefixes_of(prefix)\n\
    \    return prefix_list\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbac\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbaca\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacac\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacaca\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacaa\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaa\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaab\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacaaabb\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacaaabbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacaaabbbc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbcc\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbccd\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbccdc\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacacaaabbbccdce\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacaaabbbccdcef\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacaaabbbccdcefg\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbccdcefgh\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbccdcefghi\"\
    )\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7eafabz7.jl:11\nin expression starting at\
    \ /tmp/tmp7eafabz7.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    \n    prefix_list = Vector{String}()\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[1:end])\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end+1:end-1])\n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end-1:end])\n    \n    return prefix_list\nend\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"ab\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbb\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbbc\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbbcc\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbbccc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbbcccde\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbbcccdeef\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbbcccdeeff\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbbcccdeeffg\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbbcccdeeffgg\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbbcccdeeffggh\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbbcccdeeffgghh\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbbcccdeeffgghhh\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbbcccdeeffgghhhh\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbbcccdeeffgghhhhh\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbbcccdeeffgghhhhhh\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbbcccdeeffgghhhhhhh\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbbcccdeeffgghhhhhhhh\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbbcccdeeffgghhhh\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9ll96exg.jl:14\nin expression starting at\
    \ /tmp/tmp9ll96exg.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list = prefix_list + all_prefixes(string[1:end-1]) \n    prefix_list\
    \ = prefix_list + all_prefixes(string[end-1:end]) \n    prefix_list = prefix_list\
    \ + all_prefixes(string[end+1:end+2])\n    prefix_list = prefix_list + all_prefixes(string[end+2:end+3])\n\
    \    prefix_list = prefix_list + all_prefixes(string[end+3:end+4])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[end+4:end+5])\n    prefix_list = prefix_list\
    \ + all_prefixes(string[end+5:end+6])\n    prefix_list = prefix_list + all_prefixes(string[end+6:end+7])\n\
    \    prefix_list = prefix_list + all_prefixes(string[end+7:end+8])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[end+8:end+9])\n    prefix_list = prefix_list\
    \ + all_prefixes(string[end+9:end+10])\n    prefix_list = prefix_list + all_prefixes(string[end+10:end+11])\n\
    \    prefix_list = prefix_list + all_prefixes(string[end+11:end+12])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[end+12:end+13])\n    prefix_list = prefix_list\
    \ + all_prefixes(string[end+13:end+14])\n    prefix_list = prefix_list + all_prefixes(string[end+14:end+15])\n\
    \    prefix_list = prefix_list + all_prefixes(string[end+15:end+16])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[end+16:end+17])\n    prefix_list = prefix_list\
    \ + all_prefixes(string[end+17:end+18])\n    prefix_list = prefix_list + all_prefixes(string[end+18:end+19])\n\
    \    prefix_list = prefix_list + all_prefixes(string[end+19:end+20])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[end+20:end+21])\n    prefix_list = prefix_list\
    \ + all_prefixes(string[end+21:end+22])\n    prefix_list = prefix_list + all_prefixes(string[end+22:end+23])\n\
    \    prefix_list = prefix_list + all_prefixes(string[end+23:end+24])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[end+24:end+25])\n    prefix_list = prefix_list\
    \ + all_prefixes(string[end+25:end+26])\n    prefix_\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpzqqxfp61.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpzqqxfp61.jl:1\n\
    in expression starting at /tmp/tmpzqqxfp61.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i = 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-1] + string[i]\n    end\n    return prefix_list\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5eaw_8c_.jl:13\nin expression starting at\
    \ /tmp/tmp5eaw_8c_.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i in 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-2] + string[i]\n    end\n    prefix_list\nend\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprmczmtf7.jl:13\nin expression starting at\
    \ /tmp/tmprmczmtf7.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i = 2 to length(string)\n        prefix_list[i]\
    \ = prefix_list[i-2] + string[i]\n    end\n    prefix_list\nend\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmplhwtb3bk.jl:8 expected \"\
    end\", got \"length\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmplhwtb3bk.jl:8\n\
    in expression starting at /tmp/tmplhwtb3bk.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list = prefix_list + prefixes(string)\n    prefix_list = prefix_list\
    \ + prefixes(string.reverse)\n    return prefix_list\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpl66ndm1x.jl:16\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  UndefVarError: prefixes\
    \ not defined\n  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main\
    \ /tmp/tmpl66ndm1x.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpl66ndm1x.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpl66ndm1x.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpl66ndm1x.jl:17\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ]\n  UndefVarError: prefixes not defined\n  Stacktrace:\n   [1] all_prefixes(string::String)\n\
    \     @ Main /tmp/tmpl66ndm1x.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpl66ndm1x.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpl66ndm1x.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpl66ndm1x.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]\n  UndefVarError: prefixes not\
    \ defined\n  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main /tmp/tmpl66ndm1x.jl:7\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpl66ndm1x.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpl66ndm1x.jl:15\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpl66ndm1x.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpa6u_sszr.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpa6u_sszr.jl:1\n\
    in expression starting at /tmp/tmpa6u_sszr.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i = 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-2] + string[i]\n    end\n    prefix_list\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\n    prefix_lengths(string::String)\nusing Test\n\
    \n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps1th16io.jl:13\nin expression starting at\
    \ /tmp/tmps1th16io.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    \n    prefixes = Vector{String}()\n\
    \    \n    for c in string\n        prefixes += all_prefixes(c) \n    end\n  \
    \  \n    prefixes\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\"\
    )\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string and returns\
    \ the longest prefix that is a substring of the input string. For example, all_prefixes('abc')\
    \ returns ['abc', 'ab', 'a'].\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnrin467d.jl:15\nin expression starting at\
    \ /tmp/tmpnrin467d.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list = prefix_list ++ [string[1:i] for i in 1:length(string)]\n  \
    \  prefix_list = prefix_list ++ [string[i+1::] for i in 1:length(string)]\n  \
    \  prefix_list = prefix_list ++ [string[i+1::] for i in 2:length(string)]\n  \
    \  prefix_list = prefix_list ++ [string[i+1::] for i in 3:length(string)]\n  \
    \  prefix_list = prefix_list ++ [string[i+1::] for i in 4:length(string)]\n  \
    \  prefix_list = prefix_list ++ [string[i+1::] for i in 5:length(string)]\n  \
    \  prefix_list = prefix_list ++ [string[i+1::] for i in 6:length(string)]\n  \
    \  prefix_list = prefix_list ++ [string[i+1::] for i in 7:length(string)]\n  \
    \  prefix_list = prefix_list ++ [string[i+1::] for i in 8:length(string)]\n  \
    \  prefix_list = prefix_list ++ [string[i+1::] for i in 9:length(string)]\n  \
    \  prefix_list = prefix_list ++ [string[i+1::] for i in 10:length(string)]\n \
    \   prefix_list = prefix_list ++ [string[i+1::] for i in 11:length(string)]\n\
    \    prefix_list = prefix_list ++ [string[i+1::] for i in 12:length(string)]\n\
    \    prefix_list = prefix_list ++ [string[i+1::] for i in 13:length(string)]\n\
    \    prefix_list = prefix_list ++ [string[i+1::] for i in 14:length(string)]\n\
    \    prefix_list = prefix_list ++ [string[i+1::] for i in 15:length(string)]\n\
    \    prefix_list = prefix_list ++ [string[i+1::] for i in 16:length(string)]\n\
    \    prefix_list = prefix_list ++ [string[i+1::] for i in 17:length(string)]\n\
    \    prefix_list = prefix_list ++ [string[i+1::] for i in 18:length(string)]\n\
    \    prefix_list = prefix_list ++ [string[i+1::] for i in 19:length(string)]\n\
    \    prefix_list = prefix_list ++ [string[i+1::] for i in 20:length(string)]\n\
    \    prefix_list = prefix_list ++ [string[i+1::] for i in 21:length(string)]\n\
    \    prefix_list = prefix_list ++ [string[i+1::] for i in 22:length(string)]\n\
    \    prefix_list = prefix_list ++ [string[i+1::] for i in 23:length(string)]\n\
    \    prefix_list = prefix_list ++ [string[i+1::] for i in 24:length(string)]\n\
    \    prefix_list = prefix_list ++ [string[i+1::] for i in 25:length(string)]\n\
    \    prefix_list = prefix_list ++ [string[i+1::] for i in 26:length(string)]\n\
    \    prefix_list = prefix_list ++ [string[i+1::] for i in 27:length(string)]\n\
    \    prefix_list = prefix_list ++ [string[i+1::] for i in 28:length(string)]\n\
    \    prefix_list = prefix_list ++ \nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"]\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp5v0ssyzi.jl:8\nin expression starting at /tmp/tmp5v0ssyzi.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    \n    prefixes = Vector{String}()\n\
    \    \n    for i = 1:length(string)\n        prefixes += string[i..end]\n    end\n\
    \    \n    return prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpajv6t_3z.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"]\n  UndefVarError: .. not defined\n  Stacktrace:\n   [1] all_prefixes(string::String)\n\
    \     @ Main /tmp/tmpajv6t_3z.jl:10\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpajv6t_3z.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpajv6t_3z.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpajv6t_3z.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]\n  UndefVarError: .. not defined\n\
    \  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main /tmp/tmpajv6t_3z.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpajv6t_3z.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpajv6t_3z.jl:19\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      2      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpajv6t_3z.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[1:end])\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end+1:end-1])\n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end-1:end])\n    return prefix_list\nend\n</cell>\n<code\
    \ language=julia-1.3>\nall_prefixes(\"ab\")\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a string and returns the longest prefix that is a substring\
    \ of the input string. For example, all_prefixes(\"ab\") should return [\"a\"\
    , \"ab\"]\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpeqb9b1j_.jl:12\nin expression starting at\
    \ /tmp/tmpeqb9b1j_.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    prefix_list[2] = string\n    prefix_list[3]\
    \ = string\n    prefix_list[4] = string\n    prefix_list[5] = string\n    prefix_list[6]\
    \ = string\n    prefix_list[7] = string\n    prefix_list[8] = string\n    prefix_list[9]\
    \ = string\n    prefix_list[10] = string\n    prefix_list[11] = string\n    prefix_list[12]\
    \ = string\n    prefix_list[13] = string\n    prefix_list[14] = string\n    prefix_list[15]\
    \ = string\n    prefix_list[16] = string\n    prefix_list[17] = string\n    prefix_list[18]\
    \ = string\n    prefix_list[19] = string\n    prefix_list[20] = string\n    prefix_list[21]\
    \ = string\n    prefix_list[22] = string\n    prefix_list[23] = string\n    prefix_list[24]\
    \ = string\n    prefix_list[25] = string\n    prefix_list[26] = string\n    prefix_list[27]\
    \ = string\n    prefix_list[28] = string\n    prefix_list[29] = string\n    prefix_list[30]\
    \ = string\n    prefix_list[31] = string\n    prefix_list[32] = string\n    prefix_list[33]\
    \ = string\n    prefix_list[34] = string\n    prefix_list[35] = string\n    prefix_list[36]\
    \ = string\n    prefix_list[37] = string\n    prefix_list[38] = string\n    prefix_list[39]\
    \ = string\n    prefix_list[40] = string\n    prefix_list[41] = string\n    prefix_list[42]\
    \ = string\n    prefix_list[43] = string\n    prefix_list[44] = string\n    prefix_list[45]\
    \ = string\n    prefix_list[46] = string\n    prefix_list[47] = string\n    prefix_list[48]\
    \ = string\n    prefix_list[49] = string\n    prefix_list[50] = string\n    prefix_list[51]\
    \ = string\n    prefix_list[52] = string\n    prefix_list[53] = string\n    prefix_list[54]\
    \ = string\n    prefix_list[55] = string\n    prefix_list[56] = string\n    prefix_list[57]\
    \ = string\n    prefix_list[58] = string\n    prefix_list[59] = string\n    prefix_list[60]\
    \ = string\n    prefix_list[61] = string\n    prefix_list[62] = string\n    prefix_list[63]\
    \ = string\n    prefix_list[64] = string\n    prefix_list[65] = string\n    prefix_list[66]\
    \ = string\n    prefix_list[67] = string\n    prefix_list[68] = string\n    prefix_list[69]\
    \ = string\n    prefix_list[70] = string\n    prefix_list[71] = string\n    prefix_list[72]\
    \ = string\n\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp89qa71i9.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp89qa71i9.jl:1\n\
    in expression starting at /tmp/tmp89qa71i9.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i = 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-1] + string[i]\n    end\n    return prefix_list\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\"\
    ) == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp41s98w34.jl:18\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  BoundsError: attempt to\
    \ access 0-element Vector{String} at index [1]\n  Stacktrace:\n   [1] setindex!\n\
    \     @ ./array.jl:903 [inlined]\n   [2] all_prefixes(string::String)\n     @\
    \ Main /tmp/tmp41s98w34.jl:7\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp41s98w34.jl:18 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp41s98w34.jl:17\ntest set:\
    \ Error During Test at /tmp/tmp41s98w34.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ]\n  BoundsError: attempt to access 0-element Vector{String} at index [1]\n  Stacktrace:\n\
    \   [1] setindex!\n     @ ./array.jl:903 [inlined]\n   [2] all_prefixes(string::String)\n\
    \     @ Main /tmp/tmp41s98w34.jl:7\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp41s98w34.jl:19 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp41s98w34.jl:17\ntest set:\
    \ Error During Test at /tmp/tmp41s98w34.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]\n  BoundsError: attempt to access\
    \ 0-element Vector{String} at index [1]\n  Stacktrace:\n   [1] setindex!\n   \
    \  @ ./array.jl:903 [inlined]\n   [2] all_prefixes(string::String)\n     @ Main\
    \ /tmp/tmp41s98w34.jl:7\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp41s98w34.jl:20 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp41s98"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp41s98w34.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i = 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-1] + string[i]\n    end\n    prefix_list\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkp79nerx.jl:13\nin expression starting at\
    \ /tmp/tmpkp79nerx.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i = 2 to length(string)\n        prefix_list[i]\
    \ = prefix_list[i-2] + string[i]\n    end\n    prefix_list\nend\n</cell>\n<code\
    \ language=julia-1.4>\n\"\"\"\n    prefix_sum(string::String)\nusing Test\n\n\
    @testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpzv_gue4c.jl:8 expected \"\
    end\", got \"length\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpzv_gue4c.jl:8\n\
    in expression starting at /tmp/tmpzv_gue4c.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    for c in string\n        prefix_list += all_prefixes(c)\n    end\n    prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the longest prefix\
    \ that is a substring of the original string. For example, all_prefixes(\"abc\"\
    ) returns [\"a\", \"ab\", \"abc\"] and all_prefixes(\"ab\") returns [\"ab\"].\
    \ Make sure your function works for all cases.\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp10s_lqgg.jl:12\nin expression starting at\
    \ /tmp/tmp10s_lqgg.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list = prefix_list + all_prefixes(string[1:end-1]) + [string[1:end-1]]\n\
    \    return prefix_list\nend\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"\
    ab\")\n</cell>\n<text>\nExercise 4\nWrite a function that takes a string and returns\
    \ the longest prefix that is a substring of the input string. For example, all_prefixes(\"\
    ab\") should return [\"a\", \"ab\"]. Assume that all_prefixes is defined above.\n\
    using Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7qjd4p7e.jl:10\nin expression starting at\
    \ /tmp/tmp7qjd4p7e.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i = 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-2] + string[i]\n    end\n    return prefix_list\nend\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a string and returns the number of times each character\
    \ appears in the string. \nFor example, for the string \"abc\" the function should\
    \ return {\"a\" => 1, \"b\" => 1, \"c\" => 2}.\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe2aqp67r.jl:13\nin expression starting at\
    \ /tmp/tmpe2aqp67r.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    \n    prefix_list = Vector{String}()\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string[1:end])\n    return prefix_list\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpuzswa7rs.jl:17\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  UndefVarError: all_prefixes_helper\
    \ not defined\n  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main\
    \ /tmp/tmpuzswa7rs.jl:8\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpuzswa7rs.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpuzswa7rs.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpuzswa7rs.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ]\n  UndefVarError: all_prefixes_helper not defined\n  Stacktrace:\n   [1] all_prefixes(string::String)\n\
    \     @ Main /tmp/tmpuzswa7rs.jl:8\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpuzswa7rs.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpuzswa7rs.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpuzswa7rs.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]\n  UndefVarError: all_prefixes_helper\
    \ not defined\n  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main\
    \ /tmp/tmpuzswa7rs.jl:8\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpuzswa7rs.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpuzswa7rs.jl:16\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpuzswa7rs.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    for prefix in string.split(\"\")\n        prefix_list += prefixes_of(prefix)\n\
    \    return prefix_list\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abc\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and\
    \ returns the longest prefix that is a substring of the input string. For example,\
    \ all_prefixes(\"abcabc\") should return \"abc\".\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1iz06qda.jl:11\nin expression starting at\
    \ /tmp/tmp1iz06qda.jl:11\n"
  exit_code: 1
  status: SyntaxError
