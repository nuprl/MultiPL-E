name: HumanEval_14_all_prefixes
language: julia
results:
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    \n    prefix_list = Vector{String}()\n\
    \    prefix_list = prefix_list ++ [string]\n    prefix_list = prefix_list ++ all_prefixes(string[1:end-1])\
    \ \n    prefix_list = prefix_list ++ all_prefixes(string[end+1:end])\n    \n \
    \   return prefix_list\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    ab\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"aba\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbac\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbaca\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacac\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacaca\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacaa\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacaaa\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaab\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabb\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacaaabbb\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacaaabbbc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacaaabbbcc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbccc\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbccca\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbcccaa\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacacaaabbbcccaaa\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacaaabbbcccaaaa\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacaaabbbcccaaaab\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacaaabbbcccaaaabb\")\n</cell\nusing Test\n\n@testset begin\n\ncandidate =\
    \ all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp03988dsu.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp03988dsu.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    \n    prefix_list = Vector{String}()\n\
    \    prefix_list = prefix_list + all_prefixes(string[1:end-1]) + [string[1:end]]\n\
    \    return prefix_list\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"a\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abba\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbac\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbaca\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacac\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacbba\")\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacbbac\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacacbbacc\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacbbaccc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacbbacccb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacbbacccbb\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacbbacccbbb\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacbbacccbbbc\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacacbbacccbbbcb\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacbbacccbbbcbc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacbbacccbbbcbcc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacbbacccbbbcbccc\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacbbacccbbbcbcccb\"\
    )\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpjwsafxbt.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpjwsafxbt.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i in 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-1] + string[i]\n    end\n    prefix_list\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\n    prefix_length(prefix::String, string::String)\n\
    using Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp6_iqno7u.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp6_iqno7u.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i = 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-1] + string[i]\n    end\n    return prefix_list\nend\n</cell>\n\
    <code language=julia-1.4>\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpppwabh6r.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpppwabh6r.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list = prefix_list ++ [string]\n    prefix_list = prefix_list ++ [string[1:end-1]]\n\
    \    prefix_list = prefix_list ++ [string[1:end-2]]\n    prefix_list = prefix_list\
    \ ++ [string[1:end-3]]\n    prefix_list = prefix_list ++ [string[1:end-4]]\n \
    \   prefix_list = prefix_list ++ [string[1:end-5]]\n    prefix_list = prefix_list\
    \ ++ [string[1:end-6]]\n    prefix_list = prefix_list ++ [string[1:end-7]]\n \
    \   prefix_list = prefix_list ++ [string[1:end-8]]\n    prefix_list = prefix_list\
    \ ++ [string[1:end-9]]\n    prefix_list = prefix_list ++ [string[1:end-10]]\n\
    \    prefix_list = prefix_list ++ [string[1:end-11]]\n    prefix_list = prefix_list\
    \ ++ [string[1:end-12]]\n    prefix_list = prefix_list ++ [string[1:end-13]]\n\
    \    prefix_list = prefix_list ++ [string[1:end-14]]\n    prefix_list = prefix_list\
    \ ++ [string[1:end-15]]\n    prefix_list = prefix_list ++ [string[1:end-16]]\n\
    \    prefix_list = prefix_list ++ [string[1:end-17]]\n    prefix_list = prefix_list\
    \ ++ [string[1:end-18]]\n    prefix_list = prefix_list ++ [string[1:end-19]]\n\
    \    prefix_list = prefix_list ++ [string[1:end-20]]\n    prefix_list = prefix_list\
    \ ++ [string[1:end-21]]\n    prefix_list = prefix_list ++ [string[1:end-22]]\n\
    \    prefix_list = prefix_list ++ [string[1:end-23]]\n    prefix_list = prefix_list\
    \ ++ [string[1:end-24]]\n    prefix_list = prefix_list ++ [string[1:end-25]]\n\
    \    prefix_list = prefix_list ++ [string[1:end-26]]\n    prefix_list = prefix_list\
    \ ++ [string[1:end-27]]\n    prefix_list = prefix_list ++ [string[1:end-28]]\n\
    \    prefix_list = prefix_list ++ [string[1:end-29]]\n    prefix_list = prefix_list\
    \ ++ [string[1:end-30]]\n    prefix_list = prefix_list ++ [string[1:end-31]]\n\
    \    prefix_list = prefix_list ++ [string[1:end-32]]\n    prefix_list = prefix_list\
    \ ++ [string[1:end-33]]\n    prefix_list = prefix_list ++ [string[1:end-34]]\n\
    \    prefix_list = prefix_list ++ [string[1:end-35]]\n    prefix_list = prefix_list\
    \ ++ [string[1:end-36]]\n    prefix_list = prefix_list ++ [string[1:end-37]]\n\
    \    prefix_list = prefix_list ++ [string[1:\nusing Test\n\n@testset begin\n\n\
    candidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpijpmw4dw.jl:46\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpijpmw4dw.jl:46\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    \n    prefix_list = Vector{String}()\n\
    \    prefix_list = prefix_list + all_prefixes(string[1:end-1]) + [string[1:end-1]]\n\
    \    return prefix_list\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abc\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and\
    \ returns the longest prefix that is a palindrome. For example, given the string\
    \ \"racecar\", the longest palindrome would be \"racecar\".\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpovm21tv1.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpovm21tv1.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    \n    prefixes = Vector{String}()\n\
    \    \n    for c in string\n        prefixes += all_prefixes(c)\n    end\n   \
    \ \n    return prefixes\nend\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"\
    abc\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and\
    \ returns the longest prefix that is a substring of the input string. For example,\
    \ all_prefixes(\"abcabc\") should return \"abc\".\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpzhm1q209.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpzhm1q209.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = Vector{String}()\n\
    \    prefix_length = 0\n    for c in string\n        if prefix_length == 0 \n\
    \            prefixes << c\n        elseif prefix_length == length(string)\n \
    \           prefixes << c\n        else\n            prefixes << c << prefixes[prefix_length]\n\
    \        end\n        prefix_length += 1\n    end\n    return prefixes\nend\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns the longest prefix that\
    \ is a substring of the input string. For example, all_prefixes(\"abcabc\") should\
    \ return \"abc\".\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9eg9ygdy.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp9eg9ygdy.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    for prefix in string.split(\"\")\n        prefix_list += all_prefixes(prefix)\
    \ \n    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abc\")\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp5htzdj26.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp5htzdj26.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    prefix_list[2] = string\n    prefix_list[3]\
    \ = string\n    \n    for i = 4 to length(prefix_list)\n        prefix_list[i]\
    \ = prefix_list[i-2] + prefix_list[i-1]\n    end\n    \n    return prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the longest prefix of a given string.\n\
    using Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"length\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp6s20_r3c.jl:12\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp6s20_r3c.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    for prefix in string.split(\"\")\n        prefix_list += all_prefixes(prefix)\
    \ \n    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abc\")\n</cell>\n<text>\nExercise 4\nWrite a function that takes a string and\
    \ returns the longest prefix that is a substring of the input string. For example,\
    \ all_prefixes(\"abcabc\") should return \"abc\".\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmos2tx6r.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpmos2tx6r.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[1:end-1]) \n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end-1:end])\n    return prefix_list\nend\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the longest prefix of a given string.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\"\
    ) == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmh3fmm9i.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpmh3fmm9i.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i = 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-1] + string[i]\n    end\n    prefix_list\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\n    prefix_length(string::String)\nusing Test\n\
    \n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp45kbw0ko.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp45kbw0ko.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i = 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-1] + string[i]\n    end\n    return prefix_list\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\"\
    ) == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmph3wmlb3g.jl:18\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  BoundsError: attempt to\
    \ access 0-element Array{String,1} at index [1]\n  Stacktrace:\n   [1] setindex!\
    \ at ./array.jl:826 [inlined]\n   [2] all_prefixes(::String) at /tmp/tmph3wmlb3g.jl:7\n\
    \   [3] top-level scope at /tmp/tmph3wmlb3g.jl:18\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmph3wmlb3g.jl:17\n  \ntest set: Error During\
    \ Test at /tmp/tmph3wmlb3g.jl:19\n  Test threw exception\n  Expression: candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]\n  BoundsError:\
    \ attempt to access 0-element Array{String,1} at index [1]\n  Stacktrace:\n  \
    \ [1] setindex! at ./array.jl:826 [inlined]\n   [2] all_prefixes(::String) at\
    \ /tmp/tmph3wmlb3g.jl:7\n   [3] top-level scope at /tmp/tmph3wmlb3g.jl:19\n  \
    \ [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmph3wmlb3g.jl:17\n  \ntest set: Error During\
    \ Test at /tmp/tmph3wmlb3g.jl:20\n  Test threw exception\n  Expression: candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]\n  BoundsError: attempt to access 0-element\
    \ Array{String,1} at index [1]\n  Stacktrace:\n   [1] setindex! at ./array.jl:826\
    \ [inlined]\n   [2] all_prefixes(::String) at /tmp/tmph3wmlb3g.jl:7\n   [3] top-level\
    \ scope at /tmp/tmph3wmlb3g.jl:20\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmph3wmlb3g.jl:17\n  \nTest Summary: | Error \
    \ Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmph3wmlb3g.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    for prefix in string.split(\"\")\n        prefix_list += all_prefixes(prefix)\
    \ \n    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns the number of times the string \"ab\" appears in the string. \n\
    >>> count_ab(\"abracadabra\")\n2\n>>> count_ab(\"abracadabra\")\n1\n>>> count_ab(\"\
    abracadabra\")\n0\n>>> count_ab(\"abracadabra\")\n0\n>>> count_ab(\"abracadabra\"\
    )\n0\n>>> count_ab(\"abracadabra\")\n0\n>>> count_ab(\"abracadabra\")\n0\n>>>\
    \ count_ab(\"abracadabra\")\n0\n>>> count_ab(\"abracadabra\")\n0\n>>> count_ab(\"\
    abracadabra\")\n0\n>>> count_ab(\"abracadabra\")\n0\n>>> count_ab(\"abracadabra\"\
    )\n0\n>>> count_ab(\"abracadabra\")\n0\n>>> count_ab(\"abracadabra\")\n0\n>>>\
    \ count_ab(\"abracadabra\")\n0\n>>> count_ab(\"abracadabra\")\n0\n>>> count_ab(\"\
    abracadabra\")\n0\n>>> count_ab(\"abracadabra\")\n0\n>>> count_ab(\"abracadabra\"\
    )\n0\n>>> count_ab(\"abracadabra\")\n0\n>>> count_ab(\"abracadabra\")\n0\n>>>\
    \ count_ab(\"abracadabra\")\n0\n>>> count_ab(\"abracadabra\")\n0\n>>> count_ab(\"\
    abracadabra\")\n0\n>>> count_ab(\"abracadabra\")\n0\n>>> count_ab(\"abracadabra\"\
    )\n0\n>>> count_ab(\"abracadabra\")\n0\n>>> count_ab(\"abracadabra\")\n0\n>>>\
    \ count_ab(\"abracadabra\")\n0\n>>> count_ab(\"abracadabra\")\n0\n>>> count_ab(\"\
    abracadabra\")\n0\n>>> count_ab(\"abracadabra\")\n0\n>>> count_ab(\"abracadabra\"\
    )\n0\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpkw3cxoi5.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpkw3cxoi5.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    for prefix in string.split(\"\")\n        prefix_list += all_prefixes(prefix)\
    \ \n    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbac\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbaca\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacac\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacbba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacbbac\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacbbacc\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacbbaccc\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacbbacccb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacbbacccbc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacbbacccbcc\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacbbacccbccc\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacbbacccbcccb\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacacbbacccbcccbc\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacbbacccbcccbcc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacbbacccbcccbccc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacbbacccbcccbcccb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacbbacccbcccbcccb\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpf0tckma4.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpf0tckma4.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i = 2 to length(string)\n        prefix_list[i]\
    \ = prefix_list[i-2] + string[i]\n    end\n    return prefix_list\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\"\
    ) == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"length\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpsyn2w3hc.jl:8\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpsyn2w3hc.jl:8\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i = 2 to length(string)\n        prefix_list[i]\
    \ = prefix_list[i-2] + string[i]\n    end\n    prefix_list\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\n    prefix_count(string::String)::Int64\nusing\
    \ Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\"\
    ) == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"length\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmprk0xqmdh.jl:8\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmprk0xqmdh.jl:8\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i = 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-2] + string[i]\n    end\n    return prefix_list\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\"\
    ) == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp8sza_rvs.jl:18\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  BoundsError: attempt to\
    \ access 0-element Array{String,1} at index [1]\n  Stacktrace:\n   [1] setindex!\
    \ at ./array.jl:826 [inlined]\n   [2] all_prefixes(::String) at /tmp/tmp8sza_rvs.jl:7\n\
    \   [3] top-level scope at /tmp/tmp8sza_rvs.jl:18\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmp8sza_rvs.jl:17\n  \ntest set: Error During\
    \ Test at /tmp/tmp8sza_rvs.jl:19\n  Test threw exception\n  Expression: candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]\n  BoundsError:\
    \ attempt to access 0-element Array{String,1} at index [1]\n  Stacktrace:\n  \
    \ [1] setindex! at ./array.jl:826 [inlined]\n   [2] all_prefixes(::String) at\
    \ /tmp/tmp8sza_rvs.jl:7\n   [3] top-level scope at /tmp/tmp8sza_rvs.jl:19\n  \
    \ [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmp8sza_rvs.jl:17\n  \ntest set: Error During\
    \ Test at /tmp/tmp8sza_rvs.jl:20\n  Test threw exception\n  Expression: candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]\n  BoundsError: attempt to access 0-element\
    \ Array{String,1} at index [1]\n  Stacktrace:\n   [1] setindex! at ./array.jl:826\
    \ [inlined]\n   [2] all_prefixes(::String) at /tmp/tmp8sza_rvs.jl:7\n   [3] top-level\
    \ scope at /tmp/tmp8sza_rvs.jl:20\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmp8sza_rvs.jl:17\n  \nTest Summary: | Error \
    \ Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8sza_rvs.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list = prefix_list + all_prefixes(string[1:end-1]) \n    prefix_list\
    \ = prefix_list + all_prefixes(string[end-1:end])\n    prefix_list = prefix_list\
    \ + all_prefixes(string[end+1:end+2])\n    prefix_list = prefix_list + all_prefixes(string[end+2:end+3])\n\
    \    prefix_list = prefix_list + all_prefixes(string[end+3:end+4])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[end+4:end+5])\n    prefix_list = prefix_list\
    \ + all_prefixes(string[end+5:end+6])\n    prefix_list = prefix_list + all_prefixes(string[end+6:end+7])\n\
    \    prefix_list = prefix_list + all_prefixes(string[end+7:end+8])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[end+8:end+9])\n    prefix_list = prefix_list\
    \ + all_prefixes(string[end+9:end+10])\n    prefix_list = prefix_list + all_prefixes(string[end+10:end+11])\n\
    \    prefix_list = prefix_list + all_prefixes(string[end+11:end+12])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[end+12:end+13])\n    prefix_list = prefix_list\
    \ + all_prefixes(string[end+13:end+14])\n    prefix_list = prefix_list + all_prefixes(string[end+14:end+15])\n\
    \    prefix_list = prefix_list + all_prefixes(string[end+15:end+16])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[end+16:end+17])\n    prefix_list = prefix_list\
    \ + all_prefixes(string[end+17:end+18])\n    prefix_list = prefix_list + all_prefixes(string[end+18:end+19])\n\
    \    prefix_list = prefix_list + all_prefixes(string[end+19:end+20])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[end+20:end+21])\n    prefix_list = prefix_list\
    \ + all_prefixes(string[end+21:end+22])\n    prefix_list = prefix_list + all_prefixes(string[end+22:end+23])\n\
    \    prefix_list = prefix_list + all_prefixes(string[end+23:end+24])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[end+24:end+25])\n    prefix_list = prefix_list\
    \ + all_prefixes(string[end+25:end+26])\n    prefix_\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpodo642gp.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpodo642gp.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpodo642gp.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    for prefix in string.split(\"\")\n        prefix_list += all_prefixes(prefix)\
    \ \n    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbba\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbbba\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbbbba\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbbbbac\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbbbbaca\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbbbbacab\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbbbbacabc\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbbbbacabca\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbbbbacabcab\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbbbbacabcabc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbbbbacabcabca\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbbbbacabcabcab\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbbbbacabcabcabc\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbbbbacabcabcabca\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbbbbacabcabcabcab\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbbbbacabcabcabcabc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbbbbacabcabcabcabca\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbbbbacabcabcabcabcab\"\
    )\n</cell>\n<code language=julia-1.5>\nall_\nusing Test\n\n@testset begin\n\n\
    candidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmptrcegomz.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmptrcegomz.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    prefix_list[2] = string\n    for i = 4 to length(string)\n\
    \        prefix_list[i] = prefix_list[i-2] + string[i]\n    end\n    prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"ab\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abba\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbac\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbca\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbcadef\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbcadefgh\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbcadefghij\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbcadefghijk\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbcadefghijkl\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbcadefghijklm\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbcadefghijklmn\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbcadefghijklmno\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbcadefghijklmnop\")\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abbcadefghijklmnopq\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbcadefghijklmnopqrst\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbcadefghijklmnopqrstu\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbcadefghijklmnopqrstuv\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbcadefghijklmnopqrstuvw\")\n</cell>\n\
    <code language=julia-1.5>\nall_\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"length\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpzcr6sk5g.jl:9\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpzcr6sk5g.jl:9\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i in 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-1] + string[i]\n    end\n    return prefix_list\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpgd6m96rl.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpgd6m96rl.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i = 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-2] + string[i]\n    end\n    return prefix_list\nend\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"ab\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"aba\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abba\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbb\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbbbb\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbbbbb\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbbbbbb\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbbbbbbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbbbbbbbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbbbbbbbbb\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbbbbbbbbbb\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbbbbbbbbbbb\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbbbbbbbbbbbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbbbbbbbbbbbbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbbbbbbbbbbbbbb\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbbbbbbbbbbbbbbb\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbbbbbbbbbbbbbbbb\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbbbbbbbbbbbbbbbbb\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbbbbbbbbbbbbbbbbbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbbbbbbbbbbbbbbbbbbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbbbbbbbbbbbbbbbbbbbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbbbbbbbbbbbbbbbbbbbbb\")\n</cell\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_45q3say.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_45q3say.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    for c in string\n        prefix_list += all_prefixes(c) \n    end\n    prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpnmypsbzv.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpnmypsbzv.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i = 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-2] + string[i]\n    end\n    return prefix_list\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    prefix_length(string::String)\nusing Test\n\
    \n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpcri2rdqi.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpcri2rdqi.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    \n    prefix_list = Vector{String}()\n\
    \    \n    for prefix in string.split(\"\")\n        prefix_list += all_prefixes(prefix)\
    \ \n    end\n    \n    return prefix_list\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpdg2rzhxn.jl:20\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  type String has no field\
    \ split\n  Stacktrace:\n   [1] getproperty(::String, ::Symbol) at ./Base.jl:33\n\
    \   [2] all_prefixes(::String) at /tmp/tmpdg2rzhxn.jl:9\n   [3] top-level scope\
    \ at /tmp/tmpdg2rzhxn.jl:20\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpdg2rzhxn.jl:19\n  \ntest set: Error During\
    \ Test at /tmp/tmpdg2rzhxn.jl:21\n  Test threw exception\n  Expression: candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]\n  type\
    \ String has no field split\n  Stacktrace:\n   [1] getproperty(::String, ::Symbol)\
    \ at ./Base.jl:33\n   [2] all_prefixes(::String) at /tmp/tmpdg2rzhxn.jl:9\n  \
    \ [3] top-level scope at /tmp/tmpdg2rzhxn.jl:21\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpdg2rzhxn.jl:19\n  \ntest set: Error During\
    \ Test at /tmp/tmpdg2rzhxn.jl:22\n  Test threw exception\n  Expression: candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]\n  type String has no field split\n  Stacktrace:\n\
    \   [1] getproperty(::String, ::Symbol) at ./Base.jl:33\n   [2] all_prefixes(::String)\
    \ at /tmp/tmpdg2rzhxn.jl:9\n   [3] top-level scope at /tmp/tmpdg2rzhxn.jl:22\n\
    \   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpdg2rzhxn.jl:19\n  \nTest Summary: | Error \
    \ Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdg2rzhxn.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i = 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-2] + string[i]\n    end\n    return prefix_list\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\"\
    ) == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp79h3atwo.jl:18\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  BoundsError: attempt to\
    \ access 0-element Array{String,1} at index [1]\n  Stacktrace:\n   [1] setindex!\
    \ at ./array.jl:826 [inlined]\n   [2] all_prefixes(::String) at /tmp/tmp79h3atwo.jl:7\n\
    \   [3] top-level scope at /tmp/tmp79h3atwo.jl:18\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmp79h3atwo.jl:17\n  \ntest set: Error During\
    \ Test at /tmp/tmp79h3atwo.jl:19\n  Test threw exception\n  Expression: candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]\n  BoundsError:\
    \ attempt to access 0-element Array{String,1} at index [1]\n  Stacktrace:\n  \
    \ [1] setindex! at ./array.jl:826 [inlined]\n   [2] all_prefixes(::String) at\
    \ /tmp/tmp79h3atwo.jl:7\n   [3] top-level scope at /tmp/tmp79h3atwo.jl:19\n  \
    \ [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmp79h3atwo.jl:17\n  \ntest set: Error During\
    \ Test at /tmp/tmp79h3atwo.jl:20\n  Test threw exception\n  Expression: candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]\n  BoundsError: attempt to access 0-element\
    \ Array{String,1} at index [1]\n  Stacktrace:\n   [1] setindex! at ./array.jl:826\
    \ [inlined]\n   [2] all_prefixes(::String) at /tmp/tmp79h3atwo.jl:7\n   [3] top-level\
    \ scope at /tmp/tmp79h3atwo.jl:20\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmp79h3atwo.jl:17\n  \nTest Summary: | Error \
    \ Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp79h3atwo.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = Vector{String}()\n\
    \    prefixes << string\n    prefixes << string[1:end]\n    prefixes\nend\n</cell>\n\
    <code language=julia-1.5>\n@test all_prefixes(\"abc\") == [\"a\", \"ab\", \"abc\"\
    ]\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of characters in the string. \nWrite a function that takes a string\
    \ and returns the number of words in the string. \nWrite a function that takes\
    \ a string and returns the number of sentences in the string. \nWrite a function\
    \ that takes a string and returns the number of characters in the string that\
    \ are not spaces. \nWrite a function that takes a string and returns the number\
    \ of words in the string that are not spaces. \nWrite a function that takes a\
    \ string and returns the number of sentences in the string that are not spaces.\
    \ \nWrite a function that takes a string and returns the number of characters\
    \ in the string that are not spaces and words. \nWrite a function that takes a\
    \ string and returns the number of words in the string that are not spaces and\
    \ words. \nWrite a function that takes a string and returns the number of sentences\
    \ in the string that are not spaces and words. \nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp1uhm_2e3.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp1uhm_2e3.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i = 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-2] + string[i]\n    end\n    prefix_list\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\n    prefixes_of_string(string::String)\nusing Test\n\
    \n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8j2yubv2.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp8j2yubv2.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i = 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-1] + string[i]\n    end\n    return prefix_list\nend\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a string and returns the number of characters in the\
    \ string that are uppercase letters.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpra97_kre.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpra97_kre.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list = prefix_list + all_prefixes(string[1:end-1]) + [string[1:end-1]]\n\
    \    return prefix_list\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abc\")\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp29trzqox.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp29trzqox.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i in 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-1] + string[i]\n    end\n    prefix_list\nend\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"ab\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"aba\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abba\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbac\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbaca\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacac\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacaca\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacaa\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacaaa\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacaaab\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabb\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbb\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbc\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacaaabbbcc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacaaabbbccc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbccca\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbcccaa\")\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbcccaaa\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbcccaaaa\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacacaaabbbcccaaaab\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacacaaabbbcccaaaabb\")\n</cell>\n<code\
    \ language=julia-\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpouc1htqz.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpouc1htqz.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = Vector{String}()\n\
    \    for s in string\n        prefixes += all_prefixes(s)\n    end\n    prefixes\n\
    end\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    prefixes_from_longest(string::String)::Vector{String}\
    \ \n    Return list of all prefixes from longest to shortest of the input string\n\
    \    >>> prefixes_from_longest('abc')\n    ['abc']\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpy5n77l0u.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpy5n77l0u.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    for prefix in string.split(\"\")\n        prefix_list += all_prefixes(prefix)\
    \ \n    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abc\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string and\
    \ returns the longest prefix that is a substring of the given string. For example,\
    \ all_prefixes(\"abcabc\") should return \"abc\".\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpz1dwq3xd.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpz1dwq3xd.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list = prefix_list + all_prefixes(string[1:end-1]) \n    prefix_list\
    \ = prefix_list + all_prefixes(string[end-1:end])\n    prefix_list = prefix_list\
    \ + all_prefixes(string[end:])\n    return prefix_list\nend\n</cell>\n<code language=julia-1.4>\n\
    using Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"end:\" range expression\
    \ \nStacktrace:\n [1] top-level scope at /tmp/tmp0x3ec85s.jl:9\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp0x3ec85s.jl:9\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i = 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-2] + string[i]\n    end\n    return prefix_list\nend\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a string and returns the longest prefix that is a\
    \ substring of the input string. For example, all_prefixes('abc') returns ['abc',\
    \ 'ab', 'a'].\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpopgaibhr.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpopgaibhr.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = Vector{String}()\n\
    \    for c in string\n        prefixes += all_prefixes(c)\n    end\n    prefixes\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpaq_6t9_x.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpaq_6t9_x.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i = 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-1] + string[i]\n    end\n    prefix_list\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@time all_prefixes(\"abc\")\n</cell>\n<code language=julia-1.5>\n\
    @time all_prefixes(\"abc\")\n</cell>\n<code language=julia-1.5>\n@time all_prefixes(\"\
    abc\")\n</cell>\n<code language=julia-1.5>\n@time all_prefixes(\"abc\")\n</cell>\n\
    <code language=julia-1.5>\n@time all_prefixes(\"abc\")\n</cell>\n<code language=julia-1.5>\n\
    @time all_prefixes(\"abc\")\n</cell>\n<code language=julia-1.5>\n@time all_prefixes(\"\
    abc\")\n</cell>\n<code language=julia-1.5>\n@time all_prefixes(\"abc\")\n</cell>\n\
    <code language=julia-1.5>\n@time all_prefixes(\"abc\")\n</cell>\n<code language=julia-1.5>\n\
    @time all_prefixes(\"abc\")\n</cell>\n<code language=julia-1.5>\n@time all_prefixes(\"\
    abc\")\n</cell>\n<code language=julia-1.5>\n@time all_prefixes(\"abc\")\n</cell>\n\
    <code language=julia-1.5>\n@time all_prefixes(\"abc\")\n</cell>\n<code language=julia-1.5>\n\
    @time all_prefixes(\"abc\")\n</cell>\n<code language=julia-1.5>\n@time all_prefixes(\"\
    abc\")\n</cell>\n<code language=julia-1.5>\n@time all_prefixes(\"abc\")\n</cell>\n\
    <code language=julia-1.5>\n@time all_prefixes(\"abc\")\n</cell>\n<code language=julia-1.5>\n\
    @time all_prefixes(\"abc\")\n</cell>\n<code language=julia-1.5>\n@time all_prefixes(\"\
    abc\")\n</cell>\n<code language=julia-1.5>\n@time all_prefixes(\"abc\")\n</cell>\n\
    <code language=julia-1.5>\n@time all_prefixes(\"abc\")\n</cell>\n<code language=julia-1.5>\n\
    @time all_prefixes(\"abc\")\n</cell>\n<code language=julia-1.5>\n@time all_prefixes(\"\
    abc\")\n</cell>\n<code language=julia-1.5>\n@time all_prefixes(\"abc\")\n</cell>\n\
    <code language=julia-1.5>\n@time all_prefixes(\"\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpkga9w0zo.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpkga9w0zo.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i = 2 to length(prefix_list)\n        prefix_list[i]\
    \ = prefix_list[i-2] + prefix_list[i-1]\n    end\n    return prefix_list\nend\n\
    using Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"length\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpojfwtuzt.jl:8\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpojfwtuzt.jl:8\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    for prefix in string.split(\"\")\n        prefix_list += prefixes_of(prefix)\n\
    \    return prefix_list\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpna37li95.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpna37li95.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpna37li95.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    for s in string\n        prefix_list = [prefix_list..s]\n    end\n    prefix_list\n\
    end\n</cell>\n<code language=julia-1.0>\nall_prefixes(\"abc\")\n</cell>\n<code\
    \ language=julia-1.0>\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp21v5t774.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp21v5t774.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    prefix_list[2] = string\n    \n    for i = 3:length(string)\n\
    \        prefix_list[i] = prefix_list[i-2] + string[i]\n    end\n    \n    return\
    \ prefix_list\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpdbth28le.jl:22\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  BoundsError: attempt to\
    \ access 0-element Array{String,1} at index [1]\n  Stacktrace:\n   [1] setindex!\
    \ at ./array.jl:826 [inlined]\n   [2] all_prefixes(::String) at /tmp/tmpdbth28le.jl:8\n\
    \   [3] top-level scope at /tmp/tmpdbth28le.jl:22\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpdbth28le.jl:21\n  \ntest set: Error During\
    \ Test at /tmp/tmpdbth28le.jl:23\n  Test threw exception\n  Expression: candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]\n  BoundsError:\
    \ attempt to access 0-element Array{String,1} at index [1]\n  Stacktrace:\n  \
    \ [1] setindex! at ./array.jl:826 [inlined]\n   [2] all_prefixes(::String) at\
    \ /tmp/tmpdbth28le.jl:8\n   [3] top-level scope at /tmp/tmpdbth28le.jl:23\n  \
    \ [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpdbth28le.jl:21\n  \ntest set: Error During\
    \ Test at /tmp/tmpdbth28le.jl:24\n  Test threw exception\n  Expression: candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]\n  BoundsError: attempt to access 0-element\
    \ Array{String,1} at index [1]\n  Stacktrace:\n   [1] setindex! at ./array.jl:826\
    \ [inlined]\n   [2] all_prefixes(::String) at /tmp/tmpdbth28le.jl:8\n   [3] top-level\
    \ scope at /tmp/tmpdbth28le.jl:24\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpdbth28le.jl:21\n  \nTest Summary: | Error \
    \ Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdbth28le.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    \n    prefixes = Vector{String}()\n\
    \    \n    for c in string\n        prefixes += all_prefixes(c) + [c]\n    end\n\
    \    \n    return prefixes\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abc\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and\
    \ returns the longest prefix that is a substring of the input string. For example,\
    \ all_prefixes(\"abcabc\") should return [\"abc\"].\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpkfxgk4da.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpkfxgk4da.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    for prefix in string.split(\"\")\n        prefix_list += prefixes_of(prefix)\n\
    \    return prefix_list\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpaep160ws.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpaep160ws.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpaep160ws.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    for prefix in string.split(\"\")\n        prefix_list += prefixes_of_prefix(prefix)\n\
    \    return prefix_list\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpvvih_7dy.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpvvih_7dy.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpvvih_7dy.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list = prefix_list ++ [string]\n    prefix_list = prefix_list ++ all_prefixes(string[1:end])\n\
    \    return prefix_list\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbac\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbaca\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacac\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacbba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacbbac\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacbbaca\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacbbacac\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacbbacacb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacbbacacbba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacbbacacbbac\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacbbacacbbaca\")\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacbbacacbbacac\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacbbacacbbacacb\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacacbbacacbbacacbba\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacacbbacacbbacacbbac\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacacbbacacbbacacbbaca\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abba\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmprz_0p2f7.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmprz_0p2f7.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i in 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-1] + string[i]\n    end\n    prefix_list\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\n    prefix_counts(string::String)\nusing Test\n\
    \n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpjiv6fepv.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpjiv6fepv.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i in 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-1] + string[i]\n    end\n    prefix_list\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\n    prefix_lengths(string::String)\nusing Test\n\
    \n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_unpy7yx.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_unpy7yx.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    prefix_list[2] = string[1:end-1]\n    prefix_list[3]\
    \ = string[2:end]\n    \n    return prefix_list\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp23_gi55d.jl:19\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  BoundsError: attempt to\
    \ access 0-element Array{String,1} at index [1]\n  Stacktrace:\n   [1] setindex!\
    \ at ./array.jl:826 [inlined]\n   [2] all_prefixes(::String) at /tmp/tmp23_gi55d.jl:8\n\
    \   [3] top-level scope at /tmp/tmp23_gi55d.jl:19\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmp23_gi55d.jl:18\n  \ntest set: Error During\
    \ Test at /tmp/tmp23_gi55d.jl:20\n  Test threw exception\n  Expression: candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]\n  BoundsError:\
    \ attempt to access 0-element Array{String,1} at index [1]\n  Stacktrace:\n  \
    \ [1] setindex! at ./array.jl:826 [inlined]\n   [2] all_prefixes(::String) at\
    \ /tmp/tmp23_gi55d.jl:8\n   [3] top-level scope at /tmp/tmp23_gi55d.jl:20\n  \
    \ [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmp23_gi55d.jl:18\n  \ntest set: Error During\
    \ Test at /tmp/tmp23_gi55d.jl:21\n  Test threw exception\n  Expression: candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]\n  BoundsError: attempt to access 0-element\
    \ Array{String,1} at index [1]\n  Stacktrace:\n   [1] setindex! at ./array.jl:826\
    \ [inlined]\n   [2] all_prefixes(::String) at /tmp/tmp23_gi55d.jl:8\n   [3] top-level\
    \ scope at /tmp/tmp23_gi55d.jl:21\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmp23_gi55d.jl:18\n  \nTest Summary: | Error \
    \ Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp23_gi55d.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    for prefix in string.split(\"\")\n        prefix_list += all_prefixes(prefix)\
    \ \n    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    ab\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"aba\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbac\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbaca\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacac\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacacb\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacbba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacbbac\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacbbacc\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacbbaccc\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacbbacccb\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacbbacccbc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacbbacccbca\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacbbacccbcaa\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacbbacccbcaab\")\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacbbacccbcaaba\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacbbacccbcaabac\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacacbbacccbcaabaca\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacacbbacccbcaabacab\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacacbbacccbcaabacaba\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"ab\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp67l8hs4b.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp67l8hs4b.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    \n    prefix_list = Vector{String}()\n\
    \    prefix_list = prefix_list + all_prefixes(string[1:end-1]) + [string[1:end-1]]\n\
    \    \n    return prefix_list\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpgacnwu81.jl:17\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] Array at ./boot.jl:405 [inlined]\n   [2] Array at ./boot.jl:424\
    \ [inlined]\n   [3] all_prefixes(::String) at /tmp/tmpgacnwu81.jl:7\n   [4] all_prefixes(::String)\
    \ at /tmp/tmpgacnwu81.jl:8 (repeats 52319 times)\n   [5] top-level scope at /tmp/tmpgacnwu81.jl:17\n\
    \   [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmpgacnwu81.jl:16\n  \ntest set: Error During\
    \ Test at /tmp/tmpgacnwu81.jl:18\n  Test threw exception\n  Expression: candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] Array at ./boot.jl:405 [inlined]\n   [2] Array at ./boot.jl:424\
    \ [inlined]\n   [3] all_prefixes(::String) at /tmp/tmpgacnwu81.jl:7\n   [4] all_prefixes(::String)\
    \ at /tmp/tmpgacnwu81.jl:8 (repeats 52319 times)\n   [5] top-level scope at /tmp/tmpgacnwu81.jl:18\n\
    \   [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmpgacnwu81.jl:16\n  \ntest set: Error During\
    \ Test at /tmp/tmpgacnwu81.jl:19\n  Test threw exception\n  Expression: candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]\n  StackOverflowError:\n  Stacktrace:\n   [1]\
    \ Array at ./boot.jl:405 [inlined]\n   [2] Array at ./boot.jl:424 [inlined]\n\
    \   [3] all_prefixes(::String) at /tmp/tmpgacnwu81.jl:7\n   [4] all_prefixes(::String)\
    \ at /tmp/tmpgacnwu81.jl:8 (repeats 52319 times)\n   [5] top-level scope at /tmp/tmpgacnwu81.jl:19\n\
    \   [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmpgacnwu81.jl:16\n  \nTest Summary: | Error \
    \ Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgacnwu81.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    prefix_list[2] = string\n    prefix_list[3]\
    \ = string\n    prefix_list[4] = string\n    prefix_list[5] = string\n    prefix_list[6]\
    \ = string\n    prefix_list[7] = string\n    prefix_list[8] = string\n    prefix_list[9]\
    \ = string\n    prefix_list[10] = string\n    prefix_list[11] = string\n    prefix_list[12]\
    \ = string\n    prefix_list[13] = string\n    prefix_list[14] = string\n    prefix_list[15]\
    \ = string\n    prefix_list[16] = string\n    prefix_list[17] = string\n    prefix_list[18]\
    \ = string\n    prefix_list[19] = string\n    prefix_list[20] = string\n    prefix_list[21]\
    \ = string\n    prefix_list[22] = string\n    prefix_list[23] = string\n    prefix_list[24]\
    \ = string\n    prefix_list[25] = string\n    prefix_list[26] = string\n    prefix_list[27]\
    \ = string\n    prefix_list[28] = string\n    prefix_list[29] = string\n    prefix_list[30]\
    \ = string\n    prefix_list[31] = string\n    prefix_list[32] = string\n    prefix_list[33]\
    \ = string\n    prefix_list[34] = string\n    prefix_list[35] = string\n    prefix_list[36]\
    \ = string\n    prefix_list[37] = string\n    prefix_list[38] = string\n    prefix_list[39]\
    \ = string\n    prefix_list[40] = string\n    prefix_list[41] = string\n    prefix_list[42]\
    \ = string\n    prefix_list[43] = string\n    prefix_list[44] = string\n    prefix_list[45]\
    \ = string\n    prefix_list[46] = string\n    prefix_list[47] = string\n    prefix_list[48]\
    \ = string\n    prefix_list[49] = string\n    prefix_list[50] = string\n    prefix_list[51]\
    \ = string\n    prefix_list[52] = string\n    prefix_list[53] = string\n    prefix_list[54]\
    \ = string\n    prefix_list[55] = string\n    prefix_list[56] = string\n    prefix_list[57]\
    \ = string\n    prefix_list[58] = string\n    prefix_list[59] = string\n    prefix_list[60]\
    \ = string\n    prefix_list[61] = string\n    prefix_list[62] = string\n    prefix_list[63]\
    \ = string\n    prefix_list[64] = string\n    prefix_list[65] = string\n    prefix_list[66]\
    \ = string\n    prefix_list[67] = string\n    prefix_list[68] = string\n    prefix_list[69]\
    \ = string\n    prefix_list[70] = string\n    prefix_list[71] = string\n    prefix_list[72]\
    \ = string\n    prefix_\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp1w079fdz.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp1w079fdz.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp1w079fdz.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i = 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-2] + string[i]\n    end\n    prefix_list\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\n    prefix_list_to_string(prefix_list::Vector{String})\n\
    using Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9xc5v6su.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp9xc5v6su.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i = 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-1] + string[i]\n    end\n    return prefix_list\nend\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the longest prefix of a given string.\nusing Test\n\
    \n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpaekzufmh.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpaekzufmh.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i = 2 to length(string)\n        prefix_list[i]\
    \ = prefix_list[i-2] + string[i]\n    end\n    prefix_list\nend\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-\nusing Test\n\n\
    @testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"length\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpbn4wy81m.jl:8\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpbn4wy81m.jl:8\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list = prefix_list + prefixes(string)\n    prefix_list = prefix_list\
    \ + prefixes(string, \"-\")\n    prefix_list = prefix_list + prefixes(string,\
    \ \"_\")\n    prefix_list = prefix_list + prefixes(string, \"-\")\n    prefix_list\
    \ = prefix_list + prefixes(string, \"_\")\n    prefix_list = prefix_list + prefixes(string,\
    \ \"-\")\n    prefix_list = prefix_list + prefixes(string, \"_\")\n    prefix_list\
    \ = prefix_list + prefixes(string, \"-\")\n    prefix_list = prefix_list + prefixes(string,\
    \ \"_\")\n    prefix_list = prefix_list + prefixes(string, \"-\")\n    prefix_list\
    \ = prefix_list + prefixes(string, \"_\")\n    prefix_list = prefix_list + prefixes(string,\
    \ \"-\")\n    prefix_list = prefix_list + prefixes(string, \"_\")\n    prefix_list\
    \ = prefix_list + prefixes(string, \"-\")\n    prefix_list = prefix_list + prefixes(string,\
    \ \"_\")\n    prefix_list = prefix_list + prefixes(string, \"-\")\n    prefix_list\
    \ = prefix_list + prefixes(string, \"_\")\n    prefix_list = prefix_list + prefixes(string,\
    \ \"-\")\n    prefix_list = prefix_list + prefixes(string, \"_\")\n    prefix_list\
    \ = prefix_list + prefixes(string, \"-\")\n    prefix_list = prefix_list + prefixes(string,\
    \ \"_\")\n    prefix_list = prefix_list + prefixes(string, \"-\")\n    prefix_list\
    \ = prefix_list + prefixes(string, \"_\")\n    prefix_list = prefix_list + prefixes(string,\
    \ \"-\")\n    prefix_list = prefix_list + prefixes(string, \"_\")\n    prefix_list\
    \ = prefix_list + prefixes(string, \"-\")\n    prefix_list = prefix_list + prefixes(string,\
    \ \"_\")\n    prefix_list = prefix_list + prefixes(string, \"-\")\n    prefix_list\
    \ = prefix_list + prefixes(string, \"_\")\n    prefix_list = prefix_list + prefixes(string,\
    \ \"-\")\n    prefix_list = prefix_list + prefixes(string, \"_\")\n    prefix_list\
    \ = prefix_list + prefixes(string, \"-\")\n    prefix_list = prefix_list + prefixes(string,\
    \ \"_\")\n    prefix_list = prefix_list + prefixes(string, \"-\")\n    prefix_list\
    \ = prefix_list + prefixes(string, \"_\")\n    prefix_list = prefix_list + prefixes(string,\
    \ \"-\")\n    prefix_list = prefix_list + prefixes(string, \"_\")\n    prefix_list\
    \ = prefix_list + prefixes(string, \"-\")\n    prefix_list = prefix_list + prefixes(string,\
    \ \"_\")\n    prefix_list = prefix_list + prefixes(string, \"-\")\n    prefix_list\
    \ = prefix_list + prefixes(string, \"_\")\n    prefix_list = prefix_list + prefixes(string,\
    \ \"-\")\n\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpj5vyzg4r.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpj5vyzg4r.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpj5vyzg4r.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list = prefix_list + [string[1:i] for i in 1:length(string)]\n   \
    \ prefix_list = prefix_list + [string[i+1::] for i in 1:length(string)]\n    prefix_list\
    \ = prefix_list + [string[i+1::] for i in 1:length(string)]\n    prefix_list =\
    \ prefix_list + [string[i+1::] for i in 1:length(string)]\n    prefix_list = prefix_list\
    \ + [string[i+1::] for i in 1:length(string)]\n    prefix_list = prefix_list +\
    \ [string[i+1::] for i in 1:length(string)]\n    prefix_list = prefix_list + [string[i+1::]\
    \ for i in 1:length(string)]\n    prefix_list = prefix_list + [string[i+1::] for\
    \ i in 1:length(string)]\n    prefix_list = prefix_list + [string[i+1::] for i\
    \ in 1:length(string)]\n    prefix_list = prefix_list + [string[i+1::] for i in\
    \ 1:length(string)]\n    prefix_list = prefix_list + [string[i+1::] for i in 1:length(string)]\n\
    \    prefix_list = prefix_list + [string[i+1::] for i in 1:length(string)]\n \
    \   prefix_list = prefix_list + [string[i+1::] for i in 1:length(string)]\n  \
    \  prefix_list = prefix_list + [string[i+1::] for i in 1:length(string)]\n   \
    \ prefix_list = prefix_list + [string[i+1::] for i in 1:length(string)]\n    prefix_list\
    \ = prefix_list + [string[i+1::] for i in 1:length(string)]\n    prefix_list =\
    \ prefix_list + [string[i+1::] for i in 1:length(string)]\n    prefix_list = prefix_list\
    \ + [string[i+1::] for i in 1:length(string)]\n    prefix_list = prefix_list +\
    \ [string[i+1::] for i in 1:length(string)]\n    prefix_list = prefix_list + [string[i+1::]\
    \ for i in 1:length(string)]\n    prefix_list = prefix_list + [string[i+1::] for\
    \ i in 1:length(string)]\n    prefix_list = prefix_list + [string[i+1::] for i\
    \ in 1:length(string)]\n    prefix_list = prefix_list + [string[i+1::] for i in\
    \ 1:length(string)]\n    prefix_list = prefix_list + [string[i+1::] for i in 1:length(string)]\n\
    \    prefix_list = prefix_list + [string[i+1::] for i in 1:length(string)]\n \
    \   prefix_list = prefix_list + [string[i+1::] for i in 1:length(string)]\n  \
    \  prefix_list = prefix_list + [string[i+1::] for i in 1:length(string)]\n   \
    \ prefix_list = prefix_list + [string[i+1::] for i in 1:length(string)]\n    prefix_list\
    \ = prefix_list + [string[i+1::] for i in 1:length(string)]\n    prefix_list =\
    \ prefix_list + [string[i+1::\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"]\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpu2llbcy8.jl:8\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpu2llbcy8.jl:8\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[1:end-1]) \n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end-1:end])\n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end+1:end+2])\n    prefix_list = prefix_list ++ all_prefixes(string[end+2:end+3])\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[end+3:end+4])\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end+4:end+5])\n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end+5:end+6])\n    prefix_list = prefix_list ++ all_prefixes(string[end+6:end+7])\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[end+7:end+8])\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end+8:end+9])\n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end+9:end+10])\n    prefix_list = prefix_list ++ all_prefixes(string[end+10:end+11])\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[end+11:end+12])\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end+12:end+13])\n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end+13:end+14])\n    prefix_list = prefix_list ++ all_prefixes(string[end+14:end+15])\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[end+15:end+16])\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end+16:end+17])\n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end+17:end+18])\n    prefix_list = prefix_list ++ all_prefixes(string[end+18:end+19])\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[end+19:end+20])\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end+20:end+21])\n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end+21:end+22])\n    prefix_list = prefix_list ++ all_prefixes(string[end+22:end+23])\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[end+23:end+24])\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end+24:end+25])\n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end+25:end+26])\n    prefix_\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpx3wbt5p7.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpx3wbt5p7.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpx3wbt5p7.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    for prefix in string.split(\"\")\n        prefix_list += prefixes_of(prefix)\n\
    \    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns the longest prefix that is a substring of the input string. For\
    \ example, all_prefixes(\"abracadabra\") should return \"abracadabra\".\nusing\
    \ Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\"\
    ) == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpglmz70n6.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpglmz70n6.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i in 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-1] + string[i]\n    end\n    return prefix_list\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    prefix_count(string::String)::Int64\nusing\
    \ Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\"\
    ) == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_81s3373.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_81s3373.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    for prefix in string.split(\"\")\n        prefix_list += prefixes_of(prefix)\n\
    \    return prefix_list\nend\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"\
    abc\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and\
    \ returns the longest prefix that is a substring of the input string. For example,\
    \ all_prefixes(\"abcabc\") should return \"abc\".\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpil2sfzir.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpil2sfzir.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[1:end-1]) \n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end-1:end])\n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end:])\n    return prefix_list\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"end:\" range expression\
    \ \nStacktrace:\n [1] top-level scope at /tmp/tmpmn17mq4v.jl:9\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpmn17mq4v.jl:9\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list = prefix_list ++ [string]\n    prefix_list = prefix_list ++ all_prefixes(string[1:end-1])\
    \ \n    return prefix_list\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"a\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abba\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbab\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbaba\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbabab\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbababa\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbababaa\")\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abbababaaa\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbababaaab\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbababaaabb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbababaaabbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbababaaabbbb\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbababaaabbbbc\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbababaaabbbbcc\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbababaaabbbbccc\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbababaaabbbbcccc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbababaaabbbbccccc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbababaaabbbbcccccc\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbababaaabbbbccccccc\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbababaa\nusing Test\n\n\
    @testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpg9hze0lu.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpg9hze0lu.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    \n    prefixes = Vector{String}()\n\
    \    \n    for char in string\n        prefixes += all_prefixes(char) \n    end\n\
    \    \n    return prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpdga96x_h.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"]\n  MethodError: no method matching all_prefixes(::Char)\n\
    \  Closest candidates are:\n    all_prefixes(!Matched::String) at /tmp/tmpdga96x_h.jl:7\n\
    \  Stacktrace:\n   [1] all_prefixes(::String) at /tmp/tmpdga96x_h.jl:10\n   [2]\
    \ top-level scope at /tmp/tmpdga96x_h.jl:21\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpdga96x_h.jl:19\n  \ntest set: Error During\
    \ Test at /tmp/tmpdga96x_h.jl:22\n  Test threw exception\n  Expression: candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]\n  MethodError: no method matching all_prefixes(::Char)\n\
    \  Closest candidates are:\n    all_prefixes(!Matched::String) at /tmp/tmpdga96x_h.jl:7\n\
    \  Stacktrace:\n   [1] all_prefixes(::String) at /tmp/tmpdga96x_h.jl:10\n   [2]\
    \ top-level scope at /tmp/tmpdga96x_h.jl:22\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpdga96x_h.jl:19\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    1      2      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdga96x_h.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i = 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-1] + string[i]\n    end\n    prefix_list\nend\n</cell>\n<code\
    \ language=julia-1.4>\nall_prefixes(\"abc\")\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a string and returns the number of characters in the string.\
    \ \nWrite a function that takes a string and returns the number of words in the\
    \ string. \nWrite a function that takes a string and returns the number of sentences\
    \ in the string. \nWrite a function that takes a string and returns the number\
    \ of characters in the string that are capitalized. \nWrite a function that takes\
    \ a string and returns the number of words in the string that are capitalized.\
    \ \nWrite a function that takes a string and returns the number of sentences in\
    \ the string that are capitalized. \nWrite a function that takes a string and\
    \ returns the number of characters in the string that are all uppercase. \nWrite\
    \ a function that takes a string and returns the number of words in the string\
    \ that are all uppercase. \nWrite a function that takes a string and returns the\
    \ number of sentences in the string that are all uppercase. \nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp5p6ja7tc.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp5p6ja7tc.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    for prefix in string.split(\"\")\n        prefix_list += all_prefixes(prefix)\
    \ \n    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpc0iig356.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpc0iig356.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    prefix_length\
    \ = 0\n    for c in string\n        if prefix_length == 0 \n            prefixes\
    \ += [c]\n        elseif prefix_length < length(c)\n            prefixes += [c]\n\
    \        else\n            prefixes += [c(prefix_length)]\n            prefix_length\
    \ = 0\n        end\n    end\n    return prefixes\nend\n</cell>\n<code language=julia-1.3>\n\
    all_prefixes(\"abc\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns the longest prefix that is a substring of the input string.\
    \ \nFor example, for the string \"abcde\", the longest prefix is \"abc\", since\
    \ \"abcde\" is a substring of \"abc\".\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2k6g9f58.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp2k6g9f58.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    for prefix in string.split(\"\")\n        prefix_list += prefixes_of(prefix)\n\
    \    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracadabra\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abracad\nusing Test\n\n\
    @testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_v9aqgbd.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_v9aqgbd.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i = 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-2] + string[i]\n    end\n    prefix_list\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@test all_prefixes(\"abc\") == [\"a\", \"ab\", \"abc\"\
    ]\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the longest prefix that is a substring of the string. For example, all_prefixes(\"\
    abcabc\") should return [\"a\", \"ab\", \"abc\"].\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpsy6e84_k.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpsy6e84_k.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    \n    prefix_list = Vector{String}()\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpq318pj8r.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpq318pj8r.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpq318pj8r.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    for s in string\n        prefix_list += all_prefixes(s)\n    end\n    prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbac\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbaca\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacac\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacaca\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacaa\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaa\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaab\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacaaabb\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacaaabbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacaaabbbc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbcc\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbccd\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbccdc\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacacaaabbbccdce\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacaaabbbccdcef\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacaaabbbccdcefg\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbccdcefgj\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbccdcefgjh\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbccdcefgjhig\n\
    using Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9dtmbr9i.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp9dtmbr9i.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    for s in string\n        prefix_list += all_prefixes(s)\n    end\n    prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpun1h6216.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpun1h6216.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i = 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-1] + string[i]\n    end\n    prefix_list\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpp0xu0075.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpp0xu0075.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i = 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-2] + string[i]\n    end\n    return prefix_list\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\"\
    ) == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmplxt83b6q.jl:18\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  BoundsError: attempt to\
    \ access 0-element Array{String,1} at index [1]\n  Stacktrace:\n   [1] setindex!\
    \ at ./array.jl:826 [inlined]\n   [2] all_prefixes(::String) at /tmp/tmplxt83b6q.jl:7\n\
    \   [3] top-level scope at /tmp/tmplxt83b6q.jl:18\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmplxt83b6q.jl:17\n  \ntest set: Error During\
    \ Test at /tmp/tmplxt83b6q.jl:19\n  Test threw exception\n  Expression: candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]\n  BoundsError:\
    \ attempt to access 0-element Array{String,1} at index [1]\n  Stacktrace:\n  \
    \ [1] setindex! at ./array.jl:826 [inlined]\n   [2] all_prefixes(::String) at\
    \ /tmp/tmplxt83b6q.jl:7\n   [3] top-level scope at /tmp/tmplxt83b6q.jl:19\n  \
    \ [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmplxt83b6q.jl:17\n  \ntest set: Error During\
    \ Test at /tmp/tmplxt83b6q.jl:20\n  Test threw exception\n  Expression: candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]\n  BoundsError: attempt to access 0-element\
    \ Array{String,1} at index [1]\n  Stacktrace:\n   [1] setindex! at ./array.jl:826\
    \ [inlined]\n   [2] all_prefixes(::String) at /tmp/tmplxt83b6q.jl:7\n   [3] top-level\
    \ scope at /tmp/tmplxt83b6q.jl:20\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmplxt83b6q.jl:17\n  \nTest Summary: | Error \
    \ Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplxt83b6q.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i = 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-1] + string[i]\n    end\n    return prefix_list\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpo45l56hy.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpo45l56hy.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[1:end-1]) \n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end+1:end-1]) \n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end+1:end]) \n    prefix_list = prefix_list ++ all_prefixes(string[1:end])\
    \ \n    return prefix_list\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abc\")\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2qqycb57.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp2qqycb57.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[1:end-1]) \n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end-1:end])\n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end-1:end-1])\n    return prefix_list\nend\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a string and returns the longest prefix that is a\
    \ substring of the input string. For example, all_prefixes(\"abcabc\") should\
    \ return \"abc\".\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpfohtzcmo.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpfohtzcmo.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for c\
    \ in string\n        prefixes += all_prefixes(c)\n    end\n    prefixes\nend\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns the longest prefix that\
    \ is a substring of the input string. For example, all_prefixes(\"abcabc\") should\
    \ return [\"abc\"].\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpj00iv330.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpj00iv330.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[1:end-1]) \n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end+1:end-1])\n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end+1:end-1])\n    return prefix_list\nend\n</cell>\n\
    <code language=julia-1.3>\nall_prefixes(\"abc\")\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a string and returns the number of times the string\
    \ \"ab\" appears in the string. \n>>> count_ab(\"abcabcbb\")\n2\n>>> count_ab(\"\
    a\")\n1\n>>> count_ab(\"ab\")\n1\n>>> count_ab(\"aba\")\n0\n>>> count_ab(\"abba\"\
    )\n1\n>>> count_ab(\"abbaab\")\n2\n>>> count_ab(\"abbaaba\")\n3\n>>> count_ab(\"\
    abbaabaa\")\n4\n>>> count_ab(\"abbaabaaab\")\n5\n>>> count_ab(\"abbaabaaabb\"\
    )\n5\n>>> count_ab(\"abbaabaaabbb\")\n5\n>>> count_ab(\"abbaabaaabbbb\")\n5\n\
    >>> count_ab(\"abbaabaaabbbbba\")\n5\n>>> count_ab(\"abbaabaaabbbbbaab\")\n5\n\
    >>> count_ab(\"abbaabaaabbbbbaaba\")\n5\n>>> count_ab(\"abbaabaaabbbbbaabaa\"\
    )\n5\n>>> count_ab(\"abbaabaaabbbbbaabaaa\")\n5\n>>> count_ab(\"abbaabaaabbbbbaabaaaa\"\
    )\n5\n>>> count_ab(\"abbaabaaabbbbbaabaaaaa\")\n5\n>>> count_ab(\"abbaabaaabbbbbaabaaaaaa\"\
    )\n5\n>>> count_ab(\"abbaabaaabbbbbaabaaaaaaa\")\n5\n>>> count_ab(\"abbaabaaabbbbbaabaaaaaaab\"\
    )\n5\n>>> count_ab(\"abbaabaaabbbbbaabaaaaaaaba\")\n5\n>>> count_ab(\"abbaabaaabbbbbaabaaaaaaabaa\"\
    )\n5\n>>> count_ab(\"abbaabaaabbbbbaabaaaaaaabaaa\")\n5\n>>> count_ab(\"abbaabaaabbbbbaabaaaaaaabaaaa\"\
    )\n5\n>>> count_ab\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9x9z30wf.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp9x9z30wf.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    prefix_list[2] = string\n    for i = 3:length(string)\n\
    \        prefix_list[i] = prefix_list[i-2] + string[i]\n    end\n    return prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpysc4z3c0.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpysc4z3c0.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    \n    for i = 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-2] + string[i]\n    end\n    \n    return prefix_list\nend\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpqwnv4pcs.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpqwnv4pcs.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i in 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-2] + string[i]\n    end\n    prefix_list\nend\n</cell>\n<code\
    \ language=julia-1.3>\n\"\"\"\n    prefix_count(string::String)::Int64\nusing\
    \ Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\"\
    ) == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpzk968w_t.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpzk968w_t.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list = prefix_list + all_prefixes(string[1:end-1]) + [string[1:end-1]]\n\
    \    return prefix_list\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpchcmi478.jl:15\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] Array at ./boot.jl:405 [inlined]\n   [2] Array at ./boot.jl:424\
    \ [inlined]\n   [3] all_prefixes(::String) at /tmp/tmpchcmi478.jl:6\n   [4] all_prefixes(::String)\
    \ at /tmp/tmpchcmi478.jl:7 (repeats 52308 times)\n   [5] top-level scope at /tmp/tmpchcmi478.jl:15\n\
    \   [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmpchcmi478.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpchcmi478.jl:16\n  Test threw exception\n  Expression: candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] Array at ./boot.jl:405 [inlined]\n   [2] Array at ./boot.jl:424\
    \ [inlined]\n   [3] all_prefixes(::String) at /tmp/tmpchcmi478.jl:6\n   [4] all_prefixes(::String)\
    \ at /tmp/tmpchcmi478.jl:7 (repeats 52308 times)\n   [5] top-level scope at /tmp/tmpchcmi478.jl:16\n\
    \   [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmpchcmi478.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpchcmi478.jl:17\n  Test threw exception\n  Expression: candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]\n  StackOverflowError:\n  Stacktrace:\n   [1]\
    \ Array at ./boot.jl:405 [inlined]\n   [2] Array at ./boot.jl:424 [inlined]\n\
    \   [3] all_prefixes(::String) at /tmp/tmpchcmi478.jl:6\n   [4] all_prefixes(::String)\
    \ at /tmp/tmpchcmi478.jl:7 (repeats 52308 times)\n   [5] top-level scope at /tmp/tmpchcmi478.jl:17\n\
    \   [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmpchcmi478.jl:14\n  \nTest Summary: | Error \
    \ Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpchcmi478.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    for prefix in string.split(\"\")\n        prefix_list += prefixes_of(prefix)\n\
    \    end\n    prefix_list\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpw6zux_hr.jl:17\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  type String has no field\
    \ split\n  Stacktrace:\n   [1] getproperty(::String, ::Symbol) at ./Base.jl:33\n\
    \   [2] all_prefixes(::String) at /tmp/tmpw6zux_hr.jl:7\n   [3] top-level scope\
    \ at /tmp/tmpw6zux_hr.jl:17\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpw6zux_hr.jl:16\n  \ntest set: Error During\
    \ Test at /tmp/tmpw6zux_hr.jl:18\n  Test threw exception\n  Expression: candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]\n  type\
    \ String has no field split\n  Stacktrace:\n   [1] getproperty(::String, ::Symbol)\
    \ at ./Base.jl:33\n   [2] all_prefixes(::String) at /tmp/tmpw6zux_hr.jl:7\n  \
    \ [3] top-level scope at /tmp/tmpw6zux_hr.jl:18\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpw6zux_hr.jl:16\n  \ntest set: Error During\
    \ Test at /tmp/tmpw6zux_hr.jl:19\n  Test threw exception\n  Expression: candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]\n  type String has no field split\n  Stacktrace:\n\
    \   [1] getproperty(::String, ::Symbol) at ./Base.jl:33\n   [2] all_prefixes(::String)\
    \ at /tmp/tmpw6zux_hr.jl:7\n   [3] top-level scope at /tmp/tmpw6zux_hr.jl:19\n\
    \   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpw6zux_hr.jl:16\n  \nTest Summary: | Error \
    \ Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpw6zux_hr.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    prefix_list[2] = string\n    prefix_list[3]\
    \ = string\n    prefix_list[4] = string\n    prefix_list[5] = string\n    prefix_list[6]\
    \ = string\n    prefix_list[7] = string\n    prefix_list[8] = string\n    prefix_list[9]\
    \ = string\n    prefix_list[10] = string\n    prefix_list[11] = string\n    prefix_list[12]\
    \ = string\n    prefix_list[13] = string\n    prefix_list[14] = string\n    prefix_list[15]\
    \ = string\n    prefix_list[16] = string\n    prefix_list[17] = string\n    prefix_list[18]\
    \ = string\n    prefix_list[19] = string\n    prefix_list[20] = string\n    prefix_list[21]\
    \ = string\n    prefix_list[22] = string\n    prefix_list[23] = string\n    prefix_list[24]\
    \ = string\n    prefix_list[25] = string\n    prefix_list[26] = string\n    prefix_list[27]\
    \ = string\n    prefix_list[28] = string\n    prefix_list[29] = string\n    prefix_list[30]\
    \ = string\n    prefix_list[31] = string\n    prefix_list[32] = string\n    prefix_list[33]\
    \ = string\n    prefix_list[34] = string\n    prefix_list[35] = string\n    prefix_list[36]\
    \ = string\n    prefix_list[37] = string\n    prefix_list[38] = string\n    prefix_list[39]\
    \ = string\n    prefix_list[40] = string\n    prefix_list[41] = string\n    prefix_list[42]\
    \ = string\n    prefix_list[43] = string\n    prefix_list[44] = string\n    prefix_list[45]\
    \ = string\n    prefix_list[46] = string\n    prefix_list[47] = string\n    prefix_list[48]\
    \ = string\n    prefix_list[49] = string\n    prefix_list[50] = string\n    prefix_list[51]\
    \ = string\n    prefix_list[52] = string\n    prefix_list[53] = string\n    prefix_list[54]\
    \ = string\n    prefix_list[55] = string\n    prefix_list[56] = string\n    prefix_list[57]\
    \ = string\n    prefix_list[58] = string\n    prefix_list[59] = string\n    prefix_list[60]\
    \ = string\n    prefix_list[61] = string\n    prefix_list[62] = string\n    prefix_list[63]\
    \ = string\n    prefix_list[64] = string\n    prefix_list[65] = string\n    prefix_list[66]\
    \ = string\n    prefix_list[67] = string\n    prefix_list[68] = string\n    prefix_list[69]\
    \ = string\n    prefix_list[70] = string\n    prefix_list[71] = string\n    prefix_list[72]\
    \ = string\n\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpeaql34bx.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpeaql34bx.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpeaql34bx.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i = 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-1] + string[i]\n    end\n    return prefix_list\nend\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a string and returns the longest prefix that is a\
    \ substring of the input string. For example, all_prefixes(\"abc\") returns [\"\
    a\", \"ab\", \"abc\"]\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp5zpdfrbx.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp5zpdfrbx.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    for prefix in string.split(\"\")\n        prefix_list += all_prefixes(prefix)\
    \ \n    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abc\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and\
    \ returns the longest prefix that is a substring of the input string. For example,\
    \ all_prefixes(\"abcabc\") should return \"abc\".\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpx3nlyv5i.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpx3nlyv5i.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i = 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-2] + string[i]\n    end\n    return prefix_list\nend\n</cell>\n\
    <code language=julia-1.4>\n\"\"\"\n    prefix_length(prefix::String)\nusing Test\n\
    \n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpm7hw7yji.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpm7hw7yji.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list = prefix_list ++ [string]\n    prefix_list = prefix_list ++ all_prefixes(string[1:end-1])\
    \ \n    return prefix_list\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpsfjhhhzl.jl:16\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  UndefVarError: ++ not\
    \ defined\n  Stacktrace:\n   [1] all_prefixes(::String) at /tmp/tmpsfjhhhzl.jl:7\n\
    \   [2] top-level scope at /tmp/tmpsfjhhhzl.jl:16\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpsfjhhhzl.jl:15\n  \ntest set: Error During\
    \ Test at /tmp/tmpsfjhhhzl.jl:17\n  Test threw exception\n  Expression: candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]\n  UndefVarError:\
    \ ++ not defined\n  Stacktrace:\n   [1] all_prefixes(::String) at /tmp/tmpsfjhhhzl.jl:7\n\
    \   [2] top-level scope at /tmp/tmpsfjhhhzl.jl:17\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpsfjhhhzl.jl:15\n  \ntest set: Error During\
    \ Test at /tmp/tmpsfjhhhzl.jl:18\n  Test threw exception\n  Expression: candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]\n  UndefVarError: ++ not defined\n  Stacktrace:\n\
    \   [1] all_prefixes(::String) at /tmp/tmpsfjhhhzl.jl:7\n   [2] top-level scope\
    \ at /tmp/tmpsfjhhhzl.jl:18\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpsfjhhhzl.jl:15\n  \nTest Summary: | Error \
    \ Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsfjhhhzl.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = Vector{String}()\n\
    \    for c in string\n        push!(prefixes, string[1:end-c])\n    end\n    return\
    \ prefixes\nend\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"abc\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the longest\
    \ prefix that is a substring of the original string. For example, all_prefixes(\"\
    abcabc\") should return \"abc\".\nusing Test\n\n@testset begin\n\ncandidate =\
    \ all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpypblq_ed.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpypblq_ed.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    for prefix in string.split(\"\")\n        prefix_list += prefixes_of(prefix)\n\
    \    return prefix_list\nend\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"\
    abc\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string and\
    \ returns the longest prefix that is a substring of the input string. For example,\
    \ all_prefixes(\"abcabc\") should return \"abc\".\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpjjjael4u.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpjjjael4u.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    prefix_list[2] = string\n    prefix_list[3]\
    \ = string\n    prefix_list[4] = string\n    prefix_list[5] = string\n    prefix_list[6]\
    \ = string\n    prefix_list[7] = string\n    prefix_list[8] = string\n    prefix_list[9]\
    \ = string\n    prefix_list[10] = string\n    prefix_list[11] = string\n    prefix_list[12]\
    \ = string\n    prefix_list[13] = string\n    prefix_list[14] = string\n    prefix_list[15]\
    \ = string\n    prefix_list[16] = string\n    prefix_list[17] = string\n    prefix_list[18]\
    \ = string\n    prefix_list[19] = string\n    prefix_list[20] = string\n    prefix_list[21]\
    \ = string\n    prefix_list[22] = string\n    prefix_list[23] = string\n    prefix_list[24]\
    \ = string\n    prefix_list[25] = string\n    prefix_list[26] = string\n    prefix_list[27]\
    \ = string\n    prefix_list[28] = string\n    prefix_list[29] = string\n    prefix_list[30]\
    \ = string\n    prefix_list[31] = string\n    prefix_list[32] = string\n    prefix_list[33]\
    \ = string\n    prefix_list[34] = string\n    prefix_list[35] = string\n    prefix_list[36]\
    \ = string\n    prefix_list[37] = string\n    prefix_list[38] = string\n    prefix_list[39]\
    \ = string\n    prefix_list[40] = string\n    prefix_list[41] = string\n    prefix_list[42]\
    \ = string\n    prefix_list[43] = string\n    prefix_list[44] = string\n    prefix_list[45]\
    \ = string\n    prefix_list[46] = string\n    prefix_list[47] = string\n    prefix_list[48]\
    \ = string\n    prefix_list[49] = string\n    prefix_list[50] = string\n    prefix_list[51]\
    \ = string\n    prefix_list[52] = string\n    prefix_list[53] = string\n    prefix_list[54]\
    \ = string\n    prefix_list[55] = string\n    prefix_list[56] = string\n    prefix_list[57]\
    \ = string\n    prefix_list[58] = string\n    prefix_list[59] = string\n    prefix_list[60]\
    \ = string\n    prefix_list[61] = string\n    prefix_list[62] = string\n    prefix_list[63]\
    \ = string\n    prefix_list[64] = string\n    prefix_list[65] = string\n    prefix_list[66]\
    \ = string\n    prefix_list[67] = string\n    prefix_list[68] = string\n    prefix_list[69]\
    \ = string\n    prefix_list[70] = string\n    prefix_list[71] = string\n    prefix_list[72]\
    \ = string\n\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpdyq8tw7g.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpdyq8tw7g.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpdyq8tw7g.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list = prefix_list + prefixes(string)\n    prefix_list = prefix_list\
    \ + prefixes(string.reverse)\n    prefix_list = prefix_list + prefixes(string.reverse.substring(1,\
    \ length(string)))\n    prefix_list = prefix_list + prefixes(string.reverse.substring(1,\
    \ length(string)-1))\n    prefix_list = prefix_list + prefixes(string.reverse.substring(1,\
    \ length(string)-2))\n    prefix_list = prefix_list + prefixes(string.reverse.substring(1,\
    \ length(string)-3))\n    prefix_list = prefix_list + prefixes(string.reverse.substring(1,\
    \ length(string)-4))\n    prefix_list = prefix_list + prefixes(string.reverse.substring(1,\
    \ length(string)-5))\n    prefix_list = prefix_list + prefixes(string.reverse.substring(1,\
    \ length(string)-6))\n    prefix_list = prefix_list + prefixes(string.reverse.substring(1,\
    \ length(string)-7))\n    prefix_list = prefix_list + prefixes(string.reverse.substring(1,\
    \ length(string)-8))\n    prefix_list = prefix_list + prefixes(string.reverse.substring(1,\
    \ length(string)-9))\n    prefix_list = prefix_list + prefixes(string.reverse.substring(1,\
    \ length(string)-10))\n    prefix_list = prefix_list + prefixes(string.reverse.substring(1,\
    \ length(string)-11))\n    prefix_list = prefix_list + prefixes(string.reverse.substring(1,\
    \ length(string)-12))\n    prefix_list = prefix_list + prefixes(string.reverse.substring(1,\
    \ length(string)-13))\n    prefix_list = prefix_list + prefixes(string.reverse.substring(1,\
    \ length(string)-14))\n    prefix_list = prefix_list + prefixes(string.reverse.substring(1,\
    \ length(string)-15))\n    prefix_list = prefix_list + prefixes(string.reverse.substring(1,\
    \ length(string)-16))\n    prefix_list = prefix_list + prefixes(string.reverse.substring(1,\
    \ length(string)-17))\n    prefix_list = prefix_list + prefixes(string.reverse.substring(1,\
    \ length(string)-18))\n    prefix_list = prefix_list + prefixes(string.reverse.substring(1,\
    \ length(string)-19))\n    prefix_list = prefix_list + prefixes(string.reverse.substring(1,\
    \ length(string)-20))\n    prefix_list = prefix_list + prefixes(string.reverse.substring(1,\
    \ length(string)-21))\n    prefix_list = prefix_list + prefixes(string.reverse.substring(1,\
    \ length(string)-22))\n    prefix_list = prefix_list + prefixes(string.reverse.substring(1,\
    \ length(string)-23))\n    prefix_list = prefix_list + prefixes(string.reverse.substring(1,\
    \ length(string)-24))\n    prefix_list = prefix_list + \nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp6zb0rmfq.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp6zb0rmfq.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp6zb0rmfq.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i in 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-1] + string[i]\n    end\n    prefix_list\nend\n</cell>\n<code\
    \ language=julia-1.3>\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9b7ft_2y.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp9b7ft_2y.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i = 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-2] + string[i]\n    end\n    return prefix_list\nend\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a string and returns the longest prefix that is a\
    \ substring of the input string. For example, for the input string \"abc\", the\
    \ longest prefix is \"abc\".\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpk2ssur4g.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpk2ssur4g.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i = 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-2] + string[i]\n    end\n    prefix_list\nend\n</cell>\n<code\
    \ language=julia-1.3>\n\"\"\"\n    prefix_length(string::String)\nusing Test\n\
    \n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp1ghjkakk.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp1ghjkakk.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    for prefix in string.split(\"\")\n        prefix_list += all_prefixes(prefix)\
    \ \n    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"\
    ab\")\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"aba\")\n</cell>\n<code\
    \ language=julia-1.4>\nall_prefixes(\"abba\")\n</cell>\n<code language=julia-1.4>\n\
    all_prefixes(\"abbac\")\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"abbaca\"\
    )\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"abbacac\")\n</cell>\n<code\
    \ language=julia-1.4>\nall_prefixes(\"abbacaca\")\n</cell>\n<code language=julia-1.4>\n\
    all_prefixes(\"abbacacaa\")\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"\
    abbacacaaa\")\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"abbacacaaab\"\
    )\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"abbacacaaabb\")\n</cell>\n\
    <code language=julia-1.4>\nall_prefixes(\"abbacacaaabbb\")\n</cell>\n<code language=julia-1.4>\n\
    all_prefixes(\"abbacacaaabbbc\")\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"\
    abbacacaaabbbcc\")\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"abbacacaaabbbccc\"\
    )\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"abbacacaaabbbccca\")\n</cell>\n\
    <code language=julia-1.4>\nall_prefixes(\"abbacacaaabbbcccaa\")\n</cell>\n<code\
    \ language=julia-1.4>\nall_prefixes(\"abbacacaaabbbcccaaa\")\n</cell>\n<code language=julia-1.4>\n\
    all_prefixes(\"abbacacaaabbbcccaaaa\")\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"\
    abbacacaaabbbcccaaaab\")\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"\
    abbacacaaabbbcccaaaabb\")\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"\
    abbacacaaabbbcccaaaabbb\")\n</cell\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpq7nbv3jf.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpq7nbv3jf.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    for prefix in string.split(\"\")\n        prefix_list += prefixes_of(prefix)\n\
    \    return prefix_list\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp2xo2c68g.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp2xo2c68g.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp2xo2c68g.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    \n    prefixes = []\n   \
    \ \n    for c in string\n        prefixes += all_prefixes(string[1:end-1]) + [c]\n\
    \    end\n    \n    return prefixes\nend\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abc\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns the longest prefix that is a substring of the input string.\
    \ For example, all_prefixes(\"abcabc\") should return [\"abc\"].\nusing Test\n\
    \n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpq2ujatz7.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpq2ujatz7.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    for prefix in string.split(\"\")\n        prefix_list += prefixes_of(prefix)\n\
    \    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns the longest prefix that is a substring of the input string. For\
    \ example, longest_prefix(\"abracadabra\") should return \"abracadabra\".\nusing\
    \ Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\"\
    ) == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpddbi_5wr.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpddbi_5wr.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i = 2 to length(string)\n        prefix_list[i]\
    \ = prefix_list[i-2] + string[i]\n    end\n    return prefix_list\nend\n</cell>\n\
    <code language=julia-1.4>\nall_prefixes(\"abc\")\n</cell>\n<text>\nExercise 4\n\
    Write a function that takes a string and returns the number of characters in the\
    \ string that are uppercase letters.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"length\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp8snv5tj4.jl:8\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp8snv5tj4.jl:8\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    for prefix in string.split(\"\")\n        prefix_list += all_prefixes(prefix)\
    \ \n    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abc\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string as input\
    \ and returns the number of times each character appears in the string. \nFor\
    \ example, for the string \"abcabcbb\" the function should return {\"a\" => 3,\
    \ \"b\" => 2, \"c\" => 3, \"b\" => 2, \"c\" => 2, \"b\" => 2}.\nusing Test\n\n\
    @testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpi5llzzik.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpi5llzzik.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[1:end-1]) \n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end-1:end])\n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end+1:end+2])\n    prefix_list = prefix_list ++ all_prefixes(string[end+2:end+3])\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[end+3:end+4])\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end+4:end+5])\n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end+5:end+6])\n    prefix_list = prefix_list ++ all_prefixes(string[end+6:end+7])\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[end+7:end+8])\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end+8:end+9])\n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end+9:end+10])\n    prefix_list = prefix_list ++ all_prefixes(string[end+10:end+11])\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[end+11:end+12])\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end+12:end+13])\n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end+13:end+14])\n    prefix_list = prefix_list ++ all_prefixes(string[end+14:end+15])\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[end+15:end+16])\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end+16:end+17])\n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end+17:end+18])\n    prefix_list = prefix_list ++ all_prefixes(string[end+18:end+19])\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[end+19:end+20])\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end+20:end+21])\n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end+21:end+22])\n    prefix_list = prefix_list ++ all_prefixes(string[end+22:end+23])\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[end+23:end+24])\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end+24:end+25])\n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end+25:end+26])\n    prefix_\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpy1ft352b.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpy1ft352b.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpy1ft352b.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    \n    for i = 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-2] + string[i]\n    end\n    \n    return prefix_list\nend\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<text>\nExercise\
    \ 3: Write a function that takes a string and returns the longest prefix that\
    \ is a substring of the input string. For example, all_prefixes(\"abcabc\") should\
    \ return \"abc\".\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpf54wxgec.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpf54wxgec.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list = prefix_list + all_prefixes(string[1:end-1]) + [string[1:end-1]]\n\
    \    return prefix_list\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpxfez0uld.jl:15\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] Array at ./boot.jl:405 [inlined]\n   [2] Array at ./boot.jl:424\
    \ [inlined]\n   [3] all_prefixes(::String) at /tmp/tmpxfez0uld.jl:6\n   [4] all_prefixes(::String)\
    \ at /tmp/tmpxfez0uld.jl:7 (repeats 52338 times)\n   [5] top-level scope at /tmp/tmpxfez0uld.jl:15\n\
    \   [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmpxfez0uld.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpxfez0uld.jl:16\n  Test threw exception\n  Expression: candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] Array at ./boot.jl:405 [inlined]\n   [2] Array at ./boot.jl:424\
    \ [inlined]\n   [3] all_prefixes(::String) at /tmp/tmpxfez0uld.jl:6\n   [4] all_prefixes(::String)\
    \ at /tmp/tmpxfez0uld.jl:7 (repeats 52338 times)\n   [5] top-level scope at /tmp/tmpxfez0uld.jl:16\n\
    \   [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmpxfez0uld.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpxfez0uld.jl:17\n  Test threw exception\n  Expression: candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]\n  StackOverflowError:\n  Stacktrace:\n   [1]\
    \ Array at ./boot.jl:405 [inlined]\n   [2] Array at ./boot.jl:424 [inlined]\n\
    \   [3] all_prefixes(::String) at /tmp/tmpxfez0uld.jl:6\n   [4] all_prefixes(::String)\
    \ at /tmp/tmpxfez0uld.jl:7 (repeats 52338 times)\n   [5] top-level scope at /tmp/tmpxfez0uld.jl:17\n\
    \   [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmpxfez0uld.jl:14\n  \nTest Summary: | Error \
    \ Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxfez0uld.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list = prefix_list ++ [string[1:i] for i in length(string)]\n    prefix_list\
    \ = prefix_list ++ [string[i+1::] for i in length(string)]\n    return prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the longest prefix\
    \ that is a substring of the input string. For example, all_prefixes(\"abcabc\"\
    ) should return \"abc\".\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"]\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpqes6jv_7.jl:8\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpqes6jv_7.jl:8\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    prefix_list[2] = string\n    prefix_list[3]\
    \ = string\n    prefix_list[4] = string\n    prefix_list[5] = string\n    prefix_list[6]\
    \ = string\n    prefix_list[7] = string\n    prefix_list[8] = string\n    prefix_list[9]\
    \ = string\n    prefix_list[10] = string\n    prefix_list[11] = string\n    prefix_list[12]\
    \ = string\n    prefix_list[13] = string\n    prefix_list[14] = string\n    prefix_list[15]\
    \ = string\n    prefix_list[16] = string\n    prefix_list[17] = string\n    prefix_list[18]\
    \ = string\n    prefix_list[19] = string\n    prefix_list[20] = string\n    prefix_list[21]\
    \ = string\n    prefix_list[22] = string\n    prefix_list[23] = string\n    prefix_list[24]\
    \ = string\n    prefix_list[25] = string\n    prefix_list[26] = string\n    prefix_list[27]\
    \ = string\n    prefix_list[28] = string\n    prefix_list[29] = string\n    prefix_list[30]\
    \ = string\n    prefix_list[31] = string\n    prefix_list[32] = string\n    prefix_list[33]\
    \ = string\n    prefix_list[34] = string\n    prefix_list[35] = string\n    prefix_list[36]\
    \ = string\n    prefix_list[37] = string\n    prefix_list[38] = string\n    prefix_list[39]\
    \ = string\n    prefix_list[40] = string\n    prefix_list[41] = string\n    prefix_list[42]\
    \ = string\n    prefix_list[43] = string\n    prefix_list[44] = string\n    prefix_list[45]\
    \ = string\n    prefix_list[46] = string\n    prefix_list[47] = string\n    prefix_list[48]\
    \ = string\n    prefix_list[49] = string\n    prefix_list[50] = string\n    prefix_list[51]\
    \ = string\n    prefix_list[52] = string\n    prefix_list[53] = string\n    prefix_list[54]\
    \ = string\n    prefix_list[55] = string\n    prefix_list[56] = string\n    prefix_list[57]\
    \ = string\n    prefix_list[58] = string\n    prefix_list[59] = string\n    prefix_list[60]\
    \ = string\n    prefix_list[61] = string\n    prefix_list[62] = string\n    prefix_list[63]\
    \ = string\n    prefix_list[64] = string\n    prefix_list[65] = string\n    prefix_list[66]\
    \ = string\n    prefix_list[67] = string\n    prefix_list[68] = string\n    prefix_list[69]\
    \ = string\n    prefix_list[70] = string\n    prefix_list[71] = string\n    prefix_list[72]\
    \ = string\n\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmprsi9a578.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmprsi9a578.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmprsi9a578.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = Vector{String}()\n\
    \    prefixes << string\n    prefixes << string[1:end-1]\n    prefixes << string[2:end]\n\
    \    return prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp3ubhkgaj.jl:17\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  MethodError: no method\
    \ matching <<(::Array{String,1}, ::String)\n  Stacktrace:\n   [1] all_prefixes(::String)\
    \ at /tmp/tmp3ubhkgaj.jl:7\n   [2] top-level scope at /tmp/tmp3ubhkgaj.jl:17\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp3ubhkgaj.jl:16\n  \ntest set: Error During\
    \ Test at /tmp/tmp3ubhkgaj.jl:18\n  Test threw exception\n  Expression: candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]\n  MethodError:\
    \ no method matching <<(::Array{String,1}, ::String)\n  Stacktrace:\n   [1] all_prefixes(::String)\
    \ at /tmp/tmp3ubhkgaj.jl:7\n   [2] top-level scope at /tmp/tmp3ubhkgaj.jl:18\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp3ubhkgaj.jl:16\n  \ntest set: Error During\
    \ Test at /tmp/tmp3ubhkgaj.jl:19\n  Test threw exception\n  Expression: candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]\n  MethodError: no method matching <<(::Array{String,1},\
    \ ::String)\n  Stacktrace:\n   [1] all_prefixes(::String) at /tmp/tmp3ubhkgaj.jl:7\n\
    \   [2] top-level scope at /tmp/tmp3ubhkgaj.jl:19\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp3ubhkgaj.jl:16\n  \nTest Summary: | Error \
    \ Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3ubhkgaj.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    for prefix in string.split(\"\")\n        prefix_list += prefixes_of(prefix)\n\
    \    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abracadabra\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ as input and returns a string with all prefixes of the string in alphabetical\
    \ order. For example, if the input is \"abracadabra\", the function should return\
    \ \"abracadabra\".\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpwur533u9.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpwur533u9.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i in 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-1] + string[i]\n    end\n    return prefix_list\nend\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the longest common prefix of two given strings.\n\
    using Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8l6tq8x7.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp8l6tq8x7.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list = prefix_list + [string[1:i] for i in 2:length(string)]\n   \
    \ prefix_list = prefix_list + [string[i-1:i] for i in 2:length(string)]\n    prefix_list\
    \ = prefix_list + [string[i-1:i] for i in 2:length(string)]\n    prefix_list =\
    \ prefix_list + [string[1:i] for i in 2:length(string)]\n    prefix_list = prefix_list\
    \ + [string[i-1:i] for i in 2:length(string)]\n    prefix_list = prefix_list +\
    \ [string[i-1:i] for i in 2:length(string)]\n    prefix_list = prefix_list + [string[1:i]\
    \ for i in 2:length(string)]\n    prefix_list = prefix_list + [string[i-1:i] for\
    \ i in 2:length(string)]\n    prefix_list = prefix_list + [string[i-1:i] for i\
    \ in 2:length(string)]\n    prefix_list = prefix_list + [string[1:i] for i in\
    \ 2:length(string)]\n    prefix_list = prefix_list + [string[i-1:i] for i in 2:length(string)]\n\
    \    prefix_list = prefix_list + [string[i-1:i] for i in 2:length(string)]\n \
    \   prefix_list = prefix_list + [string[1:i] for i in 2:length(string)]\n    prefix_list\
    \ = prefix_list + [string[i-1:i] for i in 2:length(string)]\n    prefix_list =\
    \ prefix_list + [string[i-1:i] for i in 2:length(string)]\n    prefix_list = prefix_list\
    \ + [string[1:i] for i in 2:length(string)]\n    prefix_list = prefix_list + [string[i-1:i]\
    \ for i in 2:length(string)]\n    prefix_list = prefix_list + [string[i-1:i] for\
    \ i in 2:length(string)]\n    prefix_list = prefix_list + [string[1:i] for i in\
    \ 2:length(string)]\n    prefix_list = prefix_list + [string[i-1:i] for i in 2:length(string)]\n\
    \    prefix_list = prefix_list + [string[i-1:i] for i in 2:length(string)]\n \
    \   prefix_list = prefix_list + [string[1:i] for i in 2:length(string)]\n    prefix_list\
    \ = prefix_list + [string[i-1:i] for i in 2:length(string)]\n    prefix_list =\
    \ prefix_list + [string[i-1:i] for i in 2:length(string)]\n    prefix_list = prefix_list\
    \ + [string[1:i] for i in 2:length(string)]\n    prefix_list = prefix_list + [string[i-1:i]\
    \ for i in 2:length(string)]\n    prefix_list = prefix_list + [string[i-1:i] for\
    \ i in 2:length(string)]\n    prefix_list = prefix_list + [string[1:i] for i in\
    \ 2:length(string)]\n    prefix_list = prefix_list + [string[i-1:i] for i in 2:length(string)]\n\
    \    prefix_list = prefix_list + [string[i-1:i] for i in 2:length(string)]\n \
    \   prefix_list = \nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppqzte_db.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmppqzte_db.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmppqzte_db.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    \n    prefixes = Vector{String}()\n\
    \    \n    for c in string\n        prefixes += all_prefixes(c)\n    end\n   \
    \ \n    return prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmphx31167c.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"]\n  MethodError: no method matching all_prefixes(::Char)\n\
    \  Closest candidates are:\n    all_prefixes(!Matched::String) at /tmp/tmphx31167c.jl:7\n\
    \  Stacktrace:\n   [1] all_prefixes(::String) at /tmp/tmphx31167c.jl:10\n   [2]\
    \ top-level scope at /tmp/tmphx31167c.jl:21\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmphx31167c.jl:19\n  \ntest set: Error During\
    \ Test at /tmp/tmphx31167c.jl:22\n  Test threw exception\n  Expression: candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]\n  MethodError: no method matching all_prefixes(::Char)\n\
    \  Closest candidates are:\n    all_prefixes(!Matched::String) at /tmp/tmphx31167c.jl:7\n\
    \  Stacktrace:\n   [1] all_prefixes(::String) at /tmp/tmphx31167c.jl:10\n   [2]\
    \ top-level scope at /tmp/tmphx31167c.jl:22\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmphx31167c.jl:19\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    1      2      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphx31167c.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i in 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-2] + string[i]\n    end\n    return prefix_list\nend\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_2rr9dqh.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_2rr9dqh.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    for prefix in string.split(\"\")\n        prefix_list += all_prefixes(prefix)\
    \ \n    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abc\")\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpa62nrxw2.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpa62nrxw2.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string, prefix_list)\n  \
    \  prefix_list = prefix_list + all_prefixes_helper(string, prefix_list)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string, prefix_list)\n    prefix_list =\
    \ prefix_list + all_prefixes_helper(string, prefix_list)\n    prefix_list = prefix_list\
    \ + all_prefixes_helper(string, prefix_list)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string, prefix_list)\n    prefix_list = prefix_list + all_prefixes_helper(string,\
    \ prefix_list)\n    prefix_list = prefix_list + all_prefixes_helper(string, prefix_list)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string, prefix_list)\n  \
    \  prefix_list = prefix_list + all_prefixes_helper(string, prefix_list)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string, prefix_list)\n    prefix_list =\
    \ prefix_list + all_prefixes_helper(string, prefix_list)\n    prefix_list = prefix_list\
    \ + all_prefixes_helper(string, prefix_list)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string, prefix_list)\n    prefix_list = prefix_list + all_prefixes_helper(string,\
    \ prefix_list)\n    prefix_list = prefix_list + all_prefixes_helper(string, prefix_list)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string, prefix_list)\n  \
    \  prefix_list = prefix_list + all_prefixes_helper(string, prefix_list)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string, prefix_list)\n    prefix_list =\
    \ prefix_list + all_prefixes_helper(string, prefix_list)\n    prefix_list = prefix_list\
    \ + all_prefixes_helper(string, prefix_list)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string, prefix_list)\n    prefix_list = prefix_list + all_prefixes_helper(string,\
    \ prefix_list)\n    prefix_list = prefix_list + all_prefixes_helper(string, prefix_list)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string, prefix_list)\n  \
    \  prefix_list = prefix_list + all_prefixes_helper(string, prefix_list)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string, prefix_list)\n    prefix_list =\
    \ prefix_list + all_prefixes_helper(string, prefix_list)\n    prefix_list = prefix_list\
    \ + all_prefixes_helper(string, prefix_list)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string, prefix_list)\n    prefix_list = prefix_list + all_prefixes_helper(string,\
    \ prefix_list)\n    prefix_list = prefix_list + all_prefixes_helper(string, prefix_list)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string, prefix_list)\n  \
    \  prefix_list = prefix_list + all_prefix\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpgfltnfto.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpgfltnfto.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpgfltnfto.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list = prefix_list ++ [string]\n    prefix_list = prefix_list ++ all_prefixes(string[1:end-1])\
    \ \n    return prefix_list\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    ab\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abd\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abd\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abd\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abd\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abd\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abd\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abd\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abd\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abd\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abd\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abd\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abd\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abd\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abd\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abd\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abd\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abd\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abd\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abd\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abd\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abd\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abd\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abd\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abd\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abd\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4qn27rss.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp4qn27rss.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i = 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-2] + string[i]\n    end\n    return prefix_list\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\"\
    ) == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpuw80v4a_.jl:18\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  BoundsError: attempt to\
    \ access 0-element Array{String,1} at index [1]\n  Stacktrace:\n   [1] setindex!\
    \ at ./array.jl:826 [inlined]\n   [2] all_prefixes(::String) at /tmp/tmpuw80v4a_.jl:7\n\
    \   [3] top-level scope at /tmp/tmpuw80v4a_.jl:18\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpuw80v4a_.jl:17\n  \ntest set: Error During\
    \ Test at /tmp/tmpuw80v4a_.jl:19\n  Test threw exception\n  Expression: candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]\n  BoundsError:\
    \ attempt to access 0-element Array{String,1} at index [1]\n  Stacktrace:\n  \
    \ [1] setindex! at ./array.jl:826 [inlined]\n   [2] all_prefixes(::String) at\
    \ /tmp/tmpuw80v4a_.jl:7\n   [3] top-level scope at /tmp/tmpuw80v4a_.jl:19\n  \
    \ [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpuw80v4a_.jl:17\n  \ntest set: Error During\
    \ Test at /tmp/tmpuw80v4a_.jl:20\n  Test threw exception\n  Expression: candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]\n  BoundsError: attempt to access 0-element\
    \ Array{String,1} at index [1]\n  Stacktrace:\n   [1] setindex! at ./array.jl:826\
    \ [inlined]\n   [2] all_prefixes(::String) at /tmp/tmpuw80v4a_.jl:7\n   [3] top-level\
    \ scope at /tmp/tmpuw80v4a_.jl:20\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpuw80v4a_.jl:17\n  \nTest Summary: | Error \
    \ Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpuw80v4a_.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list = prefix_list ++ [string]\n    prefix_list = prefix_list ++ all_prefixes(string[1:end-1])\
    \ \n    return prefix_list\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpmmfk3d1s.jl:16\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  UndefVarError: ++ not\
    \ defined\n  Stacktrace:\n   [1] all_prefixes(::String) at /tmp/tmpmmfk3d1s.jl:7\n\
    \   [2] top-level scope at /tmp/tmpmmfk3d1s.jl:16\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpmmfk3d1s.jl:15\n  \ntest set: Error During\
    \ Test at /tmp/tmpmmfk3d1s.jl:17\n  Test threw exception\n  Expression: candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]\n  UndefVarError:\
    \ ++ not defined\n  Stacktrace:\n   [1] all_prefixes(::String) at /tmp/tmpmmfk3d1s.jl:7\n\
    \   [2] top-level scope at /tmp/tmpmmfk3d1s.jl:17\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpmmfk3d1s.jl:15\n  \ntest set: Error During\
    \ Test at /tmp/tmpmmfk3d1s.jl:18\n  Test threw exception\n  Expression: candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]\n  UndefVarError: ++ not defined\n  Stacktrace:\n\
    \   [1] all_prefixes(::String) at /tmp/tmpmmfk3d1s.jl:7\n   [2] top-level scope\
    \ at /tmp/tmpmmfk3d1s.jl:18\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpmmfk3d1s.jl:15\n  \nTest Summary: | Error \
    \ Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmmfk3d1s.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i = 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-1] + string[i]\n    end\n    return prefix_list\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\"\
    ) == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp85gr991w.jl:18\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  BoundsError: attempt to\
    \ access 0-element Array{String,1} at index [1]\n  Stacktrace:\n   [1] setindex!\
    \ at ./array.jl:826 [inlined]\n   [2] all_prefixes(::String) at /tmp/tmp85gr991w.jl:7\n\
    \   [3] top-level scope at /tmp/tmp85gr991w.jl:18\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmp85gr991w.jl:17\n  \ntest set: Error During\
    \ Test at /tmp/tmp85gr991w.jl:19\n  Test threw exception\n  Expression: candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]\n  BoundsError:\
    \ attempt to access 0-element Array{String,1} at index [1]\n  Stacktrace:\n  \
    \ [1] setindex! at ./array.jl:826 [inlined]\n   [2] all_prefixes(::String) at\
    \ /tmp/tmp85gr991w.jl:7\n   [3] top-level scope at /tmp/tmp85gr991w.jl:19\n  \
    \ [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmp85gr991w.jl:17\n  \ntest set: Error During\
    \ Test at /tmp/tmp85gr991w.jl:20\n  Test threw exception\n  Expression: candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]\n  BoundsError: attempt to access 0-element\
    \ Array{String,1} at index [1]\n  Stacktrace:\n   [1] setindex! at ./array.jl:826\
    \ [inlined]\n   [2] all_prefixes(::String) at /tmp/tmp85gr991w.jl:7\n   [3] top-level\
    \ scope at /tmp/tmp85gr991w.jl:20\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmp85gr991w.jl:17\n  \nTest Summary: | Error \
    \ Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp85gr991w.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i = 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-2] + string[i]\n    end\n    return prefix_list\nend\n</cell>\n\
    <code language=julia-1.3>\nall_prefixes(\"abc\")\n</cell>\n<code language=julia-1.3>\n\
    using Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpyngwrm4k.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpyngwrm4k.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i = 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-1] + string[i]\n    end\n    prefix_list\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@test all_prefixes(\"abc\") == [\"a\", \"ab\", \"abc\"\
    ]\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the longest prefix that is a substring of the input string. For example, all_prefixes(\"\
    abcabc\") should return [\"abc\"].\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpwe6w8nfl.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpwe6w8nfl.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    prefix_list[2] = string\n    \n    for i = length(prefix_list)\
    \ downto 1 \n        prefix_list[i] = prefix_list[i-2] + prefix_list[i-1]\n  \
    \  end\n    \n    return prefix_list\nend\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abc\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a string and returns the longest prefix that is a palindrome. \nFor example,\
    \ \nall_prefixes(\"abba\") returns [\"ab\", \"ba\"]\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"1\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp40q3hgu8.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp40q3hgu8.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmph33vqmrn.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmph33vqmrn.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmph33vqmrn.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    for prefix in string.split(\"\")\n        prefix_list += all_prefixes(prefix)\
    \ \n    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    ab\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"aba\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbac\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbaca\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacac\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacaca\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacab\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacaba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacabba\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacabbac\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacabbaca\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacabbacac\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacabbacaca\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacabbacacab\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacabbacacaba\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacabbacacabba\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacacabbacacabbac\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacabbacacabbaca\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacabbacacabbacac\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacabbacacabbacaca\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacabbacacabbacacab\")\n</cell>\n<code language=julia-1.5\nusing Test\n\n\
    @testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphj0g0bca.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmphj0g0bca.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    \n    prefixes = []\n   \
    \ \n    for char in string\n        prefixes += all_prefixes(char) \n    end\n\
    \    \n    return prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpyr5_hjao.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"]\n  MethodError: no method matching all_prefixes(::Char)\n\
    \  Closest candidates are:\n    all_prefixes(!Matched::String) at /tmp/tmpyr5_hjao.jl:7\n\
    \  Stacktrace:\n   [1] all_prefixes(::String) at /tmp/tmpyr5_hjao.jl:10\n   [2]\
    \ top-level scope at /tmp/tmpyr5_hjao.jl:21\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpyr5_hjao.jl:19\n  \ntest set: Error During\
    \ Test at /tmp/tmpyr5_hjao.jl:22\n  Test threw exception\n  Expression: candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]\n  MethodError: no method matching all_prefixes(::Char)\n\
    \  Closest candidates are:\n    all_prefixes(!Matched::String) at /tmp/tmpyr5_hjao.jl:7\n\
    \  Stacktrace:\n   [1] all_prefixes(::String) at /tmp/tmpyr5_hjao.jl:10\n   [2]\
    \ top-level scope at /tmp/tmpyr5_hjao.jl:22\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpyr5_hjao.jl:19\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    1      2      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyr5_hjao.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = Vector{String}()\n\
    \    prefix_length = 0\n    for character in string\n        if character == prefixes[prefix_length]\n\
    \            prefix_length += 1\n        else\n            prefix_length = 0\n\
    \            prefixes << character\n        end\n    end\n    return prefixes\n\
    end\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the longest prefix\
    \ that is a substring of the input string. For example, all_prefixes(\"abcabc\"\
    ) should return \"abc\".\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpbp01q_jv.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpbp01q_jv.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i = 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-2] + string[i]\n    end\n    prefix_list\nend\n</cell>\n<code\
    \ language=julia-1.3>\nall_prefixes(\"abc\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the longest prefix of a given string.\nusing Test\n\n\
    @testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpjpvlnrk8.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpjpvlnrk8.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    \n    prefixes = Vector{String}()\n\
    \    \n    for c in string\n        prefixes += all_prefixes(c) + [c]\n    end\n\
    \    \n    return prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpqvw7v3m7.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"]\n  MethodError: no method matching all_prefixes(::Char)\n\
    \  Closest candidates are:\n    all_prefixes(!Matched::String) at /tmp/tmpqvw7v3m7.jl:7\n\
    \  Stacktrace:\n   [1] all_prefixes(::String) at /tmp/tmpqvw7v3m7.jl:10\n   [2]\
    \ top-level scope at /tmp/tmpqvw7v3m7.jl:21\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpqvw7v3m7.jl:19\n  \ntest set: Error During\
    \ Test at /tmp/tmpqvw7v3m7.jl:22\n  Test threw exception\n  Expression: candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]\n  MethodError: no method matching all_prefixes(::Char)\n\
    \  Closest candidates are:\n    all_prefixes(!Matched::String) at /tmp/tmpqvw7v3m7.jl:7\n\
    \  Stacktrace:\n   [1] all_prefixes(::String) at /tmp/tmpqvw7v3m7.jl:10\n   [2]\
    \ top-level scope at /tmp/tmpqvw7v3m7.jl:22\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpqvw7v3m7.jl:19\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    1      2      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqvw7v3m7.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    for prefix in string.split(\"\")\n        prefix_list += prefixes_of(prefix)\n\
    \    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbac\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbaca\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacac\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacbba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacbbac\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacbbacc\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacbbaccc\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacbbacccb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacbbacccbc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacbbacccbca\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacbbacccbcac\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacbbacccbcacb\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacacbbacccbcacbb\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacbbacccbcacbbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacbbacccbcacbbbc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacbbacccbcacbbbca\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacbbacccbcacbbbcac\")\n</\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpjfrjur57.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpjfrjur57.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    for s in string\n        prefix_list += all_prefixes(s)\n    end\n    prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"ab\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abba\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbb\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbbb\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbbbc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbbbcc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbbbccc\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbbbcccd\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbbbcccdd\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbbbcccddd\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbbbcccdddd\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbbbcccddddd\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbbbcccdddddd\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbbbcccddddddd\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbbbcccdddddddd\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbbbcccdddddddddd\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbbbcccddddddddddd\")\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abbbbcccdddddddddddd\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbbbcccdddddddddddddd\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbbbcccdddddddddddddddd\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbbb\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmplprdsbpe.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmplprdsbpe.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list = prefix_list ++ [string[1:i] | i <- 1:length(string)]\n    prefix_list\
    \ = prefix_list ++ [string[1:i] | i <- length(string):-1]\n    return prefix_list\n\
    end\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"abc\")\n</cell>\n<code\
    \ language=julia-1.4>\nall_prefixes(\"ab\")\n</cell>\n<code language=julia-1.4>\n\
    all_prefixes(\"aba\")\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"abba\"\
    )\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"abbac\")\n</cell>\n<code\
    \ language=julia-1.4>\nall_prefixes(\"abbaca\")\n</cell>\n<code language=julia-1.4>\n\
    all_prefixes(\"abbacac\")\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"\
    abbacaca\")\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"abbacacaa\")\n\
    </cell>\n<code language=julia-1.4>\nall_prefixes(\"abbacacaaa\")\n</cell>\n<code\
    \ language=julia-1.4>\nall_prefixes(\"abbacacaaab\")\n</cell>\n<code language=julia-1.4>\n\
    all_prefixes(\"abbacacaaabb\")\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"\
    abbacacaaabbb\")\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"abbacacaaabbbc\"\
    )\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"abbacacaaabbbcc\")\n</cell>\n\
    <code language=julia-1.4>\nall_prefixes(\"abbacacaaabbbccc\")\n</cell>\n<code\
    \ language=julia-1.4>\nall_prefixes(\"abbacacaaabbbccca\")\n</cell>\n<code language=julia-1.4>\n\
    all_prefixes(\"abbacacaaabbbcccaa\")\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"\
    abbacacaaabbbcccaaa\")\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"abbacacaaabbbcccaaaa\"\
    )\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"abbacacaaabbbcccaaaab\"\
    )\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"abbacacaaab\nusing Test\n\
    \n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp6jzki2yj.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp6jzki2yj.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    \n    prefixes = Vector{String}()\n\
    \    \n    for c in string\n        prefixes += all_prefixes(c) + [c]\n    end\n\
    \    \n    return prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp2slwec6_.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"]\n  MethodError: no method matching all_prefixes(::Char)\n\
    \  Closest candidates are:\n    all_prefixes(!Matched::String) at /tmp/tmp2slwec6_.jl:7\n\
    \  Stacktrace:\n   [1] all_prefixes(::String) at /tmp/tmp2slwec6_.jl:10\n   [2]\
    \ top-level scope at /tmp/tmp2slwec6_.jl:21\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp2slwec6_.jl:19\n  \ntest set: Error During\
    \ Test at /tmp/tmp2slwec6_.jl:22\n  Test threw exception\n  Expression: candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]\n  MethodError: no method matching all_prefixes(::Char)\n\
    \  Closest candidates are:\n    all_prefixes(!Matched::String) at /tmp/tmp2slwec6_.jl:7\n\
    \  Stacktrace:\n   [1] all_prefixes(::String) at /tmp/tmp2slwec6_.jl:10\n   [2]\
    \ top-level scope at /tmp/tmp2slwec6_.jl:22\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp2slwec6_.jl:19\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    1      2      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2slwec6_.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    \n    prefixes = Vector{String}()\n\
    \    \n    for c in string\n        prefixes += all_prefixes(string[1:end-1])\
    \ + [c]\n    end\n    \n    return prefixes\nend\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"ab\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"aba\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abba\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbac\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbaca\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacac\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacb\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacbba\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacbbac\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacbbacc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacbbaccc\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacbbacccba\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacbbacccbac\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacacbbacccbacca\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacbbacccbacbacca\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacbbacccbacbacbacca\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacbbacccbacbacbacbacca\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacbbacccbacbacbacbacbacca\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacbbacccbacbacbacbacbacbacca\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacbbacccbacbacbacbacbacbacbacca\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpxyky1spg.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpxyky1spg.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    for prefix in string.split(\"\")\n        prefix_list += prefixes_of(prefix)\n\
    \    return prefix_list\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpfpzehsvk.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpfpzehsvk.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpfpzehsvk.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list = prefix_list ++ [string]\n    prefix_list = prefix_list ++ all_prefixes(string[1:end-1])\
    \ \n    return prefix_list\nend\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"\
    ab\")\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"aba\")\n</cell>\n<code\
    \ language=julia-1.3>\nall_prefixes(\"abba\")\n</cell>\n<code language=julia-1.3>\n\
    all_prefixes(\"abbac\")\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"abbaca\"\
    )\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"abbacac\")\n</cell>\n<code\
    \ language=julia-1.3>\nall_prefixes(\"abbacaca\")\n</cell>\n<code language=julia-1.3>\n\
    all_prefixes(\"abbacacaa\")\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"\
    abbacacaaa\")\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"abbacacaaab\"\
    )\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"abbacacaaabb\")\n</cell>\n\
    <code language=julia-1.3>\nall_prefixes(\"abbacacaaabbb\")\n</cell>\n<code language=julia-1.3>\n\
    all_prefixes(\"abbacacaaabbbc\")\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"\
    abbacacaaabbbcc\")\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"abbacacaaabbbccc\"\
    )\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"abbacacaaabbbccca\")\n</cell>\n\
    <code language=julia-1.3>\nall_prefixes(\"abbacacaaabbbcccaa\")\n</cell>\n<code\
    \ language=julia-1.3>\nall_prefixes(\"abbacacaaabbbcccaaa\")\n</cell>\n<code language=julia-1.3>\n\
    all_prefixes(\"abbacacaaabbbcccaaac\")\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"\
    abbacacaaabbbcccaaacb\")\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"\
    abbacacaaabbbcccaaacbb\")\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"\
    abbacacaaabbbcc\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpse1m4npr.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpse1m4npr.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i = 2 to length(string)\n        prefix_list[i]\
    \ = prefix_list[i-2] + string[i]\n    end\n    prefix_list\nend\n</cell>\n<code\
    \ language=julia-1.3>\nall_prefixes(\"abc\")\n</cell>\n<code language=julia-1.3>\n\
    all_prefixes(\"ab\")\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"aba\"\
    )\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"abba\")\n</cell>\n<code\
    \ language=julia-1.3>\nall_prefixes(\"abbac\")\n</cell>\n<code language=julia-1.3>\n\
    all_prefixes(\"abbaca\")\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"\
    abbacac\")\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"abbacaca\")\n</cell>\n\
    <code language=julia-1.3>\nall_prefixes(\"abbacacaa\")\n</cell>\n<code language=julia-1.3>\n\
    all_prefixes(\"abbacacaaa\")\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"\
    abbacacaaab\")\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"abbacacaaabb\"\
    )\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"abbacacaaabbb\")\n</cell>\n\
    <code language=julia-1.3>\nall_prefixes(\"abbacacaaabbbc\")\n</cell>\n<code language=julia-1.3>\n\
    all_prefixes(\"abbacacaaabbbcc\")\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"\
    abbacacaaabbbccd\")\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"abbacacaaabbbccdc\"\
    )\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"abbacacaaabbbccdcd\")\n\
    </cell>\n<code language=julia-1.3>\nall_prefixes(\"abbacacaaabbbccdcdc\")\n</cell>\n\
    <code language=julia-1.3>\nall_prefixes(\"abbacacaaabbbccdcdcc\")\n</cell>\n<code\
    \ language=julia-1.3>\nall_prefixes(\"abbacacaaabbbccdcdccd\")\n</cell>\n<code\
    \ language=julia-1.3>\nall_prefixes(\"abbacacaaabbbccdcdccdc\")\n\nusing Test\n\
    \n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"length\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpnqgvceak.jl:8\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpnqgvceak.jl:8\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    \n    prefix_list = Vector{String}()\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[1:end-1]) \n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end-1:end])\n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end+1:end+2])\n    prefix_list = prefix_list ++ all_prefixes(string[end+2:end+3])\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[end+3:end+4])\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end+4:end+5])\n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end+5:end+6])\n    prefix_list = prefix_list ++ all_prefixes(string[end+6:end+7])\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[end+7:end+8])\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end+8:end+9])\n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end+9:end+10])\n    prefix_list = prefix_list ++ all_prefixes(string[end+10:end+11])\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[end+11:end+12])\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end+12:end+13])\n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end+13:end+14])\n    prefix_list = prefix_list ++ all_prefixes(string[end+14:end+15])\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[end+15:end+16])\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end+16:end+17])\n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end+17:end+18])\n    prefix_list = prefix_list ++ all_prefixes(string[end+18:end+19])\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[end+19:end+20])\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end+20:end+21])\n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end+21:end+22])\n    prefix_list = prefix_list ++ all_prefixes(string[end+22:end+23])\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[end+23:end+24])\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end+24:end+25])\n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end+25:end+26])\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxjho0ac2.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpxjho0ac2.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpxjho0ac2.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list = prefix_list ++ [string]\n    prefix_list = prefix_list ++ all_prefixes(string[1:end-1])\
    \ \n    prefix_list = prefix_list ++ all_prefixes(string[2:end])\n    return prefix_list\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp2adacf52.jl:17\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  UndefVarError: ++ not\
    \ defined\n  Stacktrace:\n   [1] all_prefixes(::String) at /tmp/tmp2adacf52.jl:7\n\
    \   [2] top-level scope at /tmp/tmp2adacf52.jl:17\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp2adacf52.jl:16\n  \ntest set: Error During\
    \ Test at /tmp/tmp2adacf52.jl:18\n  Test threw exception\n  Expression: candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]\n  UndefVarError:\
    \ ++ not defined\n  Stacktrace:\n   [1] all_prefixes(::String) at /tmp/tmp2adacf52.jl:7\n\
    \   [2] top-level scope at /tmp/tmp2adacf52.jl:18\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp2adacf52.jl:16\n  \ntest set: Error During\
    \ Test at /tmp/tmp2adacf52.jl:19\n  Test threw exception\n  Expression: candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]\n  UndefVarError: ++ not defined\n  Stacktrace:\n\
    \   [1] all_prefixes(::String) at /tmp/tmp2adacf52.jl:7\n   [2] top-level scope\
    \ at /tmp/tmp2adacf52.jl:19\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp2adacf52.jl:16\n  \nTest Summary: | Error \
    \ Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2adacf52.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i = 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-1] + string[i]\n    end\n    return prefix_list\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\"\
    ) == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpvuh847sc.jl:18\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  BoundsError: attempt to\
    \ access 0-element Array{String,1} at index [1]\n  Stacktrace:\n   [1] setindex!\
    \ at ./array.jl:826 [inlined]\n   [2] all_prefixes(::String) at /tmp/tmpvuh847sc.jl:7\n\
    \   [3] top-level scope at /tmp/tmpvuh847sc.jl:18\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpvuh847sc.jl:17\n  \ntest set: Error During\
    \ Test at /tmp/tmpvuh847sc.jl:19\n  Test threw exception\n  Expression: candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]\n  BoundsError:\
    \ attempt to access 0-element Array{String,1} at index [1]\n  Stacktrace:\n  \
    \ [1] setindex! at ./array.jl:826 [inlined]\n   [2] all_prefixes(::String) at\
    \ /tmp/tmpvuh847sc.jl:7\n   [3] top-level scope at /tmp/tmpvuh847sc.jl:19\n  \
    \ [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpvuh847sc.jl:17\n  \ntest set: Error During\
    \ Test at /tmp/tmpvuh847sc.jl:20\n  Test threw exception\n  Expression: candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]\n  BoundsError: attempt to access 0-element\
    \ Array{String,1} at index [1]\n  Stacktrace:\n   [1] setindex! at ./array.jl:826\
    \ [inlined]\n   [2] all_prefixes(::String) at /tmp/tmpvuh847sc.jl:7\n   [3] top-level\
    \ scope at /tmp/tmpvuh847sc.jl:20\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpvuh847sc.jl:17\n  \nTest Summary: | Error \
    \ Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvuh847sc.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    \n    prefixes = Vector{String}()\n\
    \    \n    for c in string\n        prefixes += all_prefixes(c) + [c]\n    end\n\
    \    \n    return prefixes\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    ab\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"aba\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbac\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbaca\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacac\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacaca\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacaa\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacaaa\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaab\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabb\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacaaabbb\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacaaabbbc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacaaabbbcc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbccc\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbccca\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbcccaa\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacacaaabbbcccaaa\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacaaabbbcccaaac\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacaaabbbcccaaacb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacaaabbbcccaaacbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacaaabbbccca\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpbg7noj1o.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpbg7noj1o.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    return prefix_list\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpp074n6y4.jl:17\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  UndefVarError: all_prefixes_helper\
    \ not defined\n  Stacktrace:\n   [1] all_prefixes(::String) at /tmp/tmpp074n6y4.jl:7\n\
    \   [2] top-level scope at /tmp/tmpp074n6y4.jl:17\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpp074n6y4.jl:16\n  \ntest set: Error During\
    \ Test at /tmp/tmpp074n6y4.jl:18\n  Test threw exception\n  Expression: candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]\n  UndefVarError:\
    \ all_prefixes_helper not defined\n  Stacktrace:\n   [1] all_prefixes(::String)\
    \ at /tmp/tmpp074n6y4.jl:7\n   [2] top-level scope at /tmp/tmpp074n6y4.jl:18\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpp074n6y4.jl:16\n  \ntest set: Error During\
    \ Test at /tmp/tmpp074n6y4.jl:19\n  Test threw exception\n  Expression: candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]\n  UndefVarError: all_prefixes_helper not defined\n\
    \  Stacktrace:\n   [1] all_prefixes(::String) at /tmp/tmpp074n6y4.jl:7\n   [2]\
    \ top-level scope at /tmp/tmpp074n6y4.jl:19\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpp074n6y4.jl:16\n  \nTest Summary: | Error \
    \ Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpp074n6y4.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    \n    prefixes = Vector{String}()\n\
    \    \n    for c in string\n        prefixes += all_prefixes(c) \n    end\n  \
    \  \n    return prefixes\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abc\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and\
    \ returns the longest prefix that is a substring of the original string. For example,\
    \ for the string \"abcabc\", the longest prefix that is a substring would be \"\
    abc\".\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3s3y0z6n.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp3s3y0z6n.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    return prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp0uafoo1k.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp0uafoo1k.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list = prefix_list ++ [string]\n    prefix_list = prefix_list ++ all_prefixes(string[1:end])\n\
    \    return prefix_list\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpltv2uuzz.jl:16\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  UndefVarError: ++ not\
    \ defined\n  Stacktrace:\n   [1] all_prefixes(::String) at /tmp/tmpltv2uuzz.jl:7\n\
    \   [2] top-level scope at /tmp/tmpltv2uuzz.jl:16\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpltv2uuzz.jl:15\n  \ntest set: Error During\
    \ Test at /tmp/tmpltv2uuzz.jl:17\n  Test threw exception\n  Expression: candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]\n  UndefVarError:\
    \ ++ not defined\n  Stacktrace:\n   [1] all_prefixes(::String) at /tmp/tmpltv2uuzz.jl:7\n\
    \   [2] top-level scope at /tmp/tmpltv2uuzz.jl:17\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpltv2uuzz.jl:15\n  \ntest set: Error During\
    \ Test at /tmp/tmpltv2uuzz.jl:18\n  Test threw exception\n  Expression: candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]\n  UndefVarError: ++ not defined\n  Stacktrace:\n\
    \   [1] all_prefixes(::String) at /tmp/tmpltv2uuzz.jl:7\n   [2] top-level scope\
    \ at /tmp/tmpltv2uuzz.jl:18\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpltv2uuzz.jl:15\n  \nTest Summary: | Error \
    \ Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpltv2uuzz.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for c\
    \ in string\n        push!(prefixes, c)\n    end\n    return prefixes\nend\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpg0q65l2q.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpg0q65l2q.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    \n    prefixes = Vector{String}()\n\
    \    \n    for prefix in string.split(\"\")\n        prefixes << prefix\n    end\n\
    \    \n    return prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp8mi4a6_y.jl:20\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  type String has no field\
    \ split\n  Stacktrace:\n   [1] getproperty(::String, ::Symbol) at ./Base.jl:33\n\
    \   [2] all_prefixes(::String) at /tmp/tmp8mi4a6_y.jl:9\n   [3] top-level scope\
    \ at /tmp/tmp8mi4a6_y.jl:20\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmp8mi4a6_y.jl:19\n  \ntest set: Error During\
    \ Test at /tmp/tmp8mi4a6_y.jl:21\n  Test threw exception\n  Expression: candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]\n  type\
    \ String has no field split\n  Stacktrace:\n   [1] getproperty(::String, ::Symbol)\
    \ at ./Base.jl:33\n   [2] all_prefixes(::String) at /tmp/tmp8mi4a6_y.jl:9\n  \
    \ [3] top-level scope at /tmp/tmp8mi4a6_y.jl:21\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmp8mi4a6_y.jl:19\n  \ntest set: Error During\
    \ Test at /tmp/tmp8mi4a6_y.jl:22\n  Test threw exception\n  Expression: candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]\n  type String has no field split\n  Stacktrace:\n\
    \   [1] getproperty(::String, ::Symbol) at ./Base.jl:33\n   [2] all_prefixes(::String)\
    \ at /tmp/tmp8mi4a6_y.jl:9\n   [3] top-level scope at /tmp/tmp8mi4a6_y.jl:22\n\
    \   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmp8mi4a6_y.jl:19\n  \nTest Summary: | Error \
    \ Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8mi4a6_y.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list = all_prefixes_helper(string, prefix_list)\n    return prefix_list\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpy1c6cvl_.jl:15\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  UndefVarError: all_prefixes_helper\
    \ not defined\n  Stacktrace:\n   [1] all_prefixes(::String) at /tmp/tmpy1c6cvl_.jl:7\n\
    \   [2] top-level scope at /tmp/tmpy1c6cvl_.jl:15\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpy1c6cvl_.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpy1c6cvl_.jl:16\n  Test threw exception\n  Expression: candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]\n  UndefVarError:\
    \ all_prefixes_helper not defined\n  Stacktrace:\n   [1] all_prefixes(::String)\
    \ at /tmp/tmpy1c6cvl_.jl:7\n   [2] top-level scope at /tmp/tmpy1c6cvl_.jl:16\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpy1c6cvl_.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpy1c6cvl_.jl:17\n  Test threw exception\n  Expression: candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]\n  UndefVarError: all_prefixes_helper not defined\n\
    \  Stacktrace:\n   [1] all_prefixes(::String) at /tmp/tmpy1c6cvl_.jl:7\n   [2]\
    \ top-level scope at /tmp/tmpy1c6cvl_.jl:17\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpy1c6cvl_.jl:14\n  \nTest Summary: | Error \
    \ Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpy1c6cvl_.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    prefix_list[2] = string[1:end-1]\n    prefix_list[3]\
    \ = string[2:end]\n    prefix_list\nend\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abc\")\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the longest prefix of a given string. For example, for the string \"abc\", the\
    \ longest prefix is \"abc\".\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpx4pz_0u4.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpx4pz_0u4.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    \n    prefixes = Vector{String}()\n\
    \    \n    for char in string\n        prefixes += all_prefixes(char) + [char]\n\
    \    end\n    \n    return prefixes\nend\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbb\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbbb\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbbba\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbbbba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbbbbac\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbbbbaca\")\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abbbbbacab\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbbbbacabc\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbbbbacabca\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbbbbacabcab\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbbbbacabcabc\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbbbbacabcabca\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbbbbacabcabcab\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbbbbacabcabcabc\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbbbbacabcabcabca\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbbbbacabcabcabcab\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbbbbacabcabcabcabc\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbbbbacabcabcabcabca\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmprzuk6zoq.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmprzuk6zoq.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    for prefix in string.split(\"\")\n        prefix_list += all_prefixes(prefix)\
    \ \n    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    ab\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"aba\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"aba\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"aba\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"aba\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"aba\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"aba\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"aba\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"aba\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"aba\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"aba\")\n</cell\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp546gu0l8.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp546gu0l8.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list = prefix_list + [string[1:i] | i <- 1:length(string)]\n    prefix_list\
    \ = prefix_list + [string[1:i] | i <- length(string)+1:length(string)]\n    prefix_list\
    \ = prefix_list + [string[1:i] | i <- length(string)+2:length(string)]\n    prefix_list\
    \ = prefix_list + [string[1:i] | i <- length(string)+3:length(string)]\n    prefix_list\
    \ = prefix_list + [string[1:i] | i <- length(string)+4:length(string)]\n    prefix_list\
    \ = prefix_list + [string[1:i] | i <- length(string)+5:length(string)]\n    prefix_list\
    \ = prefix_list + [string[1:i] | i <- length(string)+6:length(string)]\n    prefix_list\
    \ = prefix_list + [string[1:i] | i <- length(string)+7:length(string)]\n    prefix_list\
    \ = prefix_list + [string[1:i] | i <- length(string)+8:length(string)]\n    prefix_list\
    \ = prefix_list + [string[1:i] | i <- length(string)+9:length(string)]\n    prefix_list\
    \ = prefix_list + [string[1:i] | i <- length(string)+10:length(string)]\n    prefix_list\
    \ = prefix_list + [string[1:i] | i <- length(string)+11:length(string)]\n    prefix_list\
    \ = prefix_list + [string[1:i] | i <- length(string)+12:length(string)]\n    prefix_list\
    \ = prefix_list + [string[1:i] | i <- length(string)+13:length(string)]\n    prefix_list\
    \ = prefix_list + [string[1:i] | i <- length(string)+14:length(string)]\n    prefix_list\
    \ = prefix_list + [string[1:i] | i <- length(string)+15:length(string)]\n    prefix_list\
    \ = prefix_list + [string[1:i] | i <- length(string)+16:length(string)]\n    prefix_list\
    \ = prefix_list + [string[1:i] | i <- length(string)+17:length(string)]\n    prefix_list\
    \ = prefix_list + [string[1:i] | i <- length(string)+18:length(string)]\n    prefix_list\
    \ = prefix_list + [string[1:i] | i <- length(string)+19:length(string)]\n    prefix_list\
    \ = prefix_list + [string[1:i] | i <- length(string)+20:length(string)]\n    prefix_list\
    \ = prefix_list + [string[1:i] | i <- length(string)+21:length(string)]\n    prefix_list\
    \ = prefix_list + [string[1:i] | i <- length(string)+22:length(string)]\n\nusing\
    \ Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\"\
    ) == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp0n86sf_e.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp0n86sf_e.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp0n86sf_e.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i = 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-1] + string[i]\n    end\n    return prefix_list\nend\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"ab\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"aba\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abba\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbac\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbaca\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacac\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacb\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacbba\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacbbac\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacbbacc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacbbaccc\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacbbacccb\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacbbacccbc\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacbbacccbcb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacbbacccbcbc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacbbacccbcbcb\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacbbacccbcbcbc\")\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacbbacccbcbcbcb\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacbbacccbcbcbcbc\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacbbacccbcbcbcbcb\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacbba\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpfs5q_nvt.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpfs5q_nvt.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i = 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-2] + string[i]\n    end\n    prefix_list\nend\n</cell>\n<code\
    \ language=julia-1.4>\nall_prefixes(\"abc\")\n</cell>\n<text>\nExercise 3.3\n\
    Write a function that returns the longest prefix of a given string.\nusing Test\n\
    \n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp71t1uosa.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp71t1uosa.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    for s in string\n        prefix_list = [prefix_list; prefix_list[1:]]\n \
    \   end\n    prefix_list\nend\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"\
    abc\")\n</cell>\n<code language=julia-1.3>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression\
    \ \nStacktrace:\n [1] top-level scope at /tmp/tmptyz0loui.jl:8\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmptyz0loui.jl:8\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    for c in string\n        prefix_list += all_prefixes(c)\n    end\n    prefix_list\n\
    end\n</cell>\n<code language=julia-1.4>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphc2itd_w.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmphc2itd_w.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    \n    prefix_list = Vector{String}()\n\
    \    prefix_list = all_prefixes_helper(string, prefix_list)\n    \n    return\
    \ prefix_list\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmplpu5r_3v.jl:17\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  UndefVarError: all_prefixes_helper\
    \ not defined\n  Stacktrace:\n   [1] all_prefixes(::String) at /tmp/tmplpu5r_3v.jl:8\n\
    \   [2] top-level scope at /tmp/tmplpu5r_3v.jl:17\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmplpu5r_3v.jl:16\n  \ntest set: Error During\
    \ Test at /tmp/tmplpu5r_3v.jl:18\n  Test threw exception\n  Expression: candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]\n  UndefVarError:\
    \ all_prefixes_helper not defined\n  Stacktrace:\n   [1] all_prefixes(::String)\
    \ at /tmp/tmplpu5r_3v.jl:8\n   [2] top-level scope at /tmp/tmplpu5r_3v.jl:18\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmplpu5r_3v.jl:16\n  \ntest set: Error During\
    \ Test at /tmp/tmplpu5r_3v.jl:19\n  Test threw exception\n  Expression: candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]\n  UndefVarError: all_prefixes_helper not defined\n\
    \  Stacktrace:\n   [1] all_prefixes(::String) at /tmp/tmplpu5r_3v.jl:8\n   [2]\
    \ top-level scope at /tmp/tmplpu5r_3v.jl:19\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmplpu5r_3v.jl:16\n  \nTest Summary: | Error \
    \ Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplpu5r_3v.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[1:end-1]) \n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end-1:end])\n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end-1:end-1])\n    return prefix_list\nend\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a string and returns the number of characters in the\
    \ string. \nWrite a function that takes a string and returns the number of characters\
    \ in the string that are uppercase letters.\nWrite a function that takes a string\
    \ and returns the number of characters in the string that are lowercase letters.\n\
    Write a function that takes a string and returns the number of characters in the\
    \ string that are digits or letters.\nWrite a function that takes a string and\
    \ returns the number of characters in the string that are spaces.\nWrite a function\
    \ that takes a string and returns the number of characters in the string that\
    \ are punctuation.\nWrite a function that takes a string and returns the number\
    \ of characters in the string that are alphanumeric.\nWrite a function that takes\
    \ a string and returns the number of characters in the string that are all uppercase\
    \ letters.\nWrite a function that takes a string and returns the number of characters\
    \ in the string that are all lowercase letters.\nWrite a function that takes a\
    \ string and returns the number of characters in the string that are all digits\
    \ or letters.\nWrite a function that takes a string and returns the number of\
    \ characters in the string that are all spaces.\nWrite a function that takes a\
    \ string and returns the number of characters in the string that are all punctuation.\n\
    Write a function that takes a string and returns the number of characters in the\
    \ string that are all alphanumeric.\nWrite a function that takes a string and\
    \ returns the number of characters in the string that are all uppercase letters.\n\
    Write a function that takes a string and returns the number of characters in the\
    \ string that are all lowercase letters.\nWrite a function that takes a string\
    \ and returns the number of characters in the string that are all digits or letters.\n\
    Write a function that takes a string and returns the number of characters in the\
    \ string that are all spaces.\nWrite a function that takes a string and returns\
    \ the number of characters in the string that are all punctuation.\nWrite a function\
    \ that takes a string and returns the number of characters in the string that\
    \ are all alphanumeric.\nWrite a function that takes a string and returns the\
    \ number of characters in the string that are all uppercase letters.\nWrite a\
    \ function that takes a string and returns the number of characters in the string\
    \ that are all lowercase letters.\nWrite a function that takes a string and returns\
    \ the number of characters in the string that are all digits or letters.\nWrite\
    \ a function that takes a string and returns the number of characters in the string\
    \ that are all spaces.\nWrite a function that takes a string and returns the number\
    \ of characters in the string that are all punctuation.\nWrite a function that\
    \ takes a string and returns the number of characters in the string that are all\
    \ alphanumeric.\nWrite a function that takes a \nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp7jq5ijus.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp7jq5ijus.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    prefix_list[2] = string\n    prefix_list[3]\
    \ = string\n    prefix_list[4] = string\n    prefix_list[5] = string\n    prefix_list[6]\
    \ = string\n    prefix_list[7] = string\n    prefix_list[8] = string\n    prefix_list[9]\
    \ = string\n    prefix_list[10] = string\n    prefix_list[11] = string\n    prefix_list[12]\
    \ = string\n    prefix_list[13] = string\n    prefix_list[14] = string\n    prefix_list[15]\
    \ = string\n    prefix_list[16] = string\n    prefix_list[17] = string\n    prefix_list[18]\
    \ = string\n    prefix_list[19] = string\n    prefix_list[20] = string\n    prefix_list[21]\
    \ = string\n    prefix_list[22] = string\n    prefix_list[23] = string\n    prefix_list[24]\
    \ = string\n    prefix_list[25] = string\n    prefix_list[26] = string\n    prefix_list[27]\
    \ = string\n    prefix_list[28] = string\n    prefix_list[29] = string\n    prefix_list[30]\
    \ = string\n    prefix_list[31] = string\n    prefix_list[32] = string\n    prefix_list[33]\
    \ = string\n    prefix_list[34] = string\n    prefix_list[35] = string\n    prefix_list[36]\
    \ = string\n    prefix_list[37] = string\n    prefix_list[38] = string\n    prefix_list[39]\
    \ = string\n    prefix_list[40] = string\n    prefix_list[41] = string\n    prefix_list[42]\
    \ = string\n    prefix_list[43] = string\n    prefix_list[44] = string\n    prefix_list[45]\
    \ = string\n    prefix_list[46] = string\n    prefix_list[47] = string\n    prefix_list[48]\
    \ = string\n    prefix_list[49] = string\n    prefix_list[50] = string\n    prefix_list[51]\
    \ = string\n    prefix_list[52] = string\n    prefix_list[53] = string\n    prefix_list[54]\
    \ = string\n    prefix_list[55] = string\n    prefix_list[56] = string\n    prefix_list[57]\
    \ = string\n    prefix_list[58] = string\n    prefix_list[59] = string\n    prefix_list[60]\
    \ = string\n    prefix_list[61] = string\n    prefix_list[62] = string\n    prefix_list[63]\
    \ = string\n    prefix_list[64] = string\n    prefix_list[65] = string\n    prefix_list[66]\
    \ = string\n    prefix_list[67] = string\n    prefix_list[68] = string\n    prefix_list[69]\
    \ = string\n    prefix_list[70] = string\n    prefix_list[71] = string\n    prefix_list[72]\
    \ = string\n    prefix_\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmphmgp9_vm.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmphmgp9_vm.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmphmgp9_vm.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i = 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-1] + string[i]\n    end\n    return prefix_list\nend\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    prefix_counts(string::String)\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphzc2zkoc.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmphzc2zkoc.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i = 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-2] + string[i]\n    end\n    return prefix_list\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\"\
    ) == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpe3dw2c_a.jl:18\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  BoundsError: attempt to\
    \ access 0-element Array{String,1} at index [1]\n  Stacktrace:\n   [1] setindex!\
    \ at ./array.jl:826 [inlined]\n   [2] all_prefixes(::String) at /tmp/tmpe3dw2c_a.jl:7\n\
    \   [3] top-level scope at /tmp/tmpe3dw2c_a.jl:18\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpe3dw2c_a.jl:17\n  \ntest set: Error During\
    \ Test at /tmp/tmpe3dw2c_a.jl:19\n  Test threw exception\n  Expression: candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]\n  BoundsError:\
    \ attempt to access 0-element Array{String,1} at index [1]\n  Stacktrace:\n  \
    \ [1] setindex! at ./array.jl:826 [inlined]\n   [2] all_prefixes(::String) at\
    \ /tmp/tmpe3dw2c_a.jl:7\n   [3] top-level scope at /tmp/tmpe3dw2c_a.jl:19\n  \
    \ [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpe3dw2c_a.jl:17\n  \ntest set: Error During\
    \ Test at /tmp/tmpe3dw2c_a.jl:20\n  Test threw exception\n  Expression: candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]\n  BoundsError: attempt to access 0-element\
    \ Array{String,1} at index [1]\n  Stacktrace:\n   [1] setindex! at ./array.jl:826\
    \ [inlined]\n   [2] all_prefixes(::String) at /tmp/tmpe3dw2c_a.jl:7\n   [3] top-level\
    \ scope at /tmp/tmpe3dw2c_a.jl:20\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpe3dw2c_a.jl:17\n  \nTest Summary: | Error \
    \ Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpe3dw2c_a.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i in 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-2] + string[i]\n    end\n    prefix_list\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\n    prefix_count(string::String)::Int64\nusing\
    \ Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\"\
    ) == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpez_58vqu.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpez_58vqu.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = Vector{String}()\n\
    \    for c in string\n        prefixes += all_prefixes(c) \n    end\n    prefixes\n\
    end\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbac\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbaca\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacac\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacaca\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacab\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaba\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacabba\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacabbac\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacabbaca\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacabbacac\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacabbacaca\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacabbacacab\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacabbacacaba\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacacabbacacabba\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacabbacacabbac\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacabbacacabbaca\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacabbacacabbacac\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacabbacacabbacaca\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacabbacacabbacacab\"\
    )\n</cell>\n<code language=julia-1.5>\nall_\nusing Test\n\n@testset begin\n\n\
    candidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpr4997_h6.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpr4997_h6.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpydvxkrzu.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpydvxkrzu.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpydvxkrzu.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i in 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-2] + string[i]\n    end\n    return prefix_list\nend\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp6bjsi1jp.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp6bjsi1jp.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    prefix_list[2] = string\n    prefix_list[3]\
    \ = string\n    prefix_list[4] = string\n    prefix_list[5] = string\n    prefix_list[6]\
    \ = string\n    prefix_list[7] = string\n    prefix_list[8] = string\n    prefix_list[9]\
    \ = string\n    prefix_list[10] = string\n    prefix_list[11] = string\n    prefix_list[12]\
    \ = string\n    prefix_list[13] = string\n    prefix_list[14] = string\n    prefix_list[15]\
    \ = string\n    prefix_list[16] = string\n    prefix_list[17] = string\n    prefix_list[18]\
    \ = string\n    prefix_list[19] = string\n    prefix_list[20] = string\n    prefix_list[21]\
    \ = string\n    prefix_list[22] = string\n    prefix_list[23] = string\n    prefix_list[24]\
    \ = string\n    prefix_list[25] = string\n    prefix_list[26] = string\n    prefix_list[27]\
    \ = string\n    prefix_list[28] = string\n    prefix_list[29] = string\n    prefix_list[30]\
    \ = string\n    prefix_list[31] = string\n    prefix_list[32] = string\n    prefix_list[33]\
    \ = string\n    prefix_list[34] = string\n    prefix_list[35] = string\n    prefix_list[36]\
    \ = string\n    prefix_list[37] = string\n    prefix_list[38] = string\n    prefix_list[39]\
    \ = string\n    prefix_list[40] = string\n    prefix_list[41] = string\n    prefix_list[42]\
    \ = string\n    prefix_list[43] = string\n    prefix_list[44] = string\n    prefix_list[45]\
    \ = string\n    prefix_list[46] = string\n    prefix_list[47] = string\n    prefix_list[48]\
    \ = string\n    prefix_list[49] = string\n    prefix_list[50] = string\n    prefix_list[51]\
    \ = string\n    prefix_list[52] = string\n    prefix_list[53] = string\n    prefix_list[54]\
    \ = string\n    prefix_list[55] = string\n    prefix_list[56] = string\n    prefix_list[57]\
    \ = string\n    prefix_list[58] = string\n    prefix_list[59] = string\n    prefix_list[60]\
    \ = string\n    prefix_list[61] = string\n    prefix_list[62] = string\n    prefix_list[63]\
    \ = string\n    prefix_list[64] = string\n    prefix_list[65] = string\n    prefix_list[66]\
    \ = string\n    prefix_list[67] = string\n    prefix_list[68] = string\n    prefix_list[69]\
    \ = string\n    prefix_list[70] = string\n    prefix_list[71] = string\n    prefix_list[72]\
    \ = string\n    prefix_\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpn7osqpwn.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpn7osqpwn.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpn7osqpwn.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i in 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-1] + string[i]\n    end\n    return prefix_list\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\"\
    ) == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpqdpjrji2.jl:18\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  BoundsError: attempt to\
    \ access 0-element Array{String,1} at index [1]\n  Stacktrace:\n   [1] setindex!\
    \ at ./array.jl:826 [inlined]\n   [2] all_prefixes(::String) at /tmp/tmpqdpjrji2.jl:7\n\
    \   [3] top-level scope at /tmp/tmpqdpjrji2.jl:18\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpqdpjrji2.jl:17\n  \ntest set: Error During\
    \ Test at /tmp/tmpqdpjrji2.jl:19\n  Test threw exception\n  Expression: candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]\n  BoundsError:\
    \ attempt to access 0-element Array{String,1} at index [1]\n  Stacktrace:\n  \
    \ [1] setindex! at ./array.jl:826 [inlined]\n   [2] all_prefixes(::String) at\
    \ /tmp/tmpqdpjrji2.jl:7\n   [3] top-level scope at /tmp/tmpqdpjrji2.jl:19\n  \
    \ [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpqdpjrji2.jl:17\n  \ntest set: Error During\
    \ Test at /tmp/tmpqdpjrji2.jl:20\n  Test threw exception\n  Expression: candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]\n  BoundsError: attempt to access 0-element\
    \ Array{String,1} at index [1]\n  Stacktrace:\n   [1] setindex! at ./array.jl:826\
    \ [inlined]\n   [2] all_prefixes(::String) at /tmp/tmpqdpjrji2.jl:7\n   [3] top-level\
    \ scope at /tmp/tmpqdpjrji2.jl:20\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpqdpjrji2.jl:17\n  \nTest Summary: | Error \
    \ Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqdpjrji2.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    \n    prefixes = Vector{String}()\n\
    \    \n    for i = 1:length(string)\n        prefixes += string[(i+1):end]\n \
    \   end\n    \n    return prefixes\nend\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbac\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbaca\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacac\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacaca\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacaa\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaa\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaab\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacaaabb\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacaaabbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacaaabbbc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbcc\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbccd\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbccde\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacacaaabbbccdef\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacaaabbbccdefg\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacaaabbbccdefgh\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbccdefghi\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbccdefghij\"\
    )\n</cell>\n<code language=juli\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpbvjqk50i.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpbvjqk50i.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    for prefix in string.split(\"\")\n        prefix_list += prefixes_of(prefix)\n\
    \    return prefix_list\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abc\")\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpnet_t_iq.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpnet_t_iq.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    for s in string\n        prefix_list += all_prefixes(s)\n    end\n    prefix_list\n\
    end\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"abc\")\n</cell>\n<code\
    \ language=julia-1.4>\nall_prefixes(\"ab\")\n</cell>\n<code language=julia-1.4>\n\
    all_prefixes(\"aba\")\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"abba\"\
    )\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"abbac\")\n</cell>\n<code\
    \ language=julia-1.4>\nall_prefixes(\"abbaca\")\n</cell>\n<code language=julia-1.4>\n\
    all_prefixes(\"abbacac\")\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"\
    abbacaca\")\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"abbacacaa\")\n\
    </cell>\n<code language=julia-1.4>\nall_prefixes(\"abbacacaaa\")\n</cell>\n<code\
    \ language=julia-1.4>\nall_prefixes(\"abbacacaaab\")\n</cell>\n<code language=julia-1.4>\n\
    all_prefixes(\"abbacacaaabb\")\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"\
    abbacacaaabbb\")\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"abbacacaaabbbc\"\
    )\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"abbacacaaabbbcc\")\n</cell>\n\
    <code language=julia-1.4>\nall_prefixes(\"abbacacaaabbbccc\")\n</cell>\n<code\
    \ language=julia-1.4>\nall_prefixes(\"abbacacaaabbbccca\")\n</cell>\n<code language=julia-1.4>\n\
    all_prefixes(\"abbacacaaabbbcccaa\")\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"\
    abbacacaaabbbcccaab\")\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"abbacacaaabbbcccaabb\"\
    )\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"abbacacaaabbbcccaabbb\"\
    )\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"abbacacaaabbbcccaabbbc\"\
    )\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"abba\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpfpylc5_q.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpfpylc5_q.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list = prefix_list + all_prefixes(string[1:end-1]) + [string[1:end-1]]\n\
    \    return prefix_list\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp8rbgoczf.jl:15\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] Array at ./boot.jl:405 [inlined]\n   [2] Array at ./boot.jl:424\
    \ [inlined]\n   [3] all_prefixes(::String) at /tmp/tmp8rbgoczf.jl:6\n   [4] all_prefixes(::String)\
    \ at /tmp/tmp8rbgoczf.jl:7 (repeats 52318 times)\n   [5] top-level scope at /tmp/tmp8rbgoczf.jl:15\n\
    \   [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmp8rbgoczf.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmp8rbgoczf.jl:16\n  Test threw exception\n  Expression: candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] Array at ./boot.jl:405 [inlined]\n   [2] Array at ./boot.jl:424\
    \ [inlined]\n   [3] all_prefixes(::String) at /tmp/tmp8rbgoczf.jl:6\n   [4] all_prefixes(::String)\
    \ at /tmp/tmp8rbgoczf.jl:7 (repeats 52318 times)\n   [5] top-level scope at /tmp/tmp8rbgoczf.jl:16\n\
    \   [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmp8rbgoczf.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmp8rbgoczf.jl:17\n  Test threw exception\n  Expression: candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]\n  StackOverflowError:\n  Stacktrace:\n   [1]\
    \ Array at ./boot.jl:405 [inlined]\n   [2] Array at ./boot.jl:424 [inlined]\n\
    \   [3] all_prefixes(::String) at /tmp/tmp8rbgoczf.jl:6\n   [4] all_prefixes(::String)\
    \ at /tmp/tmp8rbgoczf.jl:7 (repeats 52318 times)\n   [5] top-level scope at /tmp/tmp8rbgoczf.jl:17\n\
    \   [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmp8rbgoczf.jl:14\n  \nTest Summary: | Error \
    \ Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8rbgoczf.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    for prefix in string.split(\"\")\n        prefix_list += prefixes_of(prefix)\n\
    \    return prefix_list\n</code>\n<|/ a tags=string,algorithm,language-agnostic,prefix-tree\
    \ |>\n<| a tags=string,algorithm,language-agnostic,prefix-tree |>\nHere's a solution\
    \ in Python:\n<code>\ndef prefixes(s):\n    prefixes = []\n    for c in s:\n \
    \       prefixes.extend(prefixes_of(c))\n    return prefixes\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpua148say.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpua148say.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i in 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-2] + string[i]\n    end\n    prefix_list\nend\n</cell>\n<code\
    \ language=julia-1.4>\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp72nerkre.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp72nerkre.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i = 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-1] + string[i]\n    end\n    return prefix_list\nend\n</cell>\n\
    <code language=julia-1.4>\nall_prefixes(\"abc\")\n</cell>\n<code language=julia-1.4>\n\
    using Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9m29vsb0.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp9m29vsb0.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    prefix_list[2] = string\n    for i = 3:length(string)\n\
    \        prefix_list[i] = prefix_list[i-2] + string[i]\n    end\n    return prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpvlh99wqp.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpvlh99wqp.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i in 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-2] + string[i]\n    end\n    return prefix_list\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    prefix_length(string::String)\nusing Test\n\
    \n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp806bm1tj.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp806bm1tj.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i = 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-2] + string[i]\n    end\n    return prefix_list\nend\n</cell>\n\
    <code language=julia-1.4>\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpqz7vmt9x.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpqz7vmt9x.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i = 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-2] + string[i]\n    end\n    return prefix_list\nend\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8sxdcxx8.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp8sxdcxx8.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    for prefix in string.split(\"\")\n        prefix_list += prefixes_of(prefix)\n\
    \    return prefix_list\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbac\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbaca\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacac\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacaca\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacaa\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaa\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaab\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacaaabb\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacaaabbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacaaabbbc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbcc\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbccd\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbccdc\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacacaaabbbccdce\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacaaabbbccdcef\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacaaabbbccdcefg\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbccdcefgh\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbccdcefghi\"\
    )\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpncp6h5g1.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpncp6h5g1.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    \n    prefix_list = Vector{String}()\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[1:end])\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end+1:end-1])\n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end-1:end])\n    \n    return prefix_list\nend\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"ab\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbb\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbbc\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbbcc\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbbccc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbbcccde\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbbcccdeef\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbbcccdeeff\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbbcccdeeffg\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbbcccdeeffgg\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbbcccdeeffggh\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbbcccdeeffgghh\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbbcccdeeffgghhh\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbbcccdeeffgghhhh\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbbcccdeeffgghhhhh\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbbcccdeeffgghhhhhh\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbbcccdeeffgghhhhhhh\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbbcccdeeffgghhhhhhhh\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbbcccdeeffgghhhh\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpw6ilb0s7.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpw6ilb0s7.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list = prefix_list + all_prefixes(string[1:end-1]) \n    prefix_list\
    \ = prefix_list + all_prefixes(string[end-1:end]) \n    prefix_list = prefix_list\
    \ + all_prefixes(string[end+1:end+2])\n    prefix_list = prefix_list + all_prefixes(string[end+2:end+3])\n\
    \    prefix_list = prefix_list + all_prefixes(string[end+3:end+4])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[end+4:end+5])\n    prefix_list = prefix_list\
    \ + all_prefixes(string[end+5:end+6])\n    prefix_list = prefix_list + all_prefixes(string[end+6:end+7])\n\
    \    prefix_list = prefix_list + all_prefixes(string[end+7:end+8])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[end+8:end+9])\n    prefix_list = prefix_list\
    \ + all_prefixes(string[end+9:end+10])\n    prefix_list = prefix_list + all_prefixes(string[end+10:end+11])\n\
    \    prefix_list = prefix_list + all_prefixes(string[end+11:end+12])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[end+12:end+13])\n    prefix_list = prefix_list\
    \ + all_prefixes(string[end+13:end+14])\n    prefix_list = prefix_list + all_prefixes(string[end+14:end+15])\n\
    \    prefix_list = prefix_list + all_prefixes(string[end+15:end+16])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[end+16:end+17])\n    prefix_list = prefix_list\
    \ + all_prefixes(string[end+17:end+18])\n    prefix_list = prefix_list + all_prefixes(string[end+18:end+19])\n\
    \    prefix_list = prefix_list + all_prefixes(string[end+19:end+20])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[end+20:end+21])\n    prefix_list = prefix_list\
    \ + all_prefixes(string[end+21:end+22])\n    prefix_list = prefix_list + all_prefixes(string[end+22:end+23])\n\
    \    prefix_list = prefix_list + all_prefixes(string[end+23:end+24])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[end+24:end+25])\n    prefix_list = prefix_list\
    \ + all_prefixes(string[end+25:end+26])\n    prefix_\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpvvvquasa.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpvvvquasa.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpvvvquasa.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i = 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-1] + string[i]\n    end\n    return prefix_list\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpkqt_1vcm.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpkqt_1vcm.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i in 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-2] + string[i]\n    end\n    prefix_list\nend\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpqntndng3.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpqntndng3.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i = 2 to length(string)\n        prefix_list[i]\
    \ = prefix_list[i-2] + string[i]\n    end\n    prefix_list\nend\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"length\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmppsvu6yg7.jl:8\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmppsvu6yg7.jl:8\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list = prefix_list + prefixes(string)\n    prefix_list = prefix_list\
    \ + prefixes(string.reverse)\n    return prefix_list\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpqicykmw9.jl:16\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  UndefVarError: prefixes\
    \ not defined\n  Stacktrace:\n   [1] all_prefixes(::String) at /tmp/tmpqicykmw9.jl:7\n\
    \   [2] top-level scope at /tmp/tmpqicykmw9.jl:16\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpqicykmw9.jl:15\n  \ntest set: Error During\
    \ Test at /tmp/tmpqicykmw9.jl:17\n  Test threw exception\n  Expression: candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]\n  UndefVarError:\
    \ prefixes not defined\n  Stacktrace:\n   [1] all_prefixes(::String) at /tmp/tmpqicykmw9.jl:7\n\
    \   [2] top-level scope at /tmp/tmpqicykmw9.jl:17\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpqicykmw9.jl:15\n  \ntest set: Error During\
    \ Test at /tmp/tmpqicykmw9.jl:18\n  Test threw exception\n  Expression: candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]\n  UndefVarError: prefixes not defined\n  Stacktrace:\n\
    \   [1] all_prefixes(::String) at /tmp/tmpqicykmw9.jl:7\n   [2] top-level scope\
    \ at /tmp/tmpqicykmw9.jl:18\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpqicykmw9.jl:15\n  \nTest Summary: | Error \
    \ Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqicykmw9.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpsev_liv2.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpsev_liv2.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpsev_liv2.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i = 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-2] + string[i]\n    end\n    prefix_list\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\n    prefix_lengths(string::String)\nusing Test\n\
    \n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpkzogbm2i.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpkzogbm2i.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    \n    prefixes = Vector{String}()\n\
    \    \n    for c in string\n        prefixes += all_prefixes(c) \n    end\n  \
    \  \n    prefixes\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\"\
    )\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string and returns\
    \ the longest prefix that is a substring of the input string. For example, all_prefixes('abc')\
    \ returns ['abc', 'ab', 'a'].\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmptnjyp_g_.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmptnjyp_g_.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list = prefix_list ++ [string[1:i] for i in 1:length(string)]\n  \
    \  prefix_list = prefix_list ++ [string[i+1::] for i in 1:length(string)]\n  \
    \  prefix_list = prefix_list ++ [string[i+1::] for i in 2:length(string)]\n  \
    \  prefix_list = prefix_list ++ [string[i+1::] for i in 3:length(string)]\n  \
    \  prefix_list = prefix_list ++ [string[i+1::] for i in 4:length(string)]\n  \
    \  prefix_list = prefix_list ++ [string[i+1::] for i in 5:length(string)]\n  \
    \  prefix_list = prefix_list ++ [string[i+1::] for i in 6:length(string)]\n  \
    \  prefix_list = prefix_list ++ [string[i+1::] for i in 7:length(string)]\n  \
    \  prefix_list = prefix_list ++ [string[i+1::] for i in 8:length(string)]\n  \
    \  prefix_list = prefix_list ++ [string[i+1::] for i in 9:length(string)]\n  \
    \  prefix_list = prefix_list ++ [string[i+1::] for i in 10:length(string)]\n \
    \   prefix_list = prefix_list ++ [string[i+1::] for i in 11:length(string)]\n\
    \    prefix_list = prefix_list ++ [string[i+1::] for i in 12:length(string)]\n\
    \    prefix_list = prefix_list ++ [string[i+1::] for i in 13:length(string)]\n\
    \    prefix_list = prefix_list ++ [string[i+1::] for i in 14:length(string)]\n\
    \    prefix_list = prefix_list ++ [string[i+1::] for i in 15:length(string)]\n\
    \    prefix_list = prefix_list ++ [string[i+1::] for i in 16:length(string)]\n\
    \    prefix_list = prefix_list ++ [string[i+1::] for i in 17:length(string)]\n\
    \    prefix_list = prefix_list ++ [string[i+1::] for i in 18:length(string)]\n\
    \    prefix_list = prefix_list ++ [string[i+1::] for i in 19:length(string)]\n\
    \    prefix_list = prefix_list ++ [string[i+1::] for i in 20:length(string)]\n\
    \    prefix_list = prefix_list ++ [string[i+1::] for i in 21:length(string)]\n\
    \    prefix_list = prefix_list ++ [string[i+1::] for i in 22:length(string)]\n\
    \    prefix_list = prefix_list ++ [string[i+1::] for i in 23:length(string)]\n\
    \    prefix_list = prefix_list ++ [string[i+1::] for i in 24:length(string)]\n\
    \    prefix_list = prefix_list ++ [string[i+1::] for i in 25:length(string)]\n\
    \    prefix_list = prefix_list ++ [string[i+1::] for i in 26:length(string)]\n\
    \    prefix_list = prefix_list ++ [string[i+1::] for i in 27:length(string)]\n\
    \    prefix_list = prefix_list ++ [string[i+1::] for i in 28:length(string)]\n\
    \    prefix_list = prefix_list ++ \nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"]\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpmxd0phbz.jl:8\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpmxd0phbz.jl:8\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    \n    prefixes = Vector{String}()\n\
    \    \n    for i = 1:length(string)\n        prefixes += string[i..end]\n    end\n\
    \    \n    return prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpoiiwp9r0.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"]\n  UndefVarError: .. not defined\n  Stacktrace:\n   [1] all_prefixes(::String)\
    \ at /tmp/tmpoiiwp9r0.jl:10\n   [2] top-level scope at /tmp/tmpoiiwp9r0.jl:21\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpoiiwp9r0.jl:19\n  \ntest set: Error During\
    \ Test at /tmp/tmpoiiwp9r0.jl:22\n  Test threw exception\n  Expression: candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]\n  UndefVarError: .. not defined\n  Stacktrace:\n\
    \   [1] all_prefixes(::String) at /tmp/tmpoiiwp9r0.jl:10\n   [2] top-level scope\
    \ at /tmp/tmpoiiwp9r0.jl:22\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpoiiwp9r0.jl:19\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    1      2      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpoiiwp9r0.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[1:end])\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end+1:end-1])\n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end-1:end])\n    return prefix_list\nend\n</cell>\n<code\
    \ language=julia-1.3>\nall_prefixes(\"ab\")\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a string and returns the longest prefix that is a substring\
    \ of the input string. For example, all_prefixes(\"ab\") should return [\"a\"\
    , \"ab\"]\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp55671yqe.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp55671yqe.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    prefix_list[2] = string\n    prefix_list[3]\
    \ = string\n    prefix_list[4] = string\n    prefix_list[5] = string\n    prefix_list[6]\
    \ = string\n    prefix_list[7] = string\n    prefix_list[8] = string\n    prefix_list[9]\
    \ = string\n    prefix_list[10] = string\n    prefix_list[11] = string\n    prefix_list[12]\
    \ = string\n    prefix_list[13] = string\n    prefix_list[14] = string\n    prefix_list[15]\
    \ = string\n    prefix_list[16] = string\n    prefix_list[17] = string\n    prefix_list[18]\
    \ = string\n    prefix_list[19] = string\n    prefix_list[20] = string\n    prefix_list[21]\
    \ = string\n    prefix_list[22] = string\n    prefix_list[23] = string\n    prefix_list[24]\
    \ = string\n    prefix_list[25] = string\n    prefix_list[26] = string\n    prefix_list[27]\
    \ = string\n    prefix_list[28] = string\n    prefix_list[29] = string\n    prefix_list[30]\
    \ = string\n    prefix_list[31] = string\n    prefix_list[32] = string\n    prefix_list[33]\
    \ = string\n    prefix_list[34] = string\n    prefix_list[35] = string\n    prefix_list[36]\
    \ = string\n    prefix_list[37] = string\n    prefix_list[38] = string\n    prefix_list[39]\
    \ = string\n    prefix_list[40] = string\n    prefix_list[41] = string\n    prefix_list[42]\
    \ = string\n    prefix_list[43] = string\n    prefix_list[44] = string\n    prefix_list[45]\
    \ = string\n    prefix_list[46] = string\n    prefix_list[47] = string\n    prefix_list[48]\
    \ = string\n    prefix_list[49] = string\n    prefix_list[50] = string\n    prefix_list[51]\
    \ = string\n    prefix_list[52] = string\n    prefix_list[53] = string\n    prefix_list[54]\
    \ = string\n    prefix_list[55] = string\n    prefix_list[56] = string\n    prefix_list[57]\
    \ = string\n    prefix_list[58] = string\n    prefix_list[59] = string\n    prefix_list[60]\
    \ = string\n    prefix_list[61] = string\n    prefix_list[62] = string\n    prefix_list[63]\
    \ = string\n    prefix_list[64] = string\n    prefix_list[65] = string\n    prefix_list[66]\
    \ = string\n    prefix_list[67] = string\n    prefix_list[68] = string\n    prefix_list[69]\
    \ = string\n    prefix_list[70] = string\n    prefix_list[71] = string\n    prefix_list[72]\
    \ = string\n\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp5v7wk62g.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp5v7wk62g.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp5v7wk62g.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i = 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-1] + string[i]\n    end\n    return prefix_list\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\"\
    ) == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmprr4byxvs.jl:18\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  BoundsError: attempt to\
    \ access 0-element Array{String,1} at index [1]\n  Stacktrace:\n   [1] setindex!\
    \ at ./array.jl:826 [inlined]\n   [2] all_prefixes(::String) at /tmp/tmprr4byxvs.jl:7\n\
    \   [3] top-level scope at /tmp/tmprr4byxvs.jl:18\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmprr4byxvs.jl:17\n  \ntest set: Error During\
    \ Test at /tmp/tmprr4byxvs.jl:19\n  Test threw exception\n  Expression: candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]\n  BoundsError:\
    \ attempt to access 0-element Array{String,1} at index [1]\n  Stacktrace:\n  \
    \ [1] setindex! at ./array.jl:826 [inlined]\n   [2] all_prefixes(::String) at\
    \ /tmp/tmprr4byxvs.jl:7\n   [3] top-level scope at /tmp/tmprr4byxvs.jl:19\n  \
    \ [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmprr4byxvs.jl:17\n  \ntest set: Error During\
    \ Test at /tmp/tmprr4byxvs.jl:20\n  Test threw exception\n  Expression: candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]\n  BoundsError: attempt to access 0-element\
    \ Array{String,1} at index [1]\n  Stacktrace:\n   [1] setindex! at ./array.jl:826\
    \ [inlined]\n   [2] all_prefixes(::String) at /tmp/tmprr4byxvs.jl:7\n   [3] top-level\
    \ scope at /tmp/tmprr4byxvs.jl:20\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmprr4byxvs.jl:17\n  \nTest Summary: | Error \
    \ Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprr4byxvs.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i = 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-1] + string[i]\n    end\n    prefix_list\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpu1mq8ru_.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpu1mq8ru_.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i = 2 to length(string)\n        prefix_list[i]\
    \ = prefix_list[i-2] + string[i]\n    end\n    prefix_list\nend\n</cell>\n<code\
    \ language=julia-1.4>\n\"\"\"\n    prefix_sum(string::String)\nusing Test\n\n\
    @testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"length\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpjs8sfw2l.jl:8\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpjs8sfw2l.jl:8\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    for c in string\n        prefix_list += all_prefixes(c)\n    end\n    prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the longest prefix\
    \ that is a substring of the original string. For example, all_prefixes(\"abc\"\
    ) returns [\"a\", \"ab\", \"abc\"] and all_prefixes(\"ab\") returns [\"ab\"].\
    \ Make sure your function works for all cases.\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpx65tflqy.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpx65tflqy.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list = prefix_list + all_prefixes(string[1:end-1]) + [string[1:end-1]]\n\
    \    return prefix_list\nend\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"\
    ab\")\n</cell>\n<text>\nExercise 4\nWrite a function that takes a string and returns\
    \ the longest prefix that is a substring of the input string. For example, all_prefixes(\"\
    ab\") should return [\"a\", \"ab\"]. Assume that all_prefixes is defined above.\n\
    using Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpfrwi6473.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpfrwi6473.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i = 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-2] + string[i]\n    end\n    return prefix_list\nend\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a string and returns the number of times each character\
    \ appears in the string. \nFor example, for the string \"abc\" the function should\
    \ return {\"a\" => 1, \"b\" => 1, \"c\" => 2}.\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4nrjx849.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp4nrjx849.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    \n    prefix_list = Vector{String}()\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string[1:end])\n    return prefix_list\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpmbnl7i_6.jl:17\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  UndefVarError: all_prefixes_helper\
    \ not defined\n  Stacktrace:\n   [1] all_prefixes(::String) at /tmp/tmpmbnl7i_6.jl:8\n\
    \   [2] top-level scope at /tmp/tmpmbnl7i_6.jl:17\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpmbnl7i_6.jl:16\n  \ntest set: Error During\
    \ Test at /tmp/tmpmbnl7i_6.jl:18\n  Test threw exception\n  Expression: candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]\n  UndefVarError:\
    \ all_prefixes_helper not defined\n  Stacktrace:\n   [1] all_prefixes(::String)\
    \ at /tmp/tmpmbnl7i_6.jl:8\n   [2] top-level scope at /tmp/tmpmbnl7i_6.jl:18\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpmbnl7i_6.jl:16\n  \ntest set: Error During\
    \ Test at /tmp/tmpmbnl7i_6.jl:19\n  Test threw exception\n  Expression: candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"]\n  UndefVarError: all_prefixes_helper not defined\n\
    \  Stacktrace:\n   [1] all_prefixes(::String) at /tmp/tmpmbnl7i_6.jl:8\n   [2]\
    \ top-level scope at /tmp/tmpmbnl7i_6.jl:19\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpmbnl7i_6.jl:16\n  \nTest Summary: | Error \
    \ Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmbnl7i_6.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefix_list = Vector{String}()\n\
    \    for prefix in string.split(\"\")\n        prefix_list += prefixes_of(prefix)\n\
    \    return prefix_list\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abc\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and\
    \ returns the longest prefix that is a substring of the input string. For example,\
    \ all_prefixes(\"abcabc\") should return \"abc\".\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpfth_x44r.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpfth_x44r.jl:11\n"
  exit_code: 1
  status: Exception
