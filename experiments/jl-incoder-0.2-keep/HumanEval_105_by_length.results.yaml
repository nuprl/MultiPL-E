name: HumanEval_105_by_length
language: julia
results:
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = sort(arr)\n\
    \    arr = reverse(arr)\n    \n    arr = map(x -> \"One\" if x == 1 \n       \
    \ else \"Two\" if x == 2\n        else \"Three\" if x == 3\n        else \"Four\"\
    \ if x == 4\n        else \"Five\" if x == 5\n        else \"Six\" if x == 6\n\
    \        else \"Seven\" if x == 7\n        else \"Eight\" if x == 8\n        else\
    \ \"Nine\", arr)\n    \n    return arr\nend\nusing Test\n\n@testset begin\n\n\
    candidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3al7ib4f.jl:27\nin expression starting at\
    \ /tmp/tmp3al7ib4f.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    arr = sort(arr)\n    arr\
    \ = reverse(arr)\n    arr = arr .- 1 .+ 1\n    arr = arr .- \"One\" .- \"Two\"\
    \ .- \"Three\" .- \"Four\" .- \"Five\" .- \"Six\" .- \"Seven\" .- \"Eight\" .-\
    \ \"Nine\"\n    return arr\nend\n</cell>\n<code language=julia-1.5>\nby_length(arr)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a vector of integers\
    \ and returns a vector of strings that represent each of the numbers in the vector\
    \ in reverse order.\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t\
    @test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphe2ca9vf.jl:29\nin expression starting at\
    \ /tmp/tmphe2ca9vf.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    arr = sort(arr)\n    arr\
    \ = reverse(arr)\n    arr = map(x -> \"One\"..\"Nine\"[x], arr)\n    return arr\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpq53fky81.jl:33\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  BoundsError: attempt\
    \ to access 4-codeunit String at index [8]\n  Stacktrace:\n    [1] checkbounds\n\
    \      @ ./strings/basic.jl:216 [inlined]\n    [2] codeunit\n      @ ./strings/string.jl:102\
    \ [inlined]\n    [3] getindex\n      @ ./strings/string.jl:223 [inlined]\n   \
    \ [4] (::var\"#1#2\")(x::Int64)\n      @ Main /tmp/tmpq53fky81.jl:25\n    [5]\
    \ iterate\n      @ ./generator.jl:47 [inlined]\n    [6] _collect(c::Vector{Int64},\
    \ itr::Base.Generator{Vector{Int64}, var\"#1#2\"}, #unused#::Base.EltypeUnknown,\
    \ isz::Base.HasShape{1})\n      @ Base ./array.jl:744\n    [7] collect_similar\n\
    \      @ ./array.jl:653 [inlined]\n    [8] map\n      @ ./abstractarray.jl:2867\
    \ [inlined]\n    [9] by_length(arr::Vector{Int64})\n      @ Main /tmp/tmpq53fky81.jl:25\n\
    \   [10] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [11] macro expansion\n      @ /tmp/tmpq53fky81.jl:33 [inlined]\n\
    \   [12] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [13] top-level scope\n      @ /tmp/tmpq53fky81.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpq53fky81.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  BoundsError: attempt to access 4-codeunit\
    \ String at index [55]\n  Stacktrace:\n    [1] checkbounds\n      @ ./strings/basic.jl:216\
    \ [inlined]\n    [2] codeunit\n      @ ./strings/string.jl:102 [inlined]\n   \
    \ [3] getindex\n      @ ./strings/string.jl:223 [inlined]\n    [4] (::var\"#1#2\"\
    )(x::Int64)\n      @ Main /tmp/tmpq53fky81.jl:25\n    [5] iterate\n      @ ./generator.jl:47\
    \ [inlined]\n    [6] _collect(c::Vector{Int64}, itr::Base.Generator{Vector{Int64},\
    \ var\"#1#2\"}, #unused#::Base.EltypeUnknown, isz::Base.HasShape{1})\n      @\
    \ Base ./array.jl:744\n    [7] collect_similar\n      @ ./array.jl:653 [inlined]\n\
    \    [8] map\n      @ ./abstractarray.jl:2867 [inlined]\n  "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpq53fky81.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = sort(arr)\n\
    \    arr = reverse(arr)\n    arr = arr |> Vector{String}\n    \n    arr = arr\
    \ |> filter(x->x>1 && x<9) |> Vector{String}\n    \n    arr = arr |> filter(x->x>0\
    \ && x<10) |> Vector{String}\n    \n    arr = arr |> filter(x->x>1 && x<9) |>\
    \ Vector{String}\n    \n    arr = arr |> filter(x->x>0 && x<10) |> Vector{String}\n\
    \    \n    arr = arr |> filter(x->x>1 && x<9) |> Vector{String}\n    \n    arr\
    \ = arr |> filter(x->x>0 && x<10) |> Vector{String}\n    \n    arr = arr |> filter(x->x>1\
    \ && x<9) |> Vector{String}\n    \n    arr = arr |> filter(x->x>0 && x<10) |>\
    \ Vector{String}\n    \n    arr = arr |> filter(x->x>1 && x<9) |> Vector{String}\n\
    \    \n    arr = arr |> filter(x->x>0 && x<10) |> Vector{String}\n    \n    arr\
    \ = arr |> filter(x->x>1 && x<9) |> Vector{String}\n    \n    arr = arr |> filter(x->x>0\
    \ && x<10) |> Vector{String}\n    \n    arr = arr |> filter(x->x>1 && x<9) |>\
    \ Vector{String}\n    \n    arr = arr |> filter(x->x>0 && x<10) |> Vector{String}\n\
    \    \n    arr = arr |> filter(x->x>1 && x<9) |> Vector{String}\n    \n    arr\
    \ = arr |> filter(x->x>0 && x<10) |> Vector{String}\n    \n    arr = arr |> filter(x->x>1\
    \ && x<9) |> Vector{String}\n    \n    arr = arr |> filter(x->x>0 && x<10) |>\
    \ Vector{String}\n    \n    arr = arr |> filter(x->x>1 && x<9) |> Vector{String}\n\
    \    \n    arr = arr |> filter(x->x>0 && x<10) |> Vector{String}\nusing Test\n\
    \n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
    One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp_ue9l2vg.jl:22\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_ue9l2vg.jl:1\n\
    in expression starting at /tmp/tmp_ue9l2vg.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr2 = reverse(arr)\n\
    \    \n    arr3 = sort(arr2)\n    \n    arr4 = reverse(arr3)\n    \n    arr5 =\
    \ sort(arr4)\n    \n    arr6 = reverse(arr5)\n    \n    arr7 = sort(arr6)\n  \
    \  \n    arr8 = reverse(arr7)\n    \n    arr9 = sort(arr8)\n    \n    arr10 =\
    \ reverse(arr9)\n    \n    arr11 = sort(arr10)\n    \n    arr12 = reverse(arr11)\n\
    \    \n    arr13 = sort(arr12)\n    \n    arr14 = reverse(arr13)\n    \n    arr15\
    \ = sort(arr14)\n    \n    arr16 = reverse(arr15)\n    \n    arr17 = sort(arr16)\n\
    \    \n    arr18 = reverse(arr17)\n    \n    arr19 = sort(arr18)\n    \n    arr20\
    \ = reverse(arr19)\n    \n    arr21 = sort(arr20)\n    \n    arr22 = reverse(arr21)\n\
    \    \n    arr23 = sort(arr22)\n    \n    arr24 = reverse(arr23)\n    \n    arr25\
    \ = sort(arr24)\n    \n    arr26 = reverse(arr25)\n    \n    arr27 = sort(arr26)\n\
    \    \n    arr28 = reverse(arr27)\n    \n    arr29 = sort(arr28)\n    \n    arr30\
    \ = reverse(arr29)\n    \n    arr31 = sort(arr30)\n    \n    arr32 = reverse(arr31)\n\
    \    \n    arr33 = sort(arr32)\n    \n    arr34 = reverse(arr33)\n    \n    arr35\
    \ = sort(arr34)\n    \n    arr36 = reverse(arr35)\n    \n    arr37 = sort(arr36)\n\
    \    \n    arr38 = reverse(arr37)\n    \n    arr39 = sort(arr38)\n    \n    arr40\
    \ = reverse(arr39)\n    \n    arr41 = sort(arr40)\n    \n    arr42 = reverse(arr41)\n\
    \    \n    arr43 = sort(arr42)\n    \n    arr44 = reverse(arr43)\n    \n    arr45\
    \ = sort(arr44)\n    \n    arr46 = reverse(arr45)\n    \n    arr47 = sort(arr46)\n\
    \    \n    arr48 = reverse(arr47)\n    \n    arr49 = sort(arr48)\n    \n    arr50\
    \ = reverse(arr49)\n    \n    arr51 = sort(arr50)\n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3])\
    \ == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmphjbj_nx5.jl:22\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphjbj_nx5.jl:1\n\
    in expression starting at /tmp/tmphjbj_nx5.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = sort(arr)\n\
    \    arr = reverse(arr)\n    \n    arr = arr .- 1 \n    \n    arr = arr .+ 1 \n\
    \    \n    arr = arr .- 1 \n    \n    arr = arr .+ 1 \n    \n    arr = arr .-\
    \ 1 \n    \n    arr = arr .+ 1 \n    \n    arr = arr .- 1 \n    \n    arr = arr\
    \ .+ 1 \n    \n    arr = arr .- 1 \n    \n    arr = arr .+ 1 \n    \n    arr =\
    \ arr .- 1 \n    \n    arr = arr .+ 1 \n    \n    arr = arr .- 1 \n    \n    arr\
    \ = arr .+ 1 \n    \n    arr = arr .- 1 \n    \n    arr = arr .+ 1 \n    \n  \
    \  arr = arr .- 1 \n    \n    arr = arr .+ 1 \n    \n    arr = arr .- 1 \n   \
    \ \n    arr = arr .+ 1 \n    \n    arr = arr .- 1 \n    \n    arr = arr .+ 1 \n\
    \    \n    arr = arr .- 1 \n    \n    arr = arr .+ 1 \n    \n    arr = arr .-\
    \ 1 \n    \n    arr = arr .+ 1 \n    \n    arr = arr .- 1 \n    \n    arr = arr\
    \ .+ 1 \n    \n    arr = arr .- 1 \n    \n    arr = arr .+ 1 \n    \n    arr =\
    \ arr .- 1 \n    \n    arr = arr .+ 1 \n    \n    arr = arr .- 1 \n    \n    arr\
    \ = arr .+ 1 \n    \n    arr = arr .- 1 \n    \n    arr = arr .+ 1 \n    \n  \
    \  arr = arr .- 1 \n    \n    arr = arr .+ 1 \n    \n    arr = arr .- 1 \n   \
    \ \n    arr = arr .+ 1 \n    \n    arr = arr .- 1 \n    \n    arr = arr .+ 1 \n\
    \    \n    arr = arr .- 1 \n    \n    arr = arr .+ 1 \n    \n    arr = arr .-\
    \ 1 \n    \n    arr = arr .+ 1 \n    \n    arr = arr .- 1 \n    \n    arr = arr\
    \ .+ 1 \n    \n    arr = arr .- 1 \n    \n    arr = arr .+ 1 \n    \n    arr =\
    \ arr .- 1 \n    \n    arr = arr .+ 1 \n    \n    arr = arr .- 1 \n    \n    arr\
    \ = arr .+ 1 \n    \n    arr = arr .- 1 \n    \n    arr = arr\nusing Test\n\n\
    @testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxvkb59od.jl:22\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxvkb59od.jl:1\n\
    in expression starting at /tmp/tmpxvkb59od.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = sort(arr)\n\
    \    arr = reverse(arr)\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7oped97f.jl:22\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7oped97f.jl:1\n\
    in expression starting at /tmp/tmp7oped97f.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    arr = sort(arr)\n    arr\
    \ = reverse(arr)\n    arr = arr |> Vector{String}\n    arr = arr |> filter(x->x\
    \ != \"\") |> Vector{String}\n    \n    arr = arr |> filter(x->x != \"One\" &&\
    \ x != \"Two\" && x != \"Three\" && x != \"Four\" && x != \"Five\" && x != \"\
    Six\" && x != \"Seven\" && x != \"Eight\" && x != \"Nine\") |> Vector{String}\n\
    \    \n    arr = arr |> filter(x->x != \"One\" && x != \"Two\" && x != \"Three\"\
    \ && x != \"Four\" && x != \"Five\" && x != \"Six\" && x != \"Seven\" && x !=\
    \ \"Eight\" && x != \"Nine\") |> Vector{String}\n    \n    arr = arr |> filter(x->x\
    \ != \"One\" && x != \"Two\" && x != \"Three\" && x != \"Four\" && x != \"Five\"\
    \ && x != \"Six\" && x != \"Seven\" && x != \"Eight\" && x != \"Nine\") |> Vector{String}\n\
    \    \n    arr = arr |> filter(x->x != \"One\" && x != \"Two\" && x != \"Three\"\
    \ && x != \"Four\" && x != \"Five\" && x != \"Six\" && x != \"Seven\" && x !=\
    \ \"Eight\" && x != \"Nine\") |> Vector{String}\n    \n    arr = arr |> filter(x->x\
    \ != \"One\" && x != \"Two\" && x != \"Three\" && x != \"Four\" && x != \"Five\"\
    \ && x != \"Six\" && x != \"Seven\" && x != \"Eight\" && x != \"Nine\") |> Vector{String}\n\
    \    \n    arr = arr |> filter(x->x != \"One\" && x != \"Two\" && x != \"Three\"\
    \ && x != \"Four\" && x != \"Five\" && x != \"Six\" && x != \"Seven\" && x !=\
    \ \"Eight\" && x != \"Nine\") |> Vector{String}\n    \n    arr = arr |> filter(x->x\
    \ != \"One\" && x != \"Two\" && x != \"Three\" && x != \"Four\" && x != \"Five\"\
    \ && x != \"Six\" && x != \"Seven\" && x != \"Eight\" && x != \"Nine\") |> Vector{String}\n\
    \    \n    arr = arr |> filter(x->x != \"One\" && x != \"Two\" && x != \"Three\"\
    \ && x != \"Four\" && x != \"Five\" && x != \"Six\" && x != \"Seven\" && x !=\
    \ \"Eight\" && x != \"Nine\") |> Vector{String}\nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjeayjr8v.jl:22\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjeayjr8v.jl:1\n\
    in expression starting at /tmp/tmpjeayjr8v.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = sort(arr)\n\
    \    arr = reverse(arr)\n    arr = arr .- arr[1]\n    arr = arr .- arr[2]\n  \
    \  arr = arr .- arr[3]\n    arr = arr .- arr[4]\n    arr = arr .- arr[5]\n   \
    \ arr = arr .- arr[6]\n    arr = arr .- arr[7]\n    arr = arr .- arr[8]\n    arr\
    \ = arr .- arr[9]\n    arr = arr .- arr[0]\n    \n    return arr\nend\n</cell>\n\
    <code language=julia-1.5>\nby_length(arr)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes an array of integers and returns the sum of the integers\
    \ in the array.\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpysa2w3pd.jl:39\nin expression starting at\
    \ /tmp/tmpysa2w3pd.jl:39\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    arr = sort(arr)\n    arr\
    \ = reverse(arr)\n    arr = arr .- arr .+ 1 \n    arr = arr .- arr .+ 9\n    arr\
    \ = arr .- arr .+ 1 \n    arr = arr .- arr .+ 9\n    arr = arr .- arr .+ 1 \n\
    \    arr = arr .- arr .+ 9\n    arr = arr .- arr .+ 1 \n    arr = arr .- arr .+\
    \ 9\n    arr = arr .- arr .+ 1 \n    arr = arr .- arr .+ 9\n    arr = arr .- arr\
    \ .+ 1 \n    arr = arr .- arr .+ 9\n    arr = arr .- arr .+ 1 \n    arr = arr\
    \ .- arr .+ 9\n    arr = arr .- arr .+ 1 \n    arr = arr .- arr .+ 9\n    arr\
    \ = arr .- arr .+ 1 \n    arr = arr .- arr .+ 9\n    arr = arr .- arr .+ 1 \n\
    \    arr = arr .- arr .+ 9\n    arr = arr .- arr .+ 1 \n    arr = arr .- arr .+\
    \ 9\n    arr = arr .- arr .+ 1 \n    arr = arr .- arr .+ 9\n    arr = arr .- arr\
    \ .+ 1 \n    arr = arr .- arr .+ 9\n    arr = arr .- arr .+ 1 \n    arr = arr\
    \ .- arr .+ 9\n    arr = arr .- arr .+ 1 \n    arr = arr .- arr .+ 9\n    arr\
    \ = arr .- arr .+ 1 \n    arr = arr .- arr .+ 9\n    arr = arr .- arr .+ 1 \n\
    \    arr = arr .- arr .+ 9\n    arr = arr .- arr .+ 1 \n    arr = arr .- arr .+\
    \ 9\n    arr = arr .- arr .+ 1 \n    arr = arr .- arr .+ 9\n    arr = arr .- arr\
    \ .+ 1 \n    arr = arr .- arr .+ 9\n    arr = arr .- arr .+ 1 \n    arr = arr\
    \ .- arr .+ 9\n    arr = arr .- arr .+ 1 \n    arr = arr .- arr .+ 9\n    arr\
    \ = arr .- arr .+ 1 \n    arr = arr .- arr .+ 9\n    arr = arr .- arr .+ 1 \n\
    \    arr = arr .- arr .+ 9\n    arr = arr .- arr .+ 1 \n    arr = arr .- arr .+\
    \ 9\n    arr = \nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp9nll5ftx.jl:22\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9nll5ftx.jl:1\n\
    in expression starting at /tmp/tmp9nll5ftx.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = sort(arr)\n\
    \    arr = reverse(arr)\n    \n    arr2 = copy(arr)\n    \n    arr2 = arr2[arr2\
    \ .!= 0]\n    \n    arr2 = arr2[arr2 .!= 1]\n    \n    arr2 = arr2[arr2 .!= -1]\n\
    \    \n    arr2 = arr2[arr2 .!= -2]\n    \n    arr2 = arr2[arr2 .!= -3]\n    \n\
    \    arr2 = arr2[arr2 .!= -4]\n    \n    arr2 = arr2[arr2 .!= -5]\n    \n    arr2\
    \ = arr2[arr2 .!= -6]\n    \n    arr2 = arr2[arr2 .!= -7]\n    \n    arr2 = arr2[arr2\
    \ .!= -8]\n    \n    arr2 = arr2[arr2 .!= -9]\n    \n    arr2 = arr2[arr2 .!=\
    \ 10]\n    \n    arr2 = arr2[arr2 .!= 11]\n    \n    arr2 = arr2[arr2 .!= 12]\n\
    \    \n    arr2 = arr2[arr2 .!= 13]\n    \n    arr2 = arr2[arr2 .!= 14]\n    \n\
    \    arr2 = arr2[arr2 .!= 15]\n    \n    arr2 = arr2[arr2 .!= 16]\n    \n    arr2\
    \ = arr2[arr2 .!= 17]\n    \n    arr2 = arr2[arr2 .!= 18]\n    \n    arr2 = arr2[arr2\
    \ .!= 19]\n    \n    arr2 = arr2[arr2 .!= 20]\n    \n    arr2 = arr2[arr2 .!=\
    \ 21]\n    \n    arr2 = arr2[arr2 .!= 22]\n    \n    arr2 = arr2[arr2 .!= 23]\n\
    \    \n    arr2 = arr2[arr2 .!= 24]\n    \n    arr2 = arr2[arr2 .!= 25]\n    \n\
    \    arr2 = arr2[arr2 .!= 26]\n    \n    arr2 = arr2[arr2 .!= 27]\n    \n    arr2\
    \ = arr2[arr2 .!= 28]\n    \n    arr2 = arr2[arr2 .!= 29]\n    \n    arr2 = arr2[arr2\
    \ .!= 30]\n    \n    arr2 = arr2[arr2 .!= 31]\n    \n    arr2 = arr2[arr2 .!=\
    \ 32]\n    \n    arr2 = arr2[arr2 .!= 33]\n    \n    arr2 = arr2[\nusing Test\n\
    \n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
    One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphe6mazf1.jl:1\nin expression starting at /tmp/tmphe6mazf1.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = sort(arr)\n\
    \    arr = reverse(arr)\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .+\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .+ arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .+ arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .+ arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .+ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .+\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .+ arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .+ arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .+ arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .+ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .+\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .+ arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .+ arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .+ arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .+ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .+\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .+ arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .+ arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .+ arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .+ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .+\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .+ arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .+ arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .+ arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .+ arr[1]\n\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpopq1sa7r.jl:22\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpopq1sa7r.jl:1\n\
    in expression starting at /tmp/tmpopq1sa7r.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    arr = sort(arr)\n    arr\
    \ = reverse(arr)\n    arr = arr .- arr[1]\n    arr = arr .- arr[2]\n    arr =\
    \ arr .- arr[3]\n    arr = arr .- arr[4]\n    arr = arr .- arr[5]\n    arr = arr\
    \ .- arr[6]\n    arr = arr .- arr[7]\n    arr = arr .- arr[8]\n    arr = arr .-\
    \ arr[9]\n    arr = arr .- arr[0]\n    return arr\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3])\
    \ == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmpqh1uekj4.jl:42\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  BoundsError: attempt\
    \ to access 8-element Vector{Int64} at index [9]\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./array.jl:861 [inlined]\n   [2] by_length(arr::Vector{Int64})\n     @\
    \ Main /tmp/tmpqh1uekj4.jl:33\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpqh1uekj4.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpqh1uekj4.jl:41\ntest set:\
    \ Error During Test at /tmp/tmpqh1uekj4.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  BoundsError: attempt to\
    \ access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./array.jl:861 [inlined]\n   [2] by_length(arr::Vector{Int64})\n     @\
    \ Main /tmp/tmpqh1uekj4.jl:25\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpqh1uekj4.jl:43 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpqh1uekj4.jl:41\ntest set:\
    \ Error During Test at /tmp/tmpqh1uekj4.jl:44\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpqh1uekj4.jl:28\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpqh1uekj4.jl:44 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqh1uekj4.jl:39\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = sort(arr)\n\
    \    arr = reverse(arr)\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpv0fahmym.jl:22\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpv0fahmym.jl:1\n\
    in expression starting at /tmp/tmpv0fahmym.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = sort(arr)\n\
    \    arr = reverse(arr)\n    arr = arr .- arr[1]\n    arr = arr .- arr[2]\n  \
    \  arr = arr .- arr[3]\n    arr = arr .- arr[4]\n    arr = arr .- arr[5]\n   \
    \ arr = arr .- arr[6]\n    arr = arr .- arr[7]\n    arr = arr .- arr[8]\n    arr\
    \ = arr .- arr[9]\n    arr = arr .- arr[1]\n    arr = arr .- arr[2]\n    arr =\
    \ arr .- arr[3]\n    arr = arr .- arr[4]\n    arr = arr .- arr[5]\n    arr = arr\
    \ .- arr[6]\n    arr = arr .- arr[7]\n    arr = arr .- arr[8]\n    arr = arr .-\
    \ arr[9]\n    arr = arr .- arr[1]\n    arr = arr .- arr[2]\n    arr = arr .- arr[3]\n\
    \    arr = arr .- arr[4]\n    arr = arr .- arr[5]\n    arr = arr .- arr[6]\n \
    \   arr = arr .- arr[7]\n    arr = arr .- arr[8]\n    arr = arr .- arr[9]\n  \
    \  arr = arr .- arr[1]\n    arr = arr .- arr[2]\n    arr = arr .- arr[3]\n   \
    \ arr = arr .- arr[4]\n    arr = arr .- arr[5]\n    arr = arr .- arr[6]\n    arr\
    \ = arr .- arr[7]\n    arr = arr .- arr[8]\n    arr = arr .- arr[9]\n    arr =\
    \ arr .- arr[1]\n    arr = arr .- arr[2]\n    arr = arr .- arr[3]\n    arr = arr\
    \ .- arr[4]\n    arr = arr .- arr[5]\n    arr = arr .- arr[6]\n    arr = arr .-\
    \ arr[7]\n    arr = arr .- arr[8]\n    arr = arr .- arr[9]\n    arr = arr .- arr[1]\n\
    \    arr = arr .- arr[2]\n    arr = arr .- arr[3]\n    arr = arr .- arr[4]\n \
    \   arr = arr .- arr[5]\n    arr = arr .- arr[6]\n    arr = arr .- arr[7]\n  \
    \  arr = arr .- arr[8]\n    arr = arr .- arr[9]\n    arr = arr .- arr[1]\n   \
    \ arr = arr .- arr[2]\n    arr = arr .- arr[3]\n    arr = arr .- arr[4]\n    arr\
    \ = arr .- arr[5]\n    arr = arr .- arr[6]\n    arr = arr .- arr[7\nusing Test\n\
    \n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
    One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpufvpz0wb.jl:1\nin expression starting at /tmp/tmpufvpz0wb.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = sort(arr)\n\
    \    arr = reverse(arr)\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpn4l1itmb.jl:22\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpn4l1itmb.jl:1\n\
    in expression starting at /tmp/tmpn4l1itmb.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    arr = sort(arr)\n    arr\
    \ = reverse(arr)\n    arr = map(x -> \"One\"[x], arr)\n    return arr\nend\n</cell>\n\
    <code language=julia-1.5>\nby_length(arr)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes an array of integers and returns the number of integers\
    \ that are between 1 and 9 inclusive.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp63s3cgr9.jl:28\nin expression starting at\
    \ /tmp/tmp63s3cgr9.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = sort(arr)\n\
    \    arr = reverse(arr)\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp24b0546_.jl:22\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp24b0546_.jl:1\n\
    in expression starting at /tmp/tmp24b0546_.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    arr = sort(arr)\n    arr\
    \ = reverse(arr)\n    arr = arr |> Vector{String}\n    arr = arr |> filter(x->x>1\
    \ && x<9) |> Vector{String}\n    arr\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length(arr)\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector\
    \ of integers and returns a vector of strings that represent each of the numbers\
    \ in the vector in descending order.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9troemkg.jl:29\nin expression starting at\
    \ /tmp/tmp9troemkg.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    arr = sort(arr)\n    arr\
    \ = reverse(arr)\n    arr = arr .- arr[1]\n    arr = arr .- arr[2]\n    arr =\
    \ arr .- arr[3]\n    arr = arr .- arr[4]\n    arr = arr .- arr[5]\n    arr = arr\
    \ .- arr[6]\n    arr = arr .- arr[7]\n    arr = arr .- arr[8]\n    arr = arr .-\
    \ arr[9]\n    arr = arr .- arr[0]\n    arr = arr .- arr[1]\n    arr = arr .- arr[2]\n\
    \    arr = arr .- arr[3]\n    arr = arr .- arr[4]\n    arr = arr .- arr[5]\n \
    \   arr = arr .- arr[6]\n    arr = arr .- arr[7]\n    arr = arr .- arr[8]\n  \
    \  arr = arr .- arr[9]\n    arr = arr .- arr[0]\n    arr = arr .- arr[1]\n   \
    \ arr = arr .- arr[2]\n    arr = arr .- arr[3]\n    arr = arr .- arr[4]\n    arr\
    \ = arr .- arr[5]\n    arr = arr .- arr[6]\n    arr = arr .- arr[7]\n    arr =\
    \ arr .- arr[8]\n    arr = arr .- arr[9]\n    arr = arr .- arr[0]\n    arr = arr\
    \ .- arr[1]\n    arr = arr .- arr[2]\n    arr = arr .- arr[3]\n    arr = arr .-\
    \ arr[4]\n    arr = arr .- arr[5]\n    arr = arr .- arr[6]\n    arr = arr .- arr[7]\n\
    \    arr = arr .- arr[8]\n    arr = arr .- arr[9]\n    arr = arr .- arr[0]\n \
    \   arr = arr .- arr[1]\n    arr = arr .- arr[2]\n    arr = arr .- arr[3]\n  \
    \  arr = arr .- arr[4]\n    arr = arr .- arr[5]\n    arr = arr .- arr[6]\n   \
    \ arr = arr .- arr[7]\n    arr = arr .- arr[8]\n    arr = arr .- arr[9]\n    arr\
    \ = arr .- arr[0]\n    arr = arr .- arr[1]\n    arr = arr .- arr[2]\n    arr =\
    \ arr .- arr[3]\n    arr = arr .- arr[4]\n    arr = arr .- arr[5]\n    arr = arr\
    \ .- arr[6]\n    arr = arr .- arr[7]\n    arr = arr .- arr[8]\n    arr = arr .-\
    \ arr[9]\n    arr = arr .- arr[0]\n    arr = arr .- arr[1]\n    arr = \nusing\
    \ Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1,\
    \ 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpguhdfleo.jl:22\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpguhdfleo.jl:1\n\
    in expression starting at /tmp/tmpguhdfleo.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    arr = sort(arr)\n    arr\
    \ = reverse(arr)\n    arr = replace(arr, 1, \"One\")\n    arr = replace(arr, 2,\
    \ \"Two\")\n    arr = replace(arr, 3, \"Three\")\n    arr = replace(arr, 4, \"\
    Four\")\n    arr = replace(arr, 5, \"Five\")\n    arr = replace(arr, 6, \"Six\"\
    )\n    arr = replace(arr, 7, \"Seven\")\n    arr = replace(arr, 8, \"Eight\")\n\
    \    arr = replace(arr, 9, \"Nine\")\n    return arr\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3])\
    \ == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmpgw8rtrr_.jl:41\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: no method\
    \ matching replace(::Vector{Int64}, ::Int64, ::String)\n  Closest candidates are:\n\
    \    replace(!Matched::Union{Function, Type}, ::Any; count) at /shared/centos7/julia/1.7.3/share/julia/base/set.jl:622\n\
    \    replace(::Any, !Matched::Pair...; count) at /shared/centos7/julia/1.7.3/share/julia/base/set.jl:569\n\
    \  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpgw8rtrr_.jl:25\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgw8rtrr_.jl:41 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgw8rtrr_.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpgw8rtrr_.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  MethodError: no method\
    \ matching replace(::Vector{Int64}, ::Int64, ::String)\n  Closest candidates are:\n\
    \    replace(!Matched::Union{Function, Type}, ::Any; count) at /shared/centos7/julia/1.7.3/share/julia/base/set.jl:622\n\
    \    replace(::Any, !Matched::Pair...; count) at /shared/centos7/julia/1.7.3/share/julia/base/set.jl:569\n\
    \  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpgw8rtrr_.jl:25\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgw8rtrr_.jl:42 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgw8rtrr_.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpgw8rtrr_.jl:43\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: no method matching replace(::Vector{Int64},\
    \ ::Int64, ::String)\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgw8rtrr_.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    arr = sort(arr)\n    arr\
    \ = reverse(arr)\n    arr = arr |> Vector{String}\n    arr |> filter(x->isdigit(x))\
    \ |> Vector{String}\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmps75_e34a.jl:33\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type Int64 to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n    [1] setindex!(A::Vector{String}, x::Int64, i1::Int64)\n\
    \      @ Base ./array.jl:903\n    [2] _unsafe_copyto!(dest::Vector{String}, doffs::Int64,\
    \ src::Vector{Int64}, soffs::Int64, n::Int64)\n      @ Base ./array.jl:253\n \
    \   [3] unsafe_copyto!\n      @ ./array.jl:307 [inlined]\n    [4] _copyto_impl!\n\
    \      @ ./array.jl:331 [inlined]\n    [5] copyto!\n      @ ./array.jl:317 [inlined]\n\
    \    [6] copyto!\n      @ ./array.jl:343 [inlined]\n    [7] copyto_axcheck!\n\
    \      @ ./abstractarray.jl:1104 [inlined]\n    [8] Vector{String}(x::Vector{Int64})\n\
    \      @ Base ./array.jl:563\n    [9] |>\n      @ ./operators.jl:966 [inlined]\n\
    \   [10] by_length(arr::Vector{Int64})\n      @ Main /tmp/tmps75_e34a.jl:25\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [12] macro expansion\n      @ /tmp/tmps75_e34a.jl:33 [inlined]\n\
    \   [13] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [14] top-level scope\n      @ /tmp/tmps75_e34a.jl:32\ntest set:\
    \ Error During Test at /tmp/tmps75_e34a.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  MethodError: no method\
    \ matching filter(::var\"#1#2\")\n  Closest candidates are:\n    filter(::Any,\
    \ !Matched::Tuple) at /shared/centos7/julia/1.7.3/share/julia/base/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmps75_e34a.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    arr = sort(arr)\n    arr\
    \ = reverse(arr)\n    arr = arr .- arr[1]\n    arr = arr .- arr[2]\n    arr =\
    \ arr .- arr[3]\n    arr = arr .- arr[4]\n    arr = arr .- arr[5]\n    arr = arr\
    \ .- arr[6]\n    arr = arr .- arr[7]\n    arr = arr .- arr[8]\n    arr = arr .-\
    \ arr[9]\n    arr = arr .- arr[1]\n    arr = arr .- arr[2]\n    arr = arr .- arr[3]\n\
    \    arr = arr .- arr[4]\n    arr = arr .- arr[5]\n    arr = arr .- arr[6]\n \
    \   arr = arr .- arr[7]\n    arr = arr .- arr[8]\n    arr = arr .- arr[9]\n  \
    \  arr = arr .- arr[1]\n    arr = arr .- arr[2]\n    arr = arr .- arr[3]\n   \
    \ arr = arr .- arr[4]\n    arr = arr .- arr[5]\n    arr = arr .- arr[6]\n    arr\
    \ = arr .- arr[7]\n    arr = arr .- arr[8]\n    arr = arr .- arr[9]\n    arr =\
    \ arr .- arr[1]\n    arr = arr .- arr[2]\n    arr = arr .- arr[3]\n    arr = arr\
    \ .- arr[4]\n    arr = arr .- arr[5]\n    arr = arr .- arr[6]\n    arr = arr .-\
    \ arr[7]\n    arr = arr .- arr[8]\n    arr = arr .- arr[9]\n    arr = arr .- arr[1]\n\
    \    arr = arr .- arr[2]\n    arr = arr .- arr[3]\n    arr = arr .- arr[4]\n \
    \   arr = arr .- arr[5]\n    arr = arr .- arr[6]\n    arr = arr .- arr[7]\n  \
    \  arr = arr .- arr[8]\n    arr = arr .- arr[9]\n    arr = arr .- arr[1]\n   \
    \ arr = arr .- arr[2]\n    arr = arr .- arr[3]\n    arr = arr .- arr[4]\n    arr\
    \ = arr .- arr[5]\n    arr = arr .- arr[6]\n    arr = arr .- arr[7]\n    arr =\
    \ arr .- arr[8]\n    arr = arr .- arr[9]\n    arr = arr .- arr[1]\n    arr = arr\
    \ .- arr[2]\n    arr = arr .- arr[3]\n    arr = arr .- arr[4]\n    arr = arr .-\
    \ arr[5]\n    arr = arr .- arr[6]\n    arr = arr .- arr[7]\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3])\
    \ == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpzf9kt72b.jl:22\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpzf9kt72b.jl:1\n\
    in expression starting at /tmp/tmpzf9kt72b.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    arr = sort(arr)\n    arr\
    \ = reverse(arr)\n    arr = map(x -> \"One\"[x], arr)\n    return arr\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1,\
    \ 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpa7l2ntmk.jl:33\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  BoundsError: attempt\
    \ to access 3-codeunit String at index [8]\n  Stacktrace:\n    [1] checkbounds\n\
    \      @ ./strings/basic.jl:216 [inlined]\n    [2] codeunit\n      @ ./strings/string.jl:102\
    \ [inlined]\n    [3] getindex\n      @ ./strings/string.jl:223 [inlined]\n   \
    \ [4] #1\n      @ /tmp/tmpa7l2ntmk.jl:25 [inlined]\n    [5] iterate\n      @ ./generator.jl:47\
    \ [inlined]\n    [6] _collect(c::Vector{Int64}, itr::Base.Generator{Vector{Int64},\
    \ var\"#1#2\"}, #unused#::Base.EltypeUnknown, isz::Base.HasShape{1})\n      @\
    \ Base ./array.jl:744\n    [7] collect_similar\n      @ ./array.jl:653 [inlined]\n\
    \    [8] map\n      @ ./abstractarray.jl:2867 [inlined]\n    [9] by_length(arr::Vector{Int64})\n\
    \      @ Main /tmp/tmpa7l2ntmk.jl:25\n   [10] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [11] macro expansion\n      @ /tmp/tmpa7l2ntmk.jl:33 [inlined]\n\
    \   [12] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [13] top-level scope\n      @ /tmp/tmpa7l2ntmk.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpa7l2ntmk.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  BoundsError: attempt to access 3-codeunit\
    \ String at index [55]\n  Stacktrace:\n    [1] checkbounds\n      @ ./strings/basic.jl:216\
    \ [inlined]\n    [2] codeunit\n      @ ./strings/string.jl:102 [inlined]\n   \
    \ [3] getindex\n      @ ./strings/string.jl:223 [inlined]\n    [4] #1\n      @\
    \ /tmp/tmpa7l2ntmk.jl:25 [inlined]\n    [5] iterate\n      @ ./generator.jl:47\
    \ [inlined]\n    [6] _collect(c::Vector{Int64}, itr::Base.Generator{Vector{Int64},\
    \ var\"#1#2\"}, #unused#::Base.EltypeUnknown, isz::Base.HasShape{1})\n      @\
    \ Base ./array.jl:744\n    [7] collect_similar\n      @ ./array.jl:653 [inlined]\n\
    \    [8] map\n      @ ./abstractarray.jl:2867 [inlined]\n    [9] by_length(arr::Vector{Int6"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpa7l2ntmk.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = sort(arr)\n\
    \    arr = reverse(arr)\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpbish_swo.jl:22\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpbish_swo.jl:1\n\
    in expression starting at /tmp/tmpbish_swo.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = sort(arr)\n\
    \    arr = reverse(arr)\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmphjwac7fw.jl:22\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphjwac7fw.jl:1\n\
    in expression starting at /tmp/tmphjwac7fw.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = sort(arr)\n\
    \    arr = reverse(arr)\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpycb9zgld.jl:22\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpycb9zgld.jl:1\n\
    in expression starting at /tmp/tmpycb9zgld.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = sort(arr)\n\
    \    arr = reverse(arr)\n    \n    arr = arr |> Vector{Int64}\n    \n    arr =\
    \ arr |> Vector{String}\n    \n    arr = arr |> Vector{String}\n    \n    arr\
    \ = arr |> Vector{String}\n    \n    arr = arr |> Vector{String}\n    \n    arr\
    \ = arr |> Vector{String}\n    \n    arr = arr |> Vector{String}\n    \n    arr\
    \ = arr |> Vector{String}\n    \n    arr = arr |> Vector{String}\n    \n    arr\
    \ = arr |> Vector{String}\n    \n    arr = arr |> Vector{String}\n    \n    arr\
    \ = arr |> Vector{String}\n    \n    arr = arr |> Vector{String}\n    \n    arr\
    \ = arr |> Vector{String}\n    \n    arr = arr |> Vector{String}\n    \n    arr\
    \ = arr |> Vector{String}\n    \n    arr = arr |> Vector{String}\n    \n    arr\
    \ = arr |> Vector{String}\n    \n    arr = arr |> Vector{String}\n    \n    arr\
    \ = arr |> Vector{String}\n    \n    arr = arr |> Vector{String}\n    \n    arr\
    \ = arr |> Vector{String}\n    \n    arr = arr |> Vector{String}\n    \n    arr\
    \ = arr |> Vector{String}\n    \n    arr = arr |> Vector{String}\n    \n    arr\
    \ = arr |> Vector{String}\n    \n    arr = arr |> Vector{String}\n    \n    arr\
    \ = arr |> Vector{String}\n    \n    arr = arr |> Vector{String}\n    \n    arr\
    \ = arr |> Vector{String}\n    \n    arr = arr |> Vector{String}\n    \n    arr\
    \ = arr |> Vector{String}\n    \n    arr = arr |> Vector{String}\n    \n    arr\
    \ = arr |> Vector{String}\n    \n    arr = arr |> Vector{String}\n    \n    arr\
    \ = arr |> Vector{String}\n    \n    arr = arr |> Vector{String}\n    \n    arr\
    \ = arr |> Vector{String}\n    \n    arr = arr\nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp0e3pj412.jl:22\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0e3pj412.jl:1\n\
    in expression starting at /tmp/tmp0e3pj412.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = sort(arr)\n\
    \    arr = reverse(arr)\n    arr = replace(arr)\n    \n    return arr\nend\n</cell>\n\
    <code language=julia-1.5>\nby_length(arr)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes an array of integers and returns the array in reverse\
    \ order but with each digit replaced by its corresponding name from \"One\", \"\
    Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4ekfs1l2.jl:30\nin expression starting at\
    \ /tmp/tmp4ekfs1l2.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    arr = sort(arr)\n    arr\
    \ = reverse(arr)\n    arr = replace(arr, \"1\", \"One\")\n    arr = replace(arr,\
    \ \"2\", \"Two\")\n    arr = replace(arr, \"3\", \"Three\")\n    arr = replace(arr,\
    \ \"4\", \"Four\")\n    arr = replace(arr, \"5\", \"Five\")\n    arr = replace(arr,\
    \ \"6\", \"Six\")\n    arr = replace(arr, \"7\", \"Seven\")\n    arr = replace(arr,\
    \ \"8\", \"Eight\")\n    arr = replace(arr, \"9\", \"Nine\")\n    return arr\n\
    end\n</cell>\n<code language=julia-1.5>\nby_length(arr)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a vector of integers and returns a vector of\
    \ strings where each string is the name of the integer in the vector that is less\
    \ than or equal to 100.\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprhzvk7ix.jl:36\nin expression starting at\
    \ /tmp/tmprhzvk7ix.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr2 = arr\n    arr2\
    \ = arr2[arr2 .> 1]\n    arr2 = arr2[arr2 .< 9]\n    arr2 = reverse(arr2)\n  \
    \  arr2 = arr2[arr2 .!= 0]\n    arr2 = arr2[arr2 .!= 0]\n    arr2 = arr2[arr2\
    \ .!= 0]\n    arr2 = arr2[arr2 .!= 0]\n    arr2 = arr2[arr2 .!= 0]\n    arr2 =\
    \ arr2[arr2 .!= 0]\n    arr2 = arr2[arr2 .!= 0]\n    arr2 = arr2[arr2 .!= 0]\n\
    \    arr2 = arr2[arr2 .!= 0]\n    arr2 = arr2[arr2 .!= 0]\n    arr2 = arr2[arr2\
    \ .!= 0]\n    arr2 = arr2[arr2 .!= 0]\n    arr2 = arr2[arr2 .!= 0]\n    arr2 =\
    \ arr2[arr2 .!= 0]\n    arr2 = arr2[arr2 .!= 0]\n    arr2 = arr2[arr2 .!= 0]\n\
    \    arr2 = arr2[arr2 .!= 0]\n    arr2 = arr2[arr2 .!= 0]\n    arr2 = arr2[arr2\
    \ .!= 0]\n    arr2 = arr2[arr2 .!= 0]\n    arr2 = arr2[arr2 .!= 0]\n    arr2 =\
    \ arr2[arr2 .!= 0]\n    arr2 = arr2[arr2 .!= 0]\n    arr2 = arr2[arr2 .!= 0]\n\
    \    arr2 = arr2[arr2 .!= 0]\n    arr2 = arr2[arr2 .!= 0]\n    arr2 = arr2[arr2\
    \ .!= 0]\n    arr2 = arr2[arr2 .!= 0]\n    arr2 = arr2[arr2 .!= 0]\n    arr2 =\
    \ arr2[arr2 .!= 0]\n    arr2 = arr2[arr2 .!= 0]\n    arr2 = arr2[arr2 .!= 0]\n\
    \    arr2 = arr2[arr2 .!= 0]\n    arr2 = arr2[arr2 .!= 0]\n    arr2 = arr2[arr2\
    \ .!= 0]\n    arr2 = arr2[arr2 .!= 0]\n    arr2 = arr2[arr2 .!= 0]\n    arr2 =\
    \ arr2[arr2 .!= 0]\n    arr2 = arr2[arr2 .!= 0]\n    arr2 = arr2[arr2 .!= 0]\n\
    \    arr2 = arr2[arr2 .!= 0]\n    arr2 = arr2[arr2 .!= 0]\n    arr2 = arr2[arr2\
    \ .!= 0]\n    arr2 = \nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpm69d2mwe.jl:22\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpm69d2mwe.jl:1\n\
    in expression starting at /tmp/tmpm69d2mwe.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = sort(arr)\n\
    \    arr = reverse(arr)\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .+\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .+ arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .+ arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .+ arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .+ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .+\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .+ arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .+ arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .+ arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .+ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .+\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .+ arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .+ arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .+ arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .+ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .+\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .+ arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .+ arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .+ arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .+ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .+\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .+ arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .+ arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .+ arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .+ arr[1]\n\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp9rxzvjjr.jl:22\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9rxzvjjr.jl:1\n\
    in expression starting at /tmp/tmp9rxzvjjr.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = sort(arr)\n\
    \    arr = reverse(arr)\n    arr = arr .- arr[1]\n    arr = arr .- arr[2]\n  \
    \  arr = arr .- arr[3]\n    arr = arr .- arr[4]\n    arr = arr .- arr[5]\n   \
    \ arr = arr .- arr[6]\n    arr = arr .- arr[7]\n    arr = arr .- arr[8]\n    arr\
    \ = arr .- arr[9]\n    \n    arr = arr .- arr[1]\n    arr = arr .- arr[2]\n  \
    \  arr = arr .- arr[3]\n    arr = arr .- arr[4]\n    arr = arr .- arr[5]\n   \
    \ arr = arr .- arr[6]\n    arr = arr .- arr[7]\n    arr = arr .- arr[8]\n    arr\
    \ = arr .- arr[9]\n    \n    arr = arr .- arr[1]\n    arr = arr .- arr[2]\n  \
    \  arr = arr .- arr[3]\n    arr = arr .- arr[4]\n    arr = arr .- arr[5]\n   \
    \ arr = arr .- arr[6]\n    arr = arr .- arr[7]\n    arr = arr .- arr[8]\n    arr\
    \ = arr .- arr[9]\n    \n    arr = arr .- arr[1]\n    arr = arr .- arr[2]\n  \
    \  arr = arr .- arr[3]\n    arr = arr .- arr[4]\n    arr = arr .- arr[5]\n   \
    \ arr = arr .- arr[6]\n    arr = arr .- arr[7]\n    arr = arr .- arr[8]\n    arr\
    \ = arr .- arr[9]\n    \n    arr = arr .- arr[1]\n    arr = arr .- arr[2]\n  \
    \  arr = arr .- arr[3]\n    arr = arr .- arr[4]\n    arr = arr .- arr[5]\n   \
    \ arr = arr .- arr[6]\n    arr = arr .- arr[7]\n    arr = arr .- arr[8]\n    arr\
    \ = arr .- arr[9]\n    \n    arr = arr .- arr[1]\n    arr = arr .- arr[2]\n  \
    \  arr = arr .- arr[3]\n    arr = arr .- arr[4]\n    arr = arr .- arr[5]\n   \
    \ arr = arr .- arr[6]\n    arr = arr .- arr[7]\n    arr = arr .- arr[8]\n    arr\
    \ = arr .- arr[9]\n    \n    arr = arr .- arr[1]\n    arr = arr .- arr[2]\n  \
    \  arr = arr .- arr[3]\n    arr = arr .- arr[4]\n    arr = arr .- arr[5]\n   \
    \ arr = arr .\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: space before \".\" not allowed in \"arr .\" at\
    \ /tmp/tmpw9l9wyf6.jl:91\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpw9l9wyf6.jl:91\n\
    in expression starting at /tmp/tmpw9l9wyf6.jl:91\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    arr = sort(arr)\n    arr\
    \ = reverse(arr)\n    arr = arr .- arr .% 10\n    arr = arr .+ [\"One\", \"Two\"\
    , \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  \
    \  return arr\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t\
    @test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp28vj2osq.jl:34\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  DimensionMismatch(\"\
    arrays could not be broadcast to a common size; got a dimension with lengths 8\
    \ and 9\")\n  Stacktrace:\n    [1] _bcs1\n      @ ./broadcast.jl:516 [inlined]\n\
    \    [2] _bcs\n      @ ./broadcast.jl:510 [inlined]\n    [3] broadcast_shape\n\
    \      @ ./broadcast.jl:504 [inlined]\n    [4] combine_axes\n      @ ./broadcast.jl:499\
    \ [inlined]\n    [5] instantiate\n      @ ./broadcast.jl:281 [inlined]\n    [6]\
    \ materialize\n      @ ./broadcast.jl:860 [inlined]\n    [7] by_length(arr::Vector{Int64})\n\
    \      @ Main /tmp/tmp28vj2osq.jl:26\n    [8] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [9] macro expansion\n      @ /tmp/tmp28vj2osq.jl:34 [inlined]\n\
    \   [10] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmp28vj2osq.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp28vj2osq.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  DimensionMismatch(\"arrays\
    \ could not be broadcast to a common size; got a dimension with lengths 0 and\
    \ 9\")\n  Stacktrace:\n    [1] _bcs1\n      @ ./broadcast.jl:516 [inlined]\n \
    \   [2] _bcs\n      @ ./broadcast.jl:510 [inlined]\n    [3] broadcast_shape\n\
    \      @ ./broadcast.jl:504 [inlined]\n    [4] combine_axes\n      @ ./broadcast.jl:499\
    \ [inlined]\n    [5] instantiate\n      @ ./broadcast.jl:281 [inlined]\n    [6]\
    \ materialize\n      @ ./broadcast.jl:860 [inlined]\n    [7] by_length(arr::Vector{Int64})\n\
    \      @ Main /tmp/tmp28vj2osq.jl:26\n    [8] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [9] macro expansion\n      @ /tmp/tmp28vj2osq.jl:35 [inlined]\n\
    \   [10] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [11"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp28vj2osq.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = sort(arr)\n\
    \    arr = reverse(arr)\n    arr = replace(arr, \"One\", \"Eight\")\n    arr =\
    \ replace(arr, \"Two\", \"Seven\")\n    arr = replace(arr, \"Three\", \"Six\"\
    )\n    arr = replace(arr, \"Four\", \"Five\")\n    arr = replace(arr, \"Five\"\
    , \"Four\")\n    arr = replace(arr, \"Six\", \"Three\")\n    arr = replace(arr,\
    \ \"Seven\", \"Six\")\n    arr = replace(arr, \"Eight\", \"One\")\n    arr = replace(arr,\
    \ \"Nine\", \"Two\")\n    \n    return arr\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length(arr)\n</cell>\n<text>\nExercise 2\nWrite a function that takes an array\
    \ of integers and returns the number of integers that are less than or equal to\
    \ each of the integers in the array.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9simy6b7.jl:38\nin expression starting at\
    \ /tmp/tmp9simy6b7.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = sort(arr)\n\
    \    arr = reverse(arr)\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp_zvox7vs.jl:22\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_zvox7vs.jl:1\n\
    in expression starting at /tmp/tmp_zvox7vs.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = sort(arr)\n\
    \    arr = reverse(arr)\n    arr = arr .- arr[1]\n    arr = arr .+ arr[1]\n  \
    \  arr = arr .+ arr[2]\n    arr = arr .+ arr[3]\n    arr = arr .+ arr[4]\n   \
    \ arr = arr .+ arr[5]\n    arr = arr .+ arr[6]\n    arr = arr .+ arr[7]\n    arr\
    \ = arr .+ arr[8]\n    arr = arr .+ arr[9]\n    arr = arr .+ arr[10]\n    arr\
    \ = arr .+ arr[11]\n    arr = arr .+ arr[12]\n    arr = arr .+ arr[13]\n    arr\
    \ = arr .+ arr[14]\n    arr = arr .+ arr[15]\n    arr = arr .+ arr[16]\n    arr\
    \ = arr .+ arr[17]\n    arr = arr .+ arr[18]\n    arr = arr .+ arr[19]\n    arr\
    \ = arr .+ arr[20]\n    arr = arr .+ arr[21]\n    arr = arr .+ arr[22]\n    arr\
    \ = arr .+ arr[23]\n    arr = arr .+ arr[24]\n    arr = arr .+ arr[25]\n    arr\
    \ = arr .+ arr[26]\n    arr = arr .+ arr[27]\n    arr = arr .+ arr[28]\n    arr\
    \ = arr .+ arr[29]\n    arr = arr .+ arr[30]\n    arr = arr .+ arr[31]\n    arr\
    \ = arr .+ arr[32]\n    arr = arr .+ arr[33]\n    arr = arr .+ arr[34]\n    arr\
    \ = arr .+ arr[35]\n    arr = arr .+ arr[36]\n    arr = arr .+ arr[37]\n    arr\
    \ = arr .+ arr[38]\n    arr = arr .+ arr[39]\n    arr = arr .+ arr[40]\n    arr\
    \ = arr .+ arr[41]\n    arr = arr .+ arr[42]\n    arr = arr .+ arr[43]\n    arr\
    \ = arr .+ arr[44]\n    arr = arr .+ arr[45]\n    arr = arr .+ arr[46]\n    arr\
    \ = arr .+ arr[47]\n    arr = arr .+ arr[48]\n    arr = arr .+ arr[49]\n    arr\
    \ = arr .+ arr[50]\n    arr = arr .+ arr[51]\n    arr = arr .+ arr[52]\n    arr\
    \ = arr .+ arr[53]\n    arr = arr .+ arr[54]\n    arr = arr .+ arr[55]\n    arr\
    \ = arr .+ \nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp4q4x4f06.jl:22\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4q4x4f06.jl:1\n\
    in expression starting at /tmp/tmp4q4x4f06.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    arr = sort(arr)\n    arr\
    \ = reverse(arr)\n    arr = arr .- 1 \n    arr = arr .- 1 \n    arr = arr .- 1\
    \ \n    arr = arr .- 1 \n    arr = arr .- 1 \n    arr = arr .- 1 \n    arr = arr\
    \ .- 1 \n    arr = arr .- 1 \n    arr = arr .- 1 \n    arr = arr .- 1 \n    arr\
    \ = arr .- 1 \n    arr = arr .- 1 \n    arr = arr .- 1 \n    arr = arr .- 1 \n\
    \    arr = arr .- 1 \n    arr = arr .- 1 \n    arr = arr .- 1 \n    arr = arr\
    \ .- 1 \n    arr = arr .- 1 \n    arr = arr .- 1 \n    arr = arr .- 1 \n    arr\
    \ = arr .- 1 \n    arr = arr .- 1 \n    arr = arr .- 1 \n    arr = arr .- 1 \n\
    \    arr = arr .- 1 \n    arr = arr .- 1 \n    arr = arr .- 1 \n    arr = arr\
    \ .- 1 \n    arr = arr .- 1 \n    arr = arr .- 1 \n    arr = arr .- 1 \n    arr\
    \ = arr .- 1 \n    arr = arr .- 1 \n    arr = arr .- 1 \n    arr = arr .- 1 \n\
    \    arr = arr .- 1 \n    arr = arr .- 1 \n    arr = arr .- 1 \n    arr = arr\
    \ .- 1 \n    arr = arr .- 1 \n    arr = arr .- 1 \n    arr = arr .- 1 \n    arr\
    \ = arr .- 1 \n    arr = arr .- 1 \n    arr = arr .- 1 \n    arr = arr .- 1 \n\
    \    arr = arr .- 1 \n    arr = arr .- 1 \n    arr = arr .- 1 \n    arr = arr\
    \ .- 1 \n    arr = arr .- 1 \n    arr = arr .- 1 \n    arr = arr .- 1 \n    arr\
    \ = arr .- 1 \n    arr = arr .- 1 \n    arr = arr .- 1 \n    arr = arr .- 1 \n\
    \    arr = arr .- 1 \n    arr = arr .- 1 \n    arr = arr .- 1 \n    arr = arr\
    \ .- 1 \n    arr = arr .- 1 \n    arr = arr .- 1 \n    arr = arr .- 1 \n    arr\
    \ = arr .- 1 \n    arr = arr .- 1 \n    arr = arr .- 1 \n    arr = arr .- 1 \n\
    \    arr = arr .- 1 \n    arr = arr .- 1 \n    arr = arr .- \nusing Test\n\n@testset\
    \ begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3])\
    \ == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp6omjrl7e.jl:22\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6omjrl7e.jl:1\n\
    in expression starting at /tmp/tmp6omjrl7e.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    arr = sort(arr)\n    arr\
    \ = reverse(arr)\n    arr = arr .- arr .% 10\n    arr = arr .+ [\"One\", \"Two\"\
    , \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  \
    \  return arr\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t\
    @test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpoxnfyfe0.jl:34\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  DimensionMismatch(\"\
    arrays could not be broadcast to a common size; got a dimension with lengths 8\
    \ and 9\")\n  Stacktrace:\n    [1] _bcs1\n      @ ./broadcast.jl:516 [inlined]\n\
    \    [2] _bcs\n      @ ./broadcast.jl:510 [inlined]\n    [3] broadcast_shape\n\
    \      @ ./broadcast.jl:504 [inlined]\n    [4] combine_axes\n      @ ./broadcast.jl:499\
    \ [inlined]\n    [5] instantiate\n      @ ./broadcast.jl:281 [inlined]\n    [6]\
    \ materialize\n      @ ./broadcast.jl:860 [inlined]\n    [7] by_length(arr::Vector{Int64})\n\
    \      @ Main /tmp/tmpoxnfyfe0.jl:26\n    [8] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [9] macro expansion\n      @ /tmp/tmpoxnfyfe0.jl:34 [inlined]\n\
    \   [10] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpoxnfyfe0.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpoxnfyfe0.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  DimensionMismatch(\"arrays\
    \ could not be broadcast to a common size; got a dimension with lengths 0 and\
    \ 9\")\n  Stacktrace:\n    [1] _bcs1\n      @ ./broadcast.jl:516 [inlined]\n \
    \   [2] _bcs\n      @ ./broadcast.jl:510 [inlined]\n    [3] broadcast_shape\n\
    \      @ ./broadcast.jl:504 [inlined]\n    [4] combine_axes\n      @ ./broadcast.jl:499\
    \ [inlined]\n    [5] instantiate\n      @ ./broadcast.jl:281 [inlined]\n    [6]\
    \ materialize\n      @ ./broadcast.jl:860 [inlined]\n    [7] by_length(arr::Vector{Int64})\n\
    \      @ Main /tmp/tmpoxnfyfe0.jl:26\n    [8] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [9] macro expansion\n      @ /tmp/tmpoxnfyfe0.jl:35 [inlined]\n\
    \   [10] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [11"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpoxnfyfe0.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = sort(arr)\n\
    \    arr = reverse(arr)\n    \n    arr = map(x -> \"One\"[x], arr)\n    arr =\
    \ map(x -> \"Two\"[x], arr)\n    arr = map(x -> \"Three\"[x], arr)\n    arr =\
    \ map(x -> \"Four\"[x], arr)\n    arr = map(x -> \"Five\"[x], arr)\n    arr =\
    \ map(x -> \"Six\"[x], arr)\n    arr = map(x -> \"Seven\"[x], arr)\n    arr =\
    \ map(x -> \"Eight\"[x], arr)\n    arr = map(x -> \"Nine\"[x], arr)\n    \n  \
    \  return arr\nend\n</cell>\n<code language=julia-1.5>\nby_length(arr)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector of integers and returns\
    \ the sum of the integers squared. \nFor example, \n    arr = [2, 1, 1, 4, 5,\
    \ 8, 2, 3]\n    -> sum_squares(arr) -> 25\n    \n    arr = [1, -1 , 55]\n    ->\
    \ sum_squares(arr) -> 55\n    \n    arr = [1, -1, 55]\n    -> sum_squares(arr)\
    \ -> 55\n    \n    arr = [1, -1, 55, 2, -1, -55]\n    -> sum_squares(arr) -> -55\n\
    \    \n    arr = [1, -1, 55, 2, -1, -55]\n    -> sum_squares(arr) -> -55\n   \
    \ \n    arr = [1, -1, 55, 2, -1, -55]\n    -> sum_squares(arr) -> -55\n    \n\
    \    arr = [1, -1, 55, 2, -1, -55]\n    -> sum_squares(arr) -> -55\n    \n   \
    \ arr = [1, -1, 55, 2, -1, -55]\n    -> sum_squares(arr) -> -55\n    \n    arr\
    \ = [1, -1, 55, 2, -1, -55]\n    -> sum_squares(arr) -> -55\n    \n    arr = [1,\
    \ -1, 55, 2, -1, -55]\n    -> sum_squares(arr) -> -55\n    \n    arr = [1, -1,\
    \ 55, 2, -1, -55]\n    -> sum_squares(arr) -> -55\n    \n    arr = [1, -1, 55,\
    \ 2, -1, -55]\n    -> sum_squares(arr) -> -55\n    \n    arr = [1, -1, 55, 2,\
    \ -1, -55]\n    -> sum_squares(arr) -> -55\n    \n    arr = [1, -1, 55, 2, -1,\
    \ -55\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpluni9o4g.jl:39\nin expression starting at\
    \ /tmp/tmpluni9o4g.jl:39\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    arr = sort(arr)\n    arr\
    \ = reverse(arr)\n    arr = map(x -> \"One\" if x == 1 \n        else \"Two\"\
    \ if x == 2 \n        else \"Three\" if x == 3 \n        else \"Four\" if x ==\
    \ 4 \n        else \"Five\" if x == 5 \n        else \"Six\" if x == 6 \n    \
    \    else \"Seven\" if x == 7 \n        else \"Eight\" if x == 8 \n        else\
    \ \"Nine\", arr)\n    return arr\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx09jb6w3.jl:25\nin expression starting at\
    \ /tmp/tmpx09jb6w3.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    arr = sort(arr)\n    arr\
    \ = reverse(arr)\n    arr = arr .- 1 .+ 1\n    arr = arr .- 1 .+ 1\n    arr =\
    \ arr .- 1 .+ 1\n    arr = arr .- 1 .+ 1\n    arr = arr .- 1 .+ 1\n    arr = arr\
    \ .- 1 .+ 1\n    arr = arr .- 1 .+ 1\n    arr = arr .- 1 .+ 1\n    arr = arr .-\
    \ 1 .+ 1\n    arr = arr .- 1 .+ 1\n    arr = arr .- 1 .+ 1\n    arr = arr .- 1\
    \ .+ 1\n    arr = arr .- 1 .+ 1\n    arr = arr .- 1 .+ 1\n    arr = arr .- 1 .+\
    \ 1\n    arr = arr .- 1 .+ 1\n    arr = arr .- 1 .+ 1\n    arr = arr .- 1 .+ 1\n\
    \    arr = arr .- 1 .+ 1\n    arr = arr .- 1 .+ 1\n    arr = arr .- 1 .+ 1\n \
    \   arr = arr .- 1 .+ 1\n    arr = arr .- 1 .+ 1\n    arr = arr .- 1 .+ 1\n  \
    \  arr = arr .- 1 .+ 1\n    arr = arr .- 1 .+ 1\n    arr = arr .- 1 .+ 1\n   \
    \ arr = arr .- 1 .+ 1\n    arr = arr .- 1 .+ 1\n    arr = arr .- 1 .+ 1\n    arr\
    \ = arr .- 1 .+ 1\n    arr = arr .- 1 .+ 1\n    arr = arr .- 1 .+ 1\n    arr =\
    \ arr .- 1 .+ 1\n    arr = arr .- 1 .+ 1\n    arr = arr .- 1 .+ 1\n    arr = arr\
    \ .- 1 .+ 1\n    arr = arr .- 1 .+ 1\n    arr = arr .- 1 .+ 1\n    arr = arr .-\
    \ 1 .+ 1\n    arr = arr .- 1 .+ 1\n    arr = arr .- 1 .+ 1\n    arr = arr .- 1\
    \ .+ 1\n    arr = arr .- 1 .+ 1\n    arr = arr .- 1 .+ 1\n    arr = arr .- 1 .+\
    \ 1\n    arr = arr .- 1 .+ 1\n    arr = arr .- 1 .+ 1\n    arr = arr .- 1 .+ 1\n\
    \    arr = arr .- 1 .+ 1\n    arr = arr .- 1 .+ 1\n    arr = arr .- 1 .+ 1\n \
    \   arr = arr .- 1 .+ 1\n    arr = arr .- 1 .+ 1\n    arr = arr .- 1 .+ 1\n  \
    \  arr = arr .- 1 .\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t\
    @test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: space before \".\" not allowed in \"1 .\" at\
    \ /tmp/tmpn0tn3uyh.jl:80\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpn0tn3uyh.jl:80\n\
    in expression starting at /tmp/tmpn0tn3uyh.jl:80\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    arr = sort(arr)\n    arr\
    \ = reverse(arr)\n    arr = arr .- arr[1]\n    arr = arr .- arr[2]\n    arr =\
    \ arr .- arr[3]\n    arr = arr .- arr[4]\n    arr = arr .- arr[5]\n    arr = arr\
    \ .- arr[6]\n    arr = arr .- arr[7]\n    arr = arr .- arr[8]\n    arr = arr .-\
    \ arr[9]\n    arr = arr .- arr[1]\n    arr = arr .- arr[2]\n    arr = arr .- arr[3]\n\
    \    arr = arr .- arr[4]\n    arr = arr .- arr[5]\n    arr = arr .- arr[6]\n \
    \   arr = arr .- arr[7]\n    arr = arr .- arr[8]\n    arr = arr .- arr[9]\n  \
    \  arr = arr .- arr[1]\n    arr = arr .- arr[2]\n    arr = arr .- arr[3]\n   \
    \ arr = arr .- arr[4]\n    arr = arr .- arr[5]\n    arr = arr .- arr[6]\n    arr\
    \ = arr .- arr[7]\n    arr = arr .- arr[8]\n    arr = arr .- arr[9]\n    arr =\
    \ arr .- arr[1]\n    arr = arr .- arr[2]\n    arr = arr .- arr[3]\n    arr = arr\
    \ .- arr[4]\n    arr = arr .- arr[5]\n    arr = arr .- arr[6]\n    arr = arr .-\
    \ arr[7]\n    arr = arr .- arr[8]\n    arr = arr .- arr[9]\n    arr = arr .- arr[1]\n\
    \    arr = arr .- arr[2]\n    arr = arr .- arr[3]\n    arr = arr .- arr[4]\n \
    \   arr = arr .- arr[5]\n    arr = arr .- arr[6]\n    arr = arr .- arr[7]\n  \
    \  arr = arr .- arr[8]\n    arr = arr .- arr[9]\n    arr = arr .- arr[1]\n   \
    \ arr = arr .- arr[2]\n    arr = arr .- arr[3]\n    arr = arr .- arr[4]\n    arr\
    \ = arr .- arr[5]\n    arr = arr .- arr[6]\n    arr = arr .- arr[7]\n    arr =\
    \ arr .- arr[8]\n    arr = arr .- arr[9]\n    arr = arr .- arr[1]\n    arr = arr\
    \ .- arr[2]\n    arr = arr .- arr[3]\n    arr = arr .- arr[4]\n    arr = arr .-\
    \ arr[5]\n    arr = arr .- arr[6]\n    arr = arr .- arr[7]\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3])\
    \ == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpn6f2zbx0.jl:22\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpn6f2zbx0.jl:1\n\
    in expression starting at /tmp/tmpn6f2zbx0.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr2 = arr\n    arr2\
    \ = arr2[arr2 .!= 0]\n    arr2 = arr2[arr2 .!= -1]\n    arr2 = arr2[arr2 .!= -3]\n\
    \    arr2 = arr2[arr2 .!= -5]\n    arr2 = arr2[arr2 .!= -8]\n    arr2 = arr2[arr2\
    \ .!= -9]\n    arr2 = arr2[arr2 .!= -10]\n    arr2 = arr2[arr2 .!= -11]\n    arr2\
    \ = arr2[arr2 .!= -12]\n    arr2 = arr2[arr2 .!= -13]\n    arr2 = arr2[arr2 .!=\
    \ -14]\n    arr2 = arr2[arr2 .!= -15]\n    arr2 = arr2[arr2 .!= -16]\n    arr2\
    \ = arr2[arr2 .!= -17]\n    arr2 = arr2[arr2 .!= -18]\n    arr2 = arr2[arr2 .!=\
    \ -19]\n    arr2 = arr2[arr2 .!= -20]\n    arr2 = arr2[arr2 .!= -21]\n    arr2\
    \ = arr2[arr2 .!= -22]\n    arr2 = arr2[arr2 .!= -23]\n    arr2 = arr2[arr2 .!=\
    \ -24]\n    arr2 = arr2[arr2 .!= -25]\n    arr2 = arr2[arr2 .!= -26]\n    arr2\
    \ = arr2[arr2 .!= -27]\n    arr2 = arr2[arr2 .!= -28]\n    arr2 = arr2[arr2 .!=\
    \ -29]\n    arr2 = arr2[arr2 .!= -30]\n    arr2 = arr2[arr2 .!= -31]\n    arr2\
    \ = arr2[arr2 .!= -32]\n    arr2 = arr2[arr2 .!= -33]\n    arr2 = arr2[arr2 .!=\
    \ -34]\n    arr2 = arr2[arr2 .!= -35]\n    arr2 = arr2[arr2 .!= -36]\n    arr2\
    \ = arr2[arr2 .!= -37]\n    arr2 = arr2[arr2 .!= -38]\n    arr2 = arr2[arr2 .!=\
    \ -39]\n    arr2 = arr2[arr2 .!= -40]\n    arr2 = arr2[arr2 .!= -41]\n    arr2\
    \ = arr2[arr2 .!= -42]\n    arr2 = arr2[arr2 .!= -43]\n    arr2 = arr2[arr2 .!=\
    \ -\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8bgz_zzn.jl:1\nin expression starting at /tmp/tmp8bgz_zzn.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    arr = sort(arr)\n    arr\
    \ = reverse(arr)\n    arr = map(x -> name(x), arr)\n    return arr\nend\n</cell>\n\
    <code language=julia-1.5>\nby_length(arr)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a vector of integers and returns the sum of the integers\
    \ squared. \nFor example, \n    arr = [1, 2, 3, -4, 5]\n    -> return [5, 9, 15,\
    \ -25, 25]\n    \n    arr = [1, 2, 3, -4, 5]\n    -> return [5, 9, 15, -25, 25]\n\
    \    \n    arr = [1, 2, 3, -4, 5]\n    -> return [5, 9, 15, -25, 25]\n    \n \
    \   arr = [1, 2, 3, -4, 5]\n    -> return [5, 9, 15, -25, 25]\n    \n    arr =\
    \ [1, 2, 3, -4, 5]\n    -> return [5, 9, 15, -25, 25]\n    \n    arr = [1, 2,\
    \ 3, -4, 5]\n    -> return [5, 9, 15, -25, 25]\n    \n    arr = [1, 2, 3, -4,\
    \ 5]\n    -> return [5, 9, 15, -25, 25]\n    \n    arr = [1, 2, 3, -4, 5]\n  \
    \  -> return [5, 9, 15, -25, 25]\n    \n    arr = [1, 2, 3, -4, 5]\n    -> return\
    \ [5, 9, 15, -25, 25]\n    \n    arr = [1, 2, 3, -4, 5]\n    -> return [5, 9,\
    \ 15, -25, 25]\n    \n    arr = [1, 2, 3, -4, 5]\n    -> return [5, 9, 15, -25,\
    \ 25]\n    \n    arr = [1, 2, 3, -4, 5]\n    -> return [5, 9, 15, -25, 25]\n \
    \   \n    arr = [1, 2, 3, -4, 5]\n    -> return [5, 9, 15, -25, 25]\n    \n  \
    \  arr = [1, 2, 3, -4, 5]\n    -> return [5, 9, 15, -25, 25]\n    \n    arr =\
    \ [1, 2, 3, -4, 5]\n    -> return [5, 9, 15, -25, 25]\n    \n    arr = [1, 2,\
    \ 3, -4, 5]\n    -> return [5, 9, 15, -25, 25]\n    \n    arr = [1, 2, 3, -4,\
    \ 5]\n    -> return [5, 9, 15, -25, 25]\n    \n    arr = [1, 2, 3, -4, 5]\n  \
    \  -> return [5, 9, 15, -25, 25]\n    \n    arr = [1, 2, 3, -4, 5]\n    -> return\
    \ [5, 9, 15, -25, 25]\n    \n    arr = [1, 2, 3, -4, 5]\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3])\
    \ == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuqre1bfr.jl:28\nin expression starting at\
    \ /tmp/tmpuqre1bfr.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = sort(arr)\n\
    \    arr = reverse(arr)\n    arr = arr[2:end]\n    arr = arr.reverse\n    arr\
    \ = arr[2:end]\n    arr = arr.reverse\n    arr = arr[2:end]\n    arr = arr.reverse\n\
    \    arr = arr[2:end]\n    arr = arr.reverse\n    arr = arr[2:end]\n    arr =\
    \ arr.reverse\n    arr = arr[2:end]\n    arr = arr.reverse\n    arr = arr[2:end]\n\
    \    arr = arr.reverse\n    arr = arr[2:end]\n    arr = arr.reverse\n    arr =\
    \ arr[2:end]\n    arr = arr.reverse\n    arr = arr[2:end]\n    arr = arr.reverse\n\
    \    arr = arr[2:end]\n    arr = arr.reverse\n    arr = arr[2:end]\n    arr =\
    \ arr.reverse\n    arr = arr[2:end]\n    arr = arr.reverse\n    arr = arr[2:end]\n\
    \    arr = arr.reverse\n    arr = arr[2:end]\n    arr = arr.reverse\n    arr =\
    \ arr[2:end]\n    arr = arr.reverse\n    arr = arr[2:end]\n    arr = arr.reverse\n\
    \    arr = arr[2:end]\n    arr = arr.reverse\n    arr = arr[2:end]\n    arr =\
    \ arr.reverse\n    arr = arr[2:end]\n    arr = arr.reverse\n    arr = arr[2:end]\n\
    \    arr = arr.reverse\n    arr = arr[2:end]\n    arr = arr.reverse\n    arr =\
    \ arr[2:end]\n    arr = arr.reverse\n    arr = arr[2:end]\n    arr = arr.reverse\n\
    \    arr = arr[2:end]\n    arr = arr.reverse\n    arr = arr[2:end]\n    arr =\
    \ arr.reverse\n    arr = arr[2:end]\n    arr = arr.reverse\n    arr = arr[2:end]\n\
    \    arr = arr.reverse\n    arr = arr[2:end]\n    arr = arr.reverse\n    arr =\
    \ arr[2:end]\n    arr = arr.reverse\n    arr = arr[2:end]\n    arr = arr.reverse\n\
    \    arr = arr[2:end]\n    arr = arr.reverse\n    arr = arr[2:end]\n    arr =\
    \ arr.reverse\n    arr = arr[2:end]\n    arr = arr.reverse\n    arr = arr[2:end]\n\
    \    arr = arr.reverse\n    arr = arr[2:end]\n    arr = arr.reverse\n    arr =\
    \ arr[2:end]\n    arr = arr.reverse\n    arr = arr[2:end]\n    arr = arr.reverse\n\
    \    arr = arr[2:end]\n    arr = arr.reverse\n    arr = arr[2:end]\n    arr =\
    \ arr.reverse\n    arr = arr[2:end]\n    arr = arr.reverse\n    arr = arr[2:end]\n\
    \    arr = arr.reverse\n    arr = arr[2:end]\n    arr = arr.reverse\n    arr =\
    \ arr[2:end]\n    arr = arr.reverse\n    arr = arr[2:end]\n    arr = arr.reverse\n\
    \    arr = arr[2:end]\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp105gueos.jl:22\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp105gueos.jl:1\n\
    in expression starting at /tmp/tmp105gueos.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    arr = sort(arr)\n    arr\
    \ = reverse(arr)\n    arr = arr .- arr[1]\n    arr = arr .+ arr[1]\n    arr =\
    \ arr .- arr[1]\n    arr = arr .+ arr[1]\n    arr = arr .- arr[1]\n    arr = arr\
    \ .+ arr[1]\n    arr = arr .- arr[1]\n    arr = arr .+ arr[1]\n    arr = arr .-\
    \ arr[1]\n    arr = arr .+ arr[1]\n    arr = arr .- arr[1]\n    arr = arr .+ arr[1]\n\
    \    arr = arr .- arr[1]\n    arr = arr .+ arr[1]\n    arr = arr .- arr[1]\n \
    \   arr = arr .+ arr[1]\n    arr = arr .- arr[1]\n    arr = arr .+ arr[1]\n  \
    \  arr = arr .- arr[1]\n    arr = arr .+ arr[1]\n    arr = arr .- arr[1]\n   \
    \ arr = arr .+ arr[1]\n    arr = arr .- arr[1]\n    arr = arr .+ arr[1]\n    arr\
    \ = arr .- arr[1]\n    arr = arr .+ arr[1]\n    arr = arr .- arr[1]\n    arr =\
    \ arr .+ arr[1]\n    arr = arr .- arr[1]\n    arr = arr .+ arr[1]\n    arr = arr\
    \ .- arr[1]\n    arr = arr .+ arr[1]\n    arr = arr .- arr[1]\n    arr = arr .+\
    \ arr[1]\n    arr = arr .- arr[1]\n    arr = arr .+ arr[1]\n    arr = arr .- arr[1]\n\
    \    arr = arr .+ arr[1]\n    arr = arr .- arr[1]\n    arr = arr .+ arr[1]\n \
    \   arr = arr .- arr[1]\n    arr = arr .+ arr[1]\n    arr = arr .- arr[1]\n  \
    \  arr = arr .+ arr[1]\n    arr = arr .- arr[1]\n    arr = arr .+ arr[1]\n   \
    \ arr = arr .- arr[1]\n    arr = arr .+ arr[1]\n    arr = arr .- arr[1]\n    arr\
    \ = arr .+ arr[1]\n    arr = arr .- arr[1]\n    arr = arr .+ arr[1]\n    arr =\
    \ arr .- arr[1]\n    arr = arr .+ arr[1]\n    arr = arr .- arr[1]\n    arr = arr\
    \ .+ arr[1]\n    arr = arr .- arr[1]\n    arr = arr .+ arr[1]\n    arr = arr .-\
    \ arr[1]\n    arr = arr .+ arr[1]\n    arr = arr .- arr[1]\n    arr = arr .+ arr[1]\n\
    \    arr = arr .- arr\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpvo85fds8.jl:22\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpvo85fds8.jl:1\n\
    in expression starting at /tmp/tmpvo85fds8.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = sort(arr)\n\
    \    arr = reverse(arr)\n    arr = arr .- arr .+ 9\n    arr = arr .- arr .+ 9\n\
    \    arr = arr .- arr .+ 9\n    arr = arr .- arr .+ 9\n    arr = arr .- arr .+\
    \ 9\n    arr = arr .- arr .+ 9\n    arr = arr .- arr .+ 9\n    arr = arr .- arr\
    \ .+ 9\n    arr = arr .- arr .+ 9\n    arr = arr .- arr .+ 9\n    arr = arr .-\
    \ arr .+ 9\n    arr = arr .- arr .+ 9\n    arr = arr .- arr .+ 9\n    arr = arr\
    \ .- arr .+ 9\n    arr = arr .- arr .+ 9\n    arr = arr .- arr .+ 9\n    arr =\
    \ arr .- arr .+ 9\n    arr = arr .- arr .+ 9\n    arr = arr .- arr .+ 9\n    arr\
    \ = arr .- arr .+ 9\n    arr = arr .- arr .+ 9\n    arr = arr .- arr .+ 9\n  \
    \  arr = arr .- arr .+ 9\n    arr = arr .- arr .+ 9\n    arr = arr .- arr .+ 9\n\
    \    arr = arr .- arr .+ 9\n    arr = arr .- arr .+ 9\n    arr = arr .- arr .+\
    \ 9\n    arr = arr .- arr .+ 9\n    arr = arr .- arr .+ 9\n    arr = arr .- arr\
    \ .+ 9\n    arr = arr .- arr .+ 9\n    arr = arr .- arr .+ 9\n    arr = arr .-\
    \ arr .+ 9\n    arr = arr .- arr .+ 9\n    arr = arr .- arr .+ 9\n    arr = arr\
    \ .- arr .+ 9\n    arr = arr .- arr .+ 9\n    arr = arr .- arr .+ 9\n    arr =\
    \ arr .- arr .+ 9\n    arr = arr .- arr .+ 9\n    arr = arr .- arr .+ 9\n    arr\
    \ = arr .- arr .+ 9\n    arr = arr .- arr .+ 9\n    arr = arr .- arr .+ 9\n  \
    \  arr = arr .- arr .+ 9\n    arr = arr .- arr .+ 9\n    arr = arr .- arr .+ 9\n\
    \    arr = arr .- arr .+ 9\n    arr = arr .- arr .+ 9\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3])\
    \ == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp6nxyp5zw.jl:22\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6nxyp5zw.jl:1\n\
    in expression starting at /tmp/tmp6nxyp5zw.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = sort(arr)\n\
    \    arr = reverse(arr)\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpczdnl__x.jl:22\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpczdnl__x.jl:1\n\
    in expression starting at /tmp/tmpczdnl__x.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    arr = sort(arr)\n    arr\
    \ = reverse(arr)\n    arr = arr .- arr[1]\n    arr = arr .- arr[2]\n    arr =\
    \ arr .- arr[3]\n    arr = arr .- arr[4]\n    arr = arr .- arr[5]\n    arr = arr\
    \ .- arr[6]\n    arr = arr .- arr[7]\n    arr = arr .- arr[8]\n    arr = arr .-\
    \ arr[9]\n    arr = arr .- arr[0]\n    arr = arr .- arr[1]\n    arr = arr .- arr[2]\n\
    \    arr = arr .- arr[3]\n    arr = arr .- arr[4]\n    arr = arr .- arr[5]\n \
    \   arr = arr .- arr[6]\n    arr = arr .- arr[7]\n    arr = arr .- arr[8]\n  \
    \  arr = arr .- arr[9]\n    arr = arr .- arr[0]\n    arr = arr .- arr[1]\n   \
    \ arr = arr .- arr[2]\n    arr = arr .- arr[3]\n    arr = arr .- arr[4]\n    arr\
    \ = arr .- arr[5]\n    arr = arr .- arr[6]\n    arr = arr .- arr[7]\n    arr =\
    \ arr .- arr[8]\n    arr = arr .- arr[9]\n    arr = arr .- arr[0]\n    arr = arr\
    \ .- arr[1]\n    arr = arr .- arr[2]\n    arr = arr .- arr[3]\n    arr = arr .-\
    \ arr[4]\n    arr = arr .- arr[5]\n    arr = arr .- arr[6]\n    arr = arr .- arr[7]\n\
    \    arr = arr .- arr[8]\n    arr = arr .- arr[9]\n    arr = arr .- arr[0]\n \
    \   arr = arr .- arr[1]\n    arr = arr .- arr[2]\n    arr = arr .- arr[3]\n  \
    \  arr = arr .- arr[4]\n    arr = arr .- arr[5]\n    arr = arr .- arr[6]\n   \
    \ arr = arr .- arr[7]\n    arr = arr .- arr[8]\n    arr = arr .- arr[9]\n    arr\
    \ = arr .- arr[0]\n    arr = arr .- arr[1]\n    arr = arr .- arr[2]\n    arr =\
    \ arr .- arr[3]\n    arr = arr .- arr[4]\n    arr = arr .- arr[5]\n    arr = arr\
    \ .- arr[6]\n    arr = arr .- arr[7]\n    arr = arr .- arr[8]\n    arr = arr .-\
    \ arr[9]\n    arr = arr .- arr[0]\n    arr = arr .- arr[1]\n    arr = \nusing\
    \ Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1,\
    \ 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp1805m6qj.jl:22\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp1805m6qj.jl:1\n\
    in expression starting at /tmp/tmp1805m6qj.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    arr = sort(arr)\n    arr\
    \ = reverse(arr)\n    arr = map(x -> \"One\"[x], arr)\n    return arr\nend\n</cell>\n\
    <code language=julia-1.5>\nby_length(arr)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a vector of integers and returns a vector of strings that\
    \ represent each of the numbers in the vector in descending order. For example,\
    \ if the input vector is [4, 2, 7, 1, 3, 6, 5], then the output vector should\
    \ be [\"Five\", \"Four\", \"Three\", \"Two\", \"One\", \"Seven\", \"Six\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"One\"]\nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn4_6tbix.jl:28\nin expression starting at\
    \ /tmp/tmpn4_6tbix.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    arr = sort(arr)\n    arr\
    \ = reverse(arr)\n    arr = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr\
    \ = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n  \
    \  arr = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n\
    \    arr = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr = arr .- arr .+\
    \ 1\n    arr = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr = arr .- arr\
    \ .+ 1\n    arr = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr = arr .-\
    \ arr .+ 1\n    arr = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr = arr\
    \ .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr =\
    \ arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr\
    \ = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n  \
    \  arr = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n\
    \    arr = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr = arr .- arr .+\
    \ 1\n    arr = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr = arr .- arr\
    \ .+ 1\n    arr = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr = arr .-\
    \ arr .+ 1\n    arr = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr = arr\
    \ .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr =\
    \ arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr\
    \ = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n  \
    \  arr = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n\
    \    arr = arr .- arr .+ 1\n    arr = arr .- arr .\nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: space before \".\" not allowed in \"arr .\" at\
    \ /tmp/tmpwmfupx2r.jl:80\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwmfupx2r.jl:80\n\
    in expression starting at /tmp/tmpwmfupx2r.jl:80\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = sort(arr)\n\
    \    arr = reverse(arr)\n    arr = arr |> Vector{String}\n    \n    arr = arr\
    \ |> filter(x->x!=0) |> filter(x->x!=1) |> filter(x->x!=2) |> filter(x->x!=3)\
    \ |> filter(x->x!=4) |> filter(x->x!=5) |> filter(x->x!=6) |> filter(x->x!=7)\
    \ |> filter(x->x!=8) |> filter(x->x!=9) |> filter(x->x!=10) |> filter(x->x!=11)\
    \ |> filter(x->x!=12) |> filter(x->x!=13) |> filter(x->x!=14) |> filter(x->x!=15)\
    \ |> filter(x->x!=16) |> filter(x->x!=17) |> filter(x->x!=18) |> filter(x->x!=19)\
    \ |> filter(x->x!=20) |> filter(x->x!=21) |> filter(x->x!=22) |> filter(x->x!=23)\
    \ |> filter(x->x!=24) |> filter(x->x!=25) |> filter(x->x!=26) |> filter(x->x!=27)\
    \ |> filter(x->x!=28) |> filter(x->x!=29) |> filter(x->x!=30) |> filter(x->x!=31)\
    \ |> filter(x->x!=32) |> filter(x->x!=33) |> filter(x->x!=34) |> filter(x->x!=35)\
    \ |> filter(x->x!=36) |> filter(x->x!=37) |> filter(x->x!=38) |> filter(x->x!=39)\
    \ |> filter(x->x!=40) |> filter(x->x!=41) |> filter(x->x!=42) |> filter(x->x!=43)\
    \ |> filter(x->x!=44) |> filter(x->x!=45) |> filter(x->x!=46) |> filter(x->x!=47)\
    \ |> filter(x->x!=48) |> filter(x->x!=49) |> filter(x->x!=50) |> filter(x->x!=51)\
    \ |> filter(x->x!=52) |> filter(x->x!=53) |> filter(x->x!=\nusing Test\n\n@testset\
    \ begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3])\
    \ == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp43723g92.jl:31\nin expression starting at\
    \ /tmp/tmp43723g92.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = sort(arr)\n\
    \    arr = reverse(arr)\n    arr = map(x -> name(x), arr)\n    return arr\nend\n\
    </cell>\n<code language=julia-1.5>\nby_length(arr)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes an array of integers and returns the number of\
    \ integers that are between 1 and 9 inclusive.\nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0rph_nh2.jl:29\nin expression starting at\
    \ /tmp/tmp0rph_nh2.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = sort(arr)\n\
    \    arr = reverse(arr)\n    arr = arr .- arr[1]\n    arr = arr .- arr[2]\n  \
    \  arr = arr .- arr[3]\n    arr = arr .- arr[4]\n    arr = arr .- arr[5]\n   \
    \ arr = arr .- arr[6]\n    arr = arr .- arr[7]\n    arr = arr .- arr[8]\n    arr\
    \ = arr .- arr[9]\n    arr = arr .- arr[0]\n    arr = arr .- arr[1]\n    arr =\
    \ arr .- arr[2]\n    arr = arr .- arr[3]\n    arr = arr .- arr[4]\n    arr = arr\
    \ .- arr[5]\n    arr = arr .- arr[6]\n    arr = arr .- arr[7]\n    arr = arr .-\
    \ arr[8]\n    arr = arr .- arr[9]\n    arr = arr .- arr[0]\n    arr = arr .- arr[1]\n\
    \    arr = arr .- arr[2]\n    arr = arr .- arr[3]\n    arr = arr .- arr[4]\n \
    \   arr = arr .- arr[5]\n    arr = arr .- arr[6]\n    arr = arr .- arr[7]\n  \
    \  arr = arr .- arr[8]\n    arr = arr .- arr[9]\n    arr = arr .- arr[0]\n   \
    \ arr = arr .- arr[1]\n    arr = arr .- arr[2]\n    arr = arr .- arr[3]\n    arr\
    \ = arr .- arr[4]\n    arr = arr .- arr[5]\n    arr = arr .- arr[6]\n    arr =\
    \ arr .- arr[7]\n    arr = arr .- arr[8]\n    arr = arr .- arr[9]\n    arr = arr\
    \ .- arr[0]\n    arr = arr .- arr[1]\n    arr = arr .- arr[2]\n    arr = arr .-\
    \ arr[3]\n    arr = arr .- arr[4]\n    arr = arr .- arr[5]\n    arr = arr .- arr[6]\n\
    \    arr = arr .- arr[7]\n    arr = arr .- arr[8]\n    arr = arr .- arr[9]\n \
    \   arr = arr .- arr[0]\n    arr = arr .- arr[1]\n    arr = arr .- arr[2]\n  \
    \  arr = arr .- arr[3]\n    arr = arr .- arr[4]\n    arr = arr .- arr[5]\n   \
    \ arr = arr .- arr[6]\n    arr = arr .- arr[7]\n    arr = arr .- arr[8]\n    arr\
    \ = arr .- arr[9]\n    arr = arr .- arr[0]\n    arr = arr .- arr[1]\n\nusing Test\n\
    \n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
    One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmplcc13lpc.jl:22\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmplcc13lpc.jl:1\n\
    in expression starting at /tmp/tmplcc13lpc.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = sort(arr)\n\
    \    arr = reverse(arr)\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp8xzb054j.jl:22\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8xzb054j.jl:1\n\
    in expression starting at /tmp/tmp8xzb054j.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    arr = sort(arr)\n    arr\
    \ = reverse(arr)\n    arr = arr .- arr[1]\n    arr = arr .- arr[2]\n    arr =\
    \ arr .- arr[3]\n    arr = arr .- arr[4]\n    arr = arr .- arr[5]\n    arr = arr\
    \ .- arr[6]\n    arr = arr .- arr[7]\n    arr = arr .- arr[8]\n    arr = arr .-\
    \ arr[9]\n    arr = arr .- arr[0]\n    return arr\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length(arr)\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector\
    \ of integers and returns a vector of strings that represent each of the numbers\
    \ between 1 and 9 inclusive.\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppclr576r.jl:37\nin expression starting at\
    \ /tmp/tmppclr576r.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = sort(arr)\n\
    \    arr = reverse(arr)\n    arr = arr .- arr[1]\n    arr = arr .- arr[2]\n  \
    \  arr = arr .- arr[3]\n    arr = arr .- arr[4]\n    arr = arr .- arr[5]\n   \
    \ arr = arr .- arr[6]\n    arr = arr .- arr[7]\n    arr = arr .- arr[8]\n    arr\
    \ = arr .- arr[9]\n    arr = arr .- arr[0]\n    arr = arr .- arr[1]\n    arr =\
    \ arr .- arr[2]\n    arr = arr .- arr[3]\n    arr = arr .- arr[4]\n    arr = arr\
    \ .- arr[5]\n    arr = arr .- arr[6]\n    arr = arr .- arr[7]\n    arr = arr .-\
    \ arr[8]\n    arr = arr .- arr[9]\n    arr = arr .- arr[0]\n    arr = arr .- arr[1]\n\
    \    arr = arr .- arr[2]\n    arr = arr .- arr[3]\n    arr = arr .- arr[4]\n \
    \   arr = arr .- arr[5]\n    arr = arr .- arr[6]\n    arr = arr .- arr[7]\n  \
    \  arr = arr .- arr[8]\n    arr = arr .- arr[9]\n    arr = arr .- arr[0]\n   \
    \ arr = arr .- arr[1]\n    arr = arr .- arr[2]\n    arr = arr .- arr[3]\n    arr\
    \ = arr .- arr[4]\n    arr = arr .- arr[5]\n    arr = arr .- arr[6]\n    arr =\
    \ arr .- arr[7]\n    arr = arr .- arr[8]\n    arr = arr .- arr[9]\n    arr = arr\
    \ .- arr[0]\n    arr = arr .- arr[1]\n    arr = arr .- arr[2]\n    arr = arr .-\
    \ arr[3]\n    arr = arr .- arr[4]\n    arr = arr .- arr[5]\n    arr = arr .- arr[6]\n\
    \    arr = arr .- arr[7]\n    arr = arr .- arr[8]\n    arr = arr .- arr[9]\n \
    \   arr = arr .- arr[0]\n    arr = arr .- arr[1]\n    arr = arr .- arr[2]\n  \
    \  arr = arr .- arr[3]\n    arr = arr .- arr[4]\n    arr = arr .- arr[5]\n   \
    \ arr = arr .- arr[6]\n    arr = arr .- arr[7]\n    arr = arr .- arr[8]\n    arr\
    \ = arr .- arr[9]\n    arr = arr .- arr[0]\n    arr = arr .- arr[1]\n\nusing Test\n\
    \n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
    One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpbkgy92e6.jl:22\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpbkgy92e6.jl:1\n\
    in expression starting at /tmp/tmpbkgy92e6.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    arr = sort(arr)\n    arr\
    \ = reverse(arr)\n    arr = arr |> Vector{String}\n    \n    if length(arr) ==\
    \ 0 \n        return [] \n    else \n        arr = arr |> Vector{String}\n   \
    \     \n        arr |> map(x->\"One\"..\"Nine\"[x]) |> Vector{String}\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpvuyban0z.jl:40\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type Int64 to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n    [1] setindex!(A::Vector{String}, x::Int64, i1::Int64)\n\
    \      @ Base ./array.jl:903\n    [2] _unsafe_copyto!(dest::Vector{String}, doffs::Int64,\
    \ src::Vector{Int64}, soffs::Int64, n::Int64)\n      @ Base ./array.jl:253\n \
    \   [3] unsafe_copyto!\n      @ ./array.jl:307 [inlined]\n    [4] _copyto_impl!\n\
    \      @ ./array.jl:331 [inlined]\n    [5] copyto!\n      @ ./array.jl:317 [inlined]\n\
    \    [6] copyto!\n      @ ./array.jl:343 [inlined]\n    [7] copyto_axcheck!\n\
    \      @ ./abstractarray.jl:1104 [inlined]\n    [8] Vector{String}(x::Vector{Int64})\n\
    \      @ Base ./array.jl:563\n    [9] |>\n      @ ./operators.jl:966 [inlined]\n\
    \   [10] by_length(arr::Vector{Int64})\n      @ Main /tmp/tmpvuyban0z.jl:25\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [12] macro expansion\n      @ /tmp/tmpvuyban0z.jl:40 [inlined]\n\
    \   [13] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [14] top-level scope\n      @ /tmp/tmpvuyban0z.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpvuyban0z.jl:42\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: Cannot `convert` an object\
    \ of type Int64 to an object of type String\n  Closest candidates are:\n    convert(::Type{String},\
    \ !Matched::String) at /shared/centos7/julia"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvuyban0z.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr2 = sort(arr)\n\
    \    arr3 = reverse(arr2)\n    \n    arr4 = arr3\n    \n    arr5 = arr4\n    \n\
    \    arr6 = arr5\n    \n    arr7 = arr6\n    \n    arr8 = arr7\n    \n    arr9\
    \ = arr8\n    \n    arr10 = arr9\n    \n    arr11 = arr10\n    \n    arr12 = arr11\n\
    \    \n    arr13 = arr12\n    \n    arr14 = arr13\n    \n    arr15 = arr14\n \
    \   \n    arr16 = arr15\n    \n    arr17 = arr16\n    \n    arr18 = arr17\n  \
    \  \n    arr19 = arr18\n    \n    arr20 = arr19\n    \n    arr21 = arr20\n   \
    \ \n    arr22 = arr21\n    \n    arr23 = arr22\n    \n    arr24 = arr23\n    \n\
    \    arr25 = arr24\n    \n    arr26 = arr25\n    \n    arr27 = arr26\n    \n \
    \   arr28 = arr27\n    \n    arr29 = arr28\n    \n    arr30 = arr29\n    \n  \
    \  arr31 = arr30\n    \n    arr32 = arr31\n    \n    arr33 = arr32\n    \n   \
    \ arr34 = arr33\n    \n    arr35 = arr34\n    \n    arr36 = arr35\n    \n    arr37\
    \ = arr36\n    \n    arr38 = arr37\n    \n    arr39 = arr38\n    \n    arr40 =\
    \ arr39\n    \n    arr41 = arr40\n    \n    arr42 = arr41\n    \n    arr43 = arr42\n\
    \    \n    arr44 = arr43\n    \n    arr45 = arr44\n    \n    arr46 = arr45\n \
    \   \n    arr47 = arr46\n    \n    arr48 = arr47\n    \n    arr49 = arr48\n  \
    \  \n    arr50 = arr49\n    \n    arr51 = arr50\n    \n    arr52 = arr51\n   \
    \ \n    arr53 = arr52\n    \n    arr54 = arr53\n    \n    arr55 = arr54\n    \n\
    \    arr56 = arr55\n    \n    arr57 = arr56\n    \n    arr58 = arr57\n    \n \
    \   arr59 = arr58\n    \n\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp_id30i1s.jl:22\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_id30i1s.jl:1\n\
    in expression starting at /tmp/tmp_id30i1s.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    arr = sort(arr)\n    arr\
    \ = reverse(arr)\n    arr = arr[2:end]\n    arr = arr.reverse\n    arr = arr[2:end]\n\
    \    arr = arr.reverse\n    arr = arr[2:end]\n    arr = arr.reverse\n    arr =\
    \ arr[2:end]\n    arr = arr.reverse\n    arr = arr[2:end]\n    arr = arr.reverse\n\
    \    arr = arr[2:end]\n    arr = arr.reverse\n    arr = arr[2:end]\n    arr =\
    \ arr.reverse\n    arr = arr[2:end]\n    arr = arr.reverse\n    arr = arr[2:end]\n\
    \    arr = arr.reverse\n    arr = arr[2:end]\n    arr = arr.reverse\n    arr =\
    \ arr[2:end]\n    arr = arr.reverse\n    arr = arr[2:end]\n    arr = arr.reverse\n\
    \    arr = arr[2:end]\n    arr = arr.reverse\n    arr = arr[2:end]\n    arr =\
    \ arr.reverse\n    arr = arr[2:end]\n    arr = arr.reverse\n    arr = arr[2:end]\n\
    \    arr = arr.reverse\n    arr = arr[2:end]\n    arr = arr.reverse\n    arr =\
    \ arr[2:end]\n    arr = arr.reverse\n    arr = arr[2:end]\n    arr = arr.reverse\n\
    \    arr = arr[2:end]\n    arr = arr.reverse\n    arr = arr[2:end]\n    arr =\
    \ arr.reverse\n    arr = arr[2:end]\n    arr = arr.reverse\n    arr = arr[2:end]\n\
    \    arr = arr.reverse\n    arr = arr[2:end]\n    arr = arr.reverse\n    arr =\
    \ arr[2:end]\n    arr = arr.reverse\n    arr = arr[2:end]\n    arr = arr.reverse\n\
    \    arr = arr[2:end]\n    arr = arr.reverse\n    arr = arr[2:end]\n    arr =\
    \ arr.reverse\n    arr = arr[2:end]\n    arr = arr.reverse\n    arr = arr[2:end]\n\
    \    arr = arr.reverse\n    arr = arr[2:end]\n    arr = arr.reverse\n    arr =\
    \ arr[2:end]\n    arr = arr.reverse\n    arr = arr[2:end]\n    arr = arr.reverse\n\
    \    arr = arr[2:end]\n    arr = arr.reverse\n    arr = arr[2:end]\n    arr =\
    \ arr.reverse\n    arr = arr[2:end]\n    arr = arr.reverse\n    arr = arr[2:end]\n\
    \    arr = arr.reverse\n    arr = arr[2:end]\n    arr = arr.reverse\n    arr =\
    \ arr[2:end]\n    arr = arr.reverse\n    arr = arr[2:end]\n    arr = arr.reverse\n\
    \    arr = arr[2:end]\n    arr = arr.reverse\n    arr = arr[2:end]\n    arr =\
    \ arr.reverse\n    arr = arr[2:end]\n    arr = arr.reverse\n    arr = arr[2:end]\n\
    \    arr = arr.reverse\n    arr = arr[2:end]\n    arr = arr.reverse\n    arr =\
    \ arr[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t\
    @test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpkc98uni1.jl:22\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpkc98uni1.jl:1\n\
    in expression starting at /tmp/tmpkc98uni1.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = sort(arr)\n\
    \    arr = reverse(arr)\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .+\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .+ arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .+ arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .+ arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .+ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .+\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .+ arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .+ arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .+ arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .+ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .+\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .+ arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .+ arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .+ arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .+ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .+\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .+ arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .+ arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .+ arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .+ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .+\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .+ arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .+ arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .+ arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .+ arr[1]\n\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp9abz92_b.jl:22\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9abz92_b.jl:1\n\
    in expression starting at /tmp/tmp9abz92_b.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr1 = sort(arr)\n\
    \    arr2 = reverse(arr1)\n    \n    arr3 = arr2\n    \n    arr4 = arr3\n    \n\
    \    arr5 = arr4\n    \n    arr6 = arr5\n    \n    arr7 = arr6\n    \n    arr8\
    \ = arr7\n    \n    arr9 = arr8\n    \n    arr10 = arr9\n    \n    arr11 = arr10\n\
    \    \n    arr12 = arr11\n    \n    arr13 = arr12\n    \n    arr14 = arr13\n \
    \   \n    arr15 = arr14\n    \n    arr16 = arr15\n    \n    arr17 = arr16\n  \
    \  \n    arr18 = arr17\n    \n    arr19 = arr18\n    \n    arr20 = arr19\n   \
    \ \n    arr21 = arr20\n    \n    arr22 = arr21\n    \n    arr23 = arr22\n    \n\
    \    arr24 = arr23\n    \n    arr25 = arr24\n    \n    arr26 = arr25\n    \n \
    \   arr27 = arr26\n    \n    arr28 = arr27\n    \n    arr29 = arr28\n    \n  \
    \  arr30 = arr29\n    \n    arr31 = arr30\n    \n    arr32 = arr31\n    \n   \
    \ arr33 = arr32\n    \n    arr34 = arr33\n    \n    arr35 = arr34\n    \n    arr36\
    \ = arr35\n    \n    arr37 = arr36\n    \n    arr38 = arr37\n    \n    arr39 =\
    \ arr38\n    \n    arr40 = arr39\n    \n    arr41 = arr40\n    \n    arr42 = arr41\n\
    \    \n    arr43 = arr42\n    \n    arr44 = arr43\n    \n    arr45 = arr44\n \
    \   \n    arr46 = arr45\n    \n    arr47 = arr46\n    \n    arr48 = arr47\n  \
    \  \n    arr49 = arr48\n    \n    arr50 = arr49\n    \n    arr51 = arr50\n   \
    \ \n    arr52 = arr51\n    \n    arr53 = arr52\n    \n    arr54 = arr53\n    \n\
    \    arr55 = arr54\n    \n    arr56 = arr55\n    \n    arr57 = arr56\n    \n \
    \   arr58 = arr57\n    \n    \nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpk3utc95n.jl:22\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpk3utc95n.jl:1\n\
    in expression starting at /tmp/tmpk3utc95n.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = sort(arr)\n\
    \    arr = reverse(arr)\n    arr = arr .- arr .% 10\n    arr = arr .+ ['One',\
    \ 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n    return\
    \ arr\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpbs6vrl3f.jl:27\nin expression\
    \ starting at /tmp/tmpbs6vrl3f.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = sort(arr)\n\
    \    arr = reverse(arr)\n    arr = arr .- arr[1]\n    arr = arr .+ arr[1]\n  \
    \  arr = arr .- arr[1]\n    arr = arr .+ arr[1]\n    arr = arr .- arr[1]\n   \
    \ arr = arr .+ arr[1]\n    arr = arr .- arr[1]\n    arr = arr .+ arr[1]\n    arr\
    \ = arr .- arr[1]\n    arr = arr .+ arr[1]\n    arr = arr .- arr[1]\n    arr =\
    \ arr .+ arr[1]\n    arr = arr .- arr[1]\n    arr = arr .+ arr[1]\n    arr = arr\
    \ .- arr[1]\n    arr = arr .+ arr[1]\n    arr = arr .- arr[1]\n    arr = arr .+\
    \ arr[1]\n    arr = arr .- arr[1]\n    arr = arr .+ arr[1]\n    arr = arr .- arr[1]\n\
    \    arr = arr .+ arr[1]\n    arr = arr .- arr[1]\n    arr = arr .+ arr[1]\n \
    \   arr = arr .- arr[1]\n    arr = arr .+ arr[1]\n    arr = arr .- arr[1]\n  \
    \  arr = arr .+ arr[1]\n    arr = arr .- arr[1]\n    arr = arr .+ arr[1]\n   \
    \ arr = arr .- arr[1]\n    arr = arr .+ arr[1]\n    arr = arr .- arr[1]\n    arr\
    \ = arr .+ arr[1]\n    arr = arr .- arr[1]\n    arr = arr .+ arr[1]\n    arr =\
    \ arr .- arr[1]\n    arr = arr .+ arr[1]\n    arr = arr .- arr[1]\n    arr = arr\
    \ .+ arr[1]\n    arr = arr .- arr[1]\n    arr = arr .+ arr[1]\n    arr = arr .-\
    \ arr[1]\n    arr = arr .+ arr[1]\n    arr = arr .- arr[1]\n    arr = arr .+ arr[1]\n\
    \    arr = arr .- arr[1]\n    arr = arr .+ arr[1]\n    arr = arr .- arr[1]\n \
    \   arr = arr .+ arr[1]\n    arr = arr .- arr[1]\n    arr = arr .+ arr[1]\n  \
    \  arr = arr .- arr[1]\n    arr = arr .+ arr[1]\n    arr = arr .- arr[1]\n   \
    \ arr = arr .+ arr[1]\n    arr = arr .- arr[1]\n    arr = arr .+ arr[1]\n    arr\
    \ = arr .- arr[1]\n    arr = arr .+ arr[1]\n    arr = arr .- arr[1]\n    arr =\
    \ arr .+ arr[1]\n    arr = arr .\nusing Test\n\n@testset begin\n\ncandidate =\
    \ by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: space before \".\" not allowed in \"arr .\" at\
    \ /tmp/tmpqw9cn278.jl:88\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpqw9cn278.jl:88\n\
    in expression starting at /tmp/tmpqw9cn278.jl:88\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    arr = sort(arr)\n    arr\
    \ = reverse(arr)\n    arr = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr\
    \ = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n  \
    \  arr = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n\
    \    arr = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr = arr .- arr .+\
    \ 1\n    arr = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr = arr .- arr\
    \ .+ 1\n    arr = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr = arr .-\
    \ arr .+ 1\n    arr = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr = arr\
    \ .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr =\
    \ arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr\
    \ = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n  \
    \  arr = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n\
    \    arr = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr = arr .- arr .+\
    \ 1\n    arr = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr = arr .- arr\
    \ .+ 1\n    arr = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr = arr .-\
    \ arr .+ 1\n    arr = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr = arr\
    \ .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr =\
    \ arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr\
    \ = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n  \
    \  arr = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n\
    \    arr = arr .- arr .+ 1\n    arr = arr .- arr .\nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: space before \".\" not allowed in \"arr .\" at\
    \ /tmp/tmprg4ze5n9.jl:80\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmprg4ze5n9.jl:80\n\
    in expression starting at /tmp/tmprg4ze5n9.jl:80\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = sort(arr)\n\
    \    arr = reverse(arr)\n    arr = arr .- arr[1]\n    arr = arr .- arr[2]\n  \
    \  arr = arr .- arr[3]\n    arr = arr .- arr[4]\n    arr = arr .- arr[5]\n   \
    \ arr = arr .- arr[6]\n    arr = arr .- arr[7]\n    arr = arr .- arr[8]\n    arr\
    \ = arr .- arr[9]\n    \n    arr = arr .- arr[1]\n    arr = arr .- arr[2]\n  \
    \  arr = arr .- arr[3]\n    arr = arr .- arr[4]\n    arr = arr .- arr[5]\n   \
    \ arr = arr .- arr[6]\n    arr = arr .- arr[7]\n    arr = arr .- arr[8]\n    arr\
    \ = arr .- arr[9]\n    \n    arr = arr .- arr[1]\n    arr = arr .- arr[2]\n  \
    \  arr = arr .- arr[3]\n    arr = arr .- arr[4]\n    arr = arr .- arr[5]\n   \
    \ arr = arr .- arr[6]\n    arr = arr .- arr[7]\n    arr = arr .- arr[8]\n    arr\
    \ = arr .- arr[9]\n    \n    arr = arr .- arr[1]\n    arr = arr .- arr[2]\n  \
    \  arr = arr .- arr[3]\n    arr = arr .- arr[4]\n    arr = arr .- arr[5]\n   \
    \ arr = arr .- arr[6]\n    arr = arr .- arr[7]\n    arr = arr .- arr[8]\n    arr\
    \ = arr .- arr[9]\n    \n    arr = arr .- arr[1]\n    arr = arr .- arr[2]\n  \
    \  arr = arr .- arr[3]\n    arr = arr .- arr[4]\n    arr = arr .- arr[5]\n   \
    \ arr = arr .- arr[6]\n    arr = arr .- arr[7]\n    arr = arr .- arr[8]\n    arr\
    \ = arr .- arr[9]\n    \n    arr = arr .- arr[1]\n    arr = arr .- arr[2]\n  \
    \  arr = arr .- arr[3]\n    arr = arr .- arr[4]\n    arr = arr .- arr[5]\n   \
    \ arr = arr .- arr[6]\n    arr = arr .- arr[7]\n    arr = arr .- arr[8]\n    arr\
    \ = arr .- arr[9]\n    \n    arr = arr .- arr[1]\n    arr = arr .- arr[2]\n  \
    \  arr = arr .- arr[3]\n    arr = arr .- arr[4]\n    arr = arr .- arr[5]\n   \
    \ arr = arr .\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: space before \".\" not allowed in \"arr .\" at\
    \ /tmp/tmp7y3lcnmc.jl:91\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7y3lcnmc.jl:91\n\
    in expression starting at /tmp/tmp7y3lcnmc.jl:91\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = sort(arr)\n\
    \    arr = reverse(arr)\n    arr = arr .- arr .% 10\n    arr = arr .+ [\"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    ]\n    return arr\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpow9fn62b.jl:35\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  DimensionMismatch(\"\
    arrays could not be broadcast to a common size; got a dimension with lengths 8\
    \ and 9\")\n  Stacktrace:\n    [1] _bcs1\n      @ ./broadcast.jl:516 [inlined]\n\
    \    [2] _bcs\n      @ ./broadcast.jl:510 [inlined]\n    [3] broadcast_shape\n\
    \      @ ./broadcast.jl:504 [inlined]\n    [4] combine_axes\n      @ ./broadcast.jl:499\
    \ [inlined]\n    [5] instantiate\n      @ ./broadcast.jl:281 [inlined]\n    [6]\
    \ materialize\n      @ ./broadcast.jl:860 [inlined]\n    [7] by_length(arr::Vector{Int64})\n\
    \      @ Main /tmp/tmpow9fn62b.jl:27\n    [8] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [9] macro expansion\n      @ /tmp/tmpow9fn62b.jl:35 [inlined]\n\
    \   [10] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpow9fn62b.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpow9fn62b.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  DimensionMismatch(\"arrays\
    \ could not be broadcast to a common size; got a dimension with lengths 0 and\
    \ 9\")\n  Stacktrace:\n    [1] _bcs1\n      @ ./broadcast.jl:516 [inlined]\n \
    \   [2] _bcs\n      @ ./broadcast.jl:510 [inlined]\n    [3] broadcast_shape\n\
    \      @ ./broadcast.jl:504 [inlined]\n    [4] combine_axes\n      @ ./broadcast.jl:499\
    \ [inlined]\n    [5] instantiate\n      @ ./broadcast.jl:281 [inlined]\n    [6]\
    \ materialize\n      @ ./broadcast.jl:860 [inlined]\n    [7] by_length(arr::Vector{Int64})\n\
    \      @ Main /tmp/tmpow9fn62b.jl:27\n    [8] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [9] macro expansion\n      @ /tmp/tmpow9fn62b.jl:36 [inlined]\n\
    \   [10] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [11"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpow9fn62b.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    arr = sort(arr)\n    arr\
    \ = reverse(arr)\n    arr = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr\
    \ = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n  \
    \  arr = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n\
    \    arr = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr = arr .- arr .+\
    \ 1\n    arr = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr = arr .- arr\
    \ .+ 1\n    arr = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr = arr .-\
    \ arr .+ 1\n    arr = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr = arr\
    \ .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr =\
    \ arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr\
    \ = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n  \
    \  arr = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n\
    \    arr = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr = arr .- arr .+\
    \ 1\n    arr = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr = arr .- arr\
    \ .+ 1\n    arr = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr = arr .-\
    \ arr .+ 1\n    arr = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr = arr\
    \ .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr =\
    \ arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr\
    \ = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n  \
    \  arr = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n\
    \    arr = arr .- arr .+ 1\n    arr = arr .- arr .\nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: space before \".\" not allowed in \"arr .\" at\
    \ /tmp/tmpp98u1guc.jl:80\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpp98u1guc.jl:80\n\
    in expression starting at /tmp/tmpp98u1guc.jl:80\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = sort(arr)\n\
    \    arr = reverse(arr)\n    arr = arr |> Vector{String}\n    \n    arr |> filter(x->x>1\
    \ && x<9) |> map(x->\"One\"..\"Nine\")\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length(arr)\n</cell>\n<text>\nExercise 2\nWrite a function that takes an array\
    \ of integers and returns the array in reverse sorted order. \nFor example, if\
    \ the array is [2, 1, 4, 3, 6, 5, 8, 7, 9, 10], the function should return [10,\
    \ 9, 8, 7, 6, 5, 4, 3, 2, 1].\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp456z1kx_.jl:30\nin expression starting at\
    \ /tmp/tmp456z1kx_.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    arr = sort(arr)\n    arr\
    \ = reverse(arr)\n    arr = arr[2:end]\n    arr = arr.reverse\n    arr = arr[2:end]\n\
    \    arr = arr.reverse\n    arr = arr[2:end]\n    arr = arr.reverse\n    arr =\
    \ arr[2:end]\n    arr = arr.reverse\n    arr = arr[2:end]\n    arr = arr.reverse\n\
    \    arr = arr[2:end]\n    arr = arr.reverse\n    arr = arr[2:end]\n    arr =\
    \ arr.reverse\n    arr = arr[2:end]\n    arr = arr.reverse\n    arr = arr[2:end]\n\
    \    arr = arr.reverse\n    arr = arr[2:end]\n    arr = arr.reverse\n    arr =\
    \ arr[2:end]\n    arr = arr.reverse\n    arr = arr[2:end]\n    arr = arr.reverse\n\
    \    arr = arr[2:end]\n    arr = arr.reverse\n    arr = arr[2:end]\n    arr =\
    \ arr.reverse\n    arr = arr[2:end]\n    arr = arr.reverse\n    arr = arr[2:end]\n\
    \    arr = arr.reverse\n    arr = arr[2:end]\n    arr = arr.reverse\n    arr =\
    \ arr[2:end]\n    arr = arr.reverse\n    arr = arr[2:end]\n    arr = arr.reverse\n\
    \    arr = arr[2:end]\n    arr = arr.reverse\n    arr = arr[2:end]\n    arr =\
    \ arr.reverse\n    arr = arr[2:end]\n    arr = arr.reverse\n    arr = arr[2:end]\n\
    \    arr = arr.reverse\n    arr = arr[2:end]\n    arr = arr.reverse\n    arr =\
    \ arr[2:end]\n    arr = arr.reverse\n    arr = arr[2:end]\n    arr = arr.reverse\n\
    \    arr = arr[2:end]\n    arr = arr.reverse\n    arr = arr[2:end]\n    arr =\
    \ arr.reverse\n    arr = arr[2:end]\n    arr = arr.reverse\n    arr = arr[2:end]\n\
    \    arr = arr.reverse\n    arr = arr[2:end]\n    arr = arr.reverse\n    arr =\
    \ arr[2:end]\n    arr = arr.reverse\n    arr = arr[2:end]\n    arr = arr.reverse\n\
    \    arr = arr[2:end]\n    arr = arr.reverse\n    arr = arr[2:end]\n    arr =\
    \ arr.reverse\n    arr = arr[2:end]\n    arr = arr.reverse\n    arr = arr[2:end]\n\
    \    arr = arr.reverse\n    arr = arr[2:end]\n    arr = arr.reverse\n    arr =\
    \ arr[2:end]\n    arr = arr.reverse\n    arr = arr[2:end]\n    arr = arr.reverse\n\
    \    arr = arr[2:end]\n    arr = arr.reverse\n    arr = arr[2:end]\n    arr =\
    \ arr.reverse\n    arr = arr[2:end]\n    arr = arr.reverse\n    arr = arr[2:end]\n\
    \    arr = arr.reverse\n    arr = arr[2:end]\n    arr = arr.reverse\n    arr =\
    \ arr[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t\
    @test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpbjmmai_0.jl:22\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpbjmmai_0.jl:1\n\
    in expression starting at /tmp/tmpbjmmai_0.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr1 = sort(arr)\n\
    \    arr2 = reverse(arr1)\n    \n    arr3 = arr2\n    \n    arr4 = arr3\n    \n\
    \    arr5 = arr4\n    \n    arr6 = arr5\n    \n    arr7 = arr6\n    \n    arr8\
    \ = arr7\n    \n    arr9 = arr8\n    \n    arr10 = arr9\n    \n    arr11 = arr10\n\
    \    \n    arr12 = arr11\n    \n    arr13 = arr12\n    \n    arr14 = arr13\n \
    \   \n    arr15 = arr14\n    \n    arr16 = arr15\n    \n    arr17 = arr16\n  \
    \  \n    arr18 = arr17\n    \n    arr19 = arr18\n    \n    arr20 = arr19\n   \
    \ \n    arr21 = arr20\n    \n    arr22 = arr21\n    \n    arr23 = arr22\n    \n\
    \    arr24 = arr23\n    \n    arr25 = arr24\n    \n    arr26 = arr25\n    \n \
    \   arr27 = arr26\n    \n    arr28 = arr27\n    \n    arr29 = arr28\n    \n  \
    \  arr30 = arr29\n    \n    arr31 = arr30\n    \n    arr32 = arr31\n    \n   \
    \ arr33 = arr32\n    \n    arr34 = arr33\n    \n    arr35 = arr34\n    \n    arr36\
    \ = arr35\n    \n    arr37 = arr36\n    \n    arr38 = arr37\n    \n    arr39 =\
    \ arr38\n    \n    arr40 = arr39\n    \n    arr41 = arr40\n    \n    arr42 = arr41\n\
    \    \n    arr43 = arr42\n    \n    arr44 = arr43\n    \n    arr45 = arr44\n \
    \   \n    arr46 = arr45\n    \n    arr47 = arr46\n    \n    arr48 = arr47\n  \
    \  \n    arr49 = arr48\n    \n    arr50 = arr49\n    \n    arr51 = arr50\n   \
    \ \n    arr52 = arr51\n    \n    arr53 = arr52\n    \n    arr54 = arr53\n    \n\
    \    arr55 = arr54\n    \n    arr56 = arr55\n    \n    arr57 = arr56\n    \n \
    \   arr58 = arr57\n    \n    \nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpdw3juv0y.jl:22\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpdw3juv0y.jl:1\n\
    in expression starting at /tmp/tmpdw3juv0y.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = sort(arr)\n\
    \    arr = reverse(arr)\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp96f3tn7z.jl:22\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp96f3tn7z.jl:1\n\
    in expression starting at /tmp/tmp96f3tn7z.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    arr = sort(arr)\n    arr\
    \ = reverse(arr)\n    arr = arr .- arr[1]\n    arr = arr .- arr[2]\n    arr =\
    \ arr .- arr[3]\n    arr = arr .- arr[4]\n    arr = arr .- arr[5]\n    arr = arr\
    \ .- arr[6]\n    arr = arr .- arr[7]\n    arr = arr .- arr[8]\n    arr = arr .-\
    \ arr[9]\n    arr = arr .- arr[1]\n    arr = arr .- arr[2]\n    arr = arr .- arr[3]\n\
    \    arr = arr .- arr[4]\n    arr = arr .- arr[5]\n    arr = arr .- arr[6]\n \
    \   arr = arr .- arr[7]\n    arr = arr .- arr[8]\n    arr = arr .- arr[9]\n  \
    \  arr = arr .- arr[1]\n    arr = arr .- arr[2]\n    arr = arr .- arr[3]\n   \
    \ arr = arr .- arr[4]\n    arr = arr .- arr[5]\n    arr = arr .- arr[6]\n    arr\
    \ = arr .- arr[7]\n    arr = arr .- arr[8]\n    arr = arr .- arr[9]\n    arr =\
    \ arr .- arr[1]\n    arr = arr .- arr[2]\n    arr = arr .- arr[3]\n    arr = arr\
    \ .- arr[4]\n    arr = arr .- arr[5]\n    arr = arr .- arr[6]\n    arr = arr .-\
    \ arr[7]\n    arr = arr .- arr[8]\n    arr = arr .- arr[9]\n    arr = arr .- arr[1]\n\
    \    arr = arr .- arr[2]\n    arr = arr .- arr[3]\n    arr = arr .- arr[4]\n \
    \   arr = arr .- arr[5]\n    arr = arr .- arr[6]\n    arr = arr .- arr[7]\n  \
    \  arr = arr .- arr[8]\n    arr = arr .- arr[9]\n    arr = arr .- arr[1]\n   \
    \ arr = arr .- arr[2]\n    arr = arr .- arr[3]\n    arr = arr .- arr[4]\n    arr\
    \ = arr .- arr[5]\n    arr = arr .- arr[6]\n    arr = arr .- arr[7]\n    arr =\
    \ arr .- arr[8]\n    arr = arr .- arr[9]\n    arr = arr .- arr[1]\n    arr = arr\
    \ .- arr[2]\n    arr = arr .- arr[3]\n    arr = arr .- arr[4]\n    arr = arr .-\
    \ arr[5]\n    arr = arr .- arr[6]\n    arr = arr .- arr[7]\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3])\
    \ == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpbq3vq2kr.jl:22\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpbq3vq2kr.jl:1\n\
    in expression starting at /tmp/tmpbq3vq2kr.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr2 = sort(arr)\n\
    \    arr3 = reverse(arr2)\n    \n    arr4 = arr3\n    \n    arr5 = arr4\n    \n\
    \    arr6 = arr5\n    \n    arr7 = arr6\n    \n    arr8 = arr7\n    \n    arr9\
    \ = arr8\n    \n    arr10 = arr9\n    \n    arr11 = arr10\n    \n    arr12 = arr11\n\
    \    \n    arr13 = arr12\n    \n    arr14 = arr13\n    \n    arr15 = arr14\n \
    \   \n    arr16 = arr15\n    \n    arr17 = arr16\n    \n    arr18 = arr17\n  \
    \  \n    arr19 = arr18\n    \n    arr20 = arr19\n    \n    arr21 = arr20\n   \
    \ \n    arr22 = arr21\n    \n    arr23 = arr22\n    \n    arr24 = arr23\n    \n\
    \    arr25 = arr24\n    \n    arr26 = arr25\n    \n    arr27 = arr26\n    \n \
    \   arr28 = arr27\n    \n    arr29 = arr28\n    \n    arr30 = arr29\n    \n  \
    \  arr31 = arr30\n    \n    arr32 = arr31\n    \n    arr33 = arr32\n    \n   \
    \ arr34 = arr33\n    \n    arr35 = arr34\n    \n    arr36 = arr35\n    \n    arr37\
    \ = arr36\n    \n    arr38 = arr37\n    \n    arr39 = arr38\n    \n    arr40 =\
    \ arr39\n    \n    arr41 = arr40\n    \n    arr42 = arr41\n    \n    arr43 = arr42\n\
    \    \n    arr44 = arr43\n    \n    arr45 = arr44\n    \n    arr46 = arr45\n \
    \   \n    arr47 = arr46\n    \n    arr48 = arr47\n    \n    arr49 = arr48\n  \
    \  \n    arr50 = arr49\n    \n    arr51 = arr50\n    \n    arr52 = arr51\n   \
    \ \n    arr53 = arr52\n    \n    arr54 = arr53\n    \n    arr55 = arr54\n    \n\
    \    arr56 = arr55\n    \n    arr57 = arr56\n    \n    arr58 = arr57\n    \n \
    \   arr59 = arr58\n    \n\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpf137poya.jl:22\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpf137poya.jl:1\n\
    in expression starting at /tmp/tmpf137poya.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    arr = sort(arr)\n    arr\
    \ = reverse(arr)\n    arr = arr .- arr[1]\n    arr = arr .- arr[2]\n    arr =\
    \ arr .- arr[3]\n    arr = arr .- arr[4]\n    arr = arr .- arr[5]\n    arr = arr\
    \ .- arr[6]\n    arr = arr .- arr[7]\n    arr = arr .- arr[8]\n    arr = arr .-\
    \ arr[9]\n    arr = arr .- arr[1]\n    arr = arr .- arr[2]\n    arr = arr .- arr[3]\n\
    \    arr = arr .- arr[4]\n    arr = arr .- arr[5]\n    arr = arr .- arr[6]\n \
    \   arr = arr .- arr[7]\n    arr = arr .- arr[8]\n    arr = arr .- arr[9]\n  \
    \  arr = arr .- arr[1]\n    arr = arr .- arr[2]\n    arr = arr .- arr[3]\n   \
    \ arr = arr .- arr[4]\n    arr = arr .- arr[5]\n    arr = arr .- arr[6]\n    arr\
    \ = arr .- arr[7]\n    arr = arr .- arr[8]\n    arr = arr .- arr[9]\n    arr =\
    \ arr .- arr[1]\n    arr = arr .- arr[2]\n    arr = arr .- arr[3]\n    arr = arr\
    \ .- arr[4]\n    arr = arr .- arr[5]\n    arr = arr .- arr[6]\n    arr = arr .-\
    \ arr[7]\n    arr = arr .- arr[8]\n    arr = arr .- arr[9]\n    arr = arr .- arr[1]\n\
    \    arr = arr .- arr[2]\n    arr = arr .- arr[3]\n    arr = arr .- arr[4]\n \
    \   arr = arr .- arr[5]\n    arr = arr .- arr[6]\n    arr = arr .- arr[7]\n  \
    \  arr = arr .- arr[8]\n    arr = arr .- arr[9]\n    arr = arr .- arr[1]\n   \
    \ arr = arr .- arr[2]\n    arr = arr .- arr[3]\n    arr = arr .- arr[4]\n    arr\
    \ = arr .- arr[5]\n    arr = arr .- arr[6]\n    arr = arr .- arr[7]\n    arr =\
    \ arr .- arr[8]\n    arr = arr .- arr[9]\n    arr = arr .- arr[1]\n    arr = arr\
    \ .- arr[2]\n    arr = arr .- arr[3]\n    arr = arr .- arr[4]\n    arr = arr .-\
    \ arr[5]\n    arr = arr .- arr[6]\n    arr = arr .- arr[7]\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3])\
    \ == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpfflhfnyc.jl:22\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfflhfnyc.jl:1\n\
    in expression starting at /tmp/tmpfflhfnyc.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = sort(arr)\n\
    \    arr = reverse(arr)\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .+\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .+ arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .+ arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .+ arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .+ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .+\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .+ arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .+ arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .+ arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .+ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .+\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .+ arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .+ arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .+ arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .+ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .+\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .+ arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .+ arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .+ arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .+ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .+\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .+ arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .+ arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .+ arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .+ arr[1]\n\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxy7xy4r5.jl:22\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxy7xy4r5.jl:1\n\
    in expression starting at /tmp/tmpxy7xy4r5.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = sort(arr)\n\
    \    arr = reverse(arr)\n    arr = arr[2:end]\n    arr = arr.reverse\n    \n \
    \   arr = arr .+ arr[1]\n    \n    arr = arr .+ arr[1]\n    \n    arr = arr .+\
    \ arr[1]\n    \n    arr = arr .+ arr[1]\n    \n    arr = arr .+ arr[1]\n    \n\
    \    arr = arr .+ arr[1]\n    \n    arr = arr .+ arr[1]\n    \n    arr = arr .+\
    \ arr[1]\n    \n    arr = arr .+ arr[1]\n    \n    arr = arr .+ arr[1]\n    \n\
    \    arr = arr .+ arr[1]\n    \n    arr = arr .+ arr[1]\n    \n    arr = arr .+\
    \ arr[1]\n    \n    arr = arr .+ arr[1]\n    \n    arr = arr .+ arr[1]\n    \n\
    \    arr = arr .+ arr[1]\n    \n    arr = arr .+ arr[1]\n    \n    arr = arr .+\
    \ arr[1]\n    \n    arr = arr .+ arr[1]\n    \n    arr = arr .+ arr[1]\n    \n\
    \    arr = arr .+ arr[1]\n    \n    arr = arr .+ arr[1]\n    \n    arr = arr .+\
    \ arr[1]\n    \n    arr = arr .+ arr[1]\n    \n    arr = arr .+ arr[1]\n    \n\
    \    arr = arr .+ arr[1]\n    \n    arr = arr .+ arr[1]\n    \n    arr = arr .+\
    \ arr[1]\n    \n    arr = arr .+ arr[1]\n    \n    arr = arr .+ arr[1]\n    \n\
    \    arr = arr .+ arr[1]\n    \n    arr = arr .+ arr[1]\n    \n    arr = arr .+\
    \ arr[1]\n    \n    arr = arr .+ arr[1]\n    \n    arr = arr .+ arr[1]\n    \n\
    \    arr = arr .+ arr[1]\n    \n    arr = arr .+ arr[1]\n    \n    arr = arr .+\
    \ arr[1]\n    \n    arr = arr .+ arr[1]\n    \n    arr = arr .+ arr[1]\n    \n\
    \    arr = arr .+ arr[1]\n    \n    arr = arr .+ arr[1]\n    \n    arr = arr .+\
    \ arr[1]\n    \n    arr = arr .+ arr[1]\n    \n    arr = arr .+ arr[1]\n    \n\
    \    arr = arr .+ arr[1]\n    \n    arr = arr .+ arr[1]\n    \n    arr = arr .+\
    \ arr[1]\n    \n    arr = arr .+ arr[1]\nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp6lfd7cci.jl:22\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6lfd7cci.jl:1\n\
    in expression starting at /tmp/tmp6lfd7cci.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = sort(arr)\n\
    \    arr = reverse(arr)\n    \n    arr = arr .+ 1\n    \n    arr = arr .- 10\n\
    \    \n    arr = arr .- 9\n    \n    arr = arr .- 8\n    \n    arr = arr .- 7\n\
    \    \n    arr = arr .- 6\n    \n    arr = arr .- 5\n    \n    arr = arr .- 4\n\
    \    \n    arr = arr .- 3\n    \n    arr = arr .- 2\n    \n    arr = arr .- 1\n\
    \    \n    arr = arr .- 0\n    \n    arr = arr .+ 1\n    \n    arr = arr .+ 2\n\
    \    \n    arr = arr .+ 3\n    \n    arr = arr .+ 4\n    \n    arr = arr .+ 5\n\
    \    \n    arr = arr .+ 6\n    \n    arr = arr .+ 7\n    \n    arr = arr .+ 8\n\
    \    \n    arr = arr .+ 9\n    \n    arr = arr .+ 10\n    \n    arr = arr .+ 11\n\
    \    \n    arr = arr .+ 12\n    \n    arr = arr .+ 13\n    \n    arr = arr .+\
    \ 14\n    \n    arr = arr .+ 15\n    \n    arr = arr .+ 16\n    \n    arr = arr\
    \ .+ 17\n    \n    arr = arr .+ 18\n    \n    arr = arr .+ 19\n    \n    arr =\
    \ arr .+ 20\n    \n    arr = arr .+ 21\n    \n    arr = arr .+ 22\n    \n    arr\
    \ = arr .+ 23\n    \n    arr = arr .+ 24\n    \n    arr = arr .+ 25\n    \n  \
    \  arr = arr .+ 26\n    \n    arr = arr .+ 27\n    \n    arr = arr .+ 28\n   \
    \ \n    arr = arr .+ 29\n    \n    arr = arr .+ 30\n    \n    arr = arr .+ 31\n\
    \    \n    arr = arr .+ 32\n    \n    arr = arr .+ 33\n    \n    arr = arr .+\
    \ 34\n    \n    arr = arr .+ 35\n    \n    arr = arr .+ 36\n    \n    arr = arr\
    \ .+ 37\n    \n    arr = arr .+ 38\n    \n    arr = arr .+ 39\n    \n    arr =\
    \ arr .+ 40\n    \n    arr = arr .+ 41\n    \n    arr = arr .+ 42\n    \n    arr\
    \ = arr .+ 43\n    \n    arr = arr .+ 44\nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp_mmmdhp2.jl:22\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_mmmdhp2.jl:1\n\
    in expression starting at /tmp/tmp_mmmdhp2.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = sort(arr)\n\
    \    arr = reverse(arr)\n    \n    arr = map(x -> \"One\" if x == 1 \n       \
    \ else \"Two\" if x == 2 \n        else \"Three\" if x == 3 \n        else \"\
    Four\" if x == 4 \n        else \"Five\" if x == 5 \n        else \"Six\" if x\
    \ == 6 \n        else \"Seven\" if x == 7 \n        else \"Eight\" if x == 8 \n\
    \        else \"Nine\", arr)\n    \n    return arr\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length(arr)\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector\
    \ of integers and returns a vector of strings that represent each of the numbers\
    \ from 1 to 9 inclusive.\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu5s3y0r7.jl:27\nin expression starting at\
    \ /tmp/tmpu5s3y0r7.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = sort(arr)\n\
    \    arr = reverse(arr)\n    arr = arr .- arr[1]\n    arr = arr .+ arr[1]\n  \
    \  arr = arr .+ arr[2]\n    arr = arr .+ arr[3]\n    arr = arr .+ arr[4]\n   \
    \ arr = arr .+ arr[5]\n    arr = arr .+ arr[6]\n    arr = arr .+ arr[7]\n    arr\
    \ = arr .+ arr[8]\n    arr = arr .+ arr[9]\n    arr = arr .+ arr[1]\n    \n  \
    \  arr = arr .- arr[1]\n    arr = arr .+ arr[1]\n    arr = arr .+ arr[2]\n   \
    \ arr = arr .+ arr[3]\n    arr = arr .+ arr[4]\n    arr = arr .+ arr[5]\n    arr\
    \ = arr .+ arr[6]\n    arr = arr .+ arr[7]\n    arr = arr .+ arr[8]\n    arr =\
    \ arr .+ arr[9]\n    arr = arr .+ arr[1]\n    \n    arr = arr .- arr[1]\n    arr\
    \ = arr .+ arr[1]\n    arr = arr .+ arr[2]\n    arr = arr .+ arr[3]\n    arr =\
    \ arr .+ arr[4]\n    arr = arr .+ arr[5]\n    arr = arr .+ arr[6]\n    arr = arr\
    \ .+ arr[7]\n    arr = arr .+ arr[8]\n    arr = arr .+ arr[9]\n    arr = arr .+\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    arr = arr .+ arr[1]\n    arr = arr\
    \ .+ arr[2]\n    arr = arr .+ arr[3]\n    arr = arr .+ arr[4]\n    arr = arr .+\
    \ arr[5]\n    arr = arr .+ arr[6]\n    arr = arr .+ arr[7]\n    arr = arr .+ arr[8]\n\
    \    arr = arr .+ arr[9]\n    arr = arr .+ arr[1]\n    \n    arr = arr .- arr[1]\n\
    \    arr = arr .+ arr[1]\n    arr = arr .+ arr[2]\n    arr = arr .+ arr[3]\n \
    \   arr = arr .+ arr[4]\n    arr = arr .+ arr[5]\n    arr = arr .+ arr[6]\n  \
    \  arr = arr .+ arr[7]\n    arr = arr .+ arr[8]\n    arr = arr .+ arr[9]\n   \
    \ arr = arr .+ arr[1]\n    \n    arr = arr .- arr[1]\n    arr = arr .+ arr[1]\n\
    \    arr = arr .+ arr[2]\n    arr = arr .+ arr[3]\n    arr = arr .+ arr[4]\n\n\
    using Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp2uo6mofs.jl:22\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2uo6mofs.jl:1\n\
    in expression starting at /tmp/tmp2uo6mofs.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = sort(arr)\n\
    \    arr = reverse(arr)\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpch1njgbj.jl:22\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpch1njgbj.jl:1\n\
    in expression starting at /tmp/tmpch1njgbj.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    arr = sort(arr)\n    arr\
    \ = reverse(arr)\n    arr = arr .- arr[1]\n    arr = arr .- arr[2]\n    arr =\
    \ arr .- arr[3]\n    arr = arr .- arr[4]\n    arr = arr .- arr[5]\n    arr = arr\
    \ .- arr[6]\n    arr = arr .- arr[7]\n    arr = arr .- arr[8]\n    arr = arr .-\
    \ arr[9]\n    arr = arr .- arr[1]\n    arr = arr .- arr[2]\n    arr = arr .- arr[3]\n\
    \    arr = arr .- arr[4]\n    arr = arr .- arr[5]\n    arr = arr .- arr[6]\n \
    \   arr = arr .- arr[7]\n    arr = arr .- arr[8]\n    arr = arr .- arr[9]\n  \
    \  arr = arr .- arr[1]\n    arr = arr .- arr[2]\n    arr = arr .- arr[3]\n   \
    \ arr = arr .- arr[4]\n    arr = arr .- arr[5]\n    arr = arr .- arr[6]\n    arr\
    \ = arr .- arr[7]\n    arr = arr .- arr[8]\n    arr = arr .- arr[9]\n    arr =\
    \ arr .- arr[1]\n    arr = arr .- arr[2]\n    arr = arr .- arr[3]\n    arr = arr\
    \ .- arr[4]\n    arr = arr .- arr[5]\n    arr = arr .- arr[6]\n    arr = arr .-\
    \ arr[7]\n    arr = arr .- arr[8]\n    arr = arr .- arr[9]\n    arr = arr .- arr[1]\n\
    \    arr = arr .- arr[2]\n    arr = arr .- arr[3]\n    arr = arr .- arr[4]\n \
    \   arr = arr .- arr[5]\n    arr = arr .- arr[6]\n    arr = arr .- arr[7]\n  \
    \  arr = arr .- arr[8]\n    arr = arr .- arr[9]\n    arr = arr .- arr[1]\n   \
    \ arr = arr .- arr[2]\n    arr = arr .- arr[3]\n    arr = arr .- arr[4]\n    arr\
    \ = arr .- arr[5]\n    arr = arr .- arr[6]\n    arr = arr .- arr[7]\n    arr =\
    \ arr .- arr[8]\n    arr = arr .- arr[9]\n    arr = arr .- arr[1]\n    arr = arr\
    \ .- arr[2]\n    arr = arr .- arr[3]\n    arr = arr .- arr[4]\n    arr = arr .-\
    \ arr[5]\n    arr = arr .- arr[6]\n    arr = arr .- arr[7]\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3])\
    \ == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp737lhcix.jl:22\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp737lhcix.jl:1\n\
    in expression starting at /tmp/tmp737lhcix.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = sort(arr)\n\
    \    arr = reverse(arr)\n    arr = arr .- arr[1]\n    arr = arr .+ arr[1]\n  \
    \  arr = arr .- arr[1]\n    arr = arr .+ arr[1]\n    arr = arr .- arr[1]\n   \
    \ arr = arr .+ arr[1]\n    arr = arr .- arr[1]\n    arr = arr .+ arr[1]\n    arr\
    \ = arr .- arr[1]\n    arr = arr .+ arr[1]\n    arr = arr .- arr[1]\n    arr =\
    \ arr .+ arr[1]\n    arr = arr .- arr[1]\n    arr = arr .+ arr[1]\n    arr = arr\
    \ .- arr[1]\n    arr = arr .+ arr[1]\n    arr = arr .- arr[1]\n    arr = arr .+\
    \ arr[1]\n    arr = arr .- arr[1]\n    arr = arr .+ arr[1]\n    arr = arr .- arr[1]\n\
    \    arr = arr .+ arr[1]\n    arr = arr .- arr[1]\n    arr = arr .+ arr[1]\n \
    \   arr = arr .- arr[1]\n    arr = arr .+ arr[1]\n    arr = arr .- arr[1]\n  \
    \  arr = arr .+ arr[1]\n    arr = arr .- arr[1]\n    arr = arr .+ arr[1]\n   \
    \ arr = arr .- arr[1]\n    arr = arr .+ arr[1]\n    arr = arr .- arr[1]\n    arr\
    \ = arr .+ arr[1]\n    arr = arr .- arr[1]\n    arr = arr .+ arr[1]\n    arr =\
    \ arr .- arr[1]\n    arr = arr .+ arr[1]\n    arr = arr .- arr[1]\n    arr = arr\
    \ .+ arr[1]\n    arr = arr .- arr[1]\n    arr = arr .+ arr[1]\n    arr = arr .-\
    \ arr[1]\n    arr = arr .+ arr[1]\n    arr = arr .- arr[1]\n    arr = arr .+ arr[1]\n\
    \    arr = arr .- arr[1]\n    arr = arr .+ arr[1]\n    arr = arr .- arr[1]\n \
    \   arr = arr .+ arr[1]\n    arr = arr .- arr[1]\n    arr = arr .+ arr[1]\n  \
    \  arr = arr .- arr[1]\n    arr = arr .+ arr[1]\n    arr = arr .- arr[1]\n   \
    \ arr = arr .+ arr[1]\n    arr = arr .- arr[1]\n    arr = arr .+ arr[1]\n    arr\
    \ = arr .- arr[1]\n    arr = arr .+ arr[1]\n    arr = arr .- arr[1]\n    arr =\
    \ arr .+ arr[1]\n    arr = arr .\nusing Test\n\n@testset begin\n\ncandidate =\
    \ by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: space before \".\" not allowed in \"arr .\" at\
    \ /tmp/tmppvxn9xu_.jl:88\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppvxn9xu_.jl:88\n\
    in expression starting at /tmp/tmppvxn9xu_.jl:88\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr2 = sort(arr)\n\
    \    arr3 = reverse(arr2)\n    \n    arr4 = arr3\n    \n    arr5 = arr4\n    \n\
    \    arr6 = arr5\n    \n    arr7 = arr6\n    \n    arr8 = arr7\n    \n    arr9\
    \ = arr8\n    \n    arr10 = arr9\n    \n    arr11 = arr10\n    \n    arr12 = arr11\n\
    \    \n    arr13 = arr12\n    \n    arr14 = arr13\n    \n    arr15 = arr14\n \
    \   \n    arr16 = arr15\n    \n    arr17 = arr16\n    \n    arr18 = arr17\n  \
    \  \n    arr19 = arr18\n    \n    arr20 = arr19\n    \n    arr21 = arr20\n   \
    \ \n    arr22 = arr21\n    \n    arr23 = arr22\n    \n    arr24 = arr23\n    \n\
    \    arr25 = arr24\n    \n    arr26 = arr25\n    \n    arr27 = arr26\n    \n \
    \   arr28 = arr27\n    \n    arr29 = arr28\n    \n    arr30 = arr29\n    \n  \
    \  arr31 = arr30\n    \n    arr32 = arr31\n    \n    arr33 = arr32\n    \n   \
    \ arr34 = arr33\n    \n    arr35 = arr34\n    \n    arr36 = arr35\n    \n    arr37\
    \ = arr36\n    \n    arr38 = arr37\n    \n    arr39 = arr38\n    \n    arr40 =\
    \ arr39\n    \n    arr41 = arr40\n    \n    arr42 = arr41\n    \n    arr43 = arr42\n\
    \    \n    arr44 = arr43\n    \n    arr45 = arr44\n    \n    arr46 = arr45\n \
    \   \n    arr47 = arr46\n    \n    arr48 = arr47\n    \n    arr49 = arr48\n  \
    \  \n    arr50 = arr49\n    \n    arr51 = arr50\n    \n    arr52 = arr51\n   \
    \ \n    arr53 = arr52\n    \n    arr54 = arr53\n    \n    arr55 = arr54\n    \n\
    \    arr56 = arr55\n    \n    arr57 = arr56\n    \n    arr58 = arr57\n    \n \
    \   arr59 = arr58\n    \n\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp_i4prp8l.jl:22\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_i4prp8l.jl:1\n\
    in expression starting at /tmp/tmp_i4prp8l.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = sort(arr)\n\
    \    arr = reverse(arr)\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp3_2pknac.jl:22\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3_2pknac.jl:1\n\
    in expression starting at /tmp/tmp3_2pknac.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = sort(arr)\n\
    \    arr = reverse(arr)\n    \n    arr = arr |> Vector{String}\n    \n    arr\
    \ = arr |> filter(x->isdigit(x)) |> Vector{String}\n    \n    arr = arr |> filter(x->isalpha(x))\
    \ |> Vector{String}\n    \n    arr = arr |> filter(x->islower(x)) |> Vector{String}\n\
    \    \n    arr = arr |> filter(x->isupper(x)) |> Vector{String}\n    \n    arr\
    \ = arr |> filter(x->isspace(x)) |> Vector{String}\n    \n    arr = arr |> filter(x->x==1\
    \ || x==2 || x==3 || x==4 || x==5 || x==6 || x==7 || x==8 || x==9) |> Vector{String}\n\
    \    \n    arr = arr |> filter(x->x==0) |> Vector{String}\n    \n    arr = arr\
    \ |> filter(x->x=='.') |> Vector{String}\n    \n    arr = arr |> filter(x->x=='-')\
    \ |> Vector{String}\n    \n    arr = arr |> filter(x->x=='/') |> Vector{String}\n\
    \    \n    arr = arr |> filter(x->x=='*') |> Vector{String}\n    \n    arr = arr\
    \ |> filter(x->x=='+') |> Vector{String}\n    \n    arr = arr |> filter(x->x=='(')\
    \ |> Vector{String}\n    \n    arr = arr |> filter(x->x==')') |> Vector{String}\n\
    \    \n    arr = arr |> filter(x->x=='0') |> Vector{String}\n    \n    arr = arr\
    \ |> filter(x->x=='1') |> Vector{String}\n    \n    arr = arr |> filter(x->x=='2')\
    \ |> Vector{String}\n    \n    arr = arr |> filter(x->x=='3') |> Vector{String}\n\
    \    \n    arr = arr |> filter(x->x=='4') |> Vector{String}\n    \n    arr = arr\
    \ |> filter(x->x=='5') |> Vector{String}\n    \n    arr = arr |> filter(x->x=='6')\
    \ |> \nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp0167kr2b.jl:22\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0167kr2b.jl:1\n\
    in expression starting at /tmp/tmp0167kr2b.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    arr = sort(arr)\n    arr\
    \ = reverse(arr)\n    arr = map(x -> \"One\"[x], arr)\n    return arr\nend\n</cell>\n\
    <code language=julia-1.5>\nby_length(arr)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes an array of integers and returns the array in reverse\
    \ sorted order. For example, if the array is [2, 1, 4, 3, 8, 5, 6, 7], the function\
    \ should return [7, 6, 8, 5, 4, 3, 2, 1].\nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb3mv7v49.jl:28\nin expression starting at\
    \ /tmp/tmpb3mv7v49.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    arr = sort(arr)\n    arr\
    \ = reverse(arr)\n    arr = arr .- arr[1]\n    arr = arr .- arr[2]\n    arr =\
    \ arr .- arr[3]\n    arr = arr .- arr[4]\n    arr = arr .- arr[5]\n    arr = arr\
    \ .- arr[6]\n    arr = arr .- arr[7]\n    arr = arr .- arr[8]\n    arr = arr .-\
    \ arr[9]\n    arr = arr .- arr[0]\n    arr = arr .- arr[1]\n    arr = arr .- arr[2]\n\
    \    arr = arr .- arr[3]\n    arr = arr .- arr[4]\n    arr = arr .- arr[5]\n \
    \   arr = arr .- arr[6]\n    arr = arr .- arr[7]\n    arr = arr .- arr[8]\n  \
    \  arr = arr .- arr[9]\n    arr = arr .- arr[0]\n    arr = arr .- arr[1]\n   \
    \ arr = arr .- arr[2]\n    arr = arr .- arr[3]\n    arr = arr .- arr[4]\n    arr\
    \ = arr .- arr[5]\n    arr = arr .- arr[6]\n    arr = arr .- arr[7]\n    arr =\
    \ arr .- arr[8]\n    arr = arr .- arr[9]\n    arr = arr .- arr[0]\n    arr = arr\
    \ .- arr[1]\n    arr = arr .- arr[2]\n    arr = arr .- arr[3]\n    arr = arr .-\
    \ arr[4]\n    arr = arr .- arr[5]\n    arr = arr .- arr[6]\n    arr = arr .- arr[7]\n\
    \    arr = arr .- arr[8]\n    arr = arr .- arr[9]\n    arr = arr .- arr[0]\n \
    \   arr = arr .- arr[1]\n    arr = arr .- arr[2]\n    arr = arr .- arr[3]\n  \
    \  arr = arr .- arr[4]\n    arr = arr .- arr[5]\n    arr = arr .- arr[6]\n   \
    \ arr = arr .- arr[7]\n    arr = arr .- arr[8]\n    arr = arr .- arr[9]\n    arr\
    \ = arr .- arr[0]\n    arr = arr .- arr[1]\n    arr = arr .- arr[2]\n    arr =\
    \ arr .- arr[3]\n    arr = arr .- arr[4]\n    arr = arr .- arr[5]\n    arr = arr\
    \ .- arr[6]\n    arr = arr .- arr[7]\n    arr = arr .- arr[8]\n    arr = arr .-\
    \ arr[9]\n    arr = arr .- arr[0]\n    arr = arr .- arr[1]\n    arr = \nusing\
    \ Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1,\
    \ 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpo7h71hqh.jl:22\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpo7h71hqh.jl:1\n\
    in expression starting at /tmp/tmpo7h71hqh.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = sort(arr)\n\
    \    arr = reverse(arr)\n    arr = arr |> Vector{String}\n    \n    arr |> filter(x->x>1\
    \ && x<9) |> map(x->\"One\"*(x-1)) |> collect{x->x}\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3])\
    \ == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmprhdsxr51.jl:35\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type Int64 to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n    [1] setindex!(A::Vector{String}, x::Int64, i1::Int64)\n\
    \      @ Base ./array.jl:903\n    [2] _unsafe_copyto!(dest::Vector{String}, doffs::Int64,\
    \ src::Vector{Int64}, soffs::Int64, n::Int64)\n      @ Base ./array.jl:253\n \
    \   [3] unsafe_copyto!\n      @ ./array.jl:307 [inlined]\n    [4] _copyto_impl!\n\
    \      @ ./array.jl:331 [inlined]\n    [5] copyto!\n      @ ./array.jl:317 [inlined]\n\
    \    [6] copyto!\n      @ ./array.jl:343 [inlined]\n    [7] copyto_axcheck!\n\
    \      @ ./abstractarray.jl:1104 [inlined]\n    [8] Vector{String}(x::Vector{Int64})\n\
    \      @ Base ./array.jl:563\n    [9] |>\n      @ ./operators.jl:966 [inlined]\n\
    \   [10] by_length(arr::Vector{Int64})\n      @ Main /tmp/tmprhdsxr51.jl:26\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [12] macro expansion\n      @ /tmp/tmprhdsxr51.jl:35 [inlined]\n\
    \   [13] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [14] top-level scope\n      @ /tmp/tmprhdsxr51.jl:34\ntest set:\
    \ Error During Test at /tmp/tmprhdsxr51.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  MethodError: no method\
    \ matching filter(::var\"#1#4\")\n  Closest candidates are:\n    filter(::Any,\
    \ !Matched::Tuple) at /shared/centos7/julia/1.7.3/share/julia/base/"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprhdsxr51.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = sort(arr)\n\
    \    arr = reverse(arr)\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .+\
    \ arr[1]\n    \n    arr = arr .+ arr[2]\n    \n    arr = arr .+ arr[3]\n    \n\
    \    arr = arr .+ arr[4]\n    \n    arr = arr .+ arr[5]\n    \n    arr = arr .+\
    \ arr[6]\n    \n    arr = arr .+ arr[7]\n    \n    arr = arr .+ arr[8]\n    \n\
    \    arr = arr .+ arr[9]\n    \n    arr = arr .+ arr[0]\n    \n    arr = arr .+\
    \ arr[1]\n    \n    arr = arr .+ arr[2]\n    \n    arr = arr .+ arr[3]\n    \n\
    \    arr = arr .+ arr[4]\n    \n    arr = arr .+ arr[5]\n    \n    arr = arr .+\
    \ arr[6]\n    \n    arr = arr .+ arr[7]\n    \n    arr = arr .+ arr[8]\n    \n\
    \    arr = arr .+ arr[9]\n    \n    arr = arr .+ arr[0]\n    \n    arr = arr .+\
    \ arr[1]\n    \n    arr = arr .+ arr[2]\n    \n    arr = arr .+ arr[3]\n    \n\
    \    arr = arr .+ arr[4]\n    \n    arr = arr .+ arr[5]\n    \n    arr = arr .+\
    \ arr[6]\n    \n    arr = arr .+ arr[7]\n    \n    arr = arr .+ arr[8]\n    \n\
    \    arr = arr .+ arr[9]\n    \n    arr = arr .+ arr[0]\n    \n    arr = arr .+\
    \ arr[1]\n    \n    arr = arr .+ arr[2]\n    \n    arr = arr .+ arr[3]\n    \n\
    \    arr = arr .+ arr[4]\n    \n    arr = arr .+ arr[5]\n    \n    arr = arr .+\
    \ arr[6]\n    \n    arr = arr .+ arr[7]\n    \n    arr = arr .+ arr[8]\n    \n\
    \    arr = arr .+ arr[9]\n    \n    arr = arr .+ arr[0]\n    \n    arr = arr .+\
    \ arr[1]\n    \n    arr = arr .+ arr[2]\n    \n    arr = arr .+ arr[3]\n    \n\
    \    arr = arr .+ arr[4]\n    \n    arr = arr .+ arr[5]\n    \n    arr = arr .+\
    \ arr[6]\n    \n    arr = arr .+ arr[7]\n    \n    arr = arr .+ arr[8]\n\nusing\
    \ Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1,\
    \ 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpgjf42sye.jl:22\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpgjf42sye.jl:1\n\
    in expression starting at /tmp/tmpgjf42sye.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    arr = sort(arr)\n    arr\
    \ = reverse(arr)\n    arr = arr[1:end-1]\n    arr = arr .+ [\"One\", \"Two\",\
    \ \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  \
    \  return arr\nend\n</cell>\n<code language=julia-1.5>\nby_length(arr)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes an array of integers and returns\
    \ the array in reverse order but with each digit replaced by its corresponding\
    \ name from \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5balp7xm.jl:29\nin expression starting at\
    \ /tmp/tmp5balp7xm.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    arr = sort(arr)\n    arr\
    \ = reverse(arr)\n    arr = map(x -> \"One\"[x], arr)\n    return arr\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1,\
    \ 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmphk81p67l.jl:33\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  BoundsError: attempt\
    \ to access 3-codeunit String at index [8]\n  Stacktrace:\n    [1] checkbounds\n\
    \      @ ./strings/basic.jl:216 [inlined]\n    [2] codeunit\n      @ ./strings/string.jl:102\
    \ [inlined]\n    [3] getindex\n      @ ./strings/string.jl:223 [inlined]\n   \
    \ [4] #1\n      @ /tmp/tmphk81p67l.jl:25 [inlined]\n    [5] iterate\n      @ ./generator.jl:47\
    \ [inlined]\n    [6] _collect(c::Vector{Int64}, itr::Base.Generator{Vector{Int64},\
    \ var\"#1#2\"}, #unused#::Base.EltypeUnknown, isz::Base.HasShape{1})\n      @\
    \ Base ./array.jl:744\n    [7] collect_similar\n      @ ./array.jl:653 [inlined]\n\
    \    [8] map\n      @ ./abstractarray.jl:2867 [inlined]\n    [9] by_length(arr::Vector{Int64})\n\
    \      @ Main /tmp/tmphk81p67l.jl:25\n   [10] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [11] macro expansion\n      @ /tmp/tmphk81p67l.jl:33 [inlined]\n\
    \   [12] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [13] top-level scope\n      @ /tmp/tmphk81p67l.jl:32\ntest set:\
    \ Error During Test at /tmp/tmphk81p67l.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  BoundsError: attempt to access 3-codeunit\
    \ String at index [55]\n  Stacktrace:\n    [1] checkbounds\n      @ ./strings/basic.jl:216\
    \ [inlined]\n    [2] codeunit\n      @ ./strings/string.jl:102 [inlined]\n   \
    \ [3] getindex\n      @ ./strings/string.jl:223 [inlined]\n    [4] #1\n      @\
    \ /tmp/tmphk81p67l.jl:25 [inlined]\n    [5] iterate\n      @ ./generator.jl:47\
    \ [inlined]\n    [6] _collect(c::Vector{Int64}, itr::Base.Generator{Vector{Int64},\
    \ var\"#1#2\"}, #unused#::Base.EltypeUnknown, isz::Base.HasShape{1})\n      @\
    \ Base ./array.jl:744\n    [7] collect_similar\n      @ ./array.jl:653 [inlined]\n\
    \    [8] map\n      @ ./abstractarray.jl:2867 [inlined]\n    [9] by_length(arr::Vector{Int6"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphk81p67l.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    arr = sort(arr)\n    arr\
    \ = reverse(arr)\n    arr = map(x -> \"One\" if x == 1 else \"Two\" if x == 2\
    \ else \"Three\" if x == 3 else \"Four\" if x == 4 else \"Five\" if x == 5 else\
    \ \"Six\" if x == 6 else \"Seven\" if x == 7 else \"Eight\" if x == 8 else \"\
    Nine\", arr)\n    return arr\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps0296y8e.jl:25\nin expression starting at\
    \ /tmp/tmps0296y8e.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = sort(arr)\n\
    \    arr = reverse(arr)\n    arr = replace(arr)\n    return arr\nend\n</cell>\n\
    <code language=julia-1.5>\nby_length(arr)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes an array of integers and returns the number of integers\
    \ that are between 1 and 9 inclusive.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1x25_rwl.jl:29\nin expression starting at\
    \ /tmp/tmp1x25_rwl.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr2 = reverse(arr)\n\
    \    \n    arr3 = sort(arr2)\n    \n    arr4 = reverse(arr3)\n    \n    arr5 =\
    \ sort(arr4)\n    \n    arr6 = reverse(arr5)\n    \n    arr7 = sort(arr6)\n  \
    \  \n    arr8 = reverse(arr7)\n    \n    arr9 = sort(arr8)\n    \n    arr10 =\
    \ reverse(arr9)\n    \n    arr11 = sort(arr10)\n    \n    arr12 = reverse(arr11)\n\
    \    \n    arr13 = sort(arr12)\n    \n    arr14 = reverse(arr13)\n    \n    arr15\
    \ = sort(arr14)\n    \n    arr16 = reverse(arr15)\n    \n    arr17 = sort(arr16)\n\
    \    \n    arr18 = reverse(arr17)\n    \n    arr19 = sort(arr18)\n    \n    arr20\
    \ = reverse(arr19)\n    \n    arr21 = sort(arr20)\n    \n    arr22 = reverse(arr21)\n\
    \    \n    arr23 = sort(arr22)\n    \n    arr24 = reverse(arr23)\n    \n    arr25\
    \ = sort(arr24)\n    \n    arr26 = reverse(arr25)\n    \n    arr27 = sort(arr26)\n\
    \    \n    arr28 = reverse(arr27)\n    \n    arr29 = sort(arr28)\n    \n    arr30\
    \ = reverse(arr29)\n    \n    arr31 = sort(arr30)\n    \n    arr32 = reverse(arr31)\n\
    \    \n    arr33 = sort(arr32)\n    \n    arr34 = reverse(arr33)\n    \n    arr35\
    \ = sort(arr34)\n    \n    arr36 = reverse(arr35)\n    \n    arr37 = sort(arr36)\n\
    \    \n    arr38 = reverse(arr37)\n    \n    arr39 = sort(arr38)\n    \n    arr40\
    \ = reverse(arr39)\n    \n    arr41 = sort(arr40)\n    \n    arr42 = reverse(arr41)\n\
    \    \n    arr43 = sort(arr42)\n    \n    arr44 = reverse(arr43)\n    \n    arr45\
    \ = sort(arr44)\n    \n    arr46 = reverse(arr45)\n    \n    arr47 = sort(arr46)\n\
    \    \n    arr48 = reverse(arr47)\n    \n    arr49 = sort(arr48)\n    \n    arr50\
    \ = reverse(arr49)\n    \n    arr51 = sort(arr50)\n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3])\
    \ == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpra2vm6pl.jl:22\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpra2vm6pl.jl:1\n\
    in expression starting at /tmp/tmpra2vm6pl.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = sort(arr)\n\
    \    arr = reverse(arr)\n    \n    arr = arr .- arr .% 10\n    \n    arr = arr\
    \ .+ 10\n    \n    arr = arr .- arr .% 10\n    \n    arr = arr .+ 10\n    \n \
    \   arr = arr .- arr .% 10\n    \n    arr = arr .+ 10\n    \n    arr = arr .-\
    \ arr .% 10\n    \n    arr = arr .+ 10\n    \n    arr = arr .- arr .% 10\n   \
    \ \n    arr = arr .+ 10\n    \n    arr = arr .- arr .% 10\n    \n    arr = arr\
    \ .+ 10\n    \n    arr = arr .- arr .% 10\n    \n    arr = arr .+ 10\n    \n \
    \   arr = arr .- arr .% 10\n    \n    arr = arr .+ 10\n    \n    arr = arr .-\
    \ arr .% 10\n    \n    arr = arr .+ 10\n    \n    arr = arr .- arr .% 10\n   \
    \ \n    arr = arr .+ 10\n    \n    arr = arr .- arr .% 10\n    \n    arr = arr\
    \ .+ 10\n    \n    arr = arr .- arr .% 10\n    \n    arr = arr .+ 10\n    \n \
    \   arr = arr .- arr .% 10\n    \n    arr = arr .+ 10\n    \n    arr = arr .-\
    \ arr .% 10\n    \n    arr = arr .+ 10\n    \n    arr = arr .- arr .% 10\n   \
    \ \n    arr = arr .+ 10\n    \n    arr = arr .- arr .% 10\n    \n    arr = arr\
    \ .+ 10\n    \n    arr = arr .- arr .% 10\n    \n    arr = arr .+ 10\n    \n \
    \   arr = arr .- arr .% 10\n    \n    arr = arr .+ 10\n    \n    arr = arr .-\
    \ arr .% 10\n    \n    arr = arr .+ 10\n    \n    arr = arr .- arr .% 10\n   \
    \ \n    arr = arr .+ 10\n    \n    arr = arr .- arr .% 10\n    \n    arr = arr\
    \ .+ 10\n    \n    arr = arr .- arr .% 10\n    \n    arr = arr .+ 10\n    \n \
    \   arr = arr .- arr .% 10\n    \n    arr = arr .+ 10\n    \n    arr = arr .-\
    \ arr .% 10\n    \n    arr = arr\nusing Test\n\n@testset begin\n\ncandidate =\
    \ by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp1wxvq8sv.jl:22\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp1wxvq8sv.jl:1\n\
    in expression starting at /tmp/tmp1wxvq8sv.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    arr = sort(arr)\n    arr\
    \ = reverse(arr)\n    arr = arr .- arr[1]\n    arr = arr .- arr[2]\n    arr =\
    \ arr .- arr[3]\n    arr = arr .- arr[4]\n    arr = arr .- arr[5]\n    arr = arr\
    \ .- arr[6]\n    arr = arr .- arr[7]\n    arr = arr .- arr[8]\n    arr = arr .-\
    \ arr[9]\n    arr = arr .- arr[0]\n    arr = arr .- arr[1]\n    arr = arr .- arr[2]\n\
    \    arr = arr .- arr[3]\n    arr = arr .- arr[4]\n    arr = arr .- arr[5]\n \
    \   arr = arr .- arr[6]\n    arr = arr .- arr[7]\n    arr = arr .- arr[8]\n  \
    \  arr = arr .- arr[9]\n    arr = arr .- arr[0]\n    arr = arr .- arr[1]\n   \
    \ arr = arr .- arr[2]\n    arr = arr .- arr[3]\n    arr = arr .- arr[4]\n    arr\
    \ = arr .- arr[5]\n    arr = arr .- arr[6]\n    arr = arr .- arr[7]\n    arr =\
    \ arr .- arr[8]\n    arr = arr .- arr[9]\n    arr = arr .- arr[0]\n    arr = arr\
    \ .- arr[1]\n    arr = arr .- arr[2]\n    arr = arr .- arr[3]\n    arr = arr .-\
    \ arr[4]\n    arr = arr .- arr[5]\n    arr = arr .- arr[6]\n    arr = arr .- arr[7]\n\
    \    arr = arr .- arr[8]\n    arr = arr .- arr[9]\n    arr = arr .- arr[0]\n \
    \   arr = arr .- arr[1]\n    arr = arr .- arr[2]\n    arr = arr .- arr[3]\n  \
    \  arr = arr .- arr[4]\n    arr = arr .- arr[5]\n    arr = arr .- arr[6]\n   \
    \ arr = arr .- arr[7]\n    arr = arr .- arr[8]\n    arr = arr .- arr[9]\n    arr\
    \ = arr .- arr[0]\n    arr = arr .- arr[1]\n    arr = arr .- arr[2]\n    arr =\
    \ arr .- arr[3]\n    arr = arr .- arr[4]\n    arr = arr .- arr[5]\n    arr = arr\
    \ .- arr[6]\n    arr = arr .- arr[7]\n    arr = arr .- arr[8]\n    arr = arr .-\
    \ arr[9]\n    arr = arr .- arr[0]\n    arr = arr .- arr[1]\n    arr = \nusing\
    \ Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1,\
    \ 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpwm09pc30.jl:22\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwm09pc30.jl:1\n\
    in expression starting at /tmp/tmpwm09pc30.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = sort(arr)\n\
    \    arr = reverse(arr)\n    arr = map(x -> name(x), arr)\n    return arr\nend\n\
    using Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpz70hl_hu.jl:34\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  UndefVarError: name\
    \ not defined\n  Stacktrace:\n    [1] (::var\"#1#2\")(x::Int64)\n      @ Main\
    \ /tmp/tmpz70hl_hu.jl:26\n    [2] iterate\n      @ ./generator.jl:47 [inlined]\n\
    \    [3] _collect(c::Vector{Int64}, itr::Base.Generator{Vector{Int64}, var\"#1#2\"\
    }, #unused#::Base.EltypeUnknown, isz::Base.HasShape{1})\n      @ Base ./array.jl:744\n\
    \    [4] collect_similar\n      @ ./array.jl:653 [inlined]\n    [5] map\n    \
    \  @ ./abstractarray.jl:2867 [inlined]\n    [6] by_length(arr::Vector{Int64})\n\
    \      @ Main /tmp/tmpz70hl_hu.jl:26\n    [7] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpz70hl_hu.jl:34 [inlined]\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpz70hl_hu.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpz70hl_hu.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  UndefVarError: name not defined\n  Stacktrace:\n\
    \    [1] (::var\"#1#2\")(x::Int64)\n      @ Main /tmp/tmpz70hl_hu.jl:26\n    [2]\
    \ iterate\n      @ ./generator.jl:47 [inlined]\n    [3] _collect(c::Vector{Int64},\
    \ itr::Base.Generator{Vector{Int64}, var\"#1#2\"}, #unused#::Base.EltypeUnknown,\
    \ isz::Base.HasShape{1})\n      @ Base ./array.jl:744\n    [4] collect_similar\n\
    \      @ ./array.jl:653 [inlined]\n    [5] map\n      @ ./abstractarray.jl:2867\
    \ [inlined]\n    [6] by_length(arr::Vector{Int64})\n      @ Main /tmp/tmpz70hl_hu.jl:26\n\
    \    [7] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpz70hl_hu.jl:36 [inlined]\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpz70hl_hu.jl"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpz70hl_hu.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = sort(arr)\n\
    \    arr = reverse(arr)\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .+\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .+ arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .+ arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .+ arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .+ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .+\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .+ arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .+ arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .+ arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .+ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .+\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .+ arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .+ arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .+ arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .+ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .+\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .+ arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .+ arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .+ arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .+ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .+\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .+ arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .+ arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .+ arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .+ arr[1]\n\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp0t9oim3u.jl:22\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0t9oim3u.jl:1\n\
    in expression starting at /tmp/tmp0t9oim3u.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = sort(arr)\n\
    \    arr = reverse(arr)\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpmqepgifv.jl:22\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmqepgifv.jl:1\n\
    in expression starting at /tmp/tmpmqepgifv.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = sort(arr)\n\
    \    arr = reverse(arr)\n    arr = arr[1:end]\n    arr = arr .+ [\"One\", \"Two\"\
    , \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  \
    \  \n    return arr\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpdbws97hh.jl:36\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  DimensionMismatch(\"\
    arrays could not be broadcast to a common size; got a dimension with lengths 8\
    \ and 9\")\n  Stacktrace:\n    [1] _bcs1\n      @ ./broadcast.jl:516 [inlined]\n\
    \    [2] _bcs\n      @ ./broadcast.jl:510 [inlined]\n    [3] broadcast_shape\n\
    \      @ ./broadcast.jl:504 [inlined]\n    [4] combine_axes\n      @ ./broadcast.jl:499\
    \ [inlined]\n    [5] instantiate\n      @ ./broadcast.jl:281 [inlined]\n    [6]\
    \ materialize\n      @ ./broadcast.jl:860 [inlined]\n    [7] by_length(arr::Vector{Int64})\n\
    \      @ Main /tmp/tmpdbws97hh.jl:27\n    [8] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [9] macro expansion\n      @ /tmp/tmpdbws97hh.jl:36 [inlined]\n\
    \   [10] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpdbws97hh.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpdbws97hh.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  DimensionMismatch(\"arrays\
    \ could not be broadcast to a common size; got a dimension with lengths 0 and\
    \ 9\")\n  Stacktrace:\n    [1] _bcs1\n      @ ./broadcast.jl:516 [inlined]\n \
    \   [2] _bcs\n      @ ./broadcast.jl:510 [inlined]\n    [3] broadcast_shape\n\
    \      @ ./broadcast.jl:504 [inlined]\n    [4] combine_axes\n      @ ./broadcast.jl:499\
    \ [inlined]\n    [5] instantiate\n      @ ./broadcast.jl:281 [inlined]\n    [6]\
    \ materialize\n      @ ./broadcast.jl:860 [inlined]\n    [7] by_length(arr::Vector{Int64})\n\
    \      @ Main /tmp/tmpdbws97hh.jl:27\n    [8] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [9] macro expansion\n      @ /tmp/tmpdbws97hh.jl:37 [inlined]\n\
    \   [10] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [11"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdbws97hh.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = sort(arr)\n\
    \    arr = reverse(arr)\n    arr = arr .- arr .% 10\n    arr = arr .+ 10\n   \
    \ arr = arr .- arr .% 10\n    arr = arr .+ 10\n    arr = arr .- arr .% 10\n  \
    \  arr = arr .+ 10\n    arr = arr .- arr .% 10\n    arr = arr .+ 10\n    arr =\
    \ arr .- arr .% 10\n    arr = arr .+ 10\n    arr = arr .- arr .% 10\n    arr =\
    \ arr .+ 10\n    arr = arr .- arr .% 10\n    arr = arr .+ 10\n    arr = arr .-\
    \ arr .% 10\n    arr = arr .+ 10\n    arr = arr .- arr .% 10\n    arr = arr .+\
    \ 10\n    arr = arr .- arr .% 10\n    arr = arr .+ 10\n    arr = arr .- arr .%\
    \ 10\n    arr = arr .+ 10\n    arr = arr .- arr .% 10\n    arr = arr .+ 10\n \
    \   arr = arr .- arr .% 10\n    arr = arr .+ 10\n    arr = arr .- arr .% 10\n\
    \    arr = arr .+ 10\n    arr = arr .- arr .% 10\n    arr = arr .+ 10\n    arr\
    \ = arr .- arr .% 10\n    arr = arr .+ 10\n    arr = arr .- arr .% 10\n    arr\
    \ = arr .+ 10\n    arr = arr .- arr .% 10\n    arr = arr .+ 10\n    arr = arr\
    \ .- arr .% 10\n    arr = arr .+ 10\n    arr = arr .- arr .% 10\n    arr = arr\
    \ .+ 10\n    arr = arr .- arr .% 10\n    arr = arr .+ 10\n    arr = arr .- arr\
    \ .% 10\n    arr = arr .+ 10\n    arr = arr .- arr .% 10\n    arr = arr .+ 10\n\
    \    arr = arr .- arr .% 10\n    arr = arr .+ 10\n    arr = arr .- arr .% 10\n\
    \    arr = arr .+ 10\n    arr = arr .- arr .% 10\n    arr = arr .+ 10\n    arr\
    \ = arr .- arr .% 10\n    arr = arr .+ 10\n    arr = arr .- arr .% 10\n    arr\
    \ = arr .+ 10\n    arr = arr .- arr .% 10\n    arr = arr .+ 10\n    arr = arr\
    \ .- arr .\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: space before \".\" not allowed in \"arr .\" at\
    \ /tmp/tmp0xjkren8.jl:84\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0xjkren8.jl:84\n\
    in expression starting at /tmp/tmp0xjkren8.jl:84\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    arr = sort(arr)\n    arr\
    \ = reverse(arr)\n    arr = arr |> Vector{String}\n    arr = arr |> Vector{String}\n\
    \    \n    if arr.length == 1\n        return [\"One\"]\n    \n    if arr.length\
    \ == 2\n        return [\"One\", \"Two\"]\n    \n    if arr.length == 3\n    \
    \    return [\"One\", \"Two\", \"Three\"]\n    \n    if arr.length == 4\n    \
    \    return [\"One\", \"Two\", \"Three\", \"Four\"]\n    \n    if arr.length ==\
    \ 5\n        return [\"One\", \"Two\", \"Three\", \"Four\", \"Five\"]\n    \n\
    \    if arr.length == 6\n        return [\"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\"]\n    \n    if arr.length == 7\n        return [\"One\", \"\
    Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"]\n    \n    if arr.length\
    \ == 8\n        return [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"\
    , \"Seven\", \"Eight\"]\n    \n    if arr.length == 9\n        return [\"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    ]\n    \n    return []\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6i6nax8b.jl:1\nin expression starting at /tmp/tmp6i6nax8b.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = sort(arr)\n\
    \    arr = reverse(arr)\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp1dss2giu.jl:22\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp1dss2giu.jl:1\n\
    in expression starting at /tmp/tmp1dss2giu.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    arr = sort(arr)\n    arr\
    \ = reverse(arr)\n    arr = arr .- arr[1]\n    arr = arr .- arr[2]\n    arr =\
    \ arr .- arr[3]\n    arr = arr .- arr[4]\n    arr = arr .- arr[5]\n    arr = arr\
    \ .- arr[6]\n    arr = arr .- arr[7]\n    arr = arr .- arr[8]\n    arr = arr .-\
    \ arr[9]\n    arr = arr .- arr[1]\n    arr = arr .- arr[2]\n    arr = arr .- arr[3]\n\
    \    arr = arr .- arr[4]\n    arr = arr .- arr[5]\n    arr = arr .- arr[6]\n \
    \   arr = arr .- arr[7]\n    arr = arr .- arr[8]\n    arr = arr .- arr[9]\n  \
    \  arr = arr .- arr[1]\n    arr = arr .- arr[2]\n    arr = arr .- arr[3]\n   \
    \ arr = arr .- arr[4]\n    arr = arr .- arr[5]\n    arr = arr .- arr[6]\n    arr\
    \ = arr .- arr[7]\n    arr = arr .- arr[8]\n    arr = arr .- arr[9]\n    arr =\
    \ arr .- arr[1]\n    arr = arr .- arr[2]\n    arr = arr .- arr[3]\n    arr = arr\
    \ .- arr[4]\n    arr = arr .- arr[5]\n    arr = arr .- arr[6]\n    arr = arr .-\
    \ arr[7]\n    arr = arr .- arr[8]\n    arr = arr .- arr[9]\n    arr = arr .- arr[1]\n\
    \    arr = arr .- arr[2]\n    arr = arr .- arr[3]\n    arr = arr .- arr[4]\n \
    \   arr = arr .- arr[5]\n    arr = arr .- arr[6]\n    arr = arr .- arr[7]\n  \
    \  arr = arr .- arr[8]\n    arr = arr .- arr[9]\n    arr = arr .- arr[1]\n   \
    \ arr = arr .- arr[2]\n    arr = arr .- arr[3]\n    arr = arr .- arr[4]\n    arr\
    \ = arr .- arr[5]\n    arr = arr .- arr[6]\n    arr = arr .- arr[7]\n    arr =\
    \ arr .- arr[8]\n    arr = arr .- arr[9]\n    arr = arr .- arr[1]\n    arr = arr\
    \ .- arr[2]\n    arr = arr .- arr[3]\n    arr = arr .- arr[4]\n    arr = arr .-\
    \ arr[5]\n    arr = arr .- arr[6]\n    arr = arr .- arr[7]\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3])\
    \ == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpkzdrru0b.jl:22\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpkzdrru0b.jl:1\n\
    in expression starting at /tmp/tmpkzdrru0b.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    arr = sort(arr)\n    arr\
    \ = reverse(arr)\n    arr = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr\
    \ = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n  \
    \  arr = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n\
    \    arr = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr = arr .- arr .+\
    \ 1\n    arr = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr = arr .- arr\
    \ .+ 1\n    arr = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr = arr .-\
    \ arr .+ 1\n    arr = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr = arr\
    \ .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr =\
    \ arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr\
    \ = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n  \
    \  arr = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n\
    \    arr = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr = arr .- arr .+\
    \ 1\n    arr = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr = arr .- arr\
    \ .+ 1\n    arr = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr = arr .-\
    \ arr .+ 1\n    arr = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr = arr\
    \ .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr =\
    \ arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr\
    \ = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n  \
    \  arr = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n\
    \    arr = arr .- arr .+ 1\n    arr = arr .- arr .\nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: space before \".\" not allowed in \"arr .\" at\
    \ /tmp/tmpcfl0ef_8.jl:80\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpcfl0ef_8.jl:80\n\
    in expression starting at /tmp/tmpcfl0ef_8.jl:80\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = sort(arr)\n\
    \    arr = reverse(arr)\n    \n    arr = arr .+ 1\n    \n    arr = arr .- 10\n\
    \    \n    arr = arr .- 10\n    \n    arr = arr .- 10\n    \n    arr = arr .-\
    \ 10\n    \n    arr = arr .- 10\n    \n    arr = arr .- 10\n    \n    arr = arr\
    \ .- 10\n    \n    arr = arr .- 10\n    \n    arr = arr .- 10\n    \n    arr =\
    \ arr .- 10\n    \n    arr = arr .- 10\n    \n    arr = arr .- 10\n    \n    arr\
    \ = arr .- 10\n    \n    arr = arr .- 10\n    \n    arr = arr .- 10\n    \n  \
    \  arr = arr .- 10\n    \n    arr = arr .- 10\n    \n    arr = arr .- 10\n   \
    \ \n    arr = arr .- 10\n    \n    arr = arr .- 10\n    \n    arr = arr .- 10\n\
    \    \n    arr = arr .- 10\n    \n    arr = arr .- 10\n    \n    arr = arr .-\
    \ 10\n    \n    arr = arr .- 10\n    \n    arr = arr .- 10\n    \n    arr = arr\
    \ .- 10\n    \n    arr = arr .- 10\n    \n    arr = arr .- 10\n    \n    arr =\
    \ arr .- 10\n    \n    arr = arr .- 10\n    \n    arr = arr .- 10\n    \n    arr\
    \ = arr .- 10\n    \n    arr = arr .- 10\n    \n    arr = arr .- 10\n    \n  \
    \  arr = arr .- 10\n    \n    arr = arr .- 10\n    \n    arr = arr .- 10\n   \
    \ \n    arr = arr .- 10\n    \n    arr = arr .- 10\n    \n    arr = arr .- 10\n\
    \    \n    arr = arr .- 10\n    \n    arr = arr .- 10\n    \n    arr = arr .-\
    \ 10\n    \n    arr = arr .- 10\n    \n    arr = arr .- 10\n    \n    arr = arr\
    \ .- 10\n    \n    arr = arr .- 10\n    \n    arr = arr .- 10\n    \n    arr =\
    \ arr .- 10\n    \n    arr = arr .- 10\n    \n    arr = arr .- 10\n    \n    arr\
    \ = arr .- 10\n    \n    arr = arr .- 10\n    \n    arr = arr .\nusing Test\n\n\
    @testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: space before \".\" not allowed in \"arr .\" at\
    \ /tmp/tmps11gzdb7.jl:137\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmps11gzdb7.jl:137\n\
    in expression starting at /tmp/tmps11gzdb7.jl:137\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr2 = sort(arr)\n\
    \    arr3 = reverse(arr2)\n    \n    arr4 = arr3\n    \n    arr5 = arr4\n    \n\
    \    arr6 = arr5\n    \n    arr7 = arr6\n    \n    arr8 = arr7\n    \n    arr9\
    \ = arr8\n    \n    arr10 = arr9\n    \n    arr11 = arr10\n    \n    arr12 = arr11\n\
    \    \n    arr13 = arr12\n    \n    arr14 = arr13\n    \n    arr15 = arr14\n \
    \   \n    arr16 = arr15\n    \n    arr17 = arr16\n    \n    arr18 = arr17\n  \
    \  \n    arr19 = arr18\n    \n    arr20 = arr19\n    \n    arr21 = arr20\n   \
    \ \n    arr22 = arr21\n    \n    arr23 = arr22\n    \n    arr24 = arr23\n    \n\
    \    arr25 = arr24\n    \n    arr26 = arr25\n    \n    arr27 = arr26\n    \n \
    \   arr28 = arr27\n    \n    arr29 = arr28\n    \n    arr30 = arr29\n    \n  \
    \  arr31 = arr30\n    \n    arr32 = arr31\n    \n    arr33 = arr32\n    \n   \
    \ arr34 = arr33\n    \n    arr35 = arr34\n    \n    arr36 = arr35\n    \n    arr37\
    \ = arr36\n    \n    arr38 = arr37\n    \n    arr39 = arr38\n    \n    arr40 =\
    \ arr39\n    \n    arr41 = arr40\n    \n    arr42 = arr41\n    \n    arr43 = arr42\n\
    \    \n    arr44 = arr43\n    \n    arr45 = arr44\n    \n    arr46 = arr45\n \
    \   \n    arr47 = arr46\n    \n    arr48 = arr47\n    \n    arr49 = arr48\n  \
    \  \n    arr50 = arr49\n    \n    arr51 = arr50\n    \n    arr52 = arr51\n   \
    \ \n    arr53 = arr52\n    \n    arr54 = arr53\n    \n    arr55 = arr54\n    \n\
    \    arr56 = arr55\n    \n    arr57 = arr56\n    \n    arr58 = arr57\n    \n \
    \   arr59 = arr58\n    \n\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpl9t1km9n.jl:22\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpl9t1km9n.jl:1\n\
    in expression starting at /tmp/tmpl9t1km9n.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    arr = sort(arr)\n    arr\
    \ = reverse(arr)\n    arr = arr .- 1 .+ 1\n    arr = arr .- \"One\" .- \"Two\"\
    \ .- \"Three\" .- \"Four\" .- \"Five\" .- \"Six\" .- \"Seven\" .- \"Eight\" .-\
    \ \"Nine\"\n    return arr\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpcl9sjm8w.jl:34\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: no method\
    \ matching -(::Int64, ::String)\n  Closest candidates are:\n    -(::Union{Int128,\
    \ Int16, Int32, Int64, Int8, UInt128, UInt16, UInt32, UInt64, UInt8}) at /shared/centos7/julia/1.7.3/share/julia/base/int.jl:85\n\
    \    -(::T, !Matched::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128,\
    \ UInt16, UInt32, UInt64, UInt8} at /shared/centos7/julia/1.7.3/share/julia/base/int.jl:86\n\
    \    -(::Union{Int16, Int32, Int64, Int8}, !Matched::BigInt) at /shared/centos7/julia/1.7.3/share/julia/base/gmp.jl:537\n\
    \    ...\n  Stacktrace:\n    [1] _broadcast_getindex_evalf\n      @ ./broadcast.jl:670\
    \ [inlined]\n    [2] _broadcast_getindex\n      @ ./broadcast.jl:643 [inlined]\n\
    \    [3] _getindex\n      @ ./broadcast.jl:666 [inlined]\n    [4] _broadcast_getindex\n\
    \      @ ./broadcast.jl:642 [inlined]\n    [5] _getindex\n      @ ./broadcast.jl:666\
    \ [inlined]\n    [6] _broadcast_getindex\n      @ ./broadcast.jl:642 [inlined]\n\
    \    [7] _getindex\n      @ ./broadcast.jl:666 [inlined]\n    [8] _broadcast_getindex\n\
    \      @ ./broadcast.jl:642 [inlined]\n    [9] _getindex\n      @ ./broadcast.jl:666\
    \ [inlined]\n   [10] _broadcast_getindex\n      @ ./broadcast.jl:642 [inlined]\n\
    \   [11] _getindex\n      @ ./broadcast.jl:666 [inlined]\n   [12] _broadcast_getindex\n\
    \      @ ./broadcast.jl:642 [inlined]\n   [13] _getindex\n      @ ./broadcast.jl:666\
    \ [inlined]\n   [14] _broadcast_getindex\n      @ ./broadcast.jl:642 [inlined]\n\
    \   [15] _getindex\n      @ ./broadcast.jl:666 [inlined]\n   [16] _broadcast_getindex\n\
    \      @ ./broadcast.jl:642 [inlined]\n   [17] _getindex\n      @ ./broadcast.jl:666\
    \ [inlined]\n   [18] _broadcast_getindex\n      @ ./broadcast.jl:642 [inlined]\n\
    \   [19] getindex\n      @ ./broadcast.jl:597 [inlined]\n   [20] copy\n      @\
    \ ./broadcast.jl:899 [inlined]\n   [21] materialize\n      @ ./broadcast.jl:860\
    \ [inlined]\n   [22] by_length(arr::Vector{Int64})\n      @ Main /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcl9sjm8w.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = sort(arr)\n\
    \    arr = reverse(arr)\n    arr = arr .- arr[1]\n    arr = arr .- arr[2]\n  \
    \  arr = arr .- arr[3]\n    arr = arr .- arr[4]\n    arr = arr .- arr[5]\n   \
    \ arr = arr .- arr[6]\n    arr = arr .- arr[7]\n    arr = arr .- arr[8]\n    arr\
    \ = arr .- arr[9]\n    \n    arr = arr .- arr[1]\n    arr = arr .- arr[2]\n  \
    \  arr = arr .- arr[3]\n    arr = arr .- arr[4]\n    arr = arr .- arr[5]\n   \
    \ arr = arr .- arr[6]\n    arr = arr .- arr[7]\n    arr = arr .- arr[8]\n    arr\
    \ = arr .- arr[9]\n    \n    arr = arr .- arr[1]\n    arr = arr .- arr[2]\n  \
    \  arr = arr .- arr[3]\n    arr = arr .- arr[4]\n    arr = arr .- arr[5]\n   \
    \ arr = arr .- arr[6]\n    arr = arr .- arr[7]\n    arr = arr .- arr[8]\n    arr\
    \ = arr .- arr[9]\n    \n    arr = arr .- arr[1]\n    arr = arr .- arr[2]\n  \
    \  arr = arr .- arr[3]\n    arr = arr .- arr[4]\n    arr = arr .- arr[5]\n   \
    \ arr = arr .- arr[6]\n    arr = arr .- arr[7]\n    arr = arr .- arr[8]\n    arr\
    \ = arr .- arr[9]\n    \n    arr = arr .- arr[1]\n    arr = arr .- arr[2]\n  \
    \  arr = arr .- arr[3]\n    arr = arr .- arr[4]\n    arr = arr .- arr[5]\n   \
    \ arr = arr .- arr[6]\n    arr = arr .- arr[7]\n    arr = arr .- arr[8]\n    arr\
    \ = arr .- arr[9]\n    \n    arr = arr .- arr[1]\n    arr = arr .- arr[2]\n  \
    \  arr = arr .- arr[3]\n    arr = arr .- arr[4]\n    arr = arr .- arr[5]\n   \
    \ arr = arr .- arr[6]\n    arr = arr .- arr[7]\n    arr = arr .- arr[8]\n    arr\
    \ = arr .- arr[9]\n    \n    arr = arr .- arr[1]\n    arr = arr .- arr[2]\n  \
    \  arr = arr .- arr[3]\n    arr = arr .- arr[4]\n    arr = arr .- arr[5]\n   \
    \ arr = arr .\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: space before \".\" not allowed in \"arr .\" at\
    \ /tmp/tmplhk4e580.jl:91\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmplhk4e580.jl:91\n\
    in expression starting at /tmp/tmplhk4e580.jl:91\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr2 = sort(arr)\n\
    \    arr3 = reverse(arr2)\n    \n    arr4 = arr3\n    \n    arr5 = arr4\n    \n\
    \    arr6 = arr5\n    \n    arr7 = arr6\n    \n    arr8 = arr7\n    \n    arr9\
    \ = arr8\n    \n    arr10 = arr9\n    \n    arr11 = arr10\n    \n    arr12 = arr11\n\
    \    \n    arr13 = arr12\n    \n    arr14 = arr13\n    \n    arr15 = arr14\n \
    \   \n    arr16 = arr15\n    \n    arr17 = arr16\n    \n    arr18 = arr17\n  \
    \  \n    arr19 = arr18\n    \n    arr20 = arr19\n    \n    arr21 = arr20\n   \
    \ \n    arr22 = arr21\n    \n    arr23 = arr22\n    \n    arr24 = arr23\n    \n\
    \    arr25 = arr24\n    \n    arr26 = arr25\n    \n    arr27 = arr26\n    \n \
    \   arr28 = arr27\n    \n    arr29 = arr28\n    \n    arr30 = arr29\n    \n  \
    \  arr31 = arr30\n    \n    arr32 = arr31\n    \n    arr33 = arr32\n    \n   \
    \ arr34 = arr33\n    \n    arr35 = arr34\n    \n    arr36 = arr35\n    \n    arr37\
    \ = arr36\n    \n    arr38 = arr37\n    \n    arr39 = arr38\n    \n    arr40 =\
    \ arr39\n    \n    arr41 = arr40\n    \n    arr42 = arr41\n    \n    arr43 = arr42\n\
    \    \n    arr44 = arr43\n    \n    arr45 = arr44\n    \n    arr46 = arr45\n \
    \   \n    arr47 = arr46\n    \n    arr48 = arr47\n    \n    arr49 = arr48\n  \
    \  \n    arr50 = arr49\n    \n    arr51 = arr50\n    \n    arr52 = arr51\n   \
    \ \n    arr53 = arr52\n    \n    arr54 = arr53\n    \n    arr55 = arr54\n    \n\
    \    arr56 = arr55\n    \n    arr57 = arr56\n    \n    arr58 = arr57\n    \n \
    \   arr59 = arr58\n    \n\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpv7sm31ud.jl:22\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpv7sm31ud.jl:1\n\
    in expression starting at /tmp/tmpv7sm31ud.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = sort(arr)\n\
    \    arr = reverse(arr)\n    arr = arr .- arr .% 10\n    arr = arr .- 10\n   \
    \ arr = arr .- arr .% 10\n    arr = arr .- 10\n    arr = arr .- arr .% 10\n  \
    \  arr = arr .- 10\n    arr = arr .- arr .% 10\n    arr = arr .- 10\n    arr =\
    \ arr .- arr .% 10\n    arr = arr .- 10\n    arr = arr .- arr .% 10\n    arr =\
    \ arr .- 10\n    arr = arr .- arr .% 10\n    arr = arr .- 10\n    arr = arr .-\
    \ arr .% 10\n    arr = arr .- 10\n    arr = arr .- arr .% 10\n    arr = arr .-\
    \ 10\n    arr = arr .- arr .% 10\n    arr = arr .- 10\n    arr = arr .- arr .%\
    \ 10\n    arr = arr .- 10\n    arr = arr .- arr .% 10\n    arr = arr .- 10\n \
    \   arr = arr .- arr .% 10\n    arr = arr .- 10\n    arr = arr .- arr .% 10\n\
    \    arr = arr .- 10\n    arr = arr .- arr .% 10\n    arr = arr .- 10\n    arr\
    \ = arr .- arr .% 10\n    arr = arr .- 10\n    arr = arr .- arr .% 10\n    arr\
    \ = arr .- 10\n    arr = arr .- arr .% 10\n    arr = arr .- 10\n    arr = arr\
    \ .- arr .% 10\n    arr = arr .- 10\n    arr = arr .- arr .% 10\n    arr = arr\
    \ .- 10\n    arr = arr .- arr .% 10\n    arr = arr .- 10\n    arr = arr .- arr\
    \ .% 10\n    arr = arr .- 10\n    arr = arr .- arr .% 10\n    arr = arr .- 10\n\
    \    arr = arr .- arr .% 10\n    arr = arr .- 10\n    arr = arr .- arr .% 10\n\
    \    arr = arr .- 10\n    arr = arr .- arr .% 10\n    arr = arr .- 10\n    arr\
    \ = arr .- arr .% 10\n    arr = arr .- 10\n    arr = arr .- arr .% 10\n    arr\
    \ = arr .- 10\n    arr = arr .- arr .% 10\n    arr = arr .- 10\n    arr = arr\
    \ .- arr .\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: space before \".\" not allowed in \"arr .\" at\
    \ /tmp/tmpznwxcp44.jl:84\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpznwxcp44.jl:84\n\
    in expression starting at /tmp/tmpznwxcp44.jl:84\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = sort(arr)\n\
    \    arr = reverse(arr)\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .+\
    \ arr[1]\n    \n    arr = arr .+ arr[2]\n    \n    arr = arr .+ arr[3]\n    \n\
    \    arr = arr .+ arr[4]\n    \n    arr = arr .+ arr[5]\n    \n    arr = arr .+\
    \ arr[6]\n    \n    arr = arr .+ arr[7]\n    \n    arr = arr .+ arr[8]\n    \n\
    \    arr = arr .+ arr[9]\n    \n    arr = arr .+ arr[1]\n    \n    arr = arr .+\
    \ arr[2]\n    \n    arr = arr .+ arr[3]\n    \n    arr = arr .+ arr[4]\n    \n\
    \    arr = arr .+ arr[5]\n    \n    arr = arr .+ arr[6]\n    \n    arr = arr .+\
    \ arr[7]\n    \n    arr = arr .+ arr[8]\n    \n    arr = arr .+ arr[9]\n    \n\
    \    arr = arr .+ arr[1]\n    \n    arr = arr .+ arr[2]\n    \n    arr = arr .+\
    \ arr[3]\n    \n    arr = arr .+ arr[4]\n    \n    arr = arr .+ arr[5]\n    \n\
    \    arr = arr .+ arr[6]\n    \n    arr = arr .+ arr[7]\n    \n    arr = arr .+\
    \ arr[8]\n    \n    arr = arr .+ arr[9]\n    \n    arr = arr .+ arr[1]\n    \n\
    \    arr = arr .+ arr[2]\n    \n    arr = arr .+ arr[3]\n    \n    arr = arr .+\
    \ arr[4]\n    \n    arr = arr .+ arr[5]\n    \n    arr = arr .+ arr[6]\n    \n\
    \    arr = arr .+ arr[7]\n    \n    arr = arr .+ arr[8]\n    \n    arr = arr .+\
    \ arr[9]\n    \n    arr = arr .+ arr[1]\n    \n    arr = arr .+ arr[2]\n    \n\
    \    arr = arr .+ arr[3]\n    \n    arr = arr .+ arr[4]\n    \n    arr = arr .+\
    \ arr[5]\n    \n    arr = arr .+ arr[6]\n    \n    arr = arr .+ arr[7]\n    \n\
    \    arr = arr .+ arr[8]\n    \n    arr = arr .+ arr[9]\n    \n    arr = arr .+\
    \ arr[1]\n    \n    arr = arr .+ arr[2]\n    \n    arr = arr .+ arr[3]\n\nusing\
    \ Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1,\
    \ 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpiwl0e5i9.jl:22\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpiwl0e5i9.jl:1\n\
    in expression starting at /tmp/tmpiwl0e5i9.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    arr = sort(arr)\n    arr\
    \ = reverse(arr)\n    arr = arr[2:end]\n    arr = arr.reverse\n    arr = arr[2:end]\n\
    \    arr = arr.reverse\n    arr = arr[2:end]\n    arr = arr.reverse\n    arr =\
    \ arr[2:end]\n    arr = arr.reverse\n    arr = arr[2:end]\n    arr = arr.reverse\n\
    \    arr = arr[2:end]\n    arr = arr.reverse\n    arr = arr[2:end]\n    arr =\
    \ arr.reverse\n    arr = arr[2:end]\n    arr = arr.reverse\n    arr = arr[2:end]\n\
    \    arr = arr.reverse\n    arr = arr[2:end]\n    arr = arr.reverse\n    arr =\
    \ arr[2:end]\n    arr = arr.reverse\n    arr = arr[2:end]\n    arr = arr.reverse\n\
    \    arr = arr[2:end]\n    arr = arr.reverse\n    arr = arr[2:end]\n    arr =\
    \ arr.reverse\n    arr = arr[2:end]\n    arr = arr.reverse\n    arr = arr[2:end]\n\
    \    arr = arr.reverse\n    arr = arr[2:end]\n    arr = arr.reverse\n    arr =\
    \ arr[2:end]\n    arr = arr.reverse\n    arr = arr[2:end]\n    arr = arr.reverse\n\
    \    arr = arr[2:end]\n    arr = arr.reverse\n    arr = arr[2:end]\n    arr =\
    \ arr.reverse\n    arr = arr[2:end]\n    arr = arr.reverse\n    arr = arr[2:end]\n\
    \    arr = arr.reverse\n    arr = arr[2:end]\n    arr = arr.reverse\n    arr =\
    \ arr[2:end]\n    arr = arr.reverse\n    arr = arr[2:end]\n    arr = arr.reverse\n\
    \    arr = arr[2:end]\n    arr = arr.reverse\n    arr = arr[2:end]\n    arr =\
    \ arr.reverse\n    arr = arr[2:end]\n    arr = arr.reverse\n    arr = arr[2:end]\n\
    \    arr = arr.reverse\n    arr = arr[2:end]\n    arr = arr.reverse\n    arr =\
    \ arr[2:end]\n    arr = arr.reverse\n    arr = arr[2:end]\n    arr = arr.reverse\n\
    \    arr = arr[2:end]\n    arr = arr.reverse\n    arr = arr[2:end]\n    arr =\
    \ arr.reverse\n    arr = arr[2:end]\n    arr = arr.reverse\n    arr = arr[2:end]\n\
    \    arr = arr.reverse\n    arr = arr[2:end]\n    arr = arr.reverse\n    arr =\
    \ arr[2:end]\n    arr = arr.reverse\n    arr = arr[2:end]\n    arr = arr.reverse\n\
    \    arr = arr[2:end]\n    arr = arr.reverse\n    arr = arr[2:end]\n    arr =\
    \ arr.reverse\n    arr = arr[2:end]\n    arr = arr.reverse\n    arr = arr[2:end]\n\
    \    arr = arr.reverse\n    arr = arr[2:end]\n    arr = arr.reverse\n    arr =\
    \ arr[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t\
    @test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpv9lbfjtz.jl:22\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpv9lbfjtz.jl:1\n\
    in expression starting at /tmp/tmpv9lbfjtz.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = sort(arr)\n\
    \    arr = reverse(arr)\n    arr = arr .- arr .% 10\n    arr = arr .+ 10\n   \
    \ arr = arr .- arr .% 10\n    arr = arr .+ 10\n    arr = arr .- arr .% 10\n  \
    \  arr = arr .+ 10\n    arr = arr .- arr .% 10\n    arr = arr .+ 10\n    arr =\
    \ arr .- arr .% 10\n    arr = arr .+ 10\n    arr = arr .- arr .% 10\n    arr =\
    \ arr .+ 10\n    arr = arr .- arr .% 10\n    arr = arr .+ 10\n    arr = arr .-\
    \ arr .% 10\n    arr = arr .+ 10\n    arr = arr .- arr .% 10\n    arr = arr .+\
    \ 10\n    arr = arr .- arr .% 10\n    arr = arr .+ 10\n    arr = arr .- arr .%\
    \ 10\n    arr = arr .+ 10\n    arr = arr .- arr .% 10\n    arr = arr .+ 10\n \
    \   arr = arr .- arr .% 10\n    arr = arr .+ 10\n    arr = arr .- arr .% 10\n\
    \    arr = arr .+ 10\n    arr = arr .- arr .% 10\n    arr = arr .+ 10\n    arr\
    \ = arr .- arr .% 10\n    arr = arr .+ 10\n    arr = arr .- arr .% 10\n    arr\
    \ = arr .+ 10\n    arr = arr .- arr .% 10\n    arr = arr .+ 10\n    arr = arr\
    \ .- arr .% 10\n    arr = arr .+ 10\n    arr = arr .- arr .% 10\n    arr = arr\
    \ .+ 10\n    arr = arr .- arr .% 10\n    arr = arr .+ 10\n    arr = arr .- arr\
    \ .% 10\n    arr = arr .+ 10\n    arr = arr .- arr .% 10\n    arr = arr .+ 10\n\
    \    arr = arr .- arr .% 10\n    arr = arr .+ 10\n    arr = arr .- arr .% 10\n\
    \    arr = arr .+ 10\n    arr = arr .- arr .% 10\n    arr = arr .+ 10\n    arr\
    \ = arr .- arr .% 10\n    arr = arr .+ 10\n    arr = arr .- arr .% 10\n    arr\
    \ = arr .+ 10\n    arr = arr .- arr .% 10\n    arr = arr .+ 10\n    arr = arr\
    \ .- arr .\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: space before \".\" not allowed in \"arr .\" at\
    \ /tmp/tmpacgqe6v6.jl:84\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpacgqe6v6.jl:84\n\
    in expression starting at /tmp/tmpacgqe6v6.jl:84\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = sort(arr)\n\
    \    arr = reverse(arr)\n    arr = arr .- arr[1]\n    arr = arr .- arr[2]\n  \
    \  arr = arr .- arr[3]\n    arr = arr .- arr[4]\n    arr = arr .- arr[5]\n   \
    \ arr = arr .- arr[6]\n    arr = arr .- arr[7]\n    arr = arr .- arr[8]\n    arr\
    \ = arr .- arr[9]\n    arr = arr .- arr[1]\n    arr = arr .- arr[2]\n    arr =\
    \ arr .- arr[3]\n    arr = arr .- arr[4]\n    arr = arr .- arr[5]\n    arr = arr\
    \ .- arr[6]\n    arr = arr .- arr[7]\n    arr = arr .- arr[8]\n    arr = arr .-\
    \ arr[9]\n    arr = arr .- arr[1]\n    arr = arr .- arr[2]\n    arr = arr .- arr[3]\n\
    \    arr = arr .- arr[4]\n    arr = arr .- arr[5]\n    arr = arr .- arr[6]\n \
    \   arr = arr .- arr[7]\n    arr = arr .- arr[8]\n    arr = arr .- arr[9]\n  \
    \  arr = arr .- arr[1]\n    arr = arr .- arr[2]\n    arr = arr .- arr[3]\n   \
    \ arr = arr .- arr[4]\n    arr = arr .- arr[5]\n    arr = arr .- arr[6]\n    arr\
    \ = arr .- arr[7]\n    arr = arr .- arr[8]\n    arr = arr .- arr[9]\n    arr =\
    \ arr .- arr[1]\n    arr = arr .- arr[2]\n    arr = arr .- arr[3]\n    arr = arr\
    \ .- arr[4]\n    arr = arr .- arr[5]\n    arr = arr .- arr[6]\n    arr = arr .-\
    \ arr[7]\n    arr = arr .- arr[8]\n    arr = arr .- arr[9]\n    arr = arr .- arr[1]\n\
    \    arr = arr .- arr[2]\n    arr = arr .- arr[3]\n    arr = arr .- arr[4]\n \
    \   arr = arr .- arr[5]\n    arr = arr .- arr[6]\n    arr = arr .- arr[7]\n  \
    \  arr = arr .- arr[8]\n    arr = arr .- arr[9]\n    arr = arr .- arr[1]\n   \
    \ arr = arr .- arr[2]\n    arr = arr .- arr[3]\n    arr = arr .- arr[4]\n    arr\
    \ = arr .- arr[5]\n    arr = arr .- arr[6]\n    arr = arr .- arr[7\nusing Test\n\
    \n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
    One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg0bsfk3v.jl:1\nin expression starting at /tmp/tmpg0bsfk3v.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = sort(arr)\n\
    \    arr = reverse(arr)\n    arr = arr |> Vector{String}\n    \n    if length(arr)\
    \ == 0 \n        return Vector{String}()\n    end\n    \n    arr = arr |> Vector{String}\n\
    \    \n    arr |> map(x->\"One\"*x |> join(\"\")) |> Vector{String}\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1,\
    \ 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpkd_uho0i.jl:41\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type Int64 to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n    [1] setindex!(A::Vector{String}, x::Int64, i1::Int64)\n\
    \      @ Base ./array.jl:903\n    [2] _unsafe_copyto!(dest::Vector{String}, doffs::Int64,\
    \ src::Vector{Int64}, soffs::Int64, n::Int64)\n      @ Base ./array.jl:253\n \
    \   [3] unsafe_copyto!\n      @ ./array.jl:307 [inlined]\n    [4] _copyto_impl!\n\
    \      @ ./array.jl:331 [inlined]\n    [5] copyto!\n      @ ./array.jl:317 [inlined]\n\
    \    [6] copyto!\n      @ ./array.jl:343 [inlined]\n    [7] copyto_axcheck!\n\
    \      @ ./abstractarray.jl:1104 [inlined]\n    [8] Vector{String}(x::Vector{Int64})\n\
    \      @ Base ./array.jl:563\n    [9] |>\n      @ ./operators.jl:966 [inlined]\n\
    \   [10] by_length(arr::Vector{Int64})\n      @ Main /tmp/tmpkd_uho0i.jl:26\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [12] macro expansion\n      @ /tmp/tmpkd_uho0i.jl:41 [inlined]\n\
    \   [13] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [14] top-level scope\n      @ /tmp/tmpkd_uho0i.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpkd_uho0i.jl:43\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: Cannot `convert` an object\
    \ of type Int64 to an object of type String\n  Closest candidates are:\n    convert(::Type{String},\
    \ !Matched::String) at /shared/centos7/julia"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkd_uho0i.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = sort(arr)\n\
    \    arr = reverse(arr)\n    arr = arr .- arr[1]\n    arr = arr .- arr[2]\n  \
    \  arr = arr .- arr[3]\n    arr = arr .- arr[4]\n    arr = arr .- arr[5]\n   \
    \ arr = arr .- arr[6]\n    arr = arr .- arr[7]\n    arr = arr .- arr[8]\n    arr\
    \ = arr .- arr[9]\n    arr = arr .- arr[1]\n    arr = arr .- arr[2]\n    arr =\
    \ arr .- arr[3]\n    arr = arr .- arr[4]\n    arr = arr .- arr[5]\n    arr = arr\
    \ .- arr[6]\n    arr = arr .- arr[7]\n    arr = arr .- arr[8]\n    arr = arr .-\
    \ arr[9]\n    arr = arr .- arr[1]\n    arr = arr .- arr[2]\n    arr = arr .- arr[3]\n\
    \    arr = arr .- arr[4]\n    arr = arr .- arr[5]\n    arr = arr .- arr[6]\n \
    \   arr = arr .- arr[7]\n    arr = arr .- arr[8]\n    arr = arr .- arr[9]\n  \
    \  arr = arr .- arr[1]\n    arr = arr .- arr[2]\n    arr = arr .- arr[3]\n   \
    \ arr = arr .- arr[4]\n    arr = arr .- arr[5]\n    arr = arr .- arr[6]\n    arr\
    \ = arr .- arr[7]\n    arr = arr .- arr[8]\n    arr = arr .- arr[9]\n    arr =\
    \ arr .- arr[1]\n    arr = arr .- arr[2]\n    arr = arr .- arr[3]\n    arr = arr\
    \ .- arr[4]\n    arr = arr .- arr[5]\n    arr = arr .- arr[6]\n    arr = arr .-\
    \ arr[7]\n    arr = arr .- arr[8]\n    arr = arr .- arr[9]\n    arr = arr .- arr[1]\n\
    \    arr = arr .- arr[2]\n    arr = arr .- arr[3]\n    arr = arr .- arr[4]\n \
    \   arr = arr .- arr[5]\n    arr = arr .- arr[6]\n    arr = arr .- arr[7]\n  \
    \  arr = arr .- arr[8]\n    arr = arr .- arr[9]\n    arr = arr .- arr[1]\n   \
    \ arr = arr .- arr[2]\n    arr = arr .- arr[3]\n    arr = arr .- arr[4]\n    arr\
    \ = arr .- arr[5]\n    arr = arr .- arr[6]\n    arr = arr .- arr[7\nusing Test\n\
    \n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
    One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi98rn3ko.jl:1\nin expression starting at /tmp/tmpi98rn3ko.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    arr = sort(arr)\n    arr\
    \ = reverse(arr)\n    arr = arr .- arr[1]\n    arr = arr .- arr[1]\n    arr =\
    \ arr .- arr[1]\n    arr = arr .- arr[1]\n    arr = arr .- arr[1]\n    arr = arr\
    \ .- arr[1]\n    arr = arr .- arr[1]\n    arr = arr .- arr[1]\n    arr = arr .-\
    \ arr[1]\n    arr = arr .- arr[1]\n    arr = arr .- arr[1]\n    arr = arr .- arr[1]\n\
    \    arr = arr .- arr[1]\n    arr = arr .- arr[1]\n    arr = arr .- arr[1]\n \
    \   arr = arr .- arr[1]\n    arr = arr .- arr[1]\n    arr = arr .- arr[1]\n  \
    \  arr = arr .- arr[1]\n    arr = arr .- arr[1]\n    arr = arr .- arr[1]\n   \
    \ arr = arr .- arr[1]\n    arr = arr .- arr[1]\n    arr = arr .- arr[1]\n    arr\
    \ = arr .- arr[1]\n    arr = arr .- arr[1]\n    arr = arr .- arr[1]\n    arr =\
    \ arr .- arr[1]\n    arr = arr .- arr[1]\n    arr = arr .- arr[1]\n    arr = arr\
    \ .- arr[1]\n    arr = arr .- arr[1]\n    arr = arr .- arr[1]\n    arr = arr .-\
    \ arr[1]\n    arr = arr .- arr[1]\n    arr = arr .- arr[1]\n    arr = arr .- arr[1]\n\
    \    arr = arr .- arr[1]\n    arr = arr .- arr[1]\n    arr = arr .- arr[1]\n \
    \   arr = arr .- arr[1]\n    arr = arr .- arr[1]\n    arr = arr .- arr[1]\n  \
    \  arr = arr .- arr[1]\n    arr = arr .- arr[1]\n    arr = arr .- arr[1]\n   \
    \ arr = arr .- arr[1]\n    arr = arr .- arr[1]\n    arr = arr .- arr[1]\n    arr\
    \ = arr .- arr[1]\n    arr = arr .- arr[1]\n    arr = arr .- arr[1]\n    arr =\
    \ arr .- arr[1]\n    arr = arr .- arr[1]\n    arr = arr .- arr[1]\n    arr = arr\
    \ .- arr[1]\n    arr = arr .- arr[1]\n    arr = arr .- arr[1]\n    arr = arr .-\
    \ arr[1]\n    arr = arr .- arr[1]\n    arr = arr .- arr[1]\n    arr = arr .- arr[1]\n\
    \    arr = arr .- arr\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp16gddp8p.jl:22\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp16gddp8p.jl:1\n\
    in expression starting at /tmp/tmp16gddp8p.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = sort(arr)\n\
    \    arr = reverse(arr)\n    \n    arr = map(x -> \"One\" if x == 1 else \n  \
    \              \"Two\" if x == 2 else \n                \"Three\" if x == 3 else\
    \ \n                \"Four\" if x == 4 else \n                \"Five\" if x ==\
    \ 5 else \n                \"Six\" if x == 6 else \n                \"Seven\"\
    \ if x == 7 else \n                \"Eight\" if x == 8 else \n               \
    \ \"Nine\" if x == 9 else \n                \"\", arr)\n    \n    return arr\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfe6v0pgp.jl:27\nin expression starting at\
    \ /tmp/tmpfe6v0pgp.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = sort(arr)\n\
    \    arr = reverse(arr)\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpm054gzir.jl:22\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpm054gzir.jl:1\n\
    in expression starting at /tmp/tmpm054gzir.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = [i for i in\
    \ arr if i >= 1 && i <= 9]\n    arr = reverse(arr)\n    arr = map(x -> \"One\"\
    \ <= x && x <= \"Nine\" ? x : \"\", arr)\n    \n    return arr\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
    One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpw6ce1fbg.jl:35\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: no method\
    \ matching isless(::String, ::Int64)\n  Closest candidates are:\n    isless(::AbstractString,\
    \ !Matched::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:344\n\
    \    isless(!Matched::AbstractFloat, ::Real) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:186\n\
    \    isless(!Matched::Real, ::Real) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:430\n\
    \    ...\n  Stacktrace:\n    [1] <(x::String, y::Int64)\n      @ Base ./operators.jl:352\n\
    \    [2] <=(x::String, y::Int64)\n      @ Base ./operators.jl:401\n    [3] (::var\"\
    #2#4\")(x::Int64)\n      @ Main /tmp/tmpw6ce1fbg.jl:26\n    [4] iterate\n    \
    \  @ ./generator.jl:47 [inlined]\n    [5] _collect\n      @ ./array.jl:744 [inlined]\n\
    \    [6] collect_similar\n      @ ./array.jl:653 [inlined]\n    [7] map\n    \
    \  @ ./abstractarray.jl:2867 [inlined]\n    [8] by_length(arr::Vector{Int64})\n\
    \      @ Main /tmp/tmpw6ce1fbg.jl:26\n    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpw6ce1fbg.jl:35 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmpw6ce1fbg.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpw6ce1fbg.jl:37\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: no method matching isless(::String,\
    \ ::Int64)\n  Closest candidates are:\n    isless(::AbstractString, !Matched::AbstractString)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:344\n    isless(!Matched::AbstractFloat,\
    \ ::Real) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:186\n \
    \   isless(!Matched::Real, ::Real) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:430\n\
    \    ...\n  Stacktrace:\n    [1] <(x::St"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpw6ce1fbg.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    arr = sort(arr)\n    arr\
    \ = reverse(arr)\n    arr = arr .- arr[1]\n    arr = arr .- arr[2]\n    arr =\
    \ arr .- arr[3]\n    arr = arr .- arr[4]\n    arr = arr .- arr[5]\n    arr = arr\
    \ .- arr[6]\n    arr = arr .- arr[7]\n    arr = arr .- arr[8]\n    arr = arr .-\
    \ arr[9]\n    arr = arr .- arr[0]\n    return arr\nend\n</cell>\n<code language=julia-1.3>\n\
    by_length(arr)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ of integers and returns the sum of the integers in the vector. \nFor example,\
    \ \n    arr = [2, 1, 1, 4, 5, 8, 2, 3]\n    -> return [4, 9, 12, 15, 16, 19, 22,\
    \ 24]\n    \n    arr = []\n    -> return []\n    \n    arr = [1, -1 , 55]\n  \
    \  -> return [55]\n    \n    arr = [1, -1, 55]\n    -> return [55]\n    \n   \
    \ arr = [1, -1, 55]\n    -> return [55]\n    \n    arr = [1, -1, 55]\n    -> return\
    \ [55]\n    \n    arr = [1, -1, 55]\n    -> return [55]\n    \n    arr = [1, -1,\
    \ 55]\n    -> return [55]\n    \n    arr = [1, -1, 55]\n    -> return [55]\n \
    \   \n    arr = [1, -1, 55]\n    -> return [55]\n    \n    arr = [1, -1, 55]\n\
    \    -> return [55]\n    \n    arr = [1, -1, 55]\n    -> return [55]\n    \n \
    \   arr = [1, -1, 55]\n    -> return [55]\n    \n    arr = [1, -1, 55]\n    ->\
    \ return [55]\n    \n    arr = [1, -1, 55]\n    -> return [55]\n    \n    arr\
    \ = [1, -1, 55]\n    -> return [55]\n    \n    arr = [1, -1, 55]\n    -> return\
    \ [55]\n    \n    arr = [1, -1, 55]\n    -> return [55]\n    \n    arr = [1, -1,\
    \ 55]\n    -> return [55]\n    \n    arr = [1, -1, 55]\n    -> return [55]\n \
    \   \n    arr = [1, -1, 55]\n    -> return [55]\n    \n    arr = [1, -1, 55]\n\
    \    -> return [55\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t\
    @test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqdc6i752.jl:37\nin expression starting at\
    \ /tmp/tmpqdc6i752.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    arr = sort(arr)\n    arr\
    \ = reverse(arr)\n    arr = arr[1:end-1]\n    arr = arr .+ [\"One\", \"Two\",\
    \ \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  \
    \  return arr\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t\
    @test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp7xz8ugr_.jl:34\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  DimensionMismatch(\"\
    arrays could not be broadcast to a common size; got a dimension with lengths 7\
    \ and 9\")\n  Stacktrace:\n    [1] _bcs1\n      @ ./broadcast.jl:516 [inlined]\n\
    \    [2] _bcs\n      @ ./broadcast.jl:510 [inlined]\n    [3] broadcast_shape\n\
    \      @ ./broadcast.jl:504 [inlined]\n    [4] combine_axes\n      @ ./broadcast.jl:499\
    \ [inlined]\n    [5] instantiate\n      @ ./broadcast.jl:281 [inlined]\n    [6]\
    \ materialize\n      @ ./broadcast.jl:860 [inlined]\n    [7] by_length(arr::Vector{Int64})\n\
    \      @ Main /tmp/tmp7xz8ugr_.jl:26\n    [8] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [9] macro expansion\n      @ /tmp/tmp7xz8ugr_.jl:34 [inlined]\n\
    \   [10] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmp7xz8ugr_.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp7xz8ugr_.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  DimensionMismatch(\"arrays\
    \ could not be broadcast to a common size; got a dimension with lengths 0 and\
    \ 9\")\n  Stacktrace:\n    [1] _bcs1\n      @ ./broadcast.jl:516 [inlined]\n \
    \   [2] _bcs\n      @ ./broadcast.jl:510 [inlined]\n    [3] broadcast_shape\n\
    \      @ ./broadcast.jl:504 [inlined]\n    [4] combine_axes\n      @ ./broadcast.jl:499\
    \ [inlined]\n    [5] instantiate\n      @ ./broadcast.jl:281 [inlined]\n    [6]\
    \ materialize\n      @ ./broadcast.jl:860 [inlined]\n    [7] by_length(arr::Vector{Int64})\n\
    \      @ Main /tmp/tmp7xz8ugr_.jl:26\n    [8] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [9] macro expansion\n      @ /tmp/tmp7xz8ugr_.jl:35 [inlined]\n\
    \   [10] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [11"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7xz8ugr_.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    arr = sort(arr)\n    arr\
    \ = reverse(arr)\n    arr = arr .- arr[1]\n    arr = arr .- arr[2]\n    arr =\
    \ arr .- arr[3]\n    arr = arr .- arr[4]\n    arr = arr .- arr[5]\n    arr = arr\
    \ .- arr[6]\n    arr = arr .- arr[7]\n    arr = arr .- arr[8]\n    arr = arr .-\
    \ arr[9]\n    arr = arr .- arr[0]\n    arr = arr .- arr[1]\n    arr = arr .- arr[2]\n\
    \    arr = arr .- arr[3]\n    arr = arr .- arr[4]\n    arr = arr .- arr[5]\n \
    \   arr = arr .- arr[6]\n    arr = arr .- arr[7]\n    arr = arr .- arr[8]\n  \
    \  arr = arr .- arr[9]\n    arr = arr .- arr[0]\n    arr = arr .- arr[1]\n   \
    \ arr = arr .- arr[2]\n    arr = arr .- arr[3]\n    arr = arr .- arr[4]\n    arr\
    \ = arr .- arr[5]\n    arr = arr .- arr[6]\n    arr = arr .- arr[7]\n    arr =\
    \ arr .- arr[8]\n    arr = arr .- arr[9]\n    arr = arr .- arr[0]\n    arr = arr\
    \ .- arr[1]\n    arr = arr .- arr[2]\n    arr = arr .- arr[3]\n    arr = arr .-\
    \ arr[4]\n    arr = arr .- arr[5]\n    arr = arr .- arr[6]\n    arr = arr .- arr[7]\n\
    \    arr = arr .- arr[8]\n    arr = arr .- arr[9]\n    arr = arr .- arr[0]\n \
    \   arr = arr .- arr[1]\n    arr = arr .- arr[2]\n    arr = arr .- arr[3]\n  \
    \  arr = arr .- arr[4]\n    arr = arr .- arr[5]\n    arr = arr .- arr[6]\n   \
    \ arr = arr .- arr[7]\n    arr = arr .- arr[8]\n    arr = arr .- arr[9]\n    arr\
    \ = arr .- arr[0]\n    arr = arr .- arr[1]\n    arr = arr .- arr[2]\n    arr =\
    \ arr .- arr[3]\n    arr = arr .- arr[4]\n    arr = arr .- arr[5]\n    arr = arr\
    \ .- arr[6]\n    arr = arr .- arr[7]\n    arr = arr .- arr[8]\n    arr = arr .-\
    \ arr[9]\n    arr = arr .- arr[0]\n    arr = arr .- arr[1]\n    arr = \nusing\
    \ Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1,\
    \ 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpflgpt4z8.jl:22\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpflgpt4z8.jl:1\n\
    in expression starting at /tmp/tmpflgpt4z8.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr2 = arr\n    arr2\
    \ = arr2[arr2 .>= 1 .& arr2 .<= 9]\n    arr2 = arr2[arr2 .> 0]\n    \n    arr3\
    \ = reverse(arr2)\n    \n    arr4 = arr3\n    arr4 = arr4[arr4 .>= 1 .& arr4 .<=\
    \ 9]\n    arr4 = arr4[arr4 .> 0]\n    \n    arr5 = arr4\n    arr5 = arr5[arr5\
    \ .>= 1 .& arr5 .<= 9]\n    arr5 = arr5[arr5 .> 0]\n    \n    arr6 = arr5\n  \
    \  arr6 = arr6[arr6 .>= 1 .& arr6 .<= 9]\n    arr6 = arr6[arr6 .> 0]\n    \n \
    \   arr7 = arr6\n    arr7 = arr7[arr7 .>= 1 .& arr7 .<= 9]\n    arr7 = arr7[arr7\
    \ .> 0]\n    \n    arr8 = arr7\n    arr8 = arr8[arr8 .>= 1 .& arr8 .<= 9]\n  \
    \  arr8 = arr8[arr8 .> 0]\n    \n    arr9 = arr8\n    arr9 = arr9[arr9 .>= 1 .&\
    \ arr9 .<= 9]\n    arr9 = arr9[arr9 .> 0]\n    \n    arr10 = arr9\n    arr10 =\
    \ arr10[arr10 .>= 1 .& arr10 .<= 9]\n    arr10 = arr10[arr10 .> 0]\n    \n   \
    \ arr11 = arr10\n    arr11 = arr11[arr11 .>= 1 .& arr11 .<= 9]\n    arr11 = arr11[arr11\
    \ .> 0]\n    \n    arr12 = arr11\n    arr12 = arr12[arr12 .>= 1 .& arr12 .<= 9]\n\
    \    arr12 = arr12[arr12 .> 0]\n    \n    arr13 = arr12\n    arr13 = arr13[arr13\
    \ .>= 1 .& arr13 .<= 9]\n    arr13 = arr13[arr13 .> 0]\n    \n    arr14 = arr13\n\
    \    arr14 = arr14[arr14 .>= 1 .& arr14 .<= 9]\n    arr14 = arr14[arr14 .> 0]\n\
    \    \n    arr15 = arr14\n    arr15 = arr15[arr15 .>= 1 .& arr15 .<= 9]\n    arr15\n\
    using Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppdmijapq.jl:22\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppdmijapq.jl:1\n\
    in expression starting at /tmp/tmppdmijapq.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = sort(arr)\n\
    \    arr = reverse(arr)\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpebm5qn2l.jl:22\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpebm5qn2l.jl:1\n\
    in expression starting at /tmp/tmpebm5qn2l.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = sort(arr)\n\
    \    arr = reverse(arr)\n    \n    arr = arr .+ 1\n    \n    arr = arr .- 10\n\
    \    \n    arr = arr .- 9\n    \n    arr = arr .- 8\n    \n    arr = arr .- 7\n\
    \    \n    arr = arr .- 6\n    \n    arr = arr .- 5\n    \n    arr = arr .- 4\n\
    \    \n    arr = arr .- 3\n    \n    arr = arr .- 2\n    \n    arr = arr .- 1\n\
    \    \n    arr = arr .- 0\n    \n    arr = arr .+ 1\n    \n    arr = arr .- 10\n\
    \    \n    arr = arr .- 9\n    \n    arr = arr .- 8\n    \n    arr = arr .- 7\n\
    \    \n    arr = arr .- 6\n    \n    arr = arr .- 5\n    \n    arr = arr .- 4\n\
    \    \n    arr = arr .- 3\n    \n    arr = arr .- 2\n    \n    arr = arr .- 1\n\
    \    \n    arr = arr .- 0\n    \n    arr = arr .+ 1\n    \n    arr = arr .- 10\n\
    \    \n    arr = arr .- 9\n    \n    arr = arr .- 8\n    \n    arr = arr .- 7\n\
    \    \n    arr = arr .- 6\n    \n    arr = arr .- 5\n    \n    arr = arr .- 4\n\
    \    \n    arr = arr .- 3\n    \n    arr = arr .- 2\n    \n    arr = arr .- 1\n\
    \    \n    arr = arr .- 0\n    \n    arr = arr .+ 1\n    \n    arr = arr .- 10\n\
    \    \n    arr = arr .- 9\n    \n    arr = arr .- 8\n    \n    arr = arr .- 7\n\
    \    \n    arr = arr .- 6\n    \n    arr = arr .- 5\n    \n    arr = arr .- 4\n\
    \    \n    arr = arr .- 3\n    \n    arr = arr .- 2\n    \n    arr = arr .- 1\n\
    \    \n    arr = arr .- 0\n    \n    arr = arr .+ 1\n    \n    arr = arr .- 10\n\
    \    \n    arr = arr .- 9\n    \n    arr = arr .- 8\n    \n    arr = arr .- 7\n\
    \    \n    arr = arr .- 6\n    \n    arr = arr .- 5\n    \n    arr = arr .- 4\n\
    \    \n    arr = arr\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmph4funlta.jl:22\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmph4funlta.jl:1\n\
    in expression starting at /tmp/tmph4funlta.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = sort(arr)\n\
    \    arr = reverse(arr)\n    arr = replace(arr,\n        1 => \"One\",\n     \
    \   2 => \"Two\",\n        3 => \"Three\",\n        4 => \"Four\",\n        5\
    \ => \"Five\",\n        6 => \"Six\",\n        7 => \"Seven\",\n        8 => \"\
    Eight\",\n        9 => \"Nine\",\n        10 => \"Ten\",\n        11 => \"Eleven\"\
    ,\n        12 => \"Twelve\",\n        13 => \"Thirteen\",\n        14 => \"Fourteen\"\
    ,\n        15 => \"Fifteen\",\n        16 => \"Sixteen\",\n        17 => \"Seventeen\"\
    ,\n        18 => \"Eighteen\",\n        19 => \"Nineteen\",\n        20 => \"\
    Twenty\",\n        30 => \"Thirty\",\n        40 => \"Forty\",\n        50 =>\
    \ \"Fifty\",\n        60 => \"Sixty\",\n        70 => \"Seventy\",\n        80\
    \ => \"Eighty\",\n        90 => \"Ninety\",\n        100 => \"Hundred\",\n   \
    \     1000 => \"Thousand\",\n        10000 => \"Lakh\",\n        100000 => \"\
    Crore\",\n        1000000 => \"Million\",\n        10000000 => \"Billion\",\n\
    \        100000000 => \"Trillion\",\n        1000000000 => \"Quadrillion\",\n\
    \        10000000000 => \"Quintillion\",\n        100000000000 => \"Sextillion\"\
    ,\n        1000000000000 => \"Septillion\",\n        10000000000000 => \"Octillion\"\
    ,\n        100000000000000 => \"Nonillion\",\n        1000000000000000 => \"Decillion\"\
    ,\n        10000000000000000 => \"Undecillion\",\n        1000000000000000000\
    \ => \"Duodecillion\",\n        10000000000000000000 => \"Tredecillion\",\n  \
    \      100000000000000000000 => \"Quattuordecillion\",\n        1000000000000000000000\
    \ => \"Quindecillion\",\n        10000000000000000000000 => \"Sexdecillion\",\n\
    \        100000000000000000000000 => \"Septendecillion\",\n        1000000000000000000000000\
    \ => \"Octodecillion\",\n        10000000000000000000000000 => \"Novemdecillion\"\
    ,\n        100000000000000000000000000 => \"Vigintillion\",\n        1000000000000000000000000000\
    \ => \"Unvigintillion\",\n        10000000000000000000000000000 => \"Duovigintillion\"\
    ,\n        100000000000000000000000000000 => \"Tres\nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgj31ke8a.jl:86\nin expression starting at\
    \ /tmp/tmpgj31ke8a.jl:86\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = sort(arr)\n\
    \    arr = reverse(arr)\n    arr = arr .- 1 .+ 1\n    arr = arr .- 1 .+ 1\n  \
    \  arr = arr .- 1 .+ 1\n    arr = arr .- 1 .+ 1\n    arr = arr .- 1 .+ 1\n   \
    \ arr = arr .- 1 .+ 1\n    arr = arr .- 1 .+ 1\n    arr = arr .- 1 .+ 1\n    arr\
    \ = arr .- 1 .+ 1\n    arr = arr .- 1 .+ 1\n    arr = arr .- 1 .+ 1\n    arr =\
    \ arr .- 1 .+ 1\n    arr = arr .- 1 .+ 1\n    arr = arr .- 1 .+ 1\n    arr = arr\
    \ .- 1 .+ 1\n    arr = arr .- 1 .+ 1\n    arr = arr .- 1 .+ 1\n    arr = arr .-\
    \ 1 .+ 1\n    arr = arr .- 1 .+ 1\n    arr = arr .- 1 .+ 1\n    arr = arr .- 1\
    \ .+ 1\n    arr = arr .- 1 .+ 1\n    arr = arr .- 1 .+ 1\n    arr = arr .- 1 .+\
    \ 1\n    arr = arr .- 1 .+ 1\n    arr = arr .- 1 .+ 1\n    arr = arr .- 1 .+ 1\n\
    \    arr = arr .- 1 .+ 1\n    arr = arr .- 1 .+ 1\n    arr = arr .- 1 .+ 1\n \
    \   arr = arr .- 1 .+ 1\n    arr = arr .- 1 .+ 1\n    arr = arr .- 1 .+ 1\n  \
    \  arr = arr .- 1 .+ 1\n    arr = arr .- 1 .+ 1\n    arr = arr .- 1 .+ 1\n   \
    \ arr = arr .- 1 .+ 1\n    arr = arr .- 1 .+ 1\n    arr = arr .- 1 .+ 1\n    arr\
    \ = arr .- 1 .+ 1\n    arr = arr .- 1 .+ 1\n    arr = arr .- 1 .+ 1\n    arr =\
    \ arr .- 1 .+ 1\n    arr = arr .- 1 .+ 1\n    arr = arr .- 1 .+ 1\n    arr = arr\
    \ .- 1 .+ 1\n    arr = arr .- 1 .+ 1\n    arr = arr .- 1 .+ 1\n    arr = arr .-\
    \ 1 .+ 1\n    arr = arr .- 1 .+ 1\n    arr = arr .- 1 .+ 1\n    arr = arr .- 1\
    \ .+ 1\n    arr = arr .- 1 .+ 1\n    arr = arr .- 1 .+ 1\n    arr = arr .- 1 .+\
    \ 1\n    arr = arr .- \nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpiq9pkd8k.jl:22\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpiq9pkd8k.jl:1\n\
    in expression starting at /tmp/tmpiq9pkd8k.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = sort(arr)\n\
    \    arr = reverse(arr)\n    \n    arr = map(x -> \"One\" if x == 1 \n       \
    \ else \"Two\" if x == 2\n        else \"Three\" if x == 3\n        else \"Four\"\
    \ if x == 4\n        else \"Five\" if x == 5\n        else \"Six\" if x == 6\n\
    \        else \"Seven\" if x == 7\n        else \"Eight\" if x == 8\n        else\
    \ \"Nine\", arr)\n    \n    return arr\nend\n</cell>\n<code language=julia-1.4>\n\
    by_length(arr)\n</cell>\n<text>\nExercise 3\nWrite a function that returns the\
    \ number of times each digit appears in the array.\nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptd2k34fs.jl:27\nin expression starting at\
    \ /tmp/tmptd2k34fs.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    arr = sort(arr)\n    arr\
    \ = reverse(arr)\n    arr = arr[1:end-1]\n    arr = arr .+ [\"One\", \"Two\",\
    \ \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  \
    \  return arr\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t\
    @test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp99y236ab.jl:34\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  DimensionMismatch(\"\
    arrays could not be broadcast to a common size; got a dimension with lengths 7\
    \ and 9\")\n  Stacktrace:\n    [1] _bcs1\n      @ ./broadcast.jl:516 [inlined]\n\
    \    [2] _bcs\n      @ ./broadcast.jl:510 [inlined]\n    [3] broadcast_shape\n\
    \      @ ./broadcast.jl:504 [inlined]\n    [4] combine_axes\n      @ ./broadcast.jl:499\
    \ [inlined]\n    [5] instantiate\n      @ ./broadcast.jl:281 [inlined]\n    [6]\
    \ materialize\n      @ ./broadcast.jl:860 [inlined]\n    [7] by_length(arr::Vector{Int64})\n\
    \      @ Main /tmp/tmp99y236ab.jl:26\n    [8] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [9] macro expansion\n      @ /tmp/tmp99y236ab.jl:34 [inlined]\n\
    \   [10] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmp99y236ab.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp99y236ab.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  DimensionMismatch(\"arrays\
    \ could not be broadcast to a common size; got a dimension with lengths 0 and\
    \ 9\")\n  Stacktrace:\n    [1] _bcs1\n      @ ./broadcast.jl:516 [inlined]\n \
    \   [2] _bcs\n      @ ./broadcast.jl:510 [inlined]\n    [3] broadcast_shape\n\
    \      @ ./broadcast.jl:504 [inlined]\n    [4] combine_axes\n      @ ./broadcast.jl:499\
    \ [inlined]\n    [5] instantiate\n      @ ./broadcast.jl:281 [inlined]\n    [6]\
    \ materialize\n      @ ./broadcast.jl:860 [inlined]\n    [7] by_length(arr::Vector{Int64})\n\
    \      @ Main /tmp/tmp99y236ab.jl:26\n    [8] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [9] macro expansion\n      @ /tmp/tmp99y236ab.jl:35 [inlined]\n\
    \   [10] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [11"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp99y236ab.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = sort(arr)\n\
    \    arr = reverse(arr)\n    arr = arr .- arr[1]\n    arr = arr .- arr[2]\n  \
    \  arr = arr .- arr[3]\n    arr = arr .- arr[4]\n    arr = arr .- arr[5]\n   \
    \ arr = arr .- arr[6]\n    arr = arr .- arr[7]\n    arr = arr .- arr[8]\n    arr\
    \ = arr .- arr[9]\n    arr = arr .- arr[0]\n    arr = arr .- arr[1]\n    arr =\
    \ arr .- arr[2]\n    arr = arr .- arr[3]\n    arr = arr .- arr[4]\n    arr = arr\
    \ .- arr[5]\n    arr = arr .- arr[6]\n    arr = arr .- arr[7]\n    arr = arr .-\
    \ arr[8]\n    arr = arr .- arr[9]\n    arr = arr .- arr[0]\n    arr = arr .- arr[1]\n\
    \    arr = arr .- arr[2]\n    arr = arr .- arr[3]\n    arr = arr .- arr[4]\n \
    \   arr = arr .- arr[5]\n    arr = arr .- arr[6]\n    arr = arr .- arr[7]\n  \
    \  arr = arr .- arr[8]\n    arr = arr .- arr[9]\n    arr = arr .- arr[0]\n   \
    \ arr = arr .- arr[1]\n    arr = arr .- arr[2]\n    arr = arr .- arr[3]\n    arr\
    \ = arr .- arr[4]\n    arr = arr .- arr[5]\n    arr = arr .- arr[6]\n    arr =\
    \ arr .- arr[7]\n    arr = arr .- arr[8]\n    arr = arr .- arr[9]\n    arr = arr\
    \ .- arr[0]\n    arr = arr .- arr[1]\n    arr = arr .- arr[2]\n    arr = arr .-\
    \ arr[3]\n    arr = arr .- arr[4]\n    arr = arr .- arr[5]\n    arr = arr .- arr[6]\n\
    \    arr = arr .- arr[7]\n    arr = arr .- arr[8]\n    arr = arr .- arr[9]\n \
    \   arr = arr .- arr[0]\n    arr = arr .- arr[1]\n    arr = arr .- arr[2]\n  \
    \  arr = arr .- arr[3]\n    arr = arr .- arr[4]\n    arr = arr .- arr[5]\n   \
    \ arr = arr .- arr[6]\n    arr = arr .- arr[7]\n    arr = arr .- arr[8]\n    arr\
    \ = arr .- arr[9]\n    arr = arr .- arr[0]\n    arr = arr .- arr[1]\n\nusing Test\n\
    \n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
    One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpfgqydju_.jl:22\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfgqydju_.jl:1\n\
    in expression starting at /tmp/tmpfgqydju_.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = sort(arr)\n\
    \    arr = reverse(arr)\n    \n    arr = arr .- arr .+ 1\n    \n    arr = arr\
    \ .- arr .+ 1\n    \n    arr = arr .- arr .+ 1\n    \n    arr = arr .- arr .+\
    \ 1\n    \n    arr = arr .- arr .+ 1\n    \n    arr = arr .- arr .+ 1\n    \n\
    \    arr = arr .- arr .+ 1\n    \n    arr = arr .- arr .+ 1\n    \n    arr = arr\
    \ .- arr .+ 1\n    \n    arr = arr .- arr .+ 1\n    \n    arr = arr .- arr .+\
    \ 1\n    \n    arr = arr .- arr .+ 1\n    \n    arr = arr .- arr .+ 1\n    \n\
    \    arr = arr .- arr .+ 1\n    \n    arr = arr .- arr .+ 1\n    \n    arr = arr\
    \ .- arr .+ 1\n    \n    arr = arr .- arr .+ 1\n    \n    arr = arr .- arr .+\
    \ 1\n    \n    arr = arr .- arr .+ 1\n    \n    arr = arr .- arr .+ 1\n    \n\
    \    arr = arr .- arr .+ 1\n    \n    arr = arr .- arr .+ 1\n    \n    arr = arr\
    \ .- arr .+ 1\n    \n    arr = arr .- arr .+ 1\n    \n    arr = arr .- arr .+\
    \ 1\n    \n    arr = arr .- arr .+ 1\n    \n    arr = arr .- arr .+ 1\n    \n\
    \    arr = arr .- arr .+ 1\n    \n    arr = arr .- arr .+ 1\n    \n    arr = arr\
    \ .- arr .+ 1\n    \n    arr = arr .- arr .+ 1\n    \n    arr = arr .- arr .+\
    \ 1\n    \n    arr = arr .- arr .+ 1\n    \n    arr = arr .- arr .+ 1\n    \n\
    \    arr = arr .- arr .+ 1\n    \n    arr = arr .- arr .+ 1\n    \n    arr = arr\
    \ .- arr .+ 1\n    \n    arr = arr .- arr .+ 1\n    \n    arr = arr .- arr .+\
    \ 1\n    \n    arr = arr .- arr .+ 1\n    \n    arr = arr .- arr .+ 1\n    \n\
    \    arr = arr .- arr .+ 1\n    \n    arr = arr .- arr .+ 1\n    \n    arr = arr\
    \ .- arr .+ 1\n    \n    arr = arr .- arr .+ 1\n    \n    arr = arr\nusing Test\n\
    \n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
    One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpuon80u7l.jl:22\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpuon80u7l.jl:1\n\
    in expression starting at /tmp/tmpuon80u7l.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = sort(arr)\n\
    \    arr = reverse(arr)\n    arr = arr .- arr[1]\n    arr = arr .+ arr[1]\n  \
    \  arr = arr .+ arr[1]\n    arr = arr .+ arr[1]\n    arr = arr .+ arr[1]\n   \
    \ arr = arr .+ arr[1]\n    arr = arr .+ arr[1]\n    arr = arr .+ arr[1]\n    arr\
    \ = arr .+ arr[1]\n    arr = arr .+ arr[1]\n    arr = arr .+ arr[1]\n    arr =\
    \ arr .+ arr[1]\n    arr = arr .+ arr[1]\n    arr = arr .+ arr[1]\n    arr = arr\
    \ .+ arr[1]\n    arr = arr .+ arr[1]\n    arr = arr .+ arr[1]\n    arr = arr .+\
    \ arr[1]\n    arr = arr .+ arr[1]\n    arr = arr .+ arr[1]\n    arr = arr .+ arr[1]\n\
    \    arr = arr .+ arr[1]\n    arr = arr .+ arr[1]\n    arr = arr .+ arr[1]\n \
    \   arr = arr .+ arr[1]\n    arr = arr .+ arr[1]\n    arr = arr .+ arr[1]\n  \
    \  arr = arr .+ arr[1]\n    arr = arr .+ arr[1]\n    arr = arr .+ arr[1]\n   \
    \ arr = arr .+ arr[1]\n    arr = arr .+ arr[1]\n    arr = arr .+ arr[1]\n    arr\
    \ = arr .+ arr[1]\n    arr = arr .+ arr[1]\n    arr = arr .+ arr[1]\n    arr =\
    \ arr .+ arr[1]\n    arr = arr .+ arr[1]\n    arr = arr .+ arr[1]\n    arr = arr\
    \ .+ arr[1]\n    arr = arr .+ arr[1]\n    arr = arr .+ arr[1]\n    arr = arr .+\
    \ arr[1]\n    arr = arr .+ arr[1]\n    arr = arr .+ arr[1]\n    arr = arr .+ arr[1]\n\
    \    arr = arr .+ arr[1]\n    arr = arr .+ arr[1]\n    arr = arr .+ arr[1]\n \
    \   arr = arr .+ arr[1]\n    arr = arr .+ arr[1]\n    arr = arr .+ arr[1]\n  \
    \  arr = arr .+ arr[1]\n    arr = arr .+ arr[1]\n    arr = arr .+ arr[1]\n   \
    \ arr = arr .+ arr[1]\n    arr = arr .+ arr[1]\n    arr = arr .+ arr[1]\n    arr\
    \ = arr .+ arr[1]\n    arr = arr .+ arr[1]\n    arr = arr .+ arr[1]\n    arr =\
    \ arr .+ arr[1]\n    arr = arr .\nusing Test\n\n@testset begin\n\ncandidate =\
    \ by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: space before \".\" not allowed in \"arr .\" at\
    \ /tmp/tmpsthtb49j.jl:88\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsthtb49j.jl:88\n\
    in expression starting at /tmp/tmpsthtb49j.jl:88\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = sort(arr)\n\
    \    arr = reverse(arr)\n    \n    arr = arr .+ 1\n    \n    arr = arr .- 9\n\
    \    \n    arr = arr .- 9\n    \n    arr = arr .- 9\n    \n    arr = arr .- 9\n\
    \    \n    arr = arr .- 9\n    \n    arr = arr .- 9\n    \n    arr = arr .- 9\n\
    \    \n    arr = arr .- 9\n    \n    arr = arr .- 9\n    \n    arr = arr .- 9\n\
    \    \n    arr = arr .- 9\n    \n    arr = arr .- 9\n    \n    arr = arr .- 9\n\
    \    \n    arr = arr .- 9\n    \n    arr = arr .- 9\n    \n    arr = arr .- 9\n\
    \    \n    arr = arr .- 9\n    \n    arr = arr .- 9\n    \n    arr = arr .- 9\n\
    \    \n    arr = arr .- 9\n    \n    arr = arr .- 9\n    \n    arr = arr .- 9\n\
    \    \n    arr = arr .- 9\n    \n    arr = arr .- 9\n    \n    arr = arr .- 9\n\
    \    \n    arr = arr .- 9\n    \n    arr = arr .- 9\n    \n    arr = arr .- 9\n\
    \    \n    arr = arr .- 9\n    \n    arr = arr .- 9\n    \n    arr = arr .- 9\n\
    \    \n    arr = arr .- 9\n    \n    arr = arr .- 9\n    \n    arr = arr .- 9\n\
    \    \n    arr = arr .- 9\n    \n    arr = arr .- 9\n    \n    arr = arr .- 9\n\
    \    \n    arr = arr .- 9\n    \n    arr = arr .- 9\n    \n    arr = arr .- 9\n\
    \    \n    arr = arr .- 9\n    \n    arr = arr .- 9\n    \n    arr = arr .- 9\n\
    \    \n    arr = arr .- 9\n    \n    arr = arr .- 9\n    \n    arr = arr .- 9\n\
    \    \n    arr = arr .- 9\n    \n    arr = arr .- 9\n    \n    arr = arr .- 9\n\
    \    \n    arr = arr .- 9\n    \n    arr = arr .- 9\n    \n    arr = arr .- 9\n\
    \    \n    arr = arr .- 9\n    \n    arr = arr .- 9\n    \n    arr = arr .\nusing\
    \ Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1,\
    \ 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: space before \".\" not allowed in \"arr .\" at\
    \ /tmp/tmpl6ysbs6o.jl:137\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpl6ysbs6o.jl:137\n\
    in expression starting at /tmp/tmpl6ysbs6o.jl:137\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = sort(arr)\n\
    \    arr = reverse(arr)\n    \n    arr = map(x -> \"One\"[x], arr)\n    arr =\
    \ map(x -> \"Two\"[x], arr)\n    arr = map(x -> \"Three\"[x], arr)\n    arr =\
    \ map(x -> \"Four\"[x], arr)\n    arr = map(x -> \"Five\"[x], arr)\n    arr =\
    \ map(x -> \"Six\"[x], arr)\n    arr = map(x -> \"Seven\"[x], arr)\n    arr =\
    \ map(x -> \"Eight\"[x], arr)\n    arr = map(x -> \"Nine\"[x], arr)\n    \n  \
    \  return arr\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t\
    @test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp2e0x8dkg.jl:44\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  BoundsError: attempt\
    \ to access 3-codeunit String at index [8]\n  Stacktrace:\n    [1] checkbounds\n\
    \      @ ./strings/basic.jl:216 [inlined]\n    [2] codeunit\n      @ ./strings/string.jl:102\
    \ [inlined]\n    [3] getindex\n      @ ./strings/string.jl:223 [inlined]\n   \
    \ [4] #1\n      @ /tmp/tmp2e0x8dkg.jl:27 [inlined]\n    [5] iterate\n      @ ./generator.jl:47\
    \ [inlined]\n    [6] _collect(c::Vector{Int64}, itr::Base.Generator{Vector{Int64},\
    \ var\"#1#10\"}, #unused#::Base.EltypeUnknown, isz::Base.HasShape{1})\n      @\
    \ Base ./array.jl:744\n    [7] collect_similar\n      @ ./array.jl:653 [inlined]\n\
    \    [8] map\n      @ ./abstractarray.jl:2867 [inlined]\n    [9] by_length(arr::Vector{Int64})\n\
    \      @ Main /tmp/tmp2e0x8dkg.jl:27\n   [10] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [11] macro expansion\n      @ /tmp/tmp2e0x8dkg.jl:44 [inlined]\n\
    \   [12] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [13] top-level scope\n      @ /tmp/tmp2e0x8dkg.jl:43\ntest set:\
    \ Error During Test at /tmp/tmp2e0x8dkg.jl:46\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  BoundsError: attempt to access 3-codeunit\
    \ String at index [55]\n  Stacktrace:\n    [1] checkbounds\n      @ ./strings/basic.jl:216\
    \ [inlined]\n    [2] codeunit\n      @ ./strings/string.jl:102 [inlined]\n   \
    \ [3] getindex\n      @ ./strings/string.jl:223 [inlined]\n    [4] #1\n      @\
    \ /tmp/tmp2e0x8dkg.jl:27 [inlined]\n    [5] iterate\n      @ ./generator.jl:47\
    \ [inlined]\n    [6] _collect(c::Vector{Int64}, itr::Base.Generator{Vector{Int64},\
    \ var\"#1#10\"}, #unused#::Base.EltypeUnknown, isz::Base.HasShape{1})\n      @\
    \ Base ./array.jl:744\n    [7] collect_similar\n      @ ./array.jl:653 [inlined]\n\
    \    [8] map\n      @ ./abstractarray.jl:2867 [inlined]\n    [9] by_length(arr::Vector{In"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2e0x8dkg.jl:41\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = sort(arr)\n\
    \    arr = reverse(arr)\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpcgs1_c0n.jl:22\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpcgs1_c0n.jl:1\n\
    in expression starting at /tmp/tmpcgs1_c0n.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = sort(arr)\n\
    \    arr = reverse(arr)\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpk44dygkj.jl:22\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpk44dygkj.jl:1\n\
    in expression starting at /tmp/tmpk44dygkj.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr2 = sort(arr)\n\
    \    arr3 = reverse(arr2)\n    \n    arr4 = arr3\n    \n    arr5 = arr4\n    \n\
    \    arr6 = arr5\n    \n    arr7 = arr6\n    \n    arr8 = arr7\n    \n    arr9\
    \ = arr8\n    \n    arr10 = arr9\n    \n    arr11 = arr10\n    \n    arr12 = arr11\n\
    \    \n    arr13 = arr12\n    \n    arr14 = arr13\n    \n    arr15 = arr14\n \
    \   \n    arr16 = arr15\n    \n    arr17 = arr16\n    \n    arr18 = arr17\n  \
    \  \n    arr19 = arr18\n    \n    arr20 = arr19\n    \n    arr21 = arr20\n   \
    \ \n    arr22 = arr21\n    \n    arr23 = arr22\n    \n    arr24 = arr23\n    \n\
    \    arr25 = arr24\n    \n    arr26 = arr25\n    \n    arr27 = arr26\n    \n \
    \   arr28 = arr27\n    \n    arr29 = arr28\n    \n    arr30 = arr29\n    \n  \
    \  arr31 = arr30\n    \n    arr32 = arr31\n    \n    arr33 = arr32\n    \n   \
    \ arr34 = arr33\n    \n    arr35 = arr34\n    \n    arr36 = arr35\n    \n    arr37\
    \ = arr36\n    \n    arr38 = arr37\n    \n    arr39 = arr38\n    \n    arr40 =\
    \ arr39\n    \n    arr41 = arr40\n    \n    arr42 = arr41\n    \n    arr43 = arr42\n\
    \    \n    arr44 = arr43\n    \n    arr45 = arr44\n    \n    arr46 = arr45\n \
    \   \n    arr47 = arr46\n    \n    arr48 = arr47\n    \n    arr49 = arr48\n  \
    \  \n    arr50 = arr49\n    \n    arr51 = arr50\n    \n    arr52 = arr51\n   \
    \ \n    arr53 = arr52\n    \n    arr54 = arr53\n    \n    arr55 = arr54\n    \n\
    \    arr56 = arr55\n    \n    arr57 = arr56\n    \n    arr58 = arr57\n    \n \
    \   arr59 = arr58\n    \n\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpyga83n54.jl:22\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyga83n54.jl:1\n\
    in expression starting at /tmp/tmpyga83n54.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = sort(arr)\n\
    \    arr = reverse(arr)\n    \n    arr = arr |> Vector{String}\n    \n    arr\
    \ = arr |> Vector{String}\n    \n    arr = arr |> Vector{String}\n    \n    arr\
    \ = arr |> Vector{String}\n    \n    arr = arr |> Vector{String}\n    \n    arr\
    \ = arr |> Vector{String}\n    \n    arr = arr |> Vector{String}\n    \n    arr\
    \ = arr |> Vector{String}\n    \n    arr = arr |> Vector{String}\n    \n    arr\
    \ = arr |> Vector{String}\n    \n    arr = arr |> Vector{String}\n    \n    arr\
    \ = arr |> Vector{String}\n    \n    arr = arr |> Vector{String}\n    \n    arr\
    \ = arr |> Vector{String}\n    \n    arr = arr |> Vector{String}\n    \n    arr\
    \ = arr |> Vector{String}\n    \n    arr = arr |> Vector{String}\n    \n    arr\
    \ = arr |> Vector{String}\n    \n    arr = arr |> Vector{String}\n    \n    arr\
    \ = arr |> Vector{String}\n    \n    arr = arr |> Vector{String}\n    \n    arr\
    \ = arr |> Vector{String}\n    \n    arr = arr |> Vector{String}\n    \n    arr\
    \ = arr |> Vector{String}\n    \n    arr = arr |> Vector{String}\n    \n    arr\
    \ = arr |> Vector{String}\n    \n    arr = arr |> Vector{String}\n    \n    arr\
    \ = arr |> Vector{String}\n    \n    arr = arr |> Vector{String}\n    \n    arr\
    \ = arr |> Vector{String}\n    \n    arr = arr |> Vector{String}\n    \n    arr\
    \ = arr |> Vector{String}\n    \n    arr = arr |> Vector{String}\n    \n    arr\
    \ = arr |> Vector{String}\n    \n    arr = arr |> Vector{String}\n    \n    arr\
    \ = arr |> Vector{String}\n    \n    arr = arr |> Vector{String}\n    \n    arr\
    \ = arr |> Vector{String}\n    \n    arr = arr \nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7kv6fxpv.jl:22\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7kv6fxpv.jl:1\n\
    in expression starting at /tmp/tmp7kv6fxpv.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    arr = sort(arr)\n    arr\
    \ = reverse(arr)\n    arr = arr .- arr[1]\n    arr = arr .- arr[2]\n    arr =\
    \ arr .- arr[3]\n    arr = arr .- arr[4]\n    arr = arr .- arr[5]\n    arr = arr\
    \ .- arr[6]\n    arr = arr .- arr[7]\n    arr = arr .- arr[8]\n    arr = arr .-\
    \ arr[9]\n    arr = arr .- arr[0]\n    arr = arr .- arr[1]\n    arr = arr .- arr[2]\n\
    \    arr = arr .- arr[3]\n    arr = arr .- arr[4]\n    arr = arr .- arr[5]\n \
    \   arr = arr .- arr[6]\n    arr = arr .- arr[7]\n    arr = arr .- arr[8]\n  \
    \  arr = arr .- arr[9]\n    arr = arr .- arr[0]\n    arr = arr .- arr[1]\n   \
    \ arr = arr .- arr[2]\n    arr = arr .- arr[3]\n    arr = arr .- arr[4]\n    arr\
    \ = arr .- arr[5]\n    arr = arr .- arr[6]\n    arr = arr .- arr[7]\n    arr =\
    \ arr .- arr[8]\n    arr = arr .- arr[9]\n    arr = arr .- arr[0]\n    arr = arr\
    \ .- arr[1]\n    arr = arr .- arr[2]\n    arr = arr .- arr[3]\n    arr = arr .-\
    \ arr[4]\n    arr = arr .- arr[5]\n    arr = arr .- arr[6]\n    arr = arr .- arr[7]\n\
    \    arr = arr .- arr[8]\n    arr = arr .- arr[9]\n    arr = arr .- arr[0]\n \
    \   arr = arr .- arr[1]\n    arr = arr .- arr[2]\n    arr = arr .- arr[3]\n  \
    \  arr = arr .- arr[4]\n    arr = arr .- arr[5]\n    arr = arr .- arr[6]\n   \
    \ arr = arr .- arr[7]\n    arr = arr .- arr[8]\n    arr = arr .- arr[9]\n    arr\
    \ = arr .- arr[0]\n    arr = arr .- arr[1]\n    arr = arr .- arr[2]\n    arr =\
    \ arr .- arr[3]\n    arr = arr .- arr[4]\n    arr = arr .- arr[5]\n    arr = arr\
    \ .- arr[6]\n    arr = arr .- arr[7]\n    arr = arr .- arr[8]\n    arr = arr .-\
    \ arr[9]\n    arr = arr .- arr[0]\n    arr = arr .- arr[1]\n    arr = \nusing\
    \ Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1,\
    \ 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpr09ycd5g.jl:22\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpr09ycd5g.jl:1\n\
    in expression starting at /tmp/tmpr09ycd5g.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = sort(arr)\n\
    \    arr = reverse(arr)\n    arr = arr |> Vector{String}\n    \n    arr = arr\
    \ |> filter(x->x>0 && x<10) |> Vector{String}\n    \n    arr = arr |> filter(x->x>0\
    \ && x<10) |> Vector{String}\n    \n    arr = arr |> filter(x->x>0 && x<10) |>\
    \ Vector{String}\n    \n    arr = arr |> filter(x->x>0 && x<10) |> Vector{String}\n\
    \    \n    arr = arr |> filter(x->x>0 && x<10) |> Vector{String}\n    \n    arr\
    \ = arr |> filter(x->x>0 && x<10) |> Vector{String}\n    \n    arr = arr |> filter(x->x>0\
    \ && x<10) |> Vector{String}\n    \n    arr = arr |> filter(x->x>0 && x<10) |>\
    \ Vector{String}\n    \n    arr = arr |> filter(x->x>0 && x<10) |> Vector{String}\n\
    \    \n    arr = arr |> filter(x->x>0 && x<10) |> Vector{String}\n    \n    arr\
    \ = arr |> filter(x->x>0 && x<10) |> Vector{String}\n    \n    arr = arr |> filter(x->x>0\
    \ && x<10) |> Vector{String}\n    \n    arr = arr |> filter(x->x>0 && x<10) |>\
    \ Vector{String}\n    \n    arr = arr |> filter(x->x>0 && x<10) |> Vector{String}\n\
    \    \n    arr = arr |> filter(x->x>0 && x<10) |> Vector{String}\n    \n    arr\
    \ = arr |> filter(x->x>0 && x<10) |> Vector{String}\n    \n    arr = arr |> filter(x->x>0\
    \ && x<10) |> Vector{String}\n    \n    arr = arr |> filter(x->x>0 && x<10) |>\
    \ Vector{String}\n    \n    arr = arr |> filter(x->x>0 && x<10) |> Vector{String}\n\
    \    \n    arr = arr |> filter(x->x>0 && x<10) |> Vector{String}\n    \n    arr\
    \ = arr |> filter\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t\
    @test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp8b8fqg6s.jl:22\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8b8fqg6s.jl:1\n\
    in expression starting at /tmp/tmp8b8fqg6s.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr2 = sort(arr)\n\
    \    arr3 = reverse(arr2)\n    \n    arr4 = arr3\n    \n    arr5 = arr4\n    \n\
    \    arr6 = arr5\n    \n    arr7 = arr6\n    \n    arr8 = arr7\n    \n    arr9\
    \ = arr8\n    \n    arr10 = arr9\n    \n    arr11 = arr10\n    \n    arr12 = arr11\n\
    \    \n    arr13 = arr12\n    \n    arr14 = arr13\n    \n    arr15 = arr14\n \
    \   \n    arr16 = arr15\n    \n    arr17 = arr16\n    \n    arr18 = arr17\n  \
    \  \n    arr19 = arr18\n    \n    arr20 = arr19\n    \n    arr21 = arr20\n   \
    \ \n    arr22 = arr21\n    \n    arr23 = arr22\n    \n    arr24 = arr23\n    \n\
    \    arr25 = arr24\n    \n    arr26 = arr25\n    \n    arr27 = arr26\n    \n \
    \   arr28 = arr27\n    \n    arr29 = arr28\n    \n    arr30 = arr29\n    \n  \
    \  arr31 = arr30\n    \n    arr32 = arr31\n    \n    arr33 = arr32\n    \n   \
    \ arr34 = arr33\n    \n    arr35 = arr34\n    \n    arr36 = arr35\n    \n    arr37\
    \ = arr36\n    \n    arr38 = arr37\n    \n    arr39 = arr38\n    \n    arr40 =\
    \ arr39\n    \n    arr41 = arr40\n    \n    arr42 = arr41\n    \n    arr43 = arr42\n\
    \    \n    arr44 = arr43\n    \n    arr45 = arr44\n    \n    arr46 = arr45\n \
    \   \n    arr47 = arr46\n    \n    arr48 = arr47\n    \n    arr49 = arr48\n  \
    \  \n    arr50 = arr49\n    \n    arr51 = arr50\n    \n    arr52 = arr51\n   \
    \ \n    arr53 = arr52\n    \n    arr54 = arr53\n    \n    arr55 = arr54\n    \n\
    \    arr56 = arr55\n    \n    arr57 = arr56\n    \n    arr58 = arr57\n    \n \
    \   arr59 = arr58\n    \n\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpd5fhn3h6.jl:22\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpd5fhn3h6.jl:1\n\
    in expression starting at /tmp/tmpd5fhn3h6.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = sort(arr)\n\
    \    arr = reverse(arr)\n    arr = arr[2:end]\n    arr = arr.reverse()\n    arr\
    \ = arr[1:end]\n    arr = arr.reverse()\n    arr = arr[1:end]\n    arr = arr.reverse()\n\
    \    arr = arr[1:end]\n    arr = arr.reverse()\n    arr = arr[1:end]\n    arr\
    \ = arr.reverse()\n    arr = arr[1:end]\n    arr = arr.reverse()\n    arr = arr[1:end]\n\
    \    arr = arr.reverse()\n    arr = arr[1:end]\n    arr = arr.reverse()\n    arr\
    \ = arr[1:end]\n    arr = arr.reverse()\n    arr = arr[1:end]\n    arr = arr.reverse()\n\
    \    arr = arr[1:end]\n    arr = arr.reverse()\n    arr = arr[1:end]\n    arr\
    \ = arr.reverse()\n    arr = arr[1:end]\n    arr = arr.reverse()\n    arr = arr[1:end]\n\
    \    arr = arr.reverse()\n    arr = arr[1:end]\n    arr = arr.reverse()\n    arr\
    \ = arr[1:end]\n    arr = arr.reverse()\n    arr = arr[1:end]\n    arr = arr.reverse()\n\
    \    arr = arr[1:end]\n    arr = arr.reverse()\n    arr = arr[1:end]\n    arr\
    \ = arr.reverse()\n    arr = arr[1:end]\n    arr = arr.reverse()\n    arr = arr[1:end]\n\
    \    arr = arr.reverse()\n    arr = arr[1:end]\n    arr = arr.reverse()\n    arr\
    \ = arr[1:end]\n    arr = arr.reverse()\n    arr = arr[1:end]\n    arr = arr.reverse()\n\
    \    arr = arr[1:end]\n    arr = arr.reverse()\n    arr = arr[1:end]\n    arr\
    \ = arr.reverse()\n    arr = arr[1:end]\n    arr = arr.reverse()\n    arr = arr[1:end]\n\
    \    arr = arr.reverse()\n    arr = arr[1:end]\n    arr = arr.reverse()\n    arr\
    \ = arr[1:end]\n    arr = arr.reverse()\n    arr = arr[1:end]\n    arr = arr.reverse()\n\
    \    arr = arr[1:end]\n    arr = arr.reverse()\n    arr = arr[1:end]\n    arr\
    \ = arr.reverse()\n    arr = arr[1:end]\n    arr = arr.reverse()\n    arr = arr[1:end]\n\
    \    arr = arr.reverse()\n    arr = arr[1:end]\n    arr = arr.reverse()\n    arr\
    \ = arr[1:end]\n    arr = arr.reverse()\n    arr = arr[1:end]\n    arr = arr.reverse()\n\
    \    arr = arr[1:end]\n    arr = arr.reverse()\n    arr = arr[1:end]\n    arr\
    \ = arr.reverse()\n    arr = arr[1:end]\n    arr = arr.reverse()\n    arr = arr[1:end]\n\
    \    arr = \nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpkrwjdu6h.jl:22\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpkrwjdu6h.jl:1\n\
    in expression starting at /tmp/tmpkrwjdu6h.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = sort(arr)\n\
    \    arr = reverse(arr)\n    arr = arr .- arr[1]\n    arr = arr .- arr[2]\n  \
    \  arr = arr .- arr[3]\n    arr = arr .- arr[4]\n    arr = arr .- arr[5]\n   \
    \ arr = arr .- arr[6]\n    arr = arr .- arr[7]\n    arr = arr .- arr[8]\n    arr\
    \ = arr .- arr[9]\n    arr = arr .- arr[1]\n    arr = arr .- arr[2]\n    arr =\
    \ arr .- arr[3]\n    arr = arr .- arr[4]\n    arr = arr .- arr[5]\n    arr = arr\
    \ .- arr[6]\n    arr = arr .- arr[7]\n    arr = arr .- arr[8]\n    arr = arr .-\
    \ arr[9]\n    arr = arr .- arr[1]\n    arr = arr .- arr[2]\n    arr = arr .- arr[3]\n\
    \    arr = arr .- arr[4]\n    arr = arr .- arr[5]\n    arr = arr .- arr[6]\n \
    \   arr = arr .- arr[7]\n    arr = arr .- arr[8]\n    arr = arr .- arr[9]\n  \
    \  arr = arr .- arr[1]\n    arr = arr .- arr[2]\n    arr = arr .- arr[3]\n   \
    \ arr = arr .- arr[4]\n    arr = arr .- arr[5]\n    arr = arr .- arr[6]\n    arr\
    \ = arr .- arr[7]\n    arr = arr .- arr[8]\n    arr = arr .- arr[9]\n    arr =\
    \ arr .- arr[1]\n    arr = arr .- arr[2]\n    arr = arr .- arr[3]\n    arr = arr\
    \ .- arr[4]\n    arr = arr .- arr[5]\n    arr = arr .- arr[6]\n    arr = arr .-\
    \ arr[7]\n    arr = arr .- arr[8]\n    arr = arr .- arr[9]\n    arr = arr .- arr[1]\n\
    \    arr = arr .- arr[2]\n    arr = arr .- arr[3]\n    arr = arr .- arr[4]\n \
    \   arr = arr .- arr[5]\n    arr = arr .- arr[6]\n    arr = arr .- arr[7]\n  \
    \  arr = arr .- arr[8]\n    arr = arr .- arr[9]\n    arr = arr .- arr[1]\n   \
    \ arr = arr .- arr[2]\n    arr = arr .- arr[3]\n    arr = arr .- arr[4]\n    arr\
    \ = arr .- arr[5]\n    arr = arr .- arr[6]\n    arr = arr .- arr[7\nusing Test\n\
    \n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
    One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv6ihfxl6.jl:1\nin expression starting at /tmp/tmpv6ihfxl6.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = sort(arr)\n\
    \    arr = reverse(arr)\n    arr = arr .- arr[1]\n    arr = arr .- arr[2]\n  \
    \  arr = arr .- arr[3]\n    arr = arr .- arr[4]\n    arr = arr .- arr[5]\n   \
    \ arr = arr .- arr[6]\n    arr = arr .- arr[7]\n    arr = arr .- arr[8]\n    arr\
    \ = arr .- arr[9]\n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n  \
    \  arr = arr .- arr[2]\n    arr = arr .- arr[3]\n    arr = arr .- arr[4]\n   \
    \ arr = arr .- arr[5]\n    arr = arr .- arr[6]\n    arr = arr .- arr[7]\n    arr\
    \ = arr .- arr[8]\n    arr = arr .- arr[9]\n    arr = arr .- arr[1]\n    \n  \
    \  arr = arr .- arr[1]\n    arr = arr .- arr[2]\n    arr = arr .- arr[3]\n   \
    \ arr = arr .- arr[4]\n    arr = arr .- arr[5]\n    arr = arr .- arr[6]\n    arr\
    \ = arr .- arr[7]\n    arr = arr .- arr[8]\n    arr = arr .- arr[9]\n    arr =\
    \ arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    arr = arr .- arr[2]\n    arr\
    \ = arr .- arr[3]\n    arr = arr .- arr[4]\n    arr = arr .- arr[5]\n    arr =\
    \ arr .- arr[6]\n    arr = arr .- arr[7]\n    arr = arr .- arr[8]\n    arr = arr\
    \ .- arr[9]\n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    arr =\
    \ arr .- arr[2]\n    arr = arr .- arr[3]\n    arr = arr .- arr[4]\n    arr = arr\
    \ .- arr[5]\n    arr = arr .- arr[6]\n    arr = arr .- arr[7]\n    arr = arr .-\
    \ arr[8]\n    arr = arr .- arr[9]\n    arr = arr .- arr[1]\n    \n    arr = arr\
    \ .- arr[1]\n    arr = arr .- arr[2]\n    arr = arr .- arr[3]\n    arr = arr .-\
    \ arr[4]\n    arr = arr .- arr[5]\n    arr = arr .- arr[6]\n    arr = arr .- arr[7]\n\
    \    arr = arr .- arr[8]\n    arr = arr .- arr[9]\n    arr = arr .- arr\nusing\
    \ Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1,\
    \ 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp4m0emw7q.jl:22\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4m0emw7q.jl:1\n\
    in expression starting at /tmp/tmp4m0emw7q.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    arr = sort(arr)\n    arr\
    \ = reverse(arr)\n    arr = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr\
    \ = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n  \
    \  arr = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n\
    \    arr = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr = arr .- arr .+\
    \ 1\n    arr = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr = arr .- arr\
    \ .+ 1\n    arr = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr = arr .-\
    \ arr .+ 1\n    arr = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr = arr\
    \ .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr =\
    \ arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr\
    \ = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n  \
    \  arr = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n\
    \    arr = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr = arr .- arr .+\
    \ 1\n    arr = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr = arr .- arr\
    \ .+ 1\n    arr = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr = arr .-\
    \ arr .+ 1\n    arr = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr = arr\
    \ .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr =\
    \ arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr\
    \ = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n  \
    \  arr = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n\
    \    arr = arr .- arr .+ 1\n    arr = arr .- arr .\nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: space before \".\" not allowed in \"arr .\" at\
    \ /tmp/tmps9yn3_9a.jl:80\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmps9yn3_9a.jl:80\n\
    in expression starting at /tmp/tmps9yn3_9a.jl:80\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = sort(arr)\n\
    \    arr = reverse(arr)\n    arr = arr |> Vector{String}\n    \n    arr = arr\
    \ |> filter(x->x>1 && x<9) |> Vector{String}\n    \n    arr = arr |> filter(x->x>1\
    \ && x<9) |> Vector{String}\n    \n    arr = arr |> filter(x->x>1 && x<9) |> Vector{String}\n\
    \    \n    arr = arr |> filter(x->x>1 && x<9) |> Vector{String}\n    \n    arr\
    \ = arr |> filter(x->x>1 && x<9) |> Vector{String}\n    \n    arr = arr |> filter(x->x>1\
    \ && x<9) |> Vector{String}\n    \n    arr = arr |> filter(x->x>1 && x<9) |> Vector{String}\n\
    \    \n    arr = arr |> filter(x->x>1 && x<9) |> Vector{String}\n    \n    arr\
    \ = arr |> filter(x->x>1 && x<9) |> Vector{String}\n    \n    arr = arr |> filter(x->x>1\
    \ && x<9) |> Vector{String}\n    \n    arr = arr |> filter(x->x>1 && x<9) |> Vector{String}\n\
    \    \n    arr = arr |> filter(x->x>1 && x<9) |> Vector{String}\n    \n    arr\
    \ = arr |> filter(x->x>1 && x<9) |> Vector{String}\n    \n    arr = arr |> filter(x->x>1\
    \ && x<9) |> Vector{String}\n    \n    arr = arr |> filter(x->x>1 && x<9) |> Vector{String}\n\
    \    \n    arr = arr |> filter(x->x>1 && x<9) |> Vector{String}\n    \n    arr\
    \ = arr |> filter(x->x>1 && x<9) |> Vector{String}\n    \n    arr = arr |> filter(x->x>1\
    \ && x<9) |> Vector{String}\n    \n    arr = arr |> filter(x->x>1 && x<9) |> Vector{String}\n\
    \    \n    arr = arr |> filter(x->x>1 && \nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfefncrje.jl:69\nin expression starting at\
    \ /tmp/tmpfefncrje.jl:69\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = sort(arr)\n\
    \    arr = reverse(arr)\n    arr = map(x -> name(x), arr)\n    \n    if isempty(arr)\n\
    \        return \"\"\n    end\n    \n    return arr\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3])\
    \ == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmp0iq5n2e1.jl:39\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  UndefVarError: name\
    \ not defined\n  Stacktrace:\n    [1] (::var\"#1#2\")(x::Int64)\n      @ Main\
    \ /tmp/tmp0iq5n2e1.jl:26\n    [2] iterate\n      @ ./generator.jl:47 [inlined]\n\
    \    [3] _collect(c::Vector{Int64}, itr::Base.Generator{Vector{Int64}, var\"#1#2\"\
    }, #unused#::Base.EltypeUnknown, isz::Base.HasShape{1})\n      @ Base ./array.jl:744\n\
    \    [4] collect_similar\n      @ ./array.jl:653 [inlined]\n    [5] map\n    \
    \  @ ./abstractarray.jl:2867 [inlined]\n    [6] by_length(arr::Vector{Int64})\n\
    \      @ Main /tmp/tmp0iq5n2e1.jl:26\n    [7] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmp0iq5n2e1.jl:39 [inlined]\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmp0iq5n2e1.jl:38\ntest set:\
    \ Error During Test at /tmp/tmp0iq5n2e1.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  MethodError: Cannot `convert`\
    \ an object of type String to an object of type Vector{String}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmp0iq5n2e1.jl:29\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0iq5n2e1.jl:40 [inlined]\n\
    \   "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0iq5n2e1.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    arr = sort(arr)\n    arr\
    \ = reverse(arr)\n    arr = arr |> Vector{String}\n    arr = arr |> filter(x->isdigit(x))\
    \ |> Vector{String}\n    arr = arr |> filter(x->x>1 && x<9) |> Vector{String}\n\
    \    arr\nend\n</cell>\n<code language=julia-1.5>\nby_length(arr)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of times a given number appears\
    \ in an array.\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5zi6dpvw.jl:30\nin expression starting at\
    \ /tmp/tmp5zi6dpvw.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = sort(arr)\n\
    \    arr = reverse(arr)\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpza3xiapk.jl:22\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpza3xiapk.jl:1\n\
    in expression starting at /tmp/tmpza3xiapk.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = sort(arr)\n\
    \    arr = reverse(arr)\n    \n    arr2 = copy(arr)\n    \n    for i in arr\n\
    \        if arr2[i] < 1 || arr2[i] > 9\n            arr2[i] = 0\n        end\n\
    \    end\n    \n    arr3 = copy(arr2)\n    \n    for i in arr2\n        if arr3[i]\
    \ < 1 || arr3[i] > 9\n            arr3[i] = \"One\"\n        end\n    end\n  \
    \  \n    arr4 = copy(arr3)\n    \n    for i in arr3\n        if arr4[i] < 1 ||\
    \ arr4[i] > 9\n            arr4[i] = \"Two\"\n        end\n    end\n    \n   \
    \ arr5 = copy(arr4)\n    \n    for i in arr4\n        if arr5[i] < 1 || arr5[i]\
    \ > 9\n            arr5[i] = \"Three\"\n        end\n    end\n    \n    arr6 =\
    \ copy(arr5)\n    \n    for i in arr5\n        if arr6[i] < 1 || arr6[i] > 9\n\
    \            arr6[i] = \"Four\"\n        end\n    end\n    \n    arr7 = copy(arr6)\n\
    \    \n    for i in arr6\n        if arr7[i] < 1 || arr7[i] > 9\n            arr7[i]\
    \ = \"Five\"\n        end\n    end\n    \n    arr8 = copy(arr7)\n    \n    for\
    \ i in arr7\n        if arr8[i] < 1 || arr8[i] > 9\n            arr8[i] = \"Six\"\
    \n        end\n    end\n    \n    arr9 = copy(arr8)\n    \n    for i in arr8\n\
    \        if arr9[i] < 1 || arr9[i] > 9\n            arr9[i] = \"Seven\"\n    \
    \    end\n    end\n    \n    arr10 = copy(arr9)\n    \n    for i in arr9\n   \
    \     if arr10[i] < 1 || arr10[i] > 9\n            arr10[i] = \"Eight\"\n    \
    \    end\n    end\n    \n    arr11 = copy(arr10)\n    \n    for i in arr10\n \
    \       if arr11[i] < 1 || arr11[i] > 9\n            arr11[i] = \"Nine\"\n   \
    \     end\n    end\n    \n    return arr11\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length(arr)\n</cell>\n<text>\nExercise 3\nWrite a function that returns the\
    \ number of times a given number appears in an array. For example,\n    \n   \
    \   arr = [1, 1, 2, 2, 3, 4, 5, 8, 2, 3]\n      \n      returns 3\n      \n  \
    \    arr = [1, -1, 55]\n      \n      returns 2\n      \n      arr = [1, -1, 55,\
    \ -1, 55]\n      \n      returns 3\n      \n      arr = [1, -1, 55, \nusing Test\n\
    \n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
    One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppdq1qodz.jl:109\nin expression starting at\
    \ /tmp/tmppdq1qodz.jl:109\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = sort(arr)\n\
    \    arr = reverse(arr)\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp12xes_8n.jl:22\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp12xes_8n.jl:1\n\
    in expression starting at /tmp/tmp12xes_8n.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = sort(arr)\n\
    \    arr = reverse(arr)\n    arr = map(x -> \"One\"[x], arr)\n    \n    if length(arr)\
    \ == 0\n        return Vector{String}()\n    end\n    \n    return arr\nend\n\
    </cell>\n<code language=julia-1.5>\nby_length(arr)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the number of times a given number appears\
    \ in an array. For example,\n    count_nums([1, 1, 1, 2, 2, 3, 4, 4, 4], 2) should\
    \ return 3.\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuxp_9wmb.jl:34\nin expression starting at\
    \ /tmp/tmpuxp_9wmb.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = sort(arr)\n\
    \    arr = reverse(arr)\n    arr = arr[1:end]\n    \n    arr = arr .+ [\"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    ]\n    \n    return arr\nend\n</cell>\n<code language=julia-1.5>\nby_length(arr)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes an array of integers\
    \ and returns the number of positive integers in the array.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3])\
    \ == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzmafifgh.jl:32\nin expression starting at\
    \ /tmp/tmpzmafifgh.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    arr = sort(arr)\n    arr\
    \ = reverse(arr)\n    arr = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr\
    \ = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n  \
    \  arr = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n\
    \    arr = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr = arr .- arr .+\
    \ 1\n    arr = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr = arr .- arr\
    \ .+ 1\n    arr = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr = arr .-\
    \ arr .+ 1\n    arr = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr = arr\
    \ .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr =\
    \ arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr\
    \ = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n  \
    \  arr = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n\
    \    arr = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr = arr .- arr .+\
    \ 1\n    arr = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr = arr .- arr\
    \ .+ 1\n    arr = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr = arr .-\
    \ arr .+ 1\n    arr = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr = arr\
    \ .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr =\
    \ arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr\
    \ = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n  \
    \  arr = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n\
    \    arr = arr .- arr .+ 1\n    arr = arr .- arr .\nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: space before \".\" not allowed in \"arr .\" at\
    \ /tmp/tmp4jb5acfq.jl:80\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4jb5acfq.jl:80\n\
    in expression starting at /tmp/tmp4jb5acfq.jl:80\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = sort(arr)\n\
    \    arr = reverse(arr)\n    arr = arr .- arr[1]\n    arr = arr .+ arr[1]\n  \
    \  arr = arr .+ arr[2]\n    arr = arr .+ arr[3]\n    arr = arr .+ arr[4]\n   \
    \ arr = arr .+ arr[5]\n    arr = arr .+ arr[6]\n    arr = arr .+ arr[7]\n    arr\
    \ = arr .+ arr[8]\n    arr = arr .+ arr[9]\n    \n    arr = arr .- arr[1]\n  \
    \  arr = arr .+ arr[1]\n    arr = arr .+ arr[2]\n    arr = arr .+ arr[3]\n   \
    \ arr = arr .+ arr[4]\n    arr = arr .+ arr[5]\n    arr = arr .+ arr[6]\n    arr\
    \ = arr .+ arr[7]\n    arr = arr .+ arr[8]\n    arr = arr .+ arr[9]\n    \n  \
    \  arr = arr .- arr[1]\n    arr = arr .+ arr[1]\n    arr = arr .+ arr[2]\n   \
    \ arr = arr .+ arr[3]\n    arr = arr .+ arr[4]\n    arr = arr .+ arr[5]\n    arr\
    \ = arr .+ arr[6]\n    arr = arr .+ arr[7]\n    arr = arr .+ arr[8]\n    arr =\
    \ arr .+ arr[9]\n    \n    arr = arr .- arr[1]\n    arr = arr .+ arr[1]\n    arr\
    \ = arr .+ arr[2]\n    arr = arr .+ arr[3]\n    arr = arr .+ arr[4]\n    arr =\
    \ arr .+ arr[5]\n    arr = arr .+ arr[6]\n    arr = arr .+ arr[7]\n    arr = arr\
    \ .+ arr[8]\n    arr = arr .+ arr[9]\n    \n    arr = arr .- arr[1]\n    arr =\
    \ arr .+ arr[1]\n    arr = arr .+ arr[2]\n    arr = arr .+ arr[3]\n    arr = arr\
    \ .+ arr[4]\n    arr = arr .+ arr[5]\n    arr = arr .+ arr[6]\n    arr = arr .+\
    \ arr[7]\n    arr = arr .+ arr[8]\n    arr = arr .+ arr[9]\n    \n    arr = arr\
    \ .- arr[1]\n    arr = arr .+ arr[1]\n    arr = arr .+ arr[2]\n    arr = arr .+\
    \ arr[3]\n    arr = arr .+ arr[4]\n    arr = arr .+ arr[5]\n    arr = arr .+ arr[6]\n\
    \    arr = arr .+ arr[7]\n    arr = arr .+ arr[8]\n    arr = arr .+ arr[\nusing\
    \ Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1,\
    \ 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqhl2ggvz.jl:1\nin expression starting at /tmp/tmpqhl2ggvz.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = sort(arr)\n\
    \    arr = reverse(arr)\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpam9o3n74.jl:22\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpam9o3n74.jl:1\n\
    in expression starting at /tmp/tmpam9o3n74.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    arr = sort(arr)\n    arr\
    \ = reverse(arr)\n    arr = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr\
    \ = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n  \
    \  arr = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n\
    \    arr = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr = arr .- arr .+\
    \ 1\n    arr = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr = arr .- arr\
    \ .+ 1\n    arr = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr = arr .-\
    \ arr .+ 1\n    arr = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr = arr\
    \ .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr =\
    \ arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr\
    \ = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n  \
    \  arr = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n\
    \    arr = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr = arr .- arr .+\
    \ 1\n    arr = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr = arr .- arr\
    \ .+ 1\n    arr = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr = arr .-\
    \ arr .+ 1\n    arr = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr = arr\
    \ .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr =\
    \ arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr\
    \ = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n  \
    \  arr = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n    arr = arr .- arr .+ 1\n\
    \    arr = arr .- arr .+ 1\n    arr = arr .- arr .\nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: space before \".\" not allowed in \"arr .\" at\
    \ /tmp/tmpgfturvhx.jl:80\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpgfturvhx.jl:80\n\
    in expression starting at /tmp/tmpgfturvhx.jl:80\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = sort(arr)\n\
    \    arr = reverse(arr)\n    \n    arr = arr .- 1 .+ 1\n    \n    arr = arr .-\
    \ \"One\" .- \"Two\" .- \"Three\" .- \"Four\" .- \"Five\" .- \"Six\" .- \"Seven\"\
    \ .- \"Eight\" .- \"Nine\"\n    \n    return arr\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length(arr)\n</cell>\n<text>\nExercise 3\nWrite a function that takes an array\
    \ of integers and returns the number of integers that are between 1 and 9 inclusive.\n\
    using Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpeoui_8yb.jl:33\nin expression starting at\
    \ /tmp/tmpeoui_8yb.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = sort(arr)\n\
    \    arr = reverse(arr)\n    \n    arr = arr .+ 1\n    \n    arr = arr .- 1\n\
    \    \n    arr = arr .+ 1\n    \n    arr = arr .- 1\n    \n    arr = arr .+ 1\n\
    \    \n    arr = arr .- 1\n    \n    arr = arr .+ 1\n    \n    arr = arr .- 1\n\
    \    \n    arr = arr .+ 1\n    \n    arr = arr .- 1\n    \n    arr = arr .+ 1\n\
    \    \n    arr = arr .- 1\n    \n    arr = arr .+ 1\n    \n    arr = arr .- 1\n\
    \    \n    arr = arr .+ 1\n    \n    arr = arr .- 1\n    \n    arr = arr .+ 1\n\
    \    \n    arr = arr .- 1\n    \n    arr = arr .+ 1\n    \n    arr = arr .- 1\n\
    \    \n    arr = arr .+ 1\n    \n    arr = arr .- 1\n    \n    arr = arr .+ 1\n\
    \    \n    arr = arr .- 1\n    \n    arr = arr .+ 1\n    \n    arr = arr .- 1\n\
    \    \n    arr = arr .+ 1\n    \n    arr = arr .- 1\n    \n    arr = arr .+ 1\n\
    \    \n    arr = arr .- 1\n    \n    arr = arr .+ 1\n    \n    arr = arr .- 1\n\
    \    \n    arr = arr .+ 1\n    \n    arr = arr .- 1\n    \n    arr = arr .+ 1\n\
    \    \n    arr = arr .- 1\n    \n    arr = arr .+ 1\n    \n    arr = arr .- 1\n\
    \    \n    arr = arr .+ 1\n    \n    arr = arr .- 1\n    \n    arr = arr .+ 1\n\
    \    \n    arr = arr .- 1\n    \n    arr = arr .+ 1\n    \n    arr = arr .- 1\n\
    \    \n    arr = arr .+ 1\n    \n    arr = arr .- 1\n    \n    arr = arr .+ 1\n\
    \    \n    arr = arr .- 1\n    \n    arr = arr .+ 1\n    \n    arr = arr .- 1\n\
    \    \n    arr = arr .+ 1\n    \n    arr = arr .- 1\n    \n    arr = arr .+ 1\n\
    \    \n    arr = arr .- 1\n    \n    arr = arr .+ 1\n    \n    arr = arr .- 1\n\
    \    \n    arr = arr .+ 1\n    \n    arr = arr .- 1\n    \n    arr = arr .+ 1\n\
    \    \n    arr = arr .- 1\n    \n    arr = arr .+ 1\n    \n    arr = arr .- 1\n\
    \    \n    arr = \nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t\
    @test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp9wmrkll9.jl:22\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9wmrkll9.jl:1\n\
    in expression starting at /tmp/tmp9wmrkll9.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = sort(arr)\n\
    \    arr = reverse(arr)\n    arr = arr .- arr[1]\n    arr = arr .+ arr[1]\n  \
    \  arr = arr .+ arr[2]\n    arr = arr .+ arr[3]\n    arr = arr .+ arr[4]\n   \
    \ arr = arr .+ arr[5]\n    arr = arr .+ arr[6]\n    arr = arr .+ arr[7]\n    arr\
    \ = arr .+ arr[8]\n    arr = arr .+ arr[9]\n    arr = arr .+ arr[1]\n    \n  \
    \  arr = arr .- arr[1]\n    arr = arr .- arr[2]\n    arr = arr .- arr[3]\n   \
    \ arr = arr .- arr[4]\n    arr = arr .- arr[5]\n    arr = arr .- arr[6]\n    arr\
    \ = arr .- arr[7]\n    arr = arr .- arr[8]\n    arr = arr .- arr[9]\n    arr =\
    \ arr .- arr[1]\n    \n    arr = arr .+ arr[1]\n    arr = arr .+ arr[2]\n    arr\
    \ = arr .+ arr[3]\n    arr = arr .+ arr[4]\n    arr = arr .+ arr[5]\n    arr =\
    \ arr .+ arr[6]\n    arr = arr .+ arr[7]\n    arr = arr .+ arr[8]\n    arr = arr\
    \ .+ arr[9]\n    arr = arr .+ arr[1]\n    \n    arr = arr .- arr[1]\n    arr =\
    \ arr .- arr[2]\n    arr = arr .- arr[3]\n    arr = arr .- arr[4]\n    arr = arr\
    \ .- arr[5]\n    arr = arr .- arr[6]\n    arr = arr .- arr[7]\n    arr = arr .-\
    \ arr[8]\n    arr = arr .- arr[9]\n    arr = arr .- arr[1]\n    \n    arr = arr\
    \ .+ arr[1]\n    arr = arr .+ arr[2]\n    arr = arr .+ arr[3]\n    arr = arr .+\
    \ arr[4]\n    arr = arr .+ arr[5]\n    arr = arr .+ arr[6]\n    arr = arr .+ arr[7]\n\
    \    arr = arr .+ arr[8]\n    arr = arr .+ arr[9]\n    arr = arr .+ arr[1]\n \
    \   \n    arr = arr .- arr[1]\n    arr = arr .- arr[2]\n    arr = arr .- arr[3]\n\
    \    arr = arr .- arr[4]\n    arr = arr .- arr[5]\n    arr = arr .- arr[6]\n \
    \   arr = arr .- arr[7]\n    arr = arr .- arr[8]\n    arr = arr .- arr[\nusing\
    \ Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1,\
    \ 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpeqthzmsj.jl:1\nin expression starting at /tmp/tmpeqthzmsj.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = sort(arr)\n\
    \    arr = reverse(arr)\n    arr = arr .- arr[1]\n    arr = arr .+ arr[1]\n  \
    \  arr = arr .- arr[1]\n    arr = arr .+ arr[1]\n    arr = arr .- arr[1]\n   \
    \ arr = arr .+ arr[1]\n    arr = arr .- arr[1]\n    arr = arr .+ arr[1]\n    arr\
    \ = arr .- arr[1]\n    arr = arr .+ arr[1]\n    arr = arr .- arr[1]\n    arr =\
    \ arr .+ arr[1]\n    arr = arr .- arr[1]\n    arr = arr .+ arr[1]\n    arr = arr\
    \ .- arr[1]\n    arr = arr .+ arr[1]\n    arr = arr .- arr[1]\n    arr = arr .+\
    \ arr[1]\n    arr = arr .- arr[1]\n    arr = arr .+ arr[1]\n    arr = arr .- arr[1]\n\
    \    arr = arr .+ arr[1]\n    arr = arr .- arr[1]\n    arr = arr .+ arr[1]\n \
    \   arr = arr .- arr[1]\n    arr = arr .+ arr[1]\n    arr = arr .- arr[1]\n  \
    \  arr = arr .+ arr[1]\n    arr = arr .- arr[1]\n    arr = arr .+ arr[1]\n   \
    \ arr = arr .- arr[1]\n    arr = arr .+ arr[1]\n    arr = arr .- arr[1]\n    arr\
    \ = arr .+ arr[1]\n    arr = arr .- arr[1]\n    arr = arr .+ arr[1]\n    arr =\
    \ arr .- arr[1]\n    arr = arr .+ arr[1]\n    arr = arr .- arr[1]\n    arr = arr\
    \ .+ arr[1]\n    arr = arr .- arr[1]\n    arr = arr .+ arr[1]\n    arr = arr .-\
    \ arr[1]\n    arr = arr .+ arr[1]\n    arr = arr .- arr[1]\n    arr = arr .+ arr[1]\n\
    \    arr = arr .- arr[1]\n    arr = arr .+ arr[1]\n    arr = arr .- arr[1]\n \
    \   arr = arr .+ arr[1]\n    arr = arr .- arr[1]\n    arr = arr .+ arr[1]\n  \
    \  arr = arr .- arr[1]\n    arr = arr .+ arr[1]\n    arr = arr .- arr[1]\n   \
    \ arr = arr .+ arr[1]\n    arr = arr .- arr[1]\n    arr = arr .+ arr[1]\n    arr\
    \ = arr .- arr[1]\n    arr = arr .+ arr[1]\n    arr = arr .- arr[1]\n    arr =\
    \ arr .+ arr[1]\n    arr = arr .\nusing Test\n\n@testset begin\n\ncandidate =\
    \ by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: space before \".\" not allowed in \"arr .\" at\
    \ /tmp/tmpghzovtr5.jl:88\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpghzovtr5.jl:88\n\
    in expression starting at /tmp/tmpghzovtr5.jl:88\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = sort(arr)\n\
    \    arr = reverse(arr)\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpl91ym_um.jl:22\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpl91ym_um.jl:1\n\
    in expression starting at /tmp/tmpl91ym_um.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = sort(arr)\n\
    \    arr = reverse(arr)\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpzmd7w_b1.jl:22\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpzmd7w_b1.jl:1\n\
    in expression starting at /tmp/tmpzmd7w_b1.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr2 = sort(arr)\n\
    \    arr3 = reverse(arr2)\n    \n    arr4 = arr3\n    \n    arr5 = arr4\n    \n\
    \    arr6 = arr5\n    \n    arr7 = arr6\n    \n    arr8 = arr7\n    \n    arr9\
    \ = arr8\n    \n    arr10 = arr9\n    \n    arr11 = arr10\n    \n    arr12 = arr11\n\
    \    \n    arr13 = arr12\n    \n    arr14 = arr13\n    \n    arr15 = arr14\n \
    \   \n    arr16 = arr15\n    \n    arr17 = arr16\n    \n    arr18 = arr17\n  \
    \  \n    arr19 = arr18\n    \n    arr20 = arr19\n    \n    arr21 = arr20\n   \
    \ \n    arr22 = arr21\n    \n    arr23 = arr22\n    \n    arr24 = arr23\n    \n\
    \    arr25 = arr24\n    \n    arr26 = arr25\n    \n    arr27 = arr26\n    \n \
    \   arr28 = arr27\n    \n    arr29 = arr28\n    \n    arr30 = arr29\n    \n  \
    \  arr31 = arr30\n    \n    arr32 = arr31\n    \n    arr33 = arr32\n    \n   \
    \ arr34 = arr33\n    \n    arr35 = arr34\n    \n    arr36 = arr35\n    \n    arr37\
    \ = arr36\n    \n    arr38 = arr37\n    \n    arr39 = arr38\n    \n    arr40 =\
    \ arr39\n    \n    arr41 = arr40\n    \n    arr42 = arr41\n    \n    arr43 = arr42\n\
    \    \n    arr44 = arr43\n    \n    arr45 = arr44\n    \n    arr46 = arr45\n \
    \   \n    arr47 = arr46\n    \n    arr48 = arr47\n    \n    arr49 = arr48\n  \
    \  \n    arr50 = arr49\n    \n    arr51 = arr50\n    \n    arr52 = arr51\n   \
    \ \n    arr53 = arr52\n    \n    arr54 = arr53\n    \n    arr55 = arr54\n    \n\
    \    arr56 = arr55\n    \n    arr57 = arr56\n    \n    arr58 = arr57\n    \n \
    \   arr59 = arr58\n    \n\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpvs_lunx6.jl:22\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpvs_lunx6.jl:1\n\
    in expression starting at /tmp/tmpvs_lunx6.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    arr = sort(arr)\n    arr\
    \ = reverse(arr)\n    arr = arr[2:end]\n    arr = arr.reverse\n    arr = arr[2:end]\n\
    \    arr = arr.reverse\n    arr = arr[2:end]\n    arr = arr.reverse\n    arr =\
    \ arr[2:end]\n    arr = arr.reverse\n    arr = arr[2:end]\n    arr = arr.reverse\n\
    \    arr = arr[2:end]\n    arr = arr.reverse\n    arr = arr[2:end]\n    arr =\
    \ arr.reverse\n    arr = arr[2:end]\n    arr = arr.reverse\n    arr = arr[2:end]\n\
    \    arr = arr.reverse\n    arr = arr[2:end]\n    arr = arr.reverse\n    arr =\
    \ arr[2:end]\n    arr = arr.reverse\n    arr = arr[2:end]\n    arr = arr.reverse\n\
    \    arr = arr[2:end]\n    arr = arr.reverse\n    arr = arr[2:end]\n    arr =\
    \ arr.reverse\n    arr = arr[2:end]\n    arr = arr.reverse\n    arr = arr[2:end]\n\
    \    arr = arr.reverse\n    arr = arr[2:end]\n    arr = arr.reverse\n    arr =\
    \ arr[2:end]\n    arr = arr.reverse\n    arr = arr[2:end]\n    arr = arr.reverse\n\
    \    arr = arr[2:end]\n    arr = arr.reverse\n    arr = arr[2:end]\n    arr =\
    \ arr.reverse\n    arr = arr[2:end]\n    arr = arr.reverse\n    arr = arr[2:end]\n\
    \    arr = arr.reverse\n    arr = arr[2:end]\n    arr = arr.reverse\n    arr =\
    \ arr[2:end]\n    arr = arr.reverse\n    arr = arr[2:end]\n    arr = arr.reverse\n\
    \    arr = arr[2:end]\n    arr = arr.reverse\n    arr = arr[2:end]\n    arr =\
    \ arr.reverse\n    arr = arr[2:end]\n    arr = arr.reverse\n    arr = arr[2:end]\n\
    \    arr = arr.reverse\n    arr = arr[2:end]\n    arr = arr.reverse\n    arr =\
    \ arr[2:end]\n    arr = arr.reverse\n    arr = arr[2:end]\n    arr = arr.reverse\n\
    \    arr = arr[2:end]\n    arr = arr.reverse\n    arr = arr[2:end]\n    arr =\
    \ arr.reverse\n    arr = arr[2:end]\n    arr = arr.reverse\n    arr = arr[2:end]\n\
    \    arr = arr.reverse\n    arr = arr[2:end]\n    arr = arr.reverse\n    arr =\
    \ arr[2:end]\n    arr = arr.reverse\n    arr = arr[2:end]\n    arr = arr.reverse\n\
    \    arr = arr[2:end]\n    arr = arr.reverse\n    arr = arr[2:end]\n    arr =\
    \ arr.reverse\n    arr = arr[2:end]\n    arr = arr.reverse\n    arr = arr[2:end]\n\
    \    arr = arr.reverse\n    arr = arr[2:end]\n    arr = arr.reverse\n    arr =\
    \ arr[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t\
    @test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmphiyzsbxg.jl:22\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphiyzsbxg.jl:1\n\
    in expression starting at /tmp/tmphiyzsbxg.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = sort(arr)\n\
    \    arr = reverse(arr)\n    arr = arr .- arr[1]\n    arr = arr .- arr[2]\n  \
    \  arr = arr .- arr[3]\n    arr = arr .- arr[4]\n    arr = arr .- arr[5]\n   \
    \ arr = arr .- arr[6]\n    arr = arr .- arr[7]\n    arr = arr .- arr[8]\n    arr\
    \ = arr .- arr[9]\n    arr = arr .- arr[0]\n    arr = arr .- arr[1]\n    arr =\
    \ arr .- arr[2]\n    arr = arr .- arr[3]\n    arr = arr .- arr[4]\n    arr = arr\
    \ .- arr[5]\n    arr = arr .- arr[6]\n    arr = arr .- arr[7]\n    arr = arr .-\
    \ arr[8]\n    arr = arr .- arr[9]\n    arr = arr .- arr[0]\n    arr = arr .- arr[1]\n\
    \    arr = arr .- arr[2]\n    arr = arr .- arr[3]\n    arr = arr .- arr[4]\n \
    \   arr = arr .- arr[5]\n    arr = arr .- arr[6]\n    arr = arr .- arr[7]\n  \
    \  arr = arr .- arr[8]\n    arr = arr .- arr[9]\n    arr = arr .- arr[0]\n   \
    \ arr = arr .- arr[1]\n    arr = arr .- arr[2]\n    arr = arr .- arr[3]\n    arr\
    \ = arr .- arr[4]\n    arr = arr .- arr[5]\n    arr = arr .- arr[6]\n    arr =\
    \ arr .- arr[7]\n    arr = arr .- arr[8]\n    arr = arr .- arr[9]\n    arr = arr\
    \ .- arr[0]\n    arr = arr .- arr[1]\n    arr = arr .- arr[2]\n    arr = arr .-\
    \ arr[3]\n    arr = arr .- arr[4]\n    arr = arr .- arr[5]\n    arr = arr .- arr[6]\n\
    \    arr = arr .- arr[7]\n    arr = arr .- arr[8]\n    arr = arr .- arr[9]\n \
    \   arr = arr .- arr[0]\n    arr = arr .- arr[1]\n    arr = arr .- arr[2]\n  \
    \  arr = arr .- arr[3]\n    arr = arr .- arr[4]\n    arr = arr .- arr[5]\n   \
    \ arr = arr .- arr[6]\n    arr = arr .- arr[7]\n    arr = arr .- arr[8]\n    arr\
    \ = arr .- arr[9]\n    arr = arr .- arr[0]\n    arr = arr .- arr[1]\n\nusing Test\n\
    \n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
    One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp6vn3gzsb.jl:22\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6vn3gzsb.jl:1\n\
    in expression starting at /tmp/tmp6vn3gzsb.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr2 = sort(arr)\n\
    \    arr3 = reverse(arr2)\n    \n    arr4 = arr3\n    \n    arr5 = arr4\n    \n\
    \    arr6 = arr5\n    \n    arr7 = arr6\n    \n    arr8 = arr7\n    \n    arr9\
    \ = arr8\n    \n    arr10 = arr9\n    \n    arr11 = arr10\n    \n    arr12 = arr11\n\
    \    \n    arr13 = arr12\n    \n    arr14 = arr13\n    \n    arr15 = arr14\n \
    \   \n    arr16 = arr15\n    \n    arr17 = arr16\n    \n    arr18 = arr17\n  \
    \  \n    arr19 = arr18\n    \n    arr20 = arr19\n    \n    arr21 = arr20\n   \
    \ \n    arr22 = arr21\n    \n    arr23 = arr22\n    \n    arr24 = arr23\n    \n\
    \    arr25 = arr24\n    \n    arr26 = arr25\n    \n    arr27 = arr26\n    \n \
    \   arr28 = arr27\n    \n    arr29 = arr28\n    \n    arr30 = arr29\n    \n  \
    \  arr31 = arr30\n    \n    arr32 = arr31\n    \n    arr33 = arr32\n    \n   \
    \ arr34 = arr33\n    \n    arr35 = arr34\n    \n    arr36 = arr35\n    \n    arr37\
    \ = arr36\n    \n    arr38 = arr37\n    \n    arr39 = arr38\n    \n    arr40 =\
    \ arr39\n    \n    arr41 = arr40\n    \n    arr42 = arr41\n    \n    arr43 = arr42\n\
    \    \n    arr44 = arr43\n    \n    arr45 = arr44\n    \n    arr46 = arr45\n \
    \   \n    arr47 = arr46\n    \n    arr48 = arr47\n    \n    arr49 = arr48\n  \
    \  \n    arr50 = arr49\n    \n    arr51 = arr50\n    \n    arr52 = arr51\n   \
    \ \n    arr53 = arr52\n    \n    arr54 = arr53\n    \n    arr55 = arr54\n    \n\
    \    arr56 = arr55\n    \n    arr57 = arr56\n    \n    arr58 = arr57\n    \n \
    \   arr59 = arr58\n    \n\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpqiqqnhgv.jl:22\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpqiqqnhgv.jl:1\n\
    in expression starting at /tmp/tmpqiqqnhgv.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    arr = sort(arr)\n    arr\
    \ = reverse(arr)\n    arr = arr .- arr[1]\n    arr = arr .- arr[2]\n    arr =\
    \ arr .- arr[3]\n    arr = arr .- arr[4]\n    arr = arr .- arr[5]\n    arr = arr\
    \ .- arr[6]\n    arr = arr .- arr[7]\n    arr = arr .- arr[8]\n    arr = arr .-\
    \ arr[9]\n    arr = arr .- arr[1]\n    arr = arr .- arr[2]\n    arr = arr .- arr[3]\n\
    \    arr = arr .- arr[4]\n    arr = arr .- arr[5]\n    arr = arr .- arr[6]\n \
    \   arr = arr .- arr[7]\n    arr = arr .- arr[8]\n    arr = arr .- arr[9]\n  \
    \  arr = arr .- arr[1]\n    arr = arr .- arr[2]\n    arr = arr .- arr[3]\n   \
    \ arr = arr .- arr[4]\n    arr = arr .- arr[5]\n    arr = arr .- arr[6]\n    arr\
    \ = arr .- arr[7]\n    arr = arr .- arr[8]\n    arr = arr .- arr[9]\n    arr =\
    \ arr .- arr[1]\n    arr = arr .- arr[2]\n    arr = arr .- arr[3]\n    arr = arr\
    \ .- arr[4]\n    arr = arr .- arr[5]\n    arr = arr .- arr[6]\n    arr = arr .-\
    \ arr[7]\n    arr = arr .- arr[8]\n    arr = arr .- arr[9]\n    arr = arr .- arr[1]\n\
    \    arr = arr .- arr[2]\n    arr = arr .- arr[3]\n    arr = arr .- arr[4]\n \
    \   arr = arr .- arr[5]\n    arr = arr .- arr[6]\n    arr = arr .- arr[7]\n  \
    \  arr = arr .- arr[8]\n    arr = arr .- arr[9]\n    arr = arr .- arr[1]\n   \
    \ arr = arr .- arr[2]\n    arr = arr .- arr[3]\n    arr = arr .- arr[4]\n    arr\
    \ = arr .- arr[5]\n    arr = arr .- arr[6]\n    arr = arr .- arr[7]\n    arr =\
    \ arr .- arr[8]\n    arr = arr .- arr[9]\n    arr = arr .- arr[1]\n    arr = arr\
    \ .- arr[2]\n    arr = arr .- arr[3]\n    arr = arr .- arr[4]\n    arr = arr .-\
    \ arr[5]\n    arr = arr .- arr[6]\n    arr = arr .- arr[7]\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3])\
    \ == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpluv22fm3.jl:22\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpluv22fm3.jl:1\n\
    in expression starting at /tmp/tmpluv22fm3.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = sort(arr)\n\
    \    arr = reverse(arr)\n    \n    arr = arr .+ 1\n    \n    arr = arr .- 10\n\
    \    \n    arr = arr .+ 10\n    \n    arr = arr .- 100\n    \n    arr = arr .+\
    \ 100\n    \n    arr = arr .- 1000\n    \n    arr = arr .+ 1000\n    \n    arr\
    \ = arr .- 10000\n    \n    arr = arr .+ 10000\n    \n    arr = arr .- 100000\n\
    \    \n    arr = arr .+ 100000\n    \n    arr = arr .- 1000000\n    \n    arr\
    \ = arr .+ 1000000\n    \n    arr = arr .- 10000000\n    \n    arr = arr .+ 10000000\n\
    \    \n    arr = arr .- 100000000\n    \n    arr = arr .+ 100000000\n    \n  \
    \  arr = arr .- 1000000000\n    \n    arr = arr .+ 1000000000\n    \n    arr =\
    \ arr .- 10000000000\n    \n    arr = arr .+ 10000000000\n    \n    arr = arr\
    \ .- 100000000000\n    \n    arr = arr .+ 100000000000\n    \n    arr = arr .-\
    \ 1000000000000\n    \n    arr = arr .+ 1000000000000\n    \n    arr = arr .-\
    \ 10000000000000\n    \n    arr = arr .+ 10000000000000\n    \n    arr = arr .-\
    \ 100000000000000\n    \n    arr = arr .+ 100000000000000\n    \n    arr = arr\
    \ .- 1000000000000000\n    \n    arr = arr .+ 1000000000000000\n    \n    arr\
    \ = arr .- 10000000000000000\n    \n    arr = arr .+ 10000000000000000\n    \n\
    \    arr = arr .- 100000000000000000\n    \n    arr = arr .+ 100000000000000000\n\
    \    \n    arr = arr .- 1000000000000000000\n    \n    arr = arr .+ 1000000000000000000\n\
    \    \n    arr = arr .- 10000000000000000000\n    \n    arr = arr .+ 10000000000000000000\n\
    \    \n    arr = arr .- 100000000000000000000\n    \n    arr = arr .+ 100000000000000000000\n\
    \    \n    arr = arr .- 1000000000000000000000\n    \n    arr = arr .+ 1000000000000000000000\n\
    \    \n    arr = arr .- 10000000000000000000000\n    \n    arr = arr .+ 10000000000000000000000\n\
    \    \n    arr = arr .- 100000000000000000000000\n    \n    arr = arr .+ 100000000000000000000000\n\
    \    \n    arr = arr .- 1000000000000000000000000\n    \n    arr = arr .+ 1000000000000000000\n\
    using Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmphvonmuim.jl:22\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphvonmuim.jl:1\n\
    in expression starting at /tmp/tmphvonmuim.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = sort(arr)\n\
    \    arr = reverse(arr)\n    \n    arr = arr .- arr .% 10\n    \n    arr = arr\
    \ .+ 10\n    \n    arr = arr .- arr .% 10\n    \n    arr = arr .+ 10\n    \n \
    \   arr = arr .- arr .% 10\n    \n    arr = arr .+ 10\n    \n    arr = arr .-\
    \ arr .% 10\n    \n    arr = arr .+ 10\n    \n    arr = arr .- arr .% 10\n   \
    \ \n    arr = arr .+ 10\n    \n    arr = arr .- arr .% 10\n    \n    arr = arr\
    \ .+ 10\n    \n    arr = arr .- arr .% 10\n    \n    arr = arr .+ 10\n    \n \
    \   arr = arr .- arr .% 10\n    \n    arr = arr .+ 10\n    \n    arr = arr .-\
    \ arr .% 10\n    \n    arr = arr .+ 10\n    \n    arr = arr .- arr .% 10\n   \
    \ \n    arr = arr .+ 10\n    \n    arr = arr .- arr .% 10\n    \n    arr = arr\
    \ .+ 10\n    \n    arr = arr .- arr .% 10\n    \n    arr = arr .+ 10\n    \n \
    \   arr = arr .- arr .% 10\n    \n    arr = arr .+ 10\n    \n    arr = arr .-\
    \ arr .% 10\n    \n    arr = arr .+ 10\n    \n    arr = arr .- arr .% 10\n   \
    \ \n    arr = arr .+ 10\n    \n    arr = arr .- arr .% 10\n    \n    arr = arr\
    \ .+ 10\n    \n    arr = arr .- arr .% 10\n    \n    arr = arr .+ 10\n    \n \
    \   arr = arr .- arr .% 10\n    \n    arr = arr .+ 10\n    \n    arr = arr .-\
    \ arr .% 10\n    \n    arr = arr .+ 10\n    \n    arr = arr .- arr .% 10\n   \
    \ \n    arr = arr .+ 10\n    \n    arr = arr .- arr .% 10\n    \n    arr = arr\
    \ .+ 10\n    \n    arr = arr .- arr .% 10\n    \n    arr = arr .+ 10\n    \n \
    \   arr = arr .- arr .% 10\n    \n    arr = arr .+ 10\n    \n    arr = arr .-\
    \ arr .% 10\n    \n    arr = arr\nusing Test\n\n@testset begin\n\ncandidate =\
    \ by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpw8zmn88f.jl:22\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpw8zmn88f.jl:1\n\
    in expression starting at /tmp/tmpw8zmn88f.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    arr = sort(arr)\n    arr\
    \ = reverse(arr)\n    arr = arr .- arr[1]\n    arr = arr .- arr[2]\n    arr =\
    \ arr .- arr[3]\n    arr = arr .- arr[4]\n    arr = arr .- arr[5]\n    arr = arr\
    \ .- arr[6]\n    arr = arr .- arr[7]\n    arr = arr .- arr[8]\n    arr = arr .-\
    \ arr[9]\n    arr = arr .- arr[0]\n    arr = arr .- arr[1]\n    arr = arr .- arr[2]\n\
    \    arr = arr .- arr[3]\n    arr = arr .- arr[4]\n    arr = arr .- arr[5]\n \
    \   arr = arr .- arr[6]\n    arr = arr .- arr[7]\n    arr = arr .- arr[8]\n  \
    \  arr = arr .- arr[9]\n    arr = arr .- arr[0]\n    arr = arr .- arr[1]\n   \
    \ arr = arr .- arr[2]\n    arr = arr .- arr[3]\n    arr = arr .- arr[4]\n    arr\
    \ = arr .- arr[5]\n    arr = arr .- arr[6]\n    arr = arr .- arr[7]\n    arr =\
    \ arr .- arr[8]\n    arr = arr .- arr[9]\n    arr = arr .- arr[0]\n    arr = arr\
    \ .- arr[1]\n    arr = arr .- arr[2]\n    arr = arr .- arr[3]\n    arr = arr .-\
    \ arr[4]\n    arr = arr .- arr[5]\n    arr = arr .- arr[6]\n    arr = arr .- arr[7]\n\
    \    arr = arr .- arr[8]\n    arr = arr .- arr[9]\n    arr = arr .- arr[0]\n \
    \   arr = arr .- arr[1]\n    arr = arr .- arr[2]\n    arr = arr .- arr[3]\n  \
    \  arr = arr .- arr[4]\n    arr = arr .- arr[5]\n    arr = arr .- arr[6]\n   \
    \ arr = arr .- arr[7]\n    arr = arr .- arr[8]\n    arr = arr .- arr[9]\n    arr\
    \ = arr .- arr[0]\n    arr = arr .- arr[1]\n    arr = arr .- arr[2]\n    arr =\
    \ arr .- arr[3]\n    arr = arr .- arr[4]\n    arr = arr .- arr[5]\n    arr = arr\
    \ .- arr[6]\n    arr = arr .- arr[7]\n    arr = arr .- arr[8]\n    arr = arr .-\
    \ arr[9]\n    arr = arr .- arr[0]\n    arr = arr .- arr[1]\n    arr = \nusing\
    \ Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1,\
    \ 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp6ctqfdwq.jl:22\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6ctqfdwq.jl:1\n\
    in expression starting at /tmp/tmp6ctqfdwq.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = sort(arr)\n\
    \    arr = reverse(arr)\n    arr = arr[2:end]\n    arr = arr.reverse\n    arr\
    \ = arr[2:end]\n    arr = arr.reverse\n    arr = arr[2:end]\n    arr = arr.reverse\n\
    \    arr = arr[2:end]\n    arr = arr.reverse\n    arr = arr[2:end]\n    arr =\
    \ arr.reverse\n    arr = arr[2:end]\n    arr = arr.reverse\n    arr = arr[2:end]\n\
    \    arr = arr.reverse\n    arr = arr[2:end]\n    arr = arr.reverse\n    arr =\
    \ arr[2:end]\n    arr = arr.reverse\n    arr = arr[2:end]\n    arr = arr.reverse\n\
    \    arr = arr[2:end]\n    arr = arr.reverse\n    arr = arr[2:end]\n    arr =\
    \ arr.reverse\n    arr = arr[2:end]\n    arr = arr.reverse\n    arr = arr[2:end]\n\
    \    arr = arr.reverse\n    arr = arr[2:end]\n    arr = arr.reverse\n    arr =\
    \ arr[2:end]\n    arr = arr.reverse\n    arr = arr[2:end]\n    arr = arr.reverse\n\
    \    arr = arr[2:end]\n    arr = arr.reverse\n    arr = arr[2:end]\n    arr =\
    \ arr.reverse\n    arr = arr[2:end]\n    arr = arr.reverse\n    arr = arr[2:end]\n\
    \    arr = arr.reverse\n    arr = arr[2:end]\n    arr = arr.reverse\n    arr =\
    \ arr[2:end]\n    arr = arr.reverse\n    arr = arr[2:end]\n    arr = arr.reverse\n\
    \    arr = arr[2:end]\n    arr = arr.reverse\n    arr = arr[2:end]\n    arr =\
    \ arr.reverse\n    arr = arr[2:end]\n    arr = arr.reverse\n    arr = arr[2:end]\n\
    \    arr = arr.reverse\n    arr = arr[2:end]\n    arr = arr.reverse\n    arr =\
    \ arr[2:end]\n    arr = arr.reverse\n    arr = arr[2:end]\n    arr = arr.reverse\n\
    \    arr = arr[2:end]\n    arr = arr.reverse\n    arr = arr[2:end]\n    arr =\
    \ arr.reverse\n    arr = arr[2:end]\n    arr = arr.reverse\n    arr = arr[2:end]\n\
    \    arr = arr.reverse\n    arr = arr[2:end]\n    arr = arr.reverse\n    arr =\
    \ arr[2:end]\n    arr = arr.reverse\n    arr = arr[2:end]\n    arr = arr.reverse\n\
    \    arr = arr[2:end]\n    arr = arr.reverse\n    arr = arr[2:end]\n    arr =\
    \ arr.reverse\n    arr = arr[2:end]\n    arr = arr.reverse\n    arr = arr[2:end]\n\
    \    arr = arr.reverse\n    arr = arr[2:end]\n    arr = arr.reverse\n    arr =\
    \ arr[2:end]\n    arr = arr.reverse\n    arr = arr[2:end]\n    arr = arr.reverse\n\
    \    arr = arr[2:end]\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp8sfv6w_6.jl:22\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8sfv6w_6.jl:1\n\
    in expression starting at /tmp/tmp8sfv6w_6.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    arr = sort(arr)\n    arr\
    \ = reverse(arr)\n    arr = arr .- arr[1]\n    arr = arr .- arr[2]\n    arr =\
    \ arr .- arr[3]\n    arr = arr .- arr[4]\n    arr = arr .- arr[5]\n    arr = arr\
    \ .- arr[6]\n    arr = arr .- arr[7]\n    arr = arr .- arr[8]\n    arr = arr .-\
    \ arr[9]\n    arr = arr .- arr[0]\n    arr = arr .- arr[1]\n    arr = arr .- arr[2]\n\
    \    arr = arr .- arr[3]\n    arr = arr .- arr[4]\n    arr = arr .- arr[5]\n \
    \   arr = arr .- arr[6]\n    arr = arr .- arr[7]\n    arr = arr .- arr[8]\n  \
    \  arr = arr .- arr[9]\n    arr = arr .- arr[0]\n    arr = arr .- arr[1]\n   \
    \ arr = arr .- arr[2]\n    arr = arr .- arr[3]\n    arr = arr .- arr[4]\n    arr\
    \ = arr .- arr[5]\n    arr = arr .- arr[6]\n    arr = arr .- arr[7]\n    arr =\
    \ arr .- arr[8]\n    arr = arr .- arr[9]\n    arr = arr .- arr[0]\n    arr = arr\
    \ .- arr[1]\n    arr = arr .- arr[2]\n    arr = arr .- arr[3]\n    arr = arr .-\
    \ arr[4]\n    arr = arr .- arr[5]\n    arr = arr .- arr[6]\n    arr = arr .- arr[7]\n\
    \    arr = arr .- arr[8]\n    arr = arr .- arr[9]\n    arr = arr .- arr[0]\n \
    \   arr = arr .- arr[1]\n    arr = arr .- arr[2]\n    arr = arr .- arr[3]\n  \
    \  arr = arr .- arr[4]\n    arr = arr .- arr[5]\n    arr = arr .- arr[6]\n   \
    \ arr = arr .- arr[7]\n    arr = arr .- arr[8]\n    arr = arr .- arr[9]\n    arr\
    \ = arr .- arr[0]\n    arr = arr .- arr[1]\n    arr = arr .- arr[2]\n    arr =\
    \ arr .- arr[3]\n    arr = arr .- arr[4]\n    arr = arr .- arr[5]\n    arr = arr\
    \ .- arr[6]\n    arr = arr .- arr[7]\n    arr = arr .- arr[8]\n    arr = arr .-\
    \ arr[9]\n    arr = arr .- arr[0]\n    arr = arr .- arr[1]\n    arr = \nusing\
    \ Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1,\
    \ 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp5i0kd95k.jl:22\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp5i0kd95k.jl:1\n\
    in expression starting at /tmp/tmp5i0kd95k.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = sort(arr)\n\
    \    arr = reverse(arr)\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp9npwdo4x.jl:22\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9npwdo4x.jl:1\n\
    in expression starting at /tmp/tmp9npwdo4x.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = sort(arr)\n\
    \    arr = reverse(arr)\n    \n    arr = arr |> Vector{Int64}\n    \n    arr =\
    \ arr |> Vector{String}\n    \n    arr = arr |> Vector{String}\n    \n    arr\
    \ = arr |> Vector{String}\n    \n    arr = arr |> Vector{String}\n    \n    arr\
    \ = arr |> Vector{String}\n    \n    arr = arr |> Vector{String}\n    \n    arr\
    \ = arr |> Vector{String}\n    \n    arr = arr |> Vector{String}\n    \n    arr\
    \ = arr |> Vector{String}\n    \n    arr = arr |> Vector{String}\n    \n    arr\
    \ = arr |> Vector{String}\n    \n    arr = arr |> Vector{String}\n    \n    arr\
    \ = arr |> Vector{String}\n    \n    arr = arr |> Vector{String}\n    \n    arr\
    \ = arr |> Vector{String}\n    \n    arr = arr |> Vector{String}\n    \n    arr\
    \ = arr |> Vector{String}\n    \n    arr = arr |> Vector{String}\n    \n    arr\
    \ = arr |> Vector{String}\n    \n    arr = arr |> Vector{String}\n    \n    arr\
    \ = arr |> Vector{String}\n    \n    arr = arr |> Vector{String}\n    \n    arr\
    \ = arr |> Vector{String}\n    \n    arr = arr |> Vector{String}\n    \n    arr\
    \ = arr |> Vector{String}\n    \n    arr = arr |> Vector{String}\n    \n    arr\
    \ = arr |> Vector{String}\n    \n    arr = arr |> Vector{String}\n    \n    arr\
    \ = arr |> Vector{String}\n    \n    arr = arr |> Vector{String}\n    \n    arr\
    \ = arr |> Vector{String}\n    \n    arr = arr |> Vector{String}\n    \n    arr\
    \ = arr |> Vector{String}\n    \n    arr = arr |> Vector{String}\n    \n    arr\
    \ = arr |> Vector{String}\n    \n    arr = arr |> Vector{String}\n    \n    arr\
    \ = arr |> Vector{String}\n    \n    arr = arr\nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpznridkjs.jl:22\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpznridkjs.jl:1\n\
    in expression starting at /tmp/tmpznridkjs.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    arr = sort(arr)\n    arr\
    \ = reverse(arr)\n    arr = map(x -> \"One\"..\"Nine\"[x], arr)\n    return arr\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp96t_ywiw.jl:33\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  BoundsError: attempt\
    \ to access 4-codeunit String at index [8]\n  Stacktrace:\n    [1] checkbounds\n\
    \      @ ./strings/basic.jl:216 [inlined]\n    [2] codeunit\n      @ ./strings/string.jl:102\
    \ [inlined]\n    [3] getindex\n      @ ./strings/string.jl:223 [inlined]\n   \
    \ [4] (::var\"#1#2\")(x::Int64)\n      @ Main /tmp/tmp96t_ywiw.jl:25\n    [5]\
    \ iterate\n      @ ./generator.jl:47 [inlined]\n    [6] _collect(c::Vector{Int64},\
    \ itr::Base.Generator{Vector{Int64}, var\"#1#2\"}, #unused#::Base.EltypeUnknown,\
    \ isz::Base.HasShape{1})\n      @ Base ./array.jl:744\n    [7] collect_similar\n\
    \      @ ./array.jl:653 [inlined]\n    [8] map\n      @ ./abstractarray.jl:2867\
    \ [inlined]\n    [9] by_length(arr::Vector{Int64})\n      @ Main /tmp/tmp96t_ywiw.jl:25\n\
    \   [10] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [11] macro expansion\n      @ /tmp/tmp96t_ywiw.jl:33 [inlined]\n\
    \   [12] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [13] top-level scope\n      @ /tmp/tmp96t_ywiw.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp96t_ywiw.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  BoundsError: attempt to access 4-codeunit\
    \ String at index [55]\n  Stacktrace:\n    [1] checkbounds\n      @ ./strings/basic.jl:216\
    \ [inlined]\n    [2] codeunit\n      @ ./strings/string.jl:102 [inlined]\n   \
    \ [3] getindex\n      @ ./strings/string.jl:223 [inlined]\n    [4] (::var\"#1#2\"\
    )(x::Int64)\n      @ Main /tmp/tmp96t_ywiw.jl:25\n    [5] iterate\n      @ ./generator.jl:47\
    \ [inlined]\n    [6] _collect(c::Vector{Int64}, itr::Base.Generator{Vector{Int64},\
    \ var\"#1#2\"}, #unused#::Base.EltypeUnknown, isz::Base.HasShape{1})\n      @\
    \ Base ./array.jl:744\n    [7] collect_similar\n      @ ./array.jl:653 [inlined]\n\
    \    [8] map\n      @ ./abstractarray.jl:2867 [inlined]\n  "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp96t_ywiw.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr2 = sort(arr)\n\
    \    arr3 = reverse(arr2)\n    \n    arr4 = arr3\n    \n    arr5 = arr4\n    \n\
    \    arr6 = arr5\n    \n    arr7 = arr6\n    \n    arr8 = arr7\n    \n    arr9\
    \ = arr8\n    \n    arr10 = arr9\n    \n    arr11 = arr10\n    \n    arr12 = arr11\n\
    \    \n    arr13 = arr12\n    \n    arr14 = arr13\n    \n    arr15 = arr14\n \
    \   \n    arr16 = arr15\n    \n    arr17 = arr16\n    \n    arr18 = arr17\n  \
    \  \n    arr19 = arr18\n    \n    arr20 = arr19\n    \n    arr21 = arr20\n   \
    \ \n    arr22 = arr21\n    \n    arr23 = arr22\n    \n    arr24 = arr23\n    \n\
    \    arr25 = arr24\n    \n    arr26 = arr25\n    \n    arr27 = arr26\n    \n \
    \   arr28 = arr27\n    \n    arr29 = arr28\n    \n    arr30 = arr29\n    \n  \
    \  arr31 = arr30\n    \n    arr32 = arr31\n    \n    arr33 = arr32\n    \n   \
    \ arr34 = arr33\n    \n    arr35 = arr34\n    \n    arr36 = arr35\n    \n    arr37\
    \ = arr36\n    \n    arr38 = arr37\n    \n    arr39 = arr38\n    \n    arr40 =\
    \ arr39\n    \n    arr41 = arr40\n    \n    arr42 = arr41\n    \n    arr43 = arr42\n\
    \    \n    arr44 = arr43\n    \n    arr45 = arr44\n    \n    arr46 = arr45\n \
    \   \n    arr47 = arr46\n    \n    arr48 = arr47\n    \n    arr49 = arr48\n  \
    \  \n    arr50 = arr49\n    \n    arr51 = arr50\n    \n    arr52 = arr51\n   \
    \ \n    arr53 = arr52\n    \n    arr54 = arr53\n    \n    arr55 = arr54\n    \n\
    \    arr56 = arr55\n    \n    arr57 = arr56\n    \n    arr58 = arr57\n    \n \
    \   arr59 = arr58\n    \n\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpdk68myoq.jl:22\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpdk68myoq.jl:1\n\
    in expression starting at /tmp/tmpdk68myoq.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = sort(arr)\n\
    \    arr = reverse(arr)\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp0eontkmh.jl:22\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0eontkmh.jl:1\n\
    in expression starting at /tmp/tmp0eontkmh.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = sort(arr)\n\
    \    arr = reverse(arr)\n    \n    arr = map(x -> \"One\" if x == 1 else \n  \
    \      \"Two\" if x == 2 else \n        \"Three\" if x == 3 else \n        \"\
    Four\" if x == 4 else \n        \"Five\" if x == 5 else \n        \"Six\" if x\
    \ == 6 else \n        \"Seven\" if x == 7 else \n        \"Eight\" if x == 8 else\
    \ \n        \"Nine\" if x == 9 else \n        \"\", arr)\n    \n    return arr\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2kbxdozx.jl:27\nin expression starting at\
    \ /tmp/tmp2kbxdozx.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = sort(arr)\n\
    \    arr = reverse(arr)\n    arr = arr .- arr[1]\n    arr = arr .+ arr[1]\n  \
    \  arr = arr .- arr[1]\n    arr = arr .+ arr[1]\n    arr = arr .- arr[1]\n   \
    \ arr = arr .+ arr[1]\n    arr = arr .- arr[1]\n    arr = arr .+ arr[1]\n    arr\
    \ = arr .- arr[1]\n    arr = arr .+ arr[1]\n    arr = arr .- arr[1]\n    arr =\
    \ arr .+ arr[1]\n    arr = arr .- arr[1]\n    arr = arr .+ arr[1]\n    arr = arr\
    \ .- arr[1]\n    arr = arr .+ arr[1]\n    arr = arr .- arr[1]\n    arr = arr .+\
    \ arr[1]\n    arr = arr .- arr[1]\n    arr = arr .+ arr[1]\n    arr = arr .- arr[1]\n\
    \    arr = arr .+ arr[1]\n    arr = arr .- arr[1]\n    arr = arr .+ arr[1]\n \
    \   arr = arr .- arr[1]\n    arr = arr .+ arr[1]\n    arr = arr .- arr[1]\n  \
    \  arr = arr .+ arr[1]\n    arr = arr .- arr[1]\n    arr = arr .+ arr[1]\n   \
    \ arr = arr .- arr[1]\n    arr = arr .+ arr[1]\n    arr = arr .- arr[1]\n    arr\
    \ = arr .+ arr[1]\n    arr = arr .- arr[1]\n    arr = arr .+ arr[1]\n    arr =\
    \ arr .- arr[1]\n    arr = arr .+ arr[1]\n    arr = arr .- arr[1]\n    arr = arr\
    \ .+ arr[1]\n    arr = arr .- arr[1]\n    arr = arr .+ arr[1]\n    arr = arr .-\
    \ arr[1]\n    arr = arr .+ arr[1]\n    arr = arr .- arr[1]\n    arr = arr .+ arr[1]\n\
    \    arr = arr .- arr[1]\n    arr = arr .+ arr[1]\n    arr = arr .- arr[1]\n \
    \   arr = arr .+ arr[1]\n    arr = arr .- arr[1]\n    arr = arr .+ arr[1]\n  \
    \  arr = arr .- arr[1]\n    arr = arr .+ arr[1]\n    arr = arr .- arr[1]\n   \
    \ arr = arr .+ arr[1]\n    arr = arr .- arr[1]\n    arr = arr .+ arr[1]\n    arr\
    \ = arr .- arr[1]\n    arr = arr .+ arr[1]\n    arr = arr .- arr[1]\n    arr =\
    \ arr .+ arr[1]\n    arr = arr .\nusing Test\n\n@testset begin\n\ncandidate =\
    \ by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: space before \".\" not allowed in \"arr .\" at\
    \ /tmp/tmp60_0pgfl.jl:88\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp60_0pgfl.jl:88\n\
    in expression starting at /tmp/tmp60_0pgfl.jl:88\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr2 = arr\n    arr2\
    \ = arr2[arr2 .< 9]\n    arr2 = arr2[arr2 .>= 1]\n    arr2 = reverse(arr2)\n \
    \   arr2 = arr2[arr2 .!= 0]\n    \n    arr3 = arr\n    arr3 = arr3[arr3 .< 9]\n\
    \    arr3 = arr3[arr3 .>= 1]\n    arr3 = reverse(arr3)\n    arr3 = arr3[arr3 .!=\
    \ 0]\n    \n    arr4 = arr\n    arr4 = arr4[arr4 .< 9]\n    arr4 = arr4[arr4 .>=\
    \ 1]\n    arr4 = reverse(arr4)\n    arr4 = arr4[arr4 .!= 0]\n    \n    arr5 =\
    \ arr\n    arr5 = arr5[arr5 .< 9]\n    arr5 = arr5[arr5 .>= 1]\n    arr5 = reverse(arr5)\n\
    \    arr5 = arr5[arr5 .!= 0]\n    \n    arr6 = arr\n    arr6 = arr6[arr6 .< 9]\n\
    \    arr6 = arr6[arr6 .>= 1]\n    arr6 = reverse(arr6)\n    arr6 = arr6[arr6 .!=\
    \ 0]\n    \n    arr7 = arr\n    arr7 = arr7[arr7 .< 9]\n    arr7 = arr7[arr7 .>=\
    \ 1]\n    arr7 = reverse(arr7)\n    arr7 = arr7[arr7 .!= 0]\n    \n    arr8 =\
    \ arr\n    arr8 = arr8[arr8 .< 9]\n    arr8 = arr8[arr8 .>= 1]\n    arr8 = reverse(arr8)\n\
    \    arr8 = arr8[arr8 .!= 0]\n    \n    arr9 = arr\n    arr9 = arr9[arr9 .< 9]\n\
    \    arr9 = arr9[arr9 .>= 1]\n    arr9 = reverse(arr9)\n    arr9 = arr9[arr9 .!=\
    \ 0]\n    \n    arr10 = arr\n    arr10 = arr10[arr10 .< 9]\n    arr10 = arr10[arr10\
    \ .>= 1]\n    arr10 = reverse(arr10)\n    arr10 = arr10[arr10 .!= 0]\n    \n \
    \   arr11 = arr\n    arr11 = arr11[arr11 .< 9]\n    arr11 = arr11[arr11 .>= 1]\n\
    \    arr11 = reverse(arr11)\n    arr11 = arr11[arr11 .!= 0]\n    \n    arr12 =\
    \ arr\n    arr12 = arr12[arr12\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe_5fxgeo.jl:1\nin expression starting at /tmp/tmpe_5fxgeo.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = sort(arr)\n\
    \    arr = reverse(arr)\n    \n    arr = arr .+ 1\n    \n    arr = arr .- 9\n\
    \    \n    arr = arr .- 9\n    \n    arr = arr .- 9\n    \n    arr = arr .- 9\n\
    \    \n    arr = arr .- 9\n    \n    arr = arr .- 9\n    \n    arr = arr .- 9\n\
    \    \n    arr = arr .- 9\n    \n    arr = arr .- 9\n    \n    arr = arr .- 9\n\
    \    \n    arr = arr .- 9\n    \n    arr = arr .- 9\n    \n    arr = arr .- 9\n\
    \    \n    arr = arr .- 9\n    \n    arr = arr .- 9\n    \n    arr = arr .- 9\n\
    \    \n    arr = arr .- 9\n    \n    arr = arr .- 9\n    \n    arr = arr .- 9\n\
    \    \n    arr = arr .- 9\n    \n    arr = arr .- 9\n    \n    arr = arr .- 9\n\
    \    \n    arr = arr .- 9\n    \n    arr = arr .- 9\n    \n    arr = arr .- 9\n\
    \    \n    arr = arr .- 9\n    \n    arr = arr .- 9\n    \n    arr = arr .- 9\n\
    \    \n    arr = arr .- 9\n    \n    arr = arr .- 9\n    \n    arr = arr .- 9\n\
    \    \n    arr = arr .- 9\n    \n    arr = arr .- 9\n    \n    arr = arr .- 9\n\
    \    \n    arr = arr .- 9\n    \n    arr = arr .- 9\n    \n    arr = arr .- 9\n\
    \    \n    arr = arr .- 9\n    \n    arr = arr .- 9\n    \n    arr = arr .- 9\n\
    \    \n    arr = arr .- 9\n    \n    arr = arr .- 9\n    \n    arr = arr .- 9\n\
    \    \n    arr = arr .- 9\n    \n    arr = arr .- 9\n    \n    arr = arr .- 9\n\
    \    \n    arr = arr .- 9\n    \n    arr = arr .- 9\n    \n    arr = arr .- 9\n\
    \    \n    arr = arr .- 9\n    \n    arr = arr .- 9\n    \n    arr = arr .- 9\n\
    \    \n    arr = arr .- 9\n    \n    arr = arr .- 9\n    \n    arr = arr .\nusing\
    \ Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1,\
    \ 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: space before \".\" not allowed in \"arr .\" at\
    \ /tmp/tmpy0hlx397.jl:137\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpy0hlx397.jl:137\n\
    in expression starting at /tmp/tmpy0hlx397.jl:137\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = sort(arr)\n\
    \    arr = reverse(arr)\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .+\
    \ arr[1]\n    \n    arr = arr .+ arr[2]\n    \n    arr = arr .+ arr[3]\n    \n\
    \    arr = arr .+ arr[4]\n    \n    arr = arr .+ arr[5]\n    \n    arr = arr .+\
    \ arr[6]\n    \n    arr = arr .+ arr[7]\n    \n    arr = arr .+ arr[8]\n    \n\
    \    arr = arr .+ arr[9]\n    \n    arr = arr .+ arr[10]\n    \n    arr = arr\
    \ .+ arr[11]\n    \n    arr = arr .+ arr[12]\n    \n    arr = arr .+ arr[13]\n\
    \    \n    arr = arr .+ arr[14]\n    \n    arr = arr .+ arr[15]\n    \n    arr\
    \ = arr .+ arr[16]\n    \n    arr = arr .+ arr[17]\n    \n    arr = arr .+ arr[18]\n\
    \    \n    arr = arr .+ arr[19]\n    \n    arr = arr .+ arr[20]\n    \n    arr\
    \ = arr .+ arr[21]\n    \n    arr = arr .+ arr[22]\n    \n    arr = arr .+ arr[23]\n\
    \    \n    arr = arr .+ arr[24]\n    \n    arr = arr .+ arr[25]\n    \n    arr\
    \ = arr .+ arr[26]\n    \n    arr = arr .+ arr[27]\n    \n    arr = arr .+ arr[28]\n\
    \    \n    arr = arr .+ arr[29]\n    \n    arr = arr .+ arr[30]\n    \n    arr\
    \ = arr .+ arr[31]\n    \n    arr = arr .+ arr[32]\n    \n    arr = arr .+ arr[33]\n\
    \    \n    arr = arr .+ arr[34]\n    \n    arr = arr .+ arr[35]\n    \n    arr\
    \ = arr .+ arr[36]\n    \n    arr = arr .+ arr[37]\n    \n    arr = arr .+ arr[38]\n\
    \    \n    arr = arr .+ arr[39]\n    \n    arr = arr .+ arr[40]\n    \n    arr\
    \ = arr .+ arr[41]\n    \n    arr = arr .+ arr[42]\n    \n    arr = arr .+ arr[43]\n\
    \    \n    arr = arr .+ arr[44]\n    \n    arr = arr .+ arr[45]\n    \n    \n\
    using Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpq_zlnhsi.jl:22\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpq_zlnhsi.jl:1\n\
    in expression starting at /tmp/tmpq_zlnhsi.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = sort(arr)\n\
    \    arr = reverse(arr)\n    arr = arr .- arr[1]\n    arr = arr .- arr[2]\n  \
    \  arr = arr .- arr[3]\n    arr = arr .- arr[4]\n    arr = arr .- arr[5]\n   \
    \ arr = arr .- arr[6]\n    arr = arr .- arr[7]\n    arr = arr .- arr[8]\n    arr\
    \ = arr .- arr[9]\n    arr = arr .- arr[0]\n    arr = arr .- arr[1]\n    arr =\
    \ arr .- arr[2]\n    arr = arr .- arr[3]\n    arr = arr .- arr[4]\n    arr = arr\
    \ .- arr[5]\n    arr = arr .- arr[6]\n    arr = arr .- arr[7]\n    arr = arr .-\
    \ arr[8]\n    arr = arr .- arr[9]\n    arr = arr .- arr[0]\n    arr = arr .- arr[1]\n\
    \    arr = arr .- arr[2]\n    arr = arr .- arr[3]\n    arr = arr .- arr[4]\n \
    \   arr = arr .- arr[5]\n    arr = arr .- arr[6]\n    arr = arr .- arr[7]\n  \
    \  arr = arr .- arr[8]\n    arr = arr .- arr[9]\n    arr = arr .- arr[0]\n   \
    \ arr = arr .- arr[1]\n    arr = arr .- arr[2]\n    arr = arr .- arr[3]\n    arr\
    \ = arr .- arr[4]\n    arr = arr .- arr[5]\n    arr = arr .- arr[6]\n    arr =\
    \ arr .- arr[7]\n    arr = arr .- arr[8]\n    arr = arr .- arr[9]\n    arr = arr\
    \ .- arr[0]\n    arr = arr .- arr[1]\n    arr = arr .- arr[2]\n    arr = arr .-\
    \ arr[3]\n    arr = arr .- arr[4]\n    arr = arr .- arr[5]\n    arr = arr .- arr[6]\n\
    \    arr = arr .- arr[7]\n    arr = arr .- arr[8]\n    arr = arr .- arr[9]\n \
    \   arr = arr .- arr[0]\n    arr = arr .- arr[1]\n    arr = arr .- arr[2]\n  \
    \  arr = arr .- arr[3]\n    arr = arr .- arr[4]\n    arr = arr .- arr[5]\n   \
    \ arr = arr .- arr[6]\n    arr = arr .- arr[7]\n    arr = arr .- arr[8]\n    arr\
    \ = arr .- arr[9]\n    arr = arr .- arr[0]\n    arr = arr .- arr[1]\n\nusing Test\n\
    \n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
    One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpj1656zt6.jl:22\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpj1656zt6.jl:1\n\
    in expression starting at /tmp/tmpj1656zt6.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = sort(arr)\n\
    \    arr = reverse(arr)\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp0e2szct8.jl:22\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0e2szct8.jl:1\n\
    in expression starting at /tmp/tmp0e2szct8.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = sort(arr)\n\
    \    arr = reverse(arr)\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .-\
    \ arr[1]\n    \n    arr = arr .- arr[1]\n    \n    arr = arr .- arr[1]\n    \n\
    \    arr = arr .- arr[1]\n\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp_wrwqwqw.jl:22\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_wrwqwqw.jl:1\n\
    in expression starting at /tmp/tmp_wrwqwqw.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = sort(arr)\n\
    \    arr = reverse(arr)\n    \n    arr = arr .+ 1\n    \n    arr = arr .- 10\n\
    \    \n    arr = arr .- 9\n    \n    arr = arr .- 8\n    \n    arr = arr .- 7\n\
    \    \n    arr = arr .- 6\n    \n    arr = arr .- 5\n    \n    arr = arr .- 4\n\
    \    \n    arr = arr .- 3\n    \n    arr = arr .- 2\n    \n    arr = arr .- 1\n\
    \    \n    arr = arr .- 0\n    \n    arr = arr .+ 1\n    \n    arr = arr .- 1\n\
    \    \n    arr = arr .- 2\n    \n    arr = arr .- 3\n    \n    arr = arr .- 4\n\
    \    \n    arr = arr .- 5\n    \n    arr = arr .- 6\n    \n    arr = arr .- 7\n\
    \    \n    arr = arr .- 8\n    \n    arr = arr .- 9\n    \n    arr = arr .- 10\n\
    \    \n    arr = arr .- 11\n    \n    arr = arr .- 12\n    \n    arr = arr .-\
    \ 13\n    \n    arr = arr .- 14\n    \n    arr = arr .- 15\n    \n    arr = arr\
    \ .- 16\n    \n    arr = arr .- 17\n    \n    arr = arr .- 18\n    \n    arr =\
    \ arr .- 19\n    \n    arr = arr .- 20\n    \n    arr = arr .- 21\n    \n    arr\
    \ = arr .- 22\n    \n    arr = arr .- 23\n    \n    arr = arr .- 24\n    \n  \
    \  arr = arr .- 25\n    \n    arr = arr .- 26\n    \n    arr = arr .- 27\n   \
    \ \n    arr = arr .- 28\n    \n    arr = arr .- 29\n    \n    arr = arr .- 30\n\
    \    \n    arr = arr .- 31\n    \n    arr = arr .- 32\n    \n    arr = arr .-\
    \ 33\n    \n    arr = arr .- 34\n    \n    arr = arr .- 35\n    \n    arr = arr\
    \ .- 36\n    \n    arr = arr .- 37\n    \n    arr = arr .- 38\n    \n    arr =\
    \ arr .- 39\n    \n    arr = arr .- 40\n    \n    arr = arr .- 41\n    \n    arr\
    \ = arr .- 42\n    \n    arr = arr .- 43\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp_x7o0ryy.jl:22\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_x7o0ryy.jl:1\n\
    in expression starting at /tmp/tmp_x7o0ryy.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = sort(arr)\n\
    \    arr = reverse(arr)\n    arr = map(x -> name(x), arr)\n    \n    if arr ==\
    \ []\n        return \"\"\n    end\n    \n    return arr\nend\n</cell>\n<code\
    \ language=julia-1.5>\nby_length(arr)\n</cell>\n<code language=julia-1.5>\narr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]\nby_length(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [1, -1 , 55]\nby_length(arr)\n</cell>\n<code language=julia-1.5>\narr =\
    \ [1, -1, 55]\nby_length(arr)\n</cell>\n<code language=julia-1.5>\narr = [1, -1,\
    \ 55]\nby_length(arr)\n</cell>\n<code language=julia-1.5>\narr = [1, -1, 55]\n\
    by_length(arr)\n</cell>\n<code language=julia-1.5>\narr = [1, -1, 55]\nby_length(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [1, -1, 55]\nby_length(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [1, -1, 55]\nby_length(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [1, -1, 55]\nby_length(arr)\n</cell>\n<code language=julia-1.5>\narr = [1,\
    \ -1, 55]\nby_length(arr)\n</cell>\n<code language=julia-1.5>\narr = [1, -1, 55]\n\
    by_length(arr)\n</cell>\n<code language=julia-1.5>\narr = [1, -1, 55]\nby_length(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [1, -1, 55]\nby_length(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [1, -1, 55]\nby_length(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [1, -1, 55]\nby_length(arr)\n</cell>\n<code language=julia-1.5>\narr = [1,\
    \ -1, 55]\nby_length(arr)\n</cell>\n<code language=julia-1.5>\narr = [1, -1, 55]\n\
    by_length(arr)\n</cell>\n<code language=julia-1.5>\narr = [1, -1, 55]\nby_length(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [1, -1, 55]\nby_length(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [1, -1, 55]\nby_length(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [1, -1, 55]\nby_length(arr)\n</cell>\n<code language=julia-1.5>\narr = [1,\
    \ -1, \nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp43km26br.jl:34\nin expression starting at\
    \ /tmp/tmp43km26br.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = sort(arr)\n\
    \    arr = reverse(arr)\n    arr = arr .- arr[1]\n    arr = arr .- arr[2]\n  \
    \  arr = arr .- arr[3]\n    arr = arr .- arr[4]\n    arr = arr .- arr[5]\n   \
    \ arr = arr .- arr[6]\n    arr = arr .- arr[7]\n    arr = arr .- arr[8]\n    arr\
    \ = arr .- arr[9]\n    arr = arr .- arr[0]\n    arr = arr .- arr[1]\n    arr =\
    \ arr .- arr[2]\n    arr = arr .- arr[3]\n    arr = arr .- arr[4]\n    arr = arr\
    \ .- arr[5]\n    arr = arr .- arr[6]\n    arr = arr .- arr[7]\n    arr = arr .-\
    \ arr[8]\n    arr = arr .- arr[9]\n    arr = arr .- arr[0]\n    arr = arr .- arr[1]\n\
    \    arr = arr .- arr[2]\n    arr = arr .- arr[3]\n    arr = arr .- arr[4]\n \
    \   arr = arr .- arr[5]\n    arr = arr .- arr[6]\n    arr = arr .- arr[7]\n  \
    \  arr = arr .- arr[8]\n    arr = arr .- arr[9]\n    arr = arr .- arr[0]\n   \
    \ arr = arr .- arr[1]\n    arr = arr .- arr[2]\n    arr = arr .- arr[3]\n    arr\
    \ = arr .- arr[4]\n    arr = arr .- arr[5]\n    arr = arr .- arr[6]\n    arr =\
    \ arr .- arr[7]\n    arr = arr .- arr[8]\n    arr = arr .- arr[9]\n    arr = arr\
    \ .- arr[0]\n    arr = arr .- arr[1]\n    arr = arr .- arr[2]\n    arr = arr .-\
    \ arr[3]\n    arr = arr .- arr[4]\n    arr = arr .- arr[5]\n    arr = arr .- arr[6]\n\
    \    arr = arr .- arr[7]\n    arr = arr .- arr[8]\n    arr = arr .- arr[9]\n \
    \   arr = arr .- arr[0]\n    arr = arr .- arr[1]\n    arr = arr .- arr[2]\n  \
    \  arr = arr .- arr[3]\n    arr = arr .- arr[4]\n    arr = arr .- arr[5]\n   \
    \ arr = arr .- arr[6]\n    arr = arr .- arr[7]\n    arr = arr .- arr[8]\n    arr\
    \ = arr .- arr[9]\n    arr = arr .- arr[0]\n    arr = arr .- arr[1]\n\nusing Test\n\
    \n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
    One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp05yzdia2.jl:22\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp05yzdia2.jl:1\n\
    in expression starting at /tmp/tmp05yzdia2.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = sort(arr)\n\
    \    arr = reverse(arr)\n    arr = arr .- arr[1]\n    arr = arr .- arr[2]\n  \
    \  arr = arr .- arr[3]\n    arr = arr .- arr[4]\n    arr = arr .- arr[5]\n   \
    \ arr = arr .- arr[6]\n    arr = arr .- arr[7]\n    arr = arr .- arr[8]\n    arr\
    \ = arr .- arr[9]\n    \n    arr = arr .- arr[1]\n    arr = arr .- arr[2]\n  \
    \  arr = arr .- arr[3]\n    arr = arr .- arr[4]\n    arr = arr .- arr[5]\n   \
    \ arr = arr .- arr[6]\n    arr = arr .- arr[7]\n    arr = arr .- arr[8]\n    arr\
    \ = arr .- arr[9]\n    \n    arr = arr .- arr[1]\n    arr = arr .- arr[2]\n  \
    \  arr = arr .- arr[3]\n    arr = arr .- arr[4]\n    arr = arr .- arr[5]\n   \
    \ arr = arr .- arr[6]\n    arr = arr .- arr[7]\n    arr = arr .- arr[8]\n    arr\
    \ = arr .- arr[9]\n    \n    arr = arr .- arr[1]\n    arr = arr .- arr[2]\n  \
    \  arr = arr .- arr[3]\n    arr = arr .- arr[4]\n    arr = arr .- arr[5]\n   \
    \ arr = arr .- arr[6]\n    arr = arr .- arr[7]\n    arr = arr .- arr[8]\n    arr\
    \ = arr .- arr[9]\n    \n    arr = arr .- arr[1]\n    arr = arr .- arr[2]\n  \
    \  arr = arr .- arr[3]\n    arr = arr .- arr[4]\n    arr = arr .- arr[5]\n   \
    \ arr = arr .- arr[6]\n    arr = arr .- arr[7]\n    arr = arr .- arr[8]\n    arr\
    \ = arr .- arr[9]\n    \n    arr = arr .- arr[1]\n    arr = arr .- arr[2]\n  \
    \  arr = arr .- arr[3]\n    arr = arr .- arr[4]\n    arr = arr .- arr[5]\n   \
    \ arr = arr .- arr[6]\n    arr = arr .- arr[7]\n    arr = arr .- arr[8]\n    arr\
    \ = arr .- arr[9]\n    \n    arr = arr .- arr[1]\n    arr = arr .- arr[2]\n  \
    \  arr = arr .- arr[3]\n    arr = arr .- arr[4]\n    arr = arr .- arr[5]\n   \
    \ arr = arr .\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: space before \".\" not allowed in \"arr .\" at\
    \ /tmp/tmpj648njxu.jl:91\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpj648njxu.jl:91\n\
    in expression starting at /tmp/tmpj648njxu.jl:91\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    arr = sort(arr)\n    arr\
    \ = reverse(arr)\n    arr = arr .- arr[1]\n    arr = arr .- arr[2]\n    arr =\
    \ arr .- arr[3]\n    arr = arr .- arr[4]\n    arr = arr .- arr[5]\n    arr = arr\
    \ .- arr[6]\n    arr = arr .- arr[7]\n    arr = arr .- arr[8]\n    arr = arr .-\
    \ arr[9]\n    arr = arr .- arr[1]\n    arr = arr .- arr[2]\n    arr = arr .- arr[3]\n\
    \    arr = arr .- arr[4]\n    arr = arr .- arr[5]\n    arr = arr .- arr[6]\n \
    \   arr = arr .- arr[7]\n    arr = arr .- arr[8]\n    arr = arr .- arr[9]\n  \
    \  arr = arr .- arr[1]\n    arr = arr .- arr[2]\n    arr = arr .- arr[3]\n   \
    \ arr = arr .- arr[4]\n    arr = arr .- arr[5]\n    arr = arr .- arr[6]\n    arr\
    \ = arr .- arr[7]\n    arr = arr .- arr[8]\n    arr = arr .- arr[9]\n    arr =\
    \ arr .- arr[1]\n    arr = arr .- arr[2]\n    arr = arr .- arr[3]\n    arr = arr\
    \ .- arr[4]\n    arr = arr .- arr[5]\n    arr = arr .- arr[6]\n    arr = arr .-\
    \ arr[7]\n    arr = arr .- arr[8]\n    arr = arr .- arr[9]\n    arr = arr .- arr[1]\n\
    \    arr = arr .- arr[2]\n    arr = arr .- arr[3]\n    arr = arr .- arr[4]\n \
    \   arr = arr .- arr[5]\n    arr = arr .- arr[6]\n    arr = arr .- arr[7]\n  \
    \  arr = arr .- arr[8]\n    arr = arr .- arr[9]\n    arr = arr .- arr[1]\n   \
    \ arr = arr .- arr[2]\n    arr = arr .- arr[3]\n    arr = arr .- arr[4]\n    arr\
    \ = arr .- arr[5]\n    arr = arr .- arr[6]\n    arr = arr .- arr[7]\n    arr =\
    \ arr .- arr[8]\n    arr = arr .- arr[9]\n    arr = arr .- arr[1]\n    arr = arr\
    \ .- arr[2]\n    arr = arr .- arr[3]\n    arr = arr .- arr[4]\n    arr = arr .-\
    \ arr[5]\n    arr = arr .- arr[6]\n    arr = arr .- arr[7]\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3])\
    \ == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmptpc8rqvz.jl:22\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmptpc8rqvz.jl:1\n\
    in expression starting at /tmp/tmptpc8rqvz.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    arr = sort(arr)\n    arr\
    \ = reverse(arr)\n    arr = map(x -> name(x), arr)\n    return arr\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1,\
    \ 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpktvi0jy2.jl:33\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  UndefVarError: name\
    \ not defined\n  Stacktrace:\n    [1] (::var\"#1#2\")(x::Int64)\n      @ Main\
    \ /tmp/tmpktvi0jy2.jl:25\n    [2] iterate\n      @ ./generator.jl:47 [inlined]\n\
    \    [3] _collect(c::Vector{Int64}, itr::Base.Generator{Vector{Int64}, var\"#1#2\"\
    }, #unused#::Base.EltypeUnknown, isz::Base.HasShape{1})\n      @ Base ./array.jl:744\n\
    \    [4] collect_similar\n      @ ./array.jl:653 [inlined]\n    [5] map\n    \
    \  @ ./abstractarray.jl:2867 [inlined]\n    [6] by_length(arr::Vector{Int64})\n\
    \      @ Main /tmp/tmpktvi0jy2.jl:25\n    [7] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpktvi0jy2.jl:33 [inlined]\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpktvi0jy2.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpktvi0jy2.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  UndefVarError: name not defined\n  Stacktrace:\n\
    \    [1] (::var\"#1#2\")(x::Int64)\n      @ Main /tmp/tmpktvi0jy2.jl:25\n    [2]\
    \ iterate\n      @ ./generator.jl:47 [inlined]\n    [3] _collect(c::Vector{Int64},\
    \ itr::Base.Generator{Vector{Int64}, var\"#1#2\"}, #unused#::Base.EltypeUnknown,\
    \ isz::Base.HasShape{1})\n      @ Base ./array.jl:744\n    [4] collect_similar\n\
    \      @ ./array.jl:653 [inlined]\n    [5] map\n      @ ./abstractarray.jl:2867\
    \ [inlined]\n    [6] by_length(arr::Vector{Int64})\n      @ Main /tmp/tmpktvi0jy2.jl:25\n\
    \    [7] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpktvi0jy2.jl:35 [inlined]\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpktvi0jy2.jl"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpktvi0jy2.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = sort(arr)\n\
    \    arr = reverse(arr)\n    \n    arr = arr |> Vector{String}\n    \n    arr\
    \ = arr |> filter(x->x>=1 && x<=9) |> map(x->\"One\"..\"Nine\"[x]) |> Vector{String}\n\
    \    \n    return arr\nend\n</cell>\n<code language=julia-1.5>\nby_length(arr)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes an array of integers\
    \ and returns the array in reverse order but with the numbers shifted to the left\
    \ by one place. For example:\narr = [2, 1, 1, 4, 5, 8, 2, 3]\nshould become:\n\
    arr = [8, 5, 4, 3, 2, 2, 1, 1]\nThe function should return an empty array if the\
    \ array is empty or has any strange numbers in it.\nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqc9v_0px.jl:33\nin expression starting at\
    \ /tmp/tmpqc9v_0px.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = sort(arr)\n\
    \    arr = reverse(arr)\n    \n    arr = map(x -> \"One\" if x == 1 \n       \
    \ else \"Two\" if x == 2 \n        else \"Three\" if x == 3 \n        else \"\
    Four\" if x == 4 \n        else \"Five\" if x == 5 \n        else \"Six\" if x\
    \ == 6 \n        else \"Seven\" if x == 7 \n        else \"Eight\" if x == 8 \n\
    \        else \"Nine\", arr)\n    \n    return arr\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3])\
    \ == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_fqtrzyw.jl:27\nin expression starting at\
    \ /tmp/tmp_fqtrzyw.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = sort(arr)\n\
    \    arr = reverse(arr)\n    arr = map(x -> \"One\" if x == 1 else \"Two\" if\
    \ x == 2 else \"Three\" if x == 3 else \"Four\" if x == 4 else \"Five\" if x ==\
    \ 5 else \"Six\" if x == 6 else \"Seven\" if x == 7 else \"Eight\" if x == 8 else\
    \ \"Nine\", arr)\n    \n    return arr\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length(arr)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ of integers and returns a vector of strings that represent each of the numbers\
    \ from 1 to 9 inclusive.\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9v0hz4uw.jl:26\nin expression starting at\
    \ /tmp/tmp9v0hz4uw.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4,\
    \ 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n      arr = []\n\
    \      return []\n    \n      If the array has any strange number ignore it:\n\
    \      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n         \
    \   -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\nfunction\
    \ by_length(arr::Vector{Int64})::Vector{String} \n    \n    arr = sort(arr)\n\
    \    arr = reverse(arr)\n    arr = map(x -> \"One\" if x == 1 \n        else \"\
    Two\" if x == 2\n        else \"Three\" if x == 3\n        else \"Four\" if x\
    \ == 4\n        else \"Five\" if x == 5\n        else \"Six\" if x == 6\n    \
    \    else \"Seven\" if x == 7\n        else \"Eight\" if x == 8\n        else\
    \ \"Nine\", arr)\n    return arr\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplafny6o7.jl:26\nin expression starting at\
    \ /tmp/tmplafny6o7.jl:26\n"
  exit_code: 1
  status: SyntaxError
