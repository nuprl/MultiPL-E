name: HumanEval_42_incr_list
language: julia
prompt: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
  \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6,\
  \ 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
  \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
  \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
completions: ["    l = l + 1 \n    return l \nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that returns the sum of the elements of a list.", "    l = l + [Int64]\n\
    \    return l\nend\n</cell>\n<code language=julia-1.5>", "    l = l + [Int64(1)]\n\
    \    return l\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1, 2, 3])\n\
    </cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes in a list of numbers\
    \ and returns the sum of the numbers in the list. \nWrite a function that takes\
    \ in a list of numbers and returns the product of the numbers in the list. \n\
    Write a function that takes in a list of numbers and returns the maximum of the\
    \ numbers in the list. \nWrite a function that takes in a list of numbers and\
    \ returns the minimum of the numbers in the list. \nWrite a function that takes\
    \ in a list of numbers and returns the number of elements in the list. \nWrite\
    \ a function that takes in a list of numbers and returns the sum of the squares\
    \ of the numbers in the list. \nWrite a function that takes in a list of numbers\
    \ and returns the product of the squares of the numbers in the list. \nWrite a\
    \ function that takes in a list of numbers and returns the maximum of the squares\
    \ of the numbers in the list. \nWrite a function that takes in a list of numbers\
    \ and returns the minimum of the squares of the numbers in the list. \nWrite a\
    \ function that takes in a list of numbers and returns the number of elements\
    \ in the list. \nWrite a function that takes in a list of numbers and returns\
    \ the sum of the cubes of the numbers in the list. \nWrite a function that takes\
    \ in a list of numbers and returns the product of the cubes of the numbers in\
    \ the list. \nWrite a function that takes in a list of numbers and returns the\
    \ maximum of the cubes of the numbers in the list. \nWrite a function that takes\
    \ in a list of numbers and returns the minimum of the cubes of the numbers in\
    \ the list. \nWrite a function that takes in a list of numbers and returns the\
    \ number of elements in the list. \nWrite a function that takes in a list of numbers\
    \ and returns the sum of the exponential of the numbers in the list. \nWrite a\
    \ function that takes in a list of numbers and returns the product of the exponential\
    \ of the numbers in the list. \nWrite a function that takes in a list of numbers\
    \ and returns the maximum of the exponential of the numbers in the list. \nWrite\
    \ a function that takes in a list of numbers and returns the minimum of the exponential\
    \ of the numbers in the list. \nWrite a function that takes in a list of numbers\
    \ and returns the number of elements in the list. \nWrite a function that takes\
    \ in a list of numbers and returns the sum of the natural logarithms of the numbers\
    \ in the list. \nWrite a function that takes in a list of numbers and returns\
    \ the product of the natural logarithms of the numbers in the list. \nWrite a\
    \ function that takes in a list of numbers and returns the maximum of the natural\
    \ logarithms of the numbers in the list. \nWrite a function that takes in a list\
    \ of numbers and returns the minimum of the natural logarithms of the numbers\
    \ in the list. \nWrite a function that takes in a list of numbers and returns\
    \ the number of elements in the list. \nWrite a function that takes in a list\
    \ of numbers and returns the sum of the logarithms of the ", "    l = l + [Int64(1)]\n\
    \    return l\nend\n</cell>\n<code language=julia-1.5>", "    l = l + 1\n    return\
    \ l\nend\n</cell>\n<code language=julia-1.5>", "    l = l + [length(l)]\n    return\
    \ l\nend\n</cell>\n<code language=julia-1.5>", "    l = copy(l)\n    for i = 1:length(l)\n\
    \        l[i] = l[i] + 1\n    end\n    return l\nend\n</cell>\n<code language=julia-1.5>",
  "    l = l + [Int64(1)]\n    return l\nend\n</cell>\n<code language=julia-1.5>",
  "    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector", "    l = copy(l)\n    l = l\
    \ + [length(l)]\n    return l\nend\n</cell>\n<code language=julia-1.5>", "   \
    \ l = l + [Int64]\n    return l\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n</cell>\n<text>\nExercise 3\nWrite a function that returns the first\
    \ element of a list that satisfies a condition. For example, suppose you have\
    \ a list of numbers and you want to find the first element that is a multiple\
    \ of 5. You can write a function like this:", "    l = l + [length(l)]\n    return\
    \ l\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the sum of the elements of an\
    \ array.", "    l = l + 1 \n    return l \nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise: Write a function that returns\
    \ the sum of the elements of an array. \nWrite a function that returns the product\
    \ of the elements of an array. \nWrite a function that returns the maximum of\
    \ the elements of an array. \nWrite a function that returns the minimum of the\
    \ elements of an array. \nWrite a function that returns the absolute value of\
    \ the elements of an array. \nWrite a function that returns the reciprocal of\
    \ the elements of an array. \nWrite a function that returns the exponential of\
    \ the elements of an array. \nWrite a function that returns the natural logarithm\
    \ of the elements of an array. \nWrite a function that returns the square root\
    \ of the elements of an array. \nWrite a function that returns the reciprocal\
    \ of the square root of the elements of an array. \nWrite a function that returns\
    \ the factorial of the elements of an array. \nWrite a function that returns the\
    \ factorial of the elements of an array. \nWrite a function that returns the sum\
    \ of all the elements of a vector. \nWrite a function that returns the product\
    \ of the elements of a vector. \nWrite a function that returns the maximum of\
    \ the elements of a vector. \nWrite a function that returns the minimum of the\
    \ elements of a vector. \nWrite a function that returns the absolute value of\
    \ the elements of a vector. \nWrite a function that returns the reciprocal of\
    \ the elements of a vector. \nWrite a function that returns the exponential of\
    \ the elements of a vector. \nWrite a function that returns the natural logarithm\
    \ of the elements of a vector. \nWrite a function that returns the square root\
    \ of the elements of a vector. \nWrite a function that returns the reciprocal\
    \ of the square root of the elements of a vector. \nWrite a function that returns\
    \ the factorial of the elements of a vector. \nWrite a function that returns the\
    \ factorial of the elements of a vector. \nWrite a function that returns the sum\
    \ of all the elements of a matrix. \nWrite a function that returns the product\
    \ of the elements of a matrix. \nWrite a function that returns the maximum of\
    \ the elements of a matrix. \nWrite a function that returns the minimum of the\
    \ elements of a matrix. \nWrite a function that returns the absolute value of\
    \ the elements of a matrix. \nWrite a function that returns the reciprocal of\
    \ the elements of a matrix. \nWrite a function that returns the exponential of\
    \ the elements of a matrix. \nWrite a function that returns the natural logarithm\
    \ of the elements of a matrix. \nWrite a function that returns the square root\
    \ of the elements of a matrix. \nWrite a function that returns the reciprocal\
    \ of the square root of the elements of a matrix. \nWrite a function that returns\
    \ the factorial of the elements of a matrix. \nWrite a function that returns the\
    \ factorial of the elements of a matrix. ", "    l = l + 1\n    return l\nend\n\
    </cell>\n<code language=julia-1.5>\nincr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that returns the first element of a vector, incremented by 1.\n   \
    \ >>> incr_vec([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_vec([5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"", "    l = l |>\
    \ Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l\
    \ = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector", "    l = l + [Int64]\n    return\
    \ l\nend", "    l = l + [Int64]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a vector of integers and returns a vector where each element is the sum of the\
    \ previous two elements.\nFor example, incr_vec([1, 2, 3]) should return [3, 4,\
    \ 5].", "    l = copy(l)\n    i = length(l)\n    while i > 1\n        l[i] = l[i\
    \ - 1] + 1\n        i -= 1\n    end\n    return l\nend\n</cell>\n<code language=julia-1.5>",
  "    l = l + [Int64]\n    return l\nend\n</cell>\n<code language=julia-1.4>\n@time\
    \ incr_list([1,2,3])\n</cell>\n<code language=julia-1.4>\n@time incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise: Write a function that\
    \ returns the list with elements incremented by 1 but starting from position n.\
    \ \nHint: Use incr_list()", "    l = l + [length(l)]\n    return l\nend\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that returns the first element of a list that satisfies a condition.\
    \ For example, if the list is [5, 3, 5, 2, 3, 3, 9, 0, 123], the function should\
    \ return 5 because 5 is the first element of the list that satisfies the condition\
    \ (5 > 3).", "    l = copy(l)\n    length(l) += 1\n    return l\nend\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that takes a vector of integers and returns the same vector but with\
    \ each element incremented by 1.", "    l = copy(l)\n    i = length(l)\n    while\
    \ i > 1\n        l[i-1] = l[i] - 1\n        i = i - 1\n    end\n    l\nend\n</code>\n\
    <|/ a |>\n<| a tags=julia,list |>\nA simple and efficient solution is to use an\
    \ iterator and take advantage of the fact that Julia is lazy by using the iterator\
    \ syntax:\n<code>\njulia> function incr_list(l::Vector{Int64})\n           for\
    \ i = 1:length(l)\n               l[i] = l[i] + 1\n           end\n          \
    \ l\n       end\nincr_list (generic function with 1 method)", "    l = l + 1\n\
    \    return l\nend\n</cell>\n<code language=julia-1.5>", "    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector", "    l = l + [Int64]\n    return l\nend\n</cell>\n<code\
    \ language=julia-1.5>\nincr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that returns the sum of the elements of an array.", "    l = l + [Int64]\n\
    \    return l\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1, 2, 3])\n\
    </cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    </cell>\n<text>\nExercise 4\nWrite a function that takes a vector and returns\
    \ a new vector with each element incremented by 1.", "    l = l + [Int64]\n  \
    \  return l\nend\n</cell>\n<code language=julia-1.5>", "    l = copy(l)\n    i\
    \ = length(l)\n    while i > 1\n        l[i-1] = l[i] - 1\n        i = i - 1\n\
    \    end\n    l\nend\n</cell>\n<code language=julia-1.5>", "    l = l + [Int64(1)]\n\
    \    return l\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1, 2, 3])\n\
    </cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector and returns\
    \ a new vector with each element incremented by 1.", "    l = l + 1\n    return\
    \ l\nend\n</cell>\n<code language=julia-1.3>", "    l = copy(l)\n    i = length(l)\n\
    \    while i > 1\n        l[i-1] = l[i] - 1\n        i = i - 1\n    end\n    return\
    \ l\nend\n</cell>\n<code language=julia-1.5>", "    l = copy(l)\n    i = length(l)\n\
    \    while i > 1\n        l[i-1] = l[i-1] + 1\n        i = i-1\n    end\n    return\
    \ l\nend\n</cell>\n<code language=julia-1.3>", "    l = l + [length(l)]\n    return\
    \ l\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n</cell>\n\
    <text>\nExercise: Write a function that returns the sum of the elements of a list.",
  "    l = l + 1 \n    return l\nend", "    l = l + [Int64]\n    return l\nend", " \
    \   l = l + [Int64(1)]\n    return l\nend", "    l = l + 1\n    return l\nend\n\
    </cell>\n<code language=julia-1.5>\n@time incr_list([1, 2, 3])\n</cell>\n<code\
    \ language=julia-1.5>\n@time incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n</cell>\n\
    <text>\nExercise: Write a function that returns the first element of a list. Test\
    \ it on a small list to make sure it works.", "    l = l + [Int64(1)]\n    return\
    \ l\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n</cell>\n\
    <text>\nExercise: Write a function that takes a vector of integers and returns\
    \ the same vector but with each element incremented by 1.", "    l = copy(l)\n\
    \    i = length(l)\n    while i > 1\n        l[i-1] = l[i] - 1\n        i = i\
    \ - 1\n    end\n    return l\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n</cell>\n<text>\nExercise 3\nWrite a function that returns the number\
    \ of elements in a list that satisfy a predicate.", "    l = copy(l)\n    l =\
    \ l + 1\n    return l\nend\n</cell>\n<code language=julia-1.3>\nincr_list([1,\
    \ 2, 3])\n</cell>\n<code language=julia-1.3>\nincr_list([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the sum\
    \ of the elements of an array. \nThe function should work for both vectors and\
    \ matrices.", "    l = copy(l)\n    i = length(l)\n    while i > 1\n        l[i-1]\
    \ = l[i] - 1\n        i = i-1\n    end\n    l\nend\n</code>\n<|/ a |>\n<| c |>\n\
    This doesn't work if you have a negative number in the list. For example, `incr_list([-1,\
    \ -2, -3])` returns `[2, 1, 3]` instead of `[3, 2, 1]`.\n<|/ c |>\n<| c |>\nThis\
    \ doesn't work if you have a negative number in the list. For example, `incr_list([-1,\
    \ -2, -3])` returns `[2, 1, 3]` instead of `[3, 2, 1]`.\n<|/ c |>\n<| c |>\nThis\
    \ doesn't work if you have a negative number in the list. For example, `incr_list([-1,\
    \ -2, -3])` returns `[2, 1, 3]` instead of `[3, 2, 1]`.\n<|/ c |>\n<| c |>\nThis\
    \ doesn't work if you have a negative number in the list. For example, `incr_list([-1,\
    \ -2, -3])` returns `[2, 1, 3]` instead of `[3, 2, 1]`.\n<|/ c |>\n<| c |>\nThis\
    \ doesn't work if you have a negative number in the list. For example, `incr_list([-1,\
    \ -2, -3])` returns `[2, 1, 3]` instead of `[3, 2, 1]`.\n<|/ c |>\n<| a dscore=5\
    \ tags=julia |>\n<code>", "    l = copy(l)\n    i = length(l)\n    while i > 1\n\
    \        l[i-1] = l[i] - 1\n        i = i - 1\n    end\n    return l\nend\n</cell>\n\
    <code language=julia-1.5>", "    l = copy(l)\n    l = incr(l)\n    return l\n\
    end", "    l = l + [Int64]\n    return l\nend\n</cell>\n<code language=julia-1.4>",
  "    l = l + [Int64(1)]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a vector and returns a vector where each element is the sum of the vector elements\
    \ before it.", "    l = l + [Int64(1)]\n    return l\nend\n</cell>\n<code language=julia-1.5>",
  "    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector", "    l = l + [length(l)]\n\
    \    return l\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1, 2, 3])\n\
    </cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the sum of the elements\
    \ of an array.", "    l = l + 1\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the sum of the elements of an array. \nWrite a function that returns the product\
    \ of the elements of an array. \nWrite a function that returns the maximum of\
    \ the elements of an array. \nWrite a function that returns the minimum of the\
    \ elements of an array. \nWrite a function that returns the absolute value of\
    \ the elements of an array. \nWrite a function that returns the sign of the elements\
    \ of an array. \nWrite a function that returns the absolute value of the first\
    \ element of an array. \nWrite a function that returns the sign of the first element\
    \ of an array. \nWrite a function that returns the sum of the first element of\
    \ an array. \nWrite a function that returns the product of the first element of\
    \ an array. \nWrite a function that returns the maximum of the first element of\
    \ an array. \nWrite a function that returns the minimum of the first element of\
    \ an array. \nWrite a function that returns the absolute value of the first element\
    \ of an array. \nWrite a function that returns the sign of the first element of\
    \ an array. \nWrite a function that returns the sum of the first element of an\
    \ array. \nWrite a function that returns the product of the first element of an\
    \ array. \nWrite a function that returns the maximum of the first element of an\
    \ array. \nWrite a function that returns the minimum of the first element of an\
    \ array. \nWrite a function that returns the absolute value of the first element\
    \ of an array. \nWrite a function that returns the sign of the first element of\
    \ an array. \nWrite a function that returns the sum of the first element of an\
    \ array. \nWrite a function that returns the product of the first element of an\
    \ array. \nWrite a function that returns the maximum of the first element of an\
    \ array. \nWrite a function that returns the minimum of the first element of an\
    \ array. \nWrite a function that returns the absolute value of the first element\
    \ of an array. \nWrite a function that returns the sign of the first element of\
    \ an array. \nWrite a function that returns the sum of the first element of an\
    \ array. \nWrite a function that returns the product of the first element of an\
    \ array. \nWrite a function that returns the maximum of the first element of an\
    \ array. \nWrite a function that returns the minimum of the first element of an\
    \ array. \nWrite a function that returns the absolute value of the first element\
    \ of an array. \nWrite a function that returns the sign of the first element of\
    \ an array. \nWrite a function that returns the sum of the first element of an\
    \ array. \nWrite a function that returns the product of the first element of an\
    \ array. \nWrite a function that returns the maximum of the first element of an\
    \ array. \nWrite a function that returns the minimum of the first element of an\
    \ array. \nWrite a function that returns the absolute value of the first element\
    \ of an array. \nWrite a function that returns the sign of the first element of\
    \ an array. \nWrite a function that ", "    l = l + [Int64]\n    return l\nend\n\
    </cell>\n<code language=julia-1.5>", "    l = copy(l)\n    l = incr(l)\n    return\
    \ l\nend\n</cell>\n<code language=julia-1.5>", "    l = copy(l)\n    l = l + 1\n\
    \    return l\nend\n</cell>\n<code language=julia-1.5>", "    l = l + [Int64(1)]\n\
    \    return l\nend\n</cell>\n<code language=julia-1.4>", "    l = l + [Int64(1)]\n\
    \    return l\nend", "    l = copy(l)\n    for i=1:length(l)\n        l[i] = l[i]\
    \ + 1\n    end\n    return l\nend\n</cell>\n<code language=julia-1.5>", "    l\
    \ = l + [Int64]\n    return l\nend\n</cell>\n<code language=julia-1.5>", "   \
    \ l = copy(l)\n    l = l .+ 1\n    return l\nend\n</cell>\n<code language=julia-1.5>",
  "    l = l + 1 \n    return l \nend\n</cell>\n<code language=julia-1.5>", "    l\
    \ = copy(l)\n    for i=1:length(l)\n        l[i] = l[i] + 1\n    end\n    return\
    \ l\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n</cell>\n\
    <text>\nExercise 2: Write a function that returns the first element of a list\
    \ that satisfies a condition. For example, if the list is [5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123], the function should return 3 because the first element of the list\
    \ that satisfies the condition is 3.", "    l = l + [Int64]\n    return l\nend\n\
    </cell>\n<code language=julia-1.5>", "    l = l + [length(l)+1]\n    return l\n\
    end\n</cell>\n<code language=julia-1.4>\nincr_list([1, 2, 3])\n</cell>\n<code\
    \ language=julia-1.4>\nincr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the first element of a list if it is\
    \ non-empty, and a default value otherwise.", "    l = l + [Int64(1)]\n    return\
    \ l\nend\n</cell>\n<code language=julia-1.5>", "    l = l + 1 \n    return l\n\
    end\n</cell>\n<code language=julia-1.5>\nincr_list([1, 2, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nincr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of elements in a list that\
    \ satisfy a certain condition. For example, how many elements in the list below\
    \ satisfy the condition $x^2 + y^2 = z^2$?", "    l = copy(l)\n    i = length(l)\n\
    \    while i > 1\n        l[i-1] = l[i] - 1\n        i = i - 1\n    end\n    return\
    \ l\nend\n</cell>\n<code language=julia-1.5>", "    l = copy(l)\n    i = length(l)\
    \ + 1\n    while i <= length(l)\n        l[i] = l[i] + 1\n        i = i + 1\n\
    \    end\n    return l\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n</cell>\n<text>\nExercise: Write a function that takes a vector of\
    \ integers and returns the vector with the elements incremented by 1.", "    l\
    \ = l + 1 \n    return l \nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n</cell>\n<text>\nExercise 3\nWrite a function that returns the sum\
    \ of the elements in a list.\n>>> sum([1, 2, 3])\n6\n>>> sum([5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123])\n164\n>>> sum([1, 2, 3])\n6\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    164\n>>> sum([1, 2, 3])\n6\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123])\n164\n>>> sum([1,\
    \ 2, 3])\n6\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123])\n164\n>>> sum([1, 2, 3])\n\
    6\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123])\n164\n>>> sum([1, 2, 3])\n6\n>>> sum([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n164\n>>> sum([1, 2, 3])\n6\n>>> sum([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n164\n>>> sum([1, 2, 3])\n6\n>>> sum([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n164\n>>> sum([1, 2, 3])\n6\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    164\n>>> sum([1, 2, 3])\n6\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123])\n164\n>>> sum([1,\
    \ 2, 3])\n6\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123])\n164\n>>> sum([1, 2, 3])\n\
    6\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123])\n164\n>>> sum([1, 2, 3])\n6\n>>> sum([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n164\n>>> sum([1, 2, 3])\n6\n>>> sum([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n164\n>>> sum([1, 2, 3])\n6\n>>> sum([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n164\n>>> sum([1, 2, 3])\n6\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    164\n>>> sum([1, 2, 3])\n6\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123])\n164\n>>> sum([1,\
    \ 2, 3])\n6\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123])\n164\n>>> sum([1, 2, 3])\n\
    6\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123])\n164\n>>> sum([1, 2, 3])\n6\n>>> sum([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n164\n>>> sum([1, 2, 3])\n6\n>>> sum([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n164\n>>> sum([1, 2, 3])\n6\n>>> sum([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n164\n>>> sum([1, 2, ", "    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector",
  "    l = copy(l)\n    l = l + ones(length(l)) * 1 \n    return l\nend\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that returns a list with elements incremented by 1 starting at position\
    \ n. \nFor example, incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123], 3) should return\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]. \nHint: Use a for loop to iterate over the list.",
  "    l = l + [Int64(1)]\n    return l\nend\n</cell>\n<code language=julia-1.5>",
  "    l = copy(l)\n    i = length(l)\n    while i > 0\n        l[i] = l[i - 1] +\
    \ 1\n        i -= 1\n    end\n    return l\nend\n</cell>\n<code language=julia-1.5>",
  "    l = l + 1\n    return l\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the sum\
    \ of the elements of an array.", "    l = l + [Int64]\n    return l\nend\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that takes a vector and returns a vector with each element incremented\
    \ by 1.", "    l = l + [Int64(1)]\n    return l\nend\n</cell>\n<code language=julia-1.3>",
  "    l = l + 1\n    return l\nend\n</cell>\n<code language=julia-1.5>\n@time incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]);\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the first element of a list.\nWrite a function that returns the last\
    \ element of a list.\nWrite a function that returns the sum of a list.\nWrite\
    \ a function that returns the product of a list.\nWrite a function that returns\
    \ the maximum of a list.\nWrite a function that returns the minimum of a list.\n\
    Write a function that returns the number of elements in a list.\nWrite a function\
    \ that returns the number of unique elements in a list.\nWrite a function that\
    \ returns the number of occurrences of a value in a list.\nWrite a function that\
    \ returns the number of occurrences of a value in a list.\nWrite a function that\
    \ returns the number of occurrences of a value in a list.\nWrite a function that\
    \ returns the number of occurrences of a value in a list.\nWrite a function that\
    \ returns the number of occurrences of a value in a list.\nWrite a function that\
    \ returns the number of occurrences of a value in a list.\nWrite a function that\
    \ returns the number of occurrences of a value in a list.\nWrite a function that\
    \ returns the number of occurrences of a value in a list.\nWrite a function that\
    \ returns the number of occurrences of a value in a list.\nWrite a function that\
    \ returns the number of occurrences of a value in a list.\nWrite a function that\
    \ returns the number of occurrences of a value in a list.\nWrite a function that\
    \ returns the number of occurrences of a value in a list.\nWrite a function that\
    \ returns the number of occurrences of a value in a list.\nWrite a function that\
    \ returns the number of occurrences of a value in a list.\nWrite a function that\
    \ returns the number of occurrences of a value in a list.\nWrite a function that\
    \ returns the number of occurrences of a value in a list.\nWrite a function that\
    \ returns the number of occurrences of a value in a list.\nWrite a function that\
    \ returns the number of occurrences of a value in a list.\nWrite a function that\
    \ returns the number of occurrences of a value in a list.\nWrite a function that\
    \ returns the number of occurrences of a value in a list.\nWrite a function that\
    \ returns the number of occurrences of a value in a list.\nWrite a function that\
    \ returns the number of occurrences of a value in a list.\nWrite a function that\
    \ returns the number of occurrences of a value in a list.\nWrite a function that\
    \ returns the number of occurrences of a value in a list.\nWrite a function that\
    \ returns the number of occurrences of a value in a list.\nWrite a function that\
    \ returns the number of occurrences of a value in a list.\nWrite a function that\
    \ returns the number of occurrences of a value in a list.\nWrite a function that\
    \ returns the number of occurrences of a value in a list.\nWrite a function that\
    \ returns the number of occurrences of a value in a list.\nWrite a function that\
    \ returns the number of occurrences of a value in a list.\nWrite a function that\
    \ returns the number of occurrences of a value in a list.\nWrite a function that\
    \ returns the number of occurrences of a value in a list.\nWrite a function that\
    \ returns the number of occurrences of a value in a list.\nWrite a function that\
    \ returns the number of occurrences of a value in a list.\nWrite a function that\
    \ returns the number of occurrences of a value in a list.\nWrite a function that\
    \ returns the number of occurrences of a value in a list.\nWrite ", "    l = l\
    \ + 1 \n    return l \nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the first\
    \ element of a list, and a function that returns the last element of a list. \n\
    Write a function that returns the first element of a list, and a function that\
    \ returns the last element of a list. \nWrite a function that returns the first\
    \ element of a list, and a function that returns the last element of a list. \n\
    Write a function that returns the first element of a list, and a function that\
    \ returns the last element of a list. \nWrite a function that returns the first\
    \ element of a list, and a function that returns the last element of a list. \n\
    Write a function that returns the first element of a list, and a function that\
    \ returns the last element of a list. \nWrite a function that returns the first\
    \ element of a list, and a function that returns the last element of a list. \n\
    Write a function that returns the first element of a list, and a function that\
    \ returns the last element of a list. \nWrite a function that returns the first\
    \ element of a list, and a function that returns the last element of a list. \n\
    Write a function that returns the first element of a list, and a function that\
    \ returns the last element of a list. \nWrite a function that returns the first\
    \ element of a list, and a function that returns the last element of a list. \n\
    Write a function that returns the first element of a list, and a function that\
    \ returns the last element of a list. \nWrite a function that returns the first\
    \ element of a list, and a function that returns the last element of a list. \n\
    Write a function that returns the first element of a list, and a function that\
    \ returns the last element of a list. \nWrite a function that returns the first\
    \ element of a list, and a function that returns the last element of a list. \n\
    Write a function that returns the first element of a list, and a function that\
    \ returns the last element of a list. \nWrite a function that returns the first\
    \ element of a list, and a function that returns the last element of a list. \n\
    Write a function that returns the first element of a list, and a function that\
    \ returns the last element of a list. \nWrite a function that returns the first\
    \ element of a list, and a function that returns the last element of a list. \n\
    Write a function that returns the first element of a list, and a function that\
    \ returns the last element of a list. \nWrite a function that returns the first\
    \ element of a list, and a function that returns the last element of a list. \n\
    Write a function that returns the first element of a list, and a function that\
    \ returns the last element of a list. \nWrite a function that returns the first\
    \ element of a list, and a function that returns the last element of a list. \n\
    Write a function that returns the first element of a list, and a function that\
    \ returns the last element of a list. \nWrite a function that returns the first\
    \ element of a list, and a function that returns the last element of a list. \n\
    Write a function that ", "    l = l + 1 \n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a vector and returns a vector where each element is the sum of the previous\
    \ two elements.\nFor example, incr_vec([1, 2, 3]) should return [3, 4, 5].", " \
    \   l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector", "    l = copy(l)\n    for i\
    \ = length(l); i >= 1; i--\n        l[i] = l[i] + 1\n    end\n    return l\nend\n\
    </cell>\n<code language=julia-1.5>\nincr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that returns the sum of the elements of an array.", "    l = l + [Int64]\n\
    \    return l\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1, 2, 3])\n\
    </cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    </cell>\n<text>\nExercise: Write a function that takes a vector and returns the\
    \ vector with its elements incremented by 1.", "    l = l + 1 \n    return l \n\
    end\n</cell>\n<code language=julia-1.5>", "    l = l + 1 \n    return l \nend\n\
    </cell>\n<code language=julia-1.5>", "    l = l + [Int64(1)]\n    return l\nend\n\
    </cell>\n<code language=julia-1.5>\nincr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise\nWrite a function\
    \ that returns the first element of a vector, plus one. Test it on [1, 2, 3] and\
    \ [5, 3, 5, 2, 3, 3, 9, 0, 123].", "    l = copy(l)\n    for i = 1:length(l)\n\
    \        l[i] = l[i] + 1\n    end\n    return l\nend\n</cell>\n<code language=julia-1.5>",
  "    l = l + 1\n    return l\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n</cell>\n<text>\nExercise: Write a function that returns the elements\
    \ of a list after removing some elements.", "    l = copy(l)\n    l = l + ones(length(l))\
    \ * 1 \n    return l\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1, 2,\
    \ 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123])\n</cell>\n<text>\nExercise: Write a function that returns the elements\
    \ of a list that satisfy a condition. For example, a function that returns the\
    \ elements of a list that satisfy the condition x^2 + y^2 > 5.", "    l = l |>\
    \ Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l\
    \ = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector", "    l = l + [Int64]\n    return\
    \ l\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the first element of a vector,\
    \ plus 1.\n    >>> first_element([2, 3, 4])\n    3\n    >>> first_element([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    6\n    \"\"\"", "    l = l + [Int64]\n    return\
    \ l\nend\n</cell>\n<code language=julia-1.5>", "    l = copy(l)\n    for i = length(l);\
    \ i >= 1; i--\n        l[i] = l[i] + 1\n    end\n    l\nend\n</cell>\n<code language=julia-1.4>\n\
    incr_list([1, 2, 3])\n</cell>\n<code language=julia-1.4>\nincr_list([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the sum of the elements of an array.", "    l = l + 1\n    return l\nend\n</cell>\n\
    <code language=julia-1.5>", "    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector",
  "    l = copy(l)\n    l = l + [Int64(1)]\n    return l\nend", "    l = l + [Int64(1)]\n\
    \    return l\nend\n</cell>\n<code language=julia-1.5>", "    l = l + [Int64(1)]\n\
    \    return l\nend\n</cell>\n<code language=julia-1.5>", "    l = copy(l)\n  \
    \  l = l + 1\n    return l\nend\n</cell>\n<code language=julia-1.5>", "    l =\
    \ l + 1 \n    return l \nend\n</cell>\n<code language=julia-1.3>", "    l = copy(l)\n\
    \    l = l + ones(length(l)) * 1 \n    return l\nend\n</cell>\n<code language=julia-1.5>",
  "    l = l + [Int64(1)]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise: Write a function that returns\
    \ the sum of the elements of a list.\nWrite a test that checks the sum of the\
    \ elements of a list with the expected value.", "    l = l + [Int64]\n    return\
    \ l\nend\n</cell>\n<code language=julia-1.5>", "    l = copy(l)\n    l = l + 1\n\
    \    return l\nend\n</cell>\n<code language=julia-1.5>", "    l = copy(l)\n  \
    \  i = length(l)\n    while i > 1\n        l[i-1] = l[i-1] + 1\n        i = i\
    \ - 1\n    end\n    return l\nend\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThanks\
    \ for your answer. Can you please explain why you use `copy` here? I thought that\
    \ `incr_list` should return a new vector, so why do you use `copy`?\n<|/ c |>\n\
    <| c |>\n`copy` creates a new vector and copies the elements from the old vector\
    \ to the new vector. `incr_list` modifies the old vector, so `copy` is needed.\n\
    <|/ c |>\n<| c |>\nThanks, I understand now. One more question: why do you use\
    \ `i-1` instead of `i`? I thought that `i` will always point to the last element\
    \ of the vector, so `i-1` will always point to the last element of the vector,\
    \ no matter what is the size of the vector.\n<|/ c |>\n<| c |>\n`i-1` will point\
    \ to the last element of the vector, but `i` will point to the last element of\
    \ the vector *before* the modification. `i` will point to the last element of\
    \ the vector after the modification.\n<|/ c |>\n<| c |>\nThanks, I understand\
    \ now. One more question: why do you use `i-1` instead of `i`? I thought that\
    \ `i` will always point to the last element of the vector, so `i-1` will always\
    \ point to the last element of the vector, no matter what is the size of the vector.\n\
    <|/ c |>\n<| a dscore=2 |>\nThe function incr_list can be implemented as a one-liner\
    \ using map:\n<code>\nincr_list = x -> map(x -> x + 1, x)\n</code>\n<|/ a tags=julia\
    \ |>\n<| c |>\nThanks for your answer. Can you please explain why you use `x ->\
    \ x + 1` here? I thought that `incr_list` should return a new vector, so why do\
    \ you use `x -> x + 1`?\n<|/ c |>\n<| c |>\n`x -> x + 1` is an anonymous function\
    \ that takes an element `x` and returns the element `x + 1`. `map` applies this\
    \ function to every element in the input vector. `incr_list = x -> map(x -> x\
    \ + 1, x)` is equivalent to `incr_list = x -> map(x -> x + 1, x)`.\n<|/ c |>\n\
    <| c |>\nThanks, I understand now. One more question: why do you use `x -> x +\
    \ 1` instead of `x ", "    l = l + 1 \n    return l \nend\n</cell>\n<code language=julia-1.5>",
  "    l = l + [Int64]\n    return l\nend", "    l = copy(l)\n    i = length(l)\n\
    \    while i > 1\n        l[i-1] = l[i-1] + 1\n        i = i-1\n    end\n    l\n\
    end\n</cell>\n<code language=julia-1.5>", "    l = l + [Int64]\n    return l\n\
    end\n</cell>\n<code language=julia-1.3>", "    l = copy(l)\n    push!(l, l[end]\
    \ + 1)\n    return l\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1, 2,\
    \ 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123])\n</cell>\n<text>\nExercise 4\nWrite a function that returns the number\
    \ of elements in a list that satisfy a certain condition. For example, a list\
    \ with only positive elements can be counted if all elements are positive.", " \
    \   l = copy(l)\n    i = length(l)\n    while i > 0\n        l[i] = l[i - 1] +\
    \ 1\n        i = i - 1\n    end\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the first element of a list, and a function that returns the last element of\
    \ a list. \nWrite a function that returns the first element of a list, and a function\
    \ that returns the last element of a list. \nWrite a function that returns the\
    \ first element of a list, and a function that returns the last element of a list.\
    \ \nWrite a function that returns the first element of a list, and a function\
    \ that returns the last element of a list. \nWrite a function that returns the\
    \ first element of a list, and a function that returns the last element of a list.\
    \ \nWrite a function that returns the first element of a list, and a function\
    \ that returns the last element of a list. \nWrite a function that returns the\
    \ first element of a list, and a function that returns the last element of a list.\
    \ \nWrite a function that returns the first element of a list, and a function\
    \ that returns the last element of a list. \nWrite a function that returns the\
    \ first element of a list, and a function that returns the last element of a list.\
    \ \nWrite a function that returns the first element of a list, and a function\
    \ that returns the last element of a list. \nWrite a function that returns the\
    \ first element of a list, and a function that returns the last element of a list.\
    \ \nWrite a function that returns the first element of a list, and a function\
    \ that returns the last element of a list. \nWrite a function that returns the\
    \ first element of a list, and a function that returns the last element of a list.\
    \ \nWrite a function that returns the first element of a list, and a function\
    \ that returns the last element of a list. \nWrite a function that returns the\
    \ first element of a list, and a function that returns the last element of a list.\
    \ \nWrite a function that returns the first element of a list, and a function\
    \ that returns the last element of a list. \nWrite a function that returns the\
    \ first element of a list, and a function that returns the last element of a list.\
    \ \nWrite a function that returns the first element of a list, and a function\
    \ that returns the last element of a list. \nWrite a function that returns the\
    \ first element of a list, and a function that returns the last element of a list.\
    \ \nWrite a function that returns the first element of a list, and a function\
    \ that returns the last element of a list. \nWrite a function that returns the\
    \ first element of a list, and a function that returns the last element of a list.\
    \ \nWrite a function that returns the first element of a list, and a function\
    \ that returns the last element of a list. \nWrite a function that returns the\
    \ first element of a list, and a function that returns the last element of a list.\
    \ \nWrite a function that returns the first element of a list, and a function\
    \ that returns the last element of a list. ", "    l = l + [Int64]\n    return\
    \ l\nend\n</cell>\n<code language=julia-1.5>", "    l = copy(l)\n    i = length(l)\n\
    \    while i > 0\n        l[i] = l[i - 1] + 1\n        i -= 1\n    end\n    return\
    \ l\nend\n</cell>\n<code language=julia-1.5>", "    l = l + [Int64(1)]\n    return\
    \ l\nend\n</cell>\n<code language=julia-1.5>", "    l = l + 1 \n    return l\n\
    end\n</cell>\n<code language=julia-1.5>", "    l = l + [Int64(1)]\n    return\
    \ l\nend\n</cell>\n<code language=julia-1.5>", "    l = l + 1 \n    return l \n\
    end\n</cell>\n<code language=julia-1.5>\nincr_list([1, 2, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nincr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the sum of the elements of a vector.\
    \ \nWrite a function that returns the product of the elements of a vector. \n\
    Write a function that returns the maximum of the elements of a vector. \nWrite\
    \ a function that returns the minimum of the elements of a vector. \nWrite a function\
    \ that returns the absolute value of a vector. \nWrite a function that returns\
    \ the sign of a vector. \nWrite a function that returns the absolute value of\
    \ a vector. \nWrite a function that returns the sign of a vector. \nWrite a function\
    \ that returns the absolute value of a vector. \nWrite a function that returns\
    \ the sign of a vector. \nWrite a function that returns the absolute value of\
    \ a vector. \nWrite a function that returns the sign of a vector. \nWrite a function\
    \ that returns the absolute value of a vector. \nWrite a function that returns\
    \ the sign of a vector. \nWrite a function that returns the absolute value of\
    \ a vector. \nWrite a function that returns the sign of a vector. \nWrite a function\
    \ that returns the absolute value of a vector. \nWrite a function that returns\
    \ the sign of a vector. \nWrite a function that returns the absolute value of\
    \ a vector. \nWrite a function that returns the sign of a vector. \nWrite a function\
    \ that returns the absolute value of a vector. \nWrite a function that returns\
    \ the sign of a vector. \nWrite a function that returns the absolute value of\
    \ a vector. \nWrite a function that returns the sign of a vector. \nWrite a function\
    \ that returns the absolute value of a vector. \nWrite a function that returns\
    \ the sign of a vector. \nWrite a function that returns the absolute value of\
    \ a vector. \nWrite a function that returns the sign of a vector. \nWrite a function\
    \ that returns the absolute value of a vector. \nWrite a function that returns\
    \ the sign of a vector. \nWrite a function that returns the absolute value of\
    \ a vector. \nWrite a function that returns the sign of a vector. \nWrite a function\
    \ that returns the absolute value of a vector. \nWrite a function that returns\
    \ the sign of a vector. \nWrite a function that returns the absolute value of\
    \ a vector. \nWrite a function that returns the sign of a vector. \nWrite a function\
    \ that returns the absolute value of a vector. \nWrite a function that returns\
    \ the sign of a vector. \nWrite a function that returns the absolute value of\
    \ a vector. \nWrite a function that returns the sign of a vector. \nWrite a function\
    \ that returns the absolute value of a vector. \nWrite a function that returns\
    \ the sign of a vector. \nWrite a function that returns the absolute value of\
    \ a vector. \nWrite a function that returns the sign of a vector. \nWrite a function\
    \ that returns the absolute value of a vector. \nWrite a function that returns\
    \ the sign of a vector. \nWrite a function that returns the absolute value of\
    \ a vector. \n", "    l = l + 1\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise: Write a function that returns\
    \ the first element of a list that satisfies a condition. For example, if the\
    \ list contains only positive numbers, return the first positive number. Otherwise,\
    \ return -1.", "    l = l + [length(l)]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise: Write a function that returns\
    \ the elements of a list after removing some elements.\nFor example, suppose you\
    \ have a list of integers and you want to remove all even numbers. Write a function\
    \ that returns a new list with all the even numbers removed.", "    l = l + [Int64(1)]\n\
    \    return l\nend\n</cell>\n<code language=julia-1.5>", "    l = l + 1\n    return\
    \ l\nend\n</cell>\n<code language=julia-1.5>", "    l = l + [Int64]\n    return\
    \ l\nend\n</cell>\n<code language=julia-1.5>", "    l = l |> Vector{Int64}\n \
    \   l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector", "    l = l + 1\n    return l\nend\n</cell>\n<code language=julia-1.5>",
  "    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector", "    l = l + [Int64]\n    return\
    \ l\nend\n</cell>\n<code language=julia-1.5>", "    l = l + [Int64]\n    return\
    \ l\nend\n</cell>\n<code language=julia-1.3>", "    l = l + 1 \n    return l \n\
    end\n</cell>\n<code language=julia-1.4>", "    l = l + [Int64(1)]\n    return\
    \ l\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the first element of a list\
    \ that satisfies a given condition. For example, if the list is [5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123], the function should return 6. Write a second function that returns\
    \ the last element of a list that satisfies a given condition. For example, if\
    \ the list is [5, 3, 5, 2, 3, 3, 9, 0, 123], the function should return 123.",
  "    l = l + [Int64(1)]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise\nWrite a function that returns\
    \ the first element of a list that satisfies a condition. For example, if the\
    \ list is [5, 3, 5, 2, 3, 3, 9, 0, 123], the function should return 6. Write a\
    \ function that returns the last element of a list that satisfies a condition.\
    \ For example, if the list is [5, 3, 5, 2, 3, 3, 9, 0, 123], the function should\
    \ return 124.", "    l = l + 1 \n    return l \nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of elements in a vector. \nFor example, incr_vec(v::Vector{Int64})\
    \ should return v.size. \nWrite a function that returns the number of elements\
    \ in a matrix. \nFor example, incr_mat(A::Matrix{Int64}) should return size(A,1).\
    \ \nWrite a function that returns the number of elements in a range. \nFor example,\
    \ incr_range(r::Range{Int64}) should return length(r). \nWrite a function that\
    \ returns the number of elements in a set. \nFor example, incr_set(s::Set{Int64})\
    \ should return length(s).", "    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector",
  "    l = l + [Int64]\n    return l\nend\n</cell>\n<code language=julia-1.5>", " \
    \   l = copy(l)\n    i = length(l)\n    while i > 1\n        l[i - 1] = l[i -\
    \ 1] + 1\n        i = i - 1\n    end\n    l\nend\n</cell>\n<code language=julia-1.5>",
  "    l = l + 1\n    return l\nend\n</cell>\n<code language=julia-1.5>\n@time incr_list([1,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\n@time incr_list([5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ and returns the same vector but with each element incremented by 1.\nFor example,\
    \ incr_vec([1, 2, 3]) should return [2, 3, 4].", "    l = l + [Int64(1)]\n   \
    \ return l\nend\n</cell>\n<code language=julia-1.4>", "    l = copy(l)\n    l\
    \ = l .+ 1\n    return l\nend\n</cell>\n<code language=julia-1.5>", "    l = l\
    \ + [Int64]\n    return l\nend\n</cell>\n<code language=julia-1.5>", "    l =\
    \ l + [length(l)]\n    return l\nend\n</cell>\n<code language=julia-1.5>", " \
    \   l = l + [Int64(1)]\n    return l\nend\n</cell>\n<code language=julia-1.3>",
  "    l = l + 1\n    return l\nend\n</cell>\n<code language=julia-1.5>", "    l =\
    \ l + [Int64]\n    return l\nend\n</cell>\n<code language=julia-1.5>", "    l\
    \ = copy(l)\n    i = length(l)\n    while i > 1\n        l[i-1] = l[i] - 1\n \
    \       i = i - 1\n    end\n    return l\nend\n</cell>\n<code language=julia-1.5>",
  "    l = l + [Int64(1)]\n    return l\nend\n</cell>\n<code language=julia-1.5>",
  "    l = l + 1 \n    return l \nend\n</cell>\n<code language=julia-1.5>", "    l\
    \ = l + 1 \n    return l \nend\n</cell>\n<code language=julia-1.5>\nincr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the first element of a vector, if it exists. Otherwise return 0.", " \
    \   l = l + [Int64(1)]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the sum of the elements of an array. \nWrite a function that returns the product\
    \ of the elements of an array. \nWrite a function that returns the maximum of\
    \ the elements of an array. \nWrite a function that returns the minimum of the\
    \ elements of an array. \nWrite a function that returns the absolute value of\
    \ the elements of an array. \nWrite a function that returns the reciprocal of\
    \ the elements of an array. \nWrite a function that returns the factorial of the\
    \ elements of an array. \nWrite a function that returns the sum of the squares\
    \ of the elements of an array. \nWrite a function that returns the product of\
    \ the squares of the elements of an array. \nWrite a function that returns the\
    \ maximum of the squares of the elements of an array. \nWrite a function that\
    \ returns the minimum of the squares of the elements of an array. \nWrite a function\
    \ that returns the absolute value of the squares of the elements of an array.\
    \ \nWrite a function that returns the reciprocal of the squares of the elements\
    \ of an array. \nWrite a function that returns the factorial of the squares of\
    \ the elements of an array. \nWrite a function that returns the sum of the cubes\
    \ of the elements of an array. \nWrite a function that returns the product of\
    \ the cubes of the elements of an array. \nWrite a function that returns the maximum\
    \ of the cubes of the elements of an array. \nWrite a function that returns the\
    \ minimum of the cubes of the elements of an array. \nWrite a function that returns\
    \ the absolute value of the cubes of the elements of an array. \nWrite a function\
    \ that returns the reciprocal of the cubes of the elements of an array. \nWrite\
    \ a function that returns the factorial of the cubes of the elements of an array.\
    \ \nWrite a function that returns the sum of the exponential of the elements of\
    \ an array. \nWrite a function that returns the product of the exponential of\
    \ the elements of an array. \nWrite a function that returns the maximum of the\
    \ exponential of the elements of an array. \nWrite a function that returns the\
    \ minimum of the exponential of the elements of an array. \nWrite a function that\
    \ returns the absolute value of the exponential of the elements of an array. \n\
    Write a function that returns the reciprocal of the exponential of the elements\
    \ of an array. \nWrite a function that returns the factorial of the exponential\
    \ of the elements of an array. \nWrite a function that returns the sum of the\
    \ natural logarithms of the elements of an array. \nWrite a function that returns\
    \ the product of the natural logarithms of the elements of an array. \nWrite a\
    \ function that returns the maximum of the natural logarithms of the elements\
    \ of an array. \nWrite a function that returns the minimum of the natural logarithms\
    \ of the elements of an array. \nWrite a function that returns the absolute value\
    \ of the natural logarithms of the elements of an array. \nWrite a function that\
    \ returns the reciprocal of the natural logarithms of the ", "    l = l + [Int64]\n\
    \    return l\nend\n</cell>\n<code language=julia-1.5>", "    l = l + 1 \n   \
    \ return l \nend\n</cell>\n<code language=julia-1.5>\nincr_list([1, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the first element of a vector,\
    \ incremented by 1.\nWrite a function that returns the last element of a vector,\
    \ decremented by 1.\nWrite a function that returns the average of a vector.\n\
    Write a function that returns the median of a vector.\nWrite a function that returns\
    \ the mode of a vector.\nWrite a function that returns the standard deviation\
    \ of a vector.\nWrite a function that returns the variance of a vector.\nWrite\
    \ a function that returns the sum of a vector.\nWrite a function that returns\
    \ the product of a vector.\nWrite a function that returns the minimum of a vector.\n\
    Write a function that returns the maximum of a vector.\nWrite a function that\
    \ returns the absolute value of a vector.\nWrite a function that returns the absolute\
    \ value of a vector.\nWrite a function that returns the absolute value of a vector.\n\
    Write a function that returns the absolute value of a vector.\nWrite a function\
    \ that returns the absolute value of a vector.\nWrite a function that returns\
    \ the absolute value of a vector.\nWrite a function that returns the absolute\
    \ value of a vector.\nWrite a function that returns the absolute value of a vector.\n\
    Write a function that returns the absolute value of a vector.\nWrite a function\
    \ that returns the absolute value of a vector.\nWrite a function that returns\
    \ the absolute value of a vector.\nWrite a function that returns the absolute\
    \ value of a vector.\nWrite a function that returns the absolute value of a vector.\n\
    Write a function that returns the absolute value of a vector.\nWrite a function\
    \ that returns the absolute value of a vector.\nWrite a function that returns\
    \ the absolute value of a vector.\nWrite a function that returns the absolute\
    \ value of a vector.\nWrite a function that returns the absolute value of a vector.\n\
    Write a function that returns the absolute value of a vector.\nWrite a function\
    \ that returns the absolute value of a vector.\nWrite a function that returns\
    \ the absolute value of a vector.\nWrite a function that returns the absolute\
    \ value of a vector.\nWrite a function that returns the absolute value of a vector.\n\
    Write a function that returns the absolute value of a vector.\nWrite a function\
    \ that returns the absolute value of a vector.\nWrite a function that returns\
    \ the absolute value of a vector.\nWrite a function that returns the absolute\
    \ value of a vector.\nWrite a function that returns the absolute value of a vector.\n\
    Write a function that returns the absolute value of a vector.\nWrite a function\
    \ that returns the absolute value of a vector.\nWrite a function that returns\
    \ the absolute value of a vector.\nWrite a function that returns the absolute\
    \ value of a vector.\nWrite a function that returns the absolute value of a vector.\n\
    Write a function that returns the absolute value of a vector.\nWrite a function\
    \ that returns the absolute value of a vector.\nWrite a function that returns\
    \ the absolute value of a vector.\nWrite a function that returns the absolute\
    \ value of a vector.\nWrite a function that returns the absolute value of a vector.\n\
    Write a function that returns the absolute value of a vector.\nWrite ", "    l\
    \ = copy(l)\n    l = l + [Int64]\n    return l\nend\n</cell>\n<code language=julia-1.5>",
  "    l = l + 1 \n    return l \nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n</cell>\n<text>\nExercise: Write a function that returns the sum of\
    \ the elements of an array. \nThe function should accept a vector of Int64 elements\
    \ and return an Int64 value.", "    l = l + [Int64]\n    return l\nend\n</cell>\n\
    <code language=julia-1.3>", "    l = l + [Int64]\n    return l\nend\n</cell>\n\
    <code language=julia-1.5>", "    l = l + 1 \n    return l \nend\n</cell>\n<code\
    \ language=julia-1.5>\nincr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that takes a vector of integers and returns the same vector but with\
    \ each element incremented by 1.", "    l = copy(l)\n    l = l + 1\n    return\
    \ l\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n</cell>\n\
    <text>\nExercise: Write a function that takes a vector and returns the vector\
    \ with its elements incremented by 1.", "    l = l + [Int64]\n    return l\nend\n\
    </cell>\n<code language=julia-1.5>", "    l = l + [Int64]\n    return l\nend\n\
    </cell>\n<code language=julia-1.5>", "    l = l + [Int64(1)]\n    return l\nend\n\
    </cell>\n<code language=julia-1.5>\nincr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that returns the sum of the elements of an array.", "    l = l + 1\
    \ \n    return l \nend\n</cell>\n<code language=julia-1.5>\nincr_list([1, 2, 3])\n\
    </cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector and returns\
    \ the vector with its elements incremented by 1.", "    l = l + [Int64]\n    return\
    \ l\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a vector and returns the vector\
    \ with its elements incremented by 1.\n>>> incr_vector([1, 2, 3])\n[2, 3, 4]\n\
    >>> incr_vector([5, 3, 5, 2, 3, 3, 9, 0, 123])\n[6, 4, 6, 3, 4, 4, 10, 1, 124]\n\
    </text>\n<code language=julia-1.5>", "    l = copy(l)\n    length(l) += 1 \n \
    \   l\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n</cell>\n\
    <text>\nExercise: Write a function that returns the elements of a list after removing\
    \ all occurrences of an element from a given list.", "    l = l + [Int64]\n  \
    \  return l\nend\n</cell>\n<code language=julia-1.5>", "    l = l + 1 \n    return\
    \ l \nend\n</cell>\n<code language=julia-1.5>", "    l = l + 1 \n    return l\
    \ \nend\n</cell>\n<code language=julia-1.4>", "    l = l + [Int64(1)]\n    return\
    \ l\nend\n</cell>\n<code language=julia-1.5>", "    l = copy(l)\n    l = l + 1\n\
    \    return l\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1, 2, 3])\n\
    </cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of elements\
    \ in a vector that are greater than a specified value.", "    l = l + 1 \n   \
    \ return l \nend\n</cell>\n<code language=julia-1.5>", "    l = l + [Int64(1)]\n\
    \    return l\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1, 2, 3])\n\
    </cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the first element of\
    \ a list that satisfies a condition. For example, if the list contains only positive\
    \ numbers, return the first positive number. Otherwise, return -1.", "    l =\
    \ l + [Int64(1)]\n    return l\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n</cell>\n<text>\nExercise 4\nWrite a function that returns the sum\
    \ of the elements of an array. \n    >>> sum([1, 2, 3])\n    6\n    >>> sum([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    6\n    \"\"\"", "    l = l + [Int64(1)]\n  \
    \  return l\nend\n</cell>\n<code language=julia-1.5>", "    l = copy(l)\n    l\
    \ = l + [length(l)]\n    return l\nend\n</cell>\n<code language=julia-1.5>", " \
    \   l = l + 1\n    return l\nend", "    l = l + [Int64]\n    return l\nend\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that takes a list of numbers and returns the list with its elements\
    \ multiplied by 2.\n>>> incr_list_mult([1, 2, 3])\n[2, 4, 6]\n>>> incr_list_mult([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n[5, 15, 35, 5, 15, 35, 35, 95, 125, 150]\n</text>\n\
    <code language=julia-1.5>", "    l = l + [Int64]\n    return l\nend\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that returns the sum of the elements of an array.", "    l = l + [length(l)]\n\
    \    return l\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1, 2, 3])\n\
    </cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the first element of\
    \ a vector, incremented by 1.", "    l = l + 1\n    return l\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@time incr_list([1, 2, 3])\n@time incr_list([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise: Write a function that returns\
    \ the first element of a list that satisfies a condition. For example, suppose\
    \ you have a list of integers and you want to find the first element that satisfies\
    \ the condition $x^2 + y^2 = z^2$. Write a function that returns the first element\
    \ that satisfies this condition. For example, suppose you have a list of integers\
    \ and you want to find the first element that satisfies the condition $x^2 + y^2\
    \ = z^2$. Write a function that returns the first element that satisfies this\
    \ condition. For example, suppose you have a list of integers and you want to\
    \ find the first element that satisfies the condition $x^2 + y^2 = z^2$. Write\
    \ a function that returns the first element that satisfies this condition. For\
    \ example, suppose you have a list of integers and you want to find the first\
    \ element that satisfies the condition $x^2 + y^2 = z^2$. Write a function that\
    \ returns the first element that satisfies this condition. For example, suppose\
    \ you have a list of integers and you want to find the first element that satisfies\
    \ the condition $x^2 + y^2 = z^2$. Write a function that returns the first element\
    \ that satisfies this condition. For example, suppose you have a list of integers\
    \ and you want to find the first element that satisfies the condition $x^2 + y^2\
    \ = z^2$. Write a function that returns the first element that satisfies this\
    \ condition. For example, suppose you have a list of integers and you want to\
    \ find the first element that satisfies the condition $x^2 + y^2 = z^2$. Write\
    \ a function that returns the first element that satisfies this condition. For\
    \ example, suppose you have a list of integers and you want to find the first\
    \ element that satisfies the condition $x^2 + y^2 = z^2$. Write a function that\
    \ returns the first element that satisfies this condition. For example, suppose\
    \ you have a list of integers and you want to find the first element that satisfies\
    \ the condition $x^2 + y^2 = z^2$. Write a function that returns the first element\
    \ that satisfies this condition. For example, suppose you have a list of integers\
    \ and you want to find the first element that satisfies the condition $x^2 + y^2\
    \ = z^2$. Write a function that returns the first element that satisfies this\
    \ condition. For example, suppose you have a list of integers and you want to\
    \ find the first element that satisfies the condition $x^2 + y^2 = z^2$. Write\
    \ a function that returns the first element that ", "    l = l + [Int64]\n   \
    \ return l\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector and returns the same\
    \ vector but with each element incremented by 1.", "    l = copy(l)\n    for i\
    \ = 1:length(l)\n        l[i] = l[i] + 1\n    end\n    return l\nend\n</cell>\n\
    <code language=julia-1.5>", "    l = copy(l)\n    i = length(l)\n    \n    while\
    \ i > 1\n        l[i-1] = l[i] - 1\n        i = i-1\n    end\n    \n    return\
    \ l\nend\n</cell>\n<code language=julia-1.3>", "    l = l + 1 \n    return l \n\
    end\n</cell>\n<code language=julia-1.5>\nincr_list([1, 2, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nincr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the sum of the elements of a list.",
  "    l = copy(l)\n    l = l + ones(length(l)) * 1 \n    return l\nend\n</cell>\n\
    <code language=julia-1.5>", "    l = copy(l)\n    l = l + 1\n    return l\nend",
  "    l = l + 1 \n    return l \nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n</cell>\n<text>\nExercise 3\nWrite a function that returns the sum\
    \ of the elements of an array.", "    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector",
  "    l = l + 1 \n    return l \nend\n</cell>\n<code language=julia-1.5>", "    l\
    \ = l + [Int64(1)]\n    return l\nend\n</cell>\n<code language=julia-1.5>", " \
    \   l = copy(l)\n    i = length(l)\n    while i > 1\n        l[i-1] = l[i] - 1\n\
    \        i = i - 1\n    end\n    return l\nend\n</cell>\n<code language=julia-1.5>",
  "    l = l + [Int64]\n    return l\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the sum\
    \ of the elements of an array. \nWrite a function that returns the product of\
    \ the elements of an array. \nWrite a function that returns the maximum of the\
    \ elements of an array. \nWrite a function that returns the minimum of the elements\
    \ of an array. \nWrite a function that returns the absolute value of the elements\
    \ of an array. \nWrite a function that returns the reciprocal of the elements\
    \ of an array. \nWrite a function that returns the sum of the squares of the elements\
    \ of an array. \nWrite a function that returns the product of the squares of the\
    \ elements of an array. \nWrite a function that returns the maximum of the squares\
    \ of the elements of an array. \nWrite a function that returns the minimum of\
    \ the squares of the elements of an array. \nWrite a function that returns the\
    \ absolute value of the squares of the elements of an array. \nWrite a function\
    \ that returns the reciprocal of the squares of the elements of an array. \nWrite\
    \ a function that returns the sum of the cubes of the elements of an array. \n\
    Write a function that returns the product of the cubes of the elements of an array.\
    \ \nWrite a function that returns the maximum of the cubes of the elements of\
    \ an array. \nWrite a function that returns the minimum of the cubes of the elements\
    \ of an array. \nWrite a function that returns the absolute value of the cubes\
    \ of the elements of an array. \nWrite a function that returns the reciprocal\
    \ of the cubes of the elements of an array. \nWrite a function that returns the\
    \ sum of the exponential of the elements of an array. \nWrite a function that\
    \ returns the product of the exponential of the elements of an array. \nWrite\
    \ a function that returns the maximum of the exponential of the elements of an\
    \ array. \nWrite a function that returns the minimum of the exponential of the\
    \ elements of an array. \nWrite a function that returns the absolute value of\
    \ the exponential of the elements of an array. \nWrite a function that returns\
    \ the reciprocal of the exponential of the elements of an array. \nWrite a function\
    \ that returns the sum of the natural logarithms of the elements of an array.\
    \ \nWrite a function that returns the product of the natural logarithms of the\
    \ elements of an array. \nWrite a function that returns the maximum of the natural\
    \ logarithms of the elements of an array. \nWrite a function that returns the\
    \ minimum of the natural logarithms of the elements of an array. \nWrite a function\
    \ that returns the absolute value of the natural logarithms of the elements of\
    \ an array. \nWrite a function that returns the reciprocal of the natural logarithms\
    \ of the elements of an array. \nWrite a function that returns the sum of the\
    \ absolute value of the elements of an array. \nWrite a function that returns\
    \ the product of the absolute value of the elements of an array. \nWrite a function\
    \ that returns the maximum of the absolute value of the elements of an array.\
    \ \nWrite a function that returns the minimum of the absolute value of the elements\
    \ of an array", "    l = l + 1\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 4\nWrite a function that returns\
    \ the first element of a vector, plus 1.\n    >>> first_element([2, 3, 4])\n \
    \   3\n    >>> first_element([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    6\n    \"\"\"",
  "    l = l .+ 1\n    return l\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the sum\
    \ of the elements of an array. \nWrite a function that returns the sum of the\
    \ elements of a vector. \nWrite a function that returns the sum of the elements\
    \ of a matrix. \nWrite a function that returns the sum of the elements of a vector.\
    \ \nWrite a function that returns the sum of the elements of a vector. \nWrite\
    \ a function that returns the sum of the elements of a vector. \nWrite a function\
    \ that returns the sum of the elements of a vector. \nWrite a function that returns\
    \ the sum of the elements of a vector. \nWrite a function that returns the sum\
    \ of the elements of a vector. \nWrite a function that returns the sum of the\
    \ elements of a vector. \nWrite a function that returns the sum of the elements\
    \ of a vector. \nWrite a function that returns the sum of the elements of a vector.\
    \ \nWrite a function that returns the sum of the elements of a vector. \nWrite\
    \ a function that returns the sum of the elements of a vector. \nWrite a function\
    \ that returns the sum of the elements of a vector. \nWrite a function that returns\
    \ the sum of the elements of a vector. \nWrite a function that returns the sum\
    \ of the elements of a vector. \nWrite a function that returns the sum of the\
    \ elements of a vector. \nWrite a function that returns the sum of the elements\
    \ of a vector. \nWrite a function that returns the sum of the elements of a vector.\
    \ \nWrite a function that returns the sum of the elements of a vector. \nWrite\
    \ a function that returns the sum of the elements of a vector. \nWrite a function\
    \ that returns the sum of the elements of a vector. \nWrite a function that returns\
    \ the sum of the elements of a vector. \nWrite a function that returns the sum\
    \ of the elements of a vector. \nWrite a function that returns the sum of the\
    \ elements of a vector. \nWrite a function that returns the sum of the elements\
    \ of a vector. \nWrite a function that returns the sum of the elements of a vector.\
    \ \nWrite a function that returns the sum of the elements of a vector. \nWrite\
    \ a function that returns the sum of the elements of a vector. \nWrite a function\
    \ that returns the sum of the elements of a vector. \nWrite a function that returns\
    \ the sum of the elements of a vector. \nWrite a function that returns the sum\
    \ of the elements of a vector. \nWrite a function that returns the sum of the\
    \ elements of a vector. \nWrite a function that returns the sum of the elements\
    \ of a vector. \nWrite a function that returns the sum of the elements of a vector.\
    \ \nWrite a function that returns the sum of the elements of a vector. \nWrite\
    \ a function that returns the sum of the elements of a vector. \nWrite a function\
    \ that returns the sum of the elements of a vector. \nWrite a function that returns\
    \ the sum of the elements of a vector. \nWrite a function that returns the sum\
    \ of the elements of a vector. \nWrite ", "    l = l + 1\n    return l\nend\n\
    </cell>\n<code language=julia-1.5>\n@time incr_list([1, 2, 3])\n</cell>\n<code\
    \ language=julia-1.5>\n@time incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the sum of the elements of a\
    \ given list. \nThe function should work for both vectors and matrices.", "  \
    \  l = copy(l)\n    i = length(l)\n    while i > 1\n        l[i - 1] = l[i - 1]\
    \ + 1\n        i = i - 1\n    end\n    l\nend\n</code>\n<|/ a dscore=1 |>\n<|\
    \ a dscore=1 |>\nI came up with a solution using only built-in functions:\n<code>",
  "    l = l + [Int64(1)]\n    return l\nend", "    l = l + 1 \n    return l \nend\n\
    </cell>\n<code language=julia-1.5>\nincr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that returns the sum of the elements in a vector.\nWrite a function\
    \ that returns the product of the elements in a vector.\nWrite a function that\
    \ returns the maximum of the elements in a vector.\nWrite a function that returns\
    \ the minimum of the elements in a vector.\nWrite a function that returns the\
    \ absolute value of the elements in a vector.\nWrite a function that returns the\
    \ sign of the elements in a vector.\nWrite a function that returns the absolute\
    \ value of the elements in a vector.\nWrite a function that returns the sign of\
    \ the elements in a vector.\nWrite a function that returns the absolute value\
    \ of the elements in a vector.\nWrite a function that returns the sign of the\
    \ elements in a vector.\nWrite a function that returns the absolute value of the\
    \ elements in a vector.\nWrite a function that returns the sign of the elements\
    \ in a vector.\nWrite a function that returns the absolute value of the elements\
    \ in a vector.\nWrite a function that returns the sign of the elements in a vector.\n\
    Write a function that returns the absolute value of the elements in a vector.\n\
    Write a function that returns the sign of the elements in a vector.\nWrite a function\
    \ that returns the absolute value of the elements in a vector.\nWrite a function\
    \ that returns the sign of the elements in a vector.\nWrite a function that returns\
    \ the absolute value of the elements in a vector.\nWrite a function that returns\
    \ the sign of the elements in a vector.\nWrite a function that returns the absolute\
    \ value of the elements in a vector.\nWrite a function that returns the sign of\
    \ the elements in a vector.\nWrite a function that returns the absolute value\
    \ of the elements in a vector.\nWrite a function that returns the sign of the\
    \ elements in a vector.\nWrite a function that returns the absolute value of the\
    \ elements in a vector.\nWrite a function that returns the sign of the elements\
    \ in a vector.\nWrite a function that returns the absolute value of the elements\
    \ in a vector.\nWrite a function that returns the sign of the elements in a vector.\n\
    Write a function that returns the absolute value of the elements in a vector.\n\
    Write a function that returns the sign of the elements in a vector.\nWrite a function\
    \ that returns the absolute value of the elements in a vector.\nWrite a function\
    \ that returns the sign of the elements in a vector.\nWrite a function that returns\
    \ the absolute value of the elements in a vector.\nWrite a function that returns\
    \ the sign of the elements in a vector.\nWrite a function that returns the absolute\
    \ value of the elements in a vector.\nWrite a function that returns the sign of\
    \ the elements in a vector.\nWrite a function that returns the absolute value\
    \ of the elements in a vector.\nWrite a function that returns the sign of the\
    \ elements in a vector.\nWrite a function that returns the absolute value of the\
    \ elements in a vector.\nWrite a function that returns the sign of the elements\
    \ in a vector.\nWrite a function that returns the absolute value of the elements\
    \ in a vector.\nWrite a function that returns the sign of the elements in a vector.\n\
    Write a function that returns the absolute value of the elements in a vector.\n\
    Write a function that returns the sign of the elements in a vector.\nWrite a function\
    \ that returns the absolute value of the elements in a vector.\nWrite a function\
    \ that ", "    l = l + 1\n    return l\nend\n</cell>\n<code language=julia-1.5>",
  "    l = l + [Int64(1)]\n    return l\nend", "    l = copy(l)\n    l = l + ones(length(l))\
    \ * 1 \n    return l\nend\n</cell>\n<code language=julia-1.5>", "    l = l + [Int64(1)]\n\
    \    return l\nend\n</cell>\n<code language=julia-1.5>", "    l = l + [length(l)+1]\n\
    \    return l\nend", "    l = l .+ 1\n    return l\nend\n</cell>\n<code language=julia-1.5>",
  "    l = l + 1 \n    return l \nend\n</cell>\n<code language=julia-1.5>", "    l\
    \ = l + [Int64]\n    return l\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n</cell>\n<text>\nExercise: Write a function that returns a list with\
    \ elements incremented by 1 until a condition is met. For example, if the list\
    \ is [1, 2, 3, 4], the function should return [2, 3, 4] until the number 3 is\
    \ encountered. Then, it should return [3, 4, 4] until the number 4 is encountered.",
  "    l = copy(l)\n    l = l + 1\n    return l\nend\n</cell>\n<code language=julia-1.5>",
  "    l = l + 1\n    return l\nend\n</cell>\n<code language=julia-1.5>\n@time incr_list([1,\
    \ 2, 3])\n@time incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the sum of the elements of a vector. \nWrite\
    \ a function that returns the sum of the elements of a vector. \nWrite a function\
    \ that returns the sum of the elements of a vector. \nWrite a function that returns\
    \ the sum of the elements of a vector. \nWrite a function that returns the sum\
    \ of the elements of a vector. \nWrite a function that returns the sum of the\
    \ elements of a vector. \nWrite a function that returns the sum of the elements\
    \ of a vector. \nWrite a function that returns the sum of the elements of a vector.\
    \ \nWrite a function that returns the sum of the elements of a vector. \nWrite\
    \ a function that returns the sum of the elements of a vector. \nWrite a function\
    \ that returns the sum of the elements of a vector. \nWrite a function that returns\
    \ the sum of the elements of a vector. \nWrite a function that returns the sum\
    \ of the elements of a vector. \nWrite a function that returns the sum of the\
    \ elements of a vector. \nWrite a function that returns the sum of the elements\
    \ of a vector. \nWrite a function that returns the sum of the elements of a vector.\
    \ \nWrite a function that returns the sum of the elements of a vector. \nWrite\
    \ a function that returns the sum of the elements of a vector. \nWrite a function\
    \ that returns the sum of the elements of a vector. \nWrite a function that returns\
    \ the sum of the elements of a vector. \nWrite a function that returns the sum\
    \ of the elements of a vector. \nWrite a function that returns the sum of the\
    \ elements of a vector. \nWrite a function that returns the sum of the elements\
    \ of a vector. \nWrite a function that returns the sum of the elements of a vector.\
    \ \nWrite a function that returns the sum of the elements of a vector. \nWrite\
    \ a function that returns the sum of the elements of a vector. \nWrite a function\
    \ that returns the sum of the elements of a vector. \nWrite a function that returns\
    \ the sum of the elements of a vector. \nWrite a function that returns the sum\
    \ of the elements of a vector. \nWrite a function that returns the sum of the\
    \ elements of a vector. \nWrite a function that returns the sum of the elements\
    \ of a vector. \nWrite a function that returns the sum of the elements of a vector.\
    \ \nWrite a function that returns the sum of the elements of a vector. \nWrite\
    \ a function that returns the sum of the elements of a vector. \nWrite a function\
    \ that returns the sum of the elements of a vector. \nWrite a function that returns\
    \ the sum of the elements of a vector. \nWrite a function that returns the sum\
    \ of the elements of a vector. \nWrite a function that returns the sum of the\
    \ elements of a vector. \nWrite a function that returns the sum of the elements\
    \ of a vector. \nWrite a function that returns the sum of the elements of a vector.\
    \ \nWrite a function that returns the sum of the elements of a vector. \nWrite\
    \ a function that returns the sum of the elements of a "]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
