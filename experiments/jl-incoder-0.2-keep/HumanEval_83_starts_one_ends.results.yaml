name: HumanEval_83_starts_one_ends
language: julia
results:
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 1 \n        then return 1\n \
    \       else return 0\n    end\nend\n\"\"\"\n    Given a positive integer n, return\
    \ the count of the numbers of n-digit\n    positive integers that start or end\
    \ with 1.\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3)\
    \ == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp295740an.jl:7\nin expression starting at /tmp/tmp295740an.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return 0 \n    else\
    \ \n        return 1 + starts_one_ends(n//10) + starts_one_ends(n%10) \nend\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(123456789)\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3)\
    \ == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_74c7nxg.jl:11\nin expression starting at\
    \ /tmp/tmp_74c7nxg.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 1 \n        then return 1\n \
    \       else return starts_one_ends(n-1) + ends_one_starts(n-1)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpoh_o1490.jl:7\nin expression starting at /tmp/tmpoh_o1490.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return 0 \n    else\
    \ \n        return 1 + starts_one_ends(n//10) + starts_one_ends(n%10) \nend\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(123456789)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that computes the factorial of a given positive integer\
    \ n.\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppj6kmj7r.jl:11\nin expression starting at\
    \ /tmp/tmppj6kmj7r.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n \
    \   else if n == 1 \n        then return 1\n    else \n        local count = 0\n\
    \        for i = 2 to n \n            do if n % i == 0 \n                then\
    \ count = count + 1\n                else break\n        end\n        return count\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3)\
    \ == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpt50kjp5x.jl:7\nin expression starting at /tmp/tmpt50kjp5x.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 0 \n        error(\"n must be\
    \ positive\")\n    else if n == 0 \n        1\n    else \n        1 + starts_one_ends(n-1)\n\
    end\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(100)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(100000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(100000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(1000000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000001)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000002)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000003)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000004)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000005)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000006)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000007)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000008)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000009)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000010)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000011)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000012)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000013)\n</cell>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\
    \t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxw6ewi2r.jl:8\nin expression starting at /tmp/tmpxw6ewi2r.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return 0 \n    else\
    \ \n        return 1 + starts_one_ends(n//10) \nend\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(10000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(100000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000001)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000002)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000003)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000004)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000005)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000006)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000007)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000008)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000009)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000010)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000011)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000012)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000013)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(\nusing Test\n\n@testset begin\n\n\
    candidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgxifqdch.jl:11\nin expression starting at\
    \ /tmp/tmpgxifqdch.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return n\n    else\
    \ \n        return starts_one_ends(n//10) + n%10 == 1 ? 1 : 0\nend\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(100)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(100000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(100000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(1000000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10000000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(10000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(100000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(10000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(100000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(10000000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3)\
    \ == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprvt5zvde.jl:11\nin expression starting at\
    \ /tmp/tmprvt5zvde.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n \
    \   else if n == 1 \n        then return 1\n    else \n        count_starts_ends(n-1)\
    \ + count_starts_ends(n-2) + count_starts_ends(n-3) + count_starts_ends(n-4) +\
    \ count_starts_ends(n-5) + count_starts_ends(n-6)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.3>\ncount_starts_ends(10)\n</cell>\n<code language=julia-1.3>\n\
    count_starts_ends(100)\n</cell>\n<code language=julia-1.3>\ncount_starts_ends(1000)\n\
    </cell>\n<code language=julia-1.3>\ncount_starts_ends(10000)\n</cell>\n<code language=julia-1.3>\n\
    count_starts_ends(100000)\n</cell>\n<code language=julia-1.3>\ncount_starts_ends(1000000)\n\
    </cell>\n<code language=julia-1.3>\ncount_starts_ends(10000000)\n</cell>\n<code\
    \ language=julia-1.3>\ncount_starts_ends(100000000)\n</cell>\n<code language=julia-1.3>\n\
    count_starts_ends(1000000000)\n</cell>\n<code language=julia-1.3>\ncount_starts_ends(10000000000)\n\
    </cell>\n<code language=julia-1.3>\ncount_starts_ends(100000000000)\n</cell>\n\
    <code language=julia-1.3>\ncount_starts_ends(1000000000000)\n</cell>\n<code language=julia-1.3>\n\
    count_starts_ends(10000000000000)\n</cell>\n<code language=julia-1.3>\ncount_starts_ends(100000000000000)\n\
    </cell>\n<code language=julia-1.3>\ncount_starts_ends(1000000000000000)\n</cell>\n\
    <code language=julia-1.3>\ncount_starts_ends(10000000000000000)\n</cell>\n<code\
    \ language=julia-1.3>\ncount_starts_ends(100000000000000000)\n</cell>\n<code language=julia-1.3>\n\
    count_starts_ends(1000000000000000000)\n</cell>\n<code language=julia-1.3>\ncount_starts_ends(10000000000000000000)\n\
    </cell>\n<code language=julia-1.3>\ncount_starts_ends(100000000000000000000)\n\
    </cell>\n<code language=julia-1.3>\ncount_starts_ends(1000000000000000000000)\n\
    </cell>\n<code language=julia-1.3>\ncount_starts_ends(10000000000000000000000)\n\
    </cell>\n<code language=julia-1.3>\ncount_starts_ends(100000000000000000000000)\n\
    </cell>\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpp95jbq50.jl:7\nin expression starting at /tmp/tmpp95jbq50.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 1 \n        then return 1 \n\
    \        else return 0 \n    end\nend\n\"\"\"\n    Given a positive integer n,\
    \ return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3)\
    \ == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp9y53n1m8.jl:7\nin expression starting at /tmp/tmp9y53n1m8.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 1 \n        then return 1\n \
    \   else \n        sum = 0\n        for i = 2 to n \n            sum = (sum *\
    \ i) + starts_one_ends(i-1)\n        return sum\nend\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(10)\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the number of positive integers that end with 2.\nusing Test\n\n@testset begin\n\
    \ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp2he6gaj0.jl:7\nin expression starting at /tmp/tmp2he6gaj0.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 1 \n        then return 1\n \
    \   else if n == 0 \n        then return 0\n    else \n        local i = 1\n \
    \       local count = 0\n        while i <= n \n            do \n            \
    \    if ((i mod 10) == 1) \n                    then count = count + 1\n     \
    \           end\n                i = i + 1\n            end\n        return count\n\
    \    end\nend\n\"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3)\
    \ == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpf2lvbvze.jl:7\nin expression starting at /tmp/tmpf2lvbvze.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        then return 1\n \
    \   else \n        count_starts_ends(n) \nend\n\"\"\"\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3)\
    \ == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp5tywzp39.jl:7\nin expression starting at /tmp/tmp5tywzp39.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 1 \n        then return 1\n \
    \       else return 0\n    else if n < 1 \n        then return 0\n        else\
    \ return starts_one_ends(n-1) + ends_one_starts(n-1)\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n\
    \    positive integers that start or end with 1.\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp178ocktv.jl:7\nin expression starting at /tmp/tmp178ocktv.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 1 \n        then return 1\n \
    \   else if n == 0 \n        then return 0\n    else \n        count_starts_ends(n-1)\
    \ + count_starts_ends(n+1)\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    count_starts_ends(10)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of positive integers less than or equal to n.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpu5usgcpa.jl:7\nin expression starting at /tmp/tmpu5usgcpa.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 1 \n        then return 1 \n\
    \        else return 0 \n    else \n        let\n            digits = digits(n)\
    \ \n            digits_start = digits[digits.length - 1] \n            digits_end\
    \ = digits[digits.length - 2] \n        in \n            if digits_start == 1\
    \ \n                then starts_one_ends(digits_end - 1) \n                else\
    \ starts_one_ends(digits_end - 1) + 1 \n        end\n</code>\n<|/ a dscore=1 |>\n\
    <| a dscore=0 |>\nI wrote a recursive function which solves the problem in O(log(n))\
    \ time complexity. \n<code>\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3)\
    \ == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpt5bco56k.jl:7\nin expression starting at /tmp/tmpt5bco56k.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return 1 \n    else\
    \ \n        return starts_one_ends(n//10) + 1 \nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n\
    \    positive integers that start or end with 1.\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyxbz0btz.jl:11\nin expression starting at\
    \ /tmp/tmpyxbz0btz.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return 0 \n    else\
    \ \n        return starts_one_ends(n//10) + 1 \nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpydjpkse9.jl:11\nin expression starting at\
    \ /tmp/tmpydjpkse9.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 1 \n        then return 1 \n\
    \        else return 0 \n    else \n        n <- starts_one_ends(n-1) \n     \
    \   if n % 10 == 1 \n            then return 1 + starts_one_ends(n//10) \n   \
    \         else return starts_one_ends(n//10) \nend\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100)\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\
    \t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpolj_b07j.jl:7\nin expression starting at /tmp/tmpolj_b07j.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n \
    \   else if n == 1 \n        then return 1\n    else \n        return starts_one_ends(n-1)\
    \ + ends_one_starts(n-1)\nend\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\
    \t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpziexyvmb.jl:7\nin expression starting at /tmp/tmpziexyvmb.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n \
    \   else if n == 1 \n        then return 1\n    else \n        local count = 1\n\
    \        local i = 2\n        while i <= n \n            do if i%10 == 1 \n  \
    \              then count = count + 1\n                else count = count + 1\n\
    \            end\n            i = i + 1\n        end\n        return count\nend\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(10)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(100)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(1000)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(10000)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(100000)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(1000000)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(10000000)\n</cell>\n<code\
    \ language=julia-1.3>\nstarts_one_ends(100000000)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(1000000000)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(10000000000)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(100000000000)\n</cell>\n<code\
    \ language=julia-1.3>\nstarts_one_ends(1000000000000)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(10000000000000)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(100000000000000)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(1000000000000000)\n</cell>\n\
    <code language=julia-1.3>\nstarts_one_ends(10000000000000000)\n</cell>\n<code\
    \ language=julia-1.3>\nstarts_one_ends(100000000000000000)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(1000000000000000000)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(10000000000000000000)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(100000000000000000000)\n</cell>\n\
    <code language=julia-1.3>\nstarts_one_ends(1000000000000000000000)\n</cell>\n\
    <code language=julia-1.3>\nstarts_one_ends(10000000000000000000000)\n</cell>\n\
    <code language=julia-1.3>\nstarts_one_ends(100000000000000000000000)\n</cell>\n\
    <code language=julia-1.3>\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3)\
    \ == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpyiiwyfes.jl:7\nin expression starting at /tmp/tmpyiiwyfes.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return 0 \n    else\
    \ \n        return 1 + starts_one_ends(n / 10) \nend\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(10)\n</cell>\n<text>\nExercise: Write a function that returns\
    \ the number of positive integers that start or end with 2.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpad1p8ag2.jl:11\nin expression starting at\
    \ /tmp/tmpad1p8ag2.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 0 \n        error(\"n must be\
    \ positive\")\n    else if n == 0 \n        1\n    else \n        1 + starts_one_ends(n\
    \ / 10)\n    end\nend\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of positive\
    \ integers that start or end with 2.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\
    \t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_ak_a7ci.jl:8\nin expression starting at /tmp/tmp_ak_a7ci.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0 \n\
    \    else \n        local i::Int64 = 1\n        local count::Int64 = 0\n     \
    \   while i <= n \n            do if i%10 == 1 \n                then count =\
    \ count + 1\n                else return 0 \n            end\n            i =\
    \ i + 1\n        end\n        return count\n    end\nend\n</cell>\n<code language=julia-1.4>\n\
    using Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpi1ljf8iz.jl:7\nin expression starting at /tmp/tmpi1ljf8iz.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n \
    \   else if n == 1 \n        then return 1\n    else \n        return starts_one_ends(n-1)\
    \ + ends_one_starts(n-1)\nend\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\
    \t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpvjkdoz04.jl:7\nin expression starting at /tmp/tmpvjkdoz04.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return 0 \n    else\
    \ \n        return 1 + starts_one_ends(n / 10) \nend\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of positive integers that start or end with 2.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptnmpgwth.jl:11\nin expression starting at\
    \ /tmp/tmptnmpgwth.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 0 \n        error(\"n must be\
    \ positive\")\n    else if n == 0 \n        1\n    else \n        1 + starts_one_ends(n\
    \ - 1)\nend\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(100)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(1000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000001)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000002)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000003)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000004)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000005)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000006)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000007)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000008)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000009)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000010)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000011)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000012)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000013)\n</cell>\nusing Test\n\
    \n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\
    \t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa_q1_k43.jl:8\nin expression starting at /tmp/tmpa_q1_k43.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0 \n\
    \    else if n == 1 \n        then return 1 \n    else \n        local count =\
    \ 1\n        for i = 2 to n \n            do if i%10 == 1 \n                then\
    \ count = count + 1\n                else count = count + 0\n            end\n\
    \        end\n        return count\n    end\nend\n</cell>\n<code language=julia-1.4>\n\
    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n\
    \    positive integers that start or end with 1.\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpkcll19j2.jl:7\nin expression starting at /tmp/tmpkcll19j2.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n \
    \   else \n        count_starts_ends(n-1) + count_starts_ends(n+1)\nend\n</cell>\n\
    <code language=julia-1.5>\n@time count_starts_ends(10)\n</cell>\n<code language=julia-1.5>\n\
    @time count_starts_ends(100)\n</cell>\n<code language=julia-1.5>\n@time count_starts_ends(1000)\n\
    </cell>\n<code language=julia-1.5>\n@time count_starts_ends(10000)\n</cell>\n\
    <code language=julia-1.5>\n@time count_starts_ends(100000)\n</cell>\n<code language=julia-1.5>\n\
    @time count_starts_ends(1000000)\n</cell>\n<code language=julia-1.5>\n@time count_starts_ends(10000000)\n\
    </cell>\n<code language=julia-1.5>\n@time count_starts_ends(100000000)\n</cell>\n\
    <code language=julia-1.5>\n@time count_starts_ends(1000000000)\n</cell>\n<code\
    \ language=julia-1.5>\n@time count_starts_ends(10000000000)\n</cell>\n<code language=julia-1.5>\n\
    @time count_starts_ends(100000000000)\n</cell>\n<code language=julia-1.5>\n@time\
    \ count_starts_ends(1000000000000)\n</cell>\n<code language=julia-1.5>\n@time\
    \ count_starts_ends(10000000000000)\n</cell>\n<code language=julia-1.5>\n@time\
    \ count_starts_ends(100000000000000)\n</cell>\n<code language=julia-1.5>\n@time\
    \ count_starts_ends(1000000000000000)\n</cell>\n<code language=julia-1.5>\n@time\
    \ count_starts_ends(10000000000000000)\n</cell>\n<code language=julia-1.5>\n@time\
    \ count_starts_ends(100000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    @time count_starts_ends(1000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    @time count_starts_ends(10000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    @time count_starts_ends(100000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    @time count_starts_ends(1000000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    @time count_starts_ends(10000000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    @time count_starts_ends(100000000000000000000000)\n</cell\nusing Test\n\n@testset\
    \ begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpvie1thmi.jl:7\nin expression starting at /tmp/tmpvie1thmi.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        then return 1\n \
    \       else return n * starts_one_ends(n-1)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10)\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp3kd5tvku.jl:7\nin expression starting at /tmp/tmp3kd5tvku.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 1 \n        then return 1 \n\
    \        else return 0 \n    else \n        local count = 1\n        local i =\
    \ 1\n        while i <= n \n            do \n                if ((i-1) == 1) \n\
    \                    then count = count + 1 \n                else \n        \
    \            count = count + 0 \n                end \n                i = i +\
    \ 1 \n            end \n        return count \n    end\nend\n</cell>\n<code language=julia-1.4>\n\
    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n\
    \    positive integers that start or end with 1.\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp3dnyin3t.jl:7\nin expression starting at /tmp/tmp3dnyin3t.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 0 \n        error(\"n must be\
    \ positive\")\n    else if n < 10 \n        1\n    else if n < 100 \n        2\n\
    \    else if n < 1000 \n        3\n    else if n < 10000 \n        4\n    else\
    \ if n < 100000 \n        5\n    else if n < 1000000 \n        6\n    else if\
    \ n < 10000000 \n        7\n    else if n < 100000000 \n        8\n    else if\
    \ n < 1000000000 \n        9\n    else \n        10\nend\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(2)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(3)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(4)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(5)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(6)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(7)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(8)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(9)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(11)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(12)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(13)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(14)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(15)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(16)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(17)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(18)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(19)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(20)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(21)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(22)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(23)\n\
    </cell>\n<code language=julia-1.5>\nstarts_\nusing Test\n\n@testset begin\n\n\
    candidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgbqon92a.jl:8\nin expression starting at /tmp/tmpgbqon92a.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 1 \n        return 1 \n    else\
    \ \n        return starts_one_ends(n-1) + ends_one_starts(n-1) \nend\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the number of positive integers that start or end\
    \ with 2.\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3nm1ijn3.jl:11\nin expression starting at\
    \ /tmp/tmp3nm1ijn3.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n \
    \   else if n < 0 \n        then return 0\n    else if n == 1 \n        then return\
    \ 1\n    else \n        return starts_one_ends(n-1) + ends_one_starts(n-1)\nend\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(10)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(-10)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(0)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(1)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(2)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(3)\n</cell>\n\
    <code language=julia-1.3>\nstarts_one_ends(4)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(5)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(6)\n</cell>\n\
    <code language=julia-1.3>\nstarts_one_ends(7)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(8)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(9)\n</cell>\n\
    <code language=julia-1.3>\nstarts_one_ends(10)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(11)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(12)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(13)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(14)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(15)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(16)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(17)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(18)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(19)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(20)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(21)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(22)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(23)\n</cell>\n<code language=julia-1.3>\nstarts_one_end\nusing\
    \ Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpgfd70neh.jl:7\nin expression starting at /tmp/tmpgfd70neh.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 0 \n        error(\"n must be\
    \ positive\")\n    else if n == 0 \n        1\n    else if n == 1 \n        1\n\
    \    else if n % 2 == 0 \n        1 + starts_one_ends(n / 2)\n    else \n    \
    \    1 + starts_one_ends(n / 2) + starts_one_ends(n / 2 - 1)\nend\n</cell>\n<code\
    \ language=julia-1.4>\nstarts_one_ends(10)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the number of positive integers less than or equal to\
    \ a given integer n.\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3)\
    \ == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu64gfdq1.jl:8\nin expression starting at /tmp/tmpu64gfdq1.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0 \n\
    \    else \n        local i::Int64 = n \n        while i >= 10 \n            do\
    \ \n                i /= 10 \n            done \n        return i\nend\n</cell>\n\
    <code language=julia-1.3>\nstarts_one_ends(10)\n</cell>\n<code language=julia-1.3>\n\
    using Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp_993xszd.jl:7\nin expression starting at /tmp/tmp_993xszd.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return 0 \n    else\
    \ \n        return 1 + starts_one_ends(n / 10) \nend\n</cell>\n<code language=julia-1.0>\n\
    starts_one_ends(10)\n</cell>\n<code language=julia-1.0>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg843aima.jl:11\nin expression starting at\
    \ /tmp/tmpg843aima.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return n\n    else\
    \ \n        return starts_one_ends(n//10) + n%10 == 1 ? 1 : 0\nend\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(123456789)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the number of integers in the range $[1,n]$\
    \ that are divisible by $k$. For example, if the range is $[1,10]$ and $k=3$,\
    \ then the function should return $5$. Assume that the range is always sorted\
    \ and that $k$ is always positive.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\
    \t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp803cuesw.jl:11\nin expression starting at\
    \ /tmp/tmp803cuesw.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        then return 1\n \
    \   else \n        local count = 0\n        while n > 0 \n            do if n%10\
    \ == 1 \n                then count = count + 1\n                else return 0\n\
    \            end\n            n = n/10\n        end\n        return count\n  \
    \  end\nend\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(123456789)\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\
    \t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmppr0v15oq.jl:7\nin expression starting at /tmp/tmppr0v15oq.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0 \n\
    \    else \n        local count = 1\n        local i = 1\n        while i <= n\
    \ \n            do if i%10 == 1 \n                then count = count + 1\n   \
    \             else \n                    count = 0\n                end\n    \
    \        end\n            i = i + 1\n        end\n        return count\n    end\n\
    end\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3)\
    \ == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp7sdyj8qj.jl:7\nin expression starting at /tmp/tmp7sdyj8qj.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 1 \n        then return 1 \n\
    \        else return starts_one_ends(n-1) + 1 \n    end\nend\n\"\"\"\n    Given\
    \ a positive integer n, return the count of the numbers of n-digit\n    positive\
    \ integers that start or end with 1.\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpjmxatj_7.jl:7\nin expression starting at /tmp/tmpjmxatj_7.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return 1 \n    else\
    \ \n        return starts_one_ends(n//10) + starts_one_ends(n%10)\nend\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpptebu0oo.jl:11\nin expression starting at\
    \ /tmp/tmpptebu0oo.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return 1 \n    else\
    \ \n        return starts_one_ends(n//10) + starts_one_ends(n%10)\nend\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(100)\n</cell>\n<text>\nExercise 2\n\
    Write a function that counts the number of positive integers that start or end\
    \ with 2.\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk86yyou5.jl:11\nin expression starting at\
    \ /tmp/tmpk86yyou5.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n \
    \   else if n == 1 \n        then return 1\n    else \n        count_starts_ends(n-1)\
    \ + count_starts_ends(n-2) + count_starts_ends(n-3) + count_starts_ends(n-4) +\
    \ count_starts_ends(n-5) + count_starts_ends(n-6)\nend\n</cell>\n<code language=julia-1.5>\n\
    count_starts_ends(10)\n</cell>\n<code language=julia-1.5>\ncount_starts_ends(100)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(1000)\n</cell>\n<code language=julia-1.5>\n\
    count_starts_ends(10000)\n</cell>\n<code language=julia-1.5>\ncount_starts_ends(100000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(1000000)\n</cell>\n<code\
    \ language=julia-1.5>\ncount_starts_ends(10000000)\n</cell>\n<code language=julia-1.5>\n\
    count_starts_ends(100000000)\n</cell>\n<code language=julia-1.5>\ncount_starts_ends(1000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(10000000000)\n</cell>\n\
    <code language=julia-1.5>\ncount_starts_ends(100000000000)\n</cell>\n<code language=julia-1.5>\n\
    count_starts_ends(1000000000000)\n</cell>\n<code language=julia-1.5>\ncount_starts_ends(10000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(10000000000001)\n</cell>\n\
    <code language=julia-1.5>\ncount_starts_ends(10000000000002)\n</cell>\n<code language=julia-1.5>\n\
    count_starts_ends(10000000000003)\n</cell>\n<code language=julia-1.5>\ncount_starts_ends(10000000000004)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(10000000000005)\n</cell>\n\
    <code language=julia-1.5>\ncount_starts_ends(10000000000006)\n</cell>\n<code language=julia-1.5>\n\
    count_starts_ends(10000000000007)\n</cell>\n<code language=julia-1.5>\ncount_starts_ends(10000000000008)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(10000000000009)\n</cell>\n\
    <code language=julia-1.5>\ncount_starts_ends(10000000000010)\n\nusing Test\n\n\
    @testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t\
    @test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp72j676a6.jl:7\nin expression starting at /tmp/tmp72j676a6.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return 1 \n    else\
    \ \n        return starts_one_ends(n//10) + 1 \nend\n</cell>\n<code language=julia-1.0>\n\
    starts_one_ends(10)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of positive integers that start or end with 2.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpizgq2drv.jl:11\nin expression starting at\
    \ /tmp/tmpizgq2drv.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0 \n\
    \    else if n == 1 \n        then return 1 \n    else \n        count_starts_ends(n-1)\
    \ + count_starts_ends(n-2) \nend\n</cell>\n<code language=julia-1.5>\n@time count_starts_ends(10)\n\
    </cell>\n<code language=julia-1.5>\n@time count_starts_ends(100)\n</cell>\n<code\
    \ language=julia-1.5>\n@time count_starts_ends(1000)\n</cell>\n<code language=julia-1.5>\n\
    @time count_starts_ends(10000)\n</cell>\n<code language=julia-1.5>\n@time count_starts_ends(100000)\n\
    </cell>\n<code language=julia-1.5>\n@time count_starts_ends(1000000)\n</cell>\n\
    <code language=julia-1.5>\n@time count_starts_ends(10000000)\n</cell>\n<code language=julia-1.5>\n\
    @time count_starts_ends(100000000)\n</cell>\n<code language=julia-1.5>\n@time\
    \ count_starts_ends(1000000000)\n</cell>\n<code language=julia-1.5>\n@time count_starts_ends(10000000000)\n\
    </cell>\n<code language=julia-1.5>\n@time count_starts_ends(100000000000)\n</cell>\n\
    <code language=julia-1.5>\n@time count_starts_ends(1000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\n@time count_starts_ends(10000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\n@time count_starts_ends(100000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\n@time count_starts_ends(1000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\n@time count_starts_ends(10000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\n@time count_starts_ends(100000000000000000)\n</cell>\n\
    <code language=julia-1.5>\n@time count_starts_ends(1000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\n@time count_starts_ends(10000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\n@time count_starts_ends(100000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\n@time count_starts_ends(1000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\n@time count_starts_ends(10000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\n@time \nusing Test\n\n@testset begin\n\ncandidate\
    \ = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\
    \t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpzhe4ds_o.jl:7\nin expression starting at /tmp/tmpzhe4ds_o.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n \
    \   else if n == 1 \n        then return 1\n    else if n % 2 == 0 \n        then\
    \ return starts_one_ends(n / 2)\n    else \n        return starts_one_ends(n /\
    \ 2) + starts_one_ends(n / 2)\nend\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of positive\
    \ integers that start or end with 2.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\
    \t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpxk9k2r3c.jl:7\nin expression starting at /tmp/tmpxk9k2r3c.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n \
    \   else if n == 1 \n        then return 1\n    else \n        let\n         \
    \   digits = digits(n)\n            first_digit = digits[1]\n            first_digit_index\
    \ = index(digits, first_digit)\n            second_digit = digits[2]\n       \
    \     second_digit_index = index(digits, second_digit)\n            \n       \
    \     first_digit_count = starts_one_ends(first_digit_index - 1)\n           \
    \ second_digit_count = starts_one_ends(second_digit_index - 1)\n            \n\
    \            count = first_digit_count + second_digit_count\n        end\nend\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(100)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(100000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(100000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(1000000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10000000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(10000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(100000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000000000000000)\n</cell>\n\
    using Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpeki8dc75.jl:7\nin expression starting at /tmp/tmpeki8dc75.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 1 \n        then return 1 \n\
    \        else return starts_one_ends(n-1) + 1 \n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(10)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of integers that are divisible by 3 or 5 but not both.\nusing Test\n\
    \n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\
    \t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpu703ujk5.jl:7\nin expression starting at /tmp/tmpu703ujk5.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0 \n\
    \    else if n == 1 \n        then return 1 \n    else \n        let\n       \
    \     digits = digits(n) \n            digits_length = length(digits) \n     \
    \       digits_sum = sum(digits) \n            digits_product = 1\n          \
    \  for i in digits_length\n                digits_product *= digits[i]\n     \
    \       digits_product /= digits_sum\n            digits_product = digits_product\
    \ % 10\n            digits_product = digits_product == 0 ? 0 : digits_product\n\
    \            digits_product = digits_product == 1 ? 1 : digits_product\n     \
    \       digits_product = digits_product == 2 ? 2 : digits_product\n          \
    \  digits_product = digits_product == 3 ? 3 : digits_product\n            digits_product\
    \ = digits_product == 4 ? 4 : digits_product\n            digits_product = digits_product\
    \ == 5 ? 5 : digits_product\n            digits_product = digits_product == 6\
    \ ? 6 : digits_product\n            digits_product = digits_product == 7 ? 7 :\
    \ digits_product\n            digits_product = digits_product == 8 ? 8 : digits_product\n\
    \            digits_product = digits_product == 9 ? 9 : digits_product\n     \
    \       digits_product = digits_product == 10 ? 10 : digits_product\n        \
    \    digits_product = digits_product == 11 ? 11 : digits_product\n           \
    \ digits_product = digits_product == 12 ? 12 : digits_product\n            digits_product\
    \ = digits_product == 13 ? 13 : digits_product\n            digits_product = digits_product\
    \ == 14 ? 14 : digits_product\n            digits_product = digits_product ==\
    \ 15 ? 15 : digits_product\n            digits_product = digits_product == 16\
    \ ? 16 : digits_product\n            digits_product = digits_product == 17 ? 17\
    \ : digits_product\n            digits_product = digits_product == 18 ? 18 : digits_product\n\
    \            digits_product = digits_product == 19 ? 19 : digits_product\n   \
    \         digits_product = digits_product == 20 ? 20 : digits_product\n      \
    \      digits_product = digits_product == 21 ? 21 : digits_product\n         \
    \   digits_product = digits_product == 22 ? 22 : digits_product\n            digits_product\
    \ = digits_product == 23 ? 23 : digits_product\n            digits_product = digits_product\
    \ == 24 ? 24 : digits_product\n            digits_product\nusing Test\n\n@testset\
    \ begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpad93i2d0.jl:7\nin expression starting at /tmp/tmpad93i2d0.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n \
    \   else if n == 1 \n        then return 1\n    else if n % 2 == 0 \n        then\
    \ return starts_one_ends(n / 2)\n    else \n        return starts_one_ends(n /\
    \ 2) + starts_one_ends(n / 2 + 1)\nend\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of positive\
    \ integers that start or end with 2.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\
    \t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp9a33rva4.jl:7\nin expression starting at /tmp/tmp9a33rva4.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0 \n\
    \    else \n        count_one_ends(n-1) + count_one_ends(n-2) \nend\n\"\"\"\n\
    \    Given a positive integer n, return the count of the numbers of n-digit\n\
    \    positive integers that start or end with 1.\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmphxj866lh.jl:7\nin expression starting at /tmp/tmphxj866lh.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 1 \n        then return 1\n \
    \   else \n        count_starts_ends(n-1) + count_starts_ends(n+1)\nend\n</cell>\n\
    <code language=julia-1.5>\ncount_starts_ends(10)\n</cell>\n<code language=julia-1.5>\n\
    count_starts_ends(100)\n</cell>\n<code language=julia-1.5>\ncount_starts_ends(1000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(10000)\n</cell>\n<code language=julia-1.5>\n\
    count_starts_ends(100000)\n</cell>\n<code language=julia-1.5>\ncount_starts_ends(1000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(10000000)\n</cell>\n<code\
    \ language=julia-1.5>\ncount_starts_ends(100000000)\n</cell>\n<code language=julia-1.5>\n\
    count_starts_ends(1000000000)\n</cell>\n<code language=julia-1.5>\ncount_starts_ends(10000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(100000000000)\n</cell>\n\
    <code language=julia-1.5>\ncount_starts_ends(1000000000000)\n</cell>\n<code language=julia-1.5>\n\
    count_starts_ends(10000000000000)\n</cell>\n<code language=julia-1.5>\ncount_starts_ends(100000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(1000000000000000)\n</cell>\n\
    <code language=julia-1.5>\ncount_starts_ends(10000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\ncount_starts_ends(100000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    count_starts_ends(1000000000000000000)\n</cell>\n<code language=julia-1.5>\ncount_starts_ends(10000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(100000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(1000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(10000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(100000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(1000000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(10000000000000000000000000)\n\
    </cell>\n<code language=julia-1.5\nusing Test\n\n@testset begin\n\ncandidate =\
    \ starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t\
    @test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmptr9k83w3.jl:7\nin expression starting at /tmp/tmptr9k83w3.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 1 \n        then return 1\n \
    \   else if n == 0 \n        then return 0\n    else \n        count_starts_ends(n-1)\
    \ + count_starts_ends(n-2) + count_starts_ends(n-3) + count_starts_ends(n-4) +\
    \ count_starts_ends(n-5) + count_starts_ends(n-6) + count_starts_ends(n-7) + count_starts_ends(n-8)\
    \ + count_starts_ends(n-9) + count_starts_ends(n-10)\n    end\nend\n</cell>\n\
    <code language=julia-1.3>\ncount_starts_ends(10)\n</cell>\n<code language=julia-1.3>\n\
    count_starts_ends(100)\n</cell>\n<code language=julia-1.3>\ncount_starts_ends(1000)\n\
    </cell>\n<code language=julia-1.3>\ncount_starts_ends(10000)\n</cell>\n<code language=julia-1.3>\n\
    count_starts_ends(100000)\n</cell>\n<code language=julia-1.3>\ncount_starts_ends(1000000)\n\
    </cell>\n<code language=julia-1.3>\ncount_starts_ends(10000000)\n</cell>\n<code\
    \ language=julia-1.3>\ncount_starts_ends(100000000)\n</cell>\n<code language=julia-1.3>\n\
    count_starts_ends(1000000000)\n</cell>\n<code language=julia-1.3>\ncount_starts_ends(10000000000)\n\
    </cell>\n<code language=julia-1.3>\ncount_starts_ends(100000000000)\n</cell>\n\
    <code language=julia-1.3>\ncount_starts_ends(1000000000000)\n</cell>\n<code language=julia-1.3>\n\
    count_starts_ends(10000000000000)\n</cell>\n<code language=julia-1.3>\ncount_starts_ends(100000000000000)\n\
    </cell>\n<code language=julia-1.3>\ncount_starts_ends(1000000000000000)\n</cell>\n\
    <code language=julia-1.3>\ncount_starts_ends(10000000000000000)\n</cell>\n<code\
    \ language=julia-1.3>\ncount_starts_ends(100000000000000000)\n</cell>\n<code language=julia-1.3>\n\
    count_starts_ends(1000000000000000000)\n</cell>\n<code language=julia-1.3>\ncount_starts_ends(10000000000000000000)\n\
    </cell>\n<code language=julia-1.3>\ncount_starts_ends(100000000000000000000)\n\
    </cell>\n<code language=julia-1.3>\ncount_starts_ends(1000000000000000000000)\n\
    </cell>\n<code language=julia-1.3>\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\
    \t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpuk7s536w.jl:7\nin expression starting at /tmp/tmpuk7s536w.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 1 \n        return 1 \n    else\
    \ \n        return starts_one_ends(n-1) + ends_one_starts(n-1) \nend\n</cell>\n\
    <code language=julia-1.0>\nstarts_one_ends(10)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the number of positive integers less than or equal\
    \ to a given integer n.\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3)\
    \ == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy4al88kx.jl:11\nin expression starting at\
    \ /tmp/tmpy4al88kx.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n \
    \   else if n == 1 \n        then return 1\n    else if n % 2 == 0 \n        then\
    \ return starts_one_ends(n/2)\n    else \n        return starts_one_ends(n/2)\
    \ + starts_one_ends(n-1)\nend\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of positive\
    \ integers that start or end with 2.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\
    \t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpas7sxk70.jl:7\nin expression starting at /tmp/tmpas7sxk70.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return 0 \n    else\
    \ \n        return starts_one_ends(n//10) + 1 \nend\n</cell>\n<code language=julia-1.0>\n\
    starts_one_ends(10)\n</cell>\n<code language=julia-1.0>\nstarts_one_ends(100)\n\
    </cell>\n<code language=julia-1.0>\nstarts_one_ends(1000)\n</cell>\n<code language=julia-1.0>\n\
    starts_one_ends(10000)\n</cell>\n<code language=julia-1.0>\nstarts_one_ends(100000)\n\
    </cell>\n<code language=julia-1.0>\nstarts_one_ends(1000000)\n</cell>\n<code language=julia-1.0>\n\
    starts_one_ends(10000000)\n</cell>\n<code language=julia-1.0>\nstarts_one_ends(100000000)\n\
    </cell>\n<code language=julia-1.0>\nstarts_one_ends(1000000000)\n</cell>\n<code\
    \ language=julia-1.0>\nstarts_one_ends(10000000000)\n</cell>\n<code language=julia-1.0>\n\
    starts_one_ends(100000000000)\n</cell>\n<code language=julia-1.0>\nstarts_one_ends(1000000000000)\n\
    </cell>\n<code language=julia-1.0>\nstarts_one_ends(1000000000001)\n</cell>\n\
    <code language=julia-1.0>\nstarts_one_ends(1000000000002)\n</cell>\n<code language=julia-1.0>\n\
    starts_one_ends(1000000000003)\n</cell>\n<code language=julia-1.0>\nstarts_one_ends(1000000000004)\n\
    </cell>\n<code language=julia-1.0>\nstarts_one_ends(1000000000005)\n</cell>\n\
    <code language=julia-1.0>\nstarts_one_ends(1000000000006)\n</cell>\n<code language=julia-1.0>\n\
    starts_one_ends(1000000000007)\n</cell>\n<code language=julia-1.0>\nstarts_one_ends(1000000000008)\n\
    </cell>\n<code language=julia-1.0>\nstarts_one_ends(1000000000009)\n</cell>\n\
    <code language=julia-1.0>\nstarts_one_ends(1000000000010)\n</cell>\n<code language=julia-1.0>\n\
    starts_one_ends(1000000000011)\n</cell>\n<code language=julia-1.0>\nstarts_one_ends(1000000000012)\n\
    </cell>\n<code language=julia-1.0>\nstarts_one_ends(1000000000013)\n</cell>\n\
    <code language=julia-1.0>\nstarts_one_end\nusing Test\n\n@testset begin\n\ncandidate\
    \ = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\
    \t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7c899mij.jl:11\nin expression starting at\
    \ /tmp/tmp7c899mij.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return 1 \n    else\
    \ \n        return starts_one_ends(n//10) + starts_one_ends(n%10) \nend\n</cell>\n\
    <code language=julia-1.0>\nstarts_one_ends(10)\n</cell>\n<code language=julia-1.0>\n\
    starts_one_ends(100)\n</cell>\n<code language=julia-1.0>\nstarts_one_ends(1000)\n\
    </cell>\n<code language=julia-1.0>\nstarts_one_ends(10000)\n</cell>\n<code language=julia-1.0>\n\
    starts_one_ends(100000)\n</cell>\n<code language=julia-1.0>\nstarts_one_ends(1000000)\n\
    </cell>\n<code language=julia-1.0>\nstarts_one_ends(10000000)\n</cell>\n<code\
    \ language=julia-1.0>\nstarts_one_ends(100000000)\n</cell>\n<code language=julia-1.0>\n\
    starts_one_ends(1000000000)\n</cell>\n<code language=julia-1.0>\nstarts_one_ends(10000000000)\n\
    </cell>\n<code language=julia-1.0>\nstarts_one_ends(100000000000)\n</cell>\n<code\
    \ language=julia-1.0>\nstarts_one_ends(1000000000000)\n</cell>\n<code language=julia-1.0>\n\
    starts_one_ends(1000000000001)\n</cell>\n<code language=julia-1.0>\nstarts_one_ends(1000000000002)\n\
    </cell>\n<code language=julia-1.0>\nstarts_one_ends(1000000000003)\n</cell>\n\
    <code language=julia-1.0>\nstarts_one_ends(1000000000004)\n</cell>\n<code language=julia-1.0>\n\
    starts_one_ends(1000000000005)\n</cell>\n<code language=julia-1.0>\nstarts_one_ends(1000000000006)\n\
    </cell>\n<code language=julia-1.0>\nstarts_one_ends(1000000000007)\n</cell>\n\
    <code language=julia-1.0>\nstarts_one_ends(1000000000008)\n</cell>\n<code language=julia-1.0>\n\
    starts_one_ends(1000000000009)\n</cell>\n<code language=julia-1.0>\nstarts_one_ends(1000000000010)\n\
    </cell>\n<code language=julia-1.0>\nstarts_one_ends(1000000000011)\n</cell>\n\
    <code language=julia-1.0>\nstarts_one_ends(1000000000012)\n</cell>\n<code language=julia-1.0>\n\
    starts_one_ends(1000000000013)\n</cell>\n<code language=julia-\nusing Test\n\n\
    @testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t\
    @test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp_hb8fye.jl:11\nin expression starting at\
    \ /tmp/tmpp_hb8fye.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return 0 \n    else\
    \ \n        return 1 + starts_one_ends(n//10) \nend\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(10000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(100000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000001)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000002)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000003)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000004)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000005)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000006)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000007)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000008)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000009)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000010)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000011)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000012)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000013)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(\nusing Test\n\n@testset begin\n\n\
    candidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmpz5nt2c.jl:11\nin expression starting at\
    \ /tmp/tmpmpz5nt2c.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 1 \n        then return 1 \n\
    \    else \n        count_starts_ends(n-1) + count_starts_ends(n-2) \nend\n</cell>\n\
    <code language=julia-1.5>\ncount_starts_ends(10)\n</cell>\n<code language=julia-1.5>\n\
    count_starts_ends(100)\n</cell>\n<code language=julia-1.5>\ncount_starts_ends(1000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(10000)\n</cell>\n<code language=julia-1.5>\n\
    count_starts_ends(100000)\n</cell>\n<code language=julia-1.5>\ncount_starts_ends(1000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(10000000)\n</cell>\n<code\
    \ language=julia-1.5>\ncount_starts_ends(100000000)\n</cell>\n<code language=julia-1.5>\n\
    count_starts_ends(1000000000)\n</cell>\n<code language=julia-1.5>\ncount_starts_ends(10000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(100000000000)\n</cell>\n\
    <code language=julia-1.5>\ncount_starts_ends(1000000000000)\n</cell>\n<code language=julia-1.5>\n\
    count_starts_ends(10000000000000)\n</cell>\n<code language=julia-1.5>\ncount_starts_ends(100000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(1000000000000000)\n</cell>\n\
    <code language=julia-1.5>\ncount_starts_ends(10000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\ncount_starts_ends(100000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    count_starts_ends(1000000000000000000)\n</cell>\n<code language=julia-1.5>\ncount_starts_ends(10000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(100000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(1000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(10000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(100000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(1000000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(10000000000000000000000000)\n\
    </cell>\n<code language=julia-\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3)\
    \ == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp73brlg02.jl:7\nin expression starting at /tmp/tmp73brlg02.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return 1 \n    else\
    \ \n        return starts_one_ends(n//10) + starts_one_ends(n%10) \nend\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(123456789)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the number of positive integers that start\
    \ or end with 2.\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3)\
    \ == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg01y1bik.jl:11\nin expression starting at\
    \ /tmp/tmpg01y1bik.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return 1 \n    else\
    \ \n        return starts_one_ends(n//10) + starts_one_ends(n%10)\nend\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(123456789)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the number of positive integers that start\
    \ or end with 2.\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3)\
    \ == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpznxic233.jl:11\nin expression starting at\
    \ /tmp/tmpznxic233.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n \
    \   else if n == 1 \n        then return 1\n    else \n        local count = 1\n\
    \        local i = 1\n        while i <= n \n            do if i %% 10 == 1 \n\
    \                then count = count + 1\n                else count = count +\
    \ 1\n            end\n            i = i + 1\n        end\n        return count\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a positive\
    \ integer n, return the count of the numbers of n-digit\n    positive integers\
    \ that start or end with 1.\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\
    \t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp4xlnf8q3.jl:7\nin expression starting at /tmp/tmp4xlnf8q3.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 0 \n        error(\"n must be\
    \ positive\")\n    else if n == 0 \n        1\n    else \n        1 + starts_one_ends(n\
    \ - 1)\nend\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(100)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(1000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(10000000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(100000000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(100000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(1000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10000000000000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000000000000000000000)\n\
    </cell>\n\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3cfsocwu.jl:8\nin expression starting at /tmp/tmp3cfsocwu.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return 1 \n    else\
    \ \n        return starts_one_ends(n//10) + starts_one_ends(n%10) \nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    Given a positive integer n, return the\
    \ count of the numbers of n-digit\n    positive integers that start or end with\
    \ 1.\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3)\
    \ == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpiyh2xj_l.jl:11\nin expression starting at\
    \ /tmp/tmpiyh2xj_l.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return 1 \n    else\
    \ \n        return starts_one_ends(n / 10) + 1 \nend\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(10)\n</cell>\n<code language=julia-1.3>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq40ygx2o.jl:11\nin expression starting at\
    \ /tmp/tmpq40ygx2o.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return 0 \n    else\
    \ \n        return 1 + starts_one_ends(n//10) + starts_one_ends(n%10) \nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a positive integer n, return\
    \ the count of the numbers of n-digit\n    positive integers that start or end\
    \ with 1.\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3)\
    \ == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpevdj4ygu.jl:11\nin expression starting at\
    \ /tmp/tmpevdj4ygu.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 0 \n        error(\"n must be\
    \ positive\")\n    else if n == 0 \n        1\n    else \n        1 + starts_one_ends(n-1)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcu0lg6m8.jl:8\nin expression starting at /tmp/tmpcu0lg6m8.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 1 \n        then return 1 \n\
    \        else return 0 \n    else \n        let\n            digits = digits(n)\
    \ \n            digits_length = length(digits) \n            digits_sum = sum(digits)\
    \ \n            digits_product = product(digits) \n            digits_product2\
    \ = product2(digits) \n            digits_product3 = product3(digits) \n     \
    \       digits_product4 = product4(digits) \n            digits_product5 = product5(digits)\
    \ \n            digits_product6 = product6(digits) \n            digits_product7\
    \ = product7(digits) \n            digits_product8 = product8(digits) \n     \
    \       digits_product9 = product9(digits) \n            digits_product10 = product10(digits)\
    \ \n            digits_product11 = product11(digits) \n            digits_product12\
    \ = product12(digits) \n            digits_product13 = product13(digits) \n  \
    \          digits_product14 = product14(digits) \n            digits_product15\
    \ = product15(digits) \n            digits_product16 = product16(digits) \n  \
    \          digits_product17 = product17(digits) \n            digits_product18\
    \ = product18(digits) \n            digits_product19 = product19(digits) \n  \
    \          digits_product20 = product20(digits) \n            digits_product21\
    \ = product21(digits) \n            digits_product22 = product22(digits) \n  \
    \          digits_product23 = product23(digits) \n            digits_product24\
    \ = product24(digits) \n            digits_product25 = product25(digits) \n  \
    \          digits_product26 = product26(digits) \n            digits_product27\
    \ = product27(digits) \n            digits_product28 = product28(digits) \n  \
    \          digits_product29 = product29(digits) \n            digits_product30\
    \ = product30(digits) \n            digits_product31 = product31(digits) \n  \
    \          digits_product32 = product32(digits) \n            digits_product33\
    \ = product33(digits) \n            digits_product34 = product34(digits) \n  \
    \          digits_product35 = product35(digits) \n            digits_product36\
    \ = product36(digits) \n            digits_product37 = product37(digits) \n  \
    \          digits_product38 = product38(digits) \n            digits_product39\
    \ = product39(digits) \n            digits_product40 = product40(digits) \n  \
    \          digits_product41 = product41(digit\nusing Test\n\n@testset begin\n\n\
    candidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp7yfj15zv.jl:7\nin expression starting at /tmp/tmp7yfj15zv.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n \
    \   else if n == 1 \n        then return 1\n    else \n        return starts_one_ends(n-1)\
    \ + ends_one_starts(n-1)\nend\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\
    \t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpicohfibz.jl:7\nin expression starting at /tmp/tmpicohfibz.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 1 \n        then return 1 \n\
    \        else return 0 \n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\
    \t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpvjcrv7h_.jl:7\nin expression starting at /tmp/tmpvjcrv7h_.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 0 \n        error(\"n must be\
    \ positive\")\n    else if n == 0 \n        1\n    else if n == 1 \n        1\n\
    \    else \n        1 + starts_one_ends(n - 1)\nend\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(10)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(100)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(1000)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(10000)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(100000)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(1000000)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(10000000)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(100000000)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(1000000000)\n</cell>\n<code\
    \ language=julia-1.3>\nstarts_one_ends(10000000000)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(100000000000)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(1000000000000)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(10000000000000)\n</cell>\n\
    <code language=julia-1.3>\nstarts_one_ends(100000000000000)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(1000000000000000)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(10000000000000000)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(100000000000000000)\n</cell>\n\
    <code language=julia-1.3>\nstarts_one_ends(1000000000000000000)\n</cell>\n<code\
    \ language=julia-1.3>\nstarts_one_ends(10000000000000000000)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(100000000000000000000)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(1000000000000000000000)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(10000000000000000000000)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(100000000000000000000000)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(1000000000000000000000000)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(\nusing Test\n\n@testset begin\n\
    \ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp58x375l9.jl:8\nin expression starting at /tmp/tmp58x375l9.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return 0 \n    else\
    \ \n        return 1 + starts_one_ends(n//10) \nend\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of positive integers that start or end with 2.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp166gwok5.jl:11\nin expression starting at\
    \ /tmp/tmp166gwok5.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n \
    \   else \n        x <- starts_one_ends(n-1)\n        if n `mod` x == 0 \n   \
    \         then return x + 1\n        else return x\nend\n\"\"\"\n    Given a positive\
    \ integer n, return the count of the numbers of n-digit\n    positive integers\
    \ that start or end with 1.\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\
    \t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp0io6ifpr.jl:7\nin expression starting at /tmp/tmp0io6ifpr.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return 0 \n    else\
    \ \n        return 1 + starts_one_ends(n//10) + starts_one_ends(n%10) \nend\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the number of positive integers that start\
    \ or end with 2.\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3)\
    \ == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1cqzf_ke.jl:11\nin expression starting at\
    \ /tmp/tmp1cqzf_ke.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n \
    \   else if n == 1 \n        then return 1\n    else \n        count_one_ends(n-1)\
    \ + count_one_ends(n-2) + count_one_ends(n-3) + count_one_ends(n-4) + count_one_ends(n-5)\
    \ + count_one_ends(n-6)\n    end\nend\n</cell>\n<code language=julia-1.4>\ncount_one_ends(10)\n\
    </cell>\n<code language=julia-1.4>\ncount_one_ends(100)\n</cell>\n<code language=julia-1.4>\n\
    count_one_ends(1000)\n</cell>\n<code language=julia-1.4>\ncount_one_ends(10000)\n\
    </cell>\n<code language=julia-1.4>\ncount_one_ends(100000)\n</cell>\n<code language=julia-1.4>\n\
    count_one_ends(1000000)\n</cell>\n<code language=julia-1.4>\ncount_one_ends(10000000)\n\
    </cell>\n<code language=julia-1.4>\ncount_one_ends(100000000)\n</cell>\n<code\
    \ language=julia-1.4>\ncount_one_ends(1000000000)\n</cell>\n<code language=julia-1.4>\n\
    count_one_ends(10000000000)\n</cell>\n<code language=julia-1.4>\ncount_one_ends(100000000000)\n\
    </cell>\n<code language=julia-1.4>\ncount_one_ends(1000000000000)\n</cell>\n<code\
    \ language=julia-1.4>\ncount_one_ends(10000000000000)\n</cell>\n<code language=julia-1.4>\n\
    count_one_ends(100000000000000)\n</cell>\n<code language=julia-1.4>\ncount_one_ends(1000000000000000)\n\
    </cell>\n<code language=julia-1.4>\ncount_one_ends(10000000000000000)\n</cell>\n\
    <code language=julia-1.4>\ncount_one_ends(100000000000000000)\n</cell>\n<code\
    \ language=julia-1.4>\ncount_one_ends(1000000000000000000)\n</cell>\n<code language=julia-1.4>\n\
    count_one_ends(10000000000000000000)\n</cell>\n<code language=julia-1.4>\ncount_one_ends(100000000000000000000)\n\
    </cell>\n<code language=julia-1.4>\ncount_one_ends(1000000000000000000000)\n</cell>\n\
    <code language=julia-1.4>\ncount_one_ends(10000000000000000000000)\n</cell>\n\
    <code language=julia-1.4>\ncount_one_ends(100000000000000000000000)\n</cell>\n\
    <code language=julia-1.4>\ncount_one_ends(1000000000000000000000000)\n</cell>\n\
    <code language=julia-1.4>\ncount_one_end\nusing Test\n\n@testset begin\n\ncandidate\
    \ = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\
    \t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpnzc85imr.jl:7\nin expression starting at /tmp/tmpnzc85imr.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return 0 \n    else\
    \ \n        return starts_one_ends(n/10) + 1 \nend\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(10)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(100)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(1000)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(10000)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(100000)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(1000000)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(10000000)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(100000000)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(1000000000)\n</cell>\n<code\
    \ language=julia-1.3>\nstarts_one_ends(10000000000)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(100000000000)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(1000000000000)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(1000000000001)\n</cell>\n\
    <code language=julia-1.3>\nstarts_one_ends(1000000000002)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(1000000000003)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(1000000000004)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(1000000000005)\n</cell>\n\
    <code language=julia-1.3>\nstarts_one_ends(1000000000006)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(1000000000007)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(1000000000008)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(1000000000009)\n</cell>\n\
    <code language=julia-1.3>\nstarts_one_ends(1000000000010)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(1000000000011)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(1000000000012)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(1000000000013)\n</cell>\n\
    <code language=julia-1.3>\nstarts_one_ends(\nusing Test\n\n@testset begin\n\n\
    candidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpam5xywz0.jl:11\nin expression starting at\
    \ /tmp/tmpam5xywz0.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return 1 \n    else\
    \ \n        return starts_one_ends(n//10) + 1 \nend\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10)\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprkiht9g0.jl:11\nin expression starting at\
    \ /tmp/tmprkiht9g0.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return 1 \n    else\
    \ \n        return starts_one_ends(n//10) + starts_one_ends(n%10) \nend\n</cell>\n\
    <code language=julia-1.3>\nstarts_one_ends(10)\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns the number of positive integers that start or end\
    \ with 2.\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvq3som8j.jl:11\nin expression starting at\
    \ /tmp/tmpvq3som8j.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n \
    \   else if n < 0 \n        then return 0\n    else if n == 1 \n        then return\
    \ 1\n    else \n        local count = 1\n        while n >= 10 \n            do\
    \ count = count + 1\n            n = n / 10\n        end\n        return count\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3)\
    \ == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpxpab2ot1.jl:7\nin expression starting at /tmp/tmpxpab2ot1.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 0 \n        error(\"n must be\
    \ positive\")\n    else if n == 0 \n        1\n    else \n        1 + starts_one_ends(n-1)\n\
    end\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(100)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(100000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(100000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(1000000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000001)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000002)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000003)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000004)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000005)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000006)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000007)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000008)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000009)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000010)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000011)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000012)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000013)\n</cell>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\
    \t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsw6ww4_a.jl:8\nin expression starting at /tmp/tmpsw6ww4_a.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return 0 \n    else\
    \ \n        return 1 + starts_one_ends(n//10) \nend\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(10000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(100000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000001)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000002)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000003)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000004)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000005)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000006)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000007)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000008)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000009)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000010)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000011)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000012)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000013)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(\nusing Test\n\n@testset begin\n\n\
    candidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7gww4y5q.jl:11\nin expression starting at\
    \ /tmp/tmp7gww4y5q.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return 0 \n    else\
    \ \n        return 1 + starts_one_ends(n//10) \nend\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of positive integers that start or end with 2.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp076tv1gl.jl:11\nin expression starting at\
    \ /tmp/tmp076tv1gl.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n \
    \   else if n == 1 \n        then return 1\n    else \n        local i::Int64\
    \ = 1\n        local count::Int64 = 1\n        while i <= n \n            do if\
    \ i%10 == 1 \n                then count = count + 1\n                else return\
    \ count\n            end\n            i = i + 1\n        end\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(2)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(3)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(4)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(5)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(6)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(7)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(8)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(9)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(11)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(12)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(13)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(14)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(15)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(16)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(17)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(18)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(19)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(20)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(21)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(22)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(23)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(24)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(25)\n</cell>\n<code language=julia-1.5>\n\
    start\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpbf8ffnge.jl:7\nin expression starting at /tmp/tmpbf8ffnge.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n \
    \   else if n < 0 \n        then return 0\n    else if n == 1 \n        then return\
    \ 1\n    else \n        local count = 1\n        local i = 1\n        while i\
    \ <= n \n            do if i%10 == 1 \n                then count = count + 1\n\
    \                else count = count + 1\n            end\n            i = i +\
    \ 1\n        end\n        return count\nend\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(-2)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(0)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(1)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(2)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(3)\n</cell>\n\
    <code language=julia-1.3>\nstarts_one_ends(4)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(5)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(6)\n</cell>\n\
    <code language=julia-1.3>\nstarts_one_ends(7)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(8)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(9)\n</cell>\n\
    <code language=julia-1.3>\nstarts_one_ends(10)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(11)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(12)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(13)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(14)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(15)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(16)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(17)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(18)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(19)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(20)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(21)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(22)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(23)\n</cell>\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3)\
    \ == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp5_6zwqth.jl:7\nin expression starting at /tmp/tmp5_6zwqth.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 1 \n        return 1 \n    else\
    \ \n        return starts_one_ends(n-1) + ends_one_starts(n-1) \nend\n</cell>\n\
    <code language=julia-1.0>\n@time starts_one_ends(10)\n</cell>\n<text>\nExercise:\
    \ Write a function that returns the number of integers from 1 to n that start\
    \ with 1.\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppel3qtus.jl:11\nin expression starting at\
    \ /tmp/tmppel3qtus.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0 \n\
    \    else \n        let\n            digits = digits(n) \n            digits_len\
    \ = length(digits) \n            digits_len = digits_len - 1 \n            digits_len\
    \ = digits_len + 1 \n            digits_len = digits_len + 1 \n            digits_len\
    \ = digits_len + 1 \n            digits_len = digits_len + 1 \n            digits_len\
    \ = digits_len + 1 \n            digits_len = digits_len + 1 \n            digits_len\
    \ = digits_len + 1 \n            digits_len = digits_len + 1 \n            digits_len\
    \ = digits_len + 1 \n            digits_len = digits_len + 1 \n            digits_len\
    \ = digits_len + 1 \n            digits_len = digits_len + 1 \n            digits_len\
    \ = digits_len + 1 \n            digits_len = digits_len + 1 \n            digits_len\
    \ = digits_len + 1 \n            digits_len = digits_len + 1 \n            digits_len\
    \ = digits_len + 1 \n            digits_len = digits_len + 1 \n            digits_len\
    \ = digits_len + 1 \n            digits_len = digits_len + 1 \n            digits_len\
    \ = digits_len + 1 \n            digits_len = digits_len + 1 \n            digits_len\
    \ = digits_len + 1 \n            digits_len = digits_len + 1 \n            digits_len\
    \ = digits_len + 1 \n            digits_len = digits_len + 1 \n            digits_len\
    \ = digits_len + 1 \n            digits_len = digits_len + 1 \n            digits_len\
    \ = digits_len + 1 \n            digits_len = digits_len + 1 \n            digits_len\
    \ = digits_len + 1 \n            digits_len = digits_len + 1 \n            digits_len\
    \ = digits_len + 1 \n            digits_len = digits_len + 1 \n            digits_len\
    \ = digits_len + 1 \n            digits_len = digits_len + 1 \n            digits_len\
    \ = digits_len + 1 \n            digits_len = digits_len + 1 \n            digits_len\
    \ = digits_len + 1 \n            digits_len = digits_len + 1 \n            digits_len\
    \ = digits_len + 1 \n            digits_len = digits_len + 1 \n            digits_len\
    \ = digits_len + 1 \n            digits_len = digits_len + 1 \n            digits_len\
    \ = digits_len + 1 \n            digits_len = digits_len + 1 \n            digits_len\
    \ = digits_len + 1 \n            digit\nusing Test\n\n@testset begin\n\ncandidate\
    \ = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\
    \t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpp7rw7hgk.jl:7\nin expression starting at /tmp/tmpp7rw7hgk.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n \
    \   else if n == 1 \n        then return 1\n    else if n % 2 == 0 \n        then\
    \ return starts_one_ends(n / 2)\n    else \n        return starts_one_ends(n /\
    \ 2) + starts_one_ends(n / 2 + 1)\nend\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of positive\
    \ integers less than or equal to a given integer n.\nusing Test\n\n@testset begin\n\
    \ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpvc5b5j42.jl:7\nin expression starting at /tmp/tmpvc5b5j42.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return 1 \n    else\
    \ \n        return starts_one_ends(n/10) + 1 \nend\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of positive integers that start or end with 2.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe7xwf0nn.jl:11\nin expression starting at\
    \ /tmp/tmpe7xwf0nn.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 1 \n        then return 1 \n\
    \        else return 0 \n    end\nend\n\"\"\"\n    Given a positive integer n,\
    \ return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3)\
    \ == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpha2_cnmb.jl:7\nin expression starting at /tmp/tmpha2_cnmb.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return 0 \n    else\
    \ \n        return 1 + starts_one_ends(n / 10) \nend\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10)\n</cell>\n<text>\nExercise: Write a function that counts the\
    \ number of positive integers that start or end with 2.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpax9ajdav.jl:11\nin expression starting at\
    \ /tmp/tmpax9ajdav.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n \
    \   else if n == 1 \n        then return 1\n    else if n % 2 == 0 \n        then\
    \ return starts_one_ends(n / 2)\n    else \n        return starts_one_ends(n /\
    \ 2) + starts_one_ends(n / 2)\nend\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of positive\
    \ integers that start or end with 2.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\
    \t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpue7wln00.jl:7\nin expression starting at /tmp/tmpue7wln00.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 1 \n        return 1 \n    else\
    \ \n        return starts_one_ends(n-1) + ends_one_starts(n-1) \nend\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the number of positive integers less than or equal\
    \ to a given integer n.\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3)\
    \ == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp14dip5ys.jl:11\nin expression starting at\
    \ /tmp/tmp14dip5ys.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 1 \n        then return 1\n \
    \       else return 0\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\
    \t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpcgo6gv6e.jl:7\nin expression starting at /tmp/tmpcgo6gv6e.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n \
    \   else if n == 1 \n        then return 1\n    else if n % 2 == 0 \n        then\
    \ return starts_one_ends(n / 2) + 1\n    else \n        return starts_one_ends(n\
    \ / 2) + starts_one_ends(n / 2)\nend\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(1000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(10000000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(100000000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(100000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(1000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10000000000000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100\nusing Test\n\n@testset\
    \ begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmplazuphl7.jl:7\nin expression starting at /tmp/tmplazuphl7.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 1 \n        then return 1 \n\
    \        else return 0 \n    else \n        n <- n - 1 \n        i <- starts_one_ends(n)\
    \ \n        j <- starts_one_ends(n) \n        if i == 1 \n            then return\
    \ j \n            else return j + 1 \nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpfe86xaat.jl:7\nin expression starting at /tmp/tmpfe86xaat.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0 \n\
    \    else \n        x <- starts_one_ends(n-1) \n        if x == 0 \n         \
    \   then return 1 \n        else \n            if n % x == 0 \n              \
    \  then return 1 + starts_one_ends(n-x) \n            else \n                return\
    \ starts_one_ends(n-x) \nend \n</cell>\n<code language=julia-1.3>\nstarts_one_ends(10)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the number of integers\
    \ in the range $[1,n]$ that are divisible by $k$. For example, if the range is\
    \ $[1,10]$ and the number is $k=3$, then the function should return $4$.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpdcybuo14.jl:7\nin expression starting at /tmp/tmpdcybuo14.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n \
    \   else if n == 1 \n        then return 1\n    else \n        local count = 1\n\
    \        local i = 2\n        while i <= n \n            do if i%10 == 1 \n  \
    \              then count = count + 1\n                else return count\n   \
    \         end\n            i = i + 1\n        end\n        return count\nend\n\
    </cell>\n<code language=julia-1.3>\n\"\"\"\n    Given a positive integer n, return\
    \ the count of the numbers of n-digit\n    positive integers that start or end\
    \ with 1.\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3)\
    \ == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp3mk35fpf.jl:7\nin expression starting at /tmp/tmp3mk35fpf.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return 1 \n    else\
    \ \n        return starts_one_ends(n//10) + 1 \nend\n</cell>\n<code language=julia-1.0>\n\
    starts_one_ends(10)\n</cell>\n<code language=julia-1.0>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3s15wgc2.jl:11\nin expression starting at\
    \ /tmp/tmp3s15wgc2.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return 1 \n    else\
    \ \n        return starts_one_ends(n/10) + 1 \nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n\
    \    positive integers that start or end with 1.\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbrhwvxe0.jl:11\nin expression starting at\
    \ /tmp/tmpbrhwvxe0.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        then return 0\n \
    \   else \n        local count = 0\n        for i = 1, n \n            do if i%10\
    \ == 1 \n                then count = count + 1\n            else \n         \
    \       count = 0\n            end\n        end\n        return count\n    end\n\
    end\n\"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t\
    @test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpkuemf69d.jl:7\nin expression starting at /tmp/tmpkuemf69d.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n \
    \   else if n == 1 \n        then return 1\n    else \n        return starts_one_ends(n-1)\
    \ + ends_one_starts(n-1)\nend\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\
    \t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp_s4i7sg7.jl:7\nin expression starting at /tmp/tmp_s4i7sg7.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0 \n\
    \    else if n == 1 \n        then return 1 \n    else \n        local i::Int64\
    \ = 1\n        local count::Int64 = 0\n        while i <= n \n            do if\
    \ i%10 == 1 \n                then count = count + 1 \n                else break\
    \ \n            end\n            i = i + 1\n        end\n        return count\n\
    end\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 0.\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3)\
    \ == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmptocjzmi_.jl:7\nin expression starting at /tmp/tmptocjzmi_.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return 0 \n    else\
    \ \n        return 1 + starts_one_ends(n / 10) \nend\n\"\"\"\n    Given a positive\
    \ integer n, return the count of the numbers of n-digit\n    positive integers\
    \ that start or end with 1.\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\
    \t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpuuyroxih.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpuuyroxih.jl:1\n\
    in expression starting at /tmp/tmpuuyroxih.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        then return 1\n \
    \       else return starts_one_ends(n//10)\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(123456789)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(1234567890)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(12345678901)\n</cell>\n<code\
    \ language=julia-1.3>\nstarts_one_ends(123456789012)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(1234567890123)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(12345678901234)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(12345678901234567)\n</cell>\n\
    <code language=julia-1.3>\nstarts_one_ends(123456789012345678)\n</cell>\n<code\
    \ language=julia-1.3>\nstarts_one_ends(1234567890123456788)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(12345678901234567889)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(123456789012345678899)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(1234567890123456788999)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(12345678901234567889999)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(123456789012345678899999)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(1234567890123456788999999)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(12345678901234567889999999)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(1234567890123456788999999999)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(12345678901234567889999999999)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(123456789012345678899999999999)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(12345678901234567889999999999999)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(123456789012345678899999999999998)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(1234567890123456788999999999999987)\n\
    </cell>\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmptdl5i033.jl:7\nin expression starting at /tmp/tmptdl5i033.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return 1 \n    else\
    \ \n        return starts_one_ends(n / 10) + 1 \nend\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10)\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfjm1ey21.jl:11\nin expression starting at\
    \ /tmp/tmpfjm1ey21.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return n\n    else\
    \ \n        return starts_one_ends(n / 10) + n % 10\nend\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(10)\n</cell>\n<code language=julia-1.3>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp5yl9m6i.jl:11\nin expression starting at\
    \ /tmp/tmpp5yl9m6i.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return 1 \n    else\
    \ \n        return starts_one_ends(n//10) + starts_one_ends(n%10) + 1 \nend\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(100)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the number of positive integers less than or\
    \ equal to a given integer n.\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3)\
    \ == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpefx09718.jl:11\nin expression starting at\
    \ /tmp/tmpefx09718.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        then return 1\n \
    \   else if n < 100 \n        then return 1 + starts_one_ends(n//10)\n    else\
    \ if n < 1000 \n        then return 1 + starts_one_ends(n//100) + starts_one_ends(n//10)\n\
    \    else if n < 10000 \n        then return 1 + starts_one_ends(n//1000) + starts_one_ends(n//100)\
    \ + starts_one_ends(n//10)\n    else if n < 100000 \n        then return 1 + starts_one_ends(n//10000)\
    \ + starts_one_ends(n//1000) + starts_one_ends(n//100) + starts_one_ends(n//10)\n\
    \    else if n < 1000000 \n        then return 1 + starts_one_ends(n//100000)\
    \ + starts_one_ends(n//10000) + starts_one_ends(n//1000) + starts_one_ends(n//100)\
    \ + starts_one_ends(n//10)\n    else if n < 10000000 \n        then return 1 +\
    \ starts_one_ends(n//1000000) + starts_one_ends(n//100000) + starts_one_ends(n//10000)\
    \ + starts_one_ends(n//1000) + starts_one_ends(n//100) + starts_one_ends(n//10)\n\
    \    else if n < 100000000 \n        then return 1 + starts_one_ends(n//10000000)\
    \ + starts_one_ends(n//1000000) + starts_one_ends(n//100000) + starts_one_ends(n//10000)\
    \ + starts_one_ends(n//1000) + starts_one_ends(n//100) + starts_one_ends(n//10)\n\
    \    else if n < 1000000000 \n        then return 1 + starts_one_ends(n//100000000)\
    \ + starts_one_ends(n//10000000) + starts_one_ends(n//1000000) + starts_one_ends(n//100000)\
    \ + starts_one_ends(n//10000) + starts_one_ends(n//1000) + starts_one_ends(n//100)\
    \ + starts_one_ends(n//10)\n    else if n < 10000000000 \n        then return\
    \ 1 + starts_one_ends(n//1000000000) + starts_one_ends(n//100000000) + starts_one_ends(n//10000000)\
    \ + starts_one_ends(n//1000000) + starts_one_ends(n//100000) + starts_one_ends(n//10000)\
    \ + starts_one_ends(n//1000) + starts_one_ends(n//100) + start\nusing Test\n\n\
    @testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t\
    @test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp5vquro_y.jl:7\nin expression starting at /tmp/tmp5vquro_y.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return n\n    else\
    \ \n        return starts_one_ends(n//10)*10 + starts_one_ends(n%10)\nend\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(100)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(100000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(100000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(1000000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10000000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(10000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(100000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(10000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(100000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(10000000000000000000000000)\n</cell>\n\
    <code language=juli\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3)\
    \ == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpktnwtuxd.jl:11\nin expression starting at\
    \ /tmp/tmpktnwtuxd.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n \
    \   else if n == 1 \n        then return 1\n    else \n        local count = 1\n\
    \        local i = 1\n        while i <= n \n            do if i mod 10 == 1 \n\
    \                then count = count + 1\n                else count = count +\
    \ 1\n            end\n            i = i + 1\n        end\n        return count\n\
    \    end\nend\n</cell>\n<code language=julia-1.3>\nusing Test\n\n@testset begin\n\
    \ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpjao2llu9.jl:7\nin expression starting at /tmp/tmpjao2llu9.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 1 \n        then return 1\n \
    \   else \n        sum((starts_one_ends(n-1) + ends_one_starts(n-1)))\nend\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpvk9udj15.jl:7\nin expression starting at /tmp/tmpvk9udj15.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n \
    \   else if n == 1 \n        then return 1\n    else if n % 2 == 0 \n        then\
    \ return starts_one_ends(n / 2)\n    else \n        return starts_one_ends(n /\
    \ 2) + starts_one_ends(n / 2)\nend\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the number of positive\
    \ integers that start or end with 2.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\
    \t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpcshw7he_.jl:7\nin expression starting at /tmp/tmpcshw7he_.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 1 \n        then return 1\n \
    \   else \n        count_starts_ends(n-1) + count_starts_ends(n+1)\nend\n</cell>\n\
    <code language=julia-1.5>\ncount_starts_ends(10)\n</cell>\n<code language=julia-1.5>\n\
    count_starts_ends(100)\n</cell>\n<code language=julia-1.5>\ncount_starts_ends(1000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(10000)\n</cell>\n<code language=julia-1.5>\n\
    count_starts_ends(100000)\n</cell>\n<code language=julia-1.5>\ncount_starts_ends(1000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(10000000)\n</cell>\n<code\
    \ language=julia-1.5>\ncount_starts_ends(100000000)\n</cell>\n<code language=julia-1.5>\n\
    count_starts_ends(1000000000)\n</cell>\n<code language=julia-1.5>\ncount_starts_ends(10000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(100000000000)\n</cell>\n\
    <code language=julia-1.5>\ncount_starts_ends(1000000000000)\n</cell>\n<code language=julia-1.5>\n\
    count_starts_ends(10000000000000)\n</cell>\n<code language=julia-1.5>\ncount_starts_ends(100000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(1000000000000000)\n</cell>\n\
    <code language=julia-1.5>\ncount_starts_ends(10000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\ncount_starts_ends(100000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    count_starts_ends(1000000000000000000)\n</cell>\n<code language=julia-1.5>\ncount_starts_ends(10000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(100000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(1000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(10000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(100000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(1000000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(10000000000000000000000000)\n\
    </cell>\n<code language=julia-1.5\nusing Test\n\n@testset begin\n\ncandidate =\
    \ starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t\
    @test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpxaylkp2i.jl:7\nin expression starting at /tmp/tmpxaylkp2i.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 1 \n        then return 1 \n\
    \        else return 0 \n    else \n        local count = 0 \n        local i\
    \ = 1\n        while i <= n \n            do \n                if i%10 == 1 \n\
    \                    then count = count + 1 \n                    else break \n\
    \                end \n                i = i + 1\n            end \n        return\
    \ count \n    end \nend \n</cell>\n<code language=julia-1.3>\nstarts_one_ends(10)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(100)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(1000)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(10000)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(100000)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(1000000)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(10000000)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(100000000)\n</cell>\n<code\
    \ language=julia-1.3>\nstarts_one_ends(1000000000)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(10000000000)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(100000000000)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(1000000000000)\n</cell>\n\
    <code language=julia-1.3>\nstarts_one_ends(10000000000000)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(100000000000000)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(1000000000000000)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(10000000000000000)\n</cell>\n\
    <code language=julia-1.3>\nstarts_one_ends(100000000000000000)\n</cell>\n<code\
    \ language=julia-1.3>\nstarts_one_ends(1000000000000000000)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(10000000000000000000)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(100000000000000000000)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(1000000000000000000000)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(10000000000000000000000)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(100000000000000000000000)\n\
    </cell>\n<code language=julia-1.3>\nstart\nusing Test\n\n@testset begin\n\ncandidate\
    \ = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\
    \t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpmis6ck3e.jl:7\nin expression starting at /tmp/tmpmis6ck3e.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n \
    \   else if n == 1 \n        then return 1\n    else \n        let\n         \
    \   digits = digits(n)\n            start = digits[1]\n            end = digits[end]\n\
    \            count = (end - start) * (starts_one_ends(n - start) + ends_one_starts(n\
    \ - end))\n        in \n            count \n        end\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    Given a positive integer n, return the\
    \ count of the numbers of n-digit\n    positive integers that start or end with\
    \ 1.\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3)\
    \ == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmptx26xwtk.jl:7\nin expression starting at /tmp/tmptx26xwtk.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 1 \n        then return 1\n \
    \       else return 0\n    end\nend\n\"\"\"\n    Given a positive integer n, return\
    \ the count of the numbers of n-digit\n    positive integers that start or end\
    \ with 1.\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3)\
    \ == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmphf5h5rzv.jl:7\nin expression starting at /tmp/tmphf5h5rzv.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return 1 \n    else\
    \ \n        return starts_one_ends(n//10) + 1 \nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpke8h4iwl.jl:11\nin expression starting at\
    \ /tmp/tmpke8h4iwl.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n \
    \   else if n == 1 \n        then return 1\n    else \n        let\n         \
    \   digits = floor(log(n,10))\n            digits_start = floor(digits/2)\n  \
    \          digits_end = floor(digits/2)\n            digits_middle = floor(digits/2)\n\
    \            digits_middle2 = floor(digits/2)\n            digits_middle3 = floor(digits/2)\n\
    \            digits_middle4 = floor(digits/2)\n            digits_middle5 = floor(digits/2)\n\
    \            digits_middle6 = floor(digits/2)\n            digits_middle7 = floor(digits/2)\n\
    \            digits_middle8 = floor(digits/2)\n            digits_middle9 = floor(digits/2)\n\
    \            digits_middle10 = floor(digits/2)\n            digits_middle11 =\
    \ floor(digits/2)\n            digits_middle12 = floor(digits/2)\n           \
    \ digits_middle13 = floor(digits/2)\n            digits_middle14 = floor(digits/2)\n\
    \            digits_middle15 = floor(digits/2)\n            digits_middle16 =\
    \ floor(digits/2)\n            digits_middle17 = floor(digits/2)\n           \
    \ digits_middle18 = floor(digits/2)\n            digits_middle19 = floor(digits/2)\n\
    \            digits_middle20 = floor(digits/2)\n            digits_middle21 =\
    \ floor(digits/2)\n            digits_middle22 = floor(digits/2)\n           \
    \ digits_middle23 = floor(digits/2)\n            digits_middle24 = floor(digits/2)\n\
    \            digits_middle25 = floor(digits/2)\n            digits_middle26 =\
    \ floor(digits/2)\n            digits_middle27 = floor(digits/2)\n           \
    \ digits_middle28 = floor(digits/2)\n            digits_middle29 = floor(digits/2)\n\
    \            digits_middle30 = floor(digits/2)\n            digits_middle31 =\
    \ floor(digits/2)\n            digits_middle32 = floor(digits/2)\n           \
    \ digits_middle33 = floor(digits/2)\n            digits_middle34 = floor(digits/2)\n\
    \            digits_middle35 = floor(digits/2)\n            digits_middle36 =\
    \ floor(digits/2)\n            digits_middle37 = floor(digits/2)\n           \
    \ digits_middle38 = floor(digits/2)\n            digits_middle39 = floor(digits/2)\n\
    \            digits_middle40 = floor(digits/2)\n            digits_middle41 =\
    \ floor(digits/2)\n            digits_middle42 = floor(digits/2)\n           \
    \ digits_middle43 = floor(digits/\nusing Test\n\n@testset begin\n\ncandidate =\
    \ starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t\
    @test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpuqr3gk78.jl:7\nin expression starting at /tmp/tmpuqr3gk78.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n \
    \   else if n < 0 \n        then return -1\n    else if n == 1 \n        then\
    \ return 1\n    else \n        local count = 1\n        local i = 1\n        while\
    \ i <= n \n            do if i%10 == 1 \n                then count = count +\
    \ 1\n                else break\n            end\n            i = i + 1\n    \
    \    end\n        return count\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\
    \n    Given a positive integer n, return the count of the numbers of n-digit\n\
    \    positive integers that start or end with 0.\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp3nm_ygcy.jl:7\nin expression starting at /tmp/tmp3nm_ygcy.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 1 \n        then return 1\n \
    \       else return starts_one_ends(n-1) + ends_one_starts(n-1)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpg0othvn5.jl:7\nin expression starting at /tmp/tmpg0othvn5.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 1 \n        then return 1\n \
    \   else \n        count_starts_ends(n-1)\nend\n</cell>\n<code language=julia-1.5>\n\
    count_starts_ends(10)\n</cell>\n<code language=julia-1.5>\ncount_starts_ends(100)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(1000)\n</cell>\n<code language=julia-1.5>\n\
    count_starts_ends(10000)\n</cell>\n<code language=julia-1.5>\ncount_starts_ends(100000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(1000000)\n</cell>\n<code\
    \ language=julia-1.5>\ncount_starts_ends(10000000)\n</cell>\n<code language=julia-1.5>\n\
    count_starts_ends(100000000)\n</cell>\n<code language=julia-1.5>\ncount_starts_ends(1000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(10000000000)\n</cell>\n\
    <code language=julia-1.5>\ncount_starts_ends(100000000000)\n</cell>\n<code language=julia-1.5>\n\
    count_starts_ends(1000000000000)\n</cell>\n<code language=julia-1.5>\ncount_starts_ends(10000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(100000000000000)\n</cell>\n\
    <code language=julia-1.5>\ncount_starts_ends(1000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\ncount_starts_ends(10000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    count_starts_ends(100000000000000000)\n</cell>\n<code language=julia-1.5>\ncount_starts_ends(1000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(10000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(100000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(1000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(10000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(100000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(1000000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(10000000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(100\nusing Test\n\n@testset\
    \ begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpbr6bnzxl.jl:7\nin expression starting at /tmp/tmpbr6bnzxl.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 1 \n        return 1 \n    else\
    \ \n        return starts_one_ends(n-1) + ends_one_starts(n-1)\nend\n</cell>\n\
    <code language=julia-1.3>\nstarts_one_ends(10)\n</cell>\n<code language=julia-1.3>\n\
    using Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplvkma432.jl:11\nin expression starting at\
    \ /tmp/tmplvkma432.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 0 \n        error(\"n must be\
    \ positive\")\n    else if n == 0 \n        1\n    else if n == 1 \n        1\n\
    \    else \n        1 + starts_one_ends(n - 1)\nend\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(10)\n</cell>\n<text>\nExercise: Write a function that returns\
    \ the number of positive integers less than or equal to n.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0kgx1agb.jl:8\nin expression starting at /tmp/tmp0kgx1agb.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return n\n    else\
    \ \n        return starts_one_ends(n//10) + n%10 == 1 ? 1 : 0\nend\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(123456789)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the number of integers in the range $[1,n]$\
    \ that are divisible by $k$. For example, for $k = 3$ and $n = 10$, the output\
    \ should be $5$.\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3)\
    \ == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsyx56gvl.jl:11\nin expression starting at\
    \ /tmp/tmpsyx56gvl.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n \
    \   else if n == 1 \n        then return 1\n    else \n        local count = 1\n\
    \        local i = 2\n        while i <= n \n            do if i%10 == 1 \n  \
    \              then count = count + 1\n                else return count\n   \
    \         end\n            i = i + 1\n        end\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\n    Given a positive integer n, return the count\
    \ of the numbers of n-digit\n    positive integers that start or end with 0.\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t\
    @test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) ==\
    \ 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp8dlt8431.jl:7\nin expression starting at /tmp/tmp8dlt8431.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 1 \n        return 1 \n    else\
    \ \n        return starts_one_ends(n-1) + ends_one_starts(n-1) \nend\n</cell>\n\
    <code language=julia-1.3>\n\"\"\"\n    Given a positive integer n, return the\
    \ count of the numbers of n-digit\n    positive integers that start or end with\
    \ 1.\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3)\
    \ == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuy1b_4i0.jl:11\nin expression starting at\
    \ /tmp/tmpuy1b_4i0.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n \
    \   else if n == 1 \n        then return 1\n    else \n        count_one_ends(n-1)\
    \ + count_one_ends(n-2) + count_one_ends(n-3)\nend\n</cell>\n<code language=julia-1.5>\n\
    count_one_ends(10)\n</cell>\n<code language=julia-1.5>\ncount_one_ends(100)\n\
    </cell>\n<code language=julia-1.5>\ncount_one_ends(1000)\n</cell>\n<code language=julia-1.5>\n\
    count_one_ends(10000)\n</cell>\n<code language=julia-1.5>\ncount_one_ends(100000)\n\
    </cell>\n<code language=julia-1.5>\ncount_one_ends(1000000)\n</cell>\n<code language=julia-1.5>\n\
    count_one_ends(10000000)\n</cell>\n<code language=julia-1.5>\ncount_one_ends(100000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_one_ends(1000000000)\n</cell>\n<code\
    \ language=julia-1.5>\ncount_one_ends(10000000000)\n</cell>\n<code language=julia-1.5>\n\
    count_one_ends(100000000000)\n</cell>\n<code language=julia-1.5>\ncount_one_ends(1000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_one_ends(10000000000000)\n</cell>\n\
    <code language=julia-1.5>\ncount_one_ends(100000000000000)\n</cell>\n<code language=julia-1.5>\n\
    count_one_ends(1000000000000000)\n</cell>\n<code language=julia-1.5>\ncount_one_ends(10000000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_one_ends(100000000000000000)\n</cell>\n\
    <code language=julia-1.5>\ncount_one_ends(1000000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\ncount_one_ends(10000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    count_one_ends(100000000000000000000)\n</cell>\n<code language=julia-1.5>\ncount_one_ends(1000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_one_ends(10000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_one_ends(100000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_one_ends(1000000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_one_ends(10000000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_one_ends(100000000000000000000000000\n\
    using Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpriqn4_0q.jl:7\nin expression starting at /tmp/tmpriqn4_0q.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 1 \n        then return 1\n \
    \       else return starts_one_ends(n-1) + ends_one_starts(n-1)\n    end\nend\n\
    </cell>\n<code language=julia-1.0>\nstarts_one_ends(10)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that counts the number of positive integers that are\ndivisible\
    \ by 7 and that are between 10 and 99.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\
    \t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmprjartjb3.jl:7\nin expression starting at /tmp/tmprjartjb3.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0 \n\
    \    else \n        local i::Int64 = 1\n        local count::Int64 = 0\n     \
    \   while i <= n \n            do if i%10 == 1 \n                then count =\
    \ count + 1 \n                else break \n            end \n            i = i\
    \ + 1\n        end\n        return count\nend\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(10)\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(100)\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_ends(1000)\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(10000)\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(100000)\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_ends(1000000)\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(10000000)\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(100000000)\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_ends(1000000000)\n</cell>\n<code\
    \ language=julia-1.4>\nstarts_one_ends(10000000000)\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(100000000000)\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(1000000000000)\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_ends(1000000000001)\n</cell>\n\
    <code language=julia-1.4>\nstarts_one_ends(1000000000002)\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(1000000000003)\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(1000000000004)\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_ends(1000000000005)\n</cell>\n\
    <code language=julia-1.4>\nstarts_one_ends(1000000000006)\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(1000000000007)\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(1000000000008)\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_ends(1000000000009)\n</cell>\n\
    <code language=julia-1.4>\nstarts_one_ends(1000000000010)\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(1000000000011)\n</cell>\n<code language=julia-1.4>\nstarts_\n\
    using Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp_m8e59un.jl:7\nin expression starting at /tmp/tmp_m8e59un.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 1 \n        then return 1 \n\
    \        else return starts_one_ends(n-1) + 1 \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10)\n</cell>\n<text>\nExercise: Write a function that returns\
    \ the number of positive integers that start or end with 2.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpwo2vkgav.jl:7\nin expression starting at /tmp/tmpwo2vkgav.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 1 \n        then return 1 \n\
    \        else return 0 \n    else \n        n <- starts_one_ends(n-1) \n     \
    \   if n % 10 == 1 \n            then return 1 + starts_one_ends(n) \n       \
    \     else return starts_one_ends(n) \nend\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(10)\n</cell>\n<code language=julia-1.3>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp8ak7j2jy.jl:7\nin expression starting at /tmp/tmp8ak7j2jy.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return 0 \n    else\
    \ \n        return 1 + starts_one_ends(n / 10) \nend\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of positive integers that start or end with 2.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpid5lxavm.jl:11\nin expression starting at\
    \ /tmp/tmpid5lxavm.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 1 \n        return 1 \n    else\
    \ \n        return starts_one_ends(n-1) + ends_one_starts(n-1) \nend\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns the number of positive integers that start or end\
    \ with 2.\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpomnl5ehj.jl:11\nin expression starting at\
    \ /tmp/tmpomnl5ehj.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n \
    \   else \n        x <- starts_one_ends(n-1)\n        if n % 10 == 1 \n      \
    \      then return x + 1\n        else return x\nend\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(10000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(100000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(100000000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(10000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(100000000000000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000000000000000000000)\n\
    using Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpe00x8lh2.jl:7\nin expression starting at /tmp/tmpe00x8lh2.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0 \n\
    \    else if n == 1 \n        then return 1 \n    else \n        local i::Int64\
    \ = 1\n        local count::Int64 = 0\n        while i <= n \n            do if\
    \ i%10 == 1 \n                then count = count + 1 \n                else break\
    \ \n            end\n            i = i + 1\n        end\n        return count\n\
    \    end\nend\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(10)\n</cell>\n\
    <code language=julia-1.4>\nstarts_one_ends(100)\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(1000)\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(10000)\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_ends(100000)\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(1000000)\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(10000000)\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_ends(100000000)\n</cell>\n<code\
    \ language=julia-1.4>\nstarts_one_ends(1000000000)\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(10000000000)\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(100000000000)\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_ends(1000000000000)\n</cell>\n\
    <code language=julia-1.4>\nstarts_one_ends(10000000000000)\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(100000000000000)\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(1000000000000000)\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_ends(10000000000000000)\n</cell>\n\
    <code language=julia-1.4>\nstarts_one_ends(100000000000000000)\n</cell>\n<code\
    \ language=julia-1.4>\nstarts_one_ends(1000000000000000000)\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(10000000000000000000)\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(100000000000000000000)\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_ends(1000000000000000000000)\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_ends(10000000000000000000000)\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_ends(100000000000000000000000)\n\
    </cell\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpovgcektm.jl:7\nin expression starting at /tmp/tmpovgcektm.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 1 \n        then return 1 \n\
    \        else return starts_one_ends(n-1) + 1 \n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpx3g_ivcg.jl:7\nin expression starting at /tmp/tmpx3g_ivcg.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 1 \n        then return 1\n \
    \       else return 0\n    else if n == 0 \n        then return 0\n        else\
    \ return starts_one_ends(n-1) + ends_one_starts(n-1)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpnarojvs9.jl:7\nin expression starting at /tmp/tmpnarojvs9.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return 1 \n    else\
    \ \n        return starts_one_ends(n//10) + starts_one_ends(n%10) + 1 \nend\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the number of positive integers that start\
    \ or end with 2.\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3)\
    \ == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx_nw0nvw.jl:11\nin expression starting at\
    \ /tmp/tmpx_nw0nvw.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return 1 \n    else\
    \ \n        return starts_one_ends(n//10) + starts_one_ends(n%10) \nend\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(100_000_000)\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt51lscqz.jl:11\nin expression starting at\
    \ /tmp/tmpt51lscqz.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 1 \n        then return 1 \n\
    \        else return 0 \n    else \n        return starts_one_ends(n-1) + ends_one_starts(n-1)\n\
    end\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of positive integers less\
    \ than or equal to n.\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3)\
    \ == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmplwamfj8t.jl:7\nin expression starting at /tmp/tmplwamfj8t.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 0 \n        error(\"n must be\
    \ positive\")\n    else if n == 0 \n        1\n    else \n        1 + starts_one_ends(n\
    \ - 1)\nend\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of positive integers\
    \ that start or end with 2.\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3)\
    \ == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxte194rp.jl:8\nin expression starting at /tmp/tmpxte194rp.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 1 \n        then return 1\n \
    \       else return 0\n    end\nend\n\"\"\"\n    Given a positive integer n, return\
    \ the count of the numbers of n-digit\n    positive integers that start or end\
    \ with 1.\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3)\
    \ == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp8wlbd_1z.jl:7\nin expression starting at /tmp/tmp8wlbd_1z.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n \
    \   else if n == 1 \n        then return 1\n    else \n        count_starts_ends(n-1)\
    \ + count_starts_ends(n-2) + count_starts_ends(n-3) + count_starts_ends(n-4) +\
    \ count_starts_ends(n-5) + count_starts_ends(n-6)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.3>\ncount_starts_ends(10)\n</cell>\n<code language=julia-1.3>\n\
    count_starts_ends(100)\n</cell>\n<code language=julia-1.3>\ncount_starts_ends(1000)\n\
    </cell>\n<code language=julia-1.3>\ncount_starts_ends(10000)\n</cell>\n<code language=julia-1.3>\n\
    count_starts_ends(100000)\n</cell>\n<code language=julia-1.3>\ncount_starts_ends(1000000)\n\
    </cell>\n<code language=julia-1.3>\ncount_starts_ends(10000000)\n</cell>\n<code\
    \ language=julia-1.3>\ncount_starts_ends(100000000)\n</cell>\n<code language=julia-1.3>\n\
    count_starts_ends(1000000000)\n</cell>\n<code language=julia-1.3>\ncount_starts_ends(10000000000)\n\
    </cell>\n<code language=julia-1.3>\ncount_starts_ends(100000000000)\n</cell>\n\
    <code language=julia-1.3>\ncount_starts_ends(1000000000000)\n</cell>\n<code language=julia-1.3>\n\
    count_starts_ends(10000000000000)\n</cell>\n<code language=julia-1.3>\ncount_starts_ends(100000000000000)\n\
    </cell>\n<code language=julia-1.3>\ncount_starts_ends(1000000000000000)\n</cell>\n\
    <code language=julia-1.3>\ncount_starts_ends(10000000000000000)\n</cell>\n<code\
    \ language=julia-1.3>\ncount_starts_ends(100000000000000000)\n</cell>\n<code language=julia-1.3>\n\
    count_starts_ends(1000000000000000000)\n</cell>\n<code language=julia-1.3>\ncount_starts_ends(10000000000000000000)\n\
    </cell>\n<code language=julia-1.3>\ncount_starts_ends(100000000000000000000)\n\
    </cell>\n<code language=julia-1.3>\ncount_starts_ends(1000000000000000000000)\n\
    </cell>\n<code language=julia-1.3>\ncount_starts_ends(10000000000000000000000)\n\
    </cell>\n<code language=julia-1.3>\ncount_starts_ends(100000000000000000000000)\n\
    </cell>\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp9v65xolp.jl:7\nin expression starting at /tmp/tmp9v65xolp.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n \
    \   else if n == 1 \n        then return 1\n    else \n        local count = 1\n\
    \        local i = 1\n        while i <= n \n            do if i%10 == 1 \n  \
    \              then count = count + 1\n                else count = count + 1\n\
    \            end\n            i = i + 1\n        end\n        return count\nend\n\
    </cell>\n<code language=julia-1.3>\n\"\"\"\n    Given a positive integer n, return\
    \ the count of the numbers of n-digit\n    positive integers that start or end\
    \ with 1.\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3)\
    \ == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmph8sj67vj.jl:7\nin expression starting at /tmp/tmph8sj67vj.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 1 \n        then return 1 \n\
    \        else return 0 \n    else \n        n <- n \n        i <- 1 \n       \
    \ count <- 0 \n        while i < n \n            do if n%i==0 \n             \
    \   then count <- count + 1 \n                else i <- i + 1 \n        return\
    \ count \nend \n</cell>\n<code language=julia-1.0>\n\"\"\"\n    Given a positive\
    \ integer n, return the count of the numbers of n-digit\n    positive integers\
    \ that start or end with 1.\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\
    \t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpyttpdtwv.jl:7\nin expression starting at /tmp/tmpyttpdtwv.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        then return 1\n \
    \   else if n < 100 \n        then return 2\n    else if n < 1000 \n        then\
    \ return 3\n    else if n < 10000 \n        then return 4\n    else if n < 100000\
    \ \n        then return 5\n    else if n < 1000000 \n        then return 6\n \
    \   else if n < 10000000 \n        then return 7\n    else if n < 100000000 \n\
    \        then return 8\n    else if n < 1000000000 \n        then return 9\n \
    \   else if n < 10000000000 \n        then return 10\n    else if n < 100000000000\
    \ \n        then return 11\n    else if n < 1000000000000 \n        then return\
    \ 12\n    else if n < 10000000000000 \n        then return 13\n    else if n <\
    \ 100000000000000 \n        then return 14\n    else if n < 1000000000000000 \n\
    \        then return 15\n    else if n < 10000000000000000 \n        then return\
    \ 16\n    else if n < 100000000000000000 \n        then return 17\n    else if\
    \ n < 1000000000000000000 \n        then return 18\n    else if n < 10000000000000000000\
    \ \n        then return 19\n    else if n < 1000000000000000000 \n        then\
    \ return 20\n    else if n < 10000000000000000000 \n        then return 21\n \
    \   else if n < 100000000000000000000 \n        then return 22\n    else if n\
    \ < 1000000000000000000000 \n        then return 23\n    else if n < 10000000000000000000000\
    \ \n        then return 24\n    else if n < 100000000000000000000000 \n      \
    \  then return 25\n    else if n < 1000000000000000000000000 \n        then return\
    \ 26\n    else if n < 10000000000000000000000000 \n        then return 27\n  \
    \  else if n < 100000000000000000000000000 \n        then return 28\n    else\
    \ if n < 1000000000000000000000000000 \n        then return 29\n    else if n\
    \ < 10000000000000000000000000000 \n        then return 30\n    else if n < 100000000000000000000000000000\
    \ \n        then return 31\n    else if n < 1000000000000000000000000000000 \n\
    \        then return 32\n    else if n < 10000000000000000000000000000000 \n \
    \       then return 33\n    else if n < 100000000000000000000000000000000 \n \
    \       then return 34\n    else if n < 1000000000000000000000000000000000 \n\
    \        then return 35\n    else if n < 10000000000000000000000000000000000 \n\
    \        then return 36\n    else if n < 100000000000000000000000000000000000\
    \ \n        then return 37\n    else if n < 1000000000000000000000000000000000000\
    \ \n        then return 38\n    else if n < 100\nusing Test\n\n@testset begin\n\
    \ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpxo5726_a.jl:7\nin expression starting at /tmp/tmpxo5726_a.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        then return 1\n \
    \       else return starts_one_ends(n//10)*10 + starts_one_ends(n%10)\n    end\n\
    end\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(10)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(100)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(1000)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(10000)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(100000)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(1000000)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(10000000)\n</cell>\n<code\
    \ language=julia-1.3>\nstarts_one_ends(100000000)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(1000000000)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(10000000000)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(100000000000)\n</cell>\n<code\
    \ language=julia-1.3>\nstarts_one_ends(1000000000000)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(1000000000001)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(1000000000002)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(1000000000003)\n</cell>\n\
    <code language=julia-1.3>\nstarts_one_ends(1000000000004)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(1000000000005)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(1000000000006)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(1000000000007)\n</cell>\n\
    <code language=julia-1.3>\nstarts_one_ends(1000000000008)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(1000000000009)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(1000000000010)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(1000000000011)\n</cell>\n\
    <code language=julia-1.3>\nstarts_one_ends(1000000000012)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(1000000000013)\n</cell>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\
    \t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpudn_u7hc.jl:7\nin expression starting at /tmp/tmpudn_u7hc.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 1 \n        return 1 \n    else\
    \ \n        return starts_one_ends(n-1) + ends_one_starts(n-1) \nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3)\
    \ == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps00274an.jl:11\nin expression starting at\
    \ /tmp/tmps00274an.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        then return 1\n \
    \       else return starts_one_ends(n//10)*10 + starts_one_ends(n%10)\n    end\n\
    end\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(1001)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of positive integers less\
    \ than or equal to a given integer n.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\
    \t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp70lgfc55.jl:7\nin expression starting at /tmp/tmp70lgfc55.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0 \n\
    \    else if n == 1 \n        then return 1 \n    else \n        count_starts_ends(n-1)\
    \ + count_starts_ends(n-2) \nend\n</cell>\n<code language=julia-1.5>\ncount_starts_ends(10)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(100)\n</cell>\n<code language=julia-1.5>\n\
    count_starts_ends(1000)\n</cell>\n<code language=julia-1.5>\ncount_starts_ends(10000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(100000)\n</cell>\n<code\
    \ language=julia-1.5>\ncount_starts_ends(1000000)\n</cell>\n<code language=julia-1.5>\n\
    count_starts_ends(10000000)\n</cell>\n<code language=julia-1.5>\ncount_starts_ends(100000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(1000000000)\n</cell>\n<code\
    \ language=julia-1.5>\ncount_starts_ends(10000000000)\n</cell>\n<code language=julia-1.5>\n\
    count_starts_ends(100000000000)\n</cell>\n<code language=julia-1.5>\ncount_starts_ends(1000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(10000000000000)\n</cell>\n\
    <code language=julia-1.5>\ncount_starts_ends(100000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\ncount_starts_ends(1000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    count_starts_ends(10000000000000000)\n</cell>\n<code language=julia-1.5>\ncount_starts_ends(100000000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(1000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\ncount_starts_ends(10000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\ncount_starts_ends(100000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\ncount_starts_ends(1000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\ncount_starts_ends(10000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\ncount_starts_ends(100000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\ncount_starts_ends(1000000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\ncount_starts_ends(100\nusing Test\n\n@testset begin\n\
    \ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpc4t9_nps.jl:7\nin expression starting at /tmp/tmpc4t9_nps.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        then return 1 \n\
    \        else return starts_one_ends(n-1) + starts_one_ends(n-2) \n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the number of positive integers less than or\
    \ equal to a given integer n.\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3)\
    \ == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmprye7jmrt.jl:7\nin expression starting at /tmp/tmprye7jmrt.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 0 \n        error(\"n must be\
    \ positive\")\n    else if n == 0 \n        1\n    else \n        1 + starts_one_ends(n-1)\n\
    end\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(10)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of positive integers that\
    \ end with 2.\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t\
    @test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) ==\
    \ 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7d3qv8ds.jl:8\nin expression starting at /tmp/tmp7d3qv8ds.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return 1 \n    else\
    \ \n        return starts_one_ends(n//10) + starts_one_ends(n%10) \nend\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(123456789)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the number of positive integers less than or\
    \ equal to n.\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t\
    @test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) ==\
    \ 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp35hvo2v_.jl:11\nin expression starting at\
    \ /tmp/tmp35hvo2v_.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 0 \n        error(\"n must be\
    \ positive\")\n    else if n == 0 \n        1\n    else \n        1 + starts_one_ends(n\
    \ - 1)\nend\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n\
    <text>\nExercise: Write a function that returns the number of positive integers\
    \ that start or end with 2.\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3)\
    \ == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2k1ijhwq.jl:8\nin expression starting at /tmp/tmp2k1ijhwq.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 1 \n        then return 1\n \
    \   else if n == 0 \n        then return 0\n    else \n        begin\n       \
    \     local count = 1\n            while n >= 10 \n                do \n     \
    \               n = n / 10\n                    count = count + 1\n          \
    \  end\n            return count\n        end\nend\n</cell>\n<code language=julia-1.4>\n\
    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n\
    \    positive integers that start or end with 1.\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp4fi3gekw.jl:7\nin expression starting at /tmp/tmp4fi3gekw.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n \
    \   else if n == 1 \n        then return 1\n    else \n        local i::Int64\
    \ = 1\n        local count::Int64 = 0\n        while i <= n \n            do if\
    \ i%10 == 1 \n                then count = count + 1\n                else break\n\
    \            end\n            i = i + 1\n        end\n        return count\n \
    \   end\nend\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(10)\n</cell>\n\
    <code language=julia-1.4>\nstarts_one_ends(100)\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(1000)\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(10000)\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_ends(100000)\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(1000000)\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(10000000)\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_ends(100000000)\n</cell>\n<code\
    \ language=julia-1.4>\nstarts_one_ends(1000000000)\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(10000000000)\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(100000000000)\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_ends(1000000000000)\n</cell>\n\
    <code language=julia-1.4>\nstarts_one_ends(10000000000000)\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(100000000000000)\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(1000000000000000)\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_ends(10000000000000000)\n</cell>\n\
    <code language=julia-1.4>\nstarts_one_ends(100000000000000000)\n</cell>\n<code\
    \ language=julia-1.4>\nstarts_one_ends(1000000000000000000)\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(10000000000000000000)\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(100000000000000000000)\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_ends(1000000000000000000000)\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_ends(10000000000000000000000)\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_ends(100000000000000000000000)\n\
    </cell>\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpjuprormn.jl:7\nin expression starting at /tmp/tmpjuprormn.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n \
    \   else if n == 1 \n        then return 1\n    else \n        let\n         \
    \   digits = digits(n) \n            digits_count = length(digits)\n         \
    \   digits_sum = sum(digits)\n            \n            count_starts_ends = 0\n\
    \            for i in digits_count \n                do if digits[i] == 1 \n \
    \                   then count_starts_ends += starts_one_ends(digits_sum - digits[i])\n\
    \            count_starts_ends\n        end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n\
    \    positive integers that start or end with 1.\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpkftowlms.jl:7\nin expression starting at /tmp/tmpkftowlms.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        then return 1\n \
    \       else if n < 100 \n            then return 2\n            else if n < 1000\
    \ \n                then return 3\n                else if n < 10000 \n      \
    \              then return 4\n                    else if n < 100000 \n      \
    \                  then return 5\n                        else if n < 1000000\
    \ \n                            then return 6\n                            else\
    \ if n < 10000000 \n                                then return 7\n          \
    \                      else if n < 100000000 \n                              \
    \      then return 8\n                                    else if n < 1000000000\
    \ \n                                        then return 9\n                  \
    \                      else if n < 10000000000 \n                            \
    \                then return 10\n                                            else\
    \ if n < 100000000000 \n                                                then return\
    \ 11\n                                                else if n < 1000000000000\
    \ \n                                                    then return 12\n     \
    \                                               else if n < 10000000000000 \n\
    \                                                        then return 13\n    \
    \                                                    else if n < 100000000000000\
    \ \n                                                            then return 14\n\
    \                                                            else if n < 1000000000000000\
    \ \n                                                                then return\
    \ 15\n                                                                else if\
    \ n < 10000000000000000 \n                                                   \
    \                 then return 16\n                                           \
    \                         else if n < 100000000000000000 \n                  \
    \                                                      then return 17\n      \
    \                                                                  else if n <\
    \ 1000000000000000000 \n                                                     \
    \                       then return 18\n                                     \
    \                                       else if n < 10000000000000000000 \n  \
    \                                                                            \
    \  then return 19\n                                                          \
    \                      else if n < 100000000000000000000 \n                  \
    \                                                                  then return\
    \ 20\n                                                                       \
    \             else if n < 1000000000000000000000 \n                          \
    \                                                              then return 21\n\
    \                                                                            \
    \            else if n < 10000000000000000000000 \n                          \
    \                                                                  then return\
    \ 22\n                                                                       \
    \                     else if n < 100000000000000000000000 \n                \
    \                                                                            \
    \    then return 23\n                                                        \
    \                                        else if n < 1000000000000000000000000\
    \ \n                                                                         \
    \                           then return 24\n                                 \
    \                                                                   else if n\
    \ < 10000000000000000000000000 \n                                            \
    \                                                            then return 25\n\
    \                                                                            \
    \                            else if n < 100000000000000000000000000 \n      \
    \                                                                            \
    \                          then return 26\n                                  \
    \                                                                          else\
    \ if n < 1000000000000000000000000000 \n                                     \
    \                                                                           then\
    \ return 27\n                                                                \
    \                                                else if n < 10000000000000000000000000000\
    \ \n                                                                         \
    \                                           then return 28\n                 \
    \                                                                            \
    \                       else if n < 100000000000000000000000000000 \n        \
    \                                                                            \
    \                                    then return 29\n                        \
    \                                                                            \
    \                    else if n < 1000000000000000000000000000000 \n          \
    \                                                                            \
    \                                      then return 30\n                      \
    \                                                                            \
    \                          else if n < 10000000000000000000000000000000 \n   \
    \                                                                            \
    \                                                 then return 31\n           \
    \                                                                            \
    \                                         else if n < 100000000000000000000000000000000\
    \ \n                                                                         \
    \                                                           then return 32\n \
    \                                                                            \
    \                                                       else if n < 1000000000000000000000000000000000\
    \ \n                                                                         \
    \                                                               then return 33\n\
    \                                                                            \
    \                                                            else if n < 10000000000000000000000000000000000\
    \ \n                                                                         \
    \                                                                   then return\
    \ 34\n                                                                       \
    \                                                                     else if\
    \ n < 100000000000000000000000000000000000 \n                                \
    \                                                                            \
    \                                    then return 35\n                        \
    \                                                                            \
    \                                            else if n < 100000000000000000000000000\n\
    using Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpa3sk2ay_.jl:7\nin expression starting at /tmp/tmpa3sk2ay_.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 1 \n        then return 1 \n\
    \        else return 0 \n    end\nend\n\"\"\"\n    Given a positive integer n,\
    \ return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3)\
    \ == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp0423ijdv.jl:7\nin expression starting at /tmp/tmp0423ijdv.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 1 \n        then return 1 \n\
    \        else return starts_one_ends(n-1) + 1 \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10)\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp1qj0l68g.jl:7\nin expression starting at /tmp/tmp1qj0l68g.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return 1 \n    else\
    \ \n        return starts_one_ends(n//10) + starts_one_ends(n%10) \nend\n</cell>\n\
    <code language=julia-1.4>\nstarts_one_ends(123456789)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the number of positive integers that start\
    \ or end with 2.\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3)\
    \ == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcdn8umgk.jl:11\nin expression starting at\
    \ /tmp/tmpcdn8umgk.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n \
    \   else if n < 0 \n        then return 0\n    else if n == 1 \n        then return\
    \ 1\n    else \n        local count = 1\n        local i = 1\n        while i\
    \ <= n \n            do if starts_one_ends(i) == 1 \n                then count\
    \ = count + 1\n                else return 0\n            end\n            i =\
    \ i + 1\n        end\n        return count\n    end\nend\n\"\"\"\n    \nusing\
    \ Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp2856mjgv.jl:7\nin expression starting at /tmp/tmp2856mjgv.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n \
    \   else if n == 1 \n        then return 1\n    else \n        local i::Int64\
    \ = 1\n        local count::Int64 = 0\n        while i <= n \n            do if\
    \ i%10 == 1 \n                then count = count + 1\n                else break\n\
    \            end\n            i = i + 1\n        end\n        return count\n \
    \   end\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    Given a positive\
    \ integer n, return the count of the numbers of n-digit\n    positive integers\
    \ that start or end with 1.\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\
    \t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp9cypt42_.jl:7\nin expression starting at /tmp/tmp9cypt42_.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return 1 \n    else\
    \ \n        return starts_one_ends(n//10) + starts_one_ends(n%10) + 1 \nend\n\
    </cell>\n<code language=julia-1.0>\nstarts_one_ends(10)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the number of positive integers that start\
    \ or end with 2.\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3)\
    \ == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp30tcmhb4.jl:11\nin expression starting at\
    \ /tmp/tmp30tcmhb4.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n \
    \   else if n == 1 \n        then return 1\n    else if n % 2 == 0 \n        then\
    \ return starts_one_ends(n/2)\n    else \n        return starts_one_ends(n-1)\
    \ + starts_one_ends(n-2) \nend\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(10)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of positive\
    \ integers that start or end with 2.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\
    \t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpbvof916u.jl:7\nin expression starting at /tmp/tmpbvof916u.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0 \n\
    \        else return 1 + starts_one_ends(n - 1) \nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpn669tq5y.jl:7\nin expression starting at /tmp/tmpn669tq5y.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        then return 1\n \
    \       else return starts_one_ends(n//10)*10 + n % 10\n    end\nend\n</cell>\n\
    <code language=julia-1.3>\nstarts_one_ends(100)\n</cell>\n<text>\nExercise\nWrite\
    \ a function that returns the number of integers less than or equal to n that\
    \ start or end with 1.\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3)\
    \ == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp1ip_djsp.jl:7\nin expression starting at /tmp/tmp1ip_djsp.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return n\n    else\
    \ \n        return starts_one_ends(n/10) + n%10 == 1 ? 1 : 0\nend\n</cell>\n<code\
    \ language=julia-1.3>\n\"\"\"\n    Given a positive integer n, return the count\
    \ of the numbers of n-digit\n    positive integers that start or end with 0.\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t\
    @test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) ==\
    \ 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0t2jfqrz.jl:11\nin expression starting at\
    \ /tmp/tmp0t2jfqrz.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 0 \n        error(\"n must be\
    \ positive\")\n    else if n == 0 \n        1\n    else \n        count_starts_ends(n,\
    \ 1)\nend\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2abgrvjy.jl:8\nin expression starting at /tmp/tmp2abgrvjy.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 0 \n        error(\"n must be\
    \ positive\")\n    else if n < 10 \n        return 0 \n    else if n < 100 \n\
    \        return 1 \n    else if n < 1000 \n        return 2 \n    else if n <\
    \ 10000 \n        return 3 \n    else if n < 100000 \n        return 4 \n    else\
    \ if n < 1000000 \n        return 5 \n    else if n < 10000000 \n        return\
    \ 6 \n    else if n < 100000000 \n        return 7 \n    else if n < 1000000000\
    \ \n        return 8 \n    else if n < 10000000000 \n        return 9 \n    else\
    \ if n < 100000000000 \n        return 10 \n    else if n < 1000000000000 \n \
    \       return 11 \n    else if n < 10000000000000 \n        return 12 \n    else\
    \ if n < 100000000000000 \n        return 13 \n    else if n < 1000000000000000\
    \ \n        return 14 \n    else if n < 10000000000000000 \n        return 15\
    \ \n    else if n < 100000000000000000 \n        return 16 \n    else if n < 1000000000000000000\
    \ \n        return 17 \n    else if n < 10000000000000000000 \n        return\
    \ 18 \n    else if n < 100000000000000000000 \n        return 19 \n    else if\
    \ n < 1000000000000000000000 \n        return 20 \n    else if n < 10000000000000000000000\
    \ \n        return 21 \n    else if n < 100000000000000000000000 \n        return\
    \ 22 \n    else if n < 1000000000000000000000000 \n        return 23 \n    else\
    \ if n < 10000000000000000000000000 \n        return 24 \n    else if n < 100000000000000000000000000\
    \ \n        return 25 \n    else if n < 1000000000000000000000000000 \n      \
    \  return 26 \n    else if n < 10000000000000000000000000000 \n        return\
    \ 27 \n    else if n < 100000000000000000000000000000 \n        return 28 \n \
    \   else if n < 1000000000000000000000000000000 \n        return 29 \n    else\
    \ if n < 10000000000000000000000000000000 \n        return 30 \n    else if n\
    \ < 100000000000000000000000000000000 \n        return 31 \n    else if n < 1000000000000000000000000000000000\
    \ \n        return 32 \n    else if n < 10000000000000000000000000000000000 \n\
    \        return 33 \n    else if n < 100000000000000000000000000000000000 \n \
    \       return 34 \n    else if n < 1000000000000000000000000000000000000 \n \
    \       return 35 \n    else if n < 10000000000000000000000000000000000000 \n\
    \        return 36 \n    else if n < 100000000000000000000000000000000000000 \n\
    \        return 37 \n    else if n < 1000000000000000000000000000000000000000\
    \ \n        return 38 \n    else if n < 10000000000000000000000000000000000000000\
    \ \n        return 39 \n    else if n < 100000000000000000000000000000000000000000\
    \ \n        return 40 \n    else if n < 1000000000000000000000000000000000000000000\
    \ \n        return 41 \n    else if n < 1000000000000000000\nusing Test\n\n@testset\
    \ begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpaosu40vb.jl:8\nin expression starting at /tmp/tmpaosu40vb.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 1 \n        then return 1\n \
    \   else \n        let\n            digits = digits(n)\n            first = digits[1]\n\
    \            rest = digits[2:end]\n            count = (first == 1) + (rest ==\
    \ 1)\n        end\n    end\nend\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(123456789)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1234567891)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(12345678901)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(123456789012)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1234567890123)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(12345678901234)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(123456789012345)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1234567890123456)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(12345678901234567)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(123456789012345678)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1234567890123456788)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(12345678901234567889)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(123456789012345678899)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1234567890123456788999)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(12345678901234567889999)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(123456789012345678899999)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1234567890123456788999999)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(12345678901234567889999999)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1234567890123456788999999999)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(12345678901234567889999999999)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(123456789012345678899999999999)\n\
    </cell>\n<code language=julia-1.5\nusing Test\n\n@testset begin\n\ncandidate =\
    \ starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t\
    @test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpbqkc3bat.jl:7\nin expression starting at /tmp/tmpbqkc3bat.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 1 \n        then return 1 \n\
    \        else return 0 \n    end\nend\n\"\"\"\n    Given a positive integer n,\
    \ return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3)\
    \ == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpz7gw8hg4.jl:7\nin expression starting at /tmp/tmpz7gw8hg4.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0 \n\
    \    else \n        x <- starts_one_ends(n-1) \n        if n % x == 0 \n     \
    \       then return 1 + starts_one_ends(n-x) \n            else return 0 \nend\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_ends(10)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the number of positive integers less than or\
    \ equal to a given integer n.\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3)\
    \ == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmprb2kk5k7.jl:7\nin expression starting at /tmp/tmprb2kk5k7.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n \
    \   else if n == 1 \n        then return 1\n    else if n == 2 \n        then\
    \ return 2\n    else if n % 2 == 0 \n        then return starts_one_ends(n / 2)\n\
    \    else \n        return starts_one_ends(n / 2) + starts_one_ends(n / 2 + 1)\n\
    end\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(10)\n</cell>\n<code language=julia-1.4>\n\
    using Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp5qblbfgr.jl:7\nin expression starting at /tmp/tmp5qblbfgr.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 1 \n        then return 1 \n\
    \        else return 0 \n    else \n        n <= 10 \n            ? starts_one_ends(n-1)\
    \ + starts_one_ends(n-2) + starts_one_ends(n-3) + starts_one_ends(n-4) + starts_one_ends(n-5)\
    \ + starts_one_ends(n-6) + starts_one_ends(n-7) + starts_one_ends(n-8) + starts_one_ends(n-9)\
    \ + starts_one_ends(n-10) + starts_one_ends(n-11) + starts_one_ends(n-12) + starts_one_ends(n-13)\
    \ + starts_one_ends(n-14) + starts_one_ends(n-15) + starts_one_ends(n-16) + starts_one_ends(n-17)\
    \ + starts_one_ends(n-18) + starts_one_ends(n-19) + starts_one_ends(n-20) + starts_one_ends(n-21)\
    \ + starts_one_ends(n-22) + starts_one_ends(n-23) + starts_one_ends(n-24) + starts_one_ends(n-25)\
    \ + starts_one_ends(n-26) + starts_one_ends(n-27) + starts_one_ends(n-28) + starts_one_ends(n-29)\
    \ + starts_one_ends(n-30) + starts_one_ends(n-31) + starts_one_ends(n-32) + starts_one_ends(n-33)\
    \ + starts_one_ends(n-34) + starts_one_ends(n-35) + starts_one_ends(n-36) + starts_one_ends(n-37)\
    \ + starts_one_ends(n-38) + starts_one_ends(n-39) + starts_one_ends(n-40) + starts_one_ends(n-41)\
    \ + starts_one_ends(n-42) + starts_one_ends(n-43) + starts_one_ends(n-44) + starts_one_ends(n-45)\
    \ + starts_one_ends(n-46) + starts_one_ends(n-47) + starts_one_ends(n-48) + starts_one_ends(n-49)\
    \ + starts_one_ends(n-50) + starts_one_ends(n-51) + starts_one_ends(n-52) + starts_one_ends(n-53)\
    \ + starts_one_ends(n-54) + starts_one_ends(n-55) + starts_one_ends(n-56) + starts_one_ends(n-57)\
    \ + starts_one_ends(n-58) + starts_one_ends(n-59) + starts_one_ends(n-60) + starts_one_ends(n-61)\
    \ + start\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp7ai2xieq.jl:7\nin expression starting at /tmp/tmp7ai2xieq.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return 1 \n    else\
    \ \n        return starts_one_ends(n//10) + starts_one_ends(n%10) \nend\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(100)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(100000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(100000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(1000000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000001)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000002)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000003)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000004)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000005)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000006)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000007)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000008)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000009)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000010)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000011)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000012)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000013)\n</cell>\n<code language=julia-\nusing Test\n\n\
    @testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t\
    @test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_95nv0ui.jl:11\nin expression starting at\
    \ /tmp/tmp_95nv0ui.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return 1 \n    else\
    \ \n        return starts_one_ends(n//10) + 1 \nend\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10)\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpggktk68f.jl:11\nin expression starting at\
    \ /tmp/tmpggktk68f.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        then return 0\n \
    \   else if n < 100\n        then return 1\n    else if n < 1000\n        then\
    \ return 2\n    else if n < 10000\n        then return 3\n    else if n < 100000\n\
    \        then return 4\n    else if n < 1000000\n        then return 5\n    else\
    \ if n < 10000000\n        then return 6\n    else if n < 100000000\n        then\
    \ return 7\n    else if n < 1000000000\n        then return 8\n    else if n <\
    \ 10000000000\n        then return 9\n    else if n < 100000000000\n        then\
    \ return 10\n    else if n < 1000000000000\n        then return 11\n    else if\
    \ n < 10000000000000\n        then return 12\n    else if n < 100000000000000\n\
    \        then return 13\n    else if n < 1000000000000000\n        then return\
    \ 14\n    else if n < 10000000000000000\n        then return 15\n    else if n\
    \ < 100000000000000000\n        then return 16\n    else if n < 1000000000000000000\n\
    \        then return 17\n    else if n < 10000000000000000000\n        then return\
    \ 18\n    else if n < 100000000000000000000\n        then return 19\n    else\
    \ if n < 1000000000000000000000\n        then return 20\n    else if n < 10000000000000000000000\n\
    \        then return 21\n    else if n < 100000000000000000000000\n        then\
    \ return 22\n    else if n < 1000000000000000000000000\n        then return 23\n\
    \    else if n < 10000000000000000000000000\n        then return 24\n    else\
    \ if n < 100000000000000000000000000\n        then return 25\n    else if n <\
    \ 1000000000000000000000000000\n        then return 26\n    else if n < 10000000000000000000000000000\n\
    \        then return 27\n    else if n < 100000000000000000000000000000\n    \
    \    then return 28\n    else if n < 1000000000000000000000000000000\n       \
    \ then return 29\n    else if n < 10000000000000000000000000000000\n        then\
    \ return 30\n    else if n < 100000000000000000000000000000000\n        then return\
    \ 31\n    else if n < 1000000000000000000000000000000000\n        then return\
    \ 32\n    else if n < 1000000000000000000000000000000000\n        then return\
    \ 33\n    else if n < 1000000000000000000000000000000000\n        then return\
    \ 34\n    else if n < 1000000000000000000000000000000000\n        then return\
    \ 35\n    else if n < 1000000000000000000000000000000000\n        then return\
    \ 36\n    else if n < 1000000000000000000000000000000000\n        then return\
    \ 37\n    else if n < 1000000000000000000000000000000000\n        then return\
    \ 38\n    else if n < 1000000000000000000000000000000000\n        then \nusing\
    \ Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpp7prhrzk.jl:7\nin expression starting at /tmp/tmpp7prhrzk.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n \
    \   else \n        local i::Int64 = 1\n        local count::Int64 = 0\n      \
    \  while i <= n \n            do if i %% 10 == 1 \n                then count\
    \ = count + 1\n                else break\n            end\n            i = i\
    \ + 1\n        end\n        return count\n    end\nend\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(10)\n</cell>\n<code language=julia-1.4>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpgejy3klj.jl:7\nin expression starting at /tmp/tmpgejy3klj.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n \
    \   else if n == 1 \n        then return 1\n    else \n        return starts_one_ends(n-1)\
    \ + ends_one_starts(n-1)\nend\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\
    \t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpdx11y5le.jl:7\nin expression starting at /tmp/tmpdx11y5le.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 1 \n        then return 1\n \
    \   else if n == 0 \n        then return 0\n    else \n        local i::Int64\
    \ = 1\n        local count::Int64 = 0\n        while i <= n \n            do if\
    \ i%10 == 1 \n                then count = count + 1\n                else break\n\
    \            end\n            i = i + 1\n        end\n        return count\n \
    \   end\nend\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(100)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(1000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(10000000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(100000000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(100000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(1000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10000000000000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000000000000000)\n\
    </cell>\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpmvqkhv22.jl:7\nin expression starting at /tmp/tmpmvqkhv22.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n \
    \   else if n == 1 \n        then return 1\n    else if n % 2 == 0 \n        then\
    \ return starts_one_ends(n / 2)\n    else \n        return starts_one_ends(n /\
    \ 2) + starts_one_ends(n / 2 - 1)\nend\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(1000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(10000000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(100000000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(100000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(1000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10000000000000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100\nusing Test\n\n@testset\
    \ begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp4_vnc2j9.jl:7\nin expression starting at /tmp/tmp4_vnc2j9.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n \
    \   else \n        count_starts_ends(n-1) + count_starts_ends(n-2) + count_starts_ends(n-3)\
    \ + count_starts_ends(n-4) + count_starts_ends(n-5) + count_starts_ends(n-6)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\ncount_starts_ends(10)\n</cell>\n\
    <code language=julia-1.5>\ncount_starts_ends(100)\n</cell>\n<code language=julia-1.5>\n\
    count_starts_ends(1000)\n</cell>\n<code language=julia-1.5>\ncount_starts_ends(10000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(100000)\n</cell>\n<code\
    \ language=julia-1.5>\ncount_starts_ends(1000000)\n</cell>\n<code language=julia-1.5>\n\
    count_starts_ends(10000000)\n</cell>\n<code language=julia-1.5>\ncount_starts_ends(100000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(1000000000)\n</cell>\n<code\
    \ language=julia-1.5>\ncount_starts_ends(10000000000)\n</cell>\n<code language=julia-1.5>\n\
    count_starts_ends(100000000000)\n</cell>\n<code language=julia-1.5>\ncount_starts_ends(1000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(10000000000000)\n</cell>\n\
    <code language=julia-1.5>\ncount_starts_ends(100000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\ncount_starts_ends(1000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    count_starts_ends(10000000000000000)\n</cell>\n<code language=julia-1.5>\ncount_starts_ends(100000000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(1000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\ncount_starts_ends(10000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\ncount_starts_ends(100000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\ncount_starts_ends(1000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\ncount_starts_ends(10000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\ncount_starts_ends(100000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\ncount_starts_end\nusing Test\n\n@testset begin\n\n\
    candidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpawdfilag.jl:7\nin expression starting at /tmp/tmpawdfilag.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0 \n\
    \    else \n        local count = 1\n        local i = 1\n        while i <= n\
    \ \n            do if i%10 == 1 \n                then count = count + 1\n   \
    \             else count = count + 1\n            end\n            i = i + 1\n\
    \        end\n        return count\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(10)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of positive integers less than or equal to n that start or end with\
    \ 1.\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpuv3ngcxv.jl:7\nin expression starting at /tmp/tmpuv3ngcxv.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n \
    \   else \n        local count = 1\n        local i = 2\n        while i <= n\
    \ \n            do if digit(i) == 1 \n                then count = count + 1\n\
    \                else return count\n            end\n            i = i + 1\n \
    \       end\n        return count\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpv6ws7pke.jl:7\nin expression starting at /tmp/tmpv6ws7pke.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 0 \n        error(\"n must be\
    \ positive\")\n    else if n == 0 \n        1\n    else \n        count_starts_ends(n-1,\
    \ 1)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\n\
    candidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmti_bo1r.jl:8\nin expression starting at /tmp/tmpmti_bo1r.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 1 \n        then return 1\n \
    \       else return starts_one_ends(n-1) + ends_one_starts(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpiqdpw0pn.jl:7\nin expression starting at /tmp/tmpiqdpw0pn.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return 0 \n    else\
    \ \n        return 1 + starts_one_ends(n//10) \nend\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(10)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of positive integers that end with 2.\nusing Test\n\n@testset begin\n\
    \ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp72d2gq1a.jl:11\nin expression starting at\
    \ /tmp/tmp72d2gq1a.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 1 \n        then return 1 \n\
    \        else return starts_one_ends(n-1) + 1 \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of positive integers that start or end with 2.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpbsdko96o.jl:7\nin expression starting at /tmp/tmpbsdko96o.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return 0 \n    else\
    \ \n        return 1 + starts_one_ends(n / 10) \nend\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(10)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of positive integers that start or end with 2.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfaso_3tl.jl:11\nin expression starting at\
    \ /tmp/tmpfaso_3tl.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n \
    \   else if n < 0 \n        then return 0\n    else if n == 1 \n        then return\
    \ 1\n    else \n        local count = 1\n        local i = 1\n        while i\
    \ <= n \n            do \n                if i%10 == 1 \n                    and\
    \ i%100 != 11 \n                    and i%100 != 12 \n                    and\
    \ i%100 != 13 \n                    and i%100 != 14 \n                    and\
    \ i%100 != 15 \n                    and i%100 != 16 \n                    and\
    \ i%100 != 17 \n                    and i%100 != 18 \n                    and\
    \ i%100 != 19 \n                    and i%100 != 20 \n                    and\
    \ i%100 != 21 \n                    and i%100 != 22 \n                    and\
    \ i%100 != 23 \n                    and i%100 != 24 \n                    and\
    \ i%100 != 25 \n                    and i%100 != 26 \n                    and\
    \ i%100 != 27 \n                    and i%100 != 28 \n                    and\
    \ i%100 != 29 \n                    and i%100 != 30 \n                    and\
    \ i%100 != 31 \n                    and i%100 != 32 \n                    and\
    \ i%100 != 33 \n                    and i%100 != 34 \n                    and\
    \ i%100 != 35 \n                    and i%100 != 36 \n                    and\
    \ i%100 != 37 \n                    and i%100 != 38 \n                    and\
    \ i%100 != 39 \n                    and i%100 != 40 \n                    and\
    \ i%100 != 41 \n                    and i%100 != 42 \n                    and\
    \ i%100 != 43 \n                    and i%100 != 44 \n                    and\
    \ i%100 != 45 \n                    and i%100 != 46 \n                    and\
    \ i%100 != 47 \n                    and i%100 != 48 \n                    and\
    \ i%100 != 49 \n                    and i%100 != 50 \n                    and\
    \ i%100 != 51 \n                    and i%100 != 52 \n                    and\
    \ i%100 != 53 \n                    and i%100 != 54 \n                    and\
    \ i%100 != 55 \n                    and i%100 != 56 \n                    and\
    \ i%100 != 57 \n                    and i%100 != 58 \n                    and\
    \ i%100 != 59 \n                    and i%100 != 60 \n                    and\
    \ i%100 != 61 \n                    and i%100 != 62 \n                    and\
    \ i%100 != 63 \n                    and i%100 != 64 \n                    \nusing\
    \ Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmph01vbr0r.jl:7\nin expression starting at /tmp/tmph01vbr0r.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0 \n\
    \    else if n < 0 \n        then return 0 \n    else if n == 1 \n        then\
    \ return 1 \n    else \n        local count = 1\n        for i = 2 to n \n   \
    \         do if starts_one_ends(i) == 1 \n                then count = count +\
    \ 1\n                else return 0 \n            end \n        end \n        return\
    \ count \nend \n</cell>\n<code language=julia-1.0>\nusing Test\n\n@testset begin\n\
    \ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp39mss2op.jl:7\nin expression starting at /tmp/tmp39mss2op.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 1 \n        return 1 \n    else\
    \ \n        return starts_one_ends(n-1) + ends_one_starts(n-1) \nend\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgm58rzlc.jl:11\nin expression starting at\
    \ /tmp/tmpgm58rzlc.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 0 \n        error(\"n must be\
    \ positive\")\n    else if n == 0 \n        1\n    else \n        1 + starts_one_ends(n-1)\n\
    end\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(10)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of positive integers less\
    \ than or equal to a given integer n.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\
    \t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm3i683_3.jl:8\nin expression starting at /tmp/tmpm3i683_3.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n \
    \   else if n == 1 \n        then return 1\n    else \n        local count = 1\n\
    \        while n >= 10 \n            do count = count + 1\n            n = n /\
    \ 10\n        end\n        return count\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    using Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpfqamj_nw.jl:7\nin expression starting at /tmp/tmpfqamj_nw.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 1 \n        then return 1\n \
    \   else \n        n <- starts_one_ends(n-1)\n        if n % 10 == 1 \n      \
    \      then return 1 + starts_one_ends(n-1)\n        else return starts_one_ends(n-1)\n\
    end\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp9gzy35ay.jl:7\nin expression starting at /tmp/tmp9gzy35ay.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return 0 \n    else\
    \ \n        return 1 + starts_one_ends(n//10) \nend\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10)\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwtzqtht1.jl:11\nin expression starting at\
    \ /tmp/tmpwtzqtht1.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 0 \n        error(\"n must be\
    \ positive\")\n    else if n == 0 \n        1\n    else \n        1 + starts_one_ends(n-1)\n\
    end\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(100)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(100000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(100000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(1000000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000001)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000002)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000003)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000004)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000005)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000006)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000007)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000008)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000009)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000010)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000011)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000012)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000013)\n</cell>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\
    \t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphl_tanny.jl:8\nin expression starting at /tmp/tmphl_tanny.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 1 \n        then return 1\n \
    \   else if n == 0 \n        then return 0\n    else \n        begin\n       \
    \     local count = 1\n            local i = 1\n            while i <= n \n  \
    \              do \n                    if ((n % i) == 0) \n                 \
    \       then count = count + 1\n                    end\n                    i\
    \ = i + 1\n                end\n            return count\n        end\nend\n</cell>\n\
    <code language=julia-1.3>\n\"\"\"\n    Given a positive integer n, return the\
    \ count of the numbers of n-digit\n    positive integers that start or end with\
    \ 1.\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3)\
    \ == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmppqsmpio1.jl:7\nin expression starting at /tmp/tmppqsmpio1.jl:7\n"
  exit_code: 1
  status: SyntaxError
